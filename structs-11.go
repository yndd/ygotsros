/*
Package ygotsros is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /home/hans/go/pkg/mod/github.com/openconfig/ygot@v0.20.0/genutil/names.go
using the following YANG input files:
	- nokia/YANG/nokia-combined/nokia-conf.yang
Imported modules were sourced from:
	- nokia/YANG/...
*/
package ygotsros

import (
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// NokiaConf_Configure_Groups_Group_Service_Ies_VideoInterface_VideoSap_Ingress represents the /nokia-conf/configure/groups/group/service/ies/video-interface/video-sap/ingress YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ies_VideoInterface_VideoSap_Ingress struct {
	Filter *NokiaConf_Configure_Groups_Group_Service_Ies_VideoInterface_VideoSap_Ingress_Filter `path:"filter" module:"nokia-conf"`
	Qos    *NokiaConf_Configure_Groups_Group_Service_Ies_VideoInterface_VideoSap_Ingress_Qos    `path:"qos" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ies_VideoInterface_VideoSap_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_VideoInterface_VideoSap_Ingress) IsYANGGoStruct() {
}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_VideoInterface_VideoSap_Ingress) GetOrCreateFilter() *NokiaConf_Configure_Groups_Group_Service_Ies_VideoInterface_VideoSap_Ingress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Groups_Group_Service_Ies_VideoInterface_VideoSap_Ingress_Filter{}
	return t.Filter
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_VideoInterface_VideoSap_Ingress) GetOrCreateQos() *NokiaConf_Configure_Groups_Group_Service_Ies_VideoInterface_VideoSap_Ingress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Groups_Group_Service_Ies_VideoInterface_VideoSap_Ingress_Qos{}
	return t.Qos
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ies_VideoInterface_VideoSap_Ingress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_VideoInterface_VideoSap_Ingress) GetFilter() *NokiaConf_Configure_Groups_Group_Service_Ies_VideoInterface_VideoSap_Ingress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ies_VideoInterface_VideoSap_Ingress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_VideoInterface_VideoSap_Ingress) GetQos() *NokiaConf_Configure_Groups_Group_Service_Ies_VideoInterface_VideoSap_Ingress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ies_VideoInterface_VideoSap_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_VideoInterface_VideoSap_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Filter.PopulateDefaults()
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_VideoInterface_VideoSap_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ies_VideoInterface_VideoSap_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_VideoInterface_VideoSap_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_VideoInterface_VideoSap_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ies_VideoInterface_VideoSap_Ingress.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_VideoInterface_VideoSap_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ies_VideoInterface_VideoSap_Ingress_Filter represents the /nokia-conf/configure/groups/group/service/ies/video-interface/video-sap/ingress/filter YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ies_VideoInterface_VideoSap_Ingress_Filter struct {
	Ip *string `path:"ip" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ies_VideoInterface_VideoSap_Ingress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_VideoInterface_VideoSap_Ingress_Filter) IsYANGGoStruct() {
}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Groups_Group_Service_Ies_VideoInterface_VideoSap_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_VideoInterface_VideoSap_Ingress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ies_VideoInterface_VideoSap_Ingress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_VideoInterface_VideoSap_Ingress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_VideoInterface_VideoSap_Ingress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ies_VideoInterface_VideoSap_Ingress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_VideoInterface_VideoSap_Ingress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_VideoInterface_VideoSap_Ingress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ies_VideoInterface_VideoSap_Ingress_Filter.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_VideoInterface_VideoSap_Ingress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ies_VideoInterface_VideoSap_Ingress_Qos represents the /nokia-conf/configure/groups/group/service/ies/video-interface/video-sap/ingress/qos YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ies_VideoInterface_VideoSap_Ingress_Qos struct {
	PolicyName *string `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ies_VideoInterface_VideoSap_Ingress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_VideoInterface_VideoSap_Ingress_Qos) IsYANGGoStruct() {
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Service_Ies_VideoInterface_VideoSap_Ingress_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_VideoInterface_VideoSap_Ingress_Qos) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ies_VideoInterface_VideoSap_Ingress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_VideoInterface_VideoSap_Ingress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_VideoInterface_VideoSap_Ingress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ies_VideoInterface_VideoSap_Ingress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_VideoInterface_VideoSap_Ingress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_VideoInterface_VideoSap_Ingress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ies_VideoInterface_VideoSap_Ingress_Qos.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_VideoInterface_VideoSap_Ingress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipfix represents the /nokia-conf/configure/groups/group/service/ipfix YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipfix struct {
	ExportPolicy map[string]*NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy `path:"export-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipfix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipfix) IsYANGGoStruct() {}

// NewExportPolicy creates a new entry in the ExportPolicy list of the
// NokiaConf_Configure_Groups_Group_Service_Ipfix struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipfix) NewExportPolicy(Name string) (*NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ExportPolicy == nil {
		t.ExportPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ExportPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ExportPolicy", key)
	}

	t.ExportPolicy[key] = &NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy{
		Name: &Name,
	}

	return t.ExportPolicy[key], nil
}

// RenameExportPolicy renames an entry in the list ExportPolicy within
// the NokiaConf_Configure_Groups_Group_Service_Ipfix struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipfix) RenameExportPolicy(oldK, newK string) error {
	if _, ok := t.ExportPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in ExportPolicy", newK)
	}

	e, ok := t.ExportPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ExportPolicy", oldK)
	}
	e.Name = &newK

	t.ExportPolicy[newK] = e
	delete(t.ExportPolicy, oldK)
	return nil
}

// GetOrCreateExportPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Ipfix. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipfix) GetOrCreateExportPolicy(Name string) *NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy {

	key := Name

	if v, ok := t.ExportPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewExportPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateExportPolicy got unexpected error: %v", err))
	}
	return v
}

// GetExportPolicy retrieves the value with the specified key from
// the ExportPolicy map field of NokiaConf_Configure_Groups_Group_Service_Ipfix. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipfix) GetExportPolicy(Name string) *NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.ExportPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteExportPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Ipfix. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipfix) DeleteExportPolicy(Name string) {
	key := Name

	delete(t.ExportPolicy, key)
}

// AppendExportPolicy appends the supplied NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy struct to the
// list ExportPolicy of NokiaConf_Configure_Groups_Group_Service_Ipfix. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipfix) AppendExportPolicy(v *NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ExportPolicy == nil {
		t.ExportPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy)
	}

	if _, ok := t.ExportPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list ExportPolicy %v", key)
	}

	t.ExportPolicy[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipfix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipfix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.ExportPolicy {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipfix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipfix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipfix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipfix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipfix.
func (*NokiaConf_Configure_Groups_Group_Service_Ipfix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy represents the /nokia-conf/configure/groups/group/service/ipfix/export-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy struct {
	Collector      map[NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy_Collector_Key]*NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy_Collector `path:"collector" module:"nokia-conf"`
	Description    *string                                                                                                                                              `path:"description" module:"nokia-conf"`
	Name           *string                                                                                                                                              `path:"name" module:"nokia-conf"`
	TemplateFormat E_NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy_TemplateFormat                                                                         `path:"template-format" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy) IsYANGGoStruct() {}

// NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy_Collector_Key represents the key for list Collector of element /nokia-conf/configure/groups/group/service/ipfix/export-policy.
type NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy_Collector_Key struct {
	RouterInstance string `path:"router-instance"`
	IpAddress      string `path:"ip-address"`
}

// NewCollector creates a new entry in the Collector list of the
// NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy) NewCollector(RouterInstance string, IpAddress string) (*NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy_Collector, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Collector == nil {
		t.Collector = make(map[NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy_Collector_Key]*NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy_Collector)
	}

	key := NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy_Collector_Key{
		RouterInstance: RouterInstance,
		IpAddress:      IpAddress,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Collector[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Collector", key)
	}

	t.Collector[key] = &NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy_Collector{
		RouterInstance: &RouterInstance,
		IpAddress:      &IpAddress,
	}

	return t.Collector[key], nil
}

// RenameCollector renames an entry in the list Collector within
// the NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy) RenameCollector(oldK, newK NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy_Collector_Key) error {
	if _, ok := t.Collector[newK]; ok {
		return fmt.Errorf("key %v already exists in Collector", newK)
	}

	e, ok := t.Collector[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Collector", oldK)
	}
	e.RouterInstance = &newK.RouterInstance
	e.IpAddress = &newK.IpAddress

	t.Collector[newK] = e
	delete(t.Collector, oldK)
	return nil
}

// GetOrCreateCollector retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy) GetOrCreateCollector(RouterInstance string, IpAddress string) *NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy_Collector {

	key := NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy_Collector_Key{
		RouterInstance: RouterInstance,
		IpAddress:      IpAddress,
	}

	if v, ok := t.Collector[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCollector(RouterInstance, IpAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCollector got unexpected error: %v", err))
	}
	return v
}

// GetCollector retrieves the value with the specified key from
// the Collector map field of NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy) GetCollector(RouterInstance string, IpAddress string) *NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy_Collector {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy_Collector_Key{
		RouterInstance: RouterInstance,
		IpAddress:      IpAddress,
	}

	if lm, ok := t.Collector[key]; ok {
		return lm
	}
	return nil
}

// DeleteCollector deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy) DeleteCollector(RouterInstance string, IpAddress string) {
	key := NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy_Collector_Key{
		RouterInstance: RouterInstance,
		IpAddress:      IpAddress,
	}

	delete(t.Collector, key)
}

// AppendCollector appends the supplied NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy_Collector struct to the
// list Collector of NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy_Collector already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy) AppendCollector(v *NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy_Collector) error {
	if v.RouterInstance == nil {
		return fmt.Errorf("invalid nil key for RouterInstance")
	}

	if v.IpAddress == nil {
		return fmt.Errorf("invalid nil key for IpAddress")
	}

	key := NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy_Collector_Key{
		RouterInstance: *v.RouterInstance,
		IpAddress:      *v.IpAddress,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Collector == nil {
		t.Collector = make(map[NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy_Collector_Key]*NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy_Collector)
	}

	if _, ok := t.Collector[key]; ok {
		return fmt.Errorf("duplicate key for list Collector %v", key)
	}

	t.Collector[key] = v
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetTemplateFormat retrieves the value of the leaf TemplateFormat from the NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TemplateFormat is set, it can
// safely use t.GetTemplateFormat() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TemplateFormat == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy) GetTemplateFormat() E_NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy_TemplateFormat {
	if t == nil || t.TemplateFormat == 0 {
		return NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy_TemplateFormat_format1
	}
	return t.TemplateFormat
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.TemplateFormat == 0 {
		t.TemplateFormat = NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy_TemplateFormat_format1
	}
	for _, e := range t.Collector {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy.
func (*NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy_Collector represents the /nokia-conf/configure/groups/group/service/ipfix/export-policy/collector YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy_Collector struct {
	AdminState      E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	IpAddress       *string                     `path:"ip-address" module:"nokia-conf"`
	Mtu             *uint32                     `path:"mtu" module:"nokia-conf"`
	RefreshTimeout  *uint32                     `path:"refresh-timeout" module:"nokia-conf"`
	RouterInstance  *string                     `path:"router-instance" module:"nokia-conf"`
	SourceIpAddress *string                     `path:"source-ip-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy_Collector implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy_Collector) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy_Collector) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy_Collector) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetMtu retrieves the value of the leaf Mtu from the NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mtu is set, it can
// safely use t.GetMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy_Collector) GetMtu() uint32 {
	if t == nil || t.Mtu == nil {
		return 1500
	}
	return *t.Mtu
}

// GetRefreshTimeout retrieves the value of the leaf RefreshTimeout from the NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RefreshTimeout is set, it can
// safely use t.GetRefreshTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RefreshTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy_Collector) GetRefreshTimeout() uint32 {
	if t == nil || t.RefreshTimeout == nil {
		return 600
	}
	return *t.RefreshTimeout
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy_Collector) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// GetSourceIpAddress retrieves the value of the leaf SourceIpAddress from the NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceIpAddress is set, it can
// safely use t.GetSourceIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceIpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy_Collector) GetSourceIpAddress() string {
	if t == nil || t.SourceIpAddress == nil {
		return ""
	}
	return *t.SourceIpAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy_Collector
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy_Collector) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Mtu == nil {
		var v uint32 = 1500
		t.Mtu = &v
	}
	if t.RefreshTimeout == nil {
		var v uint32 = 600
		t.RefreshTimeout = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy_Collector struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy_Collector) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpAddress == nil {
		return nil, fmt.Errorf("nil value for key IpAddress")
	}

	if t.RouterInstance == nil {
		return nil, fmt.Errorf("nil value for key RouterInstance")
	}

	return map[string]interface{}{
		"ip-address":      *t.IpAddress,
		"router-instance": *t.RouterInstance,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy_Collector) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy_Collector"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy_Collector) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy_Collector) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy_Collector.
func (*NokiaConf_Configure_Groups_Group_Service_Ipfix_ExportPolicy_Collector) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe represents the /nokia-conf/configure/groups/group/service/ipipe YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe struct {
	AdminState         E_NokiaTypesSros_AdminState                                         `path:"admin-state" module:"nokia-conf"`
	CeAddressDiscovery *NokiaConf_Configure_Groups_Group_Service_Ipipe_CeAddressDiscovery  `path:"ce-address-discovery" module:"nokia-conf" yangPresence:"true"`
	Customer           *string                                                             `path:"customer" module:"nokia-conf"`
	Description        *string                                                             `path:"description" module:"nokia-conf"`
	Endpoint           map[string]*NokiaConf_Configure_Groups_Group_Service_Ipipe_Endpoint `path:"endpoint" module:"nokia-conf"`
	Sap                map[string]*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap      `path:"sap" module:"nokia-conf"`
	ServiceId          *uint32                                                             `path:"service-id" module:"nokia-conf"`
	ServiceMtu         *int32                                                              `path:"service-mtu" module:"nokia-conf"`
	ServiceName        *string                                                             `path:"service-name" module:"nokia-conf"`
	SpokeSdp           map[string]*NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp `path:"spoke-sdp" module:"nokia-conf"`
	VcSwitching        *bool                                                               `path:"vc-switching" module:"nokia-conf"`
	VpnId              *uint32                                                             `path:"vpn-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe) IsYANGGoStruct() {}

// NewEndpoint creates a new entry in the Endpoint list of the
// NokiaConf_Configure_Groups_Group_Service_Ipipe struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe) NewEndpoint(Name string) (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Endpoint, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Endpoint == nil {
		t.Endpoint = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Ipipe_Endpoint)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Endpoint[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Endpoint", key)
	}

	t.Endpoint[key] = &NokiaConf_Configure_Groups_Group_Service_Ipipe_Endpoint{
		Name: &Name,
	}

	return t.Endpoint[key], nil
}

// RenameEndpoint renames an entry in the list Endpoint within
// the NokiaConf_Configure_Groups_Group_Service_Ipipe struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe) RenameEndpoint(oldK, newK string) error {
	if _, ok := t.Endpoint[newK]; ok {
		return fmt.Errorf("key %v already exists in Endpoint", newK)
	}

	e, ok := t.Endpoint[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Endpoint", oldK)
	}
	e.Name = &newK

	t.Endpoint[newK] = e
	delete(t.Endpoint, oldK)
	return nil
}

// GetOrCreateEndpoint retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Ipipe. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe) GetOrCreateEndpoint(Name string) *NokiaConf_Configure_Groups_Group_Service_Ipipe_Endpoint {

	key := Name

	if v, ok := t.Endpoint[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEndpoint(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEndpoint got unexpected error: %v", err))
	}
	return v
}

// GetEndpoint retrieves the value with the specified key from
// the Endpoint map field of NokiaConf_Configure_Groups_Group_Service_Ipipe. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe) GetEndpoint(Name string) *NokiaConf_Configure_Groups_Group_Service_Ipipe_Endpoint {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Endpoint[key]; ok {
		return lm
	}
	return nil
}

// DeleteEndpoint deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Ipipe. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe) DeleteEndpoint(Name string) {
	key := Name

	delete(t.Endpoint, key)
}

// AppendEndpoint appends the supplied NokiaConf_Configure_Groups_Group_Service_Ipipe_Endpoint struct to the
// list Endpoint of NokiaConf_Configure_Groups_Group_Service_Ipipe. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Ipipe_Endpoint already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe) AppendEndpoint(v *NokiaConf_Configure_Groups_Group_Service_Ipipe_Endpoint) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Endpoint == nil {
		t.Endpoint = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Ipipe_Endpoint)
	}

	if _, ok := t.Endpoint[key]; ok {
		return fmt.Errorf("duplicate key for list Endpoint %v", key)
	}

	t.Endpoint[key] = v
	return nil
}

// NewSap creates a new entry in the Sap list of the
// NokiaConf_Configure_Groups_Group_Service_Ipipe struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe) NewSap(SapId string) (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sap == nil {
		t.Sap = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap)
	}

	key := SapId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Sap[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Sap", key)
	}

	t.Sap[key] = &NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap{
		SapId: &SapId,
	}

	return t.Sap[key], nil
}

// RenameSap renames an entry in the list Sap within
// the NokiaConf_Configure_Groups_Group_Service_Ipipe struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe) RenameSap(oldK, newK string) error {
	if _, ok := t.Sap[newK]; ok {
		return fmt.Errorf("key %v already exists in Sap", newK)
	}

	e, ok := t.Sap[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Sap", oldK)
	}
	e.SapId = &newK

	t.Sap[newK] = e
	delete(t.Sap, oldK)
	return nil
}

// GetOrCreateSap retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Ipipe. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe) GetOrCreateSap(SapId string) *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap {

	key := SapId

	if v, ok := t.Sap[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSap(SapId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSap got unexpected error: %v", err))
	}
	return v
}

// GetSap retrieves the value with the specified key from
// the Sap map field of NokiaConf_Configure_Groups_Group_Service_Ipipe. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe) GetSap(SapId string) *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap {

	if t == nil {
		return nil
	}

	key := SapId

	if lm, ok := t.Sap[key]; ok {
		return lm
	}
	return nil
}

// DeleteSap deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Ipipe. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe) DeleteSap(SapId string) {
	key := SapId

	delete(t.Sap, key)
}

// AppendSap appends the supplied NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap struct to the
// list Sap of NokiaConf_Configure_Groups_Group_Service_Ipipe. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe) AppendSap(v *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap) error {
	if v.SapId == nil {
		return fmt.Errorf("invalid nil key received for SapId")
	}

	key := *v.SapId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sap == nil {
		t.Sap = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap)
	}

	if _, ok := t.Sap[key]; ok {
		return fmt.Errorf("duplicate key for list Sap %v", key)
	}

	t.Sap[key] = v
	return nil
}

// NewSpokeSdp creates a new entry in the SpokeSdp list of the
// NokiaConf_Configure_Groups_Group_Service_Ipipe struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe) NewSpokeSdp(SdpBindId string) (*NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SpokeSdp == nil {
		t.SpokeSdp = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp)
	}

	key := SdpBindId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SpokeSdp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SpokeSdp", key)
	}

	t.SpokeSdp[key] = &NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp{
		SdpBindId: &SdpBindId,
	}

	return t.SpokeSdp[key], nil
}

// RenameSpokeSdp renames an entry in the list SpokeSdp within
// the NokiaConf_Configure_Groups_Group_Service_Ipipe struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe) RenameSpokeSdp(oldK, newK string) error {
	if _, ok := t.SpokeSdp[newK]; ok {
		return fmt.Errorf("key %v already exists in SpokeSdp", newK)
	}

	e, ok := t.SpokeSdp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SpokeSdp", oldK)
	}
	e.SdpBindId = &newK

	t.SpokeSdp[newK] = e
	delete(t.SpokeSdp, oldK)
	return nil
}

// GetOrCreateSpokeSdp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Ipipe. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe) GetOrCreateSpokeSdp(SdpBindId string) *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp {

	key := SdpBindId

	if v, ok := t.SpokeSdp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSpokeSdp(SdpBindId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSpokeSdp got unexpected error: %v", err))
	}
	return v
}

// GetSpokeSdp retrieves the value with the specified key from
// the SpokeSdp map field of NokiaConf_Configure_Groups_Group_Service_Ipipe. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe) GetSpokeSdp(SdpBindId string) *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp {

	if t == nil {
		return nil
	}

	key := SdpBindId

	if lm, ok := t.SpokeSdp[key]; ok {
		return lm
	}
	return nil
}

// DeleteSpokeSdp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Ipipe. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe) DeleteSpokeSdp(SdpBindId string) {
	key := SdpBindId

	delete(t.SpokeSdp, key)
}

// AppendSpokeSdp appends the supplied NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp struct to the
// list SpokeSdp of NokiaConf_Configure_Groups_Group_Service_Ipipe. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe) AppendSpokeSdp(v *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp) error {
	if v.SdpBindId == nil {
		return fmt.Errorf("invalid nil key received for SdpBindId")
	}

	key := *v.SdpBindId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SpokeSdp == nil {
		t.SpokeSdp = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp)
	}

	if _, ok := t.SpokeSdp[key]; ok {
		return fmt.Errorf("duplicate key for list SpokeSdp %v", key)
	}

	t.SpokeSdp[key] = v
	return nil
}

// GetOrCreateCeAddressDiscovery retrieves the value of the CeAddressDiscovery field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe) GetOrCreateCeAddressDiscovery() *NokiaConf_Configure_Groups_Group_Service_Ipipe_CeAddressDiscovery {
	if t.CeAddressDiscovery != nil {
		return t.CeAddressDiscovery
	}
	t.CeAddressDiscovery = &NokiaConf_Configure_Groups_Group_Service_Ipipe_CeAddressDiscovery{}
	return t.CeAddressDiscovery
}

// GetCeAddressDiscovery returns the value of the CeAddressDiscovery struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ipipe. If the receiver or the field CeAddressDiscovery is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe) GetCeAddressDiscovery() *NokiaConf_Configure_Groups_Group_Service_Ipipe_CeAddressDiscovery {
	if t != nil && t.CeAddressDiscovery != nil {
		return t.CeAddressDiscovery
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Ipipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetCustomer retrieves the value of the leaf Customer from the NokiaConf_Configure_Groups_Group_Service_Ipipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Customer is set, it can
// safely use t.GetCustomer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Customer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe) GetCustomer() string {
	if t == nil || t.Customer == nil {
		return ""
	}
	return *t.Customer
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Ipipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetServiceId retrieves the value of the leaf ServiceId from the NokiaConf_Configure_Groups_Group_Service_Ipipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceId is set, it can
// safely use t.GetServiceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe) GetServiceId() uint32 {
	if t == nil || t.ServiceId == nil {
		return 0
	}
	return *t.ServiceId
}

// GetServiceMtu retrieves the value of the leaf ServiceMtu from the NokiaConf_Configure_Groups_Group_Service_Ipipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceMtu is set, it can
// safely use t.GetServiceMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceMtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe) GetServiceMtu() int32 {
	if t == nil || t.ServiceMtu == nil {
		return 0
	}
	return *t.ServiceMtu
}

// GetServiceName retrieves the value of the leaf ServiceName from the NokiaConf_Configure_Groups_Group_Service_Ipipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceName is set, it can
// safely use t.GetServiceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe) GetServiceName() string {
	if t == nil || t.ServiceName == nil {
		return ""
	}
	return *t.ServiceName
}

// GetVcSwitching retrieves the value of the leaf VcSwitching from the NokiaConf_Configure_Groups_Group_Service_Ipipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VcSwitching is set, it can
// safely use t.GetVcSwitching() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VcSwitching == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe) GetVcSwitching() bool {
	if t == nil || t.VcSwitching == nil {
		return false
	}
	return *t.VcSwitching
}

// GetVpnId retrieves the value of the leaf VpnId from the NokiaConf_Configure_Groups_Group_Service_Ipipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnId is set, it can
// safely use t.GetVpnId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe) GetVpnId() uint32 {
	if t == nil || t.VpnId == nil {
		return 0
	}
	return *t.VpnId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.VcSwitching == nil {
		var v bool = false
		t.VcSwitching = &v
	}
	t.CeAddressDiscovery.PopulateDefaults()
	for _, e := range t.Endpoint {
		e.PopulateDefaults()
	}
	for _, e := range t.Sap {
		e.PopulateDefaults()
	}
	for _, e := range t.SpokeSdp {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Ipipe struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ServiceName == nil {
		return nil, fmt.Errorf("nil value for key ServiceName")
	}

	return map[string]interface{}{
		"service-name": *t.ServiceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_CeAddressDiscovery represents the /nokia-conf/configure/groups/group/service/ipipe/ce-address-discovery YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_CeAddressDiscovery struct {
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_CeAddressDiscovery implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_CeAddressDiscovery) IsYANGGoStruct() {}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_CeAddressDiscovery
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_CeAddressDiscovery) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_CeAddressDiscovery) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_CeAddressDiscovery"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_CeAddressDiscovery) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_CeAddressDiscovery) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_CeAddressDiscovery.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_CeAddressDiscovery) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_Endpoint represents the /nokia-conf/configure/groups/group/service/ipipe/endpoint YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_Endpoint struct {
	Description      *string                                                                    `path:"description" module:"nokia-conf"`
	HoldTimeActive   *uint32                                                                    `path:"hold-time-active" module:"nokia-conf"`
	Name             *string                                                                    `path:"name" module:"nokia-conf"`
	RevertTime       NokiaConf_Configure_Groups_Group_Service_Ipipe_Endpoint_RevertTime_Union   `path:"revert-time" module:"nokia-conf"`
	StandbySignaling E_NokiaConf_Configure_Groups_Group_Service_Ipipe_Endpoint_StandbySignaling `path:"standby-signaling" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_Endpoint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Endpoint) IsYANGGoStruct() {}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Endpoint) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetHoldTimeActive retrieves the value of the leaf HoldTimeActive from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldTimeActive is set, it can
// safely use t.GetHoldTimeActive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldTimeActive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Endpoint) GetHoldTimeActive() uint32 {
	if t == nil || t.HoldTimeActive == nil {
		return 0
	}
	return *t.HoldTimeActive
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Endpoint) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetRevertTime retrieves the value of the leaf RevertTime from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RevertTime is set, it can
// safely use t.GetRevertTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RevertTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Endpoint) GetRevertTime() NokiaConf_Configure_Groups_Group_Service_Ipipe_Endpoint_RevertTime_Union {
	if t == nil || t.RevertTime == nil {
		return NokiaTypesServices_RevertTime_Enum_immediate
	}
	return t.RevertTime
}

// GetStandbySignaling retrieves the value of the leaf StandbySignaling from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StandbySignaling is set, it can
// safely use t.GetStandbySignaling() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StandbySignaling == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Endpoint) GetStandbySignaling() E_NokiaConf_Configure_Groups_Group_Service_Ipipe_Endpoint_StandbySignaling {
	if t == nil || t.StandbySignaling == 0 {
		return 0
	}
	return t.StandbySignaling
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_Endpoint
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Endpoint) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RevertTime == nil {
		t.RevertTime = NokiaTypesServices_RevertTime_Enum_immediate
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Ipipe_Endpoint struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Endpoint) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Endpoint) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_Endpoint"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Endpoint) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Endpoint) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_Endpoint.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Endpoint) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap represents the /nokia-conf/configure/groups/group/service/ipipe/sap YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap struct {
	AccountingPolicy  *uint32                                                           `path:"accounting-policy" module:"nokia-conf"`
	AdminState        E_NokiaTypesSros_AdminState                                       `path:"admin-state" module:"nokia-conf"`
	AppProfile        *string                                                           `path:"app-profile" module:"nokia-conf"`
	Bandwidth         *uint64                                                           `path:"bandwidth" module:"nokia-conf"`
	CeAddress         *string                                                           `path:"ce-address" module:"nokia-conf"`
	CollectStats      *bool                                                             `path:"collect-stats" module:"nokia-conf"`
	CpuProtection     *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_CpuProtection `path:"cpu-protection" module:"nokia-conf"`
	Description       *string                                                           `path:"description" module:"nokia-conf"`
	DistCpuProtection *string                                                           `path:"dist-cpu-protection" module:"nokia-conf"`
	Egress            *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress        `path:"egress" module:"nokia-conf"`
	Endpoint          *string                                                           `path:"endpoint" module:"nokia-conf"`
	Ingress           *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress       `path:"ingress" module:"nokia-conf"`
	Lag               *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Lag           `path:"lag" module:"nokia-conf"`
	Mac               *string                                                           `path:"mac" module:"nokia-conf"`
	MacRefresh        *uint32                                                           `path:"mac-refresh" module:"nokia-conf"`
	MultiServiceSite  *string                                                           `path:"multi-service-site" module:"nokia-conf"`
	SapId             *string                                                           `path:"sap-id" module:"nokia-conf"`
	TransitPolicy     *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_TransitPolicy `path:"transit-policy" module:"nokia-conf" yangPresence:"true"`
	UseBroadcastMac   *bool                                                             `path:"use-broadcast-mac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap) IsYANGGoStruct() {}

// GetOrCreateCpuProtection retrieves the value of the CpuProtection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap) GetOrCreateCpuProtection() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_CpuProtection {
	if t.CpuProtection != nil {
		return t.CpuProtection
	}
	t.CpuProtection = &NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_CpuProtection{}
	return t.CpuProtection
}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap) GetOrCreateEgress() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress{}
	return t.Egress
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap) GetOrCreateIngress() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress{}
	return t.Ingress
}

// GetOrCreateLag retrieves the value of the Lag field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap) GetOrCreateLag() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Lag {
	if t.Lag != nil {
		return t.Lag
	}
	t.Lag = &NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Lag{}
	return t.Lag
}

// GetOrCreateTransitPolicy retrieves the value of the TransitPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap) GetOrCreateTransitPolicy() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_TransitPolicy {
	if t.TransitPolicy != nil {
		return t.TransitPolicy
	}
	t.TransitPolicy = &NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_TransitPolicy{}
	return t.TransitPolicy
}

// GetCpuProtection returns the value of the CpuProtection struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap. If the receiver or the field CpuProtection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap) GetCpuProtection() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_CpuProtection {
	if t != nil && t.CpuProtection != nil {
		return t.CpuProtection
	}
	return nil
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap) GetEgress() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap) GetIngress() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetLag returns the value of the Lag struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap. If the receiver or the field Lag is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap) GetLag() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Lag {
	if t != nil && t.Lag != nil {
		return t.Lag
	}
	return nil
}

// GetTransitPolicy returns the value of the TransitPolicy struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap. If the receiver or the field TransitPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap) GetTransitPolicy() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_TransitPolicy {
	if t != nil && t.TransitPolicy != nil {
		return t.TransitPolicy
	}
	return nil
}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetAppProfile retrieves the value of the leaf AppProfile from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AppProfile is set, it can
// safely use t.GetAppProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AppProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap) GetAppProfile() string {
	if t == nil || t.AppProfile == nil {
		return ""
	}
	return *t.AppProfile
}

// GetBandwidth retrieves the value of the leaf Bandwidth from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bandwidth is set, it can
// safely use t.GetBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap) GetBandwidth() uint64 {
	if t == nil || t.Bandwidth == nil {
		return 0
	}
	return *t.Bandwidth
}

// GetCeAddress retrieves the value of the leaf CeAddress from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CeAddress is set, it can
// safely use t.GetCeAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CeAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap) GetCeAddress() string {
	if t == nil || t.CeAddress == nil {
		return ""
	}
	return *t.CeAddress
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDistCpuProtection retrieves the value of the leaf DistCpuProtection from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DistCpuProtection is set, it can
// safely use t.GetDistCpuProtection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DistCpuProtection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap) GetDistCpuProtection() string {
	if t == nil || t.DistCpuProtection == nil {
		return ""
	}
	return *t.DistCpuProtection
}

// GetEndpoint retrieves the value of the leaf Endpoint from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Endpoint is set, it can
// safely use t.GetEndpoint() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Endpoint == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap) GetEndpoint() string {
	if t == nil || t.Endpoint == nil {
		return ""
	}
	return *t.Endpoint
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap) GetMac() string {
	if t == nil || t.Mac == nil {
		return "00:00:00:00:00:00"
	}
	return *t.Mac
}

// GetMacRefresh retrieves the value of the leaf MacRefresh from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacRefresh is set, it can
// safely use t.GetMacRefresh() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacRefresh == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap) GetMacRefresh() uint32 {
	if t == nil || t.MacRefresh == nil {
		return 14400
	}
	return *t.MacRefresh
}

// GetMultiServiceSite retrieves the value of the leaf MultiServiceSite from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MultiServiceSite is set, it can
// safely use t.GetMultiServiceSite() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MultiServiceSite == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap) GetMultiServiceSite() string {
	if t == nil || t.MultiServiceSite == nil {
		return ""
	}
	return *t.MultiServiceSite
}

// GetSapId retrieves the value of the leaf SapId from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SapId is set, it can
// safely use t.GetSapId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SapId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap) GetSapId() string {
	if t == nil || t.SapId == nil {
		return ""
	}
	return *t.SapId
}

// GetUseBroadcastMac retrieves the value of the leaf UseBroadcastMac from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseBroadcastMac is set, it can
// safely use t.GetUseBroadcastMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseBroadcastMac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap) GetUseBroadcastMac() bool {
	if t == nil || t.UseBroadcastMac == nil {
		return false
	}
	return *t.UseBroadcastMac
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
	if t.Mac == nil {
		var v string = "00:00:00:00:00:00"
		t.Mac = &v
	}
	if t.MacRefresh == nil {
		var v uint32 = 14400
		t.MacRefresh = &v
	}
	if t.UseBroadcastMac == nil {
		var v bool = false
		t.UseBroadcastMac = &v
	}
	t.CpuProtection.PopulateDefaults()
	t.Egress.PopulateDefaults()
	t.Ingress.PopulateDefaults()
	t.Lag.PopulateDefaults()
	t.TransitPolicy.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SapId == nil {
		return nil, fmt.Errorf("nil value for key SapId")
	}

	return map[string]interface{}{
		"sap-id": *t.SapId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_CpuProtection represents the /nokia-conf/configure/groups/group/service/ipipe/sap/cpu-protection YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_CpuProtection struct {
	MacMonitoring YANGEmpty `path:"mac-monitoring" module:"nokia-conf"`
	PolicyId      *uint32   `path:"policy-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_CpuProtection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_CpuProtection) IsYANGGoStruct() {}

// GetMacMonitoring retrieves the value of the leaf MacMonitoring from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_CpuProtection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacMonitoring is set, it can
// safely use t.GetMacMonitoring() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacMonitoring == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_CpuProtection) GetMacMonitoring() YANGEmpty {
	if t == nil || t.MacMonitoring == false {
		return false
	}
	return t.MacMonitoring
}

// GetPolicyId retrieves the value of the leaf PolicyId from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_CpuProtection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyId is set, it can
// safely use t.GetPolicyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_CpuProtection) GetPolicyId() uint32 {
	if t == nil || t.PolicyId == nil {
		return 0
	}
	return *t.PolicyId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_CpuProtection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_CpuProtection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_CpuProtection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_CpuProtection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_CpuProtection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_CpuProtection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_CpuProtection.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_CpuProtection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress represents the /nokia-conf/configure/groups/group/service/ipipe/sap/egress YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress struct {
	AggRate *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_AggRate `path:"agg-rate" module:"nokia-conf"`
	Filter  *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Filter  `path:"filter" module:"nokia-conf"`
	Qos     *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos     `path:"qos" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress) IsYANGGoStruct() {}

// GetOrCreateAggRate retrieves the value of the AggRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress) GetOrCreateAggRate() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_AggRate {
	if t.AggRate != nil {
		return t.AggRate
	}
	t.AggRate = &NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_AggRate{}
	return t.AggRate
}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress) GetOrCreateFilter() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Filter{}
	return t.Filter
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress) GetOrCreateQos() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos{}
	return t.Qos
}

// GetAggRate returns the value of the AggRate struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress. If the receiver or the field AggRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress) GetAggRate() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_AggRate {
	if t != nil && t.AggRate != nil {
		return t.AggRate
	}
	return nil
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress) GetFilter() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress) GetQos() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AggRate.PopulateDefaults()
	t.Filter.PopulateDefaults()
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_AggRate represents the /nokia-conf/configure/groups/group/service/ipipe/sap/egress/agg-rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_AggRate struct {
	LimitUnusedBandwidth *bool  `path:"limit-unused-bandwidth" module:"nokia-conf"`
	Rate                 *int64 `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_AggRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_AggRate) IsYANGGoStruct() {}

// GetLimitUnusedBandwidth retrieves the value of the leaf LimitUnusedBandwidth from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_AggRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LimitUnusedBandwidth is set, it can
// safely use t.GetLimitUnusedBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LimitUnusedBandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_AggRate) GetLimitUnusedBandwidth() bool {
	if t == nil || t.LimitUnusedBandwidth == nil {
		return false
	}
	return *t.LimitUnusedBandwidth
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_AggRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_AggRate) GetRate() int64 {
	if t == nil || t.Rate == nil {
		return 0
	}
	return *t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_AggRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_AggRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LimitUnusedBandwidth == nil {
		var v bool = false
		t.LimitUnusedBandwidth = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_AggRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_AggRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_AggRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_AggRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_AggRate.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_AggRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Filter represents the /nokia-conf/configure/groups/group/service/ipipe/sap/egress/filter YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Filter struct {
	Ip   *string `path:"ip" module:"nokia-conf"`
	Ipv6 *string `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Filter) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Filter) GetIpv6() string {
	if t == nil || t.Ipv6 == nil {
		return ""
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Filter.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos represents the /nokia-conf/configure/groups/group/service/ipipe/sap/egress/qos YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos struct {
	PolicerControlPolicy *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy `path:"policer-control-policy" module:"nokia-conf"`
	QinqMarkTopOnly      *bool                                                                               `path:"qinq-mark-top-only" module:"nokia-conf"`
	SapEgress            *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress            `path:"sap-egress" module:"nokia-conf"`
	SchedulerPolicy      *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy      `path:"scheduler-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos) IsYANGGoStruct() {}

// GetOrCreatePolicerControlPolicy retrieves the value of the PolicerControlPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos) GetOrCreatePolicerControlPolicy() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy {
	if t.PolicerControlPolicy != nil {
		return t.PolicerControlPolicy
	}
	t.PolicerControlPolicy = &NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy{}
	return t.PolicerControlPolicy
}

// GetOrCreateSapEgress retrieves the value of the SapEgress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos) GetOrCreateSapEgress() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress {
	if t.SapEgress != nil {
		return t.SapEgress
	}
	t.SapEgress = &NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress{}
	return t.SapEgress
}

// GetOrCreateSchedulerPolicy retrieves the value of the SchedulerPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos) GetOrCreateSchedulerPolicy() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy {
	if t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	t.SchedulerPolicy = &NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy{}
	return t.SchedulerPolicy
}

// GetPolicerControlPolicy returns the value of the PolicerControlPolicy struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos. If the receiver or the field PolicerControlPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos) GetPolicerControlPolicy() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy {
	if t != nil && t.PolicerControlPolicy != nil {
		return t.PolicerControlPolicy
	}
	return nil
}

// GetSapEgress returns the value of the SapEgress struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos. If the receiver or the field SapEgress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos) GetSapEgress() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress {
	if t != nil && t.SapEgress != nil {
		return t.SapEgress
	}
	return nil
}

// GetSchedulerPolicy returns the value of the SchedulerPolicy struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos. If the receiver or the field SchedulerPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos) GetSchedulerPolicy() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy {
	if t != nil && t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	return nil
}

// GetQinqMarkTopOnly retrieves the value of the leaf QinqMarkTopOnly from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QinqMarkTopOnly is set, it can
// safely use t.GetQinqMarkTopOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QinqMarkTopOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos) GetQinqMarkTopOnly() bool {
	if t == nil || t.QinqMarkTopOnly == nil {
		return false
	}
	return *t.QinqMarkTopOnly
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.QinqMarkTopOnly == nil {
		var v bool = false
		t.QinqMarkTopOnly = &v
	}
	t.PolicerControlPolicy.PopulateDefaults()
	t.SapEgress.PopulateDefaults()
	t.SchedulerPolicy.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy represents the /nokia-conf/configure/groups/group/service/ipipe/sap/egress/qos/policer-control-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy struct {
	Overrides  *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides `path:"overrides" module:"nokia-conf" yangPresence:"true"`
	PolicyName *string                                                                                       `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy) IsYANGGoStruct() {
}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy) GetOrCreateOverrides() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy) GetOverrides() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides represents the /nokia-conf/configure/groups/group/service/ipipe/sap/egress/qos/policer-control-policy/overrides YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides struct {
	Root *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root `path:"root" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides) IsYANGGoStruct() {
}

// GetOrCreateRoot retrieves the value of the Root field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides) GetOrCreateRoot() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root {
	if t.Root != nil {
		return t.Root
	}
	t.Root = &NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root{}
	return t.Root
}

// GetRoot returns the value of the Root struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides. If the receiver or the field Root is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides) GetRoot() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root {
	if t != nil && t.Root != nil {
		return t.Root
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Root.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root represents the /nokia-conf/configure/groups/group/service/ipipe/sap/egress/qos/policer-control-policy/overrides/root YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root struct {
	MaxRate               NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_MaxRate_Union          `path:"max-rate" module:"nokia-conf"`
	PriorityMbsThresholds *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds `path:"priority-mbs-thresholds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) IsYANGGoStruct() {
}

// GetOrCreatePriorityMbsThresholds retrieves the value of the PriorityMbsThresholds field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) GetOrCreatePriorityMbsThresholds() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds {
	if t.PriorityMbsThresholds != nil {
		return t.PriorityMbsThresholds
	}
	t.PriorityMbsThresholds = &NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds{}
	return t.PriorityMbsThresholds
}

// GetPriorityMbsThresholds returns the value of the PriorityMbsThresholds struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root. If the receiver or the field PriorityMbsThresholds is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) GetPriorityMbsThresholds() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds {
	if t != nil && t.PriorityMbsThresholds != nil {
		return t.PriorityMbsThresholds
	}
	return nil
}

// GetMaxRate retrieves the value of the leaf MaxRate from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRate is set, it can
// safely use t.GetMaxRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) GetMaxRate() NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_MaxRate_Union {
	if t == nil || t.MaxRate == nil {
		return nil
	}
	return t.MaxRate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PriorityMbsThresholds.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds represents the /nokia-conf/configure/groups/group/service/ipipe/sap/egress/qos/policer-control-policy/overrides/root/priority-mbs-thresholds YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds struct {
	MinThreshSeparation NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_MinThreshSeparation_Union                                                                                                                                          `path:"min-thresh-separation" module:"nokia-conf"`
	Priority            map[NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union]*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) IsYANGGoStruct() {
}

// NewPriority creates a new entry in the Priority list of the
// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) NewPriority(PriorityLevel NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union) (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Priority == nil {
		t.Priority = make(map[NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union]*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority)
	}

	key := PriorityLevel

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Priority[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Priority", key)
	}

	t.Priority[key] = &NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority{
		PriorityLevel: PriorityLevel,
	}

	return t.Priority[key], nil
}

// RenamePriority renames an entry in the list Priority within
// the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) RenamePriority(oldK, newK NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union) error {
	if _, ok := t.Priority[newK]; ok {
		return fmt.Errorf("key %v already exists in Priority", newK)
	}

	e, ok := t.Priority[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Priority", oldK)
	}
	e.PriorityLevel = newK

	t.Priority[newK] = e
	delete(t.Priority, oldK)
	return nil
}

// GetOrCreatePriority retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) GetOrCreatePriority(PriorityLevel NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union) *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority {

	key := PriorityLevel

	if v, ok := t.Priority[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPriority(PriorityLevel)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePriority got unexpected error: %v", err))
	}
	return v
}

// GetPriority retrieves the value with the specified key from
// the Priority map field of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) GetPriority(PriorityLevel NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union) *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority {

	if t == nil {
		return nil
	}

	key := PriorityLevel

	if lm, ok := t.Priority[key]; ok {
		return lm
	}
	return nil
}

// DeletePriority deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) DeletePriority(PriorityLevel NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union) {
	key := PriorityLevel

	delete(t.Priority, key)
}

// AppendPriority appends the supplied NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority struct to the
// list Priority of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) AppendPriority(v *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) error {
	key := v.PriorityLevel

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Priority == nil {
		t.Priority = make(map[NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union]*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority)
	}

	if _, ok := t.Priority[key]; ok {
		return fmt.Errorf("duplicate key for list Priority %v", key)
	}

	t.Priority[key] = v
	return nil
}

// GetMinThreshSeparation retrieves the value of the leaf MinThreshSeparation from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinThreshSeparation is set, it can
// safely use t.GetMinThreshSeparation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinThreshSeparation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) GetMinThreshSeparation() NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_MinThreshSeparation_Union {
	if t == nil || t.MinThreshSeparation == nil {
		return nil
	}
	return t.MinThreshSeparation
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Priority {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority represents the /nokia-conf/configure/groups/group/service/ipipe/sap/egress/qos/policer-control-policy/overrides/root/priority-mbs-thresholds/priority YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority struct {
	MbsContribution NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_MbsContribution_Union `path:"mbs-contribution" module:"nokia-conf"`
	PriorityLevel   NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union   `path:"priority-level" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) IsYANGGoStruct() {
}

// GetMbsContribution retrieves the value of the leaf MbsContribution from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MbsContribution is set, it can
// safely use t.GetMbsContribution() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MbsContribution == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) GetMbsContribution() NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_MbsContribution_Union {
	if t == nil || t.MbsContribution == nil {
		return nil
	}
	return t.MbsContribution
}

// GetPriorityLevel retrieves the value of the leaf PriorityLevel from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PriorityLevel is set, it can
// safely use t.GetPriorityLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PriorityLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) GetPriorityLevel() NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union {
	if t == nil || t.PriorityLevel == nil {
		return nil
	}
	return t.PriorityLevel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"priority-level": t.PriorityLevel,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress represents the /nokia-conf/configure/groups/group/service/ipipe/sap/egress/qos/sap-egress YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress struct {
	Overrides         *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides         `path:"overrides" module:"nokia-conf"`
	PolicyName        *string                                                                                    `path:"policy-name" module:"nokia-conf"`
	PortRedirectGroup *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup `path:"port-redirect-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress) IsYANGGoStruct() {}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress) GetOrCreateOverrides() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides{}
	return t.Overrides
}

// GetOrCreatePortRedirectGroup retrieves the value of the PortRedirectGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress) GetOrCreatePortRedirectGroup() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup {
	if t.PortRedirectGroup != nil {
		return t.PortRedirectGroup
	}
	t.PortRedirectGroup = &NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup{}
	return t.PortRedirectGroup
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress) GetOverrides() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPortRedirectGroup returns the value of the PortRedirectGroup struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress. If the receiver or the field PortRedirectGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress) GetPortRedirectGroup() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup {
	if t != nil && t.PortRedirectGroup != nil {
		return t.PortRedirectGroup
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
	t.PortRedirectGroup.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides represents the /nokia-conf/configure/groups/group/service/ipipe/sap/egress/qos/sap-egress/overrides YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides struct {
	HsSecondaryShaper *string                                                                                                                                                                                                      `path:"hs-secondary-shaper" module:"nokia-conf"`
	HsWrrGroup        map[NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup_GroupId_Union]*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup `path:"hs-wrr-group" module:"nokia-conf"`
	HsmdaQueues       *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues                                                                                                               `path:"hsmda-queues" module:"nokia-conf"`
	Policer           map[NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PolicerId_Union]*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer     `path:"policer" module:"nokia-conf"`
	Queue             map[NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue           `path:"queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides) IsYANGGoStruct() {
}

// NewHsWrrGroup creates a new entry in the HsWrrGroup list of the
// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides) NewHsWrrGroup(GroupId NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup_GroupId_Union) (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HsWrrGroup == nil {
		t.HsWrrGroup = make(map[NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup_GroupId_Union]*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup)
	}

	key := GroupId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.HsWrrGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list HsWrrGroup", key)
	}

	t.HsWrrGroup[key] = &NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup{
		GroupId: GroupId,
	}

	return t.HsWrrGroup[key], nil
}

// RenameHsWrrGroup renames an entry in the list HsWrrGroup within
// the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides) RenameHsWrrGroup(oldK, newK NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup_GroupId_Union) error {
	if _, ok := t.HsWrrGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in HsWrrGroup", newK)
	}

	e, ok := t.HsWrrGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in HsWrrGroup", oldK)
	}
	e.GroupId = newK

	t.HsWrrGroup[newK] = e
	delete(t.HsWrrGroup, oldK)
	return nil
}

// GetOrCreateHsWrrGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides) GetOrCreateHsWrrGroup(GroupId NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup_GroupId_Union) *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup {

	key := GroupId

	if v, ok := t.HsWrrGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHsWrrGroup(GroupId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHsWrrGroup got unexpected error: %v", err))
	}
	return v
}

// GetHsWrrGroup retrieves the value with the specified key from
// the HsWrrGroup map field of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides) GetHsWrrGroup(GroupId NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup_GroupId_Union) *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup {

	if t == nil {
		return nil
	}

	key := GroupId

	if lm, ok := t.HsWrrGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteHsWrrGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides) DeleteHsWrrGroup(GroupId NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup_GroupId_Union) {
	key := GroupId

	delete(t.HsWrrGroup, key)
}

// AppendHsWrrGroup appends the supplied NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup struct to the
// list HsWrrGroup of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides) AppendHsWrrGroup(v *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) error {
	key := v.GroupId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HsWrrGroup == nil {
		t.HsWrrGroup = make(map[NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup_GroupId_Union]*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup)
	}

	if _, ok := t.HsWrrGroup[key]; ok {
		return fmt.Errorf("duplicate key for list HsWrrGroup %v", key)
	}

	t.HsWrrGroup[key] = v
	return nil
}

// NewPolicer creates a new entry in the Policer list of the
// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides) NewPolicer(PolicerId NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PolicerId_Union) (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PolicerId_Union]*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer)
	}

	key := PolicerId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Policer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Policer", key)
	}

	t.Policer[key] = &NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer{
		PolicerId: PolicerId,
	}

	return t.Policer[key], nil
}

// RenamePolicer renames an entry in the list Policer within
// the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides) RenamePolicer(oldK, newK NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PolicerId_Union) error {
	if _, ok := t.Policer[newK]; ok {
		return fmt.Errorf("key %v already exists in Policer", newK)
	}

	e, ok := t.Policer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Policer", oldK)
	}
	e.PolicerId = newK

	t.Policer[newK] = e
	delete(t.Policer, oldK)
	return nil
}

// GetOrCreatePolicer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides) GetOrCreatePolicer(PolicerId NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PolicerId_Union) *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer {

	key := PolicerId

	if v, ok := t.Policer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicer(PolicerId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicer got unexpected error: %v", err))
	}
	return v
}

// GetPolicer retrieves the value with the specified key from
// the Policer map field of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides) GetPolicer(PolicerId NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PolicerId_Union) *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer {

	if t == nil {
		return nil
	}

	key := PolicerId

	if lm, ok := t.Policer[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides) DeletePolicer(PolicerId NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PolicerId_Union) {
	key := PolicerId

	delete(t.Policer, key)
}

// AppendPolicer appends the supplied NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer struct to the
// list Policer of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides) AppendPolicer(v *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) error {
	key := v.PolicerId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PolicerId_Union]*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer)
	}

	if _, ok := t.Policer[key]; ok {
		return fmt.Errorf("duplicate key for list Policer %v", key)
	}

	t.Policer[key] = v
	return nil
}

// NewQueue creates a new entry in the Queue list of the
// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides) NewQueue(QueueId NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_QueueId_Union) (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue)
	}

	key := QueueId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue{
		QueueId: QueueId,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides) RenameQueue(oldK, newK NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_QueueId_Union) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.QueueId = newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides) GetOrCreateQueue(QueueId NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_QueueId_Union) *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue {

	key := QueueId

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(QueueId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides) GetQueue(QueueId NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_QueueId_Union) *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue {

	if t == nil {
		return nil
	}

	key := QueueId

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides) DeleteQueue(QueueId NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_QueueId_Union) {
	key := QueueId

	delete(t.Queue, key)
}

// AppendQueue appends the supplied NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue struct to the
// list Queue of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides) AppendQueue(v *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) error {
	key := v.QueueId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// GetOrCreateHsmdaQueues retrieves the value of the HsmdaQueues field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides) GetOrCreateHsmdaQueues() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues {
	if t.HsmdaQueues != nil {
		return t.HsmdaQueues
	}
	t.HsmdaQueues = &NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues{}
	return t.HsmdaQueues
}

// GetHsmdaQueues returns the value of the HsmdaQueues struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides. If the receiver or the field HsmdaQueues is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides) GetHsmdaQueues() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues {
	if t != nil && t.HsmdaQueues != nil {
		return t.HsmdaQueues
	}
	return nil
}

// GetHsSecondaryShaper retrieves the value of the leaf HsSecondaryShaper from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsSecondaryShaper is set, it can
// safely use t.GetHsSecondaryShaper() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsSecondaryShaper == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides) GetHsSecondaryShaper() string {
	if t == nil || t.HsSecondaryShaper == nil {
		return ""
	}
	return *t.HsSecondaryShaper
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.HsmdaQueues.PopulateDefaults()
	for _, e := range t.HsWrrGroup {
		e.PopulateDefaults()
	}
	for _, e := range t.Policer {
		e.PopulateDefaults()
	}
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup represents the /nokia-conf/configure/groups/group/service/ipipe/sap/egress/qos/sap-egress/overrides/hs-wrr-group YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup struct {
	GroupId       NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup_GroupId_Union `path:"group-id" module:"nokia-conf"`
	HsClassWeight *int32                                                                                                     `path:"hs-class-weight" module:"nokia-conf"`
	PercentRate   *float64                                                                                                   `path:"percent-rate" module:"nokia-conf"`
	Rate          NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup_Rate_Union    `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) IsYANGGoStruct() {
}

// GetGroupId retrieves the value of the leaf GroupId from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupId is set, it can
// safely use t.GetGroupId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) GetGroupId() NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup_GroupId_Union {
	if t == nil || t.GroupId == nil {
		return nil
	}
	return t.GroupId
}

// GetHsClassWeight retrieves the value of the leaf HsClassWeight from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsClassWeight is set, it can
// safely use t.GetHsClassWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsClassWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) GetHsClassWeight() int32 {
	if t == nil || t.HsClassWeight == nil {
		return 0
	}
	return *t.HsClassWeight
}

// GetPercentRate retrieves the value of the leaf PercentRate from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentRate is set, it can
// safely use t.GetPercentRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) GetPercentRate() float64 {
	if t == nil || t.PercentRate == nil {
		return 0.0
	}
	return *t.PercentRate
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) GetRate() NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup_Rate_Union {
	if t == nil || t.Rate == nil {
		return nil
	}
	return t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"group-id": t.GroupId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues represents the /nokia-conf/configure/groups/group/service/ipipe/sap/egress/qos/sap-egress/overrides/hsmda-queues YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues struct {
	PacketByteOffset *int32                                                                                                                                                                                                                     `path:"packet-byte-offset" module:"nokia-conf"`
	Queue            map[NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue `path:"queue" module:"nokia-conf"`
	SecondaryShaper  *string                                                                                                                                                                                                                    `path:"secondary-shaper" module:"nokia-conf"`
	WrrPolicy        *string                                                                                                                                                                                                                    `path:"wrr-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) IsYANGGoStruct() {
}

// NewQueue creates a new entry in the Queue list of the
// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) NewQueue(QueueId NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue_QueueId_Union) (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue)
	}

	key := QueueId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue{
		QueueId: QueueId,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) RenameQueue(oldK, newK NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue_QueueId_Union) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.QueueId = newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) GetOrCreateQueue(QueueId NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue_QueueId_Union) *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue {

	key := QueueId

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(QueueId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) GetQueue(QueueId NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue_QueueId_Union) *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue {

	if t == nil {
		return nil
	}

	key := QueueId

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) DeleteQueue(QueueId NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue_QueueId_Union) {
	key := QueueId

	delete(t.Queue, key)
}

// AppendQueue appends the supplied NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue struct to the
// list Queue of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) AppendQueue(v *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) error {
	key := v.QueueId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// GetPacketByteOffset retrieves the value of the leaf PacketByteOffset from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketByteOffset is set, it can
// safely use t.GetPacketByteOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketByteOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) GetPacketByteOffset() int32 {
	if t == nil || t.PacketByteOffset == nil {
		return 0
	}
	return *t.PacketByteOffset
}

// GetSecondaryShaper retrieves the value of the leaf SecondaryShaper from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecondaryShaper is set, it can
// safely use t.GetSecondaryShaper() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecondaryShaper == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) GetSecondaryShaper() string {
	if t == nil || t.SecondaryShaper == nil {
		return ""
	}
	return *t.SecondaryShaper
}

// GetWrrPolicy retrieves the value of the leaf WrrPolicy from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WrrPolicy is set, it can
// safely use t.GetWrrPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WrrPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) GetWrrPolicy() string {
	if t == nil || t.WrrPolicy == nil {
		return ""
	}
	return *t.WrrPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue represents the /nokia-conf/configure/groups/group/service/ipipe/sap/egress/qos/sap-egress/overrides/hsmda-queues/queue YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue struct {
	Mbs         NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue_Mbs_Union     `path:"mbs" module:"nokia-conf"`
	QueueId     NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue_QueueId_Union `path:"queue-id" module:"nokia-conf"`
	Rate        NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue_Rate_Union    `path:"rate" module:"nokia-conf"`
	SlopePolicy *string                                                                                                           `path:"slope-policy" module:"nokia-conf"`
	WrrWeight   *int32                                                                                                            `path:"wrr-weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) IsYANGGoStruct() {
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) GetMbs() NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return nil
	}
	return t.Mbs
}

// GetQueueId retrieves the value of the leaf QueueId from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueId is set, it can
// safely use t.GetQueueId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) GetQueueId() NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue_QueueId_Union {
	if t == nil || t.QueueId == nil {
		return nil
	}
	return t.QueueId
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) GetRate() NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue_Rate_Union {
	if t == nil || t.Rate == nil {
		return nil
	}
	return t.Rate
}

// GetSlopePolicy retrieves the value of the leaf SlopePolicy from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlopePolicy is set, it can
// safely use t.GetSlopePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlopePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) GetSlopePolicy() string {
	if t == nil || t.SlopePolicy == nil {
		return ""
	}
	return *t.SlopePolicy
}

// GetWrrWeight retrieves the value of the leaf WrrWeight from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WrrWeight is set, it can
// safely use t.GetWrrWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WrrWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) GetWrrWeight() int32 {
	if t == nil || t.WrrWeight == nil {
		return 0
	}
	return *t.WrrWeight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"queue-id": t.QueueId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer represents the /nokia-conf/configure/groups/group/service/ipipe/sap/egress/qos/sap-egress/overrides/policer YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer struct {
	Cbs              NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Cbs_Union       `path:"cbs" module:"nokia-conf"`
	Mbs              NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Mbs_Union       `path:"mbs" module:"nokia-conf"`
	PacketByteOffset *int32                                                                                                    `path:"packet-byte-offset" module:"nokia-conf"`
	PercentRate      *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate    `path:"percent-rate" module:"nokia-conf"`
	PolicerId        NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PolicerId_Union `path:"policer-id" module:"nokia-conf"`
	Rate             *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate           `path:"rate" module:"nokia-conf"`
	StatMode         E_NokiaTypesQos_EgressPolicerStatMode                                                                     `path:"stat-mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) IsYANGGoStruct() {
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetOrCreatePercentRate() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate{}
	return t.PercentRate
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetOrCreateRate() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate{}
	return t.Rate
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetPercentRate() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetRate() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetCbs() NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return nil
	}
	return t.Cbs
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetMbs() NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return nil
	}
	return t.Mbs
}

// GetPacketByteOffset retrieves the value of the leaf PacketByteOffset from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketByteOffset is set, it can
// safely use t.GetPacketByteOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketByteOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetPacketByteOffset() int32 {
	if t == nil || t.PacketByteOffset == nil {
		return 0
	}
	return *t.PacketByteOffset
}

// GetPolicerId retrieves the value of the leaf PolicerId from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerId is set, it can
// safely use t.GetPolicerId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetPolicerId() NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PolicerId_Union {
	if t == nil || t.PolicerId == nil {
		return nil
	}
	return t.PolicerId
}

// GetStatMode retrieves the value of the leaf StatMode from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StatMode is set, it can
// safely use t.GetStatMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StatMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetStatMode() E_NokiaTypesQos_EgressPolicerStatMode {
	if t == nil || t.StatMode == 0 {
		return 0
	}
	return t.StatMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PercentRate.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"policer-id": t.PolicerId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate represents the /nokia-conf/configure/groups/group/service/ipipe/sap/egress/qos/sap-egress/overrides/policer/percent-rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate struct {
	Cir *float64 `path:"cir" module:"nokia-conf"`
	Pir *float64 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 0.0
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 0.0
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate represents the /nokia-conf/configure/groups/group/service/ipipe/sap/egress/qos/sap-egress/overrides/policer/rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate struct {
	Cir NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) GetCir() NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) GetPir() NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue represents the /nokia-conf/configure/groups/group/service/ipipe/sap/egress/qos/sap-egress/overrides/queue YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue struct {
	AdaptationRule    *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule    `path:"adaptation-rule" module:"nokia-conf"`
	AvgFrameOverhead  *float64                                                                                                   `path:"avg-frame-overhead" module:"nokia-conf"`
	BurstLimit        NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_BurstLimit_Union   `path:"burst-limit" module:"nokia-conf"`
	Cbs               NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Cbs_Union          `path:"cbs" module:"nokia-conf"`
	DropTail          *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail          `path:"drop-tail" module:"nokia-conf"`
	HsClassWeight     *int32                                                                                                     `path:"hs-class-weight" module:"nokia-conf"`
	HsWredQueue       *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue       `path:"hs-wred-queue" module:"nokia-conf"`
	HsWrrWeight       *int32                                                                                                     `path:"hs-wrr-weight" module:"nokia-conf"`
	Mbs               NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Mbs_Union          `path:"mbs" module:"nokia-conf"`
	MonitorDepth      *bool                                                                                                      `path:"monitor-depth" module:"nokia-conf"`
	MonitorQueueDepth *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth `path:"monitor-queue-depth" module:"nokia-conf" yangPresence:"true"`
	Parent            *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent            `path:"parent" module:"nokia-conf"`
	PercentRate       *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate       `path:"percent-rate" module:"nokia-conf"`
	QueueId           NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_QueueId_Union      `path:"queue-id" module:"nokia-conf"`
	Rate              *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate              `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) IsYANGGoStruct() {
}

// GetOrCreateAdaptationRule retrieves the value of the AdaptationRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetOrCreateAdaptationRule() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule {
	if t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	t.AdaptationRule = &NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule{}
	return t.AdaptationRule
}

// GetOrCreateDropTail retrieves the value of the DropTail field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetOrCreateDropTail() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail {
	if t.DropTail != nil {
		return t.DropTail
	}
	t.DropTail = &NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail{}
	return t.DropTail
}

// GetOrCreateHsWredQueue retrieves the value of the HsWredQueue field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetOrCreateHsWredQueue() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue {
	if t.HsWredQueue != nil {
		return t.HsWredQueue
	}
	t.HsWredQueue = &NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue{}
	return t.HsWredQueue
}

// GetOrCreateMonitorQueueDepth retrieves the value of the MonitorQueueDepth field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetOrCreateMonitorQueueDepth() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth {
	if t.MonitorQueueDepth != nil {
		return t.MonitorQueueDepth
	}
	t.MonitorQueueDepth = &NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth{}
	return t.MonitorQueueDepth
}

// GetOrCreateParent retrieves the value of the Parent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetOrCreateParent() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent {
	if t.Parent != nil {
		return t.Parent
	}
	t.Parent = &NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent{}
	return t.Parent
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetOrCreatePercentRate() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate{}
	return t.PercentRate
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetOrCreateRate() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate{}
	return t.Rate
}

// GetAdaptationRule returns the value of the AdaptationRule struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue. If the receiver or the field AdaptationRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetAdaptationRule() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule {
	if t != nil && t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	return nil
}

// GetDropTail returns the value of the DropTail struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue. If the receiver or the field DropTail is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetDropTail() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail {
	if t != nil && t.DropTail != nil {
		return t.DropTail
	}
	return nil
}

// GetHsWredQueue returns the value of the HsWredQueue struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue. If the receiver or the field HsWredQueue is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetHsWredQueue() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue {
	if t != nil && t.HsWredQueue != nil {
		return t.HsWredQueue
	}
	return nil
}

// GetMonitorQueueDepth returns the value of the MonitorQueueDepth struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue. If the receiver or the field MonitorQueueDepth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetMonitorQueueDepth() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth {
	if t != nil && t.MonitorQueueDepth != nil {
		return t.MonitorQueueDepth
	}
	return nil
}

// GetParent returns the value of the Parent struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue. If the receiver or the field Parent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetParent() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent {
	if t != nil && t.Parent != nil {
		return t.Parent
	}
	return nil
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetPercentRate() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetRate() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetAvgFrameOverhead retrieves the value of the leaf AvgFrameOverhead from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AvgFrameOverhead is set, it can
// safely use t.GetAvgFrameOverhead() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AvgFrameOverhead == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetAvgFrameOverhead() float64 {
	if t == nil || t.AvgFrameOverhead == nil {
		return 0.0
	}
	return *t.AvgFrameOverhead
}

// GetBurstLimit retrieves the value of the leaf BurstLimit from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BurstLimit is set, it can
// safely use t.GetBurstLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BurstLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetBurstLimit() NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_BurstLimit_Union {
	if t == nil || t.BurstLimit == nil {
		return nil
	}
	return t.BurstLimit
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetCbs() NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return nil
	}
	return t.Cbs
}

// GetHsClassWeight retrieves the value of the leaf HsClassWeight from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsClassWeight is set, it can
// safely use t.GetHsClassWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsClassWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetHsClassWeight() int32 {
	if t == nil || t.HsClassWeight == nil {
		return 0
	}
	return *t.HsClassWeight
}

// GetHsWrrWeight retrieves the value of the leaf HsWrrWeight from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsWrrWeight is set, it can
// safely use t.GetHsWrrWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsWrrWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetHsWrrWeight() int32 {
	if t == nil || t.HsWrrWeight == nil {
		return 1
	}
	return *t.HsWrrWeight
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetMbs() NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return nil
	}
	return t.Mbs
}

// GetMonitorDepth retrieves the value of the leaf MonitorDepth from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorDepth is set, it can
// safely use t.GetMonitorDepth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorDepth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetMonitorDepth() bool {
	if t == nil || t.MonitorDepth == nil {
		return false
	}
	return *t.MonitorDepth
}

// GetQueueId retrieves the value of the leaf QueueId from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueId is set, it can
// safely use t.GetQueueId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetQueueId() NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_QueueId_Union {
	if t == nil || t.QueueId == nil {
		return nil
	}
	return t.QueueId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HsWrrWeight == nil {
		var v int32 = 1
		t.HsWrrWeight = &v
	}
	if t.MonitorDepth == nil {
		var v bool = false
		t.MonitorDepth = &v
	}
	t.AdaptationRule.PopulateDefaults()
	t.DropTail.PopulateDefaults()
	t.HsWredQueue.PopulateDefaults()
	t.MonitorQueueDepth.PopulateDefaults()
	t.Parent.PopulateDefaults()
	t.PercentRate.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"queue-id": t.QueueId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule represents the /nokia-conf/configure/groups/group/service/ipipe/sap/egress/qos/sap-egress/overrides/queue/adaptation-rule YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule struct {
	Cir E_NokiaTypesQos_AdaptationRuleOverride `path:"cir" module:"nokia-conf"`
	Pir E_NokiaTypesQos_AdaptationRuleOverride `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) GetCir() E_NokiaTypesQos_AdaptationRuleOverride {
	if t == nil || t.Cir == 0 {
		return 0
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) GetPir() E_NokiaTypesQos_AdaptationRuleOverride {
	if t == nil || t.Pir == 0 {
		return 0
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail represents the /nokia-conf/configure/groups/group/service/ipipe/sap/egress/qos/sap-egress/overrides/queue/drop-tail YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail struct {
	Low *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low `path:"low" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) IsYANGGoStruct() {
}

// GetOrCreateLow retrieves the value of the Low field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) GetOrCreateLow() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low {
	if t.Low != nil {
		return t.Low
	}
	t.Low = &NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low{}
	return t.Low
}

// GetLow returns the value of the Low struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail. If the receiver or the field Low is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) GetLow() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low {
	if t != nil && t.Low != nil {
		return t.Low
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Low.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low represents the /nokia-conf/configure/groups/group/service/ipipe/sap/egress/qos/sap-egress/overrides/queue/drop-tail/low YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low struct {
	PercentReductionFromMbs NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low_PercentReductionFromMbs_Union `path:"percent-reduction-from-mbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low) IsYANGGoStruct() {
}

// GetPercentReductionFromMbs retrieves the value of the leaf PercentReductionFromMbs from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentReductionFromMbs is set, it can
// safely use t.GetPercentReductionFromMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentReductionFromMbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low) GetPercentReductionFromMbs() NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low_PercentReductionFromMbs_Union {
	if t == nil || t.PercentReductionFromMbs == nil {
		return nil
	}
	return t.PercentReductionFromMbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue represents the /nokia-conf/configure/groups/group/service/ipipe/sap/egress/qos/sap-egress/overrides/queue/hs-wred-queue YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue struct {
	Policy *string `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) IsYANGGoStruct() {
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth represents the /nokia-conf/configure/groups/group/service/ipipe/sap/egress/qos/sap-egress/overrides/queue/monitor-queue-depth YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth struct {
	FastPolling        *bool    `path:"fast-polling" module:"nokia-conf"`
	ViolationThreshold *float64 `path:"violation-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) IsYANGGoStruct() {
}

// GetFastPolling retrieves the value of the leaf FastPolling from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FastPolling is set, it can
// safely use t.GetFastPolling() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FastPolling == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) GetFastPolling() bool {
	if t == nil || t.FastPolling == nil {
		return false
	}
	return *t.FastPolling
}

// GetViolationThreshold retrieves the value of the leaf ViolationThreshold from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ViolationThreshold is set, it can
// safely use t.GetViolationThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ViolationThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) GetViolationThreshold() float64 {
	if t == nil || t.ViolationThreshold == nil {
		return 0.0
	}
	return *t.ViolationThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FastPolling == nil {
		var v bool = false
		t.FastPolling = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent represents the /nokia-conf/configure/groups/group/service/ipipe/sap/egress/qos/sap-egress/overrides/queue/parent YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent struct {
	CirWeight *int32 `path:"cir-weight" module:"nokia-conf"`
	Weight    *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) IsYANGGoStruct() {
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 0
	}
	return *t.CirWeight
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate represents the /nokia-conf/configure/groups/group/service/ipipe/sap/egress/qos/sap-egress/overrides/queue/percent-rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate struct {
	Cir *float64 `path:"cir" module:"nokia-conf"`
	Pir *float64 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 0.0
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 0.0
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate represents the /nokia-conf/configure/groups/group/service/ipipe/sap/egress/qos/sap-egress/overrides/queue/rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate struct {
	Cir NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) GetCir() NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) GetPir() NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup represents the /nokia-conf/configure/groups/group/service/ipipe/sap/egress/qos/sap-egress/port-redirect-group YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup struct {
	GroupName *string `path:"group-name" module:"nokia-conf"`
	Instance  *uint32 `path:"instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup) IsYANGGoStruct() {
}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// GetInstance retrieves the value of the leaf Instance from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instance is set, it can
// safely use t.GetInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup) GetInstance() uint32 {
	if t == nil || t.Instance == nil {
		return 0
	}
	return *t.Instance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy represents the /nokia-conf/configure/groups/group/service/ipipe/sap/egress/qos/scheduler-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy struct {
	Overrides  *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides `path:"overrides" module:"nokia-conf"`
	PolicyName *string                                                                                  `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy) IsYANGGoStruct() {
}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy) GetOrCreateOverrides() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy) GetOverrides() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides represents the /nokia-conf/configure/groups/group/service/ipipe/sap/egress/qos/scheduler-policy/overrides YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides struct {
	Scheduler map[string]*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler `path:"scheduler" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides) IsYANGGoStruct() {
}

// NewScheduler creates a new entry in the Scheduler list of the
// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides) NewScheduler(SchedulerName string) (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler)
	}

	key := SchedulerName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Scheduler[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Scheduler", key)
	}

	t.Scheduler[key] = &NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler{
		SchedulerName: &SchedulerName,
	}

	return t.Scheduler[key], nil
}

// RenameScheduler renames an entry in the list Scheduler within
// the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides) RenameScheduler(oldK, newK string) error {
	if _, ok := t.Scheduler[newK]; ok {
		return fmt.Errorf("key %v already exists in Scheduler", newK)
	}

	e, ok := t.Scheduler[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Scheduler", oldK)
	}
	e.SchedulerName = &newK

	t.Scheduler[newK] = e
	delete(t.Scheduler, oldK)
	return nil
}

// GetOrCreateScheduler retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides) GetOrCreateScheduler(SchedulerName string) *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler {

	key := SchedulerName

	if v, ok := t.Scheduler[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewScheduler(SchedulerName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateScheduler got unexpected error: %v", err))
	}
	return v
}

// GetScheduler retrieves the value with the specified key from
// the Scheduler map field of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides) GetScheduler(SchedulerName string) *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler {

	if t == nil {
		return nil
	}

	key := SchedulerName

	if lm, ok := t.Scheduler[key]; ok {
		return lm
	}
	return nil
}

// DeleteScheduler deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides) DeleteScheduler(SchedulerName string) {
	key := SchedulerName

	delete(t.Scheduler, key)
}

// AppendScheduler appends the supplied NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler struct to the
// list Scheduler of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides) AppendScheduler(v *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) error {
	if v.SchedulerName == nil {
		return fmt.Errorf("invalid nil key received for SchedulerName")
	}

	key := *v.SchedulerName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler)
	}

	if _, ok := t.Scheduler[key]; ok {
		return fmt.Errorf("duplicate key for list Scheduler %v", key)
	}

	t.Scheduler[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Scheduler {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler represents the /nokia-conf/configure/groups/group/service/ipipe/sap/egress/qos/scheduler-policy/overrides/scheduler YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler struct {
	Parent        *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent `path:"parent" module:"nokia-conf"`
	Rate          *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate   `path:"rate" module:"nokia-conf"`
	SchedulerName *string                                                                                                   `path:"scheduler-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) IsYANGGoStruct() {
}

// GetOrCreateParent retrieves the value of the Parent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) GetOrCreateParent() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent {
	if t.Parent != nil {
		return t.Parent
	}
	t.Parent = &NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent{}
	return t.Parent
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) GetOrCreateRate() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate{}
	return t.Rate
}

// GetParent returns the value of the Parent struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler. If the receiver or the field Parent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) GetParent() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent {
	if t != nil && t.Parent != nil {
		return t.Parent
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) GetRate() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetSchedulerName retrieves the value of the leaf SchedulerName from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SchedulerName is set, it can
// safely use t.GetSchedulerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SchedulerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) GetSchedulerName() string {
	if t == nil || t.SchedulerName == nil {
		return ""
	}
	return *t.SchedulerName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Parent.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SchedulerName == nil {
		return nil, fmt.Errorf("nil value for key SchedulerName")
	}

	return map[string]interface{}{
		"scheduler-name": *t.SchedulerName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent represents the /nokia-conf/configure/groups/group/service/ipipe/sap/egress/qos/scheduler-policy/overrides/scheduler/parent YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent struct {
	CirWeight *int32 `path:"cir-weight" module:"nokia-conf"`
	Weight    *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) IsYANGGoStruct() {
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 0
	}
	return *t.CirWeight
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate represents the /nokia-conf/configure/groups/group/service/ipipe/sap/egress/qos/scheduler-policy/overrides/scheduler/rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate struct {
	Cir NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) GetCir() NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) GetPir() NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress represents the /nokia-conf/configure/groups/group/service/ipipe/sap/ingress YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress struct {
	Filter *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Filter `path:"filter" module:"nokia-conf"`
	Qos    *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos    `path:"qos" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress) IsYANGGoStruct() {}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress) GetOrCreateFilter() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Filter{}
	return t.Filter
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress) GetOrCreateQos() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos{}
	return t.Qos
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress) GetFilter() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress) GetQos() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Filter.PopulateDefaults()
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Filter represents the /nokia-conf/configure/groups/group/service/ipipe/sap/ingress/filter YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Filter struct {
	Ip   *string `path:"ip" module:"nokia-conf"`
	Ipv6 *string `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Filter) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Filter) GetIpv6() string {
	if t == nil || t.Ipv6 == nil {
		return ""
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Filter.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos represents the /nokia-conf/configure/groups/group/service/ipipe/sap/ingress/qos YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos struct {
	MatchQinqDot1P       E_NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_MatchQinqDot1P      `path:"match-qinq-dot1p" module:"nokia-conf"`
	PolicerControlPolicy *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy `path:"policer-control-policy" module:"nokia-conf"`
	SapIngress           *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress           `path:"sap-ingress" module:"nokia-conf"`
	SchedulerPolicy      *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy      `path:"scheduler-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos) IsYANGGoStruct() {}

// GetOrCreatePolicerControlPolicy retrieves the value of the PolicerControlPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos) GetOrCreatePolicerControlPolicy() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy {
	if t.PolicerControlPolicy != nil {
		return t.PolicerControlPolicy
	}
	t.PolicerControlPolicy = &NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy{}
	return t.PolicerControlPolicy
}

// GetOrCreateSapIngress retrieves the value of the SapIngress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos) GetOrCreateSapIngress() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress {
	if t.SapIngress != nil {
		return t.SapIngress
	}
	t.SapIngress = &NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress{}
	return t.SapIngress
}

// GetOrCreateSchedulerPolicy retrieves the value of the SchedulerPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos) GetOrCreateSchedulerPolicy() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy {
	if t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	t.SchedulerPolicy = &NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy{}
	return t.SchedulerPolicy
}

// GetPolicerControlPolicy returns the value of the PolicerControlPolicy struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos. If the receiver or the field PolicerControlPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos) GetPolicerControlPolicy() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy {
	if t != nil && t.PolicerControlPolicy != nil {
		return t.PolicerControlPolicy
	}
	return nil
}

// GetSapIngress returns the value of the SapIngress struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos. If the receiver or the field SapIngress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos) GetSapIngress() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress {
	if t != nil && t.SapIngress != nil {
		return t.SapIngress
	}
	return nil
}

// GetSchedulerPolicy returns the value of the SchedulerPolicy struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos. If the receiver or the field SchedulerPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos) GetSchedulerPolicy() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy {
	if t != nil && t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	return nil
}

// GetMatchQinqDot1P retrieves the value of the leaf MatchQinqDot1P from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchQinqDot1P is set, it can
// safely use t.GetMatchQinqDot1P() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchQinqDot1P == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos) GetMatchQinqDot1P() E_NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_MatchQinqDot1P {
	if t == nil || t.MatchQinqDot1P == 0 {
		return 0
	}
	return t.MatchQinqDot1P
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PolicerControlPolicy.PopulateDefaults()
	t.SapIngress.PopulateDefaults()
	t.SchedulerPolicy.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy represents the /nokia-conf/configure/groups/group/service/ipipe/sap/ingress/qos/policer-control-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy struct {
	Overrides  *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides `path:"overrides" module:"nokia-conf" yangPresence:"true"`
	PolicyName *string                                                                                        `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy) IsYANGGoStruct() {
}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy) GetOrCreateOverrides() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy) GetOverrides() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides represents the /nokia-conf/configure/groups/group/service/ipipe/sap/ingress/qos/policer-control-policy/overrides YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides struct {
	Root *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root `path:"root" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) IsYANGGoStruct() {
}

// GetOrCreateRoot retrieves the value of the Root field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) GetOrCreateRoot() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root {
	if t.Root != nil {
		return t.Root
	}
	t.Root = &NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root{}
	return t.Root
}

// GetRoot returns the value of the Root struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides. If the receiver or the field Root is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) GetRoot() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root {
	if t != nil && t.Root != nil {
		return t.Root
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Root.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root represents the /nokia-conf/configure/groups/group/service/ipipe/sap/ingress/qos/policer-control-policy/overrides/root YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root struct {
	MaxRate               NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_MaxRate_Union          `path:"max-rate" module:"nokia-conf"`
	PriorityMbsThresholds *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds `path:"priority-mbs-thresholds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) IsYANGGoStruct() {
}

// GetOrCreatePriorityMbsThresholds retrieves the value of the PriorityMbsThresholds field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) GetOrCreatePriorityMbsThresholds() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds {
	if t.PriorityMbsThresholds != nil {
		return t.PriorityMbsThresholds
	}
	t.PriorityMbsThresholds = &NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds{}
	return t.PriorityMbsThresholds
}

// GetPriorityMbsThresholds returns the value of the PriorityMbsThresholds struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root. If the receiver or the field PriorityMbsThresholds is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) GetPriorityMbsThresholds() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds {
	if t != nil && t.PriorityMbsThresholds != nil {
		return t.PriorityMbsThresholds
	}
	return nil
}

// GetMaxRate retrieves the value of the leaf MaxRate from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRate is set, it can
// safely use t.GetMaxRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) GetMaxRate() NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_MaxRate_Union {
	if t == nil || t.MaxRate == nil {
		return nil
	}
	return t.MaxRate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PriorityMbsThresholds.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds represents the /nokia-conf/configure/groups/group/service/ipipe/sap/ingress/qos/policer-control-policy/overrides/root/priority-mbs-thresholds YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds struct {
	MinThreshSeparation NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_MinThreshSeparation_Union                                                                                                                                           `path:"min-thresh-separation" module:"nokia-conf"`
	Priority            map[NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union]*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) IsYANGGoStruct() {
}

// NewPriority creates a new entry in the Priority list of the
// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) NewPriority(PriorityLevel NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union) (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Priority == nil {
		t.Priority = make(map[NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union]*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority)
	}

	key := PriorityLevel

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Priority[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Priority", key)
	}

	t.Priority[key] = &NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority{
		PriorityLevel: PriorityLevel,
	}

	return t.Priority[key], nil
}

// RenamePriority renames an entry in the list Priority within
// the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) RenamePriority(oldK, newK NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union) error {
	if _, ok := t.Priority[newK]; ok {
		return fmt.Errorf("key %v already exists in Priority", newK)
	}

	e, ok := t.Priority[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Priority", oldK)
	}
	e.PriorityLevel = newK

	t.Priority[newK] = e
	delete(t.Priority, oldK)
	return nil
}

// GetOrCreatePriority retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) GetOrCreatePriority(PriorityLevel NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union) *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority {

	key := PriorityLevel

	if v, ok := t.Priority[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPriority(PriorityLevel)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePriority got unexpected error: %v", err))
	}
	return v
}

// GetPriority retrieves the value with the specified key from
// the Priority map field of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) GetPriority(PriorityLevel NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union) *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority {

	if t == nil {
		return nil
	}

	key := PriorityLevel

	if lm, ok := t.Priority[key]; ok {
		return lm
	}
	return nil
}

// DeletePriority deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) DeletePriority(PriorityLevel NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union) {
	key := PriorityLevel

	delete(t.Priority, key)
}

// AppendPriority appends the supplied NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority struct to the
// list Priority of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) AppendPriority(v *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) error {
	key := v.PriorityLevel

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Priority == nil {
		t.Priority = make(map[NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union]*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority)
	}

	if _, ok := t.Priority[key]; ok {
		return fmt.Errorf("duplicate key for list Priority %v", key)
	}

	t.Priority[key] = v
	return nil
}

// GetMinThreshSeparation retrieves the value of the leaf MinThreshSeparation from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinThreshSeparation is set, it can
// safely use t.GetMinThreshSeparation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinThreshSeparation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) GetMinThreshSeparation() NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_MinThreshSeparation_Union {
	if t == nil || t.MinThreshSeparation == nil {
		return nil
	}
	return t.MinThreshSeparation
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Priority {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority represents the /nokia-conf/configure/groups/group/service/ipipe/sap/ingress/qos/policer-control-policy/overrides/root/priority-mbs-thresholds/priority YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority struct {
	MbsContribution NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_MbsContribution_Union `path:"mbs-contribution" module:"nokia-conf"`
	PriorityLevel   NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union   `path:"priority-level" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) IsYANGGoStruct() {
}

// GetMbsContribution retrieves the value of the leaf MbsContribution from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MbsContribution is set, it can
// safely use t.GetMbsContribution() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MbsContribution == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) GetMbsContribution() NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_MbsContribution_Union {
	if t == nil || t.MbsContribution == nil {
		return nil
	}
	return t.MbsContribution
}

// GetPriorityLevel retrieves the value of the leaf PriorityLevel from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PriorityLevel is set, it can
// safely use t.GetPriorityLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PriorityLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) GetPriorityLevel() NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union {
	if t == nil || t.PriorityLevel == nil {
		return nil
	}
	return t.PriorityLevel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"priority-level": t.PriorityLevel,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress represents the /nokia-conf/configure/groups/group/service/ipipe/sap/ingress/qos/sap-ingress YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress struct {
	FpRedirectGroup *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup `path:"fp-redirect-group" module:"nokia-conf"`
	Overrides       *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides       `path:"overrides" module:"nokia-conf"`
	PolicyName      *string                                                                                    `path:"policy-name" module:"nokia-conf"`
	QueuingType     E_NokiaTypesServices_ServicesSapQueuingType                                                `path:"queuing-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress) IsYANGGoStruct() {}

// GetOrCreateFpRedirectGroup retrieves the value of the FpRedirectGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress) GetOrCreateFpRedirectGroup() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup {
	if t.FpRedirectGroup != nil {
		return t.FpRedirectGroup
	}
	t.FpRedirectGroup = &NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup{}
	return t.FpRedirectGroup
}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress) GetOrCreateOverrides() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides{}
	return t.Overrides
}

// GetFpRedirectGroup returns the value of the FpRedirectGroup struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress. If the receiver or the field FpRedirectGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress) GetFpRedirectGroup() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup {
	if t != nil && t.FpRedirectGroup != nil {
		return t.FpRedirectGroup
	}
	return nil
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress) GetOverrides() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// GetQueuingType retrieves the value of the leaf QueuingType from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueuingType is set, it can
// safely use t.GetQueuingType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueuingType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress) GetQueuingType() E_NokiaTypesServices_ServicesSapQueuingType {
	if t == nil || t.QueuingType == 0 {
		return 0
	}
	return t.QueuingType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.FpRedirectGroup.PopulateDefaults()
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup represents the /nokia-conf/configure/groups/group/service/ipipe/sap/ingress/qos/sap-ingress/fp-redirect-group YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup struct {
	GroupName *string `path:"group-name" module:"nokia-conf"`
	Instance  *uint32 `path:"instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup) IsYANGGoStruct() {
}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// GetInstance retrieves the value of the leaf Instance from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instance is set, it can
// safely use t.GetInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup) GetInstance() uint32 {
	if t == nil || t.Instance == nil {
		return 0
	}
	return *t.Instance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides represents the /nokia-conf/configure/groups/group/service/ipipe/sap/ingress/qos/sap-ingress/overrides YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides struct {
	Policer map[NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PolicerId_Union]*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer `path:"policer" module:"nokia-conf"`
	Queue   map[NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue       `path:"queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides) IsYANGGoStruct() {
}

// NewPolicer creates a new entry in the Policer list of the
// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides) NewPolicer(PolicerId NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PolicerId_Union) (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PolicerId_Union]*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer)
	}

	key := PolicerId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Policer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Policer", key)
	}

	t.Policer[key] = &NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer{
		PolicerId: PolicerId,
	}

	return t.Policer[key], nil
}

// RenamePolicer renames an entry in the list Policer within
// the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides) RenamePolicer(oldK, newK NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PolicerId_Union) error {
	if _, ok := t.Policer[newK]; ok {
		return fmt.Errorf("key %v already exists in Policer", newK)
	}

	e, ok := t.Policer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Policer", oldK)
	}
	e.PolicerId = newK

	t.Policer[newK] = e
	delete(t.Policer, oldK)
	return nil
}

// GetOrCreatePolicer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides) GetOrCreatePolicer(PolicerId NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PolicerId_Union) *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer {

	key := PolicerId

	if v, ok := t.Policer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicer(PolicerId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicer got unexpected error: %v", err))
	}
	return v
}

// GetPolicer retrieves the value with the specified key from
// the Policer map field of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides) GetPolicer(PolicerId NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PolicerId_Union) *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer {

	if t == nil {
		return nil
	}

	key := PolicerId

	if lm, ok := t.Policer[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides) DeletePolicer(PolicerId NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PolicerId_Union) {
	key := PolicerId

	delete(t.Policer, key)
}

// AppendPolicer appends the supplied NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer struct to the
// list Policer of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides) AppendPolicer(v *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) error {
	key := v.PolicerId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PolicerId_Union]*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer)
	}

	if _, ok := t.Policer[key]; ok {
		return fmt.Errorf("duplicate key for list Policer %v", key)
	}

	t.Policer[key] = v
	return nil
}

// NewQueue creates a new entry in the Queue list of the
// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides) NewQueue(QueueId NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_QueueId_Union) (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue)
	}

	key := QueueId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue{
		QueueId: QueueId,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides) RenameQueue(oldK, newK NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_QueueId_Union) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.QueueId = newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides) GetOrCreateQueue(QueueId NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_QueueId_Union) *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue {

	key := QueueId

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(QueueId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides) GetQueue(QueueId NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_QueueId_Union) *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue {

	if t == nil {
		return nil
	}

	key := QueueId

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides) DeleteQueue(QueueId NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_QueueId_Union) {
	key := QueueId

	delete(t.Queue, key)
}

// AppendQueue appends the supplied NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue struct to the
// list Queue of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides) AppendQueue(v *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) error {
	key := v.QueueId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Policer {
		e.PopulateDefaults()
	}
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer represents the /nokia-conf/configure/groups/group/service/ipipe/sap/ingress/qos/sap-ingress/overrides/policer YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer struct {
	Cbs              NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Cbs_Union       `path:"cbs" module:"nokia-conf"`
	Mbs              NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Mbs_Union       `path:"mbs" module:"nokia-conf"`
	PacketByteOffset *int32                                                                                                      `path:"packet-byte-offset" module:"nokia-conf"`
	PercentRate      *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate    `path:"percent-rate" module:"nokia-conf"`
	PolicerId        NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PolicerId_Union `path:"policer-id" module:"nokia-conf"`
	Rate             *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate           `path:"rate" module:"nokia-conf"`
	StatMode         E_NokiaTypesQos_IngressPolicerStatMode                                                                      `path:"stat-mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) IsYANGGoStruct() {
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetOrCreatePercentRate() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate{}
	return t.PercentRate
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetOrCreateRate() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate{}
	return t.Rate
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetPercentRate() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetRate() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetCbs() NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return nil
	}
	return t.Cbs
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetMbs() NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return nil
	}
	return t.Mbs
}

// GetPacketByteOffset retrieves the value of the leaf PacketByteOffset from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketByteOffset is set, it can
// safely use t.GetPacketByteOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketByteOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetPacketByteOffset() int32 {
	if t == nil || t.PacketByteOffset == nil {
		return 0
	}
	return *t.PacketByteOffset
}

// GetPolicerId retrieves the value of the leaf PolicerId from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerId is set, it can
// safely use t.GetPolicerId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetPolicerId() NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PolicerId_Union {
	if t == nil || t.PolicerId == nil {
		return nil
	}
	return t.PolicerId
}

// GetStatMode retrieves the value of the leaf StatMode from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StatMode is set, it can
// safely use t.GetStatMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StatMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetStatMode() E_NokiaTypesQos_IngressPolicerStatMode {
	if t == nil || t.StatMode == 0 {
		return 0
	}
	return t.StatMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PercentRate.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"policer-id": t.PolicerId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate represents the /nokia-conf/configure/groups/group/service/ipipe/sap/ingress/qos/sap-ingress/overrides/policer/percent-rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate struct {
	Cir *float64 `path:"cir" module:"nokia-conf"`
	Pir *float64 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 0.0
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 0.0
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate represents the /nokia-conf/configure/groups/group/service/ipipe/sap/ingress/qos/sap-ingress/overrides/policer/rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate struct {
	Cir NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) GetCir() NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) GetPir() NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue represents the /nokia-conf/configure/groups/group/service/ipipe/sap/ingress/qos/sap-ingress/overrides/queue YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue struct {
	AdaptationRule    *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule    `path:"adaptation-rule" module:"nokia-conf"`
	Cbs               NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Cbs_Union          `path:"cbs" module:"nokia-conf"`
	DropTail          *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail          `path:"drop-tail" module:"nokia-conf"`
	Mbs               NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Mbs_Union          `path:"mbs" module:"nokia-conf"`
	MonitorDepth      *bool                                                                                                        `path:"monitor-depth" module:"nokia-conf"`
	MonitorQueueDepth *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth `path:"monitor-queue-depth" module:"nokia-conf" yangPresence:"true"`
	Parent            *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent            `path:"parent" module:"nokia-conf"`
	PercentRate       *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate       `path:"percent-rate" module:"nokia-conf"`
	QueueId           NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_QueueId_Union      `path:"queue-id" module:"nokia-conf"`
	Rate              *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate              `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) IsYANGGoStruct() {
}

// GetOrCreateAdaptationRule retrieves the value of the AdaptationRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetOrCreateAdaptationRule() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule {
	if t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	t.AdaptationRule = &NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule{}
	return t.AdaptationRule
}

// GetOrCreateDropTail retrieves the value of the DropTail field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetOrCreateDropTail() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail {
	if t.DropTail != nil {
		return t.DropTail
	}
	t.DropTail = &NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail{}
	return t.DropTail
}

// GetOrCreateMonitorQueueDepth retrieves the value of the MonitorQueueDepth field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetOrCreateMonitorQueueDepth() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth {
	if t.MonitorQueueDepth != nil {
		return t.MonitorQueueDepth
	}
	t.MonitorQueueDepth = &NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth{}
	return t.MonitorQueueDepth
}

// GetOrCreateParent retrieves the value of the Parent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetOrCreateParent() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent {
	if t.Parent != nil {
		return t.Parent
	}
	t.Parent = &NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent{}
	return t.Parent
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetOrCreatePercentRate() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate{}
	return t.PercentRate
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetOrCreateRate() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate{}
	return t.Rate
}

// GetAdaptationRule returns the value of the AdaptationRule struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue. If the receiver or the field AdaptationRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetAdaptationRule() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule {
	if t != nil && t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	return nil
}

// GetDropTail returns the value of the DropTail struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue. If the receiver or the field DropTail is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetDropTail() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail {
	if t != nil && t.DropTail != nil {
		return t.DropTail
	}
	return nil
}

// GetMonitorQueueDepth returns the value of the MonitorQueueDepth struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue. If the receiver or the field MonitorQueueDepth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetMonitorQueueDepth() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth {
	if t != nil && t.MonitorQueueDepth != nil {
		return t.MonitorQueueDepth
	}
	return nil
}

// GetParent returns the value of the Parent struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue. If the receiver or the field Parent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetParent() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent {
	if t != nil && t.Parent != nil {
		return t.Parent
	}
	return nil
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetPercentRate() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetRate() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetCbs() NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return nil
	}
	return t.Cbs
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetMbs() NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return nil
	}
	return t.Mbs
}

// GetMonitorDepth retrieves the value of the leaf MonitorDepth from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorDepth is set, it can
// safely use t.GetMonitorDepth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorDepth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetMonitorDepth() bool {
	if t == nil || t.MonitorDepth == nil {
		return false
	}
	return *t.MonitorDepth
}

// GetQueueId retrieves the value of the leaf QueueId from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueId is set, it can
// safely use t.GetQueueId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetQueueId() NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_QueueId_Union {
	if t == nil || t.QueueId == nil {
		return nil
	}
	return t.QueueId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MonitorDepth == nil {
		var v bool = false
		t.MonitorDepth = &v
	}
	t.AdaptationRule.PopulateDefaults()
	t.DropTail.PopulateDefaults()
	t.MonitorQueueDepth.PopulateDefaults()
	t.Parent.PopulateDefaults()
	t.PercentRate.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"queue-id": t.QueueId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule represents the /nokia-conf/configure/groups/group/service/ipipe/sap/ingress/qos/sap-ingress/overrides/queue/adaptation-rule YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule struct {
	Cir E_NokiaTypesQos_AdaptationRuleOverride `path:"cir" module:"nokia-conf"`
	Pir E_NokiaTypesQos_AdaptationRuleOverride `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) GetCir() E_NokiaTypesQos_AdaptationRuleOverride {
	if t == nil || t.Cir == 0 {
		return 0
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) GetPir() E_NokiaTypesQos_AdaptationRuleOverride {
	if t == nil || t.Pir == 0 {
		return 0
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail represents the /nokia-conf/configure/groups/group/service/ipipe/sap/ingress/qos/sap-ingress/overrides/queue/drop-tail YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail struct {
	Low *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low `path:"low" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) IsYANGGoStruct() {
}

// GetOrCreateLow retrieves the value of the Low field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) GetOrCreateLow() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low {
	if t.Low != nil {
		return t.Low
	}
	t.Low = &NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low{}
	return t.Low
}

// GetLow returns the value of the Low struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail. If the receiver or the field Low is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) GetLow() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low {
	if t != nil && t.Low != nil {
		return t.Low
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Low.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low represents the /nokia-conf/configure/groups/group/service/ipipe/sap/ingress/qos/sap-ingress/overrides/queue/drop-tail/low YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low struct {
	PercentReductionFromMbs NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low_PercentReductionFromMbs_Union `path:"percent-reduction-from-mbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low) IsYANGGoStruct() {
}

// GetPercentReductionFromMbs retrieves the value of the leaf PercentReductionFromMbs from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentReductionFromMbs is set, it can
// safely use t.GetPercentReductionFromMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentReductionFromMbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low) GetPercentReductionFromMbs() NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low_PercentReductionFromMbs_Union {
	if t == nil || t.PercentReductionFromMbs == nil {
		return nil
	}
	return t.PercentReductionFromMbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth represents the /nokia-conf/configure/groups/group/service/ipipe/sap/ingress/qos/sap-ingress/overrides/queue/monitor-queue-depth YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth struct {
	FastPolling *bool `path:"fast-polling" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth) IsYANGGoStruct() {
}

// GetFastPolling retrieves the value of the leaf FastPolling from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FastPolling is set, it can
// safely use t.GetFastPolling() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FastPolling == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth) GetFastPolling() bool {
	if t == nil || t.FastPolling == nil {
		return false
	}
	return *t.FastPolling
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FastPolling == nil {
		var v bool = false
		t.FastPolling = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent represents the /nokia-conf/configure/groups/group/service/ipipe/sap/ingress/qos/sap-ingress/overrides/queue/parent YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent struct {
	CirWeight *int32 `path:"cir-weight" module:"nokia-conf"`
	Weight    *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) IsYANGGoStruct() {
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 0
	}
	return *t.CirWeight
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate represents the /nokia-conf/configure/groups/group/service/ipipe/sap/ingress/qos/sap-ingress/overrides/queue/percent-rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate struct {
	Cir *float64 `path:"cir" module:"nokia-conf"`
	Pir *float64 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 0.0
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 0.0
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate represents the /nokia-conf/configure/groups/group/service/ipipe/sap/ingress/qos/sap-ingress/overrides/queue/rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate struct {
	Cir NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) GetCir() NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) GetPir() NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy represents the /nokia-conf/configure/groups/group/service/ipipe/sap/ingress/qos/scheduler-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy struct {
	Overrides  *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides `path:"overrides" module:"nokia-conf"`
	PolicyName *string                                                                                   `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy) IsYANGGoStruct() {
}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy) GetOrCreateOverrides() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy) GetOverrides() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides represents the /nokia-conf/configure/groups/group/service/ipipe/sap/ingress/qos/scheduler-policy/overrides YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides struct {
	Scheduler map[string]*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler `path:"scheduler" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides) IsYANGGoStruct() {
}

// NewScheduler creates a new entry in the Scheduler list of the
// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides) NewScheduler(SchedulerName string) (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler)
	}

	key := SchedulerName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Scheduler[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Scheduler", key)
	}

	t.Scheduler[key] = &NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler{
		SchedulerName: &SchedulerName,
	}

	return t.Scheduler[key], nil
}

// RenameScheduler renames an entry in the list Scheduler within
// the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides) RenameScheduler(oldK, newK string) error {
	if _, ok := t.Scheduler[newK]; ok {
		return fmt.Errorf("key %v already exists in Scheduler", newK)
	}

	e, ok := t.Scheduler[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Scheduler", oldK)
	}
	e.SchedulerName = &newK

	t.Scheduler[newK] = e
	delete(t.Scheduler, oldK)
	return nil
}

// GetOrCreateScheduler retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides) GetOrCreateScheduler(SchedulerName string) *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler {

	key := SchedulerName

	if v, ok := t.Scheduler[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewScheduler(SchedulerName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateScheduler got unexpected error: %v", err))
	}
	return v
}

// GetScheduler retrieves the value with the specified key from
// the Scheduler map field of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides) GetScheduler(SchedulerName string) *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler {

	if t == nil {
		return nil
	}

	key := SchedulerName

	if lm, ok := t.Scheduler[key]; ok {
		return lm
	}
	return nil
}

// DeleteScheduler deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides) DeleteScheduler(SchedulerName string) {
	key := SchedulerName

	delete(t.Scheduler, key)
}

// AppendScheduler appends the supplied NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler struct to the
// list Scheduler of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides) AppendScheduler(v *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) error {
	if v.SchedulerName == nil {
		return fmt.Errorf("invalid nil key received for SchedulerName")
	}

	key := *v.SchedulerName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler)
	}

	if _, ok := t.Scheduler[key]; ok {
		return fmt.Errorf("duplicate key for list Scheduler %v", key)
	}

	t.Scheduler[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Scheduler {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler represents the /nokia-conf/configure/groups/group/service/ipipe/sap/ingress/qos/scheduler-policy/overrides/scheduler YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler struct {
	Parent        *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent `path:"parent" module:"nokia-conf"`
	Rate          *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate   `path:"rate" module:"nokia-conf"`
	SchedulerName *string                                                                                                    `path:"scheduler-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) IsYANGGoStruct() {
}

// GetOrCreateParent retrieves the value of the Parent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) GetOrCreateParent() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent {
	if t.Parent != nil {
		return t.Parent
	}
	t.Parent = &NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent{}
	return t.Parent
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) GetOrCreateRate() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate{}
	return t.Rate
}

// GetParent returns the value of the Parent struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler. If the receiver or the field Parent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) GetParent() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent {
	if t != nil && t.Parent != nil {
		return t.Parent
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) GetRate() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetSchedulerName retrieves the value of the leaf SchedulerName from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SchedulerName is set, it can
// safely use t.GetSchedulerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SchedulerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) GetSchedulerName() string {
	if t == nil || t.SchedulerName == nil {
		return ""
	}
	return *t.SchedulerName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Parent.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SchedulerName == nil {
		return nil, fmt.Errorf("nil value for key SchedulerName")
	}

	return map[string]interface{}{
		"scheduler-name": *t.SchedulerName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent represents the /nokia-conf/configure/groups/group/service/ipipe/sap/ingress/qos/scheduler-policy/overrides/scheduler/parent YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent struct {
	CirWeight *int32 `path:"cir-weight" module:"nokia-conf"`
	Weight    *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) IsYANGGoStruct() {
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 0
	}
	return *t.CirWeight
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate represents the /nokia-conf/configure/groups/group/service/ipipe/sap/ingress/qos/scheduler-policy/overrides/scheduler/rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate struct {
	Cir NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) GetCir() NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) GetPir() NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Lag represents the /nokia-conf/configure/groups/group/service/ipipe/sap/lag YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Lag struct {
	LinkMapProfile *int32                                                              `path:"link-map-profile" module:"nokia-conf"`
	PerLinkHash    *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Lag_PerLinkHash `path:"per-link-hash" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Lag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Lag) IsYANGGoStruct() {}

// GetOrCreatePerLinkHash retrieves the value of the PerLinkHash field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Lag) GetOrCreatePerLinkHash() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Lag_PerLinkHash {
	if t.PerLinkHash != nil {
		return t.PerLinkHash
	}
	t.PerLinkHash = &NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Lag_PerLinkHash{}
	return t.PerLinkHash
}

// GetPerLinkHash returns the value of the PerLinkHash struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Lag. If the receiver or the field PerLinkHash is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Lag) GetPerLinkHash() *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Lag_PerLinkHash {
	if t != nil && t.PerLinkHash != nil {
		return t.PerLinkHash
	}
	return nil
}

// GetLinkMapProfile retrieves the value of the leaf LinkMapProfile from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Lag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkMapProfile is set, it can
// safely use t.GetLinkMapProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkMapProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Lag) GetLinkMapProfile() int32 {
	if t == nil || t.LinkMapProfile == nil {
		return 0
	}
	return *t.LinkMapProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Lag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Lag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PerLinkHash.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Lag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Lag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Lag) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Lag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Lag.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Lag) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Lag_PerLinkHash represents the /nokia-conf/configure/groups/group/service/ipipe/sap/lag/per-link-hash YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Lag_PerLinkHash struct {
	Class  *int32 `path:"class" module:"nokia-conf"`
	Weight *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Lag_PerLinkHash implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Lag_PerLinkHash) IsYANGGoStruct() {}

// GetClass retrieves the value of the leaf Class from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Lag_PerLinkHash
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Class is set, it can
// safely use t.GetClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Class == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Lag_PerLinkHash) GetClass() int32 {
	if t == nil || t.Class == nil {
		return 1
	}
	return *t.Class
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Lag_PerLinkHash
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Lag_PerLinkHash) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 1
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Lag_PerLinkHash
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Lag_PerLinkHash) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Class == nil {
		var v int32 = 1
		t.Class = &v
	}
	if t.Weight == nil {
		var v int32 = 1
		t.Weight = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Lag_PerLinkHash) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Lag_PerLinkHash"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Lag_PerLinkHash) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Lag_PerLinkHash) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Lag_PerLinkHash.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_Lag_PerLinkHash) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_TransitPolicy represents the /nokia-conf/configure/groups/group/service/ipipe/sap/transit-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_TransitPolicy struct {
	Prefix *uint32 `path:"prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_TransitPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_TransitPolicy) IsYANGGoStruct() {}

// GetPrefix retrieves the value of the leaf Prefix from the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_TransitPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_TransitPolicy) GetPrefix() uint32 {
	if t == nil || t.Prefix == nil {
		return 0
	}
	return *t.Prefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_TransitPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_TransitPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_TransitPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_TransitPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_TransitPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_TransitPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_TransitPolicy.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_Sap_TransitPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp represents the /nokia-conf/configure/groups/group/service/ipipe/spoke-sdp YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp struct {
	Aarp          *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Aarp           `path:"aarp" module:"nokia-conf" yangPresence:"true"`
	AdminState    E_NokiaTypesSros_AdminState                                             `path:"admin-state" module:"nokia-conf"`
	AppProfile    *string                                                                 `path:"app-profile" module:"nokia-conf"`
	Bandwidth     NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Bandwidth_Union `path:"bandwidth" module:"nokia-conf"`
	Bfd           *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Bfd            `path:"bfd" module:"nokia-conf"`
	BfdLiveness   *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_BfdLiveness    `path:"bfd-liveness" module:"nokia-conf" yangPresence:"true"`
	BfdTemplate   *string                                                                 `path:"bfd-template" module:"nokia-conf"`
	CeAddress     *string                                                                 `path:"ce-address" module:"nokia-conf"`
	ControlWord   *bool                                                                   `path:"control-word" module:"nokia-conf"`
	Description   *string                                                                 `path:"description" module:"nokia-conf"`
	Egress        *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress         `path:"egress" module:"nokia-conf"`
	Endpoint      *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Endpoint       `path:"endpoint" module:"nokia-conf"`
	EntropyLabel  YANGEmpty                                                               `path:"entropy-label" module:"nokia-conf"`
	HashLabel     *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_HashLabel      `path:"hash-label" module:"nokia-conf" yangPresence:"true"`
	Ingress       *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress        `path:"ingress" module:"nokia-conf"`
	SdpBindId     *string                                                                 `path:"sdp-bind-id" module:"nokia-conf"`
	TransitPolicy *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_TransitPolicy  `path:"transit-policy" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp) IsYANGGoStruct() {}

// GetOrCreateAarp retrieves the value of the Aarp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp) GetOrCreateAarp() *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Aarp {
	if t.Aarp != nil {
		return t.Aarp
	}
	t.Aarp = &NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Aarp{}
	return t.Aarp
}

// GetOrCreateBfd retrieves the value of the Bfd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp) GetOrCreateBfd() *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Bfd {
	if t.Bfd != nil {
		return t.Bfd
	}
	t.Bfd = &NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Bfd{}
	return t.Bfd
}

// GetOrCreateBfdLiveness retrieves the value of the BfdLiveness field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp) GetOrCreateBfdLiveness() *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_BfdLiveness {
	if t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	t.BfdLiveness = &NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_BfdLiveness{}
	return t.BfdLiveness
}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp) GetOrCreateEgress() *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress{}
	return t.Egress
}

// GetOrCreateEndpoint retrieves the value of the Endpoint field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp) GetOrCreateEndpoint() *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Endpoint {
	if t.Endpoint != nil {
		return t.Endpoint
	}
	t.Endpoint = &NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Endpoint{}
	return t.Endpoint
}

// GetOrCreateHashLabel retrieves the value of the HashLabel field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp) GetOrCreateHashLabel() *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_HashLabel {
	if t.HashLabel != nil {
		return t.HashLabel
	}
	t.HashLabel = &NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_HashLabel{}
	return t.HashLabel
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp) GetOrCreateIngress() *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress{}
	return t.Ingress
}

// GetOrCreateTransitPolicy retrieves the value of the TransitPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp) GetOrCreateTransitPolicy() *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_TransitPolicy {
	if t.TransitPolicy != nil {
		return t.TransitPolicy
	}
	t.TransitPolicy = &NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_TransitPolicy{}
	return t.TransitPolicy
}

// GetAarp returns the value of the Aarp struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp. If the receiver or the field Aarp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp) GetAarp() *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Aarp {
	if t != nil && t.Aarp != nil {
		return t.Aarp
	}
	return nil
}

// GetBfd returns the value of the Bfd struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp. If the receiver or the field Bfd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp) GetBfd() *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Bfd {
	if t != nil && t.Bfd != nil {
		return t.Bfd
	}
	return nil
}

// GetBfdLiveness returns the value of the BfdLiveness struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp. If the receiver or the field BfdLiveness is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp) GetBfdLiveness() *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_BfdLiveness {
	if t != nil && t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	return nil
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp) GetEgress() *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetEndpoint returns the value of the Endpoint struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp. If the receiver or the field Endpoint is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp) GetEndpoint() *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Endpoint {
	if t != nil && t.Endpoint != nil {
		return t.Endpoint
	}
	return nil
}

// GetHashLabel returns the value of the HashLabel struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp. If the receiver or the field HashLabel is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp) GetHashLabel() *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_HashLabel {
	if t != nil && t.HashLabel != nil {
		return t.HashLabel
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp) GetIngress() *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetTransitPolicy returns the value of the TransitPolicy struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp. If the receiver or the field TransitPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp) GetTransitPolicy() *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_TransitPolicy {
	if t != nil && t.TransitPolicy != nil {
		return t.TransitPolicy
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetAppProfile retrieves the value of the leaf AppProfile from the NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AppProfile is set, it can
// safely use t.GetAppProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AppProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp) GetAppProfile() string {
	if t == nil || t.AppProfile == nil {
		return ""
	}
	return *t.AppProfile
}

// GetBandwidth retrieves the value of the leaf Bandwidth from the NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bandwidth is set, it can
// safely use t.GetBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp) GetBandwidth() NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Bandwidth_Union {
	if t == nil || t.Bandwidth == nil {
		return UnionUint32(0)
	}
	return t.Bandwidth
}

// GetBfdTemplate retrieves the value of the leaf BfdTemplate from the NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdTemplate is set, it can
// safely use t.GetBfdTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp) GetBfdTemplate() string {
	if t == nil || t.BfdTemplate == nil {
		return ""
	}
	return *t.BfdTemplate
}

// GetCeAddress retrieves the value of the leaf CeAddress from the NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CeAddress is set, it can
// safely use t.GetCeAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CeAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp) GetCeAddress() string {
	if t == nil || t.CeAddress == nil {
		return ""
	}
	return *t.CeAddress
}

// GetControlWord retrieves the value of the leaf ControlWord from the NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ControlWord is set, it can
// safely use t.GetControlWord() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ControlWord == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp) GetControlWord() bool {
	if t == nil || t.ControlWord == nil {
		return false
	}
	return *t.ControlWord
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEntropyLabel retrieves the value of the leaf EntropyLabel from the NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntropyLabel is set, it can
// safely use t.GetEntropyLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntropyLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp) GetEntropyLabel() YANGEmpty {
	if t == nil || t.EntropyLabel == false {
		return false
	}
	return t.EntropyLabel
}

// GetSdpBindId retrieves the value of the leaf SdpBindId from the NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SdpBindId is set, it can
// safely use t.GetSdpBindId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SdpBindId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp) GetSdpBindId() string {
	if t == nil || t.SdpBindId == nil {
		return ""
	}
	return *t.SdpBindId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Bandwidth == nil {
		t.Bandwidth = UnionUint32(0)
	}
	if t.ControlWord == nil {
		var v bool = false
		t.ControlWord = &v
	}
	t.Aarp.PopulateDefaults()
	t.Bfd.PopulateDefaults()
	t.BfdLiveness.PopulateDefaults()
	t.Egress.PopulateDefaults()
	t.Endpoint.PopulateDefaults()
	t.HashLabel.PopulateDefaults()
	t.Ingress.PopulateDefaults()
	t.TransitPolicy.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SdpBindId == nil {
		return nil, fmt.Errorf("nil value for key SdpBindId")
	}

	return map[string]interface{}{
		"sdp-bind-id": *t.SdpBindId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Aarp represents the /nokia-conf/configure/groups/group/service/ipipe/spoke-sdp/aarp YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Aarp struct {
	Id   *uint32                                      `path:"id" module:"nokia-conf"`
	Type E_NokiaTypesServices_L3BsxAarpServiceRefType `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Aarp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Aarp) IsYANGGoStruct() {}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Aarp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Aarp) GetId() uint32 {
	if t == nil || t.Id == nil {
		return 0
	}
	return *t.Id
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Aarp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Aarp) GetType() E_NokiaTypesServices_L3BsxAarpServiceRefType {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Aarp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Aarp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Aarp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Aarp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Aarp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Aarp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Aarp.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Aarp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Bfd represents the /nokia-conf/configure/groups/group/service/ipipe/spoke-sdp/bfd YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Bfd struct {
	BfdLiveness *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Bfd_BfdLiveness `path:"bfd-liveness" module:"nokia-conf" yangPresence:"true"`
	BfdTemplate *string                                                                  `path:"bfd-template" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Bfd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Bfd) IsYANGGoStruct() {}

// GetOrCreateBfdLiveness retrieves the value of the BfdLiveness field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Bfd) GetOrCreateBfdLiveness() *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Bfd_BfdLiveness {
	if t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	t.BfdLiveness = &NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Bfd_BfdLiveness{}
	return t.BfdLiveness
}

// GetBfdLiveness returns the value of the BfdLiveness struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Bfd. If the receiver or the field BfdLiveness is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Bfd) GetBfdLiveness() *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Bfd_BfdLiveness {
	if t != nil && t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	return nil
}

// GetBfdTemplate retrieves the value of the leaf BfdTemplate from the NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdTemplate is set, it can
// safely use t.GetBfdTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Bfd) GetBfdTemplate() string {
	if t == nil || t.BfdTemplate == nil {
		return ""
	}
	return *t.BfdTemplate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Bfd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Bfd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.BfdLiveness.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Bfd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Bfd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Bfd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Bfd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Bfd.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Bfd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_BfdLiveness represents the /nokia-conf/configure/groups/group/service/ipipe/spoke-sdp/bfd-liveness YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_BfdLiveness struct {
	Encap E_NokiaTypesServices_BfdEncap `path:"encap" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_BfdLiveness implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_BfdLiveness) IsYANGGoStruct() {}

// GetEncap retrieves the value of the leaf Encap from the NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Encap is set, it can
// safely use t.GetEncap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Encap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_BfdLiveness) GetEncap() E_NokiaTypesServices_BfdEncap {
	if t == nil || t.Encap == 0 {
		return NokiaTypesServices_BfdEncap_ipv4
	}
	return t.Encap
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_BfdLiveness
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_BfdLiveness) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Encap == 0 {
		t.Encap = NokiaTypesServices_BfdEncap_ipv4
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_BfdLiveness) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_BfdLiveness"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_BfdLiveness) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_BfdLiveness) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_BfdLiveness.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_BfdLiveness) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Bfd_BfdLiveness represents the /nokia-conf/configure/groups/group/service/ipipe/spoke-sdp/bfd/bfd-liveness YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Bfd_BfdLiveness struct {
	Encap E_NokiaTypesServices_BfdEncap `path:"encap" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Bfd_BfdLiveness implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Bfd_BfdLiveness) IsYANGGoStruct() {}

// GetEncap retrieves the value of the leaf Encap from the NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Bfd_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Encap is set, it can
// safely use t.GetEncap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Encap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Bfd_BfdLiveness) GetEncap() E_NokiaTypesServices_BfdEncap {
	if t == nil || t.Encap == 0 {
		return NokiaTypesServices_BfdEncap_ipv4
	}
	return t.Encap
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Bfd_BfdLiveness
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Bfd_BfdLiveness) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Encap == 0 {
		t.Encap = NokiaTypesServices_BfdEncap_ipv4
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Bfd_BfdLiveness) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Bfd_BfdLiveness"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Bfd_BfdLiveness) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Bfd_BfdLiveness) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Bfd_BfdLiveness.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Bfd_BfdLiveness) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress represents the /nokia-conf/configure/groups/group/service/ipipe/spoke-sdp/egress YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress struct {
	Filter  *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Filter `path:"filter" module:"nokia-conf"`
	Qos     *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Qos    `path:"qos" module:"nokia-conf"`
	VcLabel *uint32                                                                `path:"vc-label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress) IsYANGGoStruct() {}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress) GetOrCreateFilter() *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Filter{}
	return t.Filter
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress) GetOrCreateQos() *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Qos{}
	return t.Qos
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress) GetFilter() *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress) GetQos() *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// GetVcLabel retrieves the value of the leaf VcLabel from the NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VcLabel is set, it can
// safely use t.GetVcLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VcLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress) GetVcLabel() uint32 {
	if t == nil || t.VcLabel == nil {
		return 0
	}
	return *t.VcLabel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Filter.PopulateDefaults()
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Filter represents the /nokia-conf/configure/groups/group/service/ipipe/spoke-sdp/egress/filter YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Filter struct {
	Ip   *string `path:"ip" module:"nokia-conf"`
	Ipv6 *string `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Filter) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Filter) GetIpv6() string {
	if t == nil || t.Ipv6 == nil {
		return ""
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Filter.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Qos represents the /nokia-conf/configure/groups/group/service/ipipe/spoke-sdp/egress/qos YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Qos struct {
	Network *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Qos_Network `path:"network" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Qos) IsYANGGoStruct() {}

// GetOrCreateNetwork retrieves the value of the Network field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Qos) GetOrCreateNetwork() *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Qos_Network {
	if t.Network != nil {
		return t.Network
	}
	t.Network = &NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Qos_Network{}
	return t.Network
}

// GetNetwork returns the value of the Network struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Qos. If the receiver or the field Network is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Qos) GetNetwork() *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Qos_Network {
	if t != nil && t.Network != nil {
		return t.Network
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Network.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Qos.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Qos_Network represents the /nokia-conf/configure/groups/group/service/ipipe/spoke-sdp/egress/qos/network YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Qos_Network struct {
	PolicyName        *string                                                                                       `path:"policy-name" module:"nokia-conf"`
	PortRedirectGroup *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup `path:"port-redirect-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Qos_Network implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Qos_Network) IsYANGGoStruct() {}

// GetOrCreatePortRedirectGroup retrieves the value of the PortRedirectGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Qos_Network) GetOrCreatePortRedirectGroup() *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup {
	if t.PortRedirectGroup != nil {
		return t.PortRedirectGroup
	}
	t.PortRedirectGroup = &NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup{}
	return t.PortRedirectGroup
}

// GetPortRedirectGroup returns the value of the PortRedirectGroup struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Qos_Network. If the receiver or the field PortRedirectGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Qos_Network) GetPortRedirectGroup() *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup {
	if t != nil && t.PortRedirectGroup != nil {
		return t.PortRedirectGroup
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Qos_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Qos_Network) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Qos_Network
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Qos_Network) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PortRedirectGroup.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Qos_Network) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Qos_Network"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Qos_Network) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Qos_Network) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Qos_Network.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Qos_Network) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup represents the /nokia-conf/configure/groups/group/service/ipipe/spoke-sdp/egress/qos/network/port-redirect-group YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup struct {
	GroupName *string `path:"group-name" module:"nokia-conf"`
	Instance  *uint32 `path:"instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) IsYANGGoStruct() {
}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// GetInstance retrieves the value of the leaf Instance from the NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instance is set, it can
// safely use t.GetInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) GetInstance() uint32 {
	if t == nil || t.Instance == nil {
		return 0
	}
	return *t.Instance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Endpoint represents the /nokia-conf/configure/groups/group/service/ipipe/spoke-sdp/endpoint YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Endpoint struct {
	Name       *string                                                                           `path:"name" module:"nokia-conf"`
	Precedence NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Endpoint_Precedence_Union `path:"precedence" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Endpoint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Endpoint) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Endpoint) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPrecedence retrieves the value of the leaf Precedence from the NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Precedence is set, it can
// safely use t.GetPrecedence() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Precedence == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Endpoint) GetPrecedence() NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Endpoint_Precedence_Union {
	if t == nil || t.Precedence == nil {
		return UnionUint32(4)
	}
	return t.Precedence
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Endpoint
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Endpoint) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Precedence == nil {
		t.Precedence = UnionUint32(4)
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Endpoint) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Endpoint"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Endpoint) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Endpoint) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Endpoint.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Endpoint) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_HashLabel represents the /nokia-conf/configure/groups/group/service/ipipe/spoke-sdp/hash-label YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_HashLabel struct {
	SignalCapability YANGEmpty `path:"signal-capability" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_HashLabel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_HashLabel) IsYANGGoStruct() {}

// GetSignalCapability retrieves the value of the leaf SignalCapability from the NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_HashLabel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SignalCapability is set, it can
// safely use t.GetSignalCapability() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SignalCapability == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_HashLabel) GetSignalCapability() YANGEmpty {
	if t == nil || t.SignalCapability == false {
		return false
	}
	return t.SignalCapability
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_HashLabel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_HashLabel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_HashLabel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_HashLabel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_HashLabel) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_HashLabel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_HashLabel.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_HashLabel) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress represents the /nokia-conf/configure/groups/group/service/ipipe/spoke-sdp/ingress YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress struct {
	Filter  *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Filter `path:"filter" module:"nokia-conf"`
	Qos     *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Qos    `path:"qos" module:"nokia-conf"`
	VcLabel *uint32                                                                 `path:"vc-label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress) IsYANGGoStruct() {}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress) GetOrCreateFilter() *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Filter{}
	return t.Filter
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress) GetOrCreateQos() *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Qos{}
	return t.Qos
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress) GetFilter() *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress) GetQos() *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// GetVcLabel retrieves the value of the leaf VcLabel from the NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VcLabel is set, it can
// safely use t.GetVcLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VcLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress) GetVcLabel() uint32 {
	if t == nil || t.VcLabel == nil {
		return 0
	}
	return *t.VcLabel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Filter.PopulateDefaults()
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Filter represents the /nokia-conf/configure/groups/group/service/ipipe/spoke-sdp/ingress/filter YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Filter struct {
	Ip   *string `path:"ip" module:"nokia-conf"`
	Ipv6 *string `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Filter) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Filter) GetIpv6() string {
	if t == nil || t.Ipv6 == nil {
		return ""
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Filter.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Qos represents the /nokia-conf/configure/groups/group/service/ipipe/spoke-sdp/ingress/qos YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Qos struct {
	Network *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Qos_Network `path:"network" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Qos) IsYANGGoStruct() {}

// GetOrCreateNetwork retrieves the value of the Network field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Qos) GetOrCreateNetwork() *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Qos_Network {
	if t.Network != nil {
		return t.Network
	}
	t.Network = &NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Qos_Network{}
	return t.Network
}

// GetNetwork returns the value of the Network struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Qos. If the receiver or the field Network is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Qos) GetNetwork() *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Qos_Network {
	if t != nil && t.Network != nil {
		return t.Network
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Network.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Qos.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Qos_Network represents the /nokia-conf/configure/groups/group/service/ipipe/spoke-sdp/ingress/qos/network YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Qos_Network struct {
	FpRedirectGroup *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup `path:"fp-redirect-group" module:"nokia-conf"`
	PolicyName      *string                                                                                      `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Qos_Network implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Qos_Network) IsYANGGoStruct() {
}

// GetOrCreateFpRedirectGroup retrieves the value of the FpRedirectGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Qos_Network) GetOrCreateFpRedirectGroup() *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup {
	if t.FpRedirectGroup != nil {
		return t.FpRedirectGroup
	}
	t.FpRedirectGroup = &NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup{}
	return t.FpRedirectGroup
}

// GetFpRedirectGroup returns the value of the FpRedirectGroup struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Qos_Network. If the receiver or the field FpRedirectGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Qos_Network) GetFpRedirectGroup() *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup {
	if t != nil && t.FpRedirectGroup != nil {
		return t.FpRedirectGroup
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Qos_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Qos_Network) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Qos_Network
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Qos_Network) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.FpRedirectGroup.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Qos_Network) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Qos_Network"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Qos_Network) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Qos_Network) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Qos_Network.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Qos_Network) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup represents the /nokia-conf/configure/groups/group/service/ipipe/spoke-sdp/ingress/qos/network/fp-redirect-group YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup struct {
	GroupName *string `path:"group-name" module:"nokia-conf"`
	Instance  *uint32 `path:"instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) IsYANGGoStruct() {
}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// GetInstance retrieves the value of the leaf Instance from the NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instance is set, it can
// safely use t.GetInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) GetInstance() uint32 {
	if t == nil || t.Instance == nil {
		return 0
	}
	return *t.Instance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_TransitPolicy represents the /nokia-conf/configure/groups/group/service/ipipe/spoke-sdp/transit-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_TransitPolicy struct {
	Prefix *uint32 `path:"prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_TransitPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_TransitPolicy) IsYANGGoStruct() {}

// GetPrefix retrieves the value of the leaf Prefix from the NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_TransitPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_TransitPolicy) GetPrefix() uint32 {
	if t == nil || t.Prefix == nil {
		return 0
	}
	return *t.Prefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_TransitPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_TransitPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_TransitPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_TransitPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_TransitPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_TransitPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_TransitPolicy.
func (*NokiaConf_Configure_Groups_Group_Service_Ipipe_SpokeSdp_TransitPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_MacList represents the /nokia-conf/configure/groups/group/service/mac-list YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_MacList struct {
	Description *string                                                          `path:"description" module:"nokia-conf"`
	Mac         map[string]*NokiaConf_Configure_Groups_Group_Service_MacList_Mac `path:"mac" module:"nokia-conf"`
	Name        *string                                                          `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_MacList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_MacList) IsYANGGoStruct() {}

// NewMac creates a new entry in the Mac list of the
// NokiaConf_Configure_Groups_Group_Service_MacList struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_MacList) NewMac(Address string) (*NokiaConf_Configure_Groups_Group_Service_MacList_Mac, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mac == nil {
		t.Mac = make(map[string]*NokiaConf_Configure_Groups_Group_Service_MacList_Mac)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mac[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mac", key)
	}

	t.Mac[key] = &NokiaConf_Configure_Groups_Group_Service_MacList_Mac{
		Address: &Address,
	}

	return t.Mac[key], nil
}

// RenameMac renames an entry in the list Mac within
// the NokiaConf_Configure_Groups_Group_Service_MacList struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_MacList) RenameMac(oldK, newK string) error {
	if _, ok := t.Mac[newK]; ok {
		return fmt.Errorf("key %v already exists in Mac", newK)
	}

	e, ok := t.Mac[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mac", oldK)
	}
	e.Address = &newK

	t.Mac[newK] = e
	delete(t.Mac, oldK)
	return nil
}

// GetOrCreateMac retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_MacList. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_MacList) GetOrCreateMac(Address string) *NokiaConf_Configure_Groups_Group_Service_MacList_Mac {

	key := Address

	if v, ok := t.Mac[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMac(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMac got unexpected error: %v", err))
	}
	return v
}

// GetMac retrieves the value with the specified key from
// the Mac map field of NokiaConf_Configure_Groups_Group_Service_MacList. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_MacList) GetMac(Address string) *NokiaConf_Configure_Groups_Group_Service_MacList_Mac {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.Mac[key]; ok {
		return lm
	}
	return nil
}

// DeleteMac deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_MacList. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_MacList) DeleteMac(Address string) {
	key := Address

	delete(t.Mac, key)
}

// AppendMac appends the supplied NokiaConf_Configure_Groups_Group_Service_MacList_Mac struct to the
// list Mac of NokiaConf_Configure_Groups_Group_Service_MacList. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_MacList_Mac already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_MacList) AppendMac(v *NokiaConf_Configure_Groups_Group_Service_MacList_Mac) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mac == nil {
		t.Mac = make(map[string]*NokiaConf_Configure_Groups_Group_Service_MacList_Mac)
	}

	if _, ok := t.Mac[key]; ok {
		return fmt.Errorf("duplicate key for list Mac %v", key)
	}

	t.Mac[key] = v
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_MacList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_MacList) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Service_MacList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_MacList) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_MacList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_MacList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Mac {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_MacList struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_MacList) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_MacList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_MacList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_MacList) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_MacList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_MacList.
func (*NokiaConf_Configure_Groups_Group_Service_MacList) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_MacList_Mac represents the /nokia-conf/configure/groups/group/service/mac-list/mac YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_MacList_Mac struct {
	Address *string `path:"address" module:"nokia-conf"`
	Mask    *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_MacList_Mac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_MacList_Mac) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Service_MacList_Mac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_MacList_Mac) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Groups_Group_Service_MacList_Mac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_MacList_Mac) GetMask() string {
	if t == nil || t.Mask == nil {
		return "ff:ff:ff:ff:ff:ff"
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_MacList_Mac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_MacList_Mac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mask == nil {
		var v string = "ff:ff:ff:ff:ff:ff"
		t.Mask = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_MacList_Mac struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_MacList_Mac) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_MacList_Mac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_MacList_Mac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_MacList_Mac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_MacList_Mac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_MacList_Mac.
func (*NokiaConf_Configure_Groups_Group_Service_MacList_Mac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_MdAutoId represents the /nokia-conf/configure/groups/group/service/md-auto-id YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_MdAutoId struct {
	CustomerIdRange   *NokiaConf_Configure_Groups_Group_Service_MdAutoId_CustomerIdRange   `path:"customer-id-range" module:"nokia-conf" yangPresence:"true"`
	PwTemplateIdRange *NokiaConf_Configure_Groups_Group_Service_MdAutoId_PwTemplateIdRange `path:"pw-template-id-range" module:"nokia-conf" yangPresence:"true"`
	ServiceIdRange    *NokiaConf_Configure_Groups_Group_Service_MdAutoId_ServiceIdRange    `path:"service-id-range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_MdAutoId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_MdAutoId) IsYANGGoStruct() {}

// GetOrCreateCustomerIdRange retrieves the value of the CustomerIdRange field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_MdAutoId) GetOrCreateCustomerIdRange() *NokiaConf_Configure_Groups_Group_Service_MdAutoId_CustomerIdRange {
	if t.CustomerIdRange != nil {
		return t.CustomerIdRange
	}
	t.CustomerIdRange = &NokiaConf_Configure_Groups_Group_Service_MdAutoId_CustomerIdRange{}
	return t.CustomerIdRange
}

// GetOrCreatePwTemplateIdRange retrieves the value of the PwTemplateIdRange field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_MdAutoId) GetOrCreatePwTemplateIdRange() *NokiaConf_Configure_Groups_Group_Service_MdAutoId_PwTemplateIdRange {
	if t.PwTemplateIdRange != nil {
		return t.PwTemplateIdRange
	}
	t.PwTemplateIdRange = &NokiaConf_Configure_Groups_Group_Service_MdAutoId_PwTemplateIdRange{}
	return t.PwTemplateIdRange
}

// GetOrCreateServiceIdRange retrieves the value of the ServiceIdRange field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_MdAutoId) GetOrCreateServiceIdRange() *NokiaConf_Configure_Groups_Group_Service_MdAutoId_ServiceIdRange {
	if t.ServiceIdRange != nil {
		return t.ServiceIdRange
	}
	t.ServiceIdRange = &NokiaConf_Configure_Groups_Group_Service_MdAutoId_ServiceIdRange{}
	return t.ServiceIdRange
}

// GetCustomerIdRange returns the value of the CustomerIdRange struct pointer
// from NokiaConf_Configure_Groups_Group_Service_MdAutoId. If the receiver or the field CustomerIdRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_MdAutoId) GetCustomerIdRange() *NokiaConf_Configure_Groups_Group_Service_MdAutoId_CustomerIdRange {
	if t != nil && t.CustomerIdRange != nil {
		return t.CustomerIdRange
	}
	return nil
}

// GetPwTemplateIdRange returns the value of the PwTemplateIdRange struct pointer
// from NokiaConf_Configure_Groups_Group_Service_MdAutoId. If the receiver or the field PwTemplateIdRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_MdAutoId) GetPwTemplateIdRange() *NokiaConf_Configure_Groups_Group_Service_MdAutoId_PwTemplateIdRange {
	if t != nil && t.PwTemplateIdRange != nil {
		return t.PwTemplateIdRange
	}
	return nil
}

// GetServiceIdRange returns the value of the ServiceIdRange struct pointer
// from NokiaConf_Configure_Groups_Group_Service_MdAutoId. If the receiver or the field ServiceIdRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_MdAutoId) GetServiceIdRange() *NokiaConf_Configure_Groups_Group_Service_MdAutoId_ServiceIdRange {
	if t != nil && t.ServiceIdRange != nil {
		return t.ServiceIdRange
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_MdAutoId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_MdAutoId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.CustomerIdRange.PopulateDefaults()
	t.PwTemplateIdRange.PopulateDefaults()
	t.ServiceIdRange.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_MdAutoId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_MdAutoId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_MdAutoId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_MdAutoId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_MdAutoId.
func (*NokiaConf_Configure_Groups_Group_Service_MdAutoId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_MdAutoId_CustomerIdRange represents the /nokia-conf/configure/groups/group/service/md-auto-id/customer-id-range YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_MdAutoId_CustomerIdRange struct {
	End   *uint32 `path:"end" module:"nokia-conf"`
	Start *uint32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_MdAutoId_CustomerIdRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_MdAutoId_CustomerIdRange) IsYANGGoStruct() {}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Service_MdAutoId_CustomerIdRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_MdAutoId_CustomerIdRange) GetEnd() uint32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Service_MdAutoId_CustomerIdRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_MdAutoId_CustomerIdRange) GetStart() uint32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_MdAutoId_CustomerIdRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_MdAutoId_CustomerIdRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_MdAutoId_CustomerIdRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_MdAutoId_CustomerIdRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_MdAutoId_CustomerIdRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_MdAutoId_CustomerIdRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_MdAutoId_CustomerIdRange.
func (*NokiaConf_Configure_Groups_Group_Service_MdAutoId_CustomerIdRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_MdAutoId_PwTemplateIdRange represents the /nokia-conf/configure/groups/group/service/md-auto-id/pw-template-id-range YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_MdAutoId_PwTemplateIdRange struct {
	End   *uint32 `path:"end" module:"nokia-conf"`
	Start *uint32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_MdAutoId_PwTemplateIdRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_MdAutoId_PwTemplateIdRange) IsYANGGoStruct() {}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Service_MdAutoId_PwTemplateIdRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_MdAutoId_PwTemplateIdRange) GetEnd() uint32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Service_MdAutoId_PwTemplateIdRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_MdAutoId_PwTemplateIdRange) GetStart() uint32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_MdAutoId_PwTemplateIdRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_MdAutoId_PwTemplateIdRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_MdAutoId_PwTemplateIdRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_MdAutoId_PwTemplateIdRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_MdAutoId_PwTemplateIdRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_MdAutoId_PwTemplateIdRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_MdAutoId_PwTemplateIdRange.
func (*NokiaConf_Configure_Groups_Group_Service_MdAutoId_PwTemplateIdRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_MdAutoId_ServiceIdRange represents the /nokia-conf/configure/groups/group/service/md-auto-id/service-id-range YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_MdAutoId_ServiceIdRange struct {
	End   *uint32 `path:"end" module:"nokia-conf"`
	Start *uint32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_MdAutoId_ServiceIdRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_MdAutoId_ServiceIdRange) IsYANGGoStruct() {}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Service_MdAutoId_ServiceIdRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_MdAutoId_ServiceIdRange) GetEnd() uint32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Service_MdAutoId_ServiceIdRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_MdAutoId_ServiceIdRange) GetStart() uint32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_MdAutoId_ServiceIdRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_MdAutoId_ServiceIdRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_MdAutoId_ServiceIdRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_MdAutoId_ServiceIdRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_MdAutoId_ServiceIdRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_MdAutoId_ServiceIdRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_MdAutoId_ServiceIdRange.
func (*NokiaConf_Configure_Groups_Group_Service_MdAutoId_ServiceIdRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Mrp represents the /nokia-conf/configure/groups/group/service/mrp YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Mrp struct {
	Policy map[string]*NokiaConf_Configure_Groups_Group_Service_Mrp_Policy `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Mrp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Mrp) IsYANGGoStruct() {}

// NewPolicy creates a new entry in the Policy list of the
// NokiaConf_Configure_Groups_Group_Service_Mrp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Mrp) NewPolicy(PolicyName string) (*NokiaConf_Configure_Groups_Group_Service_Mrp_Policy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policy == nil {
		t.Policy = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Mrp_Policy)
	}

	key := PolicyName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Policy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Policy", key)
	}

	t.Policy[key] = &NokiaConf_Configure_Groups_Group_Service_Mrp_Policy{
		PolicyName: &PolicyName,
	}

	return t.Policy[key], nil
}

// RenamePolicy renames an entry in the list Policy within
// the NokiaConf_Configure_Groups_Group_Service_Mrp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Mrp) RenamePolicy(oldK, newK string) error {
	if _, ok := t.Policy[newK]; ok {
		return fmt.Errorf("key %v already exists in Policy", newK)
	}

	e, ok := t.Policy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Policy", oldK)
	}
	e.PolicyName = &newK

	t.Policy[newK] = e
	delete(t.Policy, oldK)
	return nil
}

// GetOrCreatePolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Mrp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Mrp) GetOrCreatePolicy(PolicyName string) *NokiaConf_Configure_Groups_Group_Service_Mrp_Policy {

	key := PolicyName

	if v, ok := t.Policy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicy(PolicyName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicy got unexpected error: %v", err))
	}
	return v
}

// GetPolicy retrieves the value with the specified key from
// the Policy map field of NokiaConf_Configure_Groups_Group_Service_Mrp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Mrp) GetPolicy(PolicyName string) *NokiaConf_Configure_Groups_Group_Service_Mrp_Policy {

	if t == nil {
		return nil
	}

	key := PolicyName

	if lm, ok := t.Policy[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Mrp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Mrp) DeletePolicy(PolicyName string) {
	key := PolicyName

	delete(t.Policy, key)
}

// AppendPolicy appends the supplied NokiaConf_Configure_Groups_Group_Service_Mrp_Policy struct to the
// list Policy of NokiaConf_Configure_Groups_Group_Service_Mrp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Mrp_Policy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Mrp) AppendPolicy(v *NokiaConf_Configure_Groups_Group_Service_Mrp_Policy) error {
	if v.PolicyName == nil {
		return fmt.Errorf("invalid nil key received for PolicyName")
	}

	key := *v.PolicyName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policy == nil {
		t.Policy = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Mrp_Policy)
	}

	if _, ok := t.Policy[key]; ok {
		return fmt.Errorf("duplicate key for list Policy %v", key)
	}

	t.Policy[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Mrp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Mrp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Policy {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Mrp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Mrp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Mrp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Mrp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Mrp.
func (*NokiaConf_Configure_Groups_Group_Service_Mrp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Mrp_Policy represents the /nokia-conf/configure/groups/group/service/mrp/policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Mrp_Policy struct {
	DefaultAction E_NokiaTypesServices_MrpPolicyDefaultAction                                                                                            `path:"default-action" module:"nokia-conf"`
	Description   *string                                                                                                                                `path:"description" module:"nokia-conf"`
	Entry         map[NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry `path:"entry" module:"nokia-conf"`
	PolicyName    *string                                                                                                                                `path:"policy-name" module:"nokia-conf"`
	Scope         E_NokiaTypesServices_ItemScope                                                                                                         `path:"scope" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Mrp_Policy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Mrp_Policy) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Groups_Group_Service_Mrp_Policy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Mrp_Policy) NewEntry(EntryId NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_EntryId_Union) (*NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry{
		EntryId: EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Groups_Group_Service_Mrp_Policy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Mrp_Policy) RenameEntry(oldK, newK NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_EntryId_Union) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Mrp_Policy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Mrp_Policy) GetOrCreateEntry(EntryId NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_EntryId_Union) *NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Groups_Group_Service_Mrp_Policy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Mrp_Policy) GetEntry(EntryId NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_EntryId_Union) *NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Mrp_Policy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Mrp_Policy) DeleteEntry(EntryId NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_EntryId_Union) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry struct to the
// list Entry of NokiaConf_Configure_Groups_Group_Service_Mrp_Policy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Mrp_Policy) AppendEntry(v *NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry) error {
	key := v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetDefaultAction retrieves the value of the leaf DefaultAction from the NokiaConf_Configure_Groups_Group_Service_Mrp_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultAction is set, it can
// safely use t.GetDefaultAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Mrp_Policy) GetDefaultAction() E_NokiaTypesServices_MrpPolicyDefaultAction {
	if t == nil || t.DefaultAction == 0 {
		return NokiaTypesServices_MrpPolicyDefaultAction_allow
	}
	return t.DefaultAction
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Mrp_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Mrp_Policy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Service_Mrp_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Mrp_Policy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// GetScope retrieves the value of the leaf Scope from the NokiaConf_Configure_Groups_Group_Service_Mrp_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Scope is set, it can
// safely use t.GetScope() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Scope == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Mrp_Policy) GetScope() E_NokiaTypesServices_ItemScope {
	if t == nil || t.Scope == 0 {
		return NokiaTypesServices_ItemScope_template
	}
	return t.Scope
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Mrp_Policy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Mrp_Policy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DefaultAction == 0 {
		t.DefaultAction = NokiaTypesServices_MrpPolicyDefaultAction_allow
	}
	if t.Scope == 0 {
		t.Scope = NokiaTypesServices_ItemScope_template
	}
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Mrp_Policy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Mrp_Policy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PolicyName == nil {
		return nil, fmt.Errorf("nil value for key PolicyName")
	}

	return map[string]interface{}{
		"policy-name": *t.PolicyName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Mrp_Policy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Mrp_Policy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Mrp_Policy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Mrp_Policy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Mrp_Policy.
func (*NokiaConf_Configure_Groups_Group_Service_Mrp_Policy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry represents the /nokia-conf/configure/groups/group/service/mrp/policy/entry YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry struct {
	Action      E_NokiaTypesServices_MrpPolicyAction                                    `path:"action" module:"nokia-conf"`
	Description *string                                                                 `path:"description" module:"nokia-conf"`
	EntryId     NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_EntryId_Union `path:"entry-id" module:"nokia-conf"`
	Match       *NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_Match        `path:"match" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry) IsYANGGoStruct() {}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry) GetOrCreateMatch() *NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_Match{}
	return t.Match
}

// GetMatch returns the value of the Match struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry) GetMatch() *NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetAction retrieves the value of the leaf Action from the NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Action is set, it can
// safely use t.GetAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Action == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry) GetAction() E_NokiaTypesServices_MrpPolicyAction {
	if t == nil || t.Action == 0 {
		return 0
	}
	return t.Action
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry) GetEntryId() NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_EntryId_Union {
	if t == nil || t.EntryId == nil {
		return nil
	}
	return t.EntryId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Match.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"entry-id": t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry.
func (*NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_Match represents the /nokia-conf/configure/groups/group/service/mrp/policy/entry/match YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_Match struct {
	Isid map[NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_Match_Isid_Value_Union]*NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_Match_Isid `path:"isid" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_Match) IsYANGGoStruct() {}

// NewIsid creates a new entry in the Isid list of the
// NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_Match struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_Match) NewIsid(Value NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_Match_Isid_Value_Union) (*NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_Match_Isid, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Isid == nil {
		t.Isid = make(map[NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_Match_Isid_Value_Union]*NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_Match_Isid)
	}

	key := Value

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Isid[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Isid", key)
	}

	t.Isid[key] = &NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_Match_Isid{
		Value: Value,
	}

	return t.Isid[key], nil
}

// RenameIsid renames an entry in the list Isid within
// the NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_Match struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_Match) RenameIsid(oldK, newK NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_Match_Isid_Value_Union) error {
	if _, ok := t.Isid[newK]; ok {
		return fmt.Errorf("key %v already exists in Isid", newK)
	}

	e, ok := t.Isid[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Isid", oldK)
	}
	e.Value = newK

	t.Isid[newK] = e
	delete(t.Isid, oldK)
	return nil
}

// GetOrCreateIsid retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_Match. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_Match) GetOrCreateIsid(Value NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_Match_Isid_Value_Union) *NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_Match_Isid {

	key := Value

	if v, ok := t.Isid[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIsid(Value)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIsid got unexpected error: %v", err))
	}
	return v
}

// GetIsid retrieves the value with the specified key from
// the Isid map field of NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_Match. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_Match) GetIsid(Value NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_Match_Isid_Value_Union) *NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_Match_Isid {

	if t == nil {
		return nil
	}

	key := Value

	if lm, ok := t.Isid[key]; ok {
		return lm
	}
	return nil
}

// DeleteIsid deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_Match. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_Match) DeleteIsid(Value NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_Match_Isid_Value_Union) {
	key := Value

	delete(t.Isid, key)
}

// AppendIsid appends the supplied NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_Match_Isid struct to the
// list Isid of NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_Match. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_Match_Isid already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_Match) AppendIsid(v *NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_Match_Isid) error {
	key := v.Value

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Isid == nil {
		t.Isid = make(map[NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_Match_Isid_Value_Union]*NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_Match_Isid)
	}

	if _, ok := t.Isid[key]; ok {
		return fmt.Errorf("duplicate key for list Isid %v", key)
	}

	t.Isid[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Isid {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_Match) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_Match.
func (*NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_Match) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_Match_Isid represents the /nokia-conf/configure/groups/group/service/mrp/policy/entry/match/isid YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_Match_Isid struct {
	HigherValue *int32                                                                           `path:"higher-value" module:"nokia-conf"`
	Value       NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_Match_Isid_Value_Union `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_Match_Isid implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_Match_Isid) IsYANGGoStruct() {}

// GetHigherValue retrieves the value of the leaf HigherValue from the NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_Match_Isid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HigherValue is set, it can
// safely use t.GetHigherValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HigherValue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_Match_Isid) GetHigherValue() int32 {
	if t == nil || t.HigherValue == nil {
		return 0
	}
	return *t.HigherValue
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_Match_Isid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_Match_Isid) GetValue() NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_Match_Isid_Value_Union {
	if t == nil || t.Value == nil {
		return nil
	}
	return t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_Match_Isid
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_Match_Isid) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_Match_Isid struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_Match_Isid) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"value": t.Value,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_Match_Isid) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_Match_Isid"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_Match_Isid) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_Match_Isid) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_Match_Isid.
func (*NokiaConf_Configure_Groups_Group_Service_Mrp_Policy_Entry_Match_Isid) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Nat represents the /nokia-conf/configure/groups/group/service/nat YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Nat struct {
	Classifier          map[string]*NokiaConf_Configure_Groups_Group_Service_Nat_Classifier      `path:"classifier" module:"nokia-conf"`
	DeterministicScript *NokiaConf_Configure_Groups_Group_Service_Nat_DeterministicScript        `path:"deterministic-script" module:"nokia-conf"`
	FirewallPolicy      map[string]*NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy  `path:"firewall-policy" module:"nokia-conf"`
	MapT                *NokiaConf_Configure_Groups_Group_Service_Nat_MapT                       `path:"map-t" module:"nokia-conf"`
	NatPolicy           map[string]*NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy       `path:"nat-policy" module:"nokia-conf"`
	PcpServerPolicy     map[string]*NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy `path:"pcp-server-policy" module:"nokia-conf"`
	PrefixList          map[string]*NokiaConf_Configure_Groups_Group_Service_Nat_PrefixList      `path:"prefix-list" module:"nokia-conf"`
	Syslog              *NokiaConf_Configure_Groups_Group_Service_Nat_Syslog                     `path:"syslog" module:"nokia-conf"`
	UpNatPolicy         map[string]*NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy     `path:"up-nat-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Nat implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Nat) IsYANGGoStruct() {}

// NewClassifier creates a new entry in the Classifier list of the
// NokiaConf_Configure_Groups_Group_Service_Nat struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat) NewClassifier(Name string) (*NokiaConf_Configure_Groups_Group_Service_Nat_Classifier, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Classifier == nil {
		t.Classifier = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Nat_Classifier)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Classifier[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Classifier", key)
	}

	t.Classifier[key] = &NokiaConf_Configure_Groups_Group_Service_Nat_Classifier{
		Name: &Name,
	}

	return t.Classifier[key], nil
}

// RenameClassifier renames an entry in the list Classifier within
// the NokiaConf_Configure_Groups_Group_Service_Nat struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat) RenameClassifier(oldK, newK string) error {
	if _, ok := t.Classifier[newK]; ok {
		return fmt.Errorf("key %v already exists in Classifier", newK)
	}

	e, ok := t.Classifier[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Classifier", oldK)
	}
	e.Name = &newK

	t.Classifier[newK] = e
	delete(t.Classifier, oldK)
	return nil
}

// GetOrCreateClassifier retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Nat. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat) GetOrCreateClassifier(Name string) *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier {

	key := Name

	if v, ok := t.Classifier[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewClassifier(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateClassifier got unexpected error: %v", err))
	}
	return v
}

// GetClassifier retrieves the value with the specified key from
// the Classifier map field of NokiaConf_Configure_Groups_Group_Service_Nat. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat) GetClassifier(Name string) *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Classifier[key]; ok {
		return lm
	}
	return nil
}

// DeleteClassifier deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Nat. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat) DeleteClassifier(Name string) {
	key := Name

	delete(t.Classifier, key)
}

// AppendClassifier appends the supplied NokiaConf_Configure_Groups_Group_Service_Nat_Classifier struct to the
// list Classifier of NokiaConf_Configure_Groups_Group_Service_Nat. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Nat_Classifier already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat) AppendClassifier(v *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Classifier == nil {
		t.Classifier = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Nat_Classifier)
	}

	if _, ok := t.Classifier[key]; ok {
		return fmt.Errorf("duplicate key for list Classifier %v", key)
	}

	t.Classifier[key] = v
	return nil
}

// NewFirewallPolicy creates a new entry in the FirewallPolicy list of the
// NokiaConf_Configure_Groups_Group_Service_Nat struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat) NewFirewallPolicy(Name string) (*NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FirewallPolicy == nil {
		t.FirewallPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.FirewallPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list FirewallPolicy", key)
	}

	t.FirewallPolicy[key] = &NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy{
		Name: &Name,
	}

	return t.FirewallPolicy[key], nil
}

// RenameFirewallPolicy renames an entry in the list FirewallPolicy within
// the NokiaConf_Configure_Groups_Group_Service_Nat struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat) RenameFirewallPolicy(oldK, newK string) error {
	if _, ok := t.FirewallPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in FirewallPolicy", newK)
	}

	e, ok := t.FirewallPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in FirewallPolicy", oldK)
	}
	e.Name = &newK

	t.FirewallPolicy[newK] = e
	delete(t.FirewallPolicy, oldK)
	return nil
}

// GetOrCreateFirewallPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Nat. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat) GetOrCreateFirewallPolicy(Name string) *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy {

	key := Name

	if v, ok := t.FirewallPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFirewallPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFirewallPolicy got unexpected error: %v", err))
	}
	return v
}

// GetFirewallPolicy retrieves the value with the specified key from
// the FirewallPolicy map field of NokiaConf_Configure_Groups_Group_Service_Nat. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat) GetFirewallPolicy(Name string) *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.FirewallPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteFirewallPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Nat. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat) DeleteFirewallPolicy(Name string) {
	key := Name

	delete(t.FirewallPolicy, key)
}

// AppendFirewallPolicy appends the supplied NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy struct to the
// list FirewallPolicy of NokiaConf_Configure_Groups_Group_Service_Nat. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat) AppendFirewallPolicy(v *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FirewallPolicy == nil {
		t.FirewallPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy)
	}

	if _, ok := t.FirewallPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list FirewallPolicy %v", key)
	}

	t.FirewallPolicy[key] = v
	return nil
}

// NewNatPolicy creates a new entry in the NatPolicy list of the
// NokiaConf_Configure_Groups_Group_Service_Nat struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat) NewNatPolicy(Name string) (*NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NatPolicy == nil {
		t.NatPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NatPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NatPolicy", key)
	}

	t.NatPolicy[key] = &NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy{
		Name: &Name,
	}

	return t.NatPolicy[key], nil
}

// RenameNatPolicy renames an entry in the list NatPolicy within
// the NokiaConf_Configure_Groups_Group_Service_Nat struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat) RenameNatPolicy(oldK, newK string) error {
	if _, ok := t.NatPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in NatPolicy", newK)
	}

	e, ok := t.NatPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NatPolicy", oldK)
	}
	e.Name = &newK

	t.NatPolicy[newK] = e
	delete(t.NatPolicy, oldK)
	return nil
}

// GetOrCreateNatPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Nat. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat) GetOrCreateNatPolicy(Name string) *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy {

	key := Name

	if v, ok := t.NatPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNatPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNatPolicy got unexpected error: %v", err))
	}
	return v
}

// GetNatPolicy retrieves the value with the specified key from
// the NatPolicy map field of NokiaConf_Configure_Groups_Group_Service_Nat. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat) GetNatPolicy(Name string) *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.NatPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteNatPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Nat. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat) DeleteNatPolicy(Name string) {
	key := Name

	delete(t.NatPolicy, key)
}

// AppendNatPolicy appends the supplied NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy struct to the
// list NatPolicy of NokiaConf_Configure_Groups_Group_Service_Nat. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat) AppendNatPolicy(v *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NatPolicy == nil {
		t.NatPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy)
	}

	if _, ok := t.NatPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list NatPolicy %v", key)
	}

	t.NatPolicy[key] = v
	return nil
}

// NewPcpServerPolicy creates a new entry in the PcpServerPolicy list of the
// NokiaConf_Configure_Groups_Group_Service_Nat struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat) NewPcpServerPolicy(Name string) (*NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PcpServerPolicy == nil {
		t.PcpServerPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PcpServerPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PcpServerPolicy", key)
	}

	t.PcpServerPolicy[key] = &NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy{
		Name: &Name,
	}

	return t.PcpServerPolicy[key], nil
}

// RenamePcpServerPolicy renames an entry in the list PcpServerPolicy within
// the NokiaConf_Configure_Groups_Group_Service_Nat struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat) RenamePcpServerPolicy(oldK, newK string) error {
	if _, ok := t.PcpServerPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in PcpServerPolicy", newK)
	}

	e, ok := t.PcpServerPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PcpServerPolicy", oldK)
	}
	e.Name = &newK

	t.PcpServerPolicy[newK] = e
	delete(t.PcpServerPolicy, oldK)
	return nil
}

// GetOrCreatePcpServerPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Nat. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat) GetOrCreatePcpServerPolicy(Name string) *NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy {

	key := Name

	if v, ok := t.PcpServerPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPcpServerPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePcpServerPolicy got unexpected error: %v", err))
	}
	return v
}

// GetPcpServerPolicy retrieves the value with the specified key from
// the PcpServerPolicy map field of NokiaConf_Configure_Groups_Group_Service_Nat. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat) GetPcpServerPolicy(Name string) *NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.PcpServerPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeletePcpServerPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Nat. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat) DeletePcpServerPolicy(Name string) {
	key := Name

	delete(t.PcpServerPolicy, key)
}

// AppendPcpServerPolicy appends the supplied NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy struct to the
// list PcpServerPolicy of NokiaConf_Configure_Groups_Group_Service_Nat. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat) AppendPcpServerPolicy(v *NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PcpServerPolicy == nil {
		t.PcpServerPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy)
	}

	if _, ok := t.PcpServerPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list PcpServerPolicy %v", key)
	}

	t.PcpServerPolicy[key] = v
	return nil
}

// NewPrefixList creates a new entry in the PrefixList list of the
// NokiaConf_Configure_Groups_Group_Service_Nat struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat) NewPrefixList(Name string) (*NokiaConf_Configure_Groups_Group_Service_Nat_PrefixList, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrefixList == nil {
		t.PrefixList = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Nat_PrefixList)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PrefixList[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PrefixList", key)
	}

	t.PrefixList[key] = &NokiaConf_Configure_Groups_Group_Service_Nat_PrefixList{
		Name: &Name,
	}

	return t.PrefixList[key], nil
}

// RenamePrefixList renames an entry in the list PrefixList within
// the NokiaConf_Configure_Groups_Group_Service_Nat struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat) RenamePrefixList(oldK, newK string) error {
	if _, ok := t.PrefixList[newK]; ok {
		return fmt.Errorf("key %v already exists in PrefixList", newK)
	}

	e, ok := t.PrefixList[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PrefixList", oldK)
	}
	e.Name = &newK

	t.PrefixList[newK] = e
	delete(t.PrefixList, oldK)
	return nil
}

// GetOrCreatePrefixList retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Nat. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat) GetOrCreatePrefixList(Name string) *NokiaConf_Configure_Groups_Group_Service_Nat_PrefixList {

	key := Name

	if v, ok := t.PrefixList[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefixList(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefixList got unexpected error: %v", err))
	}
	return v
}

// GetPrefixList retrieves the value with the specified key from
// the PrefixList map field of NokiaConf_Configure_Groups_Group_Service_Nat. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat) GetPrefixList(Name string) *NokiaConf_Configure_Groups_Group_Service_Nat_PrefixList {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.PrefixList[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefixList deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Nat. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat) DeletePrefixList(Name string) {
	key := Name

	delete(t.PrefixList, key)
}

// AppendPrefixList appends the supplied NokiaConf_Configure_Groups_Group_Service_Nat_PrefixList struct to the
// list PrefixList of NokiaConf_Configure_Groups_Group_Service_Nat. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Nat_PrefixList already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat) AppendPrefixList(v *NokiaConf_Configure_Groups_Group_Service_Nat_PrefixList) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrefixList == nil {
		t.PrefixList = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Nat_PrefixList)
	}

	if _, ok := t.PrefixList[key]; ok {
		return fmt.Errorf("duplicate key for list PrefixList %v", key)
	}

	t.PrefixList[key] = v
	return nil
}

// NewUpNatPolicy creates a new entry in the UpNatPolicy list of the
// NokiaConf_Configure_Groups_Group_Service_Nat struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat) NewUpNatPolicy(Name string) (*NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UpNatPolicy == nil {
		t.UpNatPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UpNatPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UpNatPolicy", key)
	}

	t.UpNatPolicy[key] = &NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy{
		Name: &Name,
	}

	return t.UpNatPolicy[key], nil
}

// RenameUpNatPolicy renames an entry in the list UpNatPolicy within
// the NokiaConf_Configure_Groups_Group_Service_Nat struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat) RenameUpNatPolicy(oldK, newK string) error {
	if _, ok := t.UpNatPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in UpNatPolicy", newK)
	}

	e, ok := t.UpNatPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UpNatPolicy", oldK)
	}
	e.Name = &newK

	t.UpNatPolicy[newK] = e
	delete(t.UpNatPolicy, oldK)
	return nil
}

// GetOrCreateUpNatPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Nat. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat) GetOrCreateUpNatPolicy(Name string) *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy {

	key := Name

	if v, ok := t.UpNatPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUpNatPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUpNatPolicy got unexpected error: %v", err))
	}
	return v
}

// GetUpNatPolicy retrieves the value with the specified key from
// the UpNatPolicy map field of NokiaConf_Configure_Groups_Group_Service_Nat. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat) GetUpNatPolicy(Name string) *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.UpNatPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteUpNatPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Nat. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat) DeleteUpNatPolicy(Name string) {
	key := Name

	delete(t.UpNatPolicy, key)
}

// AppendUpNatPolicy appends the supplied NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy struct to the
// list UpNatPolicy of NokiaConf_Configure_Groups_Group_Service_Nat. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat) AppendUpNatPolicy(v *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UpNatPolicy == nil {
		t.UpNatPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy)
	}

	if _, ok := t.UpNatPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list UpNatPolicy %v", key)
	}

	t.UpNatPolicy[key] = v
	return nil
}

// GetOrCreateDeterministicScript retrieves the value of the DeterministicScript field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat) GetOrCreateDeterministicScript() *NokiaConf_Configure_Groups_Group_Service_Nat_DeterministicScript {
	if t.DeterministicScript != nil {
		return t.DeterministicScript
	}
	t.DeterministicScript = &NokiaConf_Configure_Groups_Group_Service_Nat_DeterministicScript{}
	return t.DeterministicScript
}

// GetOrCreateMapT retrieves the value of the MapT field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat) GetOrCreateMapT() *NokiaConf_Configure_Groups_Group_Service_Nat_MapT {
	if t.MapT != nil {
		return t.MapT
	}
	t.MapT = &NokiaConf_Configure_Groups_Group_Service_Nat_MapT{}
	return t.MapT
}

// GetOrCreateSyslog retrieves the value of the Syslog field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat) GetOrCreateSyslog() *NokiaConf_Configure_Groups_Group_Service_Nat_Syslog {
	if t.Syslog != nil {
		return t.Syslog
	}
	t.Syslog = &NokiaConf_Configure_Groups_Group_Service_Nat_Syslog{}
	return t.Syslog
}

// GetDeterministicScript returns the value of the DeterministicScript struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Nat. If the receiver or the field DeterministicScript is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat) GetDeterministicScript() *NokiaConf_Configure_Groups_Group_Service_Nat_DeterministicScript {
	if t != nil && t.DeterministicScript != nil {
		return t.DeterministicScript
	}
	return nil
}

// GetMapT returns the value of the MapT struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Nat. If the receiver or the field MapT is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat) GetMapT() *NokiaConf_Configure_Groups_Group_Service_Nat_MapT {
	if t != nil && t.MapT != nil {
		return t.MapT
	}
	return nil
}

// GetSyslog returns the value of the Syslog struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Nat. If the receiver or the field Syslog is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat) GetSyslog() *NokiaConf_Configure_Groups_Group_Service_Nat_Syslog {
	if t != nil && t.Syslog != nil {
		return t.Syslog
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Nat
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DeterministicScript.PopulateDefaults()
	t.MapT.PopulateDefaults()
	t.Syslog.PopulateDefaults()
	for _, e := range t.Classifier {
		e.PopulateDefaults()
	}
	for _, e := range t.FirewallPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.NatPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.PcpServerPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.PrefixList {
		e.PopulateDefaults()
	}
	for _, e := range t.UpNatPolicy {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Nat"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Nat.
func (*NokiaConf_Configure_Groups_Group_Service_Nat) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Nat_Classifier represents the /nokia-conf/configure/groups/group/service/nat/classifier YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Nat_Classifier struct {
	Default     *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Default                                                                          `path:"default" module:"nokia-conf"`
	Description *string                                                                                                                                   `path:"description" module:"nokia-conf"`
	Entry       map[NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Id_Union]*NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry `path:"entry" module:"nokia-conf"`
	Name        *string                                                                                                                                   `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Nat_Classifier implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_Classifier) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Groups_Group_Service_Nat_Classifier struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier) NewEntry(Id NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Id_Union) (*NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Id_Union]*NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry{
		Id: Id,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Groups_Group_Service_Nat_Classifier struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier) RenameEntry(oldK, newK NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Id_Union) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.Id = newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Nat_Classifier. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier) GetOrCreateEntry(Id NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Id_Union) *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry {

	key := Id

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Groups_Group_Service_Nat_Classifier. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier) GetEntry(Id NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Id_Union) *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Nat_Classifier. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier) DeleteEntry(Id NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Id_Union) {
	key := Id

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry struct to the
// list Entry of NokiaConf_Configure_Groups_Group_Service_Nat_Classifier. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier) AppendEntry(v *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry) error {
	key := v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Id_Union]*NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetOrCreateDefault retrieves the value of the Default field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier) GetOrCreateDefault() *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Default {
	if t.Default != nil {
		return t.Default
	}
	t.Default = &NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Default{}
	return t.Default
}

// GetDefault returns the value of the Default struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Nat_Classifier. If the receiver or the field Default is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier) GetDefault() *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Default {
	if t != nil && t.Default != nil {
		return t.Default
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Nat_Classifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Service_Nat_Classifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Nat_Classifier
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Default.PopulateDefaults()
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Nat_Classifier struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Nat_Classifier"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Nat_Classifier.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_Classifier) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Default represents the /nokia-conf/configure/groups/group/service/nat/classifier/default YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Default struct {
	Action        *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Default_Action `path:"action" module:"nokia-conf"`
	DnatIpAddress *string                                                                 `path:"dnat-ip-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Default implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Default) IsYANGGoStruct() {}

// GetOrCreateAction retrieves the value of the Action field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Default) GetOrCreateAction() *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Default_Action {
	if t.Action != nil {
		return t.Action
	}
	t.Action = &NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Default_Action{}
	return t.Action
}

// GetAction returns the value of the Action struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Default. If the receiver or the field Action is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Default) GetAction() *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Default_Action {
	if t != nil && t.Action != nil {
		return t.Action
	}
	return nil
}

// GetDnatIpAddress retrieves the value of the leaf DnatIpAddress from the NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Default
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DnatIpAddress is set, it can
// safely use t.GetDnatIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DnatIpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Default) GetDnatIpAddress() string {
	if t == nil || t.DnatIpAddress == nil {
		return ""
	}
	return *t.DnatIpAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Default
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Default) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Action.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Default) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Default"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Default) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Default) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Default.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Default) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Default_Action represents the /nokia-conf/configure/groups/group/service/nat/classifier/default/action YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Default_Action struct {
	DestinationNat *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Default_Action_DestinationNat `path:"destination-nat" module:"nokia-conf" yangPresence:"true"`
	Dnat           YANGEmpty                                                                              `path:"dnat" module:"nokia-conf"`
	DnatIpAddress  *string                                                                                `path:"dnat-ip-address" module:"nokia-conf"`
	Forward        YANGEmpty                                                                              `path:"forward" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Default_Action implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Default_Action) IsYANGGoStruct() {}

// GetOrCreateDestinationNat retrieves the value of the DestinationNat field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Default_Action) GetOrCreateDestinationNat() *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Default_Action_DestinationNat {
	if t.DestinationNat != nil {
		return t.DestinationNat
	}
	t.DestinationNat = &NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Default_Action_DestinationNat{}
	return t.DestinationNat
}

// GetDestinationNat returns the value of the DestinationNat struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Default_Action. If the receiver or the field DestinationNat is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Default_Action) GetDestinationNat() *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Default_Action_DestinationNat {
	if t != nil && t.DestinationNat != nil {
		return t.DestinationNat
	}
	return nil
}

// GetDnat retrieves the value of the leaf Dnat from the NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Default_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dnat is set, it can
// safely use t.GetDnat() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dnat == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Default_Action) GetDnat() YANGEmpty {
	if t == nil || t.Dnat == false {
		return false
	}
	return t.Dnat
}

// GetDnatIpAddress retrieves the value of the leaf DnatIpAddress from the NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Default_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DnatIpAddress is set, it can
// safely use t.GetDnatIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DnatIpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Default_Action) GetDnatIpAddress() string {
	if t == nil || t.DnatIpAddress == nil {
		return ""
	}
	return *t.DnatIpAddress
}

// GetForward retrieves the value of the leaf Forward from the NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Default_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Forward is set, it can
// safely use t.GetForward() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Forward == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Default_Action) GetForward() YANGEmpty {
	if t == nil || t.Forward == false {
		return false
	}
	return t.Forward
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Default_Action
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Default_Action) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DestinationNat.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Default_Action) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Default_Action"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Default_Action) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Default_Action) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Default_Action.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Default_Action) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Default_Action_DestinationNat represents the /nokia-conf/configure/groups/group/service/nat/classifier/default/action/destination-nat YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Default_Action_DestinationNat struct {
	IpAddress *string `path:"ip-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Default_Action_DestinationNat implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Default_Action_DestinationNat) IsYANGGoStruct() {
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Default_Action_DestinationNat
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Default_Action_DestinationNat) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Default_Action_DestinationNat
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Default_Action_DestinationNat) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Default_Action_DestinationNat) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Default_Action_DestinationNat"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Default_Action_DestinationNat) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Default_Action_DestinationNat) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Default_Action_DestinationNat.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Default_Action_DestinationNat) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry represents the /nokia-conf/configure/groups/group/service/nat/classifier/entry YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry struct {
	Action      *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Action  `path:"action" module:"nokia-conf"`
	Description *string                                                                `path:"description" module:"nokia-conf"`
	Id          NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Id_Union `path:"id" module:"nokia-conf"`
	Match       *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Match   `path:"match" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry) IsYANGGoStruct() {}

// GetOrCreateAction retrieves the value of the Action field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry) GetOrCreateAction() *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Action {
	if t.Action != nil {
		return t.Action
	}
	t.Action = &NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Action{}
	return t.Action
}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry) GetOrCreateMatch() *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Match{}
	return t.Match
}

// GetAction returns the value of the Action struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry. If the receiver or the field Action is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry) GetAction() *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Action {
	if t != nil && t.Action != nil {
		return t.Action
	}
	return nil
}

// GetMatch returns the value of the Match struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry) GetMatch() *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry) GetId() NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Id_Union {
	if t == nil || t.Id == nil {
		return nil
	}
	return t.Id
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Action.PopulateDefaults()
	t.Match.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"id": t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Action represents the /nokia-conf/configure/groups/group/service/nat/classifier/entry/action YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Action struct {
	DestinationNat *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Action_DestinationNat `path:"destination-nat" module:"nokia-conf" yangPresence:"true"`
	Dnat           YANGEmpty                                                                            `path:"dnat" module:"nokia-conf"`
	DnatIpAddress  *string                                                                              `path:"dnat-ip-address" module:"nokia-conf"`
	Forward        YANGEmpty                                                                            `path:"forward" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Action implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Action) IsYANGGoStruct() {}

// GetOrCreateDestinationNat retrieves the value of the DestinationNat field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Action) GetOrCreateDestinationNat() *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Action_DestinationNat {
	if t.DestinationNat != nil {
		return t.DestinationNat
	}
	t.DestinationNat = &NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Action_DestinationNat{}
	return t.DestinationNat
}

// GetDestinationNat returns the value of the DestinationNat struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Action. If the receiver or the field DestinationNat is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Action) GetDestinationNat() *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Action_DestinationNat {
	if t != nil && t.DestinationNat != nil {
		return t.DestinationNat
	}
	return nil
}

// GetDnat retrieves the value of the leaf Dnat from the NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dnat is set, it can
// safely use t.GetDnat() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dnat == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Action) GetDnat() YANGEmpty {
	if t == nil || t.Dnat == false {
		return false
	}
	return t.Dnat
}

// GetDnatIpAddress retrieves the value of the leaf DnatIpAddress from the NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DnatIpAddress is set, it can
// safely use t.GetDnatIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DnatIpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Action) GetDnatIpAddress() string {
	if t == nil || t.DnatIpAddress == nil {
		return ""
	}
	return *t.DnatIpAddress
}

// GetForward retrieves the value of the leaf Forward from the NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Forward is set, it can
// safely use t.GetForward() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Forward == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Action) GetForward() YANGEmpty {
	if t == nil || t.Forward == false {
		return false
	}
	return t.Forward
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Action
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Action) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DestinationNat.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Action) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Action"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Action) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Action) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Action.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Action) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Action_DestinationNat represents the /nokia-conf/configure/groups/group/service/nat/classifier/entry/action/destination-nat YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Action_DestinationNat struct {
	IpAddress *string `path:"ip-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Action_DestinationNat implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Action_DestinationNat) IsYANGGoStruct() {
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Action_DestinationNat
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Action_DestinationNat) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Action_DestinationNat
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Action_DestinationNat) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Action_DestinationNat) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Action_DestinationNat"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Action_DestinationNat) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Action_DestinationNat) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Action_DestinationNat.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Action_DestinationNat) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Match represents the /nokia-conf/configure/groups/group/service/nat/classifier/entry/match YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Match struct {
	DstPortRange     *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Match_DstPortRange `path:"dst-port-range" module:"nokia-conf"`
	ForeignIpAddress *string                                                                           `path:"foreign-ip-address" module:"nokia-conf"`
	Protocol         E_NokiaTypesNat_IpProtocolTcpOrUdp                                                `path:"protocol" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Match) IsYANGGoStruct() {}

// GetOrCreateDstPortRange retrieves the value of the DstPortRange field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Match) GetOrCreateDstPortRange() *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Match_DstPortRange {
	if t.DstPortRange != nil {
		return t.DstPortRange
	}
	t.DstPortRange = &NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Match_DstPortRange{}
	return t.DstPortRange
}

// GetDstPortRange returns the value of the DstPortRange struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Match. If the receiver or the field DstPortRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Match) GetDstPortRange() *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Match_DstPortRange {
	if t != nil && t.DstPortRange != nil {
		return t.DstPortRange
	}
	return nil
}

// GetForeignIpAddress retrieves the value of the leaf ForeignIpAddress from the NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForeignIpAddress is set, it can
// safely use t.GetForeignIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForeignIpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Match) GetForeignIpAddress() string {
	if t == nil || t.ForeignIpAddress == nil {
		return ""
	}
	return *t.ForeignIpAddress
}

// GetProtocol retrieves the value of the leaf Protocol from the NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Protocol is set, it can
// safely use t.GetProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Protocol == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Match) GetProtocol() E_NokiaTypesNat_IpProtocolTcpOrUdp {
	if t == nil || t.Protocol == 0 {
		return NokiaTypesNat_IpProtocolTcpOrUdp_udp
	}
	return t.Protocol
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Protocol == 0 {
		t.Protocol = NokiaTypesNat_IpProtocolTcpOrUdp_udp
	}
	t.DstPortRange.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Match) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Match.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Match) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Match_DstPortRange represents the /nokia-conf/configure/groups/group/service/nat/classifier/entry/match/dst-port-range YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Match_DstPortRange struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Match_DstPortRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Match_DstPortRange) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Match_DstPortRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Match_DstPortRange) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 65535
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Match_DstPortRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Match_DstPortRange) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Match_DstPortRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Match_DstPortRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.End == nil {
		var v int32 = 65535
		t.End = &v
	}
	if t.Start == nil {
		var v int32 = 0
		t.Start = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Match_DstPortRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Match_DstPortRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Match_DstPortRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Match_DstPortRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Match_DstPortRange.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_Classifier_Entry_Match_DstPortRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Nat_DeterministicScript represents the /nokia-conf/configure/groups/group/service/nat/deterministic-script YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Nat_DeterministicScript struct {
	Location *string `path:"location" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Nat_DeterministicScript implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_DeterministicScript) IsYANGGoStruct() {}

// GetLocation retrieves the value of the leaf Location from the NokiaConf_Configure_Groups_Group_Service_Nat_DeterministicScript
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Location is set, it can
// safely use t.GetLocation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Location == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_DeterministicScript) GetLocation() string {
	if t == nil || t.Location == nil {
		return ""
	}
	return *t.Location
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Nat_DeterministicScript
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_DeterministicScript) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_DeterministicScript) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Nat_DeterministicScript"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_DeterministicScript) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_DeterministicScript) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Nat_DeterministicScript.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_DeterministicScript) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy represents the /nokia-conf/configure/groups/group/service/nat/firewall-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy struct {
	Alg              *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Alg              `path:"alg" module:"nokia-conf"`
	Description      *string                                                                       `path:"description" module:"nokia-conf"`
	Domain           *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Domain           `path:"domain" module:"nokia-conf"`
	Filtering        E_NokiaTypesNat_Filtering                                                     `path:"filtering" module:"nokia-conf"`
	L2Outside        YANGEmpty                                                                     `path:"l2-outside" module:"nokia-conf"`
	Name             *string                                                                       `path:"name" module:"nokia-conf"`
	PortLimits       *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_PortLimits       `path:"port-limits" module:"nokia-conf"`
	PrioritySessions *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_PrioritySessions `path:"priority-sessions" module:"nokia-conf"`
	SessionLimits    *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_SessionLimits    `path:"session-limits" module:"nokia-conf"`
	Tcp              *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Tcp              `path:"tcp" module:"nokia-conf"`
	Timeouts         *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts         `path:"timeouts" module:"nokia-conf"`
	Udp              *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Udp              `path:"udp" module:"nokia-conf"`
	UnknownProtocols *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_UnknownProtocols `path:"unknown-protocols" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy) IsYANGGoStruct() {}

// GetOrCreateAlg retrieves the value of the Alg field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy) GetOrCreateAlg() *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Alg {
	if t.Alg != nil {
		return t.Alg
	}
	t.Alg = &NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Alg{}
	return t.Alg
}

// GetOrCreateDomain retrieves the value of the Domain field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy) GetOrCreateDomain() *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Domain {
	if t.Domain != nil {
		return t.Domain
	}
	t.Domain = &NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Domain{}
	return t.Domain
}

// GetOrCreatePortLimits retrieves the value of the PortLimits field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy) GetOrCreatePortLimits() *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_PortLimits {
	if t.PortLimits != nil {
		return t.PortLimits
	}
	t.PortLimits = &NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_PortLimits{}
	return t.PortLimits
}

// GetOrCreatePrioritySessions retrieves the value of the PrioritySessions field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy) GetOrCreatePrioritySessions() *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_PrioritySessions {
	if t.PrioritySessions != nil {
		return t.PrioritySessions
	}
	t.PrioritySessions = &NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_PrioritySessions{}
	return t.PrioritySessions
}

// GetOrCreateSessionLimits retrieves the value of the SessionLimits field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy) GetOrCreateSessionLimits() *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_SessionLimits {
	if t.SessionLimits != nil {
		return t.SessionLimits
	}
	t.SessionLimits = &NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_SessionLimits{}
	return t.SessionLimits
}

// GetOrCreateTcp retrieves the value of the Tcp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy) GetOrCreateTcp() *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Tcp {
	if t.Tcp != nil {
		return t.Tcp
	}
	t.Tcp = &NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Tcp{}
	return t.Tcp
}

// GetOrCreateTimeouts retrieves the value of the Timeouts field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy) GetOrCreateTimeouts() *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts {
	if t.Timeouts != nil {
		return t.Timeouts
	}
	t.Timeouts = &NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts{}
	return t.Timeouts
}

// GetOrCreateUdp retrieves the value of the Udp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy) GetOrCreateUdp() *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Udp {
	if t.Udp != nil {
		return t.Udp
	}
	t.Udp = &NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Udp{}
	return t.Udp
}

// GetOrCreateUnknownProtocols retrieves the value of the UnknownProtocols field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy) GetOrCreateUnknownProtocols() *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_UnknownProtocols {
	if t.UnknownProtocols != nil {
		return t.UnknownProtocols
	}
	t.UnknownProtocols = &NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_UnknownProtocols{}
	return t.UnknownProtocols
}

// GetAlg returns the value of the Alg struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy. If the receiver or the field Alg is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy) GetAlg() *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Alg {
	if t != nil && t.Alg != nil {
		return t.Alg
	}
	return nil
}

// GetDomain returns the value of the Domain struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy. If the receiver or the field Domain is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy) GetDomain() *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Domain {
	if t != nil && t.Domain != nil {
		return t.Domain
	}
	return nil
}

// GetPortLimits returns the value of the PortLimits struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy. If the receiver or the field PortLimits is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy) GetPortLimits() *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_PortLimits {
	if t != nil && t.PortLimits != nil {
		return t.PortLimits
	}
	return nil
}

// GetPrioritySessions returns the value of the PrioritySessions struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy. If the receiver or the field PrioritySessions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy) GetPrioritySessions() *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_PrioritySessions {
	if t != nil && t.PrioritySessions != nil {
		return t.PrioritySessions
	}
	return nil
}

// GetSessionLimits returns the value of the SessionLimits struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy. If the receiver or the field SessionLimits is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy) GetSessionLimits() *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_SessionLimits {
	if t != nil && t.SessionLimits != nil {
		return t.SessionLimits
	}
	return nil
}

// GetTcp returns the value of the Tcp struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy. If the receiver or the field Tcp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy) GetTcp() *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Tcp {
	if t != nil && t.Tcp != nil {
		return t.Tcp
	}
	return nil
}

// GetTimeouts returns the value of the Timeouts struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy. If the receiver or the field Timeouts is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy) GetTimeouts() *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts {
	if t != nil && t.Timeouts != nil {
		return t.Timeouts
	}
	return nil
}

// GetUdp returns the value of the Udp struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy. If the receiver or the field Udp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy) GetUdp() *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Udp {
	if t != nil && t.Udp != nil {
		return t.Udp
	}
	return nil
}

// GetUnknownProtocols returns the value of the UnknownProtocols struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy. If the receiver or the field UnknownProtocols is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy) GetUnknownProtocols() *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_UnknownProtocols {
	if t != nil && t.UnknownProtocols != nil {
		return t.UnknownProtocols
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetFiltering retrieves the value of the leaf Filtering from the NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Filtering is set, it can
// safely use t.GetFiltering() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Filtering == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy) GetFiltering() E_NokiaTypesNat_Filtering {
	if t == nil || t.Filtering == 0 {
		return NokiaTypesNat_Filtering_endpoint_independent
	}
	return t.Filtering
}

// GetL2Outside retrieves the value of the leaf L2Outside from the NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if L2Outside is set, it can
// safely use t.GetL2Outside() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.L2Outside == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy) GetL2Outside() YANGEmpty {
	if t == nil || t.L2Outside == false {
		return false
	}
	return t.L2Outside
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Filtering == 0 {
		t.Filtering = NokiaTypesNat_Filtering_endpoint_independent
	}
	t.Alg.PopulateDefaults()
	t.Domain.PopulateDefaults()
	t.PortLimits.PopulateDefaults()
	t.PrioritySessions.PopulateDefaults()
	t.SessionLimits.PopulateDefaults()
	t.Tcp.PopulateDefaults()
	t.Timeouts.PopulateDefaults()
	t.Udp.PopulateDefaults()
	t.UnknownProtocols.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Alg represents the /nokia-conf/configure/groups/group/service/nat/firewall-policy/alg YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Alg struct {
	Ftp  *bool `path:"ftp" module:"nokia-conf"`
	Rtsp *bool `path:"rtsp" module:"nokia-conf"`
	Sip  *bool `path:"sip" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Alg implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Alg) IsYANGGoStruct() {}

// GetFtp retrieves the value of the leaf Ftp from the NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Alg
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ftp is set, it can
// safely use t.GetFtp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ftp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Alg) GetFtp() bool {
	if t == nil || t.Ftp == nil {
		return true
	}
	return *t.Ftp
}

// GetRtsp retrieves the value of the leaf Rtsp from the NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Alg
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rtsp is set, it can
// safely use t.GetRtsp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rtsp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Alg) GetRtsp() bool {
	if t == nil || t.Rtsp == nil {
		return false
	}
	return *t.Rtsp
}

// GetSip retrieves the value of the leaf Sip from the NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Alg
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Sip is set, it can
// safely use t.GetSip() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Sip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Alg) GetSip() bool {
	if t == nil || t.Sip == nil {
		return false
	}
	return *t.Sip
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Alg
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Alg) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ftp == nil {
		var v bool = true
		t.Ftp = &v
	}
	if t.Rtsp == nil {
		var v bool = false
		t.Rtsp = &v
	}
	if t.Sip == nil {
		var v bool = false
		t.Sip = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Alg) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Alg"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Alg) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Alg) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Alg.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Alg) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Domain represents the /nokia-conf/configure/groups/group/service/nat/firewall-policy/domain YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Domain struct {
	Name           *string `path:"name" module:"nokia-conf"`
	RouterInstance *string `path:"router-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Domain implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Domain) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Domain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Domain) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Domain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Domain) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Domain
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Domain) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Domain) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Domain"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Domain) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Domain) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Domain.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Domain) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_PortLimits represents the /nokia-conf/configure/groups/group/service/nat/firewall-policy/port-limits YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_PortLimits struct {
	Forwarding *uint16 `path:"forwarding" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_PortLimits implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_PortLimits) IsYANGGoStruct() {}

// GetForwarding retrieves the value of the leaf Forwarding from the NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_PortLimits
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Forwarding is set, it can
// safely use t.GetForwarding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Forwarding == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_PortLimits) GetForwarding() uint16 {
	if t == nil || t.Forwarding == nil {
		return 0
	}
	return *t.Forwarding
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_PortLimits
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_PortLimits) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_PortLimits) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_PortLimits"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_PortLimits) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_PortLimits) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_PortLimits.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_PortLimits) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_PrioritySessions represents the /nokia-conf/configure/groups/group/service/nat/firewall-policy/priority-sessions YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_PrioritySessions struct {
	Fc *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_PrioritySessions_Fc `path:"fc" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_PrioritySessions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_PrioritySessions) IsYANGGoStruct() {
}

// GetOrCreateFc retrieves the value of the Fc field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_PrioritySessions) GetOrCreateFc() *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_PrioritySessions_Fc {
	if t.Fc != nil {
		return t.Fc
	}
	t.Fc = &NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_PrioritySessions_Fc{}
	return t.Fc
}

// GetFc returns the value of the Fc struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_PrioritySessions. If the receiver or the field Fc is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_PrioritySessions) GetFc() *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_PrioritySessions_Fc {
	if t != nil && t.Fc != nil {
		return t.Fc
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_PrioritySessions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_PrioritySessions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Fc.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_PrioritySessions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_PrioritySessions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_PrioritySessions) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_PrioritySessions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_PrioritySessions.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_PrioritySessions) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_PrioritySessions_Fc represents the /nokia-conf/configure/groups/group/service/nat/firewall-policy/priority-sessions/fc YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_PrioritySessions_Fc struct {
	Af *bool `path:"af" module:"nokia-conf"`
	Be *bool `path:"be" module:"nokia-conf"`
	Ef *bool `path:"ef" module:"nokia-conf"`
	H1 *bool `path:"h1" module:"nokia-conf"`
	H2 *bool `path:"h2" module:"nokia-conf"`
	L1 *bool `path:"l1" module:"nokia-conf"`
	L2 *bool `path:"l2" module:"nokia-conf"`
	Nc *bool `path:"nc" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_PrioritySessions_Fc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_PrioritySessions_Fc) IsYANGGoStruct() {
}

// GetAf retrieves the value of the leaf Af from the NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_PrioritySessions_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Af is set, it can
// safely use t.GetAf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Af == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_PrioritySessions_Fc) GetAf() bool {
	if t == nil || t.Af == nil {
		return false
	}
	return *t.Af
}

// GetBe retrieves the value of the leaf Be from the NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_PrioritySessions_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Be is set, it can
// safely use t.GetBe() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Be == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_PrioritySessions_Fc) GetBe() bool {
	if t == nil || t.Be == nil {
		return false
	}
	return *t.Be
}

// GetEf retrieves the value of the leaf Ef from the NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_PrioritySessions_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ef is set, it can
// safely use t.GetEf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ef == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_PrioritySessions_Fc) GetEf() bool {
	if t == nil || t.Ef == nil {
		return false
	}
	return *t.Ef
}

// GetH1 retrieves the value of the leaf H1 from the NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_PrioritySessions_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if H1 is set, it can
// safely use t.GetH1() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.H1 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_PrioritySessions_Fc) GetH1() bool {
	if t == nil || t.H1 == nil {
		return false
	}
	return *t.H1
}

// GetH2 retrieves the value of the leaf H2 from the NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_PrioritySessions_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if H2 is set, it can
// safely use t.GetH2() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.H2 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_PrioritySessions_Fc) GetH2() bool {
	if t == nil || t.H2 == nil {
		return false
	}
	return *t.H2
}

// GetL1 retrieves the value of the leaf L1 from the NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_PrioritySessions_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if L1 is set, it can
// safely use t.GetL1() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.L1 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_PrioritySessions_Fc) GetL1() bool {
	if t == nil || t.L1 == nil {
		return false
	}
	return *t.L1
}

// GetL2 retrieves the value of the leaf L2 from the NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_PrioritySessions_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if L2 is set, it can
// safely use t.GetL2() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.L2 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_PrioritySessions_Fc) GetL2() bool {
	if t == nil || t.L2 == nil {
		return false
	}
	return *t.L2
}

// GetNc retrieves the value of the leaf Nc from the NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_PrioritySessions_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Nc is set, it can
// safely use t.GetNc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Nc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_PrioritySessions_Fc) GetNc() bool {
	if t == nil || t.Nc == nil {
		return false
	}
	return *t.Nc
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_PrioritySessions_Fc
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_PrioritySessions_Fc) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Af == nil {
		var v bool = false
		t.Af = &v
	}
	if t.Be == nil {
		var v bool = false
		t.Be = &v
	}
	if t.Ef == nil {
		var v bool = false
		t.Ef = &v
	}
	if t.H1 == nil {
		var v bool = false
		t.H1 = &v
	}
	if t.H2 == nil {
		var v bool = false
		t.H2 = &v
	}
	if t.L1 == nil {
		var v bool = false
		t.L1 = &v
	}
	if t.L2 == nil {
		var v bool = false
		t.L2 = &v
	}
	if t.Nc == nil {
		var v bool = false
		t.Nc = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_PrioritySessions_Fc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_PrioritySessions_Fc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_PrioritySessions_Fc) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_PrioritySessions_Fc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_PrioritySessions_Fc.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_PrioritySessions_Fc) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_SessionLimits represents the /nokia-conf/configure/groups/group/service/nat/firewall-policy/session-limits YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_SessionLimits struct {
	Max        *uint16                                                                               `path:"max" module:"nokia-conf"`
	Reserved   *uint16                                                                               `path:"reserved" module:"nokia-conf"`
	Watermarks *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_SessionLimits_Watermarks `path:"watermarks" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_SessionLimits implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_SessionLimits) IsYANGGoStruct() {}

// GetOrCreateWatermarks retrieves the value of the Watermarks field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_SessionLimits) GetOrCreateWatermarks() *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_SessionLimits_Watermarks {
	if t.Watermarks != nil {
		return t.Watermarks
	}
	t.Watermarks = &NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_SessionLimits_Watermarks{}
	return t.Watermarks
}

// GetWatermarks returns the value of the Watermarks struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_SessionLimits. If the receiver or the field Watermarks is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_SessionLimits) GetWatermarks() *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_SessionLimits_Watermarks {
	if t != nil && t.Watermarks != nil {
		return t.Watermarks
	}
	return nil
}

// GetMax retrieves the value of the leaf Max from the NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_SessionLimits
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_SessionLimits) GetMax() uint16 {
	if t == nil || t.Max == nil {
		return 65535
	}
	return *t.Max
}

// GetReserved retrieves the value of the leaf Reserved from the NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_SessionLimits
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Reserved is set, it can
// safely use t.GetReserved() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Reserved == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_SessionLimits) GetReserved() uint16 {
	if t == nil || t.Reserved == nil {
		return 0
	}
	return *t.Reserved
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_SessionLimits
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_SessionLimits) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Max == nil {
		var v uint16 = 65535
		t.Max = &v
	}
	t.Watermarks.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_SessionLimits) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_SessionLimits"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_SessionLimits) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_SessionLimits) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_SessionLimits.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_SessionLimits) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_SessionLimits_Watermarks represents the /nokia-conf/configure/groups/group/service/nat/firewall-policy/session-limits/watermarks YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_SessionLimits_Watermarks struct {
	High *uint32 `path:"high" module:"nokia-conf"`
	Low  *uint32 `path:"low" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_SessionLimits_Watermarks implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_SessionLimits_Watermarks) IsYANGGoStruct() {
}

// GetHigh retrieves the value of the leaf High from the NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_SessionLimits_Watermarks
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if High is set, it can
// safely use t.GetHigh() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.High == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_SessionLimits_Watermarks) GetHigh() uint32 {
	if t == nil || t.High == nil {
		return 0
	}
	return *t.High
}

// GetLow retrieves the value of the leaf Low from the NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_SessionLimits_Watermarks
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Low is set, it can
// safely use t.GetLow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Low == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_SessionLimits_Watermarks) GetLow() uint32 {
	if t == nil || t.Low == nil {
		return 0
	}
	return *t.Low
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_SessionLimits_Watermarks
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_SessionLimits_Watermarks) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_SessionLimits_Watermarks) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_SessionLimits_Watermarks"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_SessionLimits_Watermarks) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_SessionLimits_Watermarks) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_SessionLimits_Watermarks.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_SessionLimits_Watermarks) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Tcp represents the /nokia-conf/configure/groups/group/service/nat/firewall-policy/tcp YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Tcp struct {
	MssAdjust *uint32 `path:"mss-adjust" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Tcp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Tcp) IsYANGGoStruct() {}

// GetMssAdjust retrieves the value of the leaf MssAdjust from the NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Tcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MssAdjust is set, it can
// safely use t.GetMssAdjust() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MssAdjust == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Tcp) GetMssAdjust() uint32 {
	if t == nil || t.MssAdjust == nil {
		return 0
	}
	return *t.MssAdjust
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Tcp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Tcp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Tcp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Tcp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Tcp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Tcp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Tcp.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Tcp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts represents the /nokia-conf/configure/groups/group/service/nat/firewall-policy/timeouts YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts struct {
	Icmp6Query      *uint32                                                                   `path:"icmp6-query" module:"nokia-conf"`
	Sip             *uint32                                                                   `path:"sip" module:"nokia-conf"`
	Tcp             *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts_Tcp `path:"tcp" module:"nokia-conf"`
	Udp             *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts_Udp `path:"udp" module:"nokia-conf"`
	UnknownProtocol *uint32                                                                   `path:"unknown-protocol" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts) IsYANGGoStruct() {}

// GetOrCreateTcp retrieves the value of the Tcp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts) GetOrCreateTcp() *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts_Tcp {
	if t.Tcp != nil {
		return t.Tcp
	}
	t.Tcp = &NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts_Tcp{}
	return t.Tcp
}

// GetOrCreateUdp retrieves the value of the Udp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts) GetOrCreateUdp() *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts_Udp {
	if t.Udp != nil {
		return t.Udp
	}
	t.Udp = &NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts_Udp{}
	return t.Udp
}

// GetTcp returns the value of the Tcp struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts. If the receiver or the field Tcp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts) GetTcp() *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts_Tcp {
	if t != nil && t.Tcp != nil {
		return t.Tcp
	}
	return nil
}

// GetUdp returns the value of the Udp struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts. If the receiver or the field Udp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts) GetUdp() *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts_Udp {
	if t != nil && t.Udp != nil {
		return t.Udp
	}
	return nil
}

// GetIcmp6Query retrieves the value of the leaf Icmp6Query from the NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Icmp6Query is set, it can
// safely use t.GetIcmp6Query() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Icmp6Query == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts) GetIcmp6Query() uint32 {
	if t == nil || t.Icmp6Query == nil {
		return 60
	}
	return *t.Icmp6Query
}

// GetSip retrieves the value of the leaf Sip from the NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Sip is set, it can
// safely use t.GetSip() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Sip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts) GetSip() uint32 {
	if t == nil || t.Sip == nil {
		return 120
	}
	return *t.Sip
}

// GetUnknownProtocol retrieves the value of the leaf UnknownProtocol from the NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnknownProtocol is set, it can
// safely use t.GetUnknownProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnknownProtocol == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts) GetUnknownProtocol() uint32 {
	if t == nil || t.UnknownProtocol == nil {
		return 300
	}
	return *t.UnknownProtocol
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Icmp6Query == nil {
		var v uint32 = 60
		t.Icmp6Query = &v
	}
	if t.Sip == nil {
		var v uint32 = 120
		t.Sip = &v
	}
	if t.UnknownProtocol == nil {
		var v uint32 = 300
		t.UnknownProtocol = &v
	}
	t.Tcp.PopulateDefaults()
	t.Udp.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts_Tcp represents the /nokia-conf/configure/groups/group/service/nat/firewall-policy/timeouts/tcp YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts_Tcp struct {
	Established *uint32 `path:"established" module:"nokia-conf"`
	Rst         *uint32 `path:"rst" module:"nokia-conf"`
	Syn         *uint32 `path:"syn" module:"nokia-conf"`
	TimeWait    *uint32 `path:"time-wait" module:"nokia-conf"`
	Transitory  *uint32 `path:"transitory" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts_Tcp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts_Tcp) IsYANGGoStruct() {}

// GetEstablished retrieves the value of the leaf Established from the NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts_Tcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Established is set, it can
// safely use t.GetEstablished() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Established == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts_Tcp) GetEstablished() uint32 {
	if t == nil || t.Established == nil {
		return 7440
	}
	return *t.Established
}

// GetRst retrieves the value of the leaf Rst from the NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts_Tcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rst is set, it can
// safely use t.GetRst() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rst == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts_Tcp) GetRst() uint32 {
	if t == nil || t.Rst == nil {
		return 0
	}
	return *t.Rst
}

// GetSyn retrieves the value of the leaf Syn from the NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts_Tcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Syn is set, it can
// safely use t.GetSyn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Syn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts_Tcp) GetSyn() uint32 {
	if t == nil || t.Syn == nil {
		return 15
	}
	return *t.Syn
}

// GetTimeWait retrieves the value of the leaf TimeWait from the NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts_Tcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TimeWait is set, it can
// safely use t.GetTimeWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TimeWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts_Tcp) GetTimeWait() uint32 {
	if t == nil || t.TimeWait == nil {
		return 0
	}
	return *t.TimeWait
}

// GetTransitory retrieves the value of the leaf Transitory from the NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts_Tcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Transitory is set, it can
// safely use t.GetTransitory() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Transitory == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts_Tcp) GetTransitory() uint32 {
	if t == nil || t.Transitory == nil {
		return 240
	}
	return *t.Transitory
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts_Tcp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts_Tcp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Established == nil {
		var v uint32 = 7440
		t.Established = &v
	}
	if t.Rst == nil {
		var v uint32 = 0
		t.Rst = &v
	}
	if t.Syn == nil {
		var v uint32 = 15
		t.Syn = &v
	}
	if t.TimeWait == nil {
		var v uint32 = 0
		t.TimeWait = &v
	}
	if t.Transitory == nil {
		var v uint32 = 240
		t.Transitory = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts_Tcp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts_Tcp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts_Tcp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts_Tcp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts_Tcp.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts_Tcp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts_Udp represents the /nokia-conf/configure/groups/group/service/nat/firewall-policy/timeouts/udp YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts_Udp struct {
	Dns     *uint32 `path:"dns" module:"nokia-conf"`
	Initial *uint32 `path:"initial" module:"nokia-conf"`
	Normal  *uint32 `path:"normal" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts_Udp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts_Udp) IsYANGGoStruct() {}

// GetDns retrieves the value of the leaf Dns from the NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts_Udp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dns is set, it can
// safely use t.GetDns() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dns == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts_Udp) GetDns() uint32 {
	if t == nil || t.Dns == nil {
		return 15
	}
	return *t.Dns
}

// GetInitial retrieves the value of the leaf Initial from the NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts_Udp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Initial is set, it can
// safely use t.GetInitial() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Initial == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts_Udp) GetInitial() uint32 {
	if t == nil || t.Initial == nil {
		return 15
	}
	return *t.Initial
}

// GetNormal retrieves the value of the leaf Normal from the NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts_Udp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Normal is set, it can
// safely use t.GetNormal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Normal == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts_Udp) GetNormal() uint32 {
	if t == nil || t.Normal == nil {
		return 300
	}
	return *t.Normal
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts_Udp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts_Udp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Dns == nil {
		var v uint32 = 15
		t.Dns = &v
	}
	if t.Initial == nil {
		var v uint32 = 15
		t.Initial = &v
	}
	if t.Normal == nil {
		var v uint32 = 300
		t.Normal = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts_Udp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts_Udp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts_Udp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts_Udp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts_Udp.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Timeouts_Udp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Udp represents the /nokia-conf/configure/groups/group/service/nat/firewall-policy/udp YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Udp struct {
	InboundRefresh *bool `path:"inbound-refresh" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Udp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Udp) IsYANGGoStruct() {}

// GetInboundRefresh retrieves the value of the leaf InboundRefresh from the NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Udp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InboundRefresh is set, it can
// safely use t.GetInboundRefresh() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InboundRefresh == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Udp) GetInboundRefresh() bool {
	if t == nil || t.InboundRefresh == nil {
		return false
	}
	return *t.InboundRefresh
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Udp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Udp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InboundRefresh == nil {
		var v bool = false
		t.InboundRefresh = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Udp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Udp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Udp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Udp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Udp.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_Udp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_UnknownProtocols represents the /nokia-conf/configure/groups/group/service/nat/firewall-policy/unknown-protocols YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_UnknownProtocols struct {
	All      YANGEmpty `path:"all" module:"nokia-conf"`
	Protocol []uint8   `path:"protocol" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_UnknownProtocols implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_UnknownProtocols) IsYANGGoStruct() {
}

// GetAll retrieves the value of the leaf All from the NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_UnknownProtocols
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if All is set, it can
// safely use t.GetAll() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.All == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_UnknownProtocols) GetAll() YANGEmpty {
	if t == nil || t.All == false {
		return false
	}
	return t.All
}

// GetProtocol retrieves the value of the leaf Protocol from the NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_UnknownProtocols
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Protocol is set, it can
// safely use t.GetProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Protocol == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_UnknownProtocols) GetProtocol() []uint8 {
	if t == nil || t.Protocol == nil {
		return nil
	}
	return t.Protocol
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_UnknownProtocols
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_UnknownProtocols) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_UnknownProtocols) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_UnknownProtocols"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_UnknownProtocols) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_UnknownProtocols) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_UnknownProtocols.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_FirewallPolicy_UnknownProtocols) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Nat_MapT represents the /nokia-conf/configure/groups/group/service/nat/map-t YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Nat_MapT struct {
	Domain map[string]*NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain `path:"domain" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Nat_MapT implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_MapT) IsYANGGoStruct() {}

// NewDomain creates a new entry in the Domain list of the
// NokiaConf_Configure_Groups_Group_Service_Nat_MapT struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_MapT) NewDomain(Name string) (*NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Domain == nil {
		t.Domain = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Domain[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Domain", key)
	}

	t.Domain[key] = &NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain{
		Name: &Name,
	}

	return t.Domain[key], nil
}

// RenameDomain renames an entry in the list Domain within
// the NokiaConf_Configure_Groups_Group_Service_Nat_MapT struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_MapT) RenameDomain(oldK, newK string) error {
	if _, ok := t.Domain[newK]; ok {
		return fmt.Errorf("key %v already exists in Domain", newK)
	}

	e, ok := t.Domain[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Domain", oldK)
	}
	e.Name = &newK

	t.Domain[newK] = e
	delete(t.Domain, oldK)
	return nil
}

// GetOrCreateDomain retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Nat_MapT. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_MapT) GetOrCreateDomain(Name string) *NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain {

	key := Name

	if v, ok := t.Domain[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDomain(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDomain got unexpected error: %v", err))
	}
	return v
}

// GetDomain retrieves the value with the specified key from
// the Domain map field of NokiaConf_Configure_Groups_Group_Service_Nat_MapT. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_MapT) GetDomain(Name string) *NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Domain[key]; ok {
		return lm
	}
	return nil
}

// DeleteDomain deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Nat_MapT. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_MapT) DeleteDomain(Name string) {
	key := Name

	delete(t.Domain, key)
}

// AppendDomain appends the supplied NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain struct to the
// list Domain of NokiaConf_Configure_Groups_Group_Service_Nat_MapT. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_MapT) AppendDomain(v *NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Domain == nil {
		t.Domain = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain)
	}

	if _, ok := t.Domain[key]; ok {
		return fmt.Errorf("duplicate key for list Domain %v", key)
	}

	t.Domain[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Nat_MapT
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_MapT) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Domain {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_MapT) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Nat_MapT"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_MapT) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_MapT) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Nat_MapT.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_MapT) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain represents the /nokia-conf/configure/groups/group/service/nat/map-t/domain YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain struct {
	AdminState      E_NokiaTypesSros_AdminState                                                      `path:"admin-state" module:"nokia-conf"`
	Description     *string                                                                          `path:"description" module:"nokia-conf"`
	DmrPrefix       *string                                                                          `path:"dmr-prefix" module:"nokia-conf"`
	IpFragmentation *NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain_IpFragmentation        `path:"ip-fragmentation" module:"nokia-conf"`
	MappingRule     map[string]*NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain_MappingRule `path:"mapping-rule" module:"nokia-conf"`
	Mtu             *uint32                                                                          `path:"mtu" module:"nokia-conf"`
	Name            *string                                                                          `path:"name" module:"nokia-conf"`
	TcpMssAdjust    *uint32                                                                          `path:"tcp-mss-adjust" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain) IsYANGGoStruct() {}

// NewMappingRule creates a new entry in the MappingRule list of the
// NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain) NewMappingRule(RuleName string) (*NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain_MappingRule, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MappingRule == nil {
		t.MappingRule = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain_MappingRule)
	}

	key := RuleName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MappingRule[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MappingRule", key)
	}

	t.MappingRule[key] = &NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain_MappingRule{
		RuleName: &RuleName,
	}

	return t.MappingRule[key], nil
}

// RenameMappingRule renames an entry in the list MappingRule within
// the NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain) RenameMappingRule(oldK, newK string) error {
	if _, ok := t.MappingRule[newK]; ok {
		return fmt.Errorf("key %v already exists in MappingRule", newK)
	}

	e, ok := t.MappingRule[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MappingRule", oldK)
	}
	e.RuleName = &newK

	t.MappingRule[newK] = e
	delete(t.MappingRule, oldK)
	return nil
}

// GetOrCreateMappingRule retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain) GetOrCreateMappingRule(RuleName string) *NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain_MappingRule {

	key := RuleName

	if v, ok := t.MappingRule[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMappingRule(RuleName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMappingRule got unexpected error: %v", err))
	}
	return v
}

// GetMappingRule retrieves the value with the specified key from
// the MappingRule map field of NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain) GetMappingRule(RuleName string) *NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain_MappingRule {

	if t == nil {
		return nil
	}

	key := RuleName

	if lm, ok := t.MappingRule[key]; ok {
		return lm
	}
	return nil
}

// DeleteMappingRule deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain) DeleteMappingRule(RuleName string) {
	key := RuleName

	delete(t.MappingRule, key)
}

// AppendMappingRule appends the supplied NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain_MappingRule struct to the
// list MappingRule of NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain_MappingRule already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain) AppendMappingRule(v *NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain_MappingRule) error {
	if v.RuleName == nil {
		return fmt.Errorf("invalid nil key received for RuleName")
	}

	key := *v.RuleName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MappingRule == nil {
		t.MappingRule = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain_MappingRule)
	}

	if _, ok := t.MappingRule[key]; ok {
		return fmt.Errorf("duplicate key for list MappingRule %v", key)
	}

	t.MappingRule[key] = v
	return nil
}

// GetOrCreateIpFragmentation retrieves the value of the IpFragmentation field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain) GetOrCreateIpFragmentation() *NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain_IpFragmentation {
	if t.IpFragmentation != nil {
		return t.IpFragmentation
	}
	t.IpFragmentation = &NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain_IpFragmentation{}
	return t.IpFragmentation
}

// GetIpFragmentation returns the value of the IpFragmentation struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain. If the receiver or the field IpFragmentation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain) GetIpFragmentation() *NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain_IpFragmentation {
	if t != nil && t.IpFragmentation != nil {
		return t.IpFragmentation
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDmrPrefix retrieves the value of the leaf DmrPrefix from the NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DmrPrefix is set, it can
// safely use t.GetDmrPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DmrPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain) GetDmrPrefix() string {
	if t == nil || t.DmrPrefix == nil {
		return ""
	}
	return *t.DmrPrefix
}

// GetMtu retrieves the value of the leaf Mtu from the NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mtu is set, it can
// safely use t.GetMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain) GetMtu() uint32 {
	if t == nil || t.Mtu == nil {
		return 8686
	}
	return *t.Mtu
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetTcpMssAdjust retrieves the value of the leaf TcpMssAdjust from the NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TcpMssAdjust is set, it can
// safely use t.GetTcpMssAdjust() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TcpMssAdjust == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain) GetTcpMssAdjust() uint32 {
	if t == nil || t.TcpMssAdjust == nil {
		return 0
	}
	return *t.TcpMssAdjust
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Mtu == nil {
		var v uint32 = 8686
		t.Mtu = &v
	}
	if t.TcpMssAdjust == nil {
		var v uint32 = 0
		t.TcpMssAdjust = &v
	}
	t.IpFragmentation.PopulateDefaults()
	for _, e := range t.MappingRule {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain_IpFragmentation represents the /nokia-conf/configure/groups/group/service/nat/map-t/domain/ip-fragmentation YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain_IpFragmentation struct {
	V6FragHeader *bool `path:"v6-frag-header" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain_IpFragmentation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain_IpFragmentation) IsYANGGoStruct() {}

// GetV6FragHeader retrieves the value of the leaf V6FragHeader from the NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain_IpFragmentation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if V6FragHeader is set, it can
// safely use t.GetV6FragHeader() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.V6FragHeader == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain_IpFragmentation) GetV6FragHeader() bool {
	if t == nil || t.V6FragHeader == nil {
		return false
	}
	return *t.V6FragHeader
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain_IpFragmentation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain_IpFragmentation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.V6FragHeader == nil {
		var v bool = false
		t.V6FragHeader = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain_IpFragmentation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain_IpFragmentation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain_IpFragmentation) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain_IpFragmentation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain_IpFragmentation.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain_IpFragmentation) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain_MappingRule represents the /nokia-conf/configure/groups/group/service/nat/map-t/domain/mapping-rule YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain_MappingRule struct {
	AdminState  E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Description *string                     `path:"description" module:"nokia-conf"`
	EaLength    *uint32                     `path:"ea-length" module:"nokia-conf"`
	Ipv4Prefix  *string                     `path:"ipv4-prefix" module:"nokia-conf"`
	PsidOffset  *uint32                     `path:"psid-offset" module:"nokia-conf"`
	RuleName    *string                     `path:"rule-name" module:"nokia-conf"`
	RulePrefix  *string                     `path:"rule-prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain_MappingRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain_MappingRule) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain_MappingRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain_MappingRule) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain_MappingRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain_MappingRule) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEaLength retrieves the value of the leaf EaLength from the NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain_MappingRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EaLength is set, it can
// safely use t.GetEaLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EaLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain_MappingRule) GetEaLength() uint32 {
	if t == nil || t.EaLength == nil {
		return 0
	}
	return *t.EaLength
}

// GetIpv4Prefix retrieves the value of the leaf Ipv4Prefix from the NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain_MappingRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Prefix is set, it can
// safely use t.GetIpv4Prefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain_MappingRule) GetIpv4Prefix() string {
	if t == nil || t.Ipv4Prefix == nil {
		return ""
	}
	return *t.Ipv4Prefix
}

// GetPsidOffset retrieves the value of the leaf PsidOffset from the NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain_MappingRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PsidOffset is set, it can
// safely use t.GetPsidOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PsidOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain_MappingRule) GetPsidOffset() uint32 {
	if t == nil || t.PsidOffset == nil {
		return 6
	}
	return *t.PsidOffset
}

// GetRuleName retrieves the value of the leaf RuleName from the NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain_MappingRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RuleName is set, it can
// safely use t.GetRuleName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RuleName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain_MappingRule) GetRuleName() string {
	if t == nil || t.RuleName == nil {
		return ""
	}
	return *t.RuleName
}

// GetRulePrefix retrieves the value of the leaf RulePrefix from the NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain_MappingRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RulePrefix is set, it can
// safely use t.GetRulePrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RulePrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain_MappingRule) GetRulePrefix() string {
	if t == nil || t.RulePrefix == nil {
		return ""
	}
	return *t.RulePrefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain_MappingRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain_MappingRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.EaLength == nil {
		var v uint32 = 0
		t.EaLength = &v
	}
	if t.PsidOffset == nil {
		var v uint32 = 6
		t.PsidOffset = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain_MappingRule struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain_MappingRule) ΛListKeyMap() (map[string]interface{}, error) {
	if t.RuleName == nil {
		return nil, fmt.Errorf("nil value for key RuleName")
	}

	return map[string]interface{}{
		"rule-name": *t.RuleName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain_MappingRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain_MappingRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain_MappingRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain_MappingRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain_MappingRule.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_MapT_Domain_MappingRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy represents the /nokia-conf/configure/groups/group/service/nat/nat-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy struct {
	Alg                    *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Alg              `path:"alg" module:"nokia-conf"`
	BlockLimit             *uint16                                                                  `path:"block-limit" module:"nokia-conf"`
	Description            *string                                                                  `path:"description" module:"nokia-conf"`
	Dnat                   *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Dnat             `path:"dnat" module:"nokia-conf"`
	DnatOnly               *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_DnatOnly         `path:"dnat-only" module:"nokia-conf" yangPresence:"true"`
	Filtering              E_NokiaTypesNat_Filtering                                                `path:"filtering" module:"nokia-conf"`
	FlowLogPolicy          *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_FlowLogPolicy    `path:"flow-log-policy" module:"nokia-conf"`
	L2Outside              YANGEmpty                                                                `path:"l2-outside" module:"nokia-conf"`
	Name                   *string                                                                  `path:"name" module:"nokia-conf"`
	Pool                   *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Pool             `path:"pool" module:"nokia-conf"`
	PortForwardingRangeEnd *uint16                                                                  `path:"port-forwarding-range-end" module:"nokia-conf"`
	PortLimits             *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PortLimits       `path:"port-limits" module:"nokia-conf"`
	PrioritySessions       *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PrioritySessions `path:"priority-sessions" module:"nokia-conf"`
	SessionLimits          *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_SessionLimits    `path:"session-limits" module:"nokia-conf"`
	Tcp                    *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Tcp              `path:"tcp" module:"nokia-conf"`
	Timeouts               *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts         `path:"timeouts" module:"nokia-conf"`
	Udp                    *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Udp              `path:"udp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy) IsYANGGoStruct() {}

// GetOrCreateAlg retrieves the value of the Alg field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy) GetOrCreateAlg() *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Alg {
	if t.Alg != nil {
		return t.Alg
	}
	t.Alg = &NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Alg{}
	return t.Alg
}

// GetOrCreateDnat retrieves the value of the Dnat field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy) GetOrCreateDnat() *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Dnat {
	if t.Dnat != nil {
		return t.Dnat
	}
	t.Dnat = &NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Dnat{}
	return t.Dnat
}

// GetOrCreateDnatOnly retrieves the value of the DnatOnly field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy) GetOrCreateDnatOnly() *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_DnatOnly {
	if t.DnatOnly != nil {
		return t.DnatOnly
	}
	t.DnatOnly = &NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_DnatOnly{}
	return t.DnatOnly
}

// GetOrCreateFlowLogPolicy retrieves the value of the FlowLogPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy) GetOrCreateFlowLogPolicy() *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_FlowLogPolicy {
	if t.FlowLogPolicy != nil {
		return t.FlowLogPolicy
	}
	t.FlowLogPolicy = &NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_FlowLogPolicy{}
	return t.FlowLogPolicy
}

// GetOrCreatePool retrieves the value of the Pool field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy) GetOrCreatePool() *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Pool {
	if t.Pool != nil {
		return t.Pool
	}
	t.Pool = &NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Pool{}
	return t.Pool
}

// GetOrCreatePortLimits retrieves the value of the PortLimits field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy) GetOrCreatePortLimits() *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PortLimits {
	if t.PortLimits != nil {
		return t.PortLimits
	}
	t.PortLimits = &NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PortLimits{}
	return t.PortLimits
}

// GetOrCreatePrioritySessions retrieves the value of the PrioritySessions field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy) GetOrCreatePrioritySessions() *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PrioritySessions {
	if t.PrioritySessions != nil {
		return t.PrioritySessions
	}
	t.PrioritySessions = &NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PrioritySessions{}
	return t.PrioritySessions
}

// GetOrCreateSessionLimits retrieves the value of the SessionLimits field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy) GetOrCreateSessionLimits() *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_SessionLimits {
	if t.SessionLimits != nil {
		return t.SessionLimits
	}
	t.SessionLimits = &NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_SessionLimits{}
	return t.SessionLimits
}

// GetOrCreateTcp retrieves the value of the Tcp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy) GetOrCreateTcp() *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Tcp {
	if t.Tcp != nil {
		return t.Tcp
	}
	t.Tcp = &NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Tcp{}
	return t.Tcp
}

// GetOrCreateTimeouts retrieves the value of the Timeouts field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy) GetOrCreateTimeouts() *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts {
	if t.Timeouts != nil {
		return t.Timeouts
	}
	t.Timeouts = &NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts{}
	return t.Timeouts
}

// GetOrCreateUdp retrieves the value of the Udp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy) GetOrCreateUdp() *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Udp {
	if t.Udp != nil {
		return t.Udp
	}
	t.Udp = &NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Udp{}
	return t.Udp
}

// GetAlg returns the value of the Alg struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy. If the receiver or the field Alg is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy) GetAlg() *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Alg {
	if t != nil && t.Alg != nil {
		return t.Alg
	}
	return nil
}

// GetDnat returns the value of the Dnat struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy. If the receiver or the field Dnat is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy) GetDnat() *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Dnat {
	if t != nil && t.Dnat != nil {
		return t.Dnat
	}
	return nil
}

// GetDnatOnly returns the value of the DnatOnly struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy. If the receiver or the field DnatOnly is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy) GetDnatOnly() *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_DnatOnly {
	if t != nil && t.DnatOnly != nil {
		return t.DnatOnly
	}
	return nil
}

// GetFlowLogPolicy returns the value of the FlowLogPolicy struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy. If the receiver or the field FlowLogPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy) GetFlowLogPolicy() *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_FlowLogPolicy {
	if t != nil && t.FlowLogPolicy != nil {
		return t.FlowLogPolicy
	}
	return nil
}

// GetPool returns the value of the Pool struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy. If the receiver or the field Pool is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy) GetPool() *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Pool {
	if t != nil && t.Pool != nil {
		return t.Pool
	}
	return nil
}

// GetPortLimits returns the value of the PortLimits struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy. If the receiver or the field PortLimits is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy) GetPortLimits() *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PortLimits {
	if t != nil && t.PortLimits != nil {
		return t.PortLimits
	}
	return nil
}

// GetPrioritySessions returns the value of the PrioritySessions struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy. If the receiver or the field PrioritySessions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy) GetPrioritySessions() *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PrioritySessions {
	if t != nil && t.PrioritySessions != nil {
		return t.PrioritySessions
	}
	return nil
}

// GetSessionLimits returns the value of the SessionLimits struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy. If the receiver or the field SessionLimits is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy) GetSessionLimits() *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_SessionLimits {
	if t != nil && t.SessionLimits != nil {
		return t.SessionLimits
	}
	return nil
}

// GetTcp returns the value of the Tcp struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy. If the receiver or the field Tcp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy) GetTcp() *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Tcp {
	if t != nil && t.Tcp != nil {
		return t.Tcp
	}
	return nil
}

// GetTimeouts returns the value of the Timeouts struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy. If the receiver or the field Timeouts is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy) GetTimeouts() *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts {
	if t != nil && t.Timeouts != nil {
		return t.Timeouts
	}
	return nil
}

// GetUdp returns the value of the Udp struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy. If the receiver or the field Udp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy) GetUdp() *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Udp {
	if t != nil && t.Udp != nil {
		return t.Udp
	}
	return nil
}

// GetBlockLimit retrieves the value of the leaf BlockLimit from the NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BlockLimit is set, it can
// safely use t.GetBlockLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BlockLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy) GetBlockLimit() uint16 {
	if t == nil || t.BlockLimit == nil {
		return 1
	}
	return *t.BlockLimit
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetFiltering retrieves the value of the leaf Filtering from the NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Filtering is set, it can
// safely use t.GetFiltering() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Filtering == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy) GetFiltering() E_NokiaTypesNat_Filtering {
	if t == nil || t.Filtering == 0 {
		return NokiaTypesNat_Filtering_endpoint_independent
	}
	return t.Filtering
}

// GetL2Outside retrieves the value of the leaf L2Outside from the NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if L2Outside is set, it can
// safely use t.GetL2Outside() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.L2Outside == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy) GetL2Outside() YANGEmpty {
	if t == nil || t.L2Outside == false {
		return false
	}
	return t.L2Outside
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPortForwardingRangeEnd retrieves the value of the leaf PortForwardingRangeEnd from the NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortForwardingRangeEnd is set, it can
// safely use t.GetPortForwardingRangeEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortForwardingRangeEnd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy) GetPortForwardingRangeEnd() uint16 {
	if t == nil || t.PortForwardingRangeEnd == nil {
		return 1023
	}
	return *t.PortForwardingRangeEnd
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BlockLimit == nil {
		var v uint16 = 1
		t.BlockLimit = &v
	}
	if t.Filtering == 0 {
		t.Filtering = NokiaTypesNat_Filtering_endpoint_independent
	}
	if t.PortForwardingRangeEnd == nil {
		var v uint16 = 1023
		t.PortForwardingRangeEnd = &v
	}
	t.Alg.PopulateDefaults()
	t.Dnat.PopulateDefaults()
	t.DnatOnly.PopulateDefaults()
	t.FlowLogPolicy.PopulateDefaults()
	t.Pool.PopulateDefaults()
	t.PortLimits.PopulateDefaults()
	t.PrioritySessions.PopulateDefaults()
	t.SessionLimits.PopulateDefaults()
	t.Tcp.PopulateDefaults()
	t.Timeouts.PopulateDefaults()
	t.Udp.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Alg represents the /nokia-conf/configure/groups/group/service/nat/nat-policy/alg YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Alg struct {
	Ftp  *bool `path:"ftp" module:"nokia-conf"`
	Pptp *bool `path:"pptp" module:"nokia-conf"`
	Rtsp *bool `path:"rtsp" module:"nokia-conf"`
	Sip  *bool `path:"sip" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Alg implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Alg) IsYANGGoStruct() {}

// GetFtp retrieves the value of the leaf Ftp from the NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Alg
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ftp is set, it can
// safely use t.GetFtp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ftp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Alg) GetFtp() bool {
	if t == nil || t.Ftp == nil {
		return true
	}
	return *t.Ftp
}

// GetPptp retrieves the value of the leaf Pptp from the NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Alg
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pptp is set, it can
// safely use t.GetPptp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pptp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Alg) GetPptp() bool {
	if t == nil || t.Pptp == nil {
		return false
	}
	return *t.Pptp
}

// GetRtsp retrieves the value of the leaf Rtsp from the NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Alg
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rtsp is set, it can
// safely use t.GetRtsp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rtsp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Alg) GetRtsp() bool {
	if t == nil || t.Rtsp == nil {
		return false
	}
	return *t.Rtsp
}

// GetSip retrieves the value of the leaf Sip from the NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Alg
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Sip is set, it can
// safely use t.GetSip() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Sip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Alg) GetSip() bool {
	if t == nil || t.Sip == nil {
		return false
	}
	return *t.Sip
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Alg
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Alg) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ftp == nil {
		var v bool = true
		t.Ftp = &v
	}
	if t.Pptp == nil {
		var v bool = false
		t.Pptp = &v
	}
	if t.Rtsp == nil {
		var v bool = false
		t.Rtsp = &v
	}
	if t.Sip == nil {
		var v bool = false
		t.Sip = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Alg) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Alg"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Alg) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Alg) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Alg.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Alg) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Dnat represents the /nokia-conf/configure/groups/group/service/nat/nat-policy/dnat YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Dnat struct {
	Classifier *string `path:"classifier" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Dnat implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Dnat) IsYANGGoStruct() {}

// GetClassifier retrieves the value of the leaf Classifier from the NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Dnat
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Classifier is set, it can
// safely use t.GetClassifier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Classifier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Dnat) GetClassifier() string {
	if t == nil || t.Classifier == nil {
		return ""
	}
	return *t.Classifier
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Dnat
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Dnat) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Dnat) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Dnat"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Dnat) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Dnat) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Dnat.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Dnat) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_DnatOnly represents the /nokia-conf/configure/groups/group/service/nat/nat-policy/dnat-only YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_DnatOnly struct {
	NatGroup       *uint32 `path:"nat-group" module:"nokia-conf"`
	RouterInstance *string `path:"router-instance" module:"nokia-conf"`
	WlanGwGroup    *uint32 `path:"wlan-gw-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_DnatOnly implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_DnatOnly) IsYANGGoStruct() {}

// GetNatGroup retrieves the value of the leaf NatGroup from the NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_DnatOnly
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NatGroup is set, it can
// safely use t.GetNatGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NatGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_DnatOnly) GetNatGroup() uint32 {
	if t == nil || t.NatGroup == nil {
		return 0
	}
	return *t.NatGroup
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_DnatOnly
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_DnatOnly) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// GetWlanGwGroup retrieves the value of the leaf WlanGwGroup from the NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_DnatOnly
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WlanGwGroup is set, it can
// safely use t.GetWlanGwGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WlanGwGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_DnatOnly) GetWlanGwGroup() uint32 {
	if t == nil || t.WlanGwGroup == nil {
		return 0
	}
	return *t.WlanGwGroup
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_DnatOnly
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_DnatOnly) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_DnatOnly) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_DnatOnly"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_DnatOnly) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_DnatOnly) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_DnatOnly.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_DnatOnly) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_FlowLogPolicy represents the /nokia-conf/configure/groups/group/service/nat/nat-policy/flow-log-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_FlowLogPolicy struct {
	Ipfix  *string `path:"ipfix" module:"nokia-conf"`
	Syslog *string `path:"syslog" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_FlowLogPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_FlowLogPolicy) IsYANGGoStruct() {}

// GetIpfix retrieves the value of the leaf Ipfix from the NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_FlowLogPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipfix is set, it can
// safely use t.GetIpfix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipfix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_FlowLogPolicy) GetIpfix() string {
	if t == nil || t.Ipfix == nil {
		return ""
	}
	return *t.Ipfix
}

// GetSyslog retrieves the value of the leaf Syslog from the NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_FlowLogPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Syslog is set, it can
// safely use t.GetSyslog() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Syslog == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_FlowLogPolicy) GetSyslog() string {
	if t == nil || t.Syslog == nil {
		return ""
	}
	return *t.Syslog
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_FlowLogPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_FlowLogPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_FlowLogPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_FlowLogPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_FlowLogPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_FlowLogPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_FlowLogPolicy.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_FlowLogPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Pool represents the /nokia-conf/configure/groups/group/service/nat/nat-policy/pool YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Pool struct {
	Name           *string `path:"name" module:"nokia-conf"`
	RouterInstance *string `path:"router-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Pool implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Pool) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Pool) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Pool) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Pool
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Pool) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Pool) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Pool"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Pool) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Pool) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Pool.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Pool) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PortLimits represents the /nokia-conf/configure/groups/group/service/nat/nat-policy/port-limits YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PortLimits struct {
	Forwarding *uint16                                                                       `path:"forwarding" module:"nokia-conf"`
	Reserved   *uint16                                                                       `path:"reserved" module:"nokia-conf"`
	Watermarks *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PortLimits_Watermarks `path:"watermarks" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PortLimits implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PortLimits) IsYANGGoStruct() {}

// GetOrCreateWatermarks retrieves the value of the Watermarks field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PortLimits) GetOrCreateWatermarks() *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PortLimits_Watermarks {
	if t.Watermarks != nil {
		return t.Watermarks
	}
	t.Watermarks = &NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PortLimits_Watermarks{}
	return t.Watermarks
}

// GetWatermarks returns the value of the Watermarks struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PortLimits. If the receiver or the field Watermarks is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PortLimits) GetWatermarks() *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PortLimits_Watermarks {
	if t != nil && t.Watermarks != nil {
		return t.Watermarks
	}
	return nil
}

// GetForwarding retrieves the value of the leaf Forwarding from the NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PortLimits
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Forwarding is set, it can
// safely use t.GetForwarding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Forwarding == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PortLimits) GetForwarding() uint16 {
	if t == nil || t.Forwarding == nil {
		return 0
	}
	return *t.Forwarding
}

// GetReserved retrieves the value of the leaf Reserved from the NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PortLimits
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Reserved is set, it can
// safely use t.GetReserved() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Reserved == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PortLimits) GetReserved() uint16 {
	if t == nil || t.Reserved == nil {
		return 0
	}
	return *t.Reserved
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PortLimits
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PortLimits) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Watermarks.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PortLimits) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PortLimits"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PortLimits) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PortLimits) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PortLimits.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PortLimits) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PortLimits_Watermarks represents the /nokia-conf/configure/groups/group/service/nat/nat-policy/port-limits/watermarks YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PortLimits_Watermarks struct {
	High *uint32 `path:"high" module:"nokia-conf"`
	Low  *uint32 `path:"low" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PortLimits_Watermarks implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PortLimits_Watermarks) IsYANGGoStruct() {
}

// GetHigh retrieves the value of the leaf High from the NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PortLimits_Watermarks
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if High is set, it can
// safely use t.GetHigh() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.High == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PortLimits_Watermarks) GetHigh() uint32 {
	if t == nil || t.High == nil {
		return 0
	}
	return *t.High
}

// GetLow retrieves the value of the leaf Low from the NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PortLimits_Watermarks
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Low is set, it can
// safely use t.GetLow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Low == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PortLimits_Watermarks) GetLow() uint32 {
	if t == nil || t.Low == nil {
		return 0
	}
	return *t.Low
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PortLimits_Watermarks
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PortLimits_Watermarks) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PortLimits_Watermarks) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PortLimits_Watermarks"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PortLimits_Watermarks) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PortLimits_Watermarks) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PortLimits_Watermarks.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PortLimits_Watermarks) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PrioritySessions represents the /nokia-conf/configure/groups/group/service/nat/nat-policy/priority-sessions YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PrioritySessions struct {
	Fc *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PrioritySessions_Fc `path:"fc" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PrioritySessions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PrioritySessions) IsYANGGoStruct() {}

// GetOrCreateFc retrieves the value of the Fc field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PrioritySessions) GetOrCreateFc() *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PrioritySessions_Fc {
	if t.Fc != nil {
		return t.Fc
	}
	t.Fc = &NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PrioritySessions_Fc{}
	return t.Fc
}

// GetFc returns the value of the Fc struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PrioritySessions. If the receiver or the field Fc is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PrioritySessions) GetFc() *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PrioritySessions_Fc {
	if t != nil && t.Fc != nil {
		return t.Fc
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PrioritySessions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PrioritySessions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Fc.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PrioritySessions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PrioritySessions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PrioritySessions) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PrioritySessions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PrioritySessions.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PrioritySessions) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PrioritySessions_Fc represents the /nokia-conf/configure/groups/group/service/nat/nat-policy/priority-sessions/fc YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PrioritySessions_Fc struct {
	Af *bool `path:"af" module:"nokia-conf"`
	Be *bool `path:"be" module:"nokia-conf"`
	Ef *bool `path:"ef" module:"nokia-conf"`
	H1 *bool `path:"h1" module:"nokia-conf"`
	H2 *bool `path:"h2" module:"nokia-conf"`
	L1 *bool `path:"l1" module:"nokia-conf"`
	L2 *bool `path:"l2" module:"nokia-conf"`
	Nc *bool `path:"nc" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PrioritySessions_Fc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PrioritySessions_Fc) IsYANGGoStruct() {}

// GetAf retrieves the value of the leaf Af from the NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PrioritySessions_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Af is set, it can
// safely use t.GetAf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Af == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PrioritySessions_Fc) GetAf() bool {
	if t == nil || t.Af == nil {
		return false
	}
	return *t.Af
}

// GetBe retrieves the value of the leaf Be from the NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PrioritySessions_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Be is set, it can
// safely use t.GetBe() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Be == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PrioritySessions_Fc) GetBe() bool {
	if t == nil || t.Be == nil {
		return false
	}
	return *t.Be
}

// GetEf retrieves the value of the leaf Ef from the NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PrioritySessions_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ef is set, it can
// safely use t.GetEf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ef == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PrioritySessions_Fc) GetEf() bool {
	if t == nil || t.Ef == nil {
		return false
	}
	return *t.Ef
}

// GetH1 retrieves the value of the leaf H1 from the NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PrioritySessions_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if H1 is set, it can
// safely use t.GetH1() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.H1 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PrioritySessions_Fc) GetH1() bool {
	if t == nil || t.H1 == nil {
		return false
	}
	return *t.H1
}

// GetH2 retrieves the value of the leaf H2 from the NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PrioritySessions_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if H2 is set, it can
// safely use t.GetH2() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.H2 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PrioritySessions_Fc) GetH2() bool {
	if t == nil || t.H2 == nil {
		return false
	}
	return *t.H2
}

// GetL1 retrieves the value of the leaf L1 from the NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PrioritySessions_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if L1 is set, it can
// safely use t.GetL1() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.L1 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PrioritySessions_Fc) GetL1() bool {
	if t == nil || t.L1 == nil {
		return false
	}
	return *t.L1
}

// GetL2 retrieves the value of the leaf L2 from the NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PrioritySessions_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if L2 is set, it can
// safely use t.GetL2() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.L2 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PrioritySessions_Fc) GetL2() bool {
	if t == nil || t.L2 == nil {
		return false
	}
	return *t.L2
}

// GetNc retrieves the value of the leaf Nc from the NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PrioritySessions_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Nc is set, it can
// safely use t.GetNc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Nc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PrioritySessions_Fc) GetNc() bool {
	if t == nil || t.Nc == nil {
		return false
	}
	return *t.Nc
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PrioritySessions_Fc
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PrioritySessions_Fc) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Af == nil {
		var v bool = false
		t.Af = &v
	}
	if t.Be == nil {
		var v bool = false
		t.Be = &v
	}
	if t.Ef == nil {
		var v bool = false
		t.Ef = &v
	}
	if t.H1 == nil {
		var v bool = false
		t.H1 = &v
	}
	if t.H2 == nil {
		var v bool = false
		t.H2 = &v
	}
	if t.L1 == nil {
		var v bool = false
		t.L1 = &v
	}
	if t.L2 == nil {
		var v bool = false
		t.L2 = &v
	}
	if t.Nc == nil {
		var v bool = false
		t.Nc = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PrioritySessions_Fc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PrioritySessions_Fc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PrioritySessions_Fc) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PrioritySessions_Fc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PrioritySessions_Fc.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_PrioritySessions_Fc) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_SessionLimits represents the /nokia-conf/configure/groups/group/service/nat/nat-policy/session-limits YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_SessionLimits struct {
	Max        *uint16                                                                          `path:"max" module:"nokia-conf"`
	Reserved   *uint16                                                                          `path:"reserved" module:"nokia-conf"`
	Watermarks *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_SessionLimits_Watermarks `path:"watermarks" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_SessionLimits implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_SessionLimits) IsYANGGoStruct() {}

// GetOrCreateWatermarks retrieves the value of the Watermarks field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_SessionLimits) GetOrCreateWatermarks() *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_SessionLimits_Watermarks {
	if t.Watermarks != nil {
		return t.Watermarks
	}
	t.Watermarks = &NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_SessionLimits_Watermarks{}
	return t.Watermarks
}

// GetWatermarks returns the value of the Watermarks struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_SessionLimits. If the receiver or the field Watermarks is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_SessionLimits) GetWatermarks() *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_SessionLimits_Watermarks {
	if t != nil && t.Watermarks != nil {
		return t.Watermarks
	}
	return nil
}

// GetMax retrieves the value of the leaf Max from the NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_SessionLimits
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_SessionLimits) GetMax() uint16 {
	if t == nil || t.Max == nil {
		return 65535
	}
	return *t.Max
}

// GetReserved retrieves the value of the leaf Reserved from the NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_SessionLimits
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Reserved is set, it can
// safely use t.GetReserved() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Reserved == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_SessionLimits) GetReserved() uint16 {
	if t == nil || t.Reserved == nil {
		return 0
	}
	return *t.Reserved
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_SessionLimits
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_SessionLimits) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Max == nil {
		var v uint16 = 65535
		t.Max = &v
	}
	t.Watermarks.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_SessionLimits) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_SessionLimits"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_SessionLimits) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_SessionLimits) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_SessionLimits.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_SessionLimits) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_SessionLimits_Watermarks represents the /nokia-conf/configure/groups/group/service/nat/nat-policy/session-limits/watermarks YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_SessionLimits_Watermarks struct {
	High *uint32 `path:"high" module:"nokia-conf"`
	Low  *uint32 `path:"low" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_SessionLimits_Watermarks implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_SessionLimits_Watermarks) IsYANGGoStruct() {
}

// GetHigh retrieves the value of the leaf High from the NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_SessionLimits_Watermarks
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if High is set, it can
// safely use t.GetHigh() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.High == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_SessionLimits_Watermarks) GetHigh() uint32 {
	if t == nil || t.High == nil {
		return 0
	}
	return *t.High
}

// GetLow retrieves the value of the leaf Low from the NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_SessionLimits_Watermarks
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Low is set, it can
// safely use t.GetLow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Low == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_SessionLimits_Watermarks) GetLow() uint32 {
	if t == nil || t.Low == nil {
		return 0
	}
	return *t.Low
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_SessionLimits_Watermarks
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_SessionLimits_Watermarks) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_SessionLimits_Watermarks) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_SessionLimits_Watermarks"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_SessionLimits_Watermarks) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_SessionLimits_Watermarks) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_SessionLimits_Watermarks.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_SessionLimits_Watermarks) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Tcp represents the /nokia-conf/configure/groups/group/service/nat/nat-policy/tcp YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Tcp struct {
	MssAdjust    *uint32 `path:"mss-adjust" module:"nokia-conf"`
	ResetUnknown *bool   `path:"reset-unknown" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Tcp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Tcp) IsYANGGoStruct() {}

// GetMssAdjust retrieves the value of the leaf MssAdjust from the NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Tcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MssAdjust is set, it can
// safely use t.GetMssAdjust() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MssAdjust == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Tcp) GetMssAdjust() uint32 {
	if t == nil || t.MssAdjust == nil {
		return 0
	}
	return *t.MssAdjust
}

// GetResetUnknown retrieves the value of the leaf ResetUnknown from the NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Tcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ResetUnknown is set, it can
// safely use t.GetResetUnknown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ResetUnknown == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Tcp) GetResetUnknown() bool {
	if t == nil || t.ResetUnknown == nil {
		return false
	}
	return *t.ResetUnknown
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Tcp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Tcp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ResetUnknown == nil {
		var v bool = false
		t.ResetUnknown = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Tcp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Tcp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Tcp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Tcp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Tcp.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Tcp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts represents the /nokia-conf/configure/groups/group/service/nat/nat-policy/timeouts YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts struct {
	IcmpQuery           *uint32                                                              `path:"icmp-query" module:"nokia-conf"`
	Sip                 *uint32                                                              `path:"sip" module:"nokia-conf"`
	SubscriberRetention *uint32                                                              `path:"subscriber-retention" module:"nokia-conf"`
	Tcp                 *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts_Tcp `path:"tcp" module:"nokia-conf"`
	Udp                 *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts_Udp `path:"udp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts) IsYANGGoStruct() {}

// GetOrCreateTcp retrieves the value of the Tcp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts) GetOrCreateTcp() *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts_Tcp {
	if t.Tcp != nil {
		return t.Tcp
	}
	t.Tcp = &NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts_Tcp{}
	return t.Tcp
}

// GetOrCreateUdp retrieves the value of the Udp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts) GetOrCreateUdp() *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts_Udp {
	if t.Udp != nil {
		return t.Udp
	}
	t.Udp = &NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts_Udp{}
	return t.Udp
}

// GetTcp returns the value of the Tcp struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts. If the receiver or the field Tcp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts) GetTcp() *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts_Tcp {
	if t != nil && t.Tcp != nil {
		return t.Tcp
	}
	return nil
}

// GetUdp returns the value of the Udp struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts. If the receiver or the field Udp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts) GetUdp() *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts_Udp {
	if t != nil && t.Udp != nil {
		return t.Udp
	}
	return nil
}

// GetIcmpQuery retrieves the value of the leaf IcmpQuery from the NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IcmpQuery is set, it can
// safely use t.GetIcmpQuery() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IcmpQuery == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts) GetIcmpQuery() uint32 {
	if t == nil || t.IcmpQuery == nil {
		return 60
	}
	return *t.IcmpQuery
}

// GetSip retrieves the value of the leaf Sip from the NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Sip is set, it can
// safely use t.GetSip() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Sip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts) GetSip() uint32 {
	if t == nil || t.Sip == nil {
		return 120
	}
	return *t.Sip
}

// GetSubscriberRetention retrieves the value of the leaf SubscriberRetention from the NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubscriberRetention is set, it can
// safely use t.GetSubscriberRetention() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubscriberRetention == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts) GetSubscriberRetention() uint32 {
	if t == nil || t.SubscriberRetention == nil {
		return 0
	}
	return *t.SubscriberRetention
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IcmpQuery == nil {
		var v uint32 = 60
		t.IcmpQuery = &v
	}
	if t.Sip == nil {
		var v uint32 = 120
		t.Sip = &v
	}
	if t.SubscriberRetention == nil {
		var v uint32 = 0
		t.SubscriberRetention = &v
	}
	t.Tcp.PopulateDefaults()
	t.Udp.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts_Tcp represents the /nokia-conf/configure/groups/group/service/nat/nat-policy/timeouts/tcp YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts_Tcp struct {
	Established *uint32 `path:"established" module:"nokia-conf"`
	Rst         *uint32 `path:"rst" module:"nokia-conf"`
	Syn         *uint32 `path:"syn" module:"nokia-conf"`
	TimeWait    *uint32 `path:"time-wait" module:"nokia-conf"`
	Transitory  *uint32 `path:"transitory" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts_Tcp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts_Tcp) IsYANGGoStruct() {}

// GetEstablished retrieves the value of the leaf Established from the NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts_Tcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Established is set, it can
// safely use t.GetEstablished() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Established == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts_Tcp) GetEstablished() uint32 {
	if t == nil || t.Established == nil {
		return 7440
	}
	return *t.Established
}

// GetRst retrieves the value of the leaf Rst from the NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts_Tcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rst is set, it can
// safely use t.GetRst() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rst == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts_Tcp) GetRst() uint32 {
	if t == nil || t.Rst == nil {
		return 0
	}
	return *t.Rst
}

// GetSyn retrieves the value of the leaf Syn from the NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts_Tcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Syn is set, it can
// safely use t.GetSyn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Syn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts_Tcp) GetSyn() uint32 {
	if t == nil || t.Syn == nil {
		return 15
	}
	return *t.Syn
}

// GetTimeWait retrieves the value of the leaf TimeWait from the NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts_Tcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TimeWait is set, it can
// safely use t.GetTimeWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TimeWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts_Tcp) GetTimeWait() uint32 {
	if t == nil || t.TimeWait == nil {
		return 0
	}
	return *t.TimeWait
}

// GetTransitory retrieves the value of the leaf Transitory from the NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts_Tcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Transitory is set, it can
// safely use t.GetTransitory() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Transitory == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts_Tcp) GetTransitory() uint32 {
	if t == nil || t.Transitory == nil {
		return 240
	}
	return *t.Transitory
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts_Tcp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts_Tcp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Established == nil {
		var v uint32 = 7440
		t.Established = &v
	}
	if t.Rst == nil {
		var v uint32 = 0
		t.Rst = &v
	}
	if t.Syn == nil {
		var v uint32 = 15
		t.Syn = &v
	}
	if t.TimeWait == nil {
		var v uint32 = 0
		t.TimeWait = &v
	}
	if t.Transitory == nil {
		var v uint32 = 240
		t.Transitory = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts_Tcp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts_Tcp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts_Tcp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts_Tcp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts_Tcp.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts_Tcp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts_Udp represents the /nokia-conf/configure/groups/group/service/nat/nat-policy/timeouts/udp YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts_Udp struct {
	Dns     *uint32 `path:"dns" module:"nokia-conf"`
	Initial *uint32 `path:"initial" module:"nokia-conf"`
	Normal  *uint32 `path:"normal" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts_Udp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts_Udp) IsYANGGoStruct() {}

// GetDns retrieves the value of the leaf Dns from the NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts_Udp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dns is set, it can
// safely use t.GetDns() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dns == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts_Udp) GetDns() uint32 {
	if t == nil || t.Dns == nil {
		return 15
	}
	return *t.Dns
}

// GetInitial retrieves the value of the leaf Initial from the NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts_Udp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Initial is set, it can
// safely use t.GetInitial() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Initial == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts_Udp) GetInitial() uint32 {
	if t == nil || t.Initial == nil {
		return 15
	}
	return *t.Initial
}

// GetNormal retrieves the value of the leaf Normal from the NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts_Udp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Normal is set, it can
// safely use t.GetNormal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Normal == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts_Udp) GetNormal() uint32 {
	if t == nil || t.Normal == nil {
		return 300
	}
	return *t.Normal
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts_Udp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts_Udp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Dns == nil {
		var v uint32 = 15
		t.Dns = &v
	}
	if t.Initial == nil {
		var v uint32 = 15
		t.Initial = &v
	}
	if t.Normal == nil {
		var v uint32 = 300
		t.Normal = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts_Udp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts_Udp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts_Udp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts_Udp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts_Udp.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Timeouts_Udp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Udp represents the /nokia-conf/configure/groups/group/service/nat/nat-policy/udp YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Udp struct {
	InboundRefresh *bool `path:"inbound-refresh" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Udp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Udp) IsYANGGoStruct() {}

// GetInboundRefresh retrieves the value of the leaf InboundRefresh from the NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Udp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InboundRefresh is set, it can
// safely use t.GetInboundRefresh() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InboundRefresh == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Udp) GetInboundRefresh() bool {
	if t == nil || t.InboundRefresh == nil {
		return false
	}
	return *t.InboundRefresh
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Udp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Udp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InboundRefresh == nil {
		var v bool = false
		t.InboundRefresh = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Udp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Udp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Udp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Udp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Udp.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_NatPolicy_Udp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy represents the /nokia-conf/configure/groups/group/service/nat/pcp-server-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy struct {
	Description            *string                                                                `path:"description" module:"nokia-conf"`
	Lifetime               *NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Lifetime `path:"lifetime" module:"nokia-conf"`
	MaxDescriptionSize     *uint32                                                                `path:"max-description-size" module:"nokia-conf"`
	Name                   *string                                                                `path:"name" module:"nokia-conf"`
	Opcode                 *NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Opcode   `path:"opcode" module:"nokia-conf"`
	Option                 *NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Option   `path:"option" module:"nokia-conf"`
	ReuseExternalIpAddress *bool                                                                  `path:"reuse-external-ip-address" module:"nokia-conf"`
	Version                *NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Version  `path:"version" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy) IsYANGGoStruct() {}

// GetOrCreateLifetime retrieves the value of the Lifetime field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy) GetOrCreateLifetime() *NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Lifetime {
	if t.Lifetime != nil {
		return t.Lifetime
	}
	t.Lifetime = &NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Lifetime{}
	return t.Lifetime
}

// GetOrCreateOpcode retrieves the value of the Opcode field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy) GetOrCreateOpcode() *NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Opcode {
	if t.Opcode != nil {
		return t.Opcode
	}
	t.Opcode = &NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Opcode{}
	return t.Opcode
}

// GetOrCreateOption retrieves the value of the Option field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy) GetOrCreateOption() *NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Option {
	if t.Option != nil {
		return t.Option
	}
	t.Option = &NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Option{}
	return t.Option
}

// GetOrCreateVersion retrieves the value of the Version field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy) GetOrCreateVersion() *NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Version {
	if t.Version != nil {
		return t.Version
	}
	t.Version = &NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Version{}
	return t.Version
}

// GetLifetime returns the value of the Lifetime struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy. If the receiver or the field Lifetime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy) GetLifetime() *NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Lifetime {
	if t != nil && t.Lifetime != nil {
		return t.Lifetime
	}
	return nil
}

// GetOpcode returns the value of the Opcode struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy. If the receiver or the field Opcode is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy) GetOpcode() *NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Opcode {
	if t != nil && t.Opcode != nil {
		return t.Opcode
	}
	return nil
}

// GetOption returns the value of the Option struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy. If the receiver or the field Option is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy) GetOption() *NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Option {
	if t != nil && t.Option != nil {
		return t.Option
	}
	return nil
}

// GetVersion returns the value of the Version struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy. If the receiver or the field Version is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy) GetVersion() *NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Version {
	if t != nil && t.Version != nil {
		return t.Version
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetMaxDescriptionSize retrieves the value of the leaf MaxDescriptionSize from the NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxDescriptionSize is set, it can
// safely use t.GetMaxDescriptionSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxDescriptionSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy) GetMaxDescriptionSize() uint32 {
	if t == nil || t.MaxDescriptionSize == nil {
		return 64
	}
	return *t.MaxDescriptionSize
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetReuseExternalIpAddress retrieves the value of the leaf ReuseExternalIpAddress from the NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReuseExternalIpAddress is set, it can
// safely use t.GetReuseExternalIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReuseExternalIpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy) GetReuseExternalIpAddress() bool {
	if t == nil || t.ReuseExternalIpAddress == nil {
		return false
	}
	return *t.ReuseExternalIpAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxDescriptionSize == nil {
		var v uint32 = 64
		t.MaxDescriptionSize = &v
	}
	if t.ReuseExternalIpAddress == nil {
		var v bool = false
		t.ReuseExternalIpAddress = &v
	}
	t.Lifetime.PopulateDefaults()
	t.Opcode.PopulateDefaults()
	t.Option.PopulateDefaults()
	t.Version.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Lifetime represents the /nokia-conf/configure/groups/group/service/nat/pcp-server-policy/lifetime YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Lifetime struct {
	Maximum *uint32 `path:"maximum" module:"nokia-conf"`
	Minimum *uint32 `path:"minimum" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Lifetime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Lifetime) IsYANGGoStruct() {}

// GetMaximum retrieves the value of the leaf Maximum from the NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Lifetime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Maximum is set, it can
// safely use t.GetMaximum() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Maximum == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Lifetime) GetMaximum() uint32 {
	if t == nil || t.Maximum == nil {
		return 86400
	}
	return *t.Maximum
}

// GetMinimum retrieves the value of the leaf Minimum from the NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Lifetime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Minimum is set, it can
// safely use t.GetMinimum() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Minimum == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Lifetime) GetMinimum() uint32 {
	if t == nil || t.Minimum == nil {
		return 120
	}
	return *t.Minimum
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Lifetime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Lifetime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Maximum == nil {
		var v uint32 = 86400
		t.Maximum = &v
	}
	if t.Minimum == nil {
		var v uint32 = 120
		t.Minimum = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Lifetime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Lifetime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Lifetime) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Lifetime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Lifetime.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Lifetime) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Opcode represents the /nokia-conf/configure/groups/group/service/nat/pcp-server-policy/opcode YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Opcode struct {
	Announce *bool `path:"announce" module:"nokia-conf"`
	Get      *bool `path:"get" module:"nokia-conf"`
	Map      *bool `path:"map" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Opcode implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Opcode) IsYANGGoStruct() {}

// GetAnnounce retrieves the value of the leaf Announce from the NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Opcode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Announce is set, it can
// safely use t.GetAnnounce() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Announce == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Opcode) GetAnnounce() bool {
	if t == nil || t.Announce == nil {
		return false
	}
	return *t.Announce
}

// GetGet retrieves the value of the leaf Get from the NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Opcode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Get is set, it can
// safely use t.GetGet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Get == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Opcode) GetGet() bool {
	if t == nil || t.Get == nil {
		return false
	}
	return *t.Get
}

// GetMap retrieves the value of the leaf Map from the NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Opcode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Map is set, it can
// safely use t.GetMap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Map == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Opcode) GetMap() bool {
	if t == nil || t.Map == nil {
		return false
	}
	return *t.Map
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Opcode
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Opcode) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Announce == nil {
		var v bool = false
		t.Announce = &v
	}
	if t.Get == nil {
		var v bool = false
		t.Get = &v
	}
	if t.Map == nil {
		var v bool = false
		t.Map = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Opcode) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Opcode"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Opcode) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Opcode) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Opcode.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Opcode) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Option represents the /nokia-conf/configure/groups/group/service/nat/pcp-server-policy/option YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Option struct {
	Description     *bool `path:"description" module:"nokia-conf"`
	Next            *bool `path:"next" module:"nokia-conf"`
	PortReservation *bool `path:"port-reservation" module:"nokia-conf"`
	PortSet         *bool `path:"port-set" module:"nokia-conf"`
	PreferFailure   *bool `path:"prefer-failure" module:"nokia-conf"`
	ThirdParty      *bool `path:"third-party" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Option implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Option) IsYANGGoStruct() {}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Option) GetDescription() bool {
	if t == nil || t.Description == nil {
		return false
	}
	return *t.Description
}

// GetNext retrieves the value of the leaf Next from the NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Next is set, it can
// safely use t.GetNext() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Next == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Option) GetNext() bool {
	if t == nil || t.Next == nil {
		return false
	}
	return *t.Next
}

// GetPortReservation retrieves the value of the leaf PortReservation from the NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortReservation is set, it can
// safely use t.GetPortReservation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortReservation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Option) GetPortReservation() bool {
	if t == nil || t.PortReservation == nil {
		return false
	}
	return *t.PortReservation
}

// GetPortSet retrieves the value of the leaf PortSet from the NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortSet is set, it can
// safely use t.GetPortSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortSet == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Option) GetPortSet() bool {
	if t == nil || t.PortSet == nil {
		return false
	}
	return *t.PortSet
}

// GetPreferFailure retrieves the value of the leaf PreferFailure from the NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreferFailure is set, it can
// safely use t.GetPreferFailure() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreferFailure == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Option) GetPreferFailure() bool {
	if t == nil || t.PreferFailure == nil {
		return false
	}
	return *t.PreferFailure
}

// GetThirdParty retrieves the value of the leaf ThirdParty from the NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ThirdParty is set, it can
// safely use t.GetThirdParty() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ThirdParty == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Option) GetThirdParty() bool {
	if t == nil || t.ThirdParty == nil {
		return false
	}
	return *t.ThirdParty
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Option
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Option) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Description == nil {
		var v bool = false
		t.Description = &v
	}
	if t.Next == nil {
		var v bool = false
		t.Next = &v
	}
	if t.PortReservation == nil {
		var v bool = false
		t.PortReservation = &v
	}
	if t.PortSet == nil {
		var v bool = false
		t.PortSet = &v
	}
	if t.PreferFailure == nil {
		var v bool = false
		t.PreferFailure = &v
	}
	if t.ThirdParty == nil {
		var v bool = false
		t.ThirdParty = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Option) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Option"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Option) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Option) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Option.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Option) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Version represents the /nokia-conf/configure/groups/group/service/nat/pcp-server-policy/version YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Version struct {
	Maximum *uint16 `path:"maximum" module:"nokia-conf"`
	Minimum *uint16 `path:"minimum" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Version implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Version) IsYANGGoStruct() {}

// GetMaximum retrieves the value of the leaf Maximum from the NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Version
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Maximum is set, it can
// safely use t.GetMaximum() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Maximum == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Version) GetMaximum() uint16 {
	if t == nil || t.Maximum == nil {
		return 1
	}
	return *t.Maximum
}

// GetMinimum retrieves the value of the leaf Minimum from the NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Version
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Minimum is set, it can
// safely use t.GetMinimum() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Minimum == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Version) GetMinimum() uint16 {
	if t == nil || t.Minimum == nil {
		return 1
	}
	return *t.Minimum
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Version
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Version) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Maximum == nil {
		var v uint16 = 1
		t.Maximum = &v
	}
	if t.Minimum == nil {
		var v uint16 = 1
		t.Minimum = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Version) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Version"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Version) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Version) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Version.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_PcpServerPolicy_Version) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Nat_PrefixList represents the /nokia-conf/configure/groups/group/service/nat/prefix-list YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Nat_PrefixList struct {
	Application E_NokiaTypesNat_PrefixListApplication                                      `path:"application" module:"nokia-conf"`
	Name        *string                                                                    `path:"name" module:"nokia-conf"`
	Prefix      map[string]*NokiaConf_Configure_Groups_Group_Service_Nat_PrefixList_Prefix `path:"prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Nat_PrefixList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_PrefixList) IsYANGGoStruct() {}

// NewPrefix creates a new entry in the Prefix list of the
// NokiaConf_Configure_Groups_Group_Service_Nat_PrefixList struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_PrefixList) NewPrefix(IpPrefix string) (*NokiaConf_Configure_Groups_Group_Service_Nat_PrefixList_Prefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Nat_PrefixList_Prefix)
	}

	key := IpPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Prefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Prefix", key)
	}

	t.Prefix[key] = &NokiaConf_Configure_Groups_Group_Service_Nat_PrefixList_Prefix{
		IpPrefix: &IpPrefix,
	}

	return t.Prefix[key], nil
}

// RenamePrefix renames an entry in the list Prefix within
// the NokiaConf_Configure_Groups_Group_Service_Nat_PrefixList struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_PrefixList) RenamePrefix(oldK, newK string) error {
	if _, ok := t.Prefix[newK]; ok {
		return fmt.Errorf("key %v already exists in Prefix", newK)
	}

	e, ok := t.Prefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Prefix", oldK)
	}
	e.IpPrefix = &newK

	t.Prefix[newK] = e
	delete(t.Prefix, oldK)
	return nil
}

// GetOrCreatePrefix retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Nat_PrefixList. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_PrefixList) GetOrCreatePrefix(IpPrefix string) *NokiaConf_Configure_Groups_Group_Service_Nat_PrefixList_Prefix {

	key := IpPrefix

	if v, ok := t.Prefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefix(IpPrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefix got unexpected error: %v", err))
	}
	return v
}

// GetPrefix retrieves the value with the specified key from
// the Prefix map field of NokiaConf_Configure_Groups_Group_Service_Nat_PrefixList. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_PrefixList) GetPrefix(IpPrefix string) *NokiaConf_Configure_Groups_Group_Service_Nat_PrefixList_Prefix {

	if t == nil {
		return nil
	}

	key := IpPrefix

	if lm, ok := t.Prefix[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefix deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Nat_PrefixList. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_PrefixList) DeletePrefix(IpPrefix string) {
	key := IpPrefix

	delete(t.Prefix, key)
}

// AppendPrefix appends the supplied NokiaConf_Configure_Groups_Group_Service_Nat_PrefixList_Prefix struct to the
// list Prefix of NokiaConf_Configure_Groups_Group_Service_Nat_PrefixList. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Nat_PrefixList_Prefix already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_PrefixList) AppendPrefix(v *NokiaConf_Configure_Groups_Group_Service_Nat_PrefixList_Prefix) error {
	if v.IpPrefix == nil {
		return fmt.Errorf("invalid nil key received for IpPrefix")
	}

	key := *v.IpPrefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Nat_PrefixList_Prefix)
	}

	if _, ok := t.Prefix[key]; ok {
		return fmt.Errorf("duplicate key for list Prefix %v", key)
	}

	t.Prefix[key] = v
	return nil
}

// GetApplication retrieves the value of the leaf Application from the NokiaConf_Configure_Groups_Group_Service_Nat_PrefixList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Application is set, it can
// safely use t.GetApplication() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Application == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_PrefixList) GetApplication() E_NokiaTypesNat_PrefixListApplication {
	if t == nil || t.Application == 0 {
		return NokiaTypesNat_PrefixListApplication_l2_aware_dest_to_policy
	}
	return t.Application
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Service_Nat_PrefixList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_PrefixList) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Nat_PrefixList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_PrefixList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Application == 0 {
		t.Application = NokiaTypesNat_PrefixListApplication_l2_aware_dest_to_policy
	}
	for _, e := range t.Prefix {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Nat_PrefixList struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_PrefixList) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_PrefixList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Nat_PrefixList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_PrefixList) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_PrefixList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Nat_PrefixList.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_PrefixList) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Nat_PrefixList_Prefix represents the /nokia-conf/configure/groups/group/service/nat/prefix-list/prefix YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Nat_PrefixList_Prefix struct {
	IpPrefix  *string `path:"ip-prefix" module:"nokia-conf"`
	NatPolicy *string `path:"nat-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Nat_PrefixList_Prefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_PrefixList_Prefix) IsYANGGoStruct() {}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_Groups_Group_Service_Nat_PrefixList_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_PrefixList_Prefix) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// GetNatPolicy retrieves the value of the leaf NatPolicy from the NokiaConf_Configure_Groups_Group_Service_Nat_PrefixList_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NatPolicy is set, it can
// safely use t.GetNatPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NatPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_PrefixList_Prefix) GetNatPolicy() string {
	if t == nil || t.NatPolicy == nil {
		return ""
	}
	return *t.NatPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Nat_PrefixList_Prefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_PrefixList_Prefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Nat_PrefixList_Prefix struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_PrefixList_Prefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	return map[string]interface{}{
		"ip-prefix": *t.IpPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_PrefixList_Prefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Nat_PrefixList_Prefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_PrefixList_Prefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_PrefixList_Prefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Nat_PrefixList_Prefix.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_PrefixList_Prefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Nat_Syslog represents the /nokia-conf/configure/groups/group/service/nat/syslog YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Nat_Syslog struct {
	ExportPolicy map[string]*NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy `path:"export-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Nat_Syslog implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_Syslog) IsYANGGoStruct() {}

// NewExportPolicy creates a new entry in the ExportPolicy list of the
// NokiaConf_Configure_Groups_Group_Service_Nat_Syslog struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Syslog) NewExportPolicy(Name string) (*NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ExportPolicy == nil {
		t.ExportPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ExportPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ExportPolicy", key)
	}

	t.ExportPolicy[key] = &NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy{
		Name: &Name,
	}

	return t.ExportPolicy[key], nil
}

// RenameExportPolicy renames an entry in the list ExportPolicy within
// the NokiaConf_Configure_Groups_Group_Service_Nat_Syslog struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Syslog) RenameExportPolicy(oldK, newK string) error {
	if _, ok := t.ExportPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in ExportPolicy", newK)
	}

	e, ok := t.ExportPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ExportPolicy", oldK)
	}
	e.Name = &newK

	t.ExportPolicy[newK] = e
	delete(t.ExportPolicy, oldK)
	return nil
}

// GetOrCreateExportPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Nat_Syslog. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Syslog) GetOrCreateExportPolicy(Name string) *NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy {

	key := Name

	if v, ok := t.ExportPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewExportPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateExportPolicy got unexpected error: %v", err))
	}
	return v
}

// GetExportPolicy retrieves the value with the specified key from
// the ExportPolicy map field of NokiaConf_Configure_Groups_Group_Service_Nat_Syslog. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Syslog) GetExportPolicy(Name string) *NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.ExportPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteExportPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Nat_Syslog. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Syslog) DeleteExportPolicy(Name string) {
	key := Name

	delete(t.ExportPolicy, key)
}

// AppendExportPolicy appends the supplied NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy struct to the
// list ExportPolicy of NokiaConf_Configure_Groups_Group_Service_Nat_Syslog. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Syslog) AppendExportPolicy(v *NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ExportPolicy == nil {
		t.ExportPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy)
	}

	if _, ok := t.ExportPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list ExportPolicy %v", key)
	}

	t.ExportPolicy[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Nat_Syslog
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Syslog) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.ExportPolicy {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Syslog) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Nat_Syslog"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Syslog) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Syslog) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Nat_Syslog.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_Syslog) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy represents the /nokia-conf/configure/groups/group/service/nat/syslog/export-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy struct {
	Collector     map[NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy_Collector_Key]*NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy_Collector `path:"collector" module:"nokia-conf"`
	Description   *string                                                                                                                                                        `path:"description" module:"nokia-conf"`
	Facility      E_NokiaTypesNat_SyslogFacility                                                                                                                                 `path:"facility" module:"nokia-conf"`
	Include       *NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy_Include                                                                                      `path:"include" module:"nokia-conf"`
	LogPrefix     *string                                                                                                                                                        `path:"log-prefix" module:"nokia-conf"`
	MaxTxDelay    *uint32                                                                                                                                                        `path:"max-tx-delay" module:"nokia-conf"`
	Mtu           *uint32                                                                                                                                                        `path:"mtu" module:"nokia-conf"`
	Name          *string                                                                                                                                                        `path:"name" module:"nokia-conf"`
	RateLimit     *uint32                                                                                                                                                        `path:"rate-limit" module:"nokia-conf"`
	SeverityLevel E_NokiaTypesNat_SyslogSeverityLevel                                                                                                                            `path:"severity-level" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy) IsYANGGoStruct() {}

// NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy_Collector_Key represents the key for list Collector of element /nokia-conf/configure/groups/group/service/nat/syslog/export-policy.
type NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy_Collector_Key struct {
	RouterInstance string `path:"router-instance"`
	IpAddress      string `path:"ip-address"`
}

// NewCollector creates a new entry in the Collector list of the
// NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy) NewCollector(RouterInstance string, IpAddress string) (*NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy_Collector, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Collector == nil {
		t.Collector = make(map[NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy_Collector_Key]*NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy_Collector)
	}

	key := NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy_Collector_Key{
		RouterInstance: RouterInstance,
		IpAddress:      IpAddress,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Collector[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Collector", key)
	}

	t.Collector[key] = &NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy_Collector{
		RouterInstance: &RouterInstance,
		IpAddress:      &IpAddress,
	}

	return t.Collector[key], nil
}

// RenameCollector renames an entry in the list Collector within
// the NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy) RenameCollector(oldK, newK NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy_Collector_Key) error {
	if _, ok := t.Collector[newK]; ok {
		return fmt.Errorf("key %v already exists in Collector", newK)
	}

	e, ok := t.Collector[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Collector", oldK)
	}
	e.RouterInstance = &newK.RouterInstance
	e.IpAddress = &newK.IpAddress

	t.Collector[newK] = e
	delete(t.Collector, oldK)
	return nil
}

// GetOrCreateCollector retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy) GetOrCreateCollector(RouterInstance string, IpAddress string) *NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy_Collector {

	key := NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy_Collector_Key{
		RouterInstance: RouterInstance,
		IpAddress:      IpAddress,
	}

	if v, ok := t.Collector[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCollector(RouterInstance, IpAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCollector got unexpected error: %v", err))
	}
	return v
}

// GetCollector retrieves the value with the specified key from
// the Collector map field of NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy) GetCollector(RouterInstance string, IpAddress string) *NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy_Collector {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy_Collector_Key{
		RouterInstance: RouterInstance,
		IpAddress:      IpAddress,
	}

	if lm, ok := t.Collector[key]; ok {
		return lm
	}
	return nil
}

// DeleteCollector deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy) DeleteCollector(RouterInstance string, IpAddress string) {
	key := NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy_Collector_Key{
		RouterInstance: RouterInstance,
		IpAddress:      IpAddress,
	}

	delete(t.Collector, key)
}

// AppendCollector appends the supplied NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy_Collector struct to the
// list Collector of NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy_Collector already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy) AppendCollector(v *NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy_Collector) error {
	if v.RouterInstance == nil {
		return fmt.Errorf("invalid nil key for RouterInstance")
	}

	if v.IpAddress == nil {
		return fmt.Errorf("invalid nil key for IpAddress")
	}

	key := NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy_Collector_Key{
		RouterInstance: *v.RouterInstance,
		IpAddress:      *v.IpAddress,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Collector == nil {
		t.Collector = make(map[NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy_Collector_Key]*NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy_Collector)
	}

	if _, ok := t.Collector[key]; ok {
		return fmt.Errorf("duplicate key for list Collector %v", key)
	}

	t.Collector[key] = v
	return nil
}

// GetOrCreateInclude retrieves the value of the Include field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy) GetOrCreateInclude() *NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy_Include {
	if t.Include != nil {
		return t.Include
	}
	t.Include = &NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy_Include{}
	return t.Include
}

// GetInclude returns the value of the Include struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy. If the receiver or the field Include is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy) GetInclude() *NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy_Include {
	if t != nil && t.Include != nil {
		return t.Include
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetFacility retrieves the value of the leaf Facility from the NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Facility is set, it can
// safely use t.GetFacility() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Facility == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy) GetFacility() E_NokiaTypesNat_SyslogFacility {
	if t == nil || t.Facility == 0 {
		return NokiaTypesNat_SyslogFacility_local0
	}
	return t.Facility
}

// GetLogPrefix retrieves the value of the leaf LogPrefix from the NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogPrefix is set, it can
// safely use t.GetLogPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy) GetLogPrefix() string {
	if t == nil || t.LogPrefix == nil {
		return "TMNX"
	}
	return *t.LogPrefix
}

// GetMaxTxDelay retrieves the value of the leaf MaxTxDelay from the NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTxDelay is set, it can
// safely use t.GetMaxTxDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTxDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy) GetMaxTxDelay() uint32 {
	if t == nil || t.MaxTxDelay == nil {
		return 3
	}
	return *t.MaxTxDelay
}

// GetMtu retrieves the value of the leaf Mtu from the NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mtu is set, it can
// safely use t.GetMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy) GetMtu() uint32 {
	if t == nil || t.Mtu == nil {
		return 1500
	}
	return *t.Mtu
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetRateLimit retrieves the value of the leaf RateLimit from the NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RateLimit is set, it can
// safely use t.GetRateLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RateLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy) GetRateLimit() uint32 {
	if t == nil || t.RateLimit == nil {
		return 0
	}
	return *t.RateLimit
}

// GetSeverityLevel retrieves the value of the leaf SeverityLevel from the NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SeverityLevel is set, it can
// safely use t.GetSeverityLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SeverityLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy) GetSeverityLevel() E_NokiaTypesNat_SyslogSeverityLevel {
	if t == nil || t.SeverityLevel == 0 {
		return NokiaTypesNat_SyslogSeverityLevel_info
	}
	return t.SeverityLevel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Facility == 0 {
		t.Facility = NokiaTypesNat_SyslogFacility_local0
	}
	if t.LogPrefix == nil {
		var v string = "TMNX"
		t.LogPrefix = &v
	}
	if t.MaxTxDelay == nil {
		var v uint32 = 3
		t.MaxTxDelay = &v
	}
	if t.Mtu == nil {
		var v uint32 = 1500
		t.Mtu = &v
	}
	if t.SeverityLevel == 0 {
		t.SeverityLevel = NokiaTypesNat_SyslogSeverityLevel_info
	}
	t.Include.PopulateDefaults()
	for _, e := range t.Collector {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy_Collector represents the /nokia-conf/configure/groups/group/service/nat/syslog/export-policy/collector YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy_Collector struct {
	AdminState        E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	DestinationPort   *int32                      `path:"destination-port" module:"nokia-conf"`
	IpAddress         *string                     `path:"ip-address" module:"nokia-conf"`
	Ipv4SourceAddress *string                     `path:"ipv4-source-address" module:"nokia-conf"`
	RouterInstance    *string                     `path:"router-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy_Collector implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy_Collector) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy_Collector) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDestinationPort retrieves the value of the leaf DestinationPort from the NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationPort is set, it can
// safely use t.GetDestinationPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy_Collector) GetDestinationPort() int32 {
	if t == nil || t.DestinationPort == nil {
		return 514
	}
	return *t.DestinationPort
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy_Collector) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetIpv4SourceAddress retrieves the value of the leaf Ipv4SourceAddress from the NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4SourceAddress is set, it can
// safely use t.GetIpv4SourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy_Collector) GetIpv4SourceAddress() string {
	if t == nil || t.Ipv4SourceAddress == nil {
		return ""
	}
	return *t.Ipv4SourceAddress
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy_Collector) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy_Collector
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy_Collector) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.DestinationPort == nil {
		var v int32 = 514
		t.DestinationPort = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy_Collector struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy_Collector) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpAddress == nil {
		return nil, fmt.Errorf("nil value for key IpAddress")
	}

	if t.RouterInstance == nil {
		return nil, fmt.Errorf("nil value for key RouterInstance")
	}

	return map[string]interface{}{
		"ip-address":      *t.IpAddress,
		"router-instance": *t.RouterInstance,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy_Collector) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy_Collector"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy_Collector) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy_Collector) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy_Collector.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy_Collector) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy_Include represents the /nokia-conf/configure/groups/group/service/nat/syslog/export-policy/include YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy_Include struct {
	DestinationIp *bool `path:"destination-ip" module:"nokia-conf"`
	ForeignIp     *bool `path:"foreign-ip" module:"nokia-conf"`
	ForeignPort   *bool `path:"foreign-port" module:"nokia-conf"`
	NatPolicyName *bool `path:"nat-policy-name" module:"nokia-conf"`
	SubId         *bool `path:"sub-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy_Include implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy_Include) IsYANGGoStruct() {}

// GetDestinationIp retrieves the value of the leaf DestinationIp from the NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy_Include
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationIp is set, it can
// safely use t.GetDestinationIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy_Include) GetDestinationIp() bool {
	if t == nil || t.DestinationIp == nil {
		return false
	}
	return *t.DestinationIp
}

// GetForeignIp retrieves the value of the leaf ForeignIp from the NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy_Include
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForeignIp is set, it can
// safely use t.GetForeignIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForeignIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy_Include) GetForeignIp() bool {
	if t == nil || t.ForeignIp == nil {
		return false
	}
	return *t.ForeignIp
}

// GetForeignPort retrieves the value of the leaf ForeignPort from the NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy_Include
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForeignPort is set, it can
// safely use t.GetForeignPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForeignPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy_Include) GetForeignPort() bool {
	if t == nil || t.ForeignPort == nil {
		return false
	}
	return *t.ForeignPort
}

// GetNatPolicyName retrieves the value of the leaf NatPolicyName from the NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy_Include
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NatPolicyName is set, it can
// safely use t.GetNatPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NatPolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy_Include) GetNatPolicyName() bool {
	if t == nil || t.NatPolicyName == nil {
		return false
	}
	return *t.NatPolicyName
}

// GetSubId retrieves the value of the leaf SubId from the NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy_Include
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubId is set, it can
// safely use t.GetSubId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy_Include) GetSubId() bool {
	if t == nil || t.SubId == nil {
		return false
	}
	return *t.SubId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy_Include
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy_Include) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DestinationIp == nil {
		var v bool = false
		t.DestinationIp = &v
	}
	if t.ForeignIp == nil {
		var v bool = false
		t.ForeignIp = &v
	}
	if t.ForeignPort == nil {
		var v bool = false
		t.ForeignPort = &v
	}
	if t.NatPolicyName == nil {
		var v bool = false
		t.NatPolicyName = &v
	}
	if t.SubId == nil {
		var v bool = false
		t.SubId = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy_Include) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy_Include"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy_Include) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy_Include) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy_Include.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_Syslog_ExportPolicy_Include) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy represents the /nokia-conf/configure/groups/group/service/nat/up-nat-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy struct {
	Alg              *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Alg              `path:"alg" module:"nokia-conf"`
	Description      *string                                                                    `path:"description" module:"nokia-conf"`
	Filtering        E_NokiaTypesNat_Filtering                                                  `path:"filtering" module:"nokia-conf"`
	FlowLogPolicy    *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_FlowLogPolicy    `path:"flow-log-policy" module:"nokia-conf"`
	IcmpEchoReply    *bool                                                                      `path:"icmp-echo-reply" module:"nokia-conf"`
	Name             *string                                                                    `path:"name" module:"nokia-conf"`
	PortLimits       *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PortLimits       `path:"port-limits" module:"nokia-conf"`
	PrioritySessions *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PrioritySessions `path:"priority-sessions" module:"nokia-conf"`
	SessionLimits    *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_SessionLimits    `path:"session-limits" module:"nokia-conf"`
	Tcp              *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Tcp              `path:"tcp" module:"nokia-conf"`
	Timeouts         *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts         `path:"timeouts" module:"nokia-conf"`
	Udp              *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Udp              `path:"udp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy) IsYANGGoStruct() {}

// GetOrCreateAlg retrieves the value of the Alg field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy) GetOrCreateAlg() *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Alg {
	if t.Alg != nil {
		return t.Alg
	}
	t.Alg = &NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Alg{}
	return t.Alg
}

// GetOrCreateFlowLogPolicy retrieves the value of the FlowLogPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy) GetOrCreateFlowLogPolicy() *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_FlowLogPolicy {
	if t.FlowLogPolicy != nil {
		return t.FlowLogPolicy
	}
	t.FlowLogPolicy = &NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_FlowLogPolicy{}
	return t.FlowLogPolicy
}

// GetOrCreatePortLimits retrieves the value of the PortLimits field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy) GetOrCreatePortLimits() *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PortLimits {
	if t.PortLimits != nil {
		return t.PortLimits
	}
	t.PortLimits = &NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PortLimits{}
	return t.PortLimits
}

// GetOrCreatePrioritySessions retrieves the value of the PrioritySessions field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy) GetOrCreatePrioritySessions() *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PrioritySessions {
	if t.PrioritySessions != nil {
		return t.PrioritySessions
	}
	t.PrioritySessions = &NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PrioritySessions{}
	return t.PrioritySessions
}

// GetOrCreateSessionLimits retrieves the value of the SessionLimits field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy) GetOrCreateSessionLimits() *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_SessionLimits {
	if t.SessionLimits != nil {
		return t.SessionLimits
	}
	t.SessionLimits = &NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_SessionLimits{}
	return t.SessionLimits
}

// GetOrCreateTcp retrieves the value of the Tcp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy) GetOrCreateTcp() *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Tcp {
	if t.Tcp != nil {
		return t.Tcp
	}
	t.Tcp = &NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Tcp{}
	return t.Tcp
}

// GetOrCreateTimeouts retrieves the value of the Timeouts field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy) GetOrCreateTimeouts() *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts {
	if t.Timeouts != nil {
		return t.Timeouts
	}
	t.Timeouts = &NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts{}
	return t.Timeouts
}

// GetOrCreateUdp retrieves the value of the Udp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy) GetOrCreateUdp() *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Udp {
	if t.Udp != nil {
		return t.Udp
	}
	t.Udp = &NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Udp{}
	return t.Udp
}

// GetAlg returns the value of the Alg struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy. If the receiver or the field Alg is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy) GetAlg() *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Alg {
	if t != nil && t.Alg != nil {
		return t.Alg
	}
	return nil
}

// GetFlowLogPolicy returns the value of the FlowLogPolicy struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy. If the receiver or the field FlowLogPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy) GetFlowLogPolicy() *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_FlowLogPolicy {
	if t != nil && t.FlowLogPolicy != nil {
		return t.FlowLogPolicy
	}
	return nil
}

// GetPortLimits returns the value of the PortLimits struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy. If the receiver or the field PortLimits is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy) GetPortLimits() *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PortLimits {
	if t != nil && t.PortLimits != nil {
		return t.PortLimits
	}
	return nil
}

// GetPrioritySessions returns the value of the PrioritySessions struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy. If the receiver or the field PrioritySessions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy) GetPrioritySessions() *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PrioritySessions {
	if t != nil && t.PrioritySessions != nil {
		return t.PrioritySessions
	}
	return nil
}

// GetSessionLimits returns the value of the SessionLimits struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy. If the receiver or the field SessionLimits is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy) GetSessionLimits() *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_SessionLimits {
	if t != nil && t.SessionLimits != nil {
		return t.SessionLimits
	}
	return nil
}

// GetTcp returns the value of the Tcp struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy. If the receiver or the field Tcp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy) GetTcp() *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Tcp {
	if t != nil && t.Tcp != nil {
		return t.Tcp
	}
	return nil
}

// GetTimeouts returns the value of the Timeouts struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy. If the receiver or the field Timeouts is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy) GetTimeouts() *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts {
	if t != nil && t.Timeouts != nil {
		return t.Timeouts
	}
	return nil
}

// GetUdp returns the value of the Udp struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy. If the receiver or the field Udp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy) GetUdp() *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Udp {
	if t != nil && t.Udp != nil {
		return t.Udp
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetFiltering retrieves the value of the leaf Filtering from the NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Filtering is set, it can
// safely use t.GetFiltering() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Filtering == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy) GetFiltering() E_NokiaTypesNat_Filtering {
	if t == nil || t.Filtering == 0 {
		return NokiaTypesNat_Filtering_endpoint_independent
	}
	return t.Filtering
}

// GetIcmpEchoReply retrieves the value of the leaf IcmpEchoReply from the NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IcmpEchoReply is set, it can
// safely use t.GetIcmpEchoReply() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IcmpEchoReply == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy) GetIcmpEchoReply() bool {
	if t == nil || t.IcmpEchoReply == nil {
		return false
	}
	return *t.IcmpEchoReply
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Filtering == 0 {
		t.Filtering = NokiaTypesNat_Filtering_endpoint_independent
	}
	if t.IcmpEchoReply == nil {
		var v bool = false
		t.IcmpEchoReply = &v
	}
	t.Alg.PopulateDefaults()
	t.FlowLogPolicy.PopulateDefaults()
	t.PortLimits.PopulateDefaults()
	t.PrioritySessions.PopulateDefaults()
	t.SessionLimits.PopulateDefaults()
	t.Tcp.PopulateDefaults()
	t.Timeouts.PopulateDefaults()
	t.Udp.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Alg represents the /nokia-conf/configure/groups/group/service/nat/up-nat-policy/alg YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Alg struct {
	Ftp  *bool `path:"ftp" module:"nokia-conf"`
	Pptp *bool `path:"pptp" module:"nokia-conf"`
	Rtsp *bool `path:"rtsp" module:"nokia-conf"`
	Sip  *bool `path:"sip" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Alg implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Alg) IsYANGGoStruct() {}

// GetFtp retrieves the value of the leaf Ftp from the NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Alg
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ftp is set, it can
// safely use t.GetFtp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ftp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Alg) GetFtp() bool {
	if t == nil || t.Ftp == nil {
		return true
	}
	return *t.Ftp
}

// GetPptp retrieves the value of the leaf Pptp from the NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Alg
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pptp is set, it can
// safely use t.GetPptp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pptp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Alg) GetPptp() bool {
	if t == nil || t.Pptp == nil {
		return false
	}
	return *t.Pptp
}

// GetRtsp retrieves the value of the leaf Rtsp from the NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Alg
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rtsp is set, it can
// safely use t.GetRtsp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rtsp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Alg) GetRtsp() bool {
	if t == nil || t.Rtsp == nil {
		return false
	}
	return *t.Rtsp
}

// GetSip retrieves the value of the leaf Sip from the NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Alg
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Sip is set, it can
// safely use t.GetSip() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Sip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Alg) GetSip() bool {
	if t == nil || t.Sip == nil {
		return false
	}
	return *t.Sip
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Alg
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Alg) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ftp == nil {
		var v bool = true
		t.Ftp = &v
	}
	if t.Pptp == nil {
		var v bool = false
		t.Pptp = &v
	}
	if t.Rtsp == nil {
		var v bool = false
		t.Rtsp = &v
	}
	if t.Sip == nil {
		var v bool = false
		t.Sip = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Alg) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Alg"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Alg) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Alg) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Alg.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Alg) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_FlowLogPolicy represents the /nokia-conf/configure/groups/group/service/nat/up-nat-policy/flow-log-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_FlowLogPolicy struct {
	Ipfix *string `path:"ipfix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_FlowLogPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_FlowLogPolicy) IsYANGGoStruct() {}

// GetIpfix retrieves the value of the leaf Ipfix from the NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_FlowLogPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipfix is set, it can
// safely use t.GetIpfix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipfix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_FlowLogPolicy) GetIpfix() string {
	if t == nil || t.Ipfix == nil {
		return ""
	}
	return *t.Ipfix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_FlowLogPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_FlowLogPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_FlowLogPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_FlowLogPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_FlowLogPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_FlowLogPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_FlowLogPolicy.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_FlowLogPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PortLimits represents the /nokia-conf/configure/groups/group/service/nat/up-nat-policy/port-limits YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PortLimits struct {
	Reserved   *uint16                                                                         `path:"reserved" module:"nokia-conf"`
	Watermarks *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PortLimits_Watermarks `path:"watermarks" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PortLimits implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PortLimits) IsYANGGoStruct() {}

// GetOrCreateWatermarks retrieves the value of the Watermarks field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PortLimits) GetOrCreateWatermarks() *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PortLimits_Watermarks {
	if t.Watermarks != nil {
		return t.Watermarks
	}
	t.Watermarks = &NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PortLimits_Watermarks{}
	return t.Watermarks
}

// GetWatermarks returns the value of the Watermarks struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PortLimits. If the receiver or the field Watermarks is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PortLimits) GetWatermarks() *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PortLimits_Watermarks {
	if t != nil && t.Watermarks != nil {
		return t.Watermarks
	}
	return nil
}

// GetReserved retrieves the value of the leaf Reserved from the NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PortLimits
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Reserved is set, it can
// safely use t.GetReserved() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Reserved == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PortLimits) GetReserved() uint16 {
	if t == nil || t.Reserved == nil {
		return 0
	}
	return *t.Reserved
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PortLimits
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PortLimits) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Watermarks.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PortLimits) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PortLimits"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PortLimits) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PortLimits) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PortLimits.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PortLimits) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PortLimits_Watermarks represents the /nokia-conf/configure/groups/group/service/nat/up-nat-policy/port-limits/watermarks YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PortLimits_Watermarks struct {
	High *uint32 `path:"high" module:"nokia-conf"`
	Low  *uint32 `path:"low" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PortLimits_Watermarks implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PortLimits_Watermarks) IsYANGGoStruct() {
}

// GetHigh retrieves the value of the leaf High from the NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PortLimits_Watermarks
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if High is set, it can
// safely use t.GetHigh() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.High == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PortLimits_Watermarks) GetHigh() uint32 {
	if t == nil || t.High == nil {
		return 0
	}
	return *t.High
}

// GetLow retrieves the value of the leaf Low from the NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PortLimits_Watermarks
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Low is set, it can
// safely use t.GetLow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Low == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PortLimits_Watermarks) GetLow() uint32 {
	if t == nil || t.Low == nil {
		return 0
	}
	return *t.Low
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PortLimits_Watermarks
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PortLimits_Watermarks) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PortLimits_Watermarks) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PortLimits_Watermarks"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PortLimits_Watermarks) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PortLimits_Watermarks) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PortLimits_Watermarks.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PortLimits_Watermarks) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PrioritySessions represents the /nokia-conf/configure/groups/group/service/nat/up-nat-policy/priority-sessions YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PrioritySessions struct {
	Fc *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PrioritySessions_Fc `path:"fc" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PrioritySessions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PrioritySessions) IsYANGGoStruct() {}

// GetOrCreateFc retrieves the value of the Fc field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PrioritySessions) GetOrCreateFc() *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PrioritySessions_Fc {
	if t.Fc != nil {
		return t.Fc
	}
	t.Fc = &NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PrioritySessions_Fc{}
	return t.Fc
}

// GetFc returns the value of the Fc struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PrioritySessions. If the receiver or the field Fc is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PrioritySessions) GetFc() *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PrioritySessions_Fc {
	if t != nil && t.Fc != nil {
		return t.Fc
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PrioritySessions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PrioritySessions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Fc.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PrioritySessions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PrioritySessions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PrioritySessions) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PrioritySessions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PrioritySessions.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PrioritySessions) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PrioritySessions_Fc represents the /nokia-conf/configure/groups/group/service/nat/up-nat-policy/priority-sessions/fc YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PrioritySessions_Fc struct {
	Af *bool `path:"af" module:"nokia-conf"`
	Be *bool `path:"be" module:"nokia-conf"`
	Ef *bool `path:"ef" module:"nokia-conf"`
	H1 *bool `path:"h1" module:"nokia-conf"`
	H2 *bool `path:"h2" module:"nokia-conf"`
	L1 *bool `path:"l1" module:"nokia-conf"`
	L2 *bool `path:"l2" module:"nokia-conf"`
	Nc *bool `path:"nc" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PrioritySessions_Fc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PrioritySessions_Fc) IsYANGGoStruct() {
}

// GetAf retrieves the value of the leaf Af from the NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PrioritySessions_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Af is set, it can
// safely use t.GetAf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Af == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PrioritySessions_Fc) GetAf() bool {
	if t == nil || t.Af == nil {
		return false
	}
	return *t.Af
}

// GetBe retrieves the value of the leaf Be from the NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PrioritySessions_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Be is set, it can
// safely use t.GetBe() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Be == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PrioritySessions_Fc) GetBe() bool {
	if t == nil || t.Be == nil {
		return false
	}
	return *t.Be
}

// GetEf retrieves the value of the leaf Ef from the NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PrioritySessions_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ef is set, it can
// safely use t.GetEf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ef == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PrioritySessions_Fc) GetEf() bool {
	if t == nil || t.Ef == nil {
		return false
	}
	return *t.Ef
}

// GetH1 retrieves the value of the leaf H1 from the NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PrioritySessions_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if H1 is set, it can
// safely use t.GetH1() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.H1 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PrioritySessions_Fc) GetH1() bool {
	if t == nil || t.H1 == nil {
		return false
	}
	return *t.H1
}

// GetH2 retrieves the value of the leaf H2 from the NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PrioritySessions_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if H2 is set, it can
// safely use t.GetH2() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.H2 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PrioritySessions_Fc) GetH2() bool {
	if t == nil || t.H2 == nil {
		return false
	}
	return *t.H2
}

// GetL1 retrieves the value of the leaf L1 from the NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PrioritySessions_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if L1 is set, it can
// safely use t.GetL1() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.L1 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PrioritySessions_Fc) GetL1() bool {
	if t == nil || t.L1 == nil {
		return false
	}
	return *t.L1
}

// GetL2 retrieves the value of the leaf L2 from the NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PrioritySessions_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if L2 is set, it can
// safely use t.GetL2() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.L2 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PrioritySessions_Fc) GetL2() bool {
	if t == nil || t.L2 == nil {
		return false
	}
	return *t.L2
}

// GetNc retrieves the value of the leaf Nc from the NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PrioritySessions_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Nc is set, it can
// safely use t.GetNc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Nc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PrioritySessions_Fc) GetNc() bool {
	if t == nil || t.Nc == nil {
		return false
	}
	return *t.Nc
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PrioritySessions_Fc
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PrioritySessions_Fc) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Af == nil {
		var v bool = false
		t.Af = &v
	}
	if t.Be == nil {
		var v bool = false
		t.Be = &v
	}
	if t.Ef == nil {
		var v bool = false
		t.Ef = &v
	}
	if t.H1 == nil {
		var v bool = false
		t.H1 = &v
	}
	if t.H2 == nil {
		var v bool = false
		t.H2 = &v
	}
	if t.L1 == nil {
		var v bool = false
		t.L1 = &v
	}
	if t.L2 == nil {
		var v bool = false
		t.L2 = &v
	}
	if t.Nc == nil {
		var v bool = false
		t.Nc = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PrioritySessions_Fc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PrioritySessions_Fc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PrioritySessions_Fc) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PrioritySessions_Fc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PrioritySessions_Fc.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_PrioritySessions_Fc) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_SessionLimits represents the /nokia-conf/configure/groups/group/service/nat/up-nat-policy/session-limits YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_SessionLimits struct {
	Max        *uint16                                                                            `path:"max" module:"nokia-conf"`
	Reserved   *uint16                                                                            `path:"reserved" module:"nokia-conf"`
	Watermarks *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_SessionLimits_Watermarks `path:"watermarks" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_SessionLimits implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_SessionLimits) IsYANGGoStruct() {}

// GetOrCreateWatermarks retrieves the value of the Watermarks field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_SessionLimits) GetOrCreateWatermarks() *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_SessionLimits_Watermarks {
	if t.Watermarks != nil {
		return t.Watermarks
	}
	t.Watermarks = &NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_SessionLimits_Watermarks{}
	return t.Watermarks
}

// GetWatermarks returns the value of the Watermarks struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_SessionLimits. If the receiver or the field Watermarks is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_SessionLimits) GetWatermarks() *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_SessionLimits_Watermarks {
	if t != nil && t.Watermarks != nil {
		return t.Watermarks
	}
	return nil
}

// GetMax retrieves the value of the leaf Max from the NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_SessionLimits
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_SessionLimits) GetMax() uint16 {
	if t == nil || t.Max == nil {
		return 65535
	}
	return *t.Max
}

// GetReserved retrieves the value of the leaf Reserved from the NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_SessionLimits
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Reserved is set, it can
// safely use t.GetReserved() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Reserved == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_SessionLimits) GetReserved() uint16 {
	if t == nil || t.Reserved == nil {
		return 0
	}
	return *t.Reserved
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_SessionLimits
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_SessionLimits) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Max == nil {
		var v uint16 = 65535
		t.Max = &v
	}
	t.Watermarks.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_SessionLimits) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_SessionLimits"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_SessionLimits) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_SessionLimits) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_SessionLimits.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_SessionLimits) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_SessionLimits_Watermarks represents the /nokia-conf/configure/groups/group/service/nat/up-nat-policy/session-limits/watermarks YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_SessionLimits_Watermarks struct {
	High *uint32 `path:"high" module:"nokia-conf"`
	Low  *uint32 `path:"low" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_SessionLimits_Watermarks implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_SessionLimits_Watermarks) IsYANGGoStruct() {
}

// GetHigh retrieves the value of the leaf High from the NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_SessionLimits_Watermarks
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if High is set, it can
// safely use t.GetHigh() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.High == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_SessionLimits_Watermarks) GetHigh() uint32 {
	if t == nil || t.High == nil {
		return 0
	}
	return *t.High
}

// GetLow retrieves the value of the leaf Low from the NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_SessionLimits_Watermarks
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Low is set, it can
// safely use t.GetLow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Low == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_SessionLimits_Watermarks) GetLow() uint32 {
	if t == nil || t.Low == nil {
		return 0
	}
	return *t.Low
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_SessionLimits_Watermarks
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_SessionLimits_Watermarks) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_SessionLimits_Watermarks) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_SessionLimits_Watermarks"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_SessionLimits_Watermarks) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_SessionLimits_Watermarks) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_SessionLimits_Watermarks.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_SessionLimits_Watermarks) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Tcp represents the /nokia-conf/configure/groups/group/service/nat/up-nat-policy/tcp YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Tcp struct {
	MssAdjust    *uint32 `path:"mss-adjust" module:"nokia-conf"`
	ResetUnknown *bool   `path:"reset-unknown" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Tcp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Tcp) IsYANGGoStruct() {}

// GetMssAdjust retrieves the value of the leaf MssAdjust from the NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Tcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MssAdjust is set, it can
// safely use t.GetMssAdjust() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MssAdjust == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Tcp) GetMssAdjust() uint32 {
	if t == nil || t.MssAdjust == nil {
		return 0
	}
	return *t.MssAdjust
}

// GetResetUnknown retrieves the value of the leaf ResetUnknown from the NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Tcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ResetUnknown is set, it can
// safely use t.GetResetUnknown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ResetUnknown == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Tcp) GetResetUnknown() bool {
	if t == nil || t.ResetUnknown == nil {
		return false
	}
	return *t.ResetUnknown
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Tcp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Tcp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ResetUnknown == nil {
		var v bool = false
		t.ResetUnknown = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Tcp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Tcp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Tcp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Tcp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Tcp.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Tcp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts represents the /nokia-conf/configure/groups/group/service/nat/up-nat-policy/timeouts YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts struct {
	IcmpQuery           *uint32                                                                `path:"icmp-query" module:"nokia-conf"`
	Sip                 *uint32                                                                `path:"sip" module:"nokia-conf"`
	SubscriberRetention *uint32                                                                `path:"subscriber-retention" module:"nokia-conf"`
	Tcp                 *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts_Tcp `path:"tcp" module:"nokia-conf"`
	Udp                 *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts_Udp `path:"udp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts) IsYANGGoStruct() {}

// GetOrCreateTcp retrieves the value of the Tcp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts) GetOrCreateTcp() *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts_Tcp {
	if t.Tcp != nil {
		return t.Tcp
	}
	t.Tcp = &NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts_Tcp{}
	return t.Tcp
}

// GetOrCreateUdp retrieves the value of the Udp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts) GetOrCreateUdp() *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts_Udp {
	if t.Udp != nil {
		return t.Udp
	}
	t.Udp = &NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts_Udp{}
	return t.Udp
}

// GetTcp returns the value of the Tcp struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts. If the receiver or the field Tcp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts) GetTcp() *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts_Tcp {
	if t != nil && t.Tcp != nil {
		return t.Tcp
	}
	return nil
}

// GetUdp returns the value of the Udp struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts. If the receiver or the field Udp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts) GetUdp() *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts_Udp {
	if t != nil && t.Udp != nil {
		return t.Udp
	}
	return nil
}

// GetIcmpQuery retrieves the value of the leaf IcmpQuery from the NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IcmpQuery is set, it can
// safely use t.GetIcmpQuery() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IcmpQuery == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts) GetIcmpQuery() uint32 {
	if t == nil || t.IcmpQuery == nil {
		return 60
	}
	return *t.IcmpQuery
}

// GetSip retrieves the value of the leaf Sip from the NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Sip is set, it can
// safely use t.GetSip() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Sip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts) GetSip() uint32 {
	if t == nil || t.Sip == nil {
		return 120
	}
	return *t.Sip
}

// GetSubscriberRetention retrieves the value of the leaf SubscriberRetention from the NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubscriberRetention is set, it can
// safely use t.GetSubscriberRetention() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubscriberRetention == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts) GetSubscriberRetention() uint32 {
	if t == nil || t.SubscriberRetention == nil {
		return 0
	}
	return *t.SubscriberRetention
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IcmpQuery == nil {
		var v uint32 = 60
		t.IcmpQuery = &v
	}
	if t.Sip == nil {
		var v uint32 = 120
		t.Sip = &v
	}
	if t.SubscriberRetention == nil {
		var v uint32 = 0
		t.SubscriberRetention = &v
	}
	t.Tcp.PopulateDefaults()
	t.Udp.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts_Tcp represents the /nokia-conf/configure/groups/group/service/nat/up-nat-policy/timeouts/tcp YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts_Tcp struct {
	Established *uint32 `path:"established" module:"nokia-conf"`
	Rst         *uint32 `path:"rst" module:"nokia-conf"`
	Syn         *uint32 `path:"syn" module:"nokia-conf"`
	TimeWait    *uint32 `path:"time-wait" module:"nokia-conf"`
	Transitory  *uint32 `path:"transitory" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts_Tcp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts_Tcp) IsYANGGoStruct() {}

// GetEstablished retrieves the value of the leaf Established from the NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts_Tcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Established is set, it can
// safely use t.GetEstablished() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Established == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts_Tcp) GetEstablished() uint32 {
	if t == nil || t.Established == nil {
		return 7440
	}
	return *t.Established
}

// GetRst retrieves the value of the leaf Rst from the NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts_Tcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rst is set, it can
// safely use t.GetRst() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rst == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts_Tcp) GetRst() uint32 {
	if t == nil || t.Rst == nil {
		return 0
	}
	return *t.Rst
}

// GetSyn retrieves the value of the leaf Syn from the NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts_Tcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Syn is set, it can
// safely use t.GetSyn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Syn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts_Tcp) GetSyn() uint32 {
	if t == nil || t.Syn == nil {
		return 15
	}
	return *t.Syn
}

// GetTimeWait retrieves the value of the leaf TimeWait from the NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts_Tcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TimeWait is set, it can
// safely use t.GetTimeWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TimeWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts_Tcp) GetTimeWait() uint32 {
	if t == nil || t.TimeWait == nil {
		return 0
	}
	return *t.TimeWait
}

// GetTransitory retrieves the value of the leaf Transitory from the NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts_Tcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Transitory is set, it can
// safely use t.GetTransitory() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Transitory == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts_Tcp) GetTransitory() uint32 {
	if t == nil || t.Transitory == nil {
		return 240
	}
	return *t.Transitory
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts_Tcp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts_Tcp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Established == nil {
		var v uint32 = 7440
		t.Established = &v
	}
	if t.Rst == nil {
		var v uint32 = 0
		t.Rst = &v
	}
	if t.Syn == nil {
		var v uint32 = 15
		t.Syn = &v
	}
	if t.TimeWait == nil {
		var v uint32 = 0
		t.TimeWait = &v
	}
	if t.Transitory == nil {
		var v uint32 = 240
		t.Transitory = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts_Tcp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts_Tcp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts_Tcp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts_Tcp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts_Tcp.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts_Tcp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts_Udp represents the /nokia-conf/configure/groups/group/service/nat/up-nat-policy/timeouts/udp YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts_Udp struct {
	Dns     *uint32 `path:"dns" module:"nokia-conf"`
	Initial *uint32 `path:"initial" module:"nokia-conf"`
	Normal  *uint32 `path:"normal" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts_Udp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts_Udp) IsYANGGoStruct() {}

// GetDns retrieves the value of the leaf Dns from the NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts_Udp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dns is set, it can
// safely use t.GetDns() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dns == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts_Udp) GetDns() uint32 {
	if t == nil || t.Dns == nil {
		return 15
	}
	return *t.Dns
}

// GetInitial retrieves the value of the leaf Initial from the NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts_Udp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Initial is set, it can
// safely use t.GetInitial() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Initial == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts_Udp) GetInitial() uint32 {
	if t == nil || t.Initial == nil {
		return 15
	}
	return *t.Initial
}

// GetNormal retrieves the value of the leaf Normal from the NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts_Udp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Normal is set, it can
// safely use t.GetNormal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Normal == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts_Udp) GetNormal() uint32 {
	if t == nil || t.Normal == nil {
		return 300
	}
	return *t.Normal
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts_Udp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts_Udp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Dns == nil {
		var v uint32 = 15
		t.Dns = &v
	}
	if t.Initial == nil {
		var v uint32 = 15
		t.Initial = &v
	}
	if t.Normal == nil {
		var v uint32 = 300
		t.Normal = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts_Udp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts_Udp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts_Udp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts_Udp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts_Udp.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Timeouts_Udp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Udp represents the /nokia-conf/configure/groups/group/service/nat/up-nat-policy/udp YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Udp struct {
	InboundRefresh *bool `path:"inbound-refresh" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Udp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Udp) IsYANGGoStruct() {}

// GetInboundRefresh retrieves the value of the leaf InboundRefresh from the NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Udp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InboundRefresh is set, it can
// safely use t.GetInboundRefresh() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InboundRefresh == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Udp) GetInboundRefresh() bool {
	if t == nil || t.InboundRefresh == nil {
		return false
	}
	return *t.InboundRefresh
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Udp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Udp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InboundRefresh == nil {
		var v bool = false
		t.InboundRefresh = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Udp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Udp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Udp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Udp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Udp.
func (*NokiaConf_Configure_Groups_Group_Service_Nat_UpNatPolicy_Udp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_OperGroup represents the /nokia-conf/configure/groups/group/service/oper-group YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_OperGroup struct {
	BfdLiveness *NokiaConf_Configure_Groups_Group_Service_OperGroup_BfdLiveness `path:"bfd-liveness" module:"nokia-conf" yangPresence:"true"`
	HoldTime    *NokiaConf_Configure_Groups_Group_Service_OperGroup_HoldTime    `path:"hold-time" module:"nokia-conf"`
	Name        *string                                                         `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_OperGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_OperGroup) IsYANGGoStruct() {}

// GetOrCreateBfdLiveness retrieves the value of the BfdLiveness field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_OperGroup) GetOrCreateBfdLiveness() *NokiaConf_Configure_Groups_Group_Service_OperGroup_BfdLiveness {
	if t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	t.BfdLiveness = &NokiaConf_Configure_Groups_Group_Service_OperGroup_BfdLiveness{}
	return t.BfdLiveness
}

// GetOrCreateHoldTime retrieves the value of the HoldTime field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_OperGroup) GetOrCreateHoldTime() *NokiaConf_Configure_Groups_Group_Service_OperGroup_HoldTime {
	if t.HoldTime != nil {
		return t.HoldTime
	}
	t.HoldTime = &NokiaConf_Configure_Groups_Group_Service_OperGroup_HoldTime{}
	return t.HoldTime
}

// GetBfdLiveness returns the value of the BfdLiveness struct pointer
// from NokiaConf_Configure_Groups_Group_Service_OperGroup. If the receiver or the field BfdLiveness is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_OperGroup) GetBfdLiveness() *NokiaConf_Configure_Groups_Group_Service_OperGroup_BfdLiveness {
	if t != nil && t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	return nil
}

// GetHoldTime returns the value of the HoldTime struct pointer
// from NokiaConf_Configure_Groups_Group_Service_OperGroup. If the receiver or the field HoldTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_OperGroup) GetHoldTime() *NokiaConf_Configure_Groups_Group_Service_OperGroup_HoldTime {
	if t != nil && t.HoldTime != nil {
		return t.HoldTime
	}
	return nil
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Service_OperGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_OperGroup) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_OperGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_OperGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.BfdLiveness.PopulateDefaults()
	t.HoldTime.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_OperGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_OperGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_OperGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_OperGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_OperGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_OperGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_OperGroup.
func (*NokiaConf_Configure_Groups_Group_Service_OperGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_OperGroup_BfdLiveness represents the /nokia-conf/configure/groups/group/service/oper-group/bfd-liveness YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_OperGroup_BfdLiveness struct {
	DestIp         *string `path:"dest-ip" module:"nokia-conf"`
	InterfaceName  *string `path:"interface-name" module:"nokia-conf"`
	RouterInstance *string `path:"router-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_OperGroup_BfdLiveness implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_OperGroup_BfdLiveness) IsYANGGoStruct() {}

// GetDestIp retrieves the value of the leaf DestIp from the NokiaConf_Configure_Groups_Group_Service_OperGroup_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestIp is set, it can
// safely use t.GetDestIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_OperGroup_BfdLiveness) GetDestIp() string {
	if t == nil || t.DestIp == nil {
		return ""
	}
	return *t.DestIp
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Groups_Group_Service_OperGroup_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_OperGroup_BfdLiveness) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Groups_Group_Service_OperGroup_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_OperGroup_BfdLiveness) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_OperGroup_BfdLiveness
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_OperGroup_BfdLiveness) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_OperGroup_BfdLiveness) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_OperGroup_BfdLiveness"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_OperGroup_BfdLiveness) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_OperGroup_BfdLiveness) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_OperGroup_BfdLiveness.
func (*NokiaConf_Configure_Groups_Group_Service_OperGroup_BfdLiveness) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_OperGroup_HoldTime represents the /nokia-conf/configure/groups/group/service/oper-group/hold-time YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_OperGroup_HoldTime struct {
	Down *uint32 `path:"down" module:"nokia-conf"`
	Up   *uint32 `path:"up" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_OperGroup_HoldTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_OperGroup_HoldTime) IsYANGGoStruct() {}

// GetDown retrieves the value of the leaf Down from the NokiaConf_Configure_Groups_Group_Service_OperGroup_HoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Down is set, it can
// safely use t.GetDown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Down == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_OperGroup_HoldTime) GetDown() uint32 {
	if t == nil || t.Down == nil {
		return 0
	}
	return *t.Down
}

// GetUp retrieves the value of the leaf Up from the NokiaConf_Configure_Groups_Group_Service_OperGroup_HoldTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Up is set, it can
// safely use t.GetUp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Up == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_OperGroup_HoldTime) GetUp() uint32 {
	if t == nil || t.Up == nil {
		return 4
	}
	return *t.Up
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_OperGroup_HoldTime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_OperGroup_HoldTime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Up == nil {
		var v uint32 = 4
		t.Up = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_OperGroup_HoldTime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_OperGroup_HoldTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_OperGroup_HoldTime) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_OperGroup_HoldTime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_OperGroup_HoldTime.
func (*NokiaConf_Configure_Groups_Group_Service_OperGroup_HoldTime) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Pbb represents the /nokia-conf/configure/groups/group/service/pbb YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Pbb struct {
	Mac             map[string]*NokiaConf_Configure_Groups_Group_Service_Pbb_Mac  `path:"mac" module:"nokia-conf"`
	MacNotification *NokiaConf_Configure_Groups_Group_Service_Pbb_MacNotification `path:"mac-notification" module:"nokia-conf" yangPresence:"true"`
	SourceBmac      *NokiaConf_Configure_Groups_Group_Service_Pbb_SourceBmac      `path:"source-bmac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Pbb implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Pbb) IsYANGGoStruct() {}

// NewMac creates a new entry in the Mac list of the
// NokiaConf_Configure_Groups_Group_Service_Pbb struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Pbb) NewMac(Name string) (*NokiaConf_Configure_Groups_Group_Service_Pbb_Mac, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mac == nil {
		t.Mac = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Pbb_Mac)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mac[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mac", key)
	}

	t.Mac[key] = &NokiaConf_Configure_Groups_Group_Service_Pbb_Mac{
		Name: &Name,
	}

	return t.Mac[key], nil
}

// RenameMac renames an entry in the list Mac within
// the NokiaConf_Configure_Groups_Group_Service_Pbb struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Pbb) RenameMac(oldK, newK string) error {
	if _, ok := t.Mac[newK]; ok {
		return fmt.Errorf("key %v already exists in Mac", newK)
	}

	e, ok := t.Mac[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mac", oldK)
	}
	e.Name = &newK

	t.Mac[newK] = e
	delete(t.Mac, oldK)
	return nil
}

// GetOrCreateMac retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Pbb. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Pbb) GetOrCreateMac(Name string) *NokiaConf_Configure_Groups_Group_Service_Pbb_Mac {

	key := Name

	if v, ok := t.Mac[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMac(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMac got unexpected error: %v", err))
	}
	return v
}

// GetMac retrieves the value with the specified key from
// the Mac map field of NokiaConf_Configure_Groups_Group_Service_Pbb. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Pbb) GetMac(Name string) *NokiaConf_Configure_Groups_Group_Service_Pbb_Mac {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Mac[key]; ok {
		return lm
	}
	return nil
}

// DeleteMac deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Pbb. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Pbb) DeleteMac(Name string) {
	key := Name

	delete(t.Mac, key)
}

// AppendMac appends the supplied NokiaConf_Configure_Groups_Group_Service_Pbb_Mac struct to the
// list Mac of NokiaConf_Configure_Groups_Group_Service_Pbb. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Pbb_Mac already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Pbb) AppendMac(v *NokiaConf_Configure_Groups_Group_Service_Pbb_Mac) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mac == nil {
		t.Mac = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Pbb_Mac)
	}

	if _, ok := t.Mac[key]; ok {
		return fmt.Errorf("duplicate key for list Mac %v", key)
	}

	t.Mac[key] = v
	return nil
}

// GetOrCreateMacNotification retrieves the value of the MacNotification field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Pbb) GetOrCreateMacNotification() *NokiaConf_Configure_Groups_Group_Service_Pbb_MacNotification {
	if t.MacNotification != nil {
		return t.MacNotification
	}
	t.MacNotification = &NokiaConf_Configure_Groups_Group_Service_Pbb_MacNotification{}
	return t.MacNotification
}

// GetOrCreateSourceBmac retrieves the value of the SourceBmac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Pbb) GetOrCreateSourceBmac() *NokiaConf_Configure_Groups_Group_Service_Pbb_SourceBmac {
	if t.SourceBmac != nil {
		return t.SourceBmac
	}
	t.SourceBmac = &NokiaConf_Configure_Groups_Group_Service_Pbb_SourceBmac{}
	return t.SourceBmac
}

// GetMacNotification returns the value of the MacNotification struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Pbb. If the receiver or the field MacNotification is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Pbb) GetMacNotification() *NokiaConf_Configure_Groups_Group_Service_Pbb_MacNotification {
	if t != nil && t.MacNotification != nil {
		return t.MacNotification
	}
	return nil
}

// GetSourceBmac returns the value of the SourceBmac struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Pbb. If the receiver or the field SourceBmac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Pbb) GetSourceBmac() *NokiaConf_Configure_Groups_Group_Service_Pbb_SourceBmac {
	if t != nil && t.SourceBmac != nil {
		return t.SourceBmac
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Pbb
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Pbb) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.MacNotification.PopulateDefaults()
	t.SourceBmac.PopulateDefaults()
	for _, e := range t.Mac {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Pbb) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Pbb"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Pbb) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Pbb) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Pbb.
func (*NokiaConf_Configure_Groups_Group_Service_Pbb) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Pbb_Mac represents the /nokia-conf/configure/groups/group/service/pbb/mac YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Pbb_Mac struct {
	Address *string `path:"address" module:"nokia-conf"`
	Name    *string `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Pbb_Mac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Pbb_Mac) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Service_Pbb_Mac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Pbb_Mac) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Service_Pbb_Mac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Pbb_Mac) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Pbb_Mac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Pbb_Mac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Pbb_Mac struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Pbb_Mac) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Pbb_Mac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Pbb_Mac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Pbb_Mac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Pbb_Mac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Pbb_Mac.
func (*NokiaConf_Configure_Groups_Group_Service_Pbb_Mac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Pbb_MacNotification represents the /nokia-conf/configure/groups/group/service/pbb/mac-notification YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Pbb_MacNotification struct {
	Count    *uint32 `path:"count" module:"nokia-conf"`
	Interval *uint32 `path:"interval" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Pbb_MacNotification implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Pbb_MacNotification) IsYANGGoStruct() {}

// GetCount retrieves the value of the leaf Count from the NokiaConf_Configure_Groups_Group_Service_Pbb_MacNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Count is set, it can
// safely use t.GetCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Count == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Pbb_MacNotification) GetCount() uint32 {
	if t == nil || t.Count == nil {
		return 3
	}
	return *t.Count
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Groups_Group_Service_Pbb_MacNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Pbb_MacNotification) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 1
	}
	return *t.Interval
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Pbb_MacNotification
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Pbb_MacNotification) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Count == nil {
		var v uint32 = 3
		t.Count = &v
	}
	if t.Interval == nil {
		var v uint32 = 1
		t.Interval = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Pbb_MacNotification) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Pbb_MacNotification"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Pbb_MacNotification) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Pbb_MacNotification) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Pbb_MacNotification.
func (*NokiaConf_Configure_Groups_Group_Service_Pbb_MacNotification) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Pbb_SourceBmac represents the /nokia-conf/configure/groups/group/service/pbb/source-bmac YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Pbb_SourceBmac struct {
	Address              *string `path:"address" module:"nokia-conf"`
	EvpnEtreeLeafAddress *string `path:"evpn-etree-leaf-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Pbb_SourceBmac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Pbb_SourceBmac) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Service_Pbb_SourceBmac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Pbb_SourceBmac) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetEvpnEtreeLeafAddress retrieves the value of the leaf EvpnEtreeLeafAddress from the NokiaConf_Configure_Groups_Group_Service_Pbb_SourceBmac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EvpnEtreeLeafAddress is set, it can
// safely use t.GetEvpnEtreeLeafAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EvpnEtreeLeafAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Pbb_SourceBmac) GetEvpnEtreeLeafAddress() string {
	if t == nil || t.EvpnEtreeLeafAddress == nil {
		return ""
	}
	return *t.EvpnEtreeLeafAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Pbb_SourceBmac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Pbb_SourceBmac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Pbb_SourceBmac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Pbb_SourceBmac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Pbb_SourceBmac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Pbb_SourceBmac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Pbb_SourceBmac.
func (*NokiaConf_Configure_Groups_Group_Service_Pbb_SourceBmac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_ProxyArpNd represents the /nokia-conf/configure/groups/group/service/proxy-arp-nd YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_ProxyArpNd struct {
	MacList *NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList `path:"mac-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_ProxyArpNd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_ProxyArpNd) IsYANGGoStruct() {}

// GetOrCreateMacList retrieves the value of the MacList field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_ProxyArpNd) GetOrCreateMacList() *NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList {
	if t.MacList != nil {
		return t.MacList
	}
	t.MacList = &NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList{}
	return t.MacList
}

// GetMacList returns the value of the MacList struct pointer
// from NokiaConf_Configure_Groups_Group_Service_ProxyArpNd. If the receiver or the field MacList is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_ProxyArpNd) GetMacList() *NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList {
	if t != nil && t.MacList != nil {
		return t.MacList
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_ProxyArpNd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_ProxyArpNd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.MacList.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_ProxyArpNd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_ProxyArpNd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_ProxyArpNd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_ProxyArpNd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_ProxyArpNd.
func (*NokiaConf_Configure_Groups_Group_Service_ProxyArpNd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList represents the /nokia-conf/configure/groups/group/service/proxy-arp-nd/mac-list YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList struct {
	List map[string]*NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList_List `path:"list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList) IsYANGGoStruct() {}

// NewList creates a new entry in the List list of the
// NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList) NewList(ListName string) (*NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList_List, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.List == nil {
		t.List = make(map[string]*NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList_List)
	}

	key := ListName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.List[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list List", key)
	}

	t.List[key] = &NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList_List{
		ListName: &ListName,
	}

	return t.List[key], nil
}

// RenameList renames an entry in the list List within
// the NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList) RenameList(oldK, newK string) error {
	if _, ok := t.List[newK]; ok {
		return fmt.Errorf("key %v already exists in List", newK)
	}

	e, ok := t.List[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in List", oldK)
	}
	e.ListName = &newK

	t.List[newK] = e
	delete(t.List, oldK)
	return nil
}

// GetOrCreateList retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList) GetOrCreateList(ListName string) *NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList_List {

	key := ListName

	if v, ok := t.List[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewList(ListName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateList got unexpected error: %v", err))
	}
	return v
}

// GetList retrieves the value with the specified key from
// the List map field of NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList) GetList(ListName string) *NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList_List {

	if t == nil {
		return nil
	}

	key := ListName

	if lm, ok := t.List[key]; ok {
		return lm
	}
	return nil
}

// DeleteList deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList) DeleteList(ListName string) {
	key := ListName

	delete(t.List, key)
}

// AppendList appends the supplied NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList_List struct to the
// list List of NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList_List already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList) AppendList(v *NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList_List) error {
	if v.ListName == nil {
		return fmt.Errorf("invalid nil key received for ListName")
	}

	key := *v.ListName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.List == nil {
		t.List = make(map[string]*NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList_List)
	}

	if _, ok := t.List[key]; ok {
		return fmt.Errorf("duplicate key for list List %v", key)
	}

	t.List[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.List {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList.
func (*NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList_List represents the /nokia-conf/configure/groups/group/service/proxy-arp-nd/mac-list/list YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList_List struct {
	ListName *string                                                                          `path:"list-name" module:"nokia-conf"`
	Mac      map[string]*NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList_List_Mac `path:"mac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList_List implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList_List) IsYANGGoStruct() {}

// NewMac creates a new entry in the Mac list of the
// NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList_List struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList_List) NewMac(Address string) (*NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList_List_Mac, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mac == nil {
		t.Mac = make(map[string]*NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList_List_Mac)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mac[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mac", key)
	}

	t.Mac[key] = &NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList_List_Mac{
		Address: &Address,
	}

	return t.Mac[key], nil
}

// RenameMac renames an entry in the list Mac within
// the NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList_List struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList_List) RenameMac(oldK, newK string) error {
	if _, ok := t.Mac[newK]; ok {
		return fmt.Errorf("key %v already exists in Mac", newK)
	}

	e, ok := t.Mac[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mac", oldK)
	}
	e.Address = &newK

	t.Mac[newK] = e
	delete(t.Mac, oldK)
	return nil
}

// GetOrCreateMac retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList_List. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList_List) GetOrCreateMac(Address string) *NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList_List_Mac {

	key := Address

	if v, ok := t.Mac[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMac(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMac got unexpected error: %v", err))
	}
	return v
}

// GetMac retrieves the value with the specified key from
// the Mac map field of NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList_List. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList_List) GetMac(Address string) *NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList_List_Mac {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.Mac[key]; ok {
		return lm
	}
	return nil
}

// DeleteMac deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList_List. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList_List) DeleteMac(Address string) {
	key := Address

	delete(t.Mac, key)
}

// AppendMac appends the supplied NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList_List_Mac struct to the
// list Mac of NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList_List. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList_List_Mac already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList_List) AppendMac(v *NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList_List_Mac) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mac == nil {
		t.Mac = make(map[string]*NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList_List_Mac)
	}

	if _, ok := t.Mac[key]; ok {
		return fmt.Errorf("duplicate key for list Mac %v", key)
	}

	t.Mac[key] = v
	return nil
}

// GetListName retrieves the value of the leaf ListName from the NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList_List
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ListName is set, it can
// safely use t.GetListName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ListName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList_List) GetListName() string {
	if t == nil || t.ListName == nil {
		return ""
	}
	return *t.ListName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList_List
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList_List) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Mac {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList_List struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList_List) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ListName == nil {
		return nil, fmt.Errorf("nil value for key ListName")
	}

	return map[string]interface{}{
		"list-name": *t.ListName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList_List) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList_List"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList_List) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList_List) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList_List.
func (*NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList_List) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList_List_Mac represents the /nokia-conf/configure/groups/group/service/proxy-arp-nd/mac-list/list/mac YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList_List_Mac struct {
	Address *string `path:"address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList_List_Mac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList_List_Mac) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList_List_Mac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList_List_Mac) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList_List_Mac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList_List_Mac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList_List_Mac struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList_List_Mac) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList_List_Mac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList_List_Mac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList_List_Mac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList_List_Mac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList_List_Mac.
func (*NokiaConf_Configure_Groups_Group_Service_ProxyArpNd_MacList_List_Mac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_PwTemplate represents the /nokia-conf/configure/groups/group/service/pw-template YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_PwTemplate struct {
	AccountingPolicy   *uint32                                                                    `path:"accounting-policy" module:"nokia-conf"`
	AllowFragmentation *bool                                                                      `path:"allow-fragmentation" module:"nokia-conf"`
	AutoGreSdp         *bool                                                                      `path:"auto-gre-sdp" module:"nokia-conf"`
	BlockOnPeerFault   *bool                                                                      `path:"block-on-peer-fault" module:"nokia-conf"`
	CollectStats       *bool                                                                      `path:"collect-stats" module:"nokia-conf"`
	ControlWord        *bool                                                                      `path:"control-word" module:"nokia-conf"`
	Egress             *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress                `path:"egress" module:"nokia-conf"`
	EncryptionKeygroup *NokiaConf_Configure_Groups_Group_Service_PwTemplate_EncryptionKeygroup    `path:"encryption-keygroup" module:"nokia-conf"`
	EntropyLabel       YANGEmpty                                                                  `path:"entropy-label" module:"nokia-conf"`
	Fdb                *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Fdb                   `path:"fdb" module:"nokia-conf"`
	ForceVcForwarding  E_NokiaConf_Configure_Groups_Group_Service_PwTemplate_ForceVcForwarding    `path:"force-vc-forwarding" module:"nokia-conf"`
	HashLabel          *NokiaConf_Configure_Groups_Group_Service_PwTemplate_HashLabel             `path:"hash-label" module:"nokia-conf" yangPresence:"true"`
	IgmpSnooping       *NokiaConf_Configure_Groups_Group_Service_PwTemplate_IgmpSnooping          `path:"igmp-snooping" module:"nokia-conf"`
	Ingress            *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress               `path:"ingress" module:"nokia-conf"`
	L2Pt               *NokiaConf_Configure_Groups_Group_Service_PwTemplate_L2Pt                  `path:"l2pt" module:"nokia-conf"`
	ProvisionedSdp     E_NokiaTypesServices_ProvisionedSdp                                        `path:"provisioned-sdp" module:"nokia-conf"`
	PwTemplateId       *uint32                                                                    `path:"pw-template-id" module:"nokia-conf"`
	PwTemplateName     *string                                                                    `path:"pw-template-name" module:"nokia-conf"`
	SdpExclude         map[string]*NokiaConf_Configure_Groups_Group_Service_PwTemplate_SdpExclude `path:"sdp-exclude" module:"nokia-conf"`
	SdpInclude         map[string]*NokiaConf_Configure_Groups_Group_Service_PwTemplate_SdpInclude `path:"sdp-include" module:"nokia-conf"`
	SplitHorizonGroup  *NokiaConf_Configure_Groups_Group_Service_PwTemplate_SplitHorizonGroup     `path:"split-horizon-group" module:"nokia-conf"`
	Stp                *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Stp                   `path:"stp" module:"nokia-conf"`
	VcType             E_NokiaTypesServices_PwTemplateSdpBindVcType                               `path:"vc-type" module:"nokia-conf"`
	VlanVcTag          *uint32                                                                    `path:"vlan-vc-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_PwTemplate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_PwTemplate) IsYANGGoStruct() {}

// NewSdpExclude creates a new entry in the SdpExclude list of the
// NokiaConf_Configure_Groups_Group_Service_PwTemplate struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate) NewSdpExclude(GroupName string) (*NokiaConf_Configure_Groups_Group_Service_PwTemplate_SdpExclude, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SdpExclude == nil {
		t.SdpExclude = make(map[string]*NokiaConf_Configure_Groups_Group_Service_PwTemplate_SdpExclude)
	}

	key := GroupName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SdpExclude[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SdpExclude", key)
	}

	t.SdpExclude[key] = &NokiaConf_Configure_Groups_Group_Service_PwTemplate_SdpExclude{
		GroupName: &GroupName,
	}

	return t.SdpExclude[key], nil
}

// RenameSdpExclude renames an entry in the list SdpExclude within
// the NokiaConf_Configure_Groups_Group_Service_PwTemplate struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate) RenameSdpExclude(oldK, newK string) error {
	if _, ok := t.SdpExclude[newK]; ok {
		return fmt.Errorf("key %v already exists in SdpExclude", newK)
	}

	e, ok := t.SdpExclude[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SdpExclude", oldK)
	}
	e.GroupName = &newK

	t.SdpExclude[newK] = e
	delete(t.SdpExclude, oldK)
	return nil
}

// GetOrCreateSdpExclude retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_PwTemplate. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate) GetOrCreateSdpExclude(GroupName string) *NokiaConf_Configure_Groups_Group_Service_PwTemplate_SdpExclude {

	key := GroupName

	if v, ok := t.SdpExclude[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSdpExclude(GroupName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSdpExclude got unexpected error: %v", err))
	}
	return v
}

// GetSdpExclude retrieves the value with the specified key from
// the SdpExclude map field of NokiaConf_Configure_Groups_Group_Service_PwTemplate. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate) GetSdpExclude(GroupName string) *NokiaConf_Configure_Groups_Group_Service_PwTemplate_SdpExclude {

	if t == nil {
		return nil
	}

	key := GroupName

	if lm, ok := t.SdpExclude[key]; ok {
		return lm
	}
	return nil
}

// DeleteSdpExclude deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_PwTemplate. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate) DeleteSdpExclude(GroupName string) {
	key := GroupName

	delete(t.SdpExclude, key)
}

// AppendSdpExclude appends the supplied NokiaConf_Configure_Groups_Group_Service_PwTemplate_SdpExclude struct to the
// list SdpExclude of NokiaConf_Configure_Groups_Group_Service_PwTemplate. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_PwTemplate_SdpExclude already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate) AppendSdpExclude(v *NokiaConf_Configure_Groups_Group_Service_PwTemplate_SdpExclude) error {
	if v.GroupName == nil {
		return fmt.Errorf("invalid nil key received for GroupName")
	}

	key := *v.GroupName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SdpExclude == nil {
		t.SdpExclude = make(map[string]*NokiaConf_Configure_Groups_Group_Service_PwTemplate_SdpExclude)
	}

	if _, ok := t.SdpExclude[key]; ok {
		return fmt.Errorf("duplicate key for list SdpExclude %v", key)
	}

	t.SdpExclude[key] = v
	return nil
}

// NewSdpInclude creates a new entry in the SdpInclude list of the
// NokiaConf_Configure_Groups_Group_Service_PwTemplate struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate) NewSdpInclude(GroupName string) (*NokiaConf_Configure_Groups_Group_Service_PwTemplate_SdpInclude, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SdpInclude == nil {
		t.SdpInclude = make(map[string]*NokiaConf_Configure_Groups_Group_Service_PwTemplate_SdpInclude)
	}

	key := GroupName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SdpInclude[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SdpInclude", key)
	}

	t.SdpInclude[key] = &NokiaConf_Configure_Groups_Group_Service_PwTemplate_SdpInclude{
		GroupName: &GroupName,
	}

	return t.SdpInclude[key], nil
}

// RenameSdpInclude renames an entry in the list SdpInclude within
// the NokiaConf_Configure_Groups_Group_Service_PwTemplate struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate) RenameSdpInclude(oldK, newK string) error {
	if _, ok := t.SdpInclude[newK]; ok {
		return fmt.Errorf("key %v already exists in SdpInclude", newK)
	}

	e, ok := t.SdpInclude[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SdpInclude", oldK)
	}
	e.GroupName = &newK

	t.SdpInclude[newK] = e
	delete(t.SdpInclude, oldK)
	return nil
}

// GetOrCreateSdpInclude retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_PwTemplate. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate) GetOrCreateSdpInclude(GroupName string) *NokiaConf_Configure_Groups_Group_Service_PwTemplate_SdpInclude {

	key := GroupName

	if v, ok := t.SdpInclude[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSdpInclude(GroupName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSdpInclude got unexpected error: %v", err))
	}
	return v
}

// GetSdpInclude retrieves the value with the specified key from
// the SdpInclude map field of NokiaConf_Configure_Groups_Group_Service_PwTemplate. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate) GetSdpInclude(GroupName string) *NokiaConf_Configure_Groups_Group_Service_PwTemplate_SdpInclude {

	if t == nil {
		return nil
	}

	key := GroupName

	if lm, ok := t.SdpInclude[key]; ok {
		return lm
	}
	return nil
}

// DeleteSdpInclude deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_PwTemplate. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate) DeleteSdpInclude(GroupName string) {
	key := GroupName

	delete(t.SdpInclude, key)
}

// AppendSdpInclude appends the supplied NokiaConf_Configure_Groups_Group_Service_PwTemplate_SdpInclude struct to the
// list SdpInclude of NokiaConf_Configure_Groups_Group_Service_PwTemplate. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_PwTemplate_SdpInclude already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate) AppendSdpInclude(v *NokiaConf_Configure_Groups_Group_Service_PwTemplate_SdpInclude) error {
	if v.GroupName == nil {
		return fmt.Errorf("invalid nil key received for GroupName")
	}

	key := *v.GroupName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SdpInclude == nil {
		t.SdpInclude = make(map[string]*NokiaConf_Configure_Groups_Group_Service_PwTemplate_SdpInclude)
	}

	if _, ok := t.SdpInclude[key]; ok {
		return fmt.Errorf("duplicate key for list SdpInclude %v", key)
	}

	t.SdpInclude[key] = v
	return nil
}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate) GetOrCreateEgress() *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress{}
	return t.Egress
}

// GetOrCreateEncryptionKeygroup retrieves the value of the EncryptionKeygroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate) GetOrCreateEncryptionKeygroup() *NokiaConf_Configure_Groups_Group_Service_PwTemplate_EncryptionKeygroup {
	if t.EncryptionKeygroup != nil {
		return t.EncryptionKeygroup
	}
	t.EncryptionKeygroup = &NokiaConf_Configure_Groups_Group_Service_PwTemplate_EncryptionKeygroup{}
	return t.EncryptionKeygroup
}

// GetOrCreateFdb retrieves the value of the Fdb field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate) GetOrCreateFdb() *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Fdb {
	if t.Fdb != nil {
		return t.Fdb
	}
	t.Fdb = &NokiaConf_Configure_Groups_Group_Service_PwTemplate_Fdb{}
	return t.Fdb
}

// GetOrCreateHashLabel retrieves the value of the HashLabel field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate) GetOrCreateHashLabel() *NokiaConf_Configure_Groups_Group_Service_PwTemplate_HashLabel {
	if t.HashLabel != nil {
		return t.HashLabel
	}
	t.HashLabel = &NokiaConf_Configure_Groups_Group_Service_PwTemplate_HashLabel{}
	return t.HashLabel
}

// GetOrCreateIgmpSnooping retrieves the value of the IgmpSnooping field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate) GetOrCreateIgmpSnooping() *NokiaConf_Configure_Groups_Group_Service_PwTemplate_IgmpSnooping {
	if t.IgmpSnooping != nil {
		return t.IgmpSnooping
	}
	t.IgmpSnooping = &NokiaConf_Configure_Groups_Group_Service_PwTemplate_IgmpSnooping{}
	return t.IgmpSnooping
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate) GetOrCreateIngress() *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress{}
	return t.Ingress
}

// GetOrCreateL2Pt retrieves the value of the L2Pt field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate) GetOrCreateL2Pt() *NokiaConf_Configure_Groups_Group_Service_PwTemplate_L2Pt {
	if t.L2Pt != nil {
		return t.L2Pt
	}
	t.L2Pt = &NokiaConf_Configure_Groups_Group_Service_PwTemplate_L2Pt{}
	return t.L2Pt
}

// GetOrCreateSplitHorizonGroup retrieves the value of the SplitHorizonGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate) GetOrCreateSplitHorizonGroup() *NokiaConf_Configure_Groups_Group_Service_PwTemplate_SplitHorizonGroup {
	if t.SplitHorizonGroup != nil {
		return t.SplitHorizonGroup
	}
	t.SplitHorizonGroup = &NokiaConf_Configure_Groups_Group_Service_PwTemplate_SplitHorizonGroup{}
	return t.SplitHorizonGroup
}

// GetOrCreateStp retrieves the value of the Stp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate) GetOrCreateStp() *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Stp {
	if t.Stp != nil {
		return t.Stp
	}
	t.Stp = &NokiaConf_Configure_Groups_Group_Service_PwTemplate_Stp{}
	return t.Stp
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Groups_Group_Service_PwTemplate. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate) GetEgress() *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetEncryptionKeygroup returns the value of the EncryptionKeygroup struct pointer
// from NokiaConf_Configure_Groups_Group_Service_PwTemplate. If the receiver or the field EncryptionKeygroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate) GetEncryptionKeygroup() *NokiaConf_Configure_Groups_Group_Service_PwTemplate_EncryptionKeygroup {
	if t != nil && t.EncryptionKeygroup != nil {
		return t.EncryptionKeygroup
	}
	return nil
}

// GetFdb returns the value of the Fdb struct pointer
// from NokiaConf_Configure_Groups_Group_Service_PwTemplate. If the receiver or the field Fdb is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate) GetFdb() *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Fdb {
	if t != nil && t.Fdb != nil {
		return t.Fdb
	}
	return nil
}

// GetHashLabel returns the value of the HashLabel struct pointer
// from NokiaConf_Configure_Groups_Group_Service_PwTemplate. If the receiver or the field HashLabel is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate) GetHashLabel() *NokiaConf_Configure_Groups_Group_Service_PwTemplate_HashLabel {
	if t != nil && t.HashLabel != nil {
		return t.HashLabel
	}
	return nil
}

// GetIgmpSnooping returns the value of the IgmpSnooping struct pointer
// from NokiaConf_Configure_Groups_Group_Service_PwTemplate. If the receiver or the field IgmpSnooping is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate) GetIgmpSnooping() *NokiaConf_Configure_Groups_Group_Service_PwTemplate_IgmpSnooping {
	if t != nil && t.IgmpSnooping != nil {
		return t.IgmpSnooping
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Groups_Group_Service_PwTemplate. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate) GetIngress() *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetL2Pt returns the value of the L2Pt struct pointer
// from NokiaConf_Configure_Groups_Group_Service_PwTemplate. If the receiver or the field L2Pt is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate) GetL2Pt() *NokiaConf_Configure_Groups_Group_Service_PwTemplate_L2Pt {
	if t != nil && t.L2Pt != nil {
		return t.L2Pt
	}
	return nil
}

// GetSplitHorizonGroup returns the value of the SplitHorizonGroup struct pointer
// from NokiaConf_Configure_Groups_Group_Service_PwTemplate. If the receiver or the field SplitHorizonGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate) GetSplitHorizonGroup() *NokiaConf_Configure_Groups_Group_Service_PwTemplate_SplitHorizonGroup {
	if t != nil && t.SplitHorizonGroup != nil {
		return t.SplitHorizonGroup
	}
	return nil
}

// GetStp returns the value of the Stp struct pointer
// from NokiaConf_Configure_Groups_Group_Service_PwTemplate. If the receiver or the field Stp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate) GetStp() *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Stp {
	if t != nil && t.Stp != nil {
		return t.Stp
	}
	return nil
}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Groups_Group_Service_PwTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetAllowFragmentation retrieves the value of the leaf AllowFragmentation from the NokiaConf_Configure_Groups_Group_Service_PwTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowFragmentation is set, it can
// safely use t.GetAllowFragmentation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowFragmentation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate) GetAllowFragmentation() bool {
	if t == nil || t.AllowFragmentation == nil {
		return false
	}
	return *t.AllowFragmentation
}

// GetAutoGreSdp retrieves the value of the leaf AutoGreSdp from the NokiaConf_Configure_Groups_Group_Service_PwTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoGreSdp is set, it can
// safely use t.GetAutoGreSdp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoGreSdp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate) GetAutoGreSdp() bool {
	if t == nil || t.AutoGreSdp == nil {
		return false
	}
	return *t.AutoGreSdp
}

// GetBlockOnPeerFault retrieves the value of the leaf BlockOnPeerFault from the NokiaConf_Configure_Groups_Group_Service_PwTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BlockOnPeerFault is set, it can
// safely use t.GetBlockOnPeerFault() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BlockOnPeerFault == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate) GetBlockOnPeerFault() bool {
	if t == nil || t.BlockOnPeerFault == nil {
		return false
	}
	return *t.BlockOnPeerFault
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_Groups_Group_Service_PwTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// GetControlWord retrieves the value of the leaf ControlWord from the NokiaConf_Configure_Groups_Group_Service_PwTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ControlWord is set, it can
// safely use t.GetControlWord() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ControlWord == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate) GetControlWord() bool {
	if t == nil || t.ControlWord == nil {
		return false
	}
	return *t.ControlWord
}

// GetEntropyLabel retrieves the value of the leaf EntropyLabel from the NokiaConf_Configure_Groups_Group_Service_PwTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntropyLabel is set, it can
// safely use t.GetEntropyLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntropyLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate) GetEntropyLabel() YANGEmpty {
	if t == nil || t.EntropyLabel == false {
		return false
	}
	return t.EntropyLabel
}

// GetForceVcForwarding retrieves the value of the leaf ForceVcForwarding from the NokiaConf_Configure_Groups_Group_Service_PwTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForceVcForwarding is set, it can
// safely use t.GetForceVcForwarding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForceVcForwarding == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate) GetForceVcForwarding() E_NokiaConf_Configure_Groups_Group_Service_PwTemplate_ForceVcForwarding {
	if t == nil || t.ForceVcForwarding == 0 {
		return 0
	}
	return t.ForceVcForwarding
}

// GetProvisionedSdp retrieves the value of the leaf ProvisionedSdp from the NokiaConf_Configure_Groups_Group_Service_PwTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProvisionedSdp is set, it can
// safely use t.GetProvisionedSdp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProvisionedSdp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate) GetProvisionedSdp() E_NokiaTypesServices_ProvisionedSdp {
	if t == nil || t.ProvisionedSdp == 0 {
		return 0
	}
	return t.ProvisionedSdp
}

// GetPwTemplateId retrieves the value of the leaf PwTemplateId from the NokiaConf_Configure_Groups_Group_Service_PwTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PwTemplateId is set, it can
// safely use t.GetPwTemplateId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PwTemplateId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate) GetPwTemplateId() uint32 {
	if t == nil || t.PwTemplateId == nil {
		return 0
	}
	return *t.PwTemplateId
}

// GetPwTemplateName retrieves the value of the leaf PwTemplateName from the NokiaConf_Configure_Groups_Group_Service_PwTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PwTemplateName is set, it can
// safely use t.GetPwTemplateName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PwTemplateName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate) GetPwTemplateName() string {
	if t == nil || t.PwTemplateName == nil {
		return ""
	}
	return *t.PwTemplateName
}

// GetVcType retrieves the value of the leaf VcType from the NokiaConf_Configure_Groups_Group_Service_PwTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VcType is set, it can
// safely use t.GetVcType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VcType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate) GetVcType() E_NokiaTypesServices_PwTemplateSdpBindVcType {
	if t == nil || t.VcType == 0 {
		return NokiaTypesServices_PwTemplateSdpBindVcType_ether
	}
	return t.VcType
}

// GetVlanVcTag retrieves the value of the leaf VlanVcTag from the NokiaConf_Configure_Groups_Group_Service_PwTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VlanVcTag is set, it can
// safely use t.GetVlanVcTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VlanVcTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate) GetVlanVcTag() uint32 {
	if t == nil || t.VlanVcTag == nil {
		return 0
	}
	return *t.VlanVcTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_PwTemplate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowFragmentation == nil {
		var v bool = false
		t.AllowFragmentation = &v
	}
	if t.AutoGreSdp == nil {
		var v bool = false
		t.AutoGreSdp = &v
	}
	if t.BlockOnPeerFault == nil {
		var v bool = false
		t.BlockOnPeerFault = &v
	}
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
	if t.ControlWord == nil {
		var v bool = false
		t.ControlWord = &v
	}
	if t.VcType == 0 {
		t.VcType = NokiaTypesServices_PwTemplateSdpBindVcType_ether
	}
	t.Egress.PopulateDefaults()
	t.EncryptionKeygroup.PopulateDefaults()
	t.Fdb.PopulateDefaults()
	t.HashLabel.PopulateDefaults()
	t.IgmpSnooping.PopulateDefaults()
	t.Ingress.PopulateDefaults()
	t.L2Pt.PopulateDefaults()
	t.SplitHorizonGroup.PopulateDefaults()
	t.Stp.PopulateDefaults()
	for _, e := range t.SdpExclude {
		e.PopulateDefaults()
	}
	for _, e := range t.SdpInclude {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_PwTemplate struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PwTemplateName == nil {
		return nil, fmt.Errorf("nil value for key PwTemplateName")
	}

	return map[string]interface{}{
		"pw-template-name": *t.PwTemplateName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_PwTemplate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_PwTemplate.
func (*NokiaConf_Configure_Groups_Group_Service_PwTemplate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress represents the /nokia-conf/configure/groups/group/service/pw-template/egress YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress struct {
	Filter                     *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Filter                     `path:"filter" module:"nokia-conf"`
	MfibAllowedMdaDestinations *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_MfibAllowedMdaDestinations `path:"mfib-allowed-mda-destinations" module:"nokia-conf"`
	Qos                        *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Qos                        `path:"qos" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress) IsYANGGoStruct() {}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress) GetOrCreateFilter() *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Filter{}
	return t.Filter
}

// GetOrCreateMfibAllowedMdaDestinations retrieves the value of the MfibAllowedMdaDestinations field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress) GetOrCreateMfibAllowedMdaDestinations() *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_MfibAllowedMdaDestinations {
	if t.MfibAllowedMdaDestinations != nil {
		return t.MfibAllowedMdaDestinations
	}
	t.MfibAllowedMdaDestinations = &NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_MfibAllowedMdaDestinations{}
	return t.MfibAllowedMdaDestinations
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress) GetOrCreateQos() *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Qos{}
	return t.Qos
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress) GetFilter() *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetMfibAllowedMdaDestinations returns the value of the MfibAllowedMdaDestinations struct pointer
// from NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress. If the receiver or the field MfibAllowedMdaDestinations is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress) GetMfibAllowedMdaDestinations() *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_MfibAllowedMdaDestinations {
	if t != nil && t.MfibAllowedMdaDestinations != nil {
		return t.MfibAllowedMdaDestinations
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress) GetQos() *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Filter.PopulateDefaults()
	t.MfibAllowedMdaDestinations.PopulateDefaults()
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress.
func (*NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Filter represents the /nokia-conf/configure/groups/group/service/pw-template/egress/filter YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Filter struct {
	Ip   *string `path:"ip" module:"nokia-conf"`
	Ipv6 *string `path:"ipv6" module:"nokia-conf"`
	Mac  *string `path:"mac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Filter) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Filter) GetIpv6() string {
	if t == nil || t.Ipv6 == nil {
		return ""
	}
	return *t.Ipv6
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Filter) GetMac() string {
	if t == nil || t.Mac == nil {
		return ""
	}
	return *t.Mac
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Filter.
func (*NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_MfibAllowedMdaDestinations represents the /nokia-conf/configure/groups/group/service/pw-template/egress/mfib-allowed-mda-destinations YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_MfibAllowedMdaDestinations struct {
	Mda map[string]*NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_MfibAllowedMdaDestinations_Mda `path:"mda" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_MfibAllowedMdaDestinations implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_MfibAllowedMdaDestinations) IsYANGGoStruct() {
}

// NewMda creates a new entry in the Mda list of the
// NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_MfibAllowedMdaDestinations struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_MfibAllowedMdaDestinations) NewMda(MdaId string) (*NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_MfibAllowedMdaDestinations_Mda, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mda == nil {
		t.Mda = make(map[string]*NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_MfibAllowedMdaDestinations_Mda)
	}

	key := MdaId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mda[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mda", key)
	}

	t.Mda[key] = &NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_MfibAllowedMdaDestinations_Mda{
		MdaId: &MdaId,
	}

	return t.Mda[key], nil
}

// RenameMda renames an entry in the list Mda within
// the NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_MfibAllowedMdaDestinations struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_MfibAllowedMdaDestinations) RenameMda(oldK, newK string) error {
	if _, ok := t.Mda[newK]; ok {
		return fmt.Errorf("key %v already exists in Mda", newK)
	}

	e, ok := t.Mda[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mda", oldK)
	}
	e.MdaId = &newK

	t.Mda[newK] = e
	delete(t.Mda, oldK)
	return nil
}

// GetOrCreateMda retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_MfibAllowedMdaDestinations. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_MfibAllowedMdaDestinations) GetOrCreateMda(MdaId string) *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_MfibAllowedMdaDestinations_Mda {

	key := MdaId

	if v, ok := t.Mda[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMda(MdaId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMda got unexpected error: %v", err))
	}
	return v
}

// GetMda retrieves the value with the specified key from
// the Mda map field of NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_MfibAllowedMdaDestinations. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_MfibAllowedMdaDestinations) GetMda(MdaId string) *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_MfibAllowedMdaDestinations_Mda {

	if t == nil {
		return nil
	}

	key := MdaId

	if lm, ok := t.Mda[key]; ok {
		return lm
	}
	return nil
}

// DeleteMda deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_MfibAllowedMdaDestinations. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_MfibAllowedMdaDestinations) DeleteMda(MdaId string) {
	key := MdaId

	delete(t.Mda, key)
}

// AppendMda appends the supplied NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_MfibAllowedMdaDestinations_Mda struct to the
// list Mda of NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_MfibAllowedMdaDestinations. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_MfibAllowedMdaDestinations_Mda already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_MfibAllowedMdaDestinations) AppendMda(v *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_MfibAllowedMdaDestinations_Mda) error {
	if v.MdaId == nil {
		return fmt.Errorf("invalid nil key received for MdaId")
	}

	key := *v.MdaId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mda == nil {
		t.Mda = make(map[string]*NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_MfibAllowedMdaDestinations_Mda)
	}

	if _, ok := t.Mda[key]; ok {
		return fmt.Errorf("duplicate key for list Mda %v", key)
	}

	t.Mda[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_MfibAllowedMdaDestinations
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_MfibAllowedMdaDestinations) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Mda {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_MfibAllowedMdaDestinations) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_MfibAllowedMdaDestinations"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_MfibAllowedMdaDestinations) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_MfibAllowedMdaDestinations) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_MfibAllowedMdaDestinations.
func (*NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_MfibAllowedMdaDestinations) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_MfibAllowedMdaDestinations_Mda represents the /nokia-conf/configure/groups/group/service/pw-template/egress/mfib-allowed-mda-destinations/mda YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_MfibAllowedMdaDestinations_Mda struct {
	MdaId *string `path:"mda-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_MfibAllowedMdaDestinations_Mda implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_MfibAllowedMdaDestinations_Mda) IsYANGGoStruct() {
}

// GetMdaId retrieves the value of the leaf MdaId from the NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_MfibAllowedMdaDestinations_Mda
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MdaId is set, it can
// safely use t.GetMdaId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MdaId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_MfibAllowedMdaDestinations_Mda) GetMdaId() string {
	if t == nil || t.MdaId == nil {
		return ""
	}
	return *t.MdaId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_MfibAllowedMdaDestinations_Mda
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_MfibAllowedMdaDestinations_Mda) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_MfibAllowedMdaDestinations_Mda struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_MfibAllowedMdaDestinations_Mda) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MdaId == nil {
		return nil, fmt.Errorf("nil value for key MdaId")
	}

	return map[string]interface{}{
		"mda-id": *t.MdaId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_MfibAllowedMdaDestinations_Mda) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_MfibAllowedMdaDestinations_Mda"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_MfibAllowedMdaDestinations_Mda) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_MfibAllowedMdaDestinations_Mda) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_MfibAllowedMdaDestinations_Mda.
func (*NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_MfibAllowedMdaDestinations_Mda) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Qos represents the /nokia-conf/configure/groups/group/service/pw-template/egress/qos YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Qos struct {
	Network *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Qos_Network `path:"network" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Qos) IsYANGGoStruct() {}

// GetOrCreateNetwork retrieves the value of the Network field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Qos) GetOrCreateNetwork() *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Qos_Network {
	if t.Network != nil {
		return t.Network
	}
	t.Network = &NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Qos_Network{}
	return t.Network
}

// GetNetwork returns the value of the Network struct pointer
// from NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Qos. If the receiver or the field Network is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Qos) GetNetwork() *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Qos_Network {
	if t != nil && t.Network != nil {
		return t.Network
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Network.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Qos.
func (*NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Qos_Network represents the /nokia-conf/configure/groups/group/service/pw-template/egress/qos/network YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Qos_Network struct {
	PolicyName        *string                                                                                   `path:"policy-name" module:"nokia-conf"`
	PortRedirectGroup *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Qos_Network_PortRedirectGroup `path:"port-redirect-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Qos_Network implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Qos_Network) IsYANGGoStruct() {}

// GetOrCreatePortRedirectGroup retrieves the value of the PortRedirectGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Qos_Network) GetOrCreatePortRedirectGroup() *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Qos_Network_PortRedirectGroup {
	if t.PortRedirectGroup != nil {
		return t.PortRedirectGroup
	}
	t.PortRedirectGroup = &NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Qos_Network_PortRedirectGroup{}
	return t.PortRedirectGroup
}

// GetPortRedirectGroup returns the value of the PortRedirectGroup struct pointer
// from NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Qos_Network. If the receiver or the field PortRedirectGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Qos_Network) GetPortRedirectGroup() *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Qos_Network_PortRedirectGroup {
	if t != nil && t.PortRedirectGroup != nil {
		return t.PortRedirectGroup
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Qos_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Qos_Network) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Qos_Network
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Qos_Network) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PortRedirectGroup.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Qos_Network) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Qos_Network"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Qos_Network) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Qos_Network) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Qos_Network.
func (*NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Qos_Network) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Qos_Network_PortRedirectGroup represents the /nokia-conf/configure/groups/group/service/pw-template/egress/qos/network/port-redirect-group YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Qos_Network_PortRedirectGroup struct {
	GroupName *string `path:"group-name" module:"nokia-conf"`
	Instance  *uint32 `path:"instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Qos_Network_PortRedirectGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Qos_Network_PortRedirectGroup) IsYANGGoStruct() {
}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Qos_Network_PortRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Qos_Network_PortRedirectGroup) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// GetInstance retrieves the value of the leaf Instance from the NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Qos_Network_PortRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instance is set, it can
// safely use t.GetInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Qos_Network_PortRedirectGroup) GetInstance() uint32 {
	if t == nil || t.Instance == nil {
		return 0
	}
	return *t.Instance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Qos_Network_PortRedirectGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Qos_Network_PortRedirectGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Qos_Network_PortRedirectGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Qos_Network_PortRedirectGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Qos_Network_PortRedirectGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Qos_Network_PortRedirectGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Qos_Network_PortRedirectGroup.
func (*NokiaConf_Configure_Groups_Group_Service_PwTemplate_Egress_Qos_Network_PortRedirectGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_PwTemplate_EncryptionKeygroup represents the /nokia-conf/configure/groups/group/service/pw-template/encryption-keygroup YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_PwTemplate_EncryptionKeygroup struct {
	Inbound  *uint32 `path:"inbound" module:"nokia-conf"`
	Outbound *uint32 `path:"outbound" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_PwTemplate_EncryptionKeygroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_PwTemplate_EncryptionKeygroup) IsYANGGoStruct() {}

// GetInbound retrieves the value of the leaf Inbound from the NokiaConf_Configure_Groups_Group_Service_PwTemplate_EncryptionKeygroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Inbound is set, it can
// safely use t.GetInbound() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Inbound == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_EncryptionKeygroup) GetInbound() uint32 {
	if t == nil || t.Inbound == nil {
		return 0
	}
	return *t.Inbound
}

// GetOutbound retrieves the value of the leaf Outbound from the NokiaConf_Configure_Groups_Group_Service_PwTemplate_EncryptionKeygroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Outbound is set, it can
// safely use t.GetOutbound() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Outbound == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_EncryptionKeygroup) GetOutbound() uint32 {
	if t == nil || t.Outbound == nil {
		return 0
	}
	return *t.Outbound
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_PwTemplate_EncryptionKeygroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_EncryptionKeygroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_EncryptionKeygroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_PwTemplate_EncryptionKeygroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_EncryptionKeygroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_EncryptionKeygroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_PwTemplate_EncryptionKeygroup.
func (*NokiaConf_Configure_Groups_Group_Service_PwTemplate_EncryptionKeygroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_PwTemplate_Fdb represents the /nokia-conf/configure/groups/group/service/pw-template/fdb YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_PwTemplate_Fdb struct {
	AutoLearnMacProtect            *bool                                                                `path:"auto-learn-mac-protect" module:"nokia-conf"`
	AutoLearnMacProtectExcludeList *string                                                              `path:"auto-learn-mac-protect-exclude-list" module:"nokia-conf"`
	DiscardUnknownSource           *bool                                                                `path:"discard-unknown-source" module:"nokia-conf"`
	LimitMacMove                   E_NokiaTypesServices_VplsLimitMacMove                                `path:"limit-mac-move" module:"nokia-conf"`
	MacLearning                    *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Fdb_MacLearning `path:"mac-learning" module:"nokia-conf"`
	MacPinning                     *bool                                                                `path:"mac-pinning" module:"nokia-conf"`
	MaximumMacAddresses            *uint32                                                              `path:"maximum-mac-addresses" module:"nokia-conf"`
	ProtectedSrcMacViolationAction E_NokiaTypesServices_SdpProtectedSrcMacViolationAction               `path:"protected-src-mac-violation-action" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_PwTemplate_Fdb implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_PwTemplate_Fdb) IsYANGGoStruct() {}

// GetOrCreateMacLearning retrieves the value of the MacLearning field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Fdb) GetOrCreateMacLearning() *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Fdb_MacLearning {
	if t.MacLearning != nil {
		return t.MacLearning
	}
	t.MacLearning = &NokiaConf_Configure_Groups_Group_Service_PwTemplate_Fdb_MacLearning{}
	return t.MacLearning
}

// GetMacLearning returns the value of the MacLearning struct pointer
// from NokiaConf_Configure_Groups_Group_Service_PwTemplate_Fdb. If the receiver or the field MacLearning is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Fdb) GetMacLearning() *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Fdb_MacLearning {
	if t != nil && t.MacLearning != nil {
		return t.MacLearning
	}
	return nil
}

// GetAutoLearnMacProtect retrieves the value of the leaf AutoLearnMacProtect from the NokiaConf_Configure_Groups_Group_Service_PwTemplate_Fdb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoLearnMacProtect is set, it can
// safely use t.GetAutoLearnMacProtect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoLearnMacProtect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Fdb) GetAutoLearnMacProtect() bool {
	if t == nil || t.AutoLearnMacProtect == nil {
		return false
	}
	return *t.AutoLearnMacProtect
}

// GetAutoLearnMacProtectExcludeList retrieves the value of the leaf AutoLearnMacProtectExcludeList from the NokiaConf_Configure_Groups_Group_Service_PwTemplate_Fdb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoLearnMacProtectExcludeList is set, it can
// safely use t.GetAutoLearnMacProtectExcludeList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoLearnMacProtectExcludeList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Fdb) GetAutoLearnMacProtectExcludeList() string {
	if t == nil || t.AutoLearnMacProtectExcludeList == nil {
		return ""
	}
	return *t.AutoLearnMacProtectExcludeList
}

// GetDiscardUnknownSource retrieves the value of the leaf DiscardUnknownSource from the NokiaConf_Configure_Groups_Group_Service_PwTemplate_Fdb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DiscardUnknownSource is set, it can
// safely use t.GetDiscardUnknownSource() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DiscardUnknownSource == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Fdb) GetDiscardUnknownSource() bool {
	if t == nil || t.DiscardUnknownSource == nil {
		return false
	}
	return *t.DiscardUnknownSource
}

// GetLimitMacMove retrieves the value of the leaf LimitMacMove from the NokiaConf_Configure_Groups_Group_Service_PwTemplate_Fdb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LimitMacMove is set, it can
// safely use t.GetLimitMacMove() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LimitMacMove == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Fdb) GetLimitMacMove() E_NokiaTypesServices_VplsLimitMacMove {
	if t == nil || t.LimitMacMove == 0 {
		return NokiaTypesServices_VplsLimitMacMove_blockable
	}
	return t.LimitMacMove
}

// GetMacPinning retrieves the value of the leaf MacPinning from the NokiaConf_Configure_Groups_Group_Service_PwTemplate_Fdb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacPinning is set, it can
// safely use t.GetMacPinning() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacPinning == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Fdb) GetMacPinning() bool {
	if t == nil || t.MacPinning == nil {
		return false
	}
	return *t.MacPinning
}

// GetMaximumMacAddresses retrieves the value of the leaf MaximumMacAddresses from the NokiaConf_Configure_Groups_Group_Service_PwTemplate_Fdb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumMacAddresses is set, it can
// safely use t.GetMaximumMacAddresses() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumMacAddresses == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Fdb) GetMaximumMacAddresses() uint32 {
	if t == nil || t.MaximumMacAddresses == nil {
		return 0
	}
	return *t.MaximumMacAddresses
}

// GetProtectedSrcMacViolationAction retrieves the value of the leaf ProtectedSrcMacViolationAction from the NokiaConf_Configure_Groups_Group_Service_PwTemplate_Fdb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProtectedSrcMacViolationAction is set, it can
// safely use t.GetProtectedSrcMacViolationAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProtectedSrcMacViolationAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Fdb) GetProtectedSrcMacViolationAction() E_NokiaTypesServices_SdpProtectedSrcMacViolationAction {
	if t == nil || t.ProtectedSrcMacViolationAction == 0 {
		return 0
	}
	return t.ProtectedSrcMacViolationAction
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_PwTemplate_Fdb
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Fdb) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AutoLearnMacProtect == nil {
		var v bool = false
		t.AutoLearnMacProtect = &v
	}
	if t.DiscardUnknownSource == nil {
		var v bool = false
		t.DiscardUnknownSource = &v
	}
	if t.LimitMacMove == 0 {
		t.LimitMacMove = NokiaTypesServices_VplsLimitMacMove_blockable
	}
	if t.MacPinning == nil {
		var v bool = false
		t.MacPinning = &v
	}
	t.MacLearning.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Fdb) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_PwTemplate_Fdb"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Fdb) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Fdb) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_PwTemplate_Fdb.
func (*NokiaConf_Configure_Groups_Group_Service_PwTemplate_Fdb) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_PwTemplate_Fdb_MacLearning represents the /nokia-conf/configure/groups/group/service/pw-template/fdb/mac-learning YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_PwTemplate_Fdb_MacLearning struct {
	Aging    *bool `path:"aging" module:"nokia-conf"`
	Learning *bool `path:"learning" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_PwTemplate_Fdb_MacLearning implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_PwTemplate_Fdb_MacLearning) IsYANGGoStruct() {}

// GetAging retrieves the value of the leaf Aging from the NokiaConf_Configure_Groups_Group_Service_PwTemplate_Fdb_MacLearning
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Aging is set, it can
// safely use t.GetAging() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Aging == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Fdb_MacLearning) GetAging() bool {
	if t == nil || t.Aging == nil {
		return true
	}
	return *t.Aging
}

// GetLearning retrieves the value of the leaf Learning from the NokiaConf_Configure_Groups_Group_Service_PwTemplate_Fdb_MacLearning
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Learning is set, it can
// safely use t.GetLearning() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Learning == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Fdb_MacLearning) GetLearning() bool {
	if t == nil || t.Learning == nil {
		return true
	}
	return *t.Learning
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_PwTemplate_Fdb_MacLearning
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Fdb_MacLearning) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Aging == nil {
		var v bool = true
		t.Aging = &v
	}
	if t.Learning == nil {
		var v bool = true
		t.Learning = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Fdb_MacLearning) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_PwTemplate_Fdb_MacLearning"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Fdb_MacLearning) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Fdb_MacLearning) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_PwTemplate_Fdb_MacLearning.
func (*NokiaConf_Configure_Groups_Group_Service_PwTemplate_Fdb_MacLearning) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_PwTemplate_HashLabel represents the /nokia-conf/configure/groups/group/service/pw-template/hash-label YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_PwTemplate_HashLabel struct {
	SignalCapability YANGEmpty `path:"signal-capability" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_PwTemplate_HashLabel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_PwTemplate_HashLabel) IsYANGGoStruct() {}

// GetSignalCapability retrieves the value of the leaf SignalCapability from the NokiaConf_Configure_Groups_Group_Service_PwTemplate_HashLabel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SignalCapability is set, it can
// safely use t.GetSignalCapability() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SignalCapability == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_HashLabel) GetSignalCapability() YANGEmpty {
	if t == nil || t.SignalCapability == false {
		return false
	}
	return t.SignalCapability
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_PwTemplate_HashLabel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_HashLabel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_HashLabel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_PwTemplate_HashLabel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_HashLabel) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_HashLabel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_PwTemplate_HashLabel.
func (*NokiaConf_Configure_Groups_Group_Service_PwTemplate_HashLabel) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_PwTemplate_IgmpSnooping represents the /nokia-conf/configure/groups/group/service/pw-template/igmp-snooping YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_PwTemplate_IgmpSnooping struct {
	FastLeave               *bool                        `path:"fast-leave" module:"nokia-conf"`
	ImportPolicy            *string                      `path:"import-policy" module:"nokia-conf"`
	MaximumNumberGroups     *uint32                      `path:"maximum-number-groups" module:"nokia-conf"`
	QueryInterval           *uint32                      `path:"query-interval" module:"nokia-conf"`
	QueryLastMemberInterval *uint32                      `path:"query-last-member-interval" module:"nokia-conf"`
	QueryResponseInterval   *uint32                      `path:"query-response-interval" module:"nokia-conf"`
	RobustCount             *uint32                      `path:"robust-count" module:"nokia-conf"`
	SendQueries             *bool                        `path:"send-queries" module:"nokia-conf"`
	Version                 E_NokiaTypesIgmp_IgmpVersion `path:"version" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_PwTemplate_IgmpSnooping implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_PwTemplate_IgmpSnooping) IsYANGGoStruct() {}

// GetFastLeave retrieves the value of the leaf FastLeave from the NokiaConf_Configure_Groups_Group_Service_PwTemplate_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FastLeave is set, it can
// safely use t.GetFastLeave() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FastLeave == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_IgmpSnooping) GetFastLeave() bool {
	if t == nil || t.FastLeave == nil {
		return false
	}
	return *t.FastLeave
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Groups_Group_Service_PwTemplate_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_IgmpSnooping) GetImportPolicy() string {
	if t == nil || t.ImportPolicy == nil {
		return ""
	}
	return *t.ImportPolicy
}

// GetMaximumNumberGroups retrieves the value of the leaf MaximumNumberGroups from the NokiaConf_Configure_Groups_Group_Service_PwTemplate_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroups is set, it can
// safely use t.GetMaximumNumberGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_IgmpSnooping) GetMaximumNumberGroups() uint32 {
	if t == nil || t.MaximumNumberGroups == nil {
		return 0
	}
	return *t.MaximumNumberGroups
}

// GetQueryInterval retrieves the value of the leaf QueryInterval from the NokiaConf_Configure_Groups_Group_Service_PwTemplate_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryInterval is set, it can
// safely use t.GetQueryInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_IgmpSnooping) GetQueryInterval() uint32 {
	if t == nil || t.QueryInterval == nil {
		return 125
	}
	return *t.QueryInterval
}

// GetQueryLastMemberInterval retrieves the value of the leaf QueryLastMemberInterval from the NokiaConf_Configure_Groups_Group_Service_PwTemplate_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryLastMemberInterval is set, it can
// safely use t.GetQueryLastMemberInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryLastMemberInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_IgmpSnooping) GetQueryLastMemberInterval() uint32 {
	if t == nil || t.QueryLastMemberInterval == nil {
		return 10
	}
	return *t.QueryLastMemberInterval
}

// GetQueryResponseInterval retrieves the value of the leaf QueryResponseInterval from the NokiaConf_Configure_Groups_Group_Service_PwTemplate_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryResponseInterval is set, it can
// safely use t.GetQueryResponseInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryResponseInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_IgmpSnooping) GetQueryResponseInterval() uint32 {
	if t == nil || t.QueryResponseInterval == nil {
		return 10
	}
	return *t.QueryResponseInterval
}

// GetRobustCount retrieves the value of the leaf RobustCount from the NokiaConf_Configure_Groups_Group_Service_PwTemplate_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RobustCount is set, it can
// safely use t.GetRobustCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RobustCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_IgmpSnooping) GetRobustCount() uint32 {
	if t == nil || t.RobustCount == nil {
		return 2
	}
	return *t.RobustCount
}

// GetSendQueries retrieves the value of the leaf SendQueries from the NokiaConf_Configure_Groups_Group_Service_PwTemplate_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SendQueries is set, it can
// safely use t.GetSendQueries() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SendQueries == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_IgmpSnooping) GetSendQueries() bool {
	if t == nil || t.SendQueries == nil {
		return false
	}
	return *t.SendQueries
}

// GetVersion retrieves the value of the leaf Version from the NokiaConf_Configure_Groups_Group_Service_PwTemplate_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_IgmpSnooping) GetVersion() E_NokiaTypesIgmp_IgmpVersion {
	if t == nil || t.Version == 0 {
		return NokiaTypesIgmp_IgmpVersion_3
	}
	return t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_PwTemplate_IgmpSnooping
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_IgmpSnooping) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FastLeave == nil {
		var v bool = false
		t.FastLeave = &v
	}
	if t.QueryInterval == nil {
		var v uint32 = 125
		t.QueryInterval = &v
	}
	if t.QueryLastMemberInterval == nil {
		var v uint32 = 10
		t.QueryLastMemberInterval = &v
	}
	if t.QueryResponseInterval == nil {
		var v uint32 = 10
		t.QueryResponseInterval = &v
	}
	if t.RobustCount == nil {
		var v uint32 = 2
		t.RobustCount = &v
	}
	if t.SendQueries == nil {
		var v bool = false
		t.SendQueries = &v
	}
	if t.Version == 0 {
		t.Version = NokiaTypesIgmp_IgmpVersion_3
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_IgmpSnooping) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_PwTemplate_IgmpSnooping"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_IgmpSnooping) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_IgmpSnooping) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_PwTemplate_IgmpSnooping.
func (*NokiaConf_Configure_Groups_Group_Service_PwTemplate_IgmpSnooping) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress represents the /nokia-conf/configure/groups/group/service/pw-template/ingress YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress struct {
	Filter *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Filter `path:"filter" module:"nokia-conf"`
	Qos    *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Qos    `path:"qos" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress) IsYANGGoStruct() {}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress) GetOrCreateFilter() *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Filter{}
	return t.Filter
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress) GetOrCreateQos() *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Qos{}
	return t.Qos
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress) GetFilter() *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress) GetQos() *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Filter.PopulateDefaults()
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress.
func (*NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Filter represents the /nokia-conf/configure/groups/group/service/pw-template/ingress/filter YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Filter struct {
	Ip   *string `path:"ip" module:"nokia-conf"`
	Ipv6 *string `path:"ipv6" module:"nokia-conf"`
	Mac  *string `path:"mac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Filter) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Filter) GetIpv6() string {
	if t == nil || t.Ipv6 == nil {
		return ""
	}
	return *t.Ipv6
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Filter) GetMac() string {
	if t == nil || t.Mac == nil {
		return ""
	}
	return *t.Mac
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Filter.
func (*NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Qos represents the /nokia-conf/configure/groups/group/service/pw-template/ingress/qos YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Qos struct {
	Network *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Qos_Network `path:"network" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Qos) IsYANGGoStruct() {}

// GetOrCreateNetwork retrieves the value of the Network field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Qos) GetOrCreateNetwork() *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Qos_Network {
	if t.Network != nil {
		return t.Network
	}
	t.Network = &NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Qos_Network{}
	return t.Network
}

// GetNetwork returns the value of the Network struct pointer
// from NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Qos. If the receiver or the field Network is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Qos) GetNetwork() *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Qos_Network {
	if t != nil && t.Network != nil {
		return t.Network
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Network.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Qos.
func (*NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Qos_Network represents the /nokia-conf/configure/groups/group/service/pw-template/ingress/qos/network YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Qos_Network struct {
	FpRedirectGroup *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Qos_Network_FpRedirectGroup `path:"fp-redirect-group" module:"nokia-conf"`
	PolicyName      *string                                                                                  `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Qos_Network implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Qos_Network) IsYANGGoStruct() {}

// GetOrCreateFpRedirectGroup retrieves the value of the FpRedirectGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Qos_Network) GetOrCreateFpRedirectGroup() *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Qos_Network_FpRedirectGroup {
	if t.FpRedirectGroup != nil {
		return t.FpRedirectGroup
	}
	t.FpRedirectGroup = &NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Qos_Network_FpRedirectGroup{}
	return t.FpRedirectGroup
}

// GetFpRedirectGroup returns the value of the FpRedirectGroup struct pointer
// from NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Qos_Network. If the receiver or the field FpRedirectGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Qos_Network) GetFpRedirectGroup() *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Qos_Network_FpRedirectGroup {
	if t != nil && t.FpRedirectGroup != nil {
		return t.FpRedirectGroup
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Qos_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Qos_Network) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Qos_Network
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Qos_Network) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.FpRedirectGroup.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Qos_Network) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Qos_Network"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Qos_Network) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Qos_Network) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Qos_Network.
func (*NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Qos_Network) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Qos_Network_FpRedirectGroup represents the /nokia-conf/configure/groups/group/service/pw-template/ingress/qos/network/fp-redirect-group YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Qos_Network_FpRedirectGroup struct {
	GroupName *string `path:"group-name" module:"nokia-conf"`
	Instance  *uint32 `path:"instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Qos_Network_FpRedirectGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Qos_Network_FpRedirectGroup) IsYANGGoStruct() {
}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Qos_Network_FpRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Qos_Network_FpRedirectGroup) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// GetInstance retrieves the value of the leaf Instance from the NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Qos_Network_FpRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instance is set, it can
// safely use t.GetInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Qos_Network_FpRedirectGroup) GetInstance() uint32 {
	if t == nil || t.Instance == nil {
		return 0
	}
	return *t.Instance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Qos_Network_FpRedirectGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Qos_Network_FpRedirectGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Qos_Network_FpRedirectGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Qos_Network_FpRedirectGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Qos_Network_FpRedirectGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Qos_Network_FpRedirectGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Qos_Network_FpRedirectGroup.
func (*NokiaConf_Configure_Groups_Group_Service_PwTemplate_Ingress_Qos_Network_FpRedirectGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_PwTemplate_L2Pt represents the /nokia-conf/configure/groups/group/service/pw-template/l2pt YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_PwTemplate_L2Pt struct {
	Termination *NokiaConf_Configure_Groups_Group_Service_PwTemplate_L2Pt_Termination `path:"termination" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_PwTemplate_L2Pt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_PwTemplate_L2Pt) IsYANGGoStruct() {}

// GetOrCreateTermination retrieves the value of the Termination field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_L2Pt) GetOrCreateTermination() *NokiaConf_Configure_Groups_Group_Service_PwTemplate_L2Pt_Termination {
	if t.Termination != nil {
		return t.Termination
	}
	t.Termination = &NokiaConf_Configure_Groups_Group_Service_PwTemplate_L2Pt_Termination{}
	return t.Termination
}

// GetTermination returns the value of the Termination struct pointer
// from NokiaConf_Configure_Groups_Group_Service_PwTemplate_L2Pt. If the receiver or the field Termination is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_L2Pt) GetTermination() *NokiaConf_Configure_Groups_Group_Service_PwTemplate_L2Pt_Termination {
	if t != nil && t.Termination != nil {
		return t.Termination
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_PwTemplate_L2Pt
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_L2Pt) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Termination.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_L2Pt) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_PwTemplate_L2Pt"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_L2Pt) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_L2Pt) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_PwTemplate_L2Pt.
func (*NokiaConf_Configure_Groups_Group_Service_PwTemplate_L2Pt) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_PwTemplate_L2Pt_Termination represents the /nokia-conf/configure/groups/group/service/pw-template/l2pt/termination YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_PwTemplate_L2Pt_Termination struct {
	Protocols *NokiaConf_Configure_Groups_Group_Service_PwTemplate_L2Pt_Termination_Protocols `path:"protocols" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_PwTemplate_L2Pt_Termination implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_PwTemplate_L2Pt_Termination) IsYANGGoStruct() {}

// GetOrCreateProtocols retrieves the value of the Protocols field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_L2Pt_Termination) GetOrCreateProtocols() *NokiaConf_Configure_Groups_Group_Service_PwTemplate_L2Pt_Termination_Protocols {
	if t.Protocols != nil {
		return t.Protocols
	}
	t.Protocols = &NokiaConf_Configure_Groups_Group_Service_PwTemplate_L2Pt_Termination_Protocols{}
	return t.Protocols
}

// GetProtocols returns the value of the Protocols struct pointer
// from NokiaConf_Configure_Groups_Group_Service_PwTemplate_L2Pt_Termination. If the receiver or the field Protocols is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_L2Pt_Termination) GetProtocols() *NokiaConf_Configure_Groups_Group_Service_PwTemplate_L2Pt_Termination_Protocols {
	if t != nil && t.Protocols != nil {
		return t.Protocols
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_PwTemplate_L2Pt_Termination
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_L2Pt_Termination) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Protocols.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_L2Pt_Termination) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_PwTemplate_L2Pt_Termination"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_L2Pt_Termination) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_L2Pt_Termination) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_PwTemplate_L2Pt_Termination.
func (*NokiaConf_Configure_Groups_Group_Service_PwTemplate_L2Pt_Termination) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_PwTemplate_L2Pt_Termination_Protocols represents the /nokia-conf/configure/groups/group/service/pw-template/l2pt/termination/protocols YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_PwTemplate_L2Pt_Termination_Protocols struct {
	Cdp  *bool `path:"cdp" module:"nokia-conf"`
	Dtp  *bool `path:"dtp" module:"nokia-conf"`
	Pagp *bool `path:"pagp" module:"nokia-conf"`
	Stp  *bool `path:"stp" module:"nokia-conf"`
	Udld *bool `path:"udld" module:"nokia-conf"`
	Vtp  *bool `path:"vtp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_PwTemplate_L2Pt_Termination_Protocols implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_PwTemplate_L2Pt_Termination_Protocols) IsYANGGoStruct() {
}

// GetCdp retrieves the value of the leaf Cdp from the NokiaConf_Configure_Groups_Group_Service_PwTemplate_L2Pt_Termination_Protocols
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cdp is set, it can
// safely use t.GetCdp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cdp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_L2Pt_Termination_Protocols) GetCdp() bool {
	if t == nil || t.Cdp == nil {
		return false
	}
	return *t.Cdp
}

// GetDtp retrieves the value of the leaf Dtp from the NokiaConf_Configure_Groups_Group_Service_PwTemplate_L2Pt_Termination_Protocols
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dtp is set, it can
// safely use t.GetDtp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dtp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_L2Pt_Termination_Protocols) GetDtp() bool {
	if t == nil || t.Dtp == nil {
		return false
	}
	return *t.Dtp
}

// GetPagp retrieves the value of the leaf Pagp from the NokiaConf_Configure_Groups_Group_Service_PwTemplate_L2Pt_Termination_Protocols
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pagp is set, it can
// safely use t.GetPagp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pagp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_L2Pt_Termination_Protocols) GetPagp() bool {
	if t == nil || t.Pagp == nil {
		return false
	}
	return *t.Pagp
}

// GetStp retrieves the value of the leaf Stp from the NokiaConf_Configure_Groups_Group_Service_PwTemplate_L2Pt_Termination_Protocols
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Stp is set, it can
// safely use t.GetStp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Stp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_L2Pt_Termination_Protocols) GetStp() bool {
	if t == nil || t.Stp == nil {
		return true
	}
	return *t.Stp
}

// GetUdld retrieves the value of the leaf Udld from the NokiaConf_Configure_Groups_Group_Service_PwTemplate_L2Pt_Termination_Protocols
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Udld is set, it can
// safely use t.GetUdld() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Udld == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_L2Pt_Termination_Protocols) GetUdld() bool {
	if t == nil || t.Udld == nil {
		return false
	}
	return *t.Udld
}

// GetVtp retrieves the value of the leaf Vtp from the NokiaConf_Configure_Groups_Group_Service_PwTemplate_L2Pt_Termination_Protocols
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vtp is set, it can
// safely use t.GetVtp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vtp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_L2Pt_Termination_Protocols) GetVtp() bool {
	if t == nil || t.Vtp == nil {
		return false
	}
	return *t.Vtp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_PwTemplate_L2Pt_Termination_Protocols
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_L2Pt_Termination_Protocols) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cdp == nil {
		var v bool = false
		t.Cdp = &v
	}
	if t.Dtp == nil {
		var v bool = false
		t.Dtp = &v
	}
	if t.Pagp == nil {
		var v bool = false
		t.Pagp = &v
	}
	if t.Stp == nil {
		var v bool = true
		t.Stp = &v
	}
	if t.Udld == nil {
		var v bool = false
		t.Udld = &v
	}
	if t.Vtp == nil {
		var v bool = false
		t.Vtp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_L2Pt_Termination_Protocols) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_PwTemplate_L2Pt_Termination_Protocols"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_L2Pt_Termination_Protocols) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_L2Pt_Termination_Protocols) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_PwTemplate_L2Pt_Termination_Protocols.
func (*NokiaConf_Configure_Groups_Group_Service_PwTemplate_L2Pt_Termination_Protocols) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_PwTemplate_SdpExclude represents the /nokia-conf/configure/groups/group/service/pw-template/sdp-exclude YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_PwTemplate_SdpExclude struct {
	GroupName *string `path:"group-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_PwTemplate_SdpExclude implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_PwTemplate_SdpExclude) IsYANGGoStruct() {}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Groups_Group_Service_PwTemplate_SdpExclude
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_SdpExclude) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_PwTemplate_SdpExclude
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_SdpExclude) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_PwTemplate_SdpExclude struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_SdpExclude) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupName == nil {
		return nil, fmt.Errorf("nil value for key GroupName")
	}

	return map[string]interface{}{
		"group-name": *t.GroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_SdpExclude) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_PwTemplate_SdpExclude"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_SdpExclude) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_SdpExclude) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_PwTemplate_SdpExclude.
func (*NokiaConf_Configure_Groups_Group_Service_PwTemplate_SdpExclude) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_PwTemplate_SdpInclude represents the /nokia-conf/configure/groups/group/service/pw-template/sdp-include YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_PwTemplate_SdpInclude struct {
	GroupName *string `path:"group-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_PwTemplate_SdpInclude implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_PwTemplate_SdpInclude) IsYANGGoStruct() {}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Groups_Group_Service_PwTemplate_SdpInclude
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_SdpInclude) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_PwTemplate_SdpInclude
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_SdpInclude) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_PwTemplate_SdpInclude struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_SdpInclude) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupName == nil {
		return nil, fmt.Errorf("nil value for key GroupName")
	}

	return map[string]interface{}{
		"group-name": *t.GroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_SdpInclude) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_PwTemplate_SdpInclude"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_SdpInclude) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_SdpInclude) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_PwTemplate_SdpInclude.
func (*NokiaConf_Configure_Groups_Group_Service_PwTemplate_SdpInclude) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_PwTemplate_SplitHorizonGroup represents the /nokia-conf/configure/groups/group/service/pw-template/split-horizon-group YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_PwTemplate_SplitHorizonGroup struct {
	Description *string                                                                    `path:"description" module:"nokia-conf"`
	Fdb         *NokiaConf_Configure_Groups_Group_Service_PwTemplate_SplitHorizonGroup_Fdb `path:"fdb" module:"nokia-conf"`
	Name        *string                                                                    `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_PwTemplate_SplitHorizonGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_PwTemplate_SplitHorizonGroup) IsYANGGoStruct() {}

// GetOrCreateFdb retrieves the value of the Fdb field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_SplitHorizonGroup) GetOrCreateFdb() *NokiaConf_Configure_Groups_Group_Service_PwTemplate_SplitHorizonGroup_Fdb {
	if t.Fdb != nil {
		return t.Fdb
	}
	t.Fdb = &NokiaConf_Configure_Groups_Group_Service_PwTemplate_SplitHorizonGroup_Fdb{}
	return t.Fdb
}

// GetFdb returns the value of the Fdb struct pointer
// from NokiaConf_Configure_Groups_Group_Service_PwTemplate_SplitHorizonGroup. If the receiver or the field Fdb is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_SplitHorizonGroup) GetFdb() *NokiaConf_Configure_Groups_Group_Service_PwTemplate_SplitHorizonGroup_Fdb {
	if t != nil && t.Fdb != nil {
		return t.Fdb
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_PwTemplate_SplitHorizonGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_SplitHorizonGroup) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Service_PwTemplate_SplitHorizonGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_SplitHorizonGroup) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_PwTemplate_SplitHorizonGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_SplitHorizonGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Fdb.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_SplitHorizonGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_PwTemplate_SplitHorizonGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_SplitHorizonGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_SplitHorizonGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_PwTemplate_SplitHorizonGroup.
func (*NokiaConf_Configure_Groups_Group_Service_PwTemplate_SplitHorizonGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_PwTemplate_SplitHorizonGroup_Fdb represents the /nokia-conf/configure/groups/group/service/pw-template/split-horizon-group/fdb YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_PwTemplate_SplitHorizonGroup_Fdb struct {
	Saps *NokiaConf_Configure_Groups_Group_Service_PwTemplate_SplitHorizonGroup_Fdb_Saps `path:"saps" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_PwTemplate_SplitHorizonGroup_Fdb implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_PwTemplate_SplitHorizonGroup_Fdb) IsYANGGoStruct() {}

// GetOrCreateSaps retrieves the value of the Saps field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_SplitHorizonGroup_Fdb) GetOrCreateSaps() *NokiaConf_Configure_Groups_Group_Service_PwTemplate_SplitHorizonGroup_Fdb_Saps {
	if t.Saps != nil {
		return t.Saps
	}
	t.Saps = &NokiaConf_Configure_Groups_Group_Service_PwTemplate_SplitHorizonGroup_Fdb_Saps{}
	return t.Saps
}

// GetSaps returns the value of the Saps struct pointer
// from NokiaConf_Configure_Groups_Group_Service_PwTemplate_SplitHorizonGroup_Fdb. If the receiver or the field Saps is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_SplitHorizonGroup_Fdb) GetSaps() *NokiaConf_Configure_Groups_Group_Service_PwTemplate_SplitHorizonGroup_Fdb_Saps {
	if t != nil && t.Saps != nil {
		return t.Saps
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_PwTemplate_SplitHorizonGroup_Fdb
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_SplitHorizonGroup_Fdb) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Saps.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_SplitHorizonGroup_Fdb) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_PwTemplate_SplitHorizonGroup_Fdb"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_SplitHorizonGroup_Fdb) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_SplitHorizonGroup_Fdb) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_PwTemplate_SplitHorizonGroup_Fdb.
func (*NokiaConf_Configure_Groups_Group_Service_PwTemplate_SplitHorizonGroup_Fdb) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_PwTemplate_SplitHorizonGroup_Fdb_Saps represents the /nokia-conf/configure/groups/group/service/pw-template/split-horizon-group/fdb/saps YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_PwTemplate_SplitHorizonGroup_Fdb_Saps struct {
	AutoLearnMacProtect            *bool                                                  `path:"auto-learn-mac-protect" module:"nokia-conf"`
	DiscardUnprotectedDestMac      *bool                                                  `path:"discard-unprotected-dest-mac" module:"nokia-conf"`
	ProtectedSrcMacViolationAction E_NokiaTypesServices_SapProtectedSrcMacViolationAction `path:"protected-src-mac-violation-action" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_PwTemplate_SplitHorizonGroup_Fdb_Saps implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_PwTemplate_SplitHorizonGroup_Fdb_Saps) IsYANGGoStruct() {
}

// GetAutoLearnMacProtect retrieves the value of the leaf AutoLearnMacProtect from the NokiaConf_Configure_Groups_Group_Service_PwTemplate_SplitHorizonGroup_Fdb_Saps
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoLearnMacProtect is set, it can
// safely use t.GetAutoLearnMacProtect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoLearnMacProtect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_SplitHorizonGroup_Fdb_Saps) GetAutoLearnMacProtect() bool {
	if t == nil || t.AutoLearnMacProtect == nil {
		return false
	}
	return *t.AutoLearnMacProtect
}

// GetDiscardUnprotectedDestMac retrieves the value of the leaf DiscardUnprotectedDestMac from the NokiaConf_Configure_Groups_Group_Service_PwTemplate_SplitHorizonGroup_Fdb_Saps
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DiscardUnprotectedDestMac is set, it can
// safely use t.GetDiscardUnprotectedDestMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DiscardUnprotectedDestMac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_SplitHorizonGroup_Fdb_Saps) GetDiscardUnprotectedDestMac() bool {
	if t == nil || t.DiscardUnprotectedDestMac == nil {
		return false
	}
	return *t.DiscardUnprotectedDestMac
}

// GetProtectedSrcMacViolationAction retrieves the value of the leaf ProtectedSrcMacViolationAction from the NokiaConf_Configure_Groups_Group_Service_PwTemplate_SplitHorizonGroup_Fdb_Saps
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProtectedSrcMacViolationAction is set, it can
// safely use t.GetProtectedSrcMacViolationAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProtectedSrcMacViolationAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_SplitHorizonGroup_Fdb_Saps) GetProtectedSrcMacViolationAction() E_NokiaTypesServices_SapProtectedSrcMacViolationAction {
	if t == nil || t.ProtectedSrcMacViolationAction == 0 {
		return 0
	}
	return t.ProtectedSrcMacViolationAction
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_PwTemplate_SplitHorizonGroup_Fdb_Saps
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_SplitHorizonGroup_Fdb_Saps) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AutoLearnMacProtect == nil {
		var v bool = false
		t.AutoLearnMacProtect = &v
	}
	if t.DiscardUnprotectedDestMac == nil {
		var v bool = false
		t.DiscardUnprotectedDestMac = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_SplitHorizonGroup_Fdb_Saps) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_PwTemplate_SplitHorizonGroup_Fdb_Saps"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_SplitHorizonGroup_Fdb_Saps) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_SplitHorizonGroup_Fdb_Saps) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_PwTemplate_SplitHorizonGroup_Fdb_Saps.
func (*NokiaConf_Configure_Groups_Group_Service_PwTemplate_SplitHorizonGroup_Fdb_Saps) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_PwTemplate_Stp represents the /nokia-conf/configure/groups/group/service/pw-template/stp YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_PwTemplate_Stp struct {
	AdminState E_NokiaTypesSros_AdminState      `path:"admin-state" module:"nokia-conf"`
	AutoEdge   *bool                            `path:"auto-edge" module:"nokia-conf"`
	EdgePort   *bool                            `path:"edge-port" module:"nokia-conf"`
	LinkType   E_NokiaTypesServices_StpLinkType `path:"link-type" module:"nokia-conf"`
	PathCost   *int32                           `path:"path-cost" module:"nokia-conf"`
	Priority   *int32                           `path:"priority" module:"nokia-conf"`
	RootGuard  *bool                            `path:"root-guard" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_PwTemplate_Stp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_PwTemplate_Stp) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_PwTemplate_Stp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Stp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetAutoEdge retrieves the value of the leaf AutoEdge from the NokiaConf_Configure_Groups_Group_Service_PwTemplate_Stp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoEdge is set, it can
// safely use t.GetAutoEdge() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoEdge == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Stp) GetAutoEdge() bool {
	if t == nil || t.AutoEdge == nil {
		return true
	}
	return *t.AutoEdge
}

// GetEdgePort retrieves the value of the leaf EdgePort from the NokiaConf_Configure_Groups_Group_Service_PwTemplate_Stp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EdgePort is set, it can
// safely use t.GetEdgePort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EdgePort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Stp) GetEdgePort() bool {
	if t == nil || t.EdgePort == nil {
		return false
	}
	return *t.EdgePort
}

// GetLinkType retrieves the value of the leaf LinkType from the NokiaConf_Configure_Groups_Group_Service_PwTemplate_Stp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkType is set, it can
// safely use t.GetLinkType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Stp) GetLinkType() E_NokiaTypesServices_StpLinkType {
	if t == nil || t.LinkType == 0 {
		return NokiaTypesServices_StpLinkType_pt_pt
	}
	return t.LinkType
}

// GetPathCost retrieves the value of the leaf PathCost from the NokiaConf_Configure_Groups_Group_Service_PwTemplate_Stp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathCost is set, it can
// safely use t.GetPathCost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathCost == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Stp) GetPathCost() int32 {
	if t == nil || t.PathCost == nil {
		return 10
	}
	return *t.PathCost
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Groups_Group_Service_PwTemplate_Stp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Stp) GetPriority() int32 {
	if t == nil || t.Priority == nil {
		return 128
	}
	return *t.Priority
}

// GetRootGuard retrieves the value of the leaf RootGuard from the NokiaConf_Configure_Groups_Group_Service_PwTemplate_Stp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RootGuard is set, it can
// safely use t.GetRootGuard() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RootGuard == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Stp) GetRootGuard() bool {
	if t == nil || t.RootGuard == nil {
		return false
	}
	return *t.RootGuard
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_PwTemplate_Stp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Stp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AutoEdge == nil {
		var v bool = true
		t.AutoEdge = &v
	}
	if t.EdgePort == nil {
		var v bool = false
		t.EdgePort = &v
	}
	if t.LinkType == 0 {
		t.LinkType = NokiaTypesServices_StpLinkType_pt_pt
	}
	if t.PathCost == nil {
		var v int32 = 10
		t.PathCost = &v
	}
	if t.Priority == nil {
		var v int32 = 128
		t.Priority = &v
	}
	if t.RootGuard == nil {
		var v bool = false
		t.RootGuard = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Stp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_PwTemplate_Stp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Stp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_PwTemplate_Stp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_PwTemplate_Stp.
func (*NokiaConf_Configure_Groups_Group_Service_PwTemplate_Stp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Sdp represents the /nokia-conf/configure/groups/group/service/sdp YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Sdp struct {
	AccountingPolicy   *uint32                                                           `path:"accounting-policy" module:"nokia-conf"`
	AdminState         E_NokiaTypesSros_AdminState                                       `path:"admin-state" module:"nokia-conf"`
	AdvMtuOverride     *bool                                                             `path:"adv-mtu-override" module:"nokia-conf"`
	AllowFragmentation *bool                                                             `path:"allow-fragmentation" module:"nokia-conf"`
	BgpTunnel          *bool                                                             `path:"bgp-tunnel" module:"nokia-conf"`
	BookingFactor      *uint32                                                           `path:"booking-factor" module:"nokia-conf"`
	ClassForwarding    *NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding     `path:"class-forwarding" module:"nokia-conf" yangPresence:"true"`
	CollectStats       *bool                                                             `path:"collect-stats" module:"nokia-conf"`
	DeliveryType       E_NokiaTypesServices_SdpDeliveryType                              `path:"delivery-type" module:"nokia-conf"`
	Description        *string                                                           `path:"description" module:"nokia-conf"`
	FarEnd             *NokiaConf_Configure_Groups_Group_Service_Sdp_FarEnd              `path:"far-end" module:"nokia-conf"`
	KeepAlive          *NokiaConf_Configure_Groups_Group_Service_Sdp_KeepAlive           `path:"keep-alive" module:"nokia-conf" yangPresence:"true"`
	Ldp                *bool                                                             `path:"ldp" module:"nokia-conf"`
	LocalEnd           *string                                                           `path:"local-end" module:"nokia-conf"`
	Lsp                map[string]*NokiaConf_Configure_Groups_Group_Service_Sdp_Lsp      `path:"lsp" module:"nokia-conf"`
	Metric             *uint32                                                           `path:"metric" module:"nokia-conf"`
	MixedLspMode       *NokiaConf_Configure_Groups_Group_Service_Sdp_MixedLspMode        `path:"mixed-lsp-mode" module:"nokia-conf" yangPresence:"true"`
	NetworkDomain      *string                                                           `path:"network-domain" module:"nokia-conf"`
	PathMtu            *int32                                                            `path:"path-mtu" module:"nokia-conf"`
	PbbEtype           *string                                                           `path:"pbb-etype" module:"nokia-conf"`
	PwPort             *NokiaConf_Configure_Groups_Group_Service_Sdp_PwPort              `path:"pw-port" module:"nokia-conf"`
	SdpGroup           map[string]*NokiaConf_Configure_Groups_Group_Service_Sdp_SdpGroup `path:"sdp-group" module:"nokia-conf"`
	SdpId              NokiaConf_Configure_Groups_Group_Service_Sdp_SdpId_Union          `path:"sdp-id" module:"nokia-conf"`
	Signaling          E_NokiaConf_Configure_Groups_Group_Service_Sdp_Signaling          `path:"signaling" module:"nokia-conf"`
	SourceBmacLsb      *NokiaConf_Configure_Groups_Group_Service_Sdp_SourceBmacLsb       `path:"source-bmac-lsb" module:"nokia-conf"`
	SrIsis             *bool                                                             `path:"sr-isis" module:"nokia-conf"`
	SrOspf             *bool                                                             `path:"sr-ospf" module:"nokia-conf"`
	TunnelFarEnd       *string                                                           `path:"tunnel-far-end" module:"nokia-conf"`
	VlanVcEtype        *string                                                           `path:"vlan-vc-etype" module:"nokia-conf"`
	WeightedEcmp       *bool                                                             `path:"weighted-ecmp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Sdp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Sdp) IsYANGGoStruct() {}

// NewLsp creates a new entry in the Lsp list of the
// NokiaConf_Configure_Groups_Group_Service_Sdp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp) NewLsp(LspName string) (*NokiaConf_Configure_Groups_Group_Service_Sdp_Lsp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Lsp == nil {
		t.Lsp = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Sdp_Lsp)
	}

	key := LspName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Lsp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Lsp", key)
	}

	t.Lsp[key] = &NokiaConf_Configure_Groups_Group_Service_Sdp_Lsp{
		LspName: &LspName,
	}

	return t.Lsp[key], nil
}

// RenameLsp renames an entry in the list Lsp within
// the NokiaConf_Configure_Groups_Group_Service_Sdp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp) RenameLsp(oldK, newK string) error {
	if _, ok := t.Lsp[newK]; ok {
		return fmt.Errorf("key %v already exists in Lsp", newK)
	}

	e, ok := t.Lsp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Lsp", oldK)
	}
	e.LspName = &newK

	t.Lsp[newK] = e
	delete(t.Lsp, oldK)
	return nil
}

// GetOrCreateLsp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Sdp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp) GetOrCreateLsp(LspName string) *NokiaConf_Configure_Groups_Group_Service_Sdp_Lsp {

	key := LspName

	if v, ok := t.Lsp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLsp(LspName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLsp got unexpected error: %v", err))
	}
	return v
}

// GetLsp retrieves the value with the specified key from
// the Lsp map field of NokiaConf_Configure_Groups_Group_Service_Sdp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp) GetLsp(LspName string) *NokiaConf_Configure_Groups_Group_Service_Sdp_Lsp {

	if t == nil {
		return nil
	}

	key := LspName

	if lm, ok := t.Lsp[key]; ok {
		return lm
	}
	return nil
}

// DeleteLsp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Sdp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp) DeleteLsp(LspName string) {
	key := LspName

	delete(t.Lsp, key)
}

// AppendLsp appends the supplied NokiaConf_Configure_Groups_Group_Service_Sdp_Lsp struct to the
// list Lsp of NokiaConf_Configure_Groups_Group_Service_Sdp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Sdp_Lsp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp) AppendLsp(v *NokiaConf_Configure_Groups_Group_Service_Sdp_Lsp) error {
	if v.LspName == nil {
		return fmt.Errorf("invalid nil key received for LspName")
	}

	key := *v.LspName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Lsp == nil {
		t.Lsp = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Sdp_Lsp)
	}

	if _, ok := t.Lsp[key]; ok {
		return fmt.Errorf("duplicate key for list Lsp %v", key)
	}

	t.Lsp[key] = v
	return nil
}

// NewSdpGroup creates a new entry in the SdpGroup list of the
// NokiaConf_Configure_Groups_Group_Service_Sdp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp) NewSdpGroup(GroupName string) (*NokiaConf_Configure_Groups_Group_Service_Sdp_SdpGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SdpGroup == nil {
		t.SdpGroup = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Sdp_SdpGroup)
	}

	key := GroupName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SdpGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SdpGroup", key)
	}

	t.SdpGroup[key] = &NokiaConf_Configure_Groups_Group_Service_Sdp_SdpGroup{
		GroupName: &GroupName,
	}

	return t.SdpGroup[key], nil
}

// RenameSdpGroup renames an entry in the list SdpGroup within
// the NokiaConf_Configure_Groups_Group_Service_Sdp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp) RenameSdpGroup(oldK, newK string) error {
	if _, ok := t.SdpGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in SdpGroup", newK)
	}

	e, ok := t.SdpGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SdpGroup", oldK)
	}
	e.GroupName = &newK

	t.SdpGroup[newK] = e
	delete(t.SdpGroup, oldK)
	return nil
}

// GetOrCreateSdpGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Sdp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp) GetOrCreateSdpGroup(GroupName string) *NokiaConf_Configure_Groups_Group_Service_Sdp_SdpGroup {

	key := GroupName

	if v, ok := t.SdpGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSdpGroup(GroupName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSdpGroup got unexpected error: %v", err))
	}
	return v
}

// GetSdpGroup retrieves the value with the specified key from
// the SdpGroup map field of NokiaConf_Configure_Groups_Group_Service_Sdp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp) GetSdpGroup(GroupName string) *NokiaConf_Configure_Groups_Group_Service_Sdp_SdpGroup {

	if t == nil {
		return nil
	}

	key := GroupName

	if lm, ok := t.SdpGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteSdpGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Sdp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp) DeleteSdpGroup(GroupName string) {
	key := GroupName

	delete(t.SdpGroup, key)
}

// AppendSdpGroup appends the supplied NokiaConf_Configure_Groups_Group_Service_Sdp_SdpGroup struct to the
// list SdpGroup of NokiaConf_Configure_Groups_Group_Service_Sdp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Sdp_SdpGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp) AppendSdpGroup(v *NokiaConf_Configure_Groups_Group_Service_Sdp_SdpGroup) error {
	if v.GroupName == nil {
		return fmt.Errorf("invalid nil key received for GroupName")
	}

	key := *v.GroupName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SdpGroup == nil {
		t.SdpGroup = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Sdp_SdpGroup)
	}

	if _, ok := t.SdpGroup[key]; ok {
		return fmt.Errorf("duplicate key for list SdpGroup %v", key)
	}

	t.SdpGroup[key] = v
	return nil
}

// GetOrCreateClassForwarding retrieves the value of the ClassForwarding field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp) GetOrCreateClassForwarding() *NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding {
	if t.ClassForwarding != nil {
		return t.ClassForwarding
	}
	t.ClassForwarding = &NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding{}
	return t.ClassForwarding
}

// GetOrCreateFarEnd retrieves the value of the FarEnd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp) GetOrCreateFarEnd() *NokiaConf_Configure_Groups_Group_Service_Sdp_FarEnd {
	if t.FarEnd != nil {
		return t.FarEnd
	}
	t.FarEnd = &NokiaConf_Configure_Groups_Group_Service_Sdp_FarEnd{}
	return t.FarEnd
}

// GetOrCreateKeepAlive retrieves the value of the KeepAlive field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp) GetOrCreateKeepAlive() *NokiaConf_Configure_Groups_Group_Service_Sdp_KeepAlive {
	if t.KeepAlive != nil {
		return t.KeepAlive
	}
	t.KeepAlive = &NokiaConf_Configure_Groups_Group_Service_Sdp_KeepAlive{}
	return t.KeepAlive
}

// GetOrCreateMixedLspMode retrieves the value of the MixedLspMode field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp) GetOrCreateMixedLspMode() *NokiaConf_Configure_Groups_Group_Service_Sdp_MixedLspMode {
	if t.MixedLspMode != nil {
		return t.MixedLspMode
	}
	t.MixedLspMode = &NokiaConf_Configure_Groups_Group_Service_Sdp_MixedLspMode{}
	return t.MixedLspMode
}

// GetOrCreatePwPort retrieves the value of the PwPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp) GetOrCreatePwPort() *NokiaConf_Configure_Groups_Group_Service_Sdp_PwPort {
	if t.PwPort != nil {
		return t.PwPort
	}
	t.PwPort = &NokiaConf_Configure_Groups_Group_Service_Sdp_PwPort{}
	return t.PwPort
}

// GetOrCreateSourceBmacLsb retrieves the value of the SourceBmacLsb field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp) GetOrCreateSourceBmacLsb() *NokiaConf_Configure_Groups_Group_Service_Sdp_SourceBmacLsb {
	if t.SourceBmacLsb != nil {
		return t.SourceBmacLsb
	}
	t.SourceBmacLsb = &NokiaConf_Configure_Groups_Group_Service_Sdp_SourceBmacLsb{}
	return t.SourceBmacLsb
}

// GetClassForwarding returns the value of the ClassForwarding struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Sdp. If the receiver or the field ClassForwarding is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp) GetClassForwarding() *NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding {
	if t != nil && t.ClassForwarding != nil {
		return t.ClassForwarding
	}
	return nil
}

// GetFarEnd returns the value of the FarEnd struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Sdp. If the receiver or the field FarEnd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp) GetFarEnd() *NokiaConf_Configure_Groups_Group_Service_Sdp_FarEnd {
	if t != nil && t.FarEnd != nil {
		return t.FarEnd
	}
	return nil
}

// GetKeepAlive returns the value of the KeepAlive struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Sdp. If the receiver or the field KeepAlive is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp) GetKeepAlive() *NokiaConf_Configure_Groups_Group_Service_Sdp_KeepAlive {
	if t != nil && t.KeepAlive != nil {
		return t.KeepAlive
	}
	return nil
}

// GetMixedLspMode returns the value of the MixedLspMode struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Sdp. If the receiver or the field MixedLspMode is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp) GetMixedLspMode() *NokiaConf_Configure_Groups_Group_Service_Sdp_MixedLspMode {
	if t != nil && t.MixedLspMode != nil {
		return t.MixedLspMode
	}
	return nil
}

// GetPwPort returns the value of the PwPort struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Sdp. If the receiver or the field PwPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp) GetPwPort() *NokiaConf_Configure_Groups_Group_Service_Sdp_PwPort {
	if t != nil && t.PwPort != nil {
		return t.PwPort
	}
	return nil
}

// GetSourceBmacLsb returns the value of the SourceBmacLsb struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Sdp. If the receiver or the field SourceBmacLsb is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp) GetSourceBmacLsb() *NokiaConf_Configure_Groups_Group_Service_Sdp_SourceBmacLsb {
	if t != nil && t.SourceBmacLsb != nil {
		return t.SourceBmacLsb
	}
	return nil
}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Groups_Group_Service_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAdvMtuOverride retrieves the value of the leaf AdvMtuOverride from the NokiaConf_Configure_Groups_Group_Service_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvMtuOverride is set, it can
// safely use t.GetAdvMtuOverride() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvMtuOverride == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp) GetAdvMtuOverride() bool {
	if t == nil || t.AdvMtuOverride == nil {
		return false
	}
	return *t.AdvMtuOverride
}

// GetAllowFragmentation retrieves the value of the leaf AllowFragmentation from the NokiaConf_Configure_Groups_Group_Service_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowFragmentation is set, it can
// safely use t.GetAllowFragmentation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowFragmentation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp) GetAllowFragmentation() bool {
	if t == nil || t.AllowFragmentation == nil {
		return false
	}
	return *t.AllowFragmentation
}

// GetBgpTunnel retrieves the value of the leaf BgpTunnel from the NokiaConf_Configure_Groups_Group_Service_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BgpTunnel is set, it can
// safely use t.GetBgpTunnel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BgpTunnel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp) GetBgpTunnel() bool {
	if t == nil || t.BgpTunnel == nil {
		return false
	}
	return *t.BgpTunnel
}

// GetBookingFactor retrieves the value of the leaf BookingFactor from the NokiaConf_Configure_Groups_Group_Service_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BookingFactor is set, it can
// safely use t.GetBookingFactor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BookingFactor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp) GetBookingFactor() uint32 {
	if t == nil || t.BookingFactor == nil {
		return 100
	}
	return *t.BookingFactor
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_Groups_Group_Service_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// GetDeliveryType retrieves the value of the leaf DeliveryType from the NokiaConf_Configure_Groups_Group_Service_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DeliveryType is set, it can
// safely use t.GetDeliveryType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DeliveryType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp) GetDeliveryType() E_NokiaTypesServices_SdpDeliveryType {
	if t == nil || t.DeliveryType == 0 {
		return 0
	}
	return t.DeliveryType
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetLdp retrieves the value of the leaf Ldp from the NokiaConf_Configure_Groups_Group_Service_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ldp is set, it can
// safely use t.GetLdp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ldp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp) GetLdp() bool {
	if t == nil || t.Ldp == nil {
		return false
	}
	return *t.Ldp
}

// GetLocalEnd retrieves the value of the leaf LocalEnd from the NokiaConf_Configure_Groups_Group_Service_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalEnd is set, it can
// safely use t.GetLocalEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalEnd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp) GetLocalEnd() string {
	if t == nil || t.LocalEnd == nil {
		return ""
	}
	return *t.LocalEnd
}

// GetMetric retrieves the value of the leaf Metric from the NokiaConf_Configure_Groups_Group_Service_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Metric is set, it can
// safely use t.GetMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Metric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp) GetMetric() uint32 {
	if t == nil || t.Metric == nil {
		return 0
	}
	return *t.Metric
}

// GetNetworkDomain retrieves the value of the leaf NetworkDomain from the NokiaConf_Configure_Groups_Group_Service_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NetworkDomain is set, it can
// safely use t.GetNetworkDomain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NetworkDomain == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp) GetNetworkDomain() string {
	if t == nil || t.NetworkDomain == nil {
		return ""
	}
	return *t.NetworkDomain
}

// GetPathMtu retrieves the value of the leaf PathMtu from the NokiaConf_Configure_Groups_Group_Service_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathMtu is set, it can
// safely use t.GetPathMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathMtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp) GetPathMtu() int32 {
	if t == nil || t.PathMtu == nil {
		return 0
	}
	return *t.PathMtu
}

// GetPbbEtype retrieves the value of the leaf PbbEtype from the NokiaConf_Configure_Groups_Group_Service_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PbbEtype is set, it can
// safely use t.GetPbbEtype() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PbbEtype == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp) GetPbbEtype() string {
	if t == nil || t.PbbEtype == nil {
		return "0x88E7"
	}
	return *t.PbbEtype
}

// GetSdpId retrieves the value of the leaf SdpId from the NokiaConf_Configure_Groups_Group_Service_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SdpId is set, it can
// safely use t.GetSdpId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SdpId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp) GetSdpId() NokiaConf_Configure_Groups_Group_Service_Sdp_SdpId_Union {
	if t == nil || t.SdpId == nil {
		return nil
	}
	return t.SdpId
}

// GetSignaling retrieves the value of the leaf Signaling from the NokiaConf_Configure_Groups_Group_Service_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Signaling is set, it can
// safely use t.GetSignaling() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Signaling == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp) GetSignaling() E_NokiaConf_Configure_Groups_Group_Service_Sdp_Signaling {
	if t == nil || t.Signaling == 0 {
		return 0
	}
	return t.Signaling
}

// GetSrIsis retrieves the value of the leaf SrIsis from the NokiaConf_Configure_Groups_Group_Service_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrIsis is set, it can
// safely use t.GetSrIsis() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrIsis == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp) GetSrIsis() bool {
	if t == nil || t.SrIsis == nil {
		return false
	}
	return *t.SrIsis
}

// GetSrOspf retrieves the value of the leaf SrOspf from the NokiaConf_Configure_Groups_Group_Service_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrOspf is set, it can
// safely use t.GetSrOspf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrOspf == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp) GetSrOspf() bool {
	if t == nil || t.SrOspf == nil {
		return false
	}
	return *t.SrOspf
}

// GetTunnelFarEnd retrieves the value of the leaf TunnelFarEnd from the NokiaConf_Configure_Groups_Group_Service_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TunnelFarEnd is set, it can
// safely use t.GetTunnelFarEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TunnelFarEnd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp) GetTunnelFarEnd() string {
	if t == nil || t.TunnelFarEnd == nil {
		return ""
	}
	return *t.TunnelFarEnd
}

// GetVlanVcEtype retrieves the value of the leaf VlanVcEtype from the NokiaConf_Configure_Groups_Group_Service_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VlanVcEtype is set, it can
// safely use t.GetVlanVcEtype() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VlanVcEtype == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp) GetVlanVcEtype() string {
	if t == nil || t.VlanVcEtype == nil {
		return "0x8100"
	}
	return *t.VlanVcEtype
}

// GetWeightedEcmp retrieves the value of the leaf WeightedEcmp from the NokiaConf_Configure_Groups_Group_Service_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WeightedEcmp is set, it can
// safely use t.GetWeightedEcmp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WeightedEcmp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp) GetWeightedEcmp() bool {
	if t == nil || t.WeightedEcmp == nil {
		return false
	}
	return *t.WeightedEcmp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Sdp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.AdvMtuOverride == nil {
		var v bool = false
		t.AdvMtuOverride = &v
	}
	if t.AllowFragmentation == nil {
		var v bool = false
		t.AllowFragmentation = &v
	}
	if t.BgpTunnel == nil {
		var v bool = false
		t.BgpTunnel = &v
	}
	if t.BookingFactor == nil {
		var v uint32 = 100
		t.BookingFactor = &v
	}
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
	if t.Ldp == nil {
		var v bool = false
		t.Ldp = &v
	}
	if t.PbbEtype == nil {
		var v string = "0x88E7"
		t.PbbEtype = &v
	}
	if t.SrIsis == nil {
		var v bool = false
		t.SrIsis = &v
	}
	if t.SrOspf == nil {
		var v bool = false
		t.SrOspf = &v
	}
	if t.VlanVcEtype == nil {
		var v string = "0x8100"
		t.VlanVcEtype = &v
	}
	if t.WeightedEcmp == nil {
		var v bool = false
		t.WeightedEcmp = &v
	}
	t.ClassForwarding.PopulateDefaults()
	t.FarEnd.PopulateDefaults()
	t.KeepAlive.PopulateDefaults()
	t.MixedLspMode.PopulateDefaults()
	t.PwPort.PopulateDefaults()
	t.SourceBmacLsb.PopulateDefaults()
	for _, e := range t.Lsp {
		e.PopulateDefaults()
	}
	for _, e := range t.SdpGroup {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Sdp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"sdp-id": t.SdpId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Sdp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Sdp.
func (*NokiaConf_Configure_Groups_Group_Service_Sdp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_SdpGroup represents the /nokia-conf/configure/groups/group/service/sdp-group YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_SdpGroup struct {
	GroupName map[string]*NokiaConf_Configure_Groups_Group_Service_SdpGroup_GroupName `path:"group-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_SdpGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_SdpGroup) IsYANGGoStruct() {}

// NewGroupName creates a new entry in the GroupName list of the
// NokiaConf_Configure_Groups_Group_Service_SdpGroup struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_SdpGroup) NewGroupName(GroupName string) (*NokiaConf_Configure_Groups_Group_Service_SdpGroup_GroupName, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupName == nil {
		t.GroupName = make(map[string]*NokiaConf_Configure_Groups_Group_Service_SdpGroup_GroupName)
	}

	key := GroupName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GroupName[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GroupName", key)
	}

	t.GroupName[key] = &NokiaConf_Configure_Groups_Group_Service_SdpGroup_GroupName{
		GroupName: &GroupName,
	}

	return t.GroupName[key], nil
}

// RenameGroupName renames an entry in the list GroupName within
// the NokiaConf_Configure_Groups_Group_Service_SdpGroup struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_SdpGroup) RenameGroupName(oldK, newK string) error {
	if _, ok := t.GroupName[newK]; ok {
		return fmt.Errorf("key %v already exists in GroupName", newK)
	}

	e, ok := t.GroupName[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GroupName", oldK)
	}
	e.GroupName = &newK

	t.GroupName[newK] = e
	delete(t.GroupName, oldK)
	return nil
}

// GetOrCreateGroupName retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_SdpGroup. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_SdpGroup) GetOrCreateGroupName(GroupName string) *NokiaConf_Configure_Groups_Group_Service_SdpGroup_GroupName {

	key := GroupName

	if v, ok := t.GroupName[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroupName(GroupName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroupName got unexpected error: %v", err))
	}
	return v
}

// GetGroupName retrieves the value with the specified key from
// the GroupName map field of NokiaConf_Configure_Groups_Group_Service_SdpGroup. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_SdpGroup) GetGroupName(GroupName string) *NokiaConf_Configure_Groups_Group_Service_SdpGroup_GroupName {

	if t == nil {
		return nil
	}

	key := GroupName

	if lm, ok := t.GroupName[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroupName deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_SdpGroup. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_SdpGroup) DeleteGroupName(GroupName string) {
	key := GroupName

	delete(t.GroupName, key)
}

// AppendGroupName appends the supplied NokiaConf_Configure_Groups_Group_Service_SdpGroup_GroupName struct to the
// list GroupName of NokiaConf_Configure_Groups_Group_Service_SdpGroup. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_SdpGroup_GroupName already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_SdpGroup) AppendGroupName(v *NokiaConf_Configure_Groups_Group_Service_SdpGroup_GroupName) error {
	if v.GroupName == nil {
		return fmt.Errorf("invalid nil key received for GroupName")
	}

	key := *v.GroupName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupName == nil {
		t.GroupName = make(map[string]*NokiaConf_Configure_Groups_Group_Service_SdpGroup_GroupName)
	}

	if _, ok := t.GroupName[key]; ok {
		return fmt.Errorf("duplicate key for list GroupName %v", key)
	}

	t.GroupName[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_SdpGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_SdpGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.GroupName {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_SdpGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_SdpGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_SdpGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_SdpGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_SdpGroup.
func (*NokiaConf_Configure_Groups_Group_Service_SdpGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_SdpGroup_GroupName represents the /nokia-conf/configure/groups/group/service/sdp-group/group-name YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_SdpGroup_GroupName struct {
	GroupName *string `path:"group-name" module:"nokia-conf"`
	Value     *uint32 `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_SdpGroup_GroupName implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_SdpGroup_GroupName) IsYANGGoStruct() {}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Groups_Group_Service_SdpGroup_GroupName
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_SdpGroup_GroupName) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Groups_Group_Service_SdpGroup_GroupName
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_SdpGroup_GroupName) GetValue() uint32 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_SdpGroup_GroupName
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_SdpGroup_GroupName) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_SdpGroup_GroupName struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_SdpGroup_GroupName) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupName == nil {
		return nil, fmt.Errorf("nil value for key GroupName")
	}

	return map[string]interface{}{
		"group-name": *t.GroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_SdpGroup_GroupName) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_SdpGroup_GroupName"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_SdpGroup_GroupName) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_SdpGroup_GroupName) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_SdpGroup_GroupName.
func (*NokiaConf_Configure_Groups_Group_Service_SdpGroup_GroupName) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding represents the /nokia-conf/configure/groups/group/service/sdp/class-forwarding YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding struct {
	AdminState           E_NokiaTypesSros_AdminState                                                                                                                       `path:"admin-state" module:"nokia-conf"`
	DefaultLsp           *string                                                                                                                                           `path:"default-lsp" module:"nokia-conf"`
	EnforceDiffservLspFc *bool                                                                                                                                             `path:"enforce-diffserv-lsp-fc" module:"nokia-conf"`
	Fc                   map[NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding_Fc_FcName_Union]*NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding_Fc `path:"fc" module:"nokia-conf"`
	MulticastLsp         *string                                                                                                                                           `path:"multicast-lsp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding) IsYANGGoStruct() {}

// NewFc creates a new entry in the Fc list of the
// NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding) NewFc(FcName NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding_Fc_FcName_Union) (*NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding_Fc, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding_Fc_FcName_Union]*NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding_Fc)
	}

	key := FcName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Fc[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Fc", key)
	}

	t.Fc[key] = &NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding_Fc{
		FcName: FcName,
	}

	return t.Fc[key], nil
}

// RenameFc renames an entry in the list Fc within
// the NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding) RenameFc(oldK, newK NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding_Fc_FcName_Union) error {
	if _, ok := t.Fc[newK]; ok {
		return fmt.Errorf("key %v already exists in Fc", newK)
	}

	e, ok := t.Fc[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Fc", oldK)
	}
	e.FcName = newK

	t.Fc[newK] = e
	delete(t.Fc, oldK)
	return nil
}

// GetOrCreateFc retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding) GetOrCreateFc(FcName NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding_Fc_FcName_Union) *NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding_Fc {

	key := FcName

	if v, ok := t.Fc[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFc(FcName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFc got unexpected error: %v", err))
	}
	return v
}

// GetFc retrieves the value with the specified key from
// the Fc map field of NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding) GetFc(FcName NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding_Fc_FcName_Union) *NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding_Fc {

	if t == nil {
		return nil
	}

	key := FcName

	if lm, ok := t.Fc[key]; ok {
		return lm
	}
	return nil
}

// DeleteFc deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding) DeleteFc(FcName NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding_Fc_FcName_Union) {
	key := FcName

	delete(t.Fc, key)
}

// AppendFc appends the supplied NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding_Fc struct to the
// list Fc of NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding_Fc already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding) AppendFc(v *NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding_Fc) error {
	key := v.FcName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding_Fc_FcName_Union]*NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding_Fc)
	}

	if _, ok := t.Fc[key]; ok {
		return fmt.Errorf("duplicate key for list Fc %v", key)
	}

	t.Fc[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDefaultLsp retrieves the value of the leaf DefaultLsp from the NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultLsp is set, it can
// safely use t.GetDefaultLsp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultLsp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding) GetDefaultLsp() string {
	if t == nil || t.DefaultLsp == nil {
		return ""
	}
	return *t.DefaultLsp
}

// GetEnforceDiffservLspFc retrieves the value of the leaf EnforceDiffservLspFc from the NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnforceDiffservLspFc is set, it can
// safely use t.GetEnforceDiffservLspFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnforceDiffservLspFc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding) GetEnforceDiffservLspFc() bool {
	if t == nil || t.EnforceDiffservLspFc == nil {
		return false
	}
	return *t.EnforceDiffservLspFc
}

// GetMulticastLsp retrieves the value of the leaf MulticastLsp from the NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MulticastLsp is set, it can
// safely use t.GetMulticastLsp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MulticastLsp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding) GetMulticastLsp() string {
	if t == nil || t.MulticastLsp == nil {
		return ""
	}
	return *t.MulticastLsp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.EnforceDiffservLspFc == nil {
		var v bool = false
		t.EnforceDiffservLspFc = &v
	}
	for _, e := range t.Fc {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding.
func (*NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding_Fc represents the /nokia-conf/configure/groups/group/service/sdp/class-forwarding/fc YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding_Fc struct {
	FcName NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding_Fc_FcName_Union `path:"fc-name" module:"nokia-conf"`
	Lsp    *string                                                                      `path:"lsp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding_Fc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding_Fc) IsYANGGoStruct() {}

// GetFcName retrieves the value of the leaf FcName from the NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FcName is set, it can
// safely use t.GetFcName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FcName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding_Fc) GetFcName() NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding_Fc_FcName_Union {
	if t == nil || t.FcName == nil {
		return nil
	}
	return t.FcName
}

// GetLsp retrieves the value of the leaf Lsp from the NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lsp is set, it can
// safely use t.GetLsp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lsp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding_Fc) GetLsp() string {
	if t == nil || t.Lsp == nil {
		return ""
	}
	return *t.Lsp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding_Fc
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding_Fc) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding_Fc struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding_Fc) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"fc-name": t.FcName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding_Fc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding_Fc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding_Fc) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding_Fc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding_Fc.
func (*NokiaConf_Configure_Groups_Group_Service_Sdp_ClassForwarding_Fc) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Sdp_FarEnd represents the /nokia-conf/configure/groups/group/service/sdp/far-end YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Sdp_FarEnd struct {
	IpAddress *string `path:"ip-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Sdp_FarEnd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Sdp_FarEnd) IsYANGGoStruct() {}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Groups_Group_Service_Sdp_FarEnd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp_FarEnd) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Sdp_FarEnd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp_FarEnd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp_FarEnd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Sdp_FarEnd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp_FarEnd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp_FarEnd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Sdp_FarEnd.
func (*NokiaConf_Configure_Groups_Group_Service_Sdp_FarEnd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Sdp_KeepAlive represents the /nokia-conf/configure/groups/group/service/sdp/keep-alive YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Sdp_KeepAlive struct {
	AdminState       E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	HelloTime        *int32                      `path:"hello-time" module:"nokia-conf"`
	HoldDownTime     *int32                      `path:"hold-down-time" module:"nokia-conf"`
	MaximumDropCount *int32                      `path:"maximum-drop-count" module:"nokia-conf"`
	MessageLength    *int32                      `path:"message-length" module:"nokia-conf"`
	Timeout          *int32                      `path:"timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Sdp_KeepAlive implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Sdp_KeepAlive) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Sdp_KeepAlive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp_KeepAlive) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetHelloTime retrieves the value of the leaf HelloTime from the NokiaConf_Configure_Groups_Group_Service_Sdp_KeepAlive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloTime is set, it can
// safely use t.GetHelloTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp_KeepAlive) GetHelloTime() int32 {
	if t == nil || t.HelloTime == nil {
		return 10
	}
	return *t.HelloTime
}

// GetHoldDownTime retrieves the value of the leaf HoldDownTime from the NokiaConf_Configure_Groups_Group_Service_Sdp_KeepAlive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldDownTime is set, it can
// safely use t.GetHoldDownTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldDownTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp_KeepAlive) GetHoldDownTime() int32 {
	if t == nil || t.HoldDownTime == nil {
		return 10
	}
	return *t.HoldDownTime
}

// GetMaximumDropCount retrieves the value of the leaf MaximumDropCount from the NokiaConf_Configure_Groups_Group_Service_Sdp_KeepAlive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumDropCount is set, it can
// safely use t.GetMaximumDropCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumDropCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp_KeepAlive) GetMaximumDropCount() int32 {
	if t == nil || t.MaximumDropCount == nil {
		return 3
	}
	return *t.MaximumDropCount
}

// GetMessageLength retrieves the value of the leaf MessageLength from the NokiaConf_Configure_Groups_Group_Service_Sdp_KeepAlive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MessageLength is set, it can
// safely use t.GetMessageLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MessageLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp_KeepAlive) GetMessageLength() int32 {
	if t == nil || t.MessageLength == nil {
		return 0
	}
	return *t.MessageLength
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Groups_Group_Service_Sdp_KeepAlive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp_KeepAlive) GetTimeout() int32 {
	if t == nil || t.Timeout == nil {
		return 5
	}
	return *t.Timeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Sdp_KeepAlive
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp_KeepAlive) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.HelloTime == nil {
		var v int32 = 10
		t.HelloTime = &v
	}
	if t.HoldDownTime == nil {
		var v int32 = 10
		t.HoldDownTime = &v
	}
	if t.MaximumDropCount == nil {
		var v int32 = 3
		t.MaximumDropCount = &v
	}
	if t.Timeout == nil {
		var v int32 = 5
		t.Timeout = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp_KeepAlive) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Sdp_KeepAlive"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp_KeepAlive) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp_KeepAlive) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Sdp_KeepAlive.
func (*NokiaConf_Configure_Groups_Group_Service_Sdp_KeepAlive) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Sdp_Lsp represents the /nokia-conf/configure/groups/group/service/sdp/lsp YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Sdp_Lsp struct {
	LspName *string `path:"lsp-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Sdp_Lsp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Sdp_Lsp) IsYANGGoStruct() {}

// GetLspName retrieves the value of the leaf LspName from the NokiaConf_Configure_Groups_Group_Service_Sdp_Lsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspName is set, it can
// safely use t.GetLspName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp_Lsp) GetLspName() string {
	if t == nil || t.LspName == nil {
		return ""
	}
	return *t.LspName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Sdp_Lsp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp_Lsp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Sdp_Lsp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp_Lsp) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LspName == nil {
		return nil, fmt.Errorf("nil value for key LspName")
	}

	return map[string]interface{}{
		"lsp-name": *t.LspName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp_Lsp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Sdp_Lsp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp_Lsp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp_Lsp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Sdp_Lsp.
func (*NokiaConf_Configure_Groups_Group_Service_Sdp_Lsp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Sdp_MixedLspMode represents the /nokia-conf/configure/groups/group/service/sdp/mixed-lsp-mode YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Sdp_MixedLspMode struct {
	RevertTime NokiaConf_Configure_Groups_Group_Service_Sdp_MixedLspMode_RevertTime_Union `path:"revert-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Sdp_MixedLspMode implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Sdp_MixedLspMode) IsYANGGoStruct() {}

// GetRevertTime retrieves the value of the leaf RevertTime from the NokiaConf_Configure_Groups_Group_Service_Sdp_MixedLspMode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RevertTime is set, it can
// safely use t.GetRevertTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RevertTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp_MixedLspMode) GetRevertTime() NokiaConf_Configure_Groups_Group_Service_Sdp_MixedLspMode_RevertTime_Union {
	if t == nil || t.RevertTime == nil {
		return NokiaTypesServices_RevertTime_Enum_immediate
	}
	return t.RevertTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Sdp_MixedLspMode
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp_MixedLspMode) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RevertTime == nil {
		t.RevertTime = NokiaTypesServices_RevertTime_Enum_immediate
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp_MixedLspMode) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Sdp_MixedLspMode"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp_MixedLspMode) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp_MixedLspMode) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Sdp_MixedLspMode.
func (*NokiaConf_Configure_Groups_Group_Service_Sdp_MixedLspMode) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Sdp_PwPort represents the /nokia-conf/configure/groups/group/service/sdp/pw-port YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Sdp_PwPort struct {
	BindingPort *string `path:"binding-port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Sdp_PwPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Sdp_PwPort) IsYANGGoStruct() {}

// GetBindingPort retrieves the value of the leaf BindingPort from the NokiaConf_Configure_Groups_Group_Service_Sdp_PwPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BindingPort is set, it can
// safely use t.GetBindingPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BindingPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp_PwPort) GetBindingPort() string {
	if t == nil || t.BindingPort == nil {
		return ""
	}
	return *t.BindingPort
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Sdp_PwPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp_PwPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp_PwPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Sdp_PwPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp_PwPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp_PwPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Sdp_PwPort.
func (*NokiaConf_Configure_Groups_Group_Service_Sdp_PwPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Sdp_SdpGroup represents the /nokia-conf/configure/groups/group/service/sdp/sdp-group YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Sdp_SdpGroup struct {
	GroupName *string `path:"group-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Sdp_SdpGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Sdp_SdpGroup) IsYANGGoStruct() {}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Groups_Group_Service_Sdp_SdpGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp_SdpGroup) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Sdp_SdpGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp_SdpGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Sdp_SdpGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp_SdpGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupName == nil {
		return nil, fmt.Errorf("nil value for key GroupName")
	}

	return map[string]interface{}{
		"group-name": *t.GroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp_SdpGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Sdp_SdpGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp_SdpGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp_SdpGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Sdp_SdpGroup.
func (*NokiaConf_Configure_Groups_Group_Service_Sdp_SdpGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Sdp_SourceBmacLsb represents the /nokia-conf/configure/groups/group/service/sdp/source-bmac-lsb YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Sdp_SourceBmacLsb struct {
	ControlPwVcId *uint32 `path:"control-pw-vc-id" module:"nokia-conf"`
	Value         *string `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Sdp_SourceBmacLsb implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Sdp_SourceBmacLsb) IsYANGGoStruct() {}

// GetControlPwVcId retrieves the value of the leaf ControlPwVcId from the NokiaConf_Configure_Groups_Group_Service_Sdp_SourceBmacLsb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ControlPwVcId is set, it can
// safely use t.GetControlPwVcId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ControlPwVcId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp_SourceBmacLsb) GetControlPwVcId() uint32 {
	if t == nil || t.ControlPwVcId == nil {
		return 0
	}
	return *t.ControlPwVcId
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Groups_Group_Service_Sdp_SourceBmacLsb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp_SourceBmacLsb) GetValue() string {
	if t == nil || t.Value == nil {
		return ""
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Sdp_SourceBmacLsb
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp_SourceBmacLsb) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp_SourceBmacLsb) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Sdp_SourceBmacLsb"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp_SourceBmacLsb) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Sdp_SourceBmacLsb) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Sdp_SourceBmacLsb.
func (*NokiaConf_Configure_Groups_Group_Service_Sdp_SourceBmacLsb) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_System represents the /nokia-conf/configure/groups/group/service/system YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_System struct {
	Bgp                          *NokiaConf_Configure_Groups_Group_Service_System_Bgp            `path:"bgp" module:"nokia-conf"`
	BgpAutoRdRange               *NokiaConf_Configure_Groups_Group_Service_System_BgpAutoRdRange `path:"bgp-auto-rd-range" module:"nokia-conf" yangPresence:"true"`
	ExtendedDefaultQinqSapLookup *bool                                                           `path:"extended-default-qinq-sap-lookup" module:"nokia-conf"`
	Fdb                          *NokiaConf_Configure_Groups_Group_Service_System_Fdb            `path:"fdb" module:"nokia-conf" yangPresence:"true"`
	GreEthBridged                *NokiaConf_Configure_Groups_Group_Service_System_GreEthBridged  `path:"gre-eth-bridged" module:"nokia-conf"`
	PwPortList                   *NokiaConf_Configure_Groups_Group_Service_System_PwPortList     `path:"pw-port-list" module:"nokia-conf"`
	VpnGreSourceIp               *string                                                         `path:"vpn-gre-source-ip" module:"nokia-conf"`
	Vxlan                        *NokiaConf_Configure_Groups_Group_Service_System_Vxlan          `path:"vxlan" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_System implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_System) IsYANGGoStruct() {}

// GetOrCreateBgp retrieves the value of the Bgp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_System) GetOrCreateBgp() *NokiaConf_Configure_Groups_Group_Service_System_Bgp {
	if t.Bgp != nil {
		return t.Bgp
	}
	t.Bgp = &NokiaConf_Configure_Groups_Group_Service_System_Bgp{}
	return t.Bgp
}

// GetOrCreateBgpAutoRdRange retrieves the value of the BgpAutoRdRange field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_System) GetOrCreateBgpAutoRdRange() *NokiaConf_Configure_Groups_Group_Service_System_BgpAutoRdRange {
	if t.BgpAutoRdRange != nil {
		return t.BgpAutoRdRange
	}
	t.BgpAutoRdRange = &NokiaConf_Configure_Groups_Group_Service_System_BgpAutoRdRange{}
	return t.BgpAutoRdRange
}

// GetOrCreateFdb retrieves the value of the Fdb field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_System) GetOrCreateFdb() *NokiaConf_Configure_Groups_Group_Service_System_Fdb {
	if t.Fdb != nil {
		return t.Fdb
	}
	t.Fdb = &NokiaConf_Configure_Groups_Group_Service_System_Fdb{}
	return t.Fdb
}

// GetOrCreateGreEthBridged retrieves the value of the GreEthBridged field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_System) GetOrCreateGreEthBridged() *NokiaConf_Configure_Groups_Group_Service_System_GreEthBridged {
	if t.GreEthBridged != nil {
		return t.GreEthBridged
	}
	t.GreEthBridged = &NokiaConf_Configure_Groups_Group_Service_System_GreEthBridged{}
	return t.GreEthBridged
}

// GetOrCreatePwPortList retrieves the value of the PwPortList field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_System) GetOrCreatePwPortList() *NokiaConf_Configure_Groups_Group_Service_System_PwPortList {
	if t.PwPortList != nil {
		return t.PwPortList
	}
	t.PwPortList = &NokiaConf_Configure_Groups_Group_Service_System_PwPortList{}
	return t.PwPortList
}

// GetOrCreateVxlan retrieves the value of the Vxlan field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_System) GetOrCreateVxlan() *NokiaConf_Configure_Groups_Group_Service_System_Vxlan {
	if t.Vxlan != nil {
		return t.Vxlan
	}
	t.Vxlan = &NokiaConf_Configure_Groups_Group_Service_System_Vxlan{}
	return t.Vxlan
}

// GetBgp returns the value of the Bgp struct pointer
// from NokiaConf_Configure_Groups_Group_Service_System. If the receiver or the field Bgp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_System) GetBgp() *NokiaConf_Configure_Groups_Group_Service_System_Bgp {
	if t != nil && t.Bgp != nil {
		return t.Bgp
	}
	return nil
}

// GetBgpAutoRdRange returns the value of the BgpAutoRdRange struct pointer
// from NokiaConf_Configure_Groups_Group_Service_System. If the receiver or the field BgpAutoRdRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_System) GetBgpAutoRdRange() *NokiaConf_Configure_Groups_Group_Service_System_BgpAutoRdRange {
	if t != nil && t.BgpAutoRdRange != nil {
		return t.BgpAutoRdRange
	}
	return nil
}

// GetFdb returns the value of the Fdb struct pointer
// from NokiaConf_Configure_Groups_Group_Service_System. If the receiver or the field Fdb is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_System) GetFdb() *NokiaConf_Configure_Groups_Group_Service_System_Fdb {
	if t != nil && t.Fdb != nil {
		return t.Fdb
	}
	return nil
}

// GetGreEthBridged returns the value of the GreEthBridged struct pointer
// from NokiaConf_Configure_Groups_Group_Service_System. If the receiver or the field GreEthBridged is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_System) GetGreEthBridged() *NokiaConf_Configure_Groups_Group_Service_System_GreEthBridged {
	if t != nil && t.GreEthBridged != nil {
		return t.GreEthBridged
	}
	return nil
}

// GetPwPortList returns the value of the PwPortList struct pointer
// from NokiaConf_Configure_Groups_Group_Service_System. If the receiver or the field PwPortList is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_System) GetPwPortList() *NokiaConf_Configure_Groups_Group_Service_System_PwPortList {
	if t != nil && t.PwPortList != nil {
		return t.PwPortList
	}
	return nil
}

// GetVxlan returns the value of the Vxlan struct pointer
// from NokiaConf_Configure_Groups_Group_Service_System. If the receiver or the field Vxlan is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_System) GetVxlan() *NokiaConf_Configure_Groups_Group_Service_System_Vxlan {
	if t != nil && t.Vxlan != nil {
		return t.Vxlan
	}
	return nil
}

// GetExtendedDefaultQinqSapLookup retrieves the value of the leaf ExtendedDefaultQinqSapLookup from the NokiaConf_Configure_Groups_Group_Service_System
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtendedDefaultQinqSapLookup is set, it can
// safely use t.GetExtendedDefaultQinqSapLookup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtendedDefaultQinqSapLookup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System) GetExtendedDefaultQinqSapLookup() bool {
	if t == nil || t.ExtendedDefaultQinqSapLookup == nil {
		return false
	}
	return *t.ExtendedDefaultQinqSapLookup
}

// GetVpnGreSourceIp retrieves the value of the leaf VpnGreSourceIp from the NokiaConf_Configure_Groups_Group_Service_System
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnGreSourceIp is set, it can
// safely use t.GetVpnGreSourceIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnGreSourceIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System) GetVpnGreSourceIp() string {
	if t == nil || t.VpnGreSourceIp == nil {
		return ""
	}
	return *t.VpnGreSourceIp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_System
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_System) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Bgp.PopulateDefaults()
	t.BgpAutoRdRange.PopulateDefaults()
	t.Fdb.PopulateDefaults()
	t.GreEthBridged.PopulateDefaults()
	t.PwPortList.PopulateDefaults()
	t.Vxlan.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_System"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_System) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_System.
func (*NokiaConf_Configure_Groups_Group_Service_System) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_System_Bgp represents the /nokia-conf/configure/groups/group/service/system/bgp YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_System_Bgp struct {
	Evpn *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn `path:"evpn" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_System_Bgp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp) IsYANGGoStruct() {}

// GetOrCreateEvpn retrieves the value of the Evpn field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp) GetOrCreateEvpn() *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn {
	if t.Evpn != nil {
		return t.Evpn
	}
	t.Evpn = &NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn{}
	return t.Evpn
}

// GetEvpn returns the value of the Evpn struct pointer
// from NokiaConf_Configure_Groups_Group_Service_System_Bgp. If the receiver or the field Evpn is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp) GetEvpn() *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn {
	if t != nil && t.Evpn != nil {
		return t.Evpn
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_System_Bgp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Evpn.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_System_Bgp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_System_Bgp.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_System_BgpAutoRdRange represents the /nokia-conf/configure/groups/group/service/system/bgp-auto-rd-range YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_System_BgpAutoRdRange struct {
	CommunityValue *NokiaConf_Configure_Groups_Group_Service_System_BgpAutoRdRange_CommunityValue `path:"community-value" module:"nokia-conf"`
	IpAddress      *string                                                                        `path:"ip-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_System_BgpAutoRdRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_System_BgpAutoRdRange) IsYANGGoStruct() {}

// GetOrCreateCommunityValue retrieves the value of the CommunityValue field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_System_BgpAutoRdRange) GetOrCreateCommunityValue() *NokiaConf_Configure_Groups_Group_Service_System_BgpAutoRdRange_CommunityValue {
	if t.CommunityValue != nil {
		return t.CommunityValue
	}
	t.CommunityValue = &NokiaConf_Configure_Groups_Group_Service_System_BgpAutoRdRange_CommunityValue{}
	return t.CommunityValue
}

// GetCommunityValue returns the value of the CommunityValue struct pointer
// from NokiaConf_Configure_Groups_Group_Service_System_BgpAutoRdRange. If the receiver or the field CommunityValue is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_System_BgpAutoRdRange) GetCommunityValue() *NokiaConf_Configure_Groups_Group_Service_System_BgpAutoRdRange_CommunityValue {
	if t != nil && t.CommunityValue != nil {
		return t.CommunityValue
	}
	return nil
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Groups_Group_Service_System_BgpAutoRdRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_BgpAutoRdRange) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_System_BgpAutoRdRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_System_BgpAutoRdRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.CommunityValue.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_BgpAutoRdRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_System_BgpAutoRdRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_BgpAutoRdRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_System_BgpAutoRdRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_System_BgpAutoRdRange.
func (*NokiaConf_Configure_Groups_Group_Service_System_BgpAutoRdRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_System_BgpAutoRdRange_CommunityValue represents the /nokia-conf/configure/groups/group/service/system/bgp-auto-rd-range/community-value YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_System_BgpAutoRdRange_CommunityValue struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_System_BgpAutoRdRange_CommunityValue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_System_BgpAutoRdRange_CommunityValue) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Service_System_BgpAutoRdRange_CommunityValue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_BgpAutoRdRange_CommunityValue) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Service_System_BgpAutoRdRange_CommunityValue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_BgpAutoRdRange_CommunityValue) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_System_BgpAutoRdRange_CommunityValue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_System_BgpAutoRdRange_CommunityValue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_BgpAutoRdRange_CommunityValue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_System_BgpAutoRdRange_CommunityValue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_BgpAutoRdRange_CommunityValue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_System_BgpAutoRdRange_CommunityValue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_System_BgpAutoRdRange_CommunityValue.
func (*NokiaConf_Configure_Groups_Group_Service_System_BgpAutoRdRange_CommunityValue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn represents the /nokia-conf/configure/groups/group/service/system/bgp/evpn YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn struct {
	AdPerEsRoute                    *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_AdPerEsRoute               `path:"ad-per-es-route" module:"nokia-conf"`
	EthernetSegment                 map[string]*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment `path:"ethernet-segment" module:"nokia-conf"`
	EtreeLeafLabel                  *bool                                                                                `path:"etree-leaf-label" module:"nokia-conf"`
	EtreeLeafLabelValue             NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EtreeLeafLabelValue_Union   `path:"etree-leaf-label-value" module:"nokia-conf"`
	IngressReplicationBumLabelBlock *string                                                                              `path:"ingress-replication-bum-label-block" module:"nokia-conf"`
	IpPrefixRoutes                  *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_IpPrefixRoutes             `path:"ip-prefix-routes" module:"nokia-conf"`
	MulticastLeaveSyncPropagation   *int32                                                                               `path:"multicast-leave-sync-propagation" module:"nokia-conf"`
	RouteDistinguisher              *string                                                                              `path:"route-distinguisher" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn) IsYANGGoStruct() {}

// NewEthernetSegment creates a new entry in the EthernetSegment list of the
// NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn) NewEthernetSegment(EthernetSegmentName string) (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EthernetSegment == nil {
		t.EthernetSegment = make(map[string]*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment)
	}

	key := EthernetSegmentName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.EthernetSegment[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list EthernetSegment", key)
	}

	t.EthernetSegment[key] = &NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment{
		EthernetSegmentName: &EthernetSegmentName,
	}

	return t.EthernetSegment[key], nil
}

// RenameEthernetSegment renames an entry in the list EthernetSegment within
// the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn) RenameEthernetSegment(oldK, newK string) error {
	if _, ok := t.EthernetSegment[newK]; ok {
		return fmt.Errorf("key %v already exists in EthernetSegment", newK)
	}

	e, ok := t.EthernetSegment[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in EthernetSegment", oldK)
	}
	e.EthernetSegmentName = &newK

	t.EthernetSegment[newK] = e
	delete(t.EthernetSegment, oldK)
	return nil
}

// GetOrCreateEthernetSegment retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn) GetOrCreateEthernetSegment(EthernetSegmentName string) *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment {

	key := EthernetSegmentName

	if v, ok := t.EthernetSegment[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEthernetSegment(EthernetSegmentName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEthernetSegment got unexpected error: %v", err))
	}
	return v
}

// GetEthernetSegment retrieves the value with the specified key from
// the EthernetSegment map field of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn) GetEthernetSegment(EthernetSegmentName string) *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment {

	if t == nil {
		return nil
	}

	key := EthernetSegmentName

	if lm, ok := t.EthernetSegment[key]; ok {
		return lm
	}
	return nil
}

// DeleteEthernetSegment deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn) DeleteEthernetSegment(EthernetSegmentName string) {
	key := EthernetSegmentName

	delete(t.EthernetSegment, key)
}

// AppendEthernetSegment appends the supplied NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment struct to the
// list EthernetSegment of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn) AppendEthernetSegment(v *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment) error {
	if v.EthernetSegmentName == nil {
		return fmt.Errorf("invalid nil key received for EthernetSegmentName")
	}

	key := *v.EthernetSegmentName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EthernetSegment == nil {
		t.EthernetSegment = make(map[string]*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment)
	}

	if _, ok := t.EthernetSegment[key]; ok {
		return fmt.Errorf("duplicate key for list EthernetSegment %v", key)
	}

	t.EthernetSegment[key] = v
	return nil
}

// GetOrCreateAdPerEsRoute retrieves the value of the AdPerEsRoute field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn) GetOrCreateAdPerEsRoute() *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_AdPerEsRoute {
	if t.AdPerEsRoute != nil {
		return t.AdPerEsRoute
	}
	t.AdPerEsRoute = &NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_AdPerEsRoute{}
	return t.AdPerEsRoute
}

// GetOrCreateIpPrefixRoutes retrieves the value of the IpPrefixRoutes field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn) GetOrCreateIpPrefixRoutes() *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_IpPrefixRoutes {
	if t.IpPrefixRoutes != nil {
		return t.IpPrefixRoutes
	}
	t.IpPrefixRoutes = &NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_IpPrefixRoutes{}
	return t.IpPrefixRoutes
}

// GetAdPerEsRoute returns the value of the AdPerEsRoute struct pointer
// from NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn. If the receiver or the field AdPerEsRoute is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn) GetAdPerEsRoute() *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_AdPerEsRoute {
	if t != nil && t.AdPerEsRoute != nil {
		return t.AdPerEsRoute
	}
	return nil
}

// GetIpPrefixRoutes returns the value of the IpPrefixRoutes struct pointer
// from NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn. If the receiver or the field IpPrefixRoutes is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn) GetIpPrefixRoutes() *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_IpPrefixRoutes {
	if t != nil && t.IpPrefixRoutes != nil {
		return t.IpPrefixRoutes
	}
	return nil
}

// GetEtreeLeafLabel retrieves the value of the leaf EtreeLeafLabel from the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EtreeLeafLabel is set, it can
// safely use t.GetEtreeLeafLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EtreeLeafLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn) GetEtreeLeafLabel() bool {
	if t == nil || t.EtreeLeafLabel == nil {
		return false
	}
	return *t.EtreeLeafLabel
}

// GetEtreeLeafLabelValue retrieves the value of the leaf EtreeLeafLabelValue from the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EtreeLeafLabelValue is set, it can
// safely use t.GetEtreeLeafLabelValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EtreeLeafLabelValue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn) GetEtreeLeafLabelValue() NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EtreeLeafLabelValue_Union {
	if t == nil || t.EtreeLeafLabelValue == nil {
		return NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EtreeLeafLabelValue_Enum_dynamic
	}
	return t.EtreeLeafLabelValue
}

// GetIngressReplicationBumLabelBlock retrieves the value of the leaf IngressReplicationBumLabelBlock from the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IngressReplicationBumLabelBlock is set, it can
// safely use t.GetIngressReplicationBumLabelBlock() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IngressReplicationBumLabelBlock == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn) GetIngressReplicationBumLabelBlock() string {
	if t == nil || t.IngressReplicationBumLabelBlock == nil {
		return ""
	}
	return *t.IngressReplicationBumLabelBlock
}

// GetMulticastLeaveSyncPropagation retrieves the value of the leaf MulticastLeaveSyncPropagation from the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MulticastLeaveSyncPropagation is set, it can
// safely use t.GetMulticastLeaveSyncPropagation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MulticastLeaveSyncPropagation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn) GetMulticastLeaveSyncPropagation() int32 {
	if t == nil || t.MulticastLeaveSyncPropagation == nil {
		return 5
	}
	return *t.MulticastLeaveSyncPropagation
}

// GetRouteDistinguisher retrieves the value of the leaf RouteDistinguisher from the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteDistinguisher is set, it can
// safely use t.GetRouteDistinguisher() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteDistinguisher == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn) GetRouteDistinguisher() string {
	if t == nil || t.RouteDistinguisher == nil {
		return ""
	}
	return *t.RouteDistinguisher
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.EtreeLeafLabel == nil {
		var v bool = false
		t.EtreeLeafLabel = &v
	}
	if t.EtreeLeafLabelValue == nil {
		t.EtreeLeafLabelValue = NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EtreeLeafLabelValue_Enum_dynamic
	}
	if t.MulticastLeaveSyncPropagation == nil {
		var v int32 = 5
		t.MulticastLeaveSyncPropagation = &v
	}
	t.AdPerEsRoute.PopulateDefaults()
	t.IpPrefixRoutes.PopulateDefaults()
	for _, e := range t.EthernetSegment {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_AdPerEsRoute represents the /nokia-conf/configure/groups/group/service/system/bgp/evpn/ad-per-es-route YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_AdPerEsRoute struct {
	ExtendedEviRange            *bool                                                                                   `path:"extended-evi-range" module:"nokia-conf"`
	RouteDistinguisherIpAddress *string                                                                                 `path:"route-distinguisher-ip-address" module:"nokia-conf"`
	RouteTargetType             E_NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_AdPerEsRoute_RouteTargetType `path:"route-target-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_AdPerEsRoute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_AdPerEsRoute) IsYANGGoStruct() {}

// GetExtendedEviRange retrieves the value of the leaf ExtendedEviRange from the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_AdPerEsRoute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtendedEviRange is set, it can
// safely use t.GetExtendedEviRange() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtendedEviRange == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_AdPerEsRoute) GetExtendedEviRange() bool {
	if t == nil || t.ExtendedEviRange == nil {
		return false
	}
	return *t.ExtendedEviRange
}

// GetRouteDistinguisherIpAddress retrieves the value of the leaf RouteDistinguisherIpAddress from the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_AdPerEsRoute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteDistinguisherIpAddress is set, it can
// safely use t.GetRouteDistinguisherIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteDistinguisherIpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_AdPerEsRoute) GetRouteDistinguisherIpAddress() string {
	if t == nil || t.RouteDistinguisherIpAddress == nil {
		return ""
	}
	return *t.RouteDistinguisherIpAddress
}

// GetRouteTargetType retrieves the value of the leaf RouteTargetType from the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_AdPerEsRoute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteTargetType is set, it can
// safely use t.GetRouteTargetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteTargetType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_AdPerEsRoute) GetRouteTargetType() E_NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_AdPerEsRoute_RouteTargetType {
	if t == nil || t.RouteTargetType == 0 {
		return NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_AdPerEsRoute_RouteTargetType_evi_route_target
	}
	return t.RouteTargetType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_AdPerEsRoute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_AdPerEsRoute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ExtendedEviRange == nil {
		var v bool = false
		t.ExtendedEviRange = &v
	}
	if t.RouteTargetType == 0 {
		t.RouteTargetType = NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_AdPerEsRoute_RouteTargetType_evi_route_target
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_AdPerEsRoute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_AdPerEsRoute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_AdPerEsRoute) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_AdPerEsRoute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_AdPerEsRoute.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_AdPerEsRoute) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment represents the /nokia-conf/configure/groups/group/service/system/bgp/evpn/ethernet-segment YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment struct {
	AcDfCapability      E_NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_AcDfCapability  `path:"ac-df-capability" module:"nokia-conf"`
	AdminState          E_NokiaTypesSros_AdminState                                                                `path:"admin-state" module:"nokia-conf"`
	Association         *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association      `path:"association" module:"nokia-conf"`
	AutoEsi             E_NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_AutoEsi         `path:"auto-esi" module:"nokia-conf"`
	DfElection          *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection       `path:"df-election" module:"nokia-conf"`
	Esi                 *string                                                                                    `path:"esi" module:"nokia-conf"`
	EthernetSegmentName *string                                                                                    `path:"ethernet-segment-name" module:"nokia-conf"`
	MultiHomingMode     E_NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_MultiHomingMode `path:"multi-homing-mode" module:"nokia-conf"`
	OperGroup           *string                                                                                    `path:"oper-group" module:"nokia-conf"`
	OrigIp              *string                                                                                    `path:"orig-ip" module:"nokia-conf"`
	Pbb                 *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Pbb              `path:"pbb" module:"nokia-conf"`
	RouteNextHop        *string                                                                                    `path:"route-next-hop" module:"nokia-conf"`
	Type                E_NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Type            `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment) IsYANGGoStruct() {}

// GetOrCreateAssociation retrieves the value of the Association field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment) GetOrCreateAssociation() *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association {
	if t.Association != nil {
		return t.Association
	}
	t.Association = &NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association{}
	return t.Association
}

// GetOrCreateDfElection retrieves the value of the DfElection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment) GetOrCreateDfElection() *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection {
	if t.DfElection != nil {
		return t.DfElection
	}
	t.DfElection = &NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection{}
	return t.DfElection
}

// GetOrCreatePbb retrieves the value of the Pbb field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment) GetOrCreatePbb() *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Pbb {
	if t.Pbb != nil {
		return t.Pbb
	}
	t.Pbb = &NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Pbb{}
	return t.Pbb
}

// GetAssociation returns the value of the Association struct pointer
// from NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment. If the receiver or the field Association is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment) GetAssociation() *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association {
	if t != nil && t.Association != nil {
		return t.Association
	}
	return nil
}

// GetDfElection returns the value of the DfElection struct pointer
// from NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment. If the receiver or the field DfElection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment) GetDfElection() *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection {
	if t != nil && t.DfElection != nil {
		return t.DfElection
	}
	return nil
}

// GetPbb returns the value of the Pbb struct pointer
// from NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment. If the receiver or the field Pbb is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment) GetPbb() *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Pbb {
	if t != nil && t.Pbb != nil {
		return t.Pbb
	}
	return nil
}

// GetAcDfCapability retrieves the value of the leaf AcDfCapability from the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AcDfCapability is set, it can
// safely use t.GetAcDfCapability() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AcDfCapability == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment) GetAcDfCapability() E_NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_AcDfCapability {
	if t == nil || t.AcDfCapability == 0 {
		return NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_AcDfCapability_include
	}
	return t.AcDfCapability
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAutoEsi retrieves the value of the leaf AutoEsi from the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoEsi is set, it can
// safely use t.GetAutoEsi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoEsi == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment) GetAutoEsi() E_NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_AutoEsi {
	if t == nil || t.AutoEsi == 0 {
		return NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_AutoEsi_none
	}
	return t.AutoEsi
}

// GetEsi retrieves the value of the leaf Esi from the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Esi is set, it can
// safely use t.GetEsi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Esi == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment) GetEsi() string {
	if t == nil || t.Esi == nil {
		return ""
	}
	return *t.Esi
}

// GetEthernetSegmentName retrieves the value of the leaf EthernetSegmentName from the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EthernetSegmentName is set, it can
// safely use t.GetEthernetSegmentName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EthernetSegmentName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment) GetEthernetSegmentName() string {
	if t == nil || t.EthernetSegmentName == nil {
		return ""
	}
	return *t.EthernetSegmentName
}

// GetMultiHomingMode retrieves the value of the leaf MultiHomingMode from the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MultiHomingMode is set, it can
// safely use t.GetMultiHomingMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MultiHomingMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment) GetMultiHomingMode() E_NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_MultiHomingMode {
	if t == nil || t.MultiHomingMode == 0 {
		return NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_MultiHomingMode_none
	}
	return t.MultiHomingMode
}

// GetOperGroup retrieves the value of the leaf OperGroup from the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OperGroup is set, it can
// safely use t.GetOperGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OperGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment) GetOperGroup() string {
	if t == nil || t.OperGroup == nil {
		return ""
	}
	return *t.OperGroup
}

// GetOrigIp retrieves the value of the leaf OrigIp from the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OrigIp is set, it can
// safely use t.GetOrigIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OrigIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment) GetOrigIp() string {
	if t == nil || t.OrigIp == nil {
		return ""
	}
	return *t.OrigIp
}

// GetRouteNextHop retrieves the value of the leaf RouteNextHop from the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteNextHop is set, it can
// safely use t.GetRouteNextHop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteNextHop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment) GetRouteNextHop() string {
	if t == nil || t.RouteNextHop == nil {
		return ""
	}
	return *t.RouteNextHop
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment) GetType() E_NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Type {
	if t == nil || t.Type == 0 {
		return NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Type_none
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AcDfCapability == 0 {
		t.AcDfCapability = NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_AcDfCapability_include
	}
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.AutoEsi == 0 {
		t.AutoEsi = NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_AutoEsi_none
	}
	if t.MultiHomingMode == 0 {
		t.MultiHomingMode = NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_MultiHomingMode_none
	}
	if t.Type == 0 {
		t.Type = NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Type_none
	}
	t.Association.PopulateDefaults()
	t.DfElection.PopulateDefaults()
	t.Pbb.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EthernetSegmentName == nil {
		return nil, fmt.Errorf("nil value for key EthernetSegmentName")
	}

	return map[string]interface{}{
		"ethernet-segment-name": *t.EthernetSegmentName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association represents the /nokia-conf/configure/groups/group/service/system/bgp/evpn/ethernet-segment/association YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association struct {
	Lag                      map[string]*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag                                                                                                                                                              `path:"lag" module:"nokia-conf"`
	NetworkInterconnectVxlan map[NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_NetworkInterconnectVxlanId_Union]*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan `path:"network-interconnect-vxlan" module:"nokia-conf"`
	Port                     map[string]*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port                                                                                                                                                             `path:"port" module:"nokia-conf"`
	PwPort                   map[NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_PwPortId_Union]*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort                                                       `path:"pw-port" module:"nokia-conf"`
	Sdp                      map[NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_SdpId_Union]*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp                                                                `path:"sdp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association) IsYANGGoStruct() {
}

// NewLag creates a new entry in the Lag list of the
// NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association) NewLag(LagName string) (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Lag == nil {
		t.Lag = make(map[string]*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag)
	}

	key := LagName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Lag[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Lag", key)
	}

	t.Lag[key] = &NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag{
		LagName: &LagName,
	}

	return t.Lag[key], nil
}

// RenameLag renames an entry in the list Lag within
// the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association) RenameLag(oldK, newK string) error {
	if _, ok := t.Lag[newK]; ok {
		return fmt.Errorf("key %v already exists in Lag", newK)
	}

	e, ok := t.Lag[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Lag", oldK)
	}
	e.LagName = &newK

	t.Lag[newK] = e
	delete(t.Lag, oldK)
	return nil
}

// GetOrCreateLag retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association) GetOrCreateLag(LagName string) *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag {

	key := LagName

	if v, ok := t.Lag[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLag(LagName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLag got unexpected error: %v", err))
	}
	return v
}

// GetLag retrieves the value with the specified key from
// the Lag map field of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association) GetLag(LagName string) *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag {

	if t == nil {
		return nil
	}

	key := LagName

	if lm, ok := t.Lag[key]; ok {
		return lm
	}
	return nil
}

// DeleteLag deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association) DeleteLag(LagName string) {
	key := LagName

	delete(t.Lag, key)
}

// AppendLag appends the supplied NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag struct to the
// list Lag of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association) AppendLag(v *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag) error {
	if v.LagName == nil {
		return fmt.Errorf("invalid nil key received for LagName")
	}

	key := *v.LagName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Lag == nil {
		t.Lag = make(map[string]*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag)
	}

	if _, ok := t.Lag[key]; ok {
		return fmt.Errorf("duplicate key for list Lag %v", key)
	}

	t.Lag[key] = v
	return nil
}

// NewNetworkInterconnectVxlan creates a new entry in the NetworkInterconnectVxlan list of the
// NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association) NewNetworkInterconnectVxlan(NetworkInterconnectVxlanId NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_NetworkInterconnectVxlanId_Union) (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NetworkInterconnectVxlan == nil {
		t.NetworkInterconnectVxlan = make(map[NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_NetworkInterconnectVxlanId_Union]*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan)
	}

	key := NetworkInterconnectVxlanId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NetworkInterconnectVxlan[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NetworkInterconnectVxlan", key)
	}

	t.NetworkInterconnectVxlan[key] = &NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan{
		NetworkInterconnectVxlanId: NetworkInterconnectVxlanId,
	}

	return t.NetworkInterconnectVxlan[key], nil
}

// RenameNetworkInterconnectVxlan renames an entry in the list NetworkInterconnectVxlan within
// the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association) RenameNetworkInterconnectVxlan(oldK, newK NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_NetworkInterconnectVxlanId_Union) error {
	if _, ok := t.NetworkInterconnectVxlan[newK]; ok {
		return fmt.Errorf("key %v already exists in NetworkInterconnectVxlan", newK)
	}

	e, ok := t.NetworkInterconnectVxlan[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NetworkInterconnectVxlan", oldK)
	}
	e.NetworkInterconnectVxlanId = newK

	t.NetworkInterconnectVxlan[newK] = e
	delete(t.NetworkInterconnectVxlan, oldK)
	return nil
}

// GetOrCreateNetworkInterconnectVxlan retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association) GetOrCreateNetworkInterconnectVxlan(NetworkInterconnectVxlanId NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_NetworkInterconnectVxlanId_Union) *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan {

	key := NetworkInterconnectVxlanId

	if v, ok := t.NetworkInterconnectVxlan[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNetworkInterconnectVxlan(NetworkInterconnectVxlanId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNetworkInterconnectVxlan got unexpected error: %v", err))
	}
	return v
}

// GetNetworkInterconnectVxlan retrieves the value with the specified key from
// the NetworkInterconnectVxlan map field of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association) GetNetworkInterconnectVxlan(NetworkInterconnectVxlanId NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_NetworkInterconnectVxlanId_Union) *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan {

	if t == nil {
		return nil
	}

	key := NetworkInterconnectVxlanId

	if lm, ok := t.NetworkInterconnectVxlan[key]; ok {
		return lm
	}
	return nil
}

// DeleteNetworkInterconnectVxlan deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association) DeleteNetworkInterconnectVxlan(NetworkInterconnectVxlanId NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_NetworkInterconnectVxlanId_Union) {
	key := NetworkInterconnectVxlanId

	delete(t.NetworkInterconnectVxlan, key)
}

// AppendNetworkInterconnectVxlan appends the supplied NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan struct to the
// list NetworkInterconnectVxlan of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association) AppendNetworkInterconnectVxlan(v *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan) error {
	key := v.NetworkInterconnectVxlanId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NetworkInterconnectVxlan == nil {
		t.NetworkInterconnectVxlan = make(map[NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_NetworkInterconnectVxlanId_Union]*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan)
	}

	if _, ok := t.NetworkInterconnectVxlan[key]; ok {
		return fmt.Errorf("duplicate key for list NetworkInterconnectVxlan %v", key)
	}

	t.NetworkInterconnectVxlan[key] = v
	return nil
}

// NewPort creates a new entry in the Port list of the
// NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association) NewPort(PortId string) (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Port == nil {
		t.Port = make(map[string]*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port)
	}

	key := PortId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Port[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Port", key)
	}

	t.Port[key] = &NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port{
		PortId: &PortId,
	}

	return t.Port[key], nil
}

// RenamePort renames an entry in the list Port within
// the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association) RenamePort(oldK, newK string) error {
	if _, ok := t.Port[newK]; ok {
		return fmt.Errorf("key %v already exists in Port", newK)
	}

	e, ok := t.Port[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Port", oldK)
	}
	e.PortId = &newK

	t.Port[newK] = e
	delete(t.Port, oldK)
	return nil
}

// GetOrCreatePort retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association) GetOrCreatePort(PortId string) *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port {

	key := PortId

	if v, ok := t.Port[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPort(PortId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePort got unexpected error: %v", err))
	}
	return v
}

// GetPort retrieves the value with the specified key from
// the Port map field of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association) GetPort(PortId string) *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port {

	if t == nil {
		return nil
	}

	key := PortId

	if lm, ok := t.Port[key]; ok {
		return lm
	}
	return nil
}

// DeletePort deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association) DeletePort(PortId string) {
	key := PortId

	delete(t.Port, key)
}

// AppendPort appends the supplied NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port struct to the
// list Port of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association) AppendPort(v *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port) error {
	if v.PortId == nil {
		return fmt.Errorf("invalid nil key received for PortId")
	}

	key := *v.PortId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Port == nil {
		t.Port = make(map[string]*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port)
	}

	if _, ok := t.Port[key]; ok {
		return fmt.Errorf("duplicate key for list Port %v", key)
	}

	t.Port[key] = v
	return nil
}

// NewPwPort creates a new entry in the PwPort list of the
// NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association) NewPwPort(PwPortId NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_PwPortId_Union) (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PwPort == nil {
		t.PwPort = make(map[NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_PwPortId_Union]*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort)
	}

	key := PwPortId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PwPort[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PwPort", key)
	}

	t.PwPort[key] = &NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort{
		PwPortId: PwPortId,
	}

	return t.PwPort[key], nil
}

// RenamePwPort renames an entry in the list PwPort within
// the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association) RenamePwPort(oldK, newK NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_PwPortId_Union) error {
	if _, ok := t.PwPort[newK]; ok {
		return fmt.Errorf("key %v already exists in PwPort", newK)
	}

	e, ok := t.PwPort[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PwPort", oldK)
	}
	e.PwPortId = newK

	t.PwPort[newK] = e
	delete(t.PwPort, oldK)
	return nil
}

// GetOrCreatePwPort retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association) GetOrCreatePwPort(PwPortId NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_PwPortId_Union) *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort {

	key := PwPortId

	if v, ok := t.PwPort[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPwPort(PwPortId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePwPort got unexpected error: %v", err))
	}
	return v
}

// GetPwPort retrieves the value with the specified key from
// the PwPort map field of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association) GetPwPort(PwPortId NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_PwPortId_Union) *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort {

	if t == nil {
		return nil
	}

	key := PwPortId

	if lm, ok := t.PwPort[key]; ok {
		return lm
	}
	return nil
}

// DeletePwPort deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association) DeletePwPort(PwPortId NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_PwPortId_Union) {
	key := PwPortId

	delete(t.PwPort, key)
}

// AppendPwPort appends the supplied NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort struct to the
// list PwPort of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association) AppendPwPort(v *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort) error {
	key := v.PwPortId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PwPort == nil {
		t.PwPort = make(map[NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_PwPortId_Union]*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort)
	}

	if _, ok := t.PwPort[key]; ok {
		return fmt.Errorf("duplicate key for list PwPort %v", key)
	}

	t.PwPort[key] = v
	return nil
}

// NewSdp creates a new entry in the Sdp list of the
// NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association) NewSdp(SdpId NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_SdpId_Union) (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sdp == nil {
		t.Sdp = make(map[NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_SdpId_Union]*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp)
	}

	key := SdpId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Sdp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Sdp", key)
	}

	t.Sdp[key] = &NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp{
		SdpId: SdpId,
	}

	return t.Sdp[key], nil
}

// RenameSdp renames an entry in the list Sdp within
// the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association) RenameSdp(oldK, newK NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_SdpId_Union) error {
	if _, ok := t.Sdp[newK]; ok {
		return fmt.Errorf("key %v already exists in Sdp", newK)
	}

	e, ok := t.Sdp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Sdp", oldK)
	}
	e.SdpId = newK

	t.Sdp[newK] = e
	delete(t.Sdp, oldK)
	return nil
}

// GetOrCreateSdp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association) GetOrCreateSdp(SdpId NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_SdpId_Union) *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp {

	key := SdpId

	if v, ok := t.Sdp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSdp(SdpId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSdp got unexpected error: %v", err))
	}
	return v
}

// GetSdp retrieves the value with the specified key from
// the Sdp map field of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association) GetSdp(SdpId NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_SdpId_Union) *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp {

	if t == nil {
		return nil
	}

	key := SdpId

	if lm, ok := t.Sdp[key]; ok {
		return lm
	}
	return nil
}

// DeleteSdp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association) DeleteSdp(SdpId NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_SdpId_Union) {
	key := SdpId

	delete(t.Sdp, key)
}

// AppendSdp appends the supplied NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp struct to the
// list Sdp of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association) AppendSdp(v *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp) error {
	key := v.SdpId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sdp == nil {
		t.Sdp = make(map[NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_SdpId_Union]*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp)
	}

	if _, ok := t.Sdp[key]; ok {
		return fmt.Errorf("duplicate key for list Sdp %v", key)
	}

	t.Sdp[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Lag {
		e.PopulateDefaults()
	}
	for _, e := range t.NetworkInterconnectVxlan {
		e.PopulateDefaults()
	}
	for _, e := range t.Port {
		e.PopulateDefaults()
	}
	for _, e := range t.PwPort {
		e.PopulateDefaults()
	}
	for _, e := range t.Sdp {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag represents the /nokia-conf/configure/groups/group/service/system/bgp/evpn/ethernet-segment/association/lag YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag struct {
	LagName       *string                                                                                                 `path:"lag-name" module:"nokia-conf"`
	VirtualRanges *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges `path:"virtual-ranges" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag) IsYANGGoStruct() {
}

// GetOrCreateVirtualRanges retrieves the value of the VirtualRanges field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag) GetOrCreateVirtualRanges() *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges {
	if t.VirtualRanges != nil {
		return t.VirtualRanges
	}
	t.VirtualRanges = &NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges{}
	return t.VirtualRanges
}

// GetVirtualRanges returns the value of the VirtualRanges struct pointer
// from NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag. If the receiver or the field VirtualRanges is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag) GetVirtualRanges() *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges {
	if t != nil && t.VirtualRanges != nil {
		return t.VirtualRanges
	}
	return nil
}

// GetLagName retrieves the value of the leaf LagName from the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LagName is set, it can
// safely use t.GetLagName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LagName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag) GetLagName() string {
	if t == nil || t.LagName == nil {
		return ""
	}
	return *t.LagName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.VirtualRanges.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LagName == nil {
		return nil, fmt.Errorf("nil value for key LagName")
	}

	return map[string]interface{}{
		"lag-name": *t.LagName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges represents the /nokia-conf/configure/groups/group/service/system/bgp/evpn/ethernet-segment/association/lag/virtual-ranges YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges struct {
	Dot1Q *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q `path:"dot1q" module:"nokia-conf"`
	Qinq  *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq  `path:"qinq" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges) IsYANGGoStruct() {
}

// GetOrCreateDot1Q retrieves the value of the Dot1Q field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges) GetOrCreateDot1Q() *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q {
	if t.Dot1Q != nil {
		return t.Dot1Q
	}
	t.Dot1Q = &NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q{}
	return t.Dot1Q
}

// GetOrCreateQinq retrieves the value of the Qinq field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges) GetOrCreateQinq() *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq {
	if t.Qinq != nil {
		return t.Qinq
	}
	t.Qinq = &NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq{}
	return t.Qinq
}

// GetDot1Q returns the value of the Dot1Q struct pointer
// from NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges. If the receiver or the field Dot1Q is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges) GetDot1Q() *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q {
	if t != nil && t.Dot1Q != nil {
		return t.Dot1Q
	}
	return nil
}

// GetQinq returns the value of the Qinq struct pointer
// from NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges. If the receiver or the field Qinq is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges) GetQinq() *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq {
	if t != nil && t.Qinq != nil {
		return t.Qinq
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Dot1Q.PopulateDefaults()
	t.Qinq.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q represents the /nokia-conf/configure/groups/group/service/system/bgp/evpn/ethernet-segment/association/lag/virtual-ranges/dot1q YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q struct {
	QTag map[NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag_Start_Union]*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag `path:"q-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q) IsYANGGoStruct() {
}

// NewQTag creates a new entry in the QTag list of the
// NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q) NewQTag(Start NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag_Start_Union) (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.QTag == nil {
		t.QTag = make(map[NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag_Start_Union]*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag)
	}

	key := Start

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.QTag[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list QTag", key)
	}

	t.QTag[key] = &NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag{
		Start: Start,
	}

	return t.QTag[key], nil
}

// RenameQTag renames an entry in the list QTag within
// the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q) RenameQTag(oldK, newK NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag_Start_Union) error {
	if _, ok := t.QTag[newK]; ok {
		return fmt.Errorf("key %v already exists in QTag", newK)
	}

	e, ok := t.QTag[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in QTag", oldK)
	}
	e.Start = newK

	t.QTag[newK] = e
	delete(t.QTag, oldK)
	return nil
}

// GetOrCreateQTag retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q) GetOrCreateQTag(Start NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag_Start_Union) *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag {

	key := Start

	if v, ok := t.QTag[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQTag(Start)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQTag got unexpected error: %v", err))
	}
	return v
}

// GetQTag retrieves the value with the specified key from
// the QTag map field of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q) GetQTag(Start NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag_Start_Union) *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag {

	if t == nil {
		return nil
	}

	key := Start

	if lm, ok := t.QTag[key]; ok {
		return lm
	}
	return nil
}

// DeleteQTag deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q) DeleteQTag(Start NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag_Start_Union) {
	key := Start

	delete(t.QTag, key)
}

// AppendQTag appends the supplied NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag struct to the
// list QTag of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q) AppendQTag(v *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag) error {
	key := v.Start

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.QTag == nil {
		t.QTag = make(map[NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag_Start_Union]*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag)
	}

	if _, ok := t.QTag[key]; ok {
		return fmt.Errorf("duplicate key for list QTag %v", key)
	}

	t.QTag[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.QTag {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag represents the /nokia-conf/configure/groups/group/service/system/bgp/evpn/ethernet-segment/association/lag/virtual-ranges/dot1q/q-tag YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag struct {
	End   NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag_End_Union   `path:"end" module:"nokia-conf"`
	Start NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag_Start_Union `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag) GetEnd() NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag_End_Union {
	if t == nil || t.End == nil {
		return nil
	}
	return t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag) GetStart() NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag_Start_Union {
	if t == nil || t.Start == nil {
		return nil
	}
	return t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"start": t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Dot1Q_QTag) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq represents the /nokia-conf/configure/groups/group/service/system/bgp/evpn/ethernet-segment/association/lag/virtual-ranges/qinq YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq struct {
	STag     map[NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag_Start_Union]*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag `path:"s-tag" module:"nokia-conf"`
	STagCTag map[NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag_Key]*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag `path:"s-tag-c-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq) IsYANGGoStruct() {
}

// NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag_Key represents the key for list STagCTag of element /nokia-conf/configure/groups/group/service/system/bgp/evpn/ethernet-segment/association/lag/virtual-ranges/qinq.
type NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag_Key struct {
	STag      NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag_STag_Union      `path:"s-tag"`
	CTagStart NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag_CTagStart_Union `path:"c-tag-start"`
}

// NewSTag creates a new entry in the STag list of the
// NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq) NewSTag(Start NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag_Start_Union) (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.STag == nil {
		t.STag = make(map[NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag_Start_Union]*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag)
	}

	key := Start

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.STag[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list STag", key)
	}

	t.STag[key] = &NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag{
		Start: Start,
	}

	return t.STag[key], nil
}

// RenameSTag renames an entry in the list STag within
// the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq) RenameSTag(oldK, newK NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag_Start_Union) error {
	if _, ok := t.STag[newK]; ok {
		return fmt.Errorf("key %v already exists in STag", newK)
	}

	e, ok := t.STag[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in STag", oldK)
	}
	e.Start = newK

	t.STag[newK] = e
	delete(t.STag, oldK)
	return nil
}

// GetOrCreateSTag retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq) GetOrCreateSTag(Start NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag_Start_Union) *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag {

	key := Start

	if v, ok := t.STag[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSTag(Start)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSTag got unexpected error: %v", err))
	}
	return v
}

// GetSTag retrieves the value with the specified key from
// the STag map field of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq) GetSTag(Start NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag_Start_Union) *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag {

	if t == nil {
		return nil
	}

	key := Start

	if lm, ok := t.STag[key]; ok {
		return lm
	}
	return nil
}

// DeleteSTag deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq) DeleteSTag(Start NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag_Start_Union) {
	key := Start

	delete(t.STag, key)
}

// AppendSTag appends the supplied NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag struct to the
// list STag of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq) AppendSTag(v *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag) error {
	key := v.Start

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.STag == nil {
		t.STag = make(map[NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag_Start_Union]*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag)
	}

	if _, ok := t.STag[key]; ok {
		return fmt.Errorf("duplicate key for list STag %v", key)
	}

	t.STag[key] = v
	return nil
}

// NewSTagCTag creates a new entry in the STagCTag list of the
// NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq) NewSTagCTag(STag NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag_STag_Union, CTagStart NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag_CTagStart_Union) (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.STagCTag == nil {
		t.STagCTag = make(map[NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag_Key]*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag)
	}

	key := NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag_Key{
		STag:      STag,
		CTagStart: CTagStart,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.STagCTag[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list STagCTag", key)
	}

	t.STagCTag[key] = &NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag{
		STag:      STag,
		CTagStart: CTagStart,
	}

	return t.STagCTag[key], nil
}

// RenameSTagCTag renames an entry in the list STagCTag within
// the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq) RenameSTagCTag(oldK, newK NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag_Key) error {
	if _, ok := t.STagCTag[newK]; ok {
		return fmt.Errorf("key %v already exists in STagCTag", newK)
	}

	e, ok := t.STagCTag[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in STagCTag", oldK)
	}
	e.STag = newK.STag
	e.CTagStart = newK.CTagStart

	t.STagCTag[newK] = e
	delete(t.STagCTag, oldK)
	return nil
}

// GetOrCreateSTagCTag retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq) GetOrCreateSTagCTag(STag NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag_STag_Union, CTagStart NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag_CTagStart_Union) *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag {

	key := NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag_Key{
		STag:      STag,
		CTagStart: CTagStart,
	}

	if v, ok := t.STagCTag[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSTagCTag(STag, CTagStart)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSTagCTag got unexpected error: %v", err))
	}
	return v
}

// GetSTagCTag retrieves the value with the specified key from
// the STagCTag map field of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq) GetSTagCTag(STag NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag_STag_Union, CTagStart NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag_CTagStart_Union) *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag_Key{
		STag:      STag,
		CTagStart: CTagStart,
	}

	if lm, ok := t.STagCTag[key]; ok {
		return lm
	}
	return nil
}

// DeleteSTagCTag deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq) DeleteSTagCTag(STag NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag_STag_Union, CTagStart NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag_CTagStart_Union) {
	key := NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag_Key{
		STag:      STag,
		CTagStart: CTagStart,
	}

	delete(t.STagCTag, key)
}

// AppendSTagCTag appends the supplied NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag struct to the
// list STagCTag of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq) AppendSTagCTag(v *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag) error {
	key := NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag_Key{
		STag:      v.STag,
		CTagStart: v.CTagStart,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.STagCTag == nil {
		t.STagCTag = make(map[NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag_Key]*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag)
	}

	if _, ok := t.STagCTag[key]; ok {
		return fmt.Errorf("duplicate key for list STagCTag %v", key)
	}

	t.STagCTag[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.STag {
		e.PopulateDefaults()
	}
	for _, e := range t.STagCTag {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag represents the /nokia-conf/configure/groups/group/service/system/bgp/evpn/ethernet-segment/association/lag/virtual-ranges/qinq/s-tag YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag struct {
	End   NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag_End_Union   `path:"end" module:"nokia-conf"`
	Start NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag_Start_Union `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag) GetEnd() NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag_End_Union {
	if t == nil || t.End == nil {
		return nil
	}
	return t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag) GetStart() NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag_Start_Union {
	if t == nil || t.Start == nil {
		return nil
	}
	return t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"start": t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STag) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag represents the /nokia-conf/configure/groups/group/service/system/bgp/evpn/ethernet-segment/association/lag/virtual-ranges/qinq/s-tag-c-tag YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag struct {
	CTagEnd   NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag_CTagEnd_Union   `path:"c-tag-end" module:"nokia-conf"`
	CTagStart NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag_CTagStart_Union `path:"c-tag-start" module:"nokia-conf"`
	STag      NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag_STag_Union      `path:"s-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag) IsYANGGoStruct() {
}

// GetCTagEnd retrieves the value of the leaf CTagEnd from the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CTagEnd is set, it can
// safely use t.GetCTagEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CTagEnd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag) GetCTagEnd() NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag_CTagEnd_Union {
	if t == nil || t.CTagEnd == nil {
		return nil
	}
	return t.CTagEnd
}

// GetCTagStart retrieves the value of the leaf CTagStart from the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CTagStart is set, it can
// safely use t.GetCTagStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CTagStart == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag) GetCTagStart() NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag_CTagStart_Union {
	if t == nil || t.CTagStart == nil {
		return nil
	}
	return t.CTagStart
}

// GetSTag retrieves the value of the leaf STag from the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if STag is set, it can
// safely use t.GetSTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.STag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag) GetSTag() NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag_STag_Union {
	if t == nil || t.STag == nil {
		return nil
	}
	return t.STag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"c-tag-start": t.CTagStart,
		"s-tag":       t.STag,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Lag_VirtualRanges_Qinq_STagCTag) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan represents the /nokia-conf/configure/groups/group/service/system/bgp/evpn/ethernet-segment/association/network-interconnect-vxlan YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan struct {
	NetworkInterconnectVxlanId NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_NetworkInterconnectVxlanId_Union `path:"network-interconnect-vxlan-id" module:"nokia-conf"`
	VirtualRanges              *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges                   `path:"virtual-ranges" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan) IsYANGGoStruct() {
}

// GetOrCreateVirtualRanges retrieves the value of the VirtualRanges field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan) GetOrCreateVirtualRanges() *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges {
	if t.VirtualRanges != nil {
		return t.VirtualRanges
	}
	t.VirtualRanges = &NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges{}
	return t.VirtualRanges
}

// GetVirtualRanges returns the value of the VirtualRanges struct pointer
// from NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan. If the receiver or the field VirtualRanges is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan) GetVirtualRanges() *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges {
	if t != nil && t.VirtualRanges != nil {
		return t.VirtualRanges
	}
	return nil
}

// GetNetworkInterconnectVxlanId retrieves the value of the leaf NetworkInterconnectVxlanId from the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NetworkInterconnectVxlanId is set, it can
// safely use t.GetNetworkInterconnectVxlanId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NetworkInterconnectVxlanId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan) GetNetworkInterconnectVxlanId() NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_NetworkInterconnectVxlanId_Union {
	if t == nil || t.NetworkInterconnectVxlanId == nil {
		return nil
	}
	return t.NetworkInterconnectVxlanId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.VirtualRanges.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"network-interconnect-vxlan-id": t.NetworkInterconnectVxlanId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges represents the /nokia-conf/configure/groups/group/service/system/bgp/evpn/ethernet-segment/association/network-interconnect-vxlan/virtual-ranges YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges struct {
	ServiceId map[NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges_ServiceId_Start_Union]*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges_ServiceId `path:"service-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges) IsYANGGoStruct() {
}

// NewServiceId creates a new entry in the ServiceId list of the
// NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges) NewServiceId(Start NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges_ServiceId_Start_Union) (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges_ServiceId, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ServiceId == nil {
		t.ServiceId = make(map[NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges_ServiceId_Start_Union]*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges_ServiceId)
	}

	key := Start

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ServiceId[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ServiceId", key)
	}

	t.ServiceId[key] = &NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges_ServiceId{
		Start: Start,
	}

	return t.ServiceId[key], nil
}

// RenameServiceId renames an entry in the list ServiceId within
// the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges) RenameServiceId(oldK, newK NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges_ServiceId_Start_Union) error {
	if _, ok := t.ServiceId[newK]; ok {
		return fmt.Errorf("key %v already exists in ServiceId", newK)
	}

	e, ok := t.ServiceId[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ServiceId", oldK)
	}
	e.Start = newK

	t.ServiceId[newK] = e
	delete(t.ServiceId, oldK)
	return nil
}

// GetOrCreateServiceId retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges) GetOrCreateServiceId(Start NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges_ServiceId_Start_Union) *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges_ServiceId {

	key := Start

	if v, ok := t.ServiceId[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServiceId(Start)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServiceId got unexpected error: %v", err))
	}
	return v
}

// GetServiceId retrieves the value with the specified key from
// the ServiceId map field of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges) GetServiceId(Start NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges_ServiceId_Start_Union) *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges_ServiceId {

	if t == nil {
		return nil
	}

	key := Start

	if lm, ok := t.ServiceId[key]; ok {
		return lm
	}
	return nil
}

// DeleteServiceId deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges) DeleteServiceId(Start NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges_ServiceId_Start_Union) {
	key := Start

	delete(t.ServiceId, key)
}

// AppendServiceId appends the supplied NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges_ServiceId struct to the
// list ServiceId of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges_ServiceId already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges) AppendServiceId(v *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges_ServiceId) error {
	key := v.Start

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ServiceId == nil {
		t.ServiceId = make(map[NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges_ServiceId_Start_Union]*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges_ServiceId)
	}

	if _, ok := t.ServiceId[key]; ok {
		return fmt.Errorf("duplicate key for list ServiceId %v", key)
	}

	t.ServiceId[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.ServiceId {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges_ServiceId represents the /nokia-conf/configure/groups/group/service/system/bgp/evpn/ethernet-segment/association/network-interconnect-vxlan/virtual-ranges/service-id YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges_ServiceId struct {
	End   *uint32                                                                                                                                           `path:"end" module:"nokia-conf"`
	Start NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges_ServiceId_Start_Union `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges_ServiceId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges_ServiceId) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges_ServiceId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges_ServiceId) GetEnd() uint32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges_ServiceId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges_ServiceId) GetStart() NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges_ServiceId_Start_Union {
	if t == nil || t.Start == nil {
		return nil
	}
	return t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges_ServiceId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges_ServiceId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges_ServiceId struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges_ServiceId) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"start": t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges_ServiceId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges_ServiceId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges_ServiceId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges_ServiceId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges_ServiceId.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_NetworkInterconnectVxlan_VirtualRanges_ServiceId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port represents the /nokia-conf/configure/groups/group/service/system/bgp/evpn/ethernet-segment/association/port YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port struct {
	PortId        *string                                                                                                  `path:"port-id" module:"nokia-conf"`
	VirtualRanges *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges `path:"virtual-ranges" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port) IsYANGGoStruct() {
}

// GetOrCreateVirtualRanges retrieves the value of the VirtualRanges field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port) GetOrCreateVirtualRanges() *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges {
	if t.VirtualRanges != nil {
		return t.VirtualRanges
	}
	t.VirtualRanges = &NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges{}
	return t.VirtualRanges
}

// GetVirtualRanges returns the value of the VirtualRanges struct pointer
// from NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port. If the receiver or the field VirtualRanges is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port) GetVirtualRanges() *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges {
	if t != nil && t.VirtualRanges != nil {
		return t.VirtualRanges
	}
	return nil
}

// GetPortId retrieves the value of the leaf PortId from the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortId is set, it can
// safely use t.GetPortId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port) GetPortId() string {
	if t == nil || t.PortId == nil {
		return ""
	}
	return *t.PortId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.VirtualRanges.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PortId == nil {
		return nil, fmt.Errorf("nil value for key PortId")
	}

	return map[string]interface{}{
		"port-id": *t.PortId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges represents the /nokia-conf/configure/groups/group/service/system/bgp/evpn/ethernet-segment/association/port/virtual-ranges YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges struct {
	Dot1Q *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q `path:"dot1q" module:"nokia-conf"`
	Qinq  *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq  `path:"qinq" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges) IsYANGGoStruct() {
}

// GetOrCreateDot1Q retrieves the value of the Dot1Q field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges) GetOrCreateDot1Q() *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q {
	if t.Dot1Q != nil {
		return t.Dot1Q
	}
	t.Dot1Q = &NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q{}
	return t.Dot1Q
}

// GetOrCreateQinq retrieves the value of the Qinq field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges) GetOrCreateQinq() *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq {
	if t.Qinq != nil {
		return t.Qinq
	}
	t.Qinq = &NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq{}
	return t.Qinq
}

// GetDot1Q returns the value of the Dot1Q struct pointer
// from NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges. If the receiver or the field Dot1Q is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges) GetDot1Q() *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q {
	if t != nil && t.Dot1Q != nil {
		return t.Dot1Q
	}
	return nil
}

// GetQinq returns the value of the Qinq struct pointer
// from NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges. If the receiver or the field Qinq is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges) GetQinq() *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq {
	if t != nil && t.Qinq != nil {
		return t.Qinq
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Dot1Q.PopulateDefaults()
	t.Qinq.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q represents the /nokia-conf/configure/groups/group/service/system/bgp/evpn/ethernet-segment/association/port/virtual-ranges/dot1q YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q struct {
	QTag map[NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag_Start_Union]*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag `path:"q-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q) IsYANGGoStruct() {
}

// NewQTag creates a new entry in the QTag list of the
// NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q) NewQTag(Start NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag_Start_Union) (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.QTag == nil {
		t.QTag = make(map[NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag_Start_Union]*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag)
	}

	key := Start

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.QTag[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list QTag", key)
	}

	t.QTag[key] = &NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag{
		Start: Start,
	}

	return t.QTag[key], nil
}

// RenameQTag renames an entry in the list QTag within
// the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q) RenameQTag(oldK, newK NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag_Start_Union) error {
	if _, ok := t.QTag[newK]; ok {
		return fmt.Errorf("key %v already exists in QTag", newK)
	}

	e, ok := t.QTag[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in QTag", oldK)
	}
	e.Start = newK

	t.QTag[newK] = e
	delete(t.QTag, oldK)
	return nil
}

// GetOrCreateQTag retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q) GetOrCreateQTag(Start NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag_Start_Union) *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag {

	key := Start

	if v, ok := t.QTag[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQTag(Start)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQTag got unexpected error: %v", err))
	}
	return v
}

// GetQTag retrieves the value with the specified key from
// the QTag map field of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q) GetQTag(Start NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag_Start_Union) *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag {

	if t == nil {
		return nil
	}

	key := Start

	if lm, ok := t.QTag[key]; ok {
		return lm
	}
	return nil
}

// DeleteQTag deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q) DeleteQTag(Start NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag_Start_Union) {
	key := Start

	delete(t.QTag, key)
}

// AppendQTag appends the supplied NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag struct to the
// list QTag of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q) AppendQTag(v *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag) error {
	key := v.Start

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.QTag == nil {
		t.QTag = make(map[NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag_Start_Union]*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag)
	}

	if _, ok := t.QTag[key]; ok {
		return fmt.Errorf("duplicate key for list QTag %v", key)
	}

	t.QTag[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.QTag {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag represents the /nokia-conf/configure/groups/group/service/system/bgp/evpn/ethernet-segment/association/port/virtual-ranges/dot1q/q-tag YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag struct {
	End   NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag_End_Union   `path:"end" module:"nokia-conf"`
	Start NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag_Start_Union `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag) GetEnd() NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag_End_Union {
	if t == nil || t.End == nil {
		return nil
	}
	return t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag) GetStart() NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag_Start_Union {
	if t == nil || t.Start == nil {
		return nil
	}
	return t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"start": t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Dot1Q_QTag) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq represents the /nokia-conf/configure/groups/group/service/system/bgp/evpn/ethernet-segment/association/port/virtual-ranges/qinq YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq struct {
	STag     map[NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag_Start_Union]*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag `path:"s-tag" module:"nokia-conf"`
	STagCTag map[NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag_Key]*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag `path:"s-tag-c-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq) IsYANGGoStruct() {
}

// NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag_Key represents the key for list STagCTag of element /nokia-conf/configure/groups/group/service/system/bgp/evpn/ethernet-segment/association/port/virtual-ranges/qinq.
type NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag_Key struct {
	STag      NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag_STag_Union      `path:"s-tag"`
	CTagStart NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag_CTagStart_Union `path:"c-tag-start"`
}

// NewSTag creates a new entry in the STag list of the
// NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq) NewSTag(Start NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag_Start_Union) (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.STag == nil {
		t.STag = make(map[NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag_Start_Union]*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag)
	}

	key := Start

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.STag[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list STag", key)
	}

	t.STag[key] = &NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag{
		Start: Start,
	}

	return t.STag[key], nil
}

// RenameSTag renames an entry in the list STag within
// the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq) RenameSTag(oldK, newK NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag_Start_Union) error {
	if _, ok := t.STag[newK]; ok {
		return fmt.Errorf("key %v already exists in STag", newK)
	}

	e, ok := t.STag[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in STag", oldK)
	}
	e.Start = newK

	t.STag[newK] = e
	delete(t.STag, oldK)
	return nil
}

// GetOrCreateSTag retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq) GetOrCreateSTag(Start NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag_Start_Union) *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag {

	key := Start

	if v, ok := t.STag[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSTag(Start)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSTag got unexpected error: %v", err))
	}
	return v
}

// GetSTag retrieves the value with the specified key from
// the STag map field of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq) GetSTag(Start NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag_Start_Union) *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag {

	if t == nil {
		return nil
	}

	key := Start

	if lm, ok := t.STag[key]; ok {
		return lm
	}
	return nil
}

// DeleteSTag deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq) DeleteSTag(Start NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag_Start_Union) {
	key := Start

	delete(t.STag, key)
}

// AppendSTag appends the supplied NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag struct to the
// list STag of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq) AppendSTag(v *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag) error {
	key := v.Start

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.STag == nil {
		t.STag = make(map[NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag_Start_Union]*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag)
	}

	if _, ok := t.STag[key]; ok {
		return fmt.Errorf("duplicate key for list STag %v", key)
	}

	t.STag[key] = v
	return nil
}

// NewSTagCTag creates a new entry in the STagCTag list of the
// NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq) NewSTagCTag(STag NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag_STag_Union, CTagStart NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag_CTagStart_Union) (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.STagCTag == nil {
		t.STagCTag = make(map[NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag_Key]*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag)
	}

	key := NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag_Key{
		STag:      STag,
		CTagStart: CTagStart,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.STagCTag[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list STagCTag", key)
	}

	t.STagCTag[key] = &NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag{
		STag:      STag,
		CTagStart: CTagStart,
	}

	return t.STagCTag[key], nil
}

// RenameSTagCTag renames an entry in the list STagCTag within
// the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq) RenameSTagCTag(oldK, newK NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag_Key) error {
	if _, ok := t.STagCTag[newK]; ok {
		return fmt.Errorf("key %v already exists in STagCTag", newK)
	}

	e, ok := t.STagCTag[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in STagCTag", oldK)
	}
	e.STag = newK.STag
	e.CTagStart = newK.CTagStart

	t.STagCTag[newK] = e
	delete(t.STagCTag, oldK)
	return nil
}

// GetOrCreateSTagCTag retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq) GetOrCreateSTagCTag(STag NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag_STag_Union, CTagStart NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag_CTagStart_Union) *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag {

	key := NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag_Key{
		STag:      STag,
		CTagStart: CTagStart,
	}

	if v, ok := t.STagCTag[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSTagCTag(STag, CTagStart)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSTagCTag got unexpected error: %v", err))
	}
	return v
}

// GetSTagCTag retrieves the value with the specified key from
// the STagCTag map field of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq) GetSTagCTag(STag NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag_STag_Union, CTagStart NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag_CTagStart_Union) *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag_Key{
		STag:      STag,
		CTagStart: CTagStart,
	}

	if lm, ok := t.STagCTag[key]; ok {
		return lm
	}
	return nil
}

// DeleteSTagCTag deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq) DeleteSTagCTag(STag NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag_STag_Union, CTagStart NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag_CTagStart_Union) {
	key := NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag_Key{
		STag:      STag,
		CTagStart: CTagStart,
	}

	delete(t.STagCTag, key)
}

// AppendSTagCTag appends the supplied NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag struct to the
// list STagCTag of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq) AppendSTagCTag(v *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag) error {
	key := NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag_Key{
		STag:      v.STag,
		CTagStart: v.CTagStart,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.STagCTag == nil {
		t.STagCTag = make(map[NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag_Key]*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag)
	}

	if _, ok := t.STagCTag[key]; ok {
		return fmt.Errorf("duplicate key for list STagCTag %v", key)
	}

	t.STagCTag[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.STag {
		e.PopulateDefaults()
	}
	for _, e := range t.STagCTag {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag represents the /nokia-conf/configure/groups/group/service/system/bgp/evpn/ethernet-segment/association/port/virtual-ranges/qinq/s-tag YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag struct {
	End   NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag_End_Union   `path:"end" module:"nokia-conf"`
	Start NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag_Start_Union `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag) GetEnd() NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag_End_Union {
	if t == nil || t.End == nil {
		return nil
	}
	return t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag) GetStart() NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag_Start_Union {
	if t == nil || t.Start == nil {
		return nil
	}
	return t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"start": t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STag) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag represents the /nokia-conf/configure/groups/group/service/system/bgp/evpn/ethernet-segment/association/port/virtual-ranges/qinq/s-tag-c-tag YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag struct {
	CTagEnd   NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag_CTagEnd_Union   `path:"c-tag-end" module:"nokia-conf"`
	CTagStart NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag_CTagStart_Union `path:"c-tag-start" module:"nokia-conf"`
	STag      NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag_STag_Union      `path:"s-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag) IsYANGGoStruct() {
}

// GetCTagEnd retrieves the value of the leaf CTagEnd from the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CTagEnd is set, it can
// safely use t.GetCTagEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CTagEnd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag) GetCTagEnd() NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag_CTagEnd_Union {
	if t == nil || t.CTagEnd == nil {
		return nil
	}
	return t.CTagEnd
}

// GetCTagStart retrieves the value of the leaf CTagStart from the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CTagStart is set, it can
// safely use t.GetCTagStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CTagStart == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag) GetCTagStart() NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag_CTagStart_Union {
	if t == nil || t.CTagStart == nil {
		return nil
	}
	return t.CTagStart
}

// GetSTag retrieves the value of the leaf STag from the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if STag is set, it can
// safely use t.GetSTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.STag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag) GetSTag() NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag_STag_Union {
	if t == nil || t.STag == nil {
		return nil
	}
	return t.STag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"c-tag-start": t.CTagStart,
		"s-tag":       t.STag,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Port_VirtualRanges_Qinq_STagCTag) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort represents the /nokia-conf/configure/groups/group/service/system/bgp/evpn/ethernet-segment/association/pw-port YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort struct {
	PwPortHeadend *bool                                                                                                      `path:"pw-port-headend" module:"nokia-conf"`
	PwPortId      NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_PwPortId_Union `path:"pw-port-id" module:"nokia-conf"`
	VirtualRanges *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges `path:"virtual-ranges" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort) IsYANGGoStruct() {
}

// GetOrCreateVirtualRanges retrieves the value of the VirtualRanges field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort) GetOrCreateVirtualRanges() *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges {
	if t.VirtualRanges != nil {
		return t.VirtualRanges
	}
	t.VirtualRanges = &NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges{}
	return t.VirtualRanges
}

// GetVirtualRanges returns the value of the VirtualRanges struct pointer
// from NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort. If the receiver or the field VirtualRanges is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort) GetVirtualRanges() *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges {
	if t != nil && t.VirtualRanges != nil {
		return t.VirtualRanges
	}
	return nil
}

// GetPwPortHeadend retrieves the value of the leaf PwPortHeadend from the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PwPortHeadend is set, it can
// safely use t.GetPwPortHeadend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PwPortHeadend == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort) GetPwPortHeadend() bool {
	if t == nil || t.PwPortHeadend == nil {
		return false
	}
	return *t.PwPortHeadend
}

// GetPwPortId retrieves the value of the leaf PwPortId from the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PwPortId is set, it can
// safely use t.GetPwPortId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PwPortId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort) GetPwPortId() NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_PwPortId_Union {
	if t == nil || t.PwPortId == nil {
		return nil
	}
	return t.PwPortId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PwPortHeadend == nil {
		var v bool = false
		t.PwPortHeadend = &v
	}
	t.VirtualRanges.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"pw-port-id": t.PwPortId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges represents the /nokia-conf/configure/groups/group/service/system/bgp/evpn/ethernet-segment/association/pw-port/virtual-ranges YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges struct {
	Dot1Q *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q `path:"dot1q" module:"nokia-conf"`
	Qinq  *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq  `path:"qinq" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges) IsYANGGoStruct() {
}

// GetOrCreateDot1Q retrieves the value of the Dot1Q field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges) GetOrCreateDot1Q() *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q {
	if t.Dot1Q != nil {
		return t.Dot1Q
	}
	t.Dot1Q = &NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q{}
	return t.Dot1Q
}

// GetOrCreateQinq retrieves the value of the Qinq field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges) GetOrCreateQinq() *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq {
	if t.Qinq != nil {
		return t.Qinq
	}
	t.Qinq = &NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq{}
	return t.Qinq
}

// GetDot1Q returns the value of the Dot1Q struct pointer
// from NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges. If the receiver or the field Dot1Q is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges) GetDot1Q() *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q {
	if t != nil && t.Dot1Q != nil {
		return t.Dot1Q
	}
	return nil
}

// GetQinq returns the value of the Qinq struct pointer
// from NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges. If the receiver or the field Qinq is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges) GetQinq() *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq {
	if t != nil && t.Qinq != nil {
		return t.Qinq
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Dot1Q.PopulateDefaults()
	t.Qinq.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q represents the /nokia-conf/configure/groups/group/service/system/bgp/evpn/ethernet-segment/association/pw-port/virtual-ranges/dot1q YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q struct {
	QTag map[NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag_Start_Union]*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag `path:"q-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q) IsYANGGoStruct() {
}

// NewQTag creates a new entry in the QTag list of the
// NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q) NewQTag(Start NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag_Start_Union) (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.QTag == nil {
		t.QTag = make(map[NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag_Start_Union]*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag)
	}

	key := Start

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.QTag[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list QTag", key)
	}

	t.QTag[key] = &NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag{
		Start: Start,
	}

	return t.QTag[key], nil
}

// RenameQTag renames an entry in the list QTag within
// the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q) RenameQTag(oldK, newK NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag_Start_Union) error {
	if _, ok := t.QTag[newK]; ok {
		return fmt.Errorf("key %v already exists in QTag", newK)
	}

	e, ok := t.QTag[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in QTag", oldK)
	}
	e.Start = newK

	t.QTag[newK] = e
	delete(t.QTag, oldK)
	return nil
}

// GetOrCreateQTag retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q) GetOrCreateQTag(Start NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag_Start_Union) *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag {

	key := Start

	if v, ok := t.QTag[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQTag(Start)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQTag got unexpected error: %v", err))
	}
	return v
}

// GetQTag retrieves the value with the specified key from
// the QTag map field of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q) GetQTag(Start NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag_Start_Union) *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag {

	if t == nil {
		return nil
	}

	key := Start

	if lm, ok := t.QTag[key]; ok {
		return lm
	}
	return nil
}

// DeleteQTag deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q) DeleteQTag(Start NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag_Start_Union) {
	key := Start

	delete(t.QTag, key)
}

// AppendQTag appends the supplied NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag struct to the
// list QTag of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q) AppendQTag(v *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag) error {
	key := v.Start

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.QTag == nil {
		t.QTag = make(map[NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag_Start_Union]*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag)
	}

	if _, ok := t.QTag[key]; ok {
		return fmt.Errorf("duplicate key for list QTag %v", key)
	}

	t.QTag[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.QTag {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag represents the /nokia-conf/configure/groups/group/service/system/bgp/evpn/ethernet-segment/association/pw-port/virtual-ranges/dot1q/q-tag YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag struct {
	End   NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag_End_Union   `path:"end" module:"nokia-conf"`
	Start NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag_Start_Union `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag) GetEnd() NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag_End_Union {
	if t == nil || t.End == nil {
		return nil
	}
	return t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag) GetStart() NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag_Start_Union {
	if t == nil || t.Start == nil {
		return nil
	}
	return t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"start": t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Dot1Q_QTag) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq represents the /nokia-conf/configure/groups/group/service/system/bgp/evpn/ethernet-segment/association/pw-port/virtual-ranges/qinq YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq struct {
	STag     map[NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag_Start_Union]*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag `path:"s-tag" module:"nokia-conf"`
	STagCTag map[NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag_Key]*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag `path:"s-tag-c-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq) IsYANGGoStruct() {
}

// NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag_Key represents the key for list STagCTag of element /nokia-conf/configure/groups/group/service/system/bgp/evpn/ethernet-segment/association/pw-port/virtual-ranges/qinq.
type NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag_Key struct {
	STag      NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag_STag_Union      `path:"s-tag"`
	CTagStart NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag_CTagStart_Union `path:"c-tag-start"`
}

// NewSTag creates a new entry in the STag list of the
// NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq) NewSTag(Start NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag_Start_Union) (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.STag == nil {
		t.STag = make(map[NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag_Start_Union]*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag)
	}

	key := Start

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.STag[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list STag", key)
	}

	t.STag[key] = &NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag{
		Start: Start,
	}

	return t.STag[key], nil
}

// RenameSTag renames an entry in the list STag within
// the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq) RenameSTag(oldK, newK NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag_Start_Union) error {
	if _, ok := t.STag[newK]; ok {
		return fmt.Errorf("key %v already exists in STag", newK)
	}

	e, ok := t.STag[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in STag", oldK)
	}
	e.Start = newK

	t.STag[newK] = e
	delete(t.STag, oldK)
	return nil
}

// GetOrCreateSTag retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq) GetOrCreateSTag(Start NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag_Start_Union) *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag {

	key := Start

	if v, ok := t.STag[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSTag(Start)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSTag got unexpected error: %v", err))
	}
	return v
}

// GetSTag retrieves the value with the specified key from
// the STag map field of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq) GetSTag(Start NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag_Start_Union) *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag {

	if t == nil {
		return nil
	}

	key := Start

	if lm, ok := t.STag[key]; ok {
		return lm
	}
	return nil
}

// DeleteSTag deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq) DeleteSTag(Start NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag_Start_Union) {
	key := Start

	delete(t.STag, key)
}

// AppendSTag appends the supplied NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag struct to the
// list STag of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq) AppendSTag(v *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag) error {
	key := v.Start

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.STag == nil {
		t.STag = make(map[NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag_Start_Union]*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag)
	}

	if _, ok := t.STag[key]; ok {
		return fmt.Errorf("duplicate key for list STag %v", key)
	}

	t.STag[key] = v
	return nil
}

// NewSTagCTag creates a new entry in the STagCTag list of the
// NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq) NewSTagCTag(STag NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag_STag_Union, CTagStart NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag_CTagStart_Union) (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.STagCTag == nil {
		t.STagCTag = make(map[NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag_Key]*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag)
	}

	key := NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag_Key{
		STag:      STag,
		CTagStart: CTagStart,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.STagCTag[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list STagCTag", key)
	}

	t.STagCTag[key] = &NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag{
		STag:      STag,
		CTagStart: CTagStart,
	}

	return t.STagCTag[key], nil
}

// RenameSTagCTag renames an entry in the list STagCTag within
// the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq) RenameSTagCTag(oldK, newK NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag_Key) error {
	if _, ok := t.STagCTag[newK]; ok {
		return fmt.Errorf("key %v already exists in STagCTag", newK)
	}

	e, ok := t.STagCTag[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in STagCTag", oldK)
	}
	e.STag = newK.STag
	e.CTagStart = newK.CTagStart

	t.STagCTag[newK] = e
	delete(t.STagCTag, oldK)
	return nil
}

// GetOrCreateSTagCTag retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq) GetOrCreateSTagCTag(STag NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag_STag_Union, CTagStart NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag_CTagStart_Union) *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag {

	key := NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag_Key{
		STag:      STag,
		CTagStart: CTagStart,
	}

	if v, ok := t.STagCTag[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSTagCTag(STag, CTagStart)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSTagCTag got unexpected error: %v", err))
	}
	return v
}

// GetSTagCTag retrieves the value with the specified key from
// the STagCTag map field of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq) GetSTagCTag(STag NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag_STag_Union, CTagStart NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag_CTagStart_Union) *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag_Key{
		STag:      STag,
		CTagStart: CTagStart,
	}

	if lm, ok := t.STagCTag[key]; ok {
		return lm
	}
	return nil
}

// DeleteSTagCTag deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq) DeleteSTagCTag(STag NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag_STag_Union, CTagStart NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag_CTagStart_Union) {
	key := NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag_Key{
		STag:      STag,
		CTagStart: CTagStart,
	}

	delete(t.STagCTag, key)
}

// AppendSTagCTag appends the supplied NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag struct to the
// list STagCTag of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq) AppendSTagCTag(v *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag) error {
	key := NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag_Key{
		STag:      v.STag,
		CTagStart: v.CTagStart,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.STagCTag == nil {
		t.STagCTag = make(map[NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag_Key]*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag)
	}

	if _, ok := t.STagCTag[key]; ok {
		return fmt.Errorf("duplicate key for list STagCTag %v", key)
	}

	t.STagCTag[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.STag {
		e.PopulateDefaults()
	}
	for _, e := range t.STagCTag {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag represents the /nokia-conf/configure/groups/group/service/system/bgp/evpn/ethernet-segment/association/pw-port/virtual-ranges/qinq/s-tag YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag struct {
	End   NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag_End_Union   `path:"end" module:"nokia-conf"`
	Start NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag_Start_Union `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag) GetEnd() NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag_End_Union {
	if t == nil || t.End == nil {
		return nil
	}
	return t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag) GetStart() NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag_Start_Union {
	if t == nil || t.Start == nil {
		return nil
	}
	return t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"start": t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STag) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag represents the /nokia-conf/configure/groups/group/service/system/bgp/evpn/ethernet-segment/association/pw-port/virtual-ranges/qinq/s-tag-c-tag YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag struct {
	CTagEnd   NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag_CTagEnd_Union   `path:"c-tag-end" module:"nokia-conf"`
	CTagStart NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag_CTagStart_Union `path:"c-tag-start" module:"nokia-conf"`
	STag      NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag_STag_Union      `path:"s-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag) IsYANGGoStruct() {
}

// GetCTagEnd retrieves the value of the leaf CTagEnd from the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CTagEnd is set, it can
// safely use t.GetCTagEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CTagEnd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag) GetCTagEnd() NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag_CTagEnd_Union {
	if t == nil || t.CTagEnd == nil {
		return nil
	}
	return t.CTagEnd
}

// GetCTagStart retrieves the value of the leaf CTagStart from the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CTagStart is set, it can
// safely use t.GetCTagStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CTagStart == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag) GetCTagStart() NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag_CTagStart_Union {
	if t == nil || t.CTagStart == nil {
		return nil
	}
	return t.CTagStart
}

// GetSTag retrieves the value of the leaf STag from the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if STag is set, it can
// safely use t.GetSTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.STag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag) GetSTag() NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag_STag_Union {
	if t == nil || t.STag == nil {
		return nil
	}
	return t.STag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"c-tag-start": t.CTagStart,
		"s-tag":       t.STag,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_PwPort_VirtualRanges_Qinq_STagCTag) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp represents the /nokia-conf/configure/groups/group/service/system/bgp/evpn/ethernet-segment/association/sdp YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp struct {
	SdpId         NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_SdpId_Union    `path:"sdp-id" module:"nokia-conf"`
	VirtualRanges *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges `path:"virtual-ranges" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp) IsYANGGoStruct() {
}

// GetOrCreateVirtualRanges retrieves the value of the VirtualRanges field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp) GetOrCreateVirtualRanges() *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges {
	if t.VirtualRanges != nil {
		return t.VirtualRanges
	}
	t.VirtualRanges = &NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges{}
	return t.VirtualRanges
}

// GetVirtualRanges returns the value of the VirtualRanges struct pointer
// from NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp. If the receiver or the field VirtualRanges is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp) GetVirtualRanges() *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges {
	if t != nil && t.VirtualRanges != nil {
		return t.VirtualRanges
	}
	return nil
}

// GetSdpId retrieves the value of the leaf SdpId from the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SdpId is set, it can
// safely use t.GetSdpId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SdpId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp) GetSdpId() NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_SdpId_Union {
	if t == nil || t.SdpId == nil {
		return nil
	}
	return t.SdpId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.VirtualRanges.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"sdp-id": t.SdpId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges represents the /nokia-conf/configure/groups/group/service/system/bgp/evpn/ethernet-segment/association/sdp/virtual-ranges YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges struct {
	VcId map[NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges_VcId_Start_Union]*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges_VcId `path:"vc-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges) IsYANGGoStruct() {
}

// NewVcId creates a new entry in the VcId list of the
// NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges) NewVcId(Start NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges_VcId_Start_Union) (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges_VcId, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VcId == nil {
		t.VcId = make(map[NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges_VcId_Start_Union]*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges_VcId)
	}

	key := Start

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.VcId[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list VcId", key)
	}

	t.VcId[key] = &NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges_VcId{
		Start: Start,
	}

	return t.VcId[key], nil
}

// RenameVcId renames an entry in the list VcId within
// the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges) RenameVcId(oldK, newK NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges_VcId_Start_Union) error {
	if _, ok := t.VcId[newK]; ok {
		return fmt.Errorf("key %v already exists in VcId", newK)
	}

	e, ok := t.VcId[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in VcId", oldK)
	}
	e.Start = newK

	t.VcId[newK] = e
	delete(t.VcId, oldK)
	return nil
}

// GetOrCreateVcId retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges) GetOrCreateVcId(Start NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges_VcId_Start_Union) *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges_VcId {

	key := Start

	if v, ok := t.VcId[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVcId(Start)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVcId got unexpected error: %v", err))
	}
	return v
}

// GetVcId retrieves the value with the specified key from
// the VcId map field of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges) GetVcId(Start NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges_VcId_Start_Union) *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges_VcId {

	if t == nil {
		return nil
	}

	key := Start

	if lm, ok := t.VcId[key]; ok {
		return lm
	}
	return nil
}

// DeleteVcId deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges) DeleteVcId(Start NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges_VcId_Start_Union) {
	key := Start

	delete(t.VcId, key)
}

// AppendVcId appends the supplied NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges_VcId struct to the
// list VcId of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges_VcId already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges) AppendVcId(v *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges_VcId) error {
	key := v.Start

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VcId == nil {
		t.VcId = make(map[NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges_VcId_Start_Union]*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges_VcId)
	}

	if _, ok := t.VcId[key]; ok {
		return fmt.Errorf("duplicate key for list VcId %v", key)
	}

	t.VcId[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.VcId {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges_VcId represents the /nokia-conf/configure/groups/group/service/system/bgp/evpn/ethernet-segment/association/sdp/virtual-ranges/vc-id YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges_VcId struct {
	End   *uint32                                                                                                                 `path:"end" module:"nokia-conf"`
	Start NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges_VcId_Start_Union `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges_VcId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges_VcId) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges_VcId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges_VcId) GetEnd() uint32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges_VcId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges_VcId) GetStart() NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges_VcId_Start_Union {
	if t == nil || t.Start == nil {
		return nil
	}
	return t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges_VcId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges_VcId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges_VcId struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges_VcId) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"start": t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges_VcId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges_VcId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges_VcId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges_VcId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges_VcId.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Association_Sdp_VirtualRanges_VcId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection represents the /nokia-conf/configure/groups/group/service/system/bgp/evpn/ethernet-segment/df-election YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection struct {
	EsActivationTimer  *int32                                                                                                   `path:"es-activation-timer" module:"nokia-conf"`
	Manual             *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual              `path:"manual" module:"nokia-conf"`
	ServiceCarvingMode E_NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_ServiceCarvingMode `path:"service-carving-mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection) IsYANGGoStruct() {
}

// GetOrCreateManual retrieves the value of the Manual field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection) GetOrCreateManual() *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual {
	if t.Manual != nil {
		return t.Manual
	}
	t.Manual = &NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual{}
	return t.Manual
}

// GetManual returns the value of the Manual struct pointer
// from NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection. If the receiver or the field Manual is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection) GetManual() *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual {
	if t != nil && t.Manual != nil {
		return t.Manual
	}
	return nil
}

// GetEsActivationTimer retrieves the value of the leaf EsActivationTimer from the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EsActivationTimer is set, it can
// safely use t.GetEsActivationTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EsActivationTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection) GetEsActivationTimer() int32 {
	if t == nil || t.EsActivationTimer == nil {
		return 0
	}
	return *t.EsActivationTimer
}

// GetServiceCarvingMode retrieves the value of the leaf ServiceCarvingMode from the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceCarvingMode is set, it can
// safely use t.GetServiceCarvingMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceCarvingMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection) GetServiceCarvingMode() E_NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_ServiceCarvingMode {
	if t == nil || t.ServiceCarvingMode == 0 {
		return NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_ServiceCarvingMode_auto
	}
	return t.ServiceCarvingMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ServiceCarvingMode == 0 {
		t.ServiceCarvingMode = NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_ServiceCarvingMode_auto
	}
	t.Manual.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual represents the /nokia-conf/configure/groups/group/service/system/bgp/evpn/ethernet-segment/df-election/manual YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual struct {
	Evi        map[NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Evi_Start_Union]*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Evi   `path:"evi" module:"nokia-conf"`
	Isid       map[NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Isid_Start_Union]*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Isid `path:"isid" module:"nokia-conf"`
	Preference *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Preference                                                                                                           `path:"preference" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual) IsYANGGoStruct() {
}

// NewEvi creates a new entry in the Evi list of the
// NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual) NewEvi(Start NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Evi_Start_Union) (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Evi, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Evi == nil {
		t.Evi = make(map[NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Evi_Start_Union]*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Evi)
	}

	key := Start

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Evi[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Evi", key)
	}

	t.Evi[key] = &NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Evi{
		Start: Start,
	}

	return t.Evi[key], nil
}

// RenameEvi renames an entry in the list Evi within
// the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual) RenameEvi(oldK, newK NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Evi_Start_Union) error {
	if _, ok := t.Evi[newK]; ok {
		return fmt.Errorf("key %v already exists in Evi", newK)
	}

	e, ok := t.Evi[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Evi", oldK)
	}
	e.Start = newK

	t.Evi[newK] = e
	delete(t.Evi, oldK)
	return nil
}

// GetOrCreateEvi retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual) GetOrCreateEvi(Start NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Evi_Start_Union) *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Evi {

	key := Start

	if v, ok := t.Evi[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEvi(Start)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEvi got unexpected error: %v", err))
	}
	return v
}

// GetEvi retrieves the value with the specified key from
// the Evi map field of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual) GetEvi(Start NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Evi_Start_Union) *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Evi {

	if t == nil {
		return nil
	}

	key := Start

	if lm, ok := t.Evi[key]; ok {
		return lm
	}
	return nil
}

// DeleteEvi deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual) DeleteEvi(Start NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Evi_Start_Union) {
	key := Start

	delete(t.Evi, key)
}

// AppendEvi appends the supplied NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Evi struct to the
// list Evi of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Evi already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual) AppendEvi(v *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Evi) error {
	key := v.Start

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Evi == nil {
		t.Evi = make(map[NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Evi_Start_Union]*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Evi)
	}

	if _, ok := t.Evi[key]; ok {
		return fmt.Errorf("duplicate key for list Evi %v", key)
	}

	t.Evi[key] = v
	return nil
}

// NewIsid creates a new entry in the Isid list of the
// NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual) NewIsid(Start NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Isid_Start_Union) (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Isid, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Isid == nil {
		t.Isid = make(map[NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Isid_Start_Union]*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Isid)
	}

	key := Start

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Isid[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Isid", key)
	}

	t.Isid[key] = &NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Isid{
		Start: Start,
	}

	return t.Isid[key], nil
}

// RenameIsid renames an entry in the list Isid within
// the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual) RenameIsid(oldK, newK NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Isid_Start_Union) error {
	if _, ok := t.Isid[newK]; ok {
		return fmt.Errorf("key %v already exists in Isid", newK)
	}

	e, ok := t.Isid[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Isid", oldK)
	}
	e.Start = newK

	t.Isid[newK] = e
	delete(t.Isid, oldK)
	return nil
}

// GetOrCreateIsid retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual) GetOrCreateIsid(Start NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Isid_Start_Union) *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Isid {

	key := Start

	if v, ok := t.Isid[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIsid(Start)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIsid got unexpected error: %v", err))
	}
	return v
}

// GetIsid retrieves the value with the specified key from
// the Isid map field of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual) GetIsid(Start NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Isid_Start_Union) *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Isid {

	if t == nil {
		return nil
	}

	key := Start

	if lm, ok := t.Isid[key]; ok {
		return lm
	}
	return nil
}

// DeleteIsid deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual) DeleteIsid(Start NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Isid_Start_Union) {
	key := Start

	delete(t.Isid, key)
}

// AppendIsid appends the supplied NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Isid struct to the
// list Isid of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Isid already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual) AppendIsid(v *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Isid) error {
	key := v.Start

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Isid == nil {
		t.Isid = make(map[NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Isid_Start_Union]*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Isid)
	}

	if _, ok := t.Isid[key]; ok {
		return fmt.Errorf("duplicate key for list Isid %v", key)
	}

	t.Isid[key] = v
	return nil
}

// GetOrCreatePreference retrieves the value of the Preference field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual) GetOrCreatePreference() *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Preference {
	if t.Preference != nil {
		return t.Preference
	}
	t.Preference = &NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Preference{}
	return t.Preference
}

// GetPreference returns the value of the Preference struct pointer
// from NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual. If the receiver or the field Preference is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual) GetPreference() *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Preference {
	if t != nil && t.Preference != nil {
		return t.Preference
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Preference.PopulateDefaults()
	for _, e := range t.Evi {
		e.PopulateDefaults()
	}
	for _, e := range t.Isid {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Evi represents the /nokia-conf/configure/groups/group/service/system/bgp/evpn/ethernet-segment/df-election/manual/evi YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Evi struct {
	End   *uint32                                                                                                    `path:"end" module:"nokia-conf"`
	Start NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Evi_Start_Union `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Evi implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Evi) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Evi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Evi) GetEnd() uint32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Evi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Evi) GetStart() NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Evi_Start_Union {
	if t == nil || t.Start == nil {
		return nil
	}
	return t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Evi
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Evi) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Evi struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Evi) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"start": t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Evi) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Evi"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Evi) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Evi) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Evi.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Evi) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Isid represents the /nokia-conf/configure/groups/group/service/system/bgp/evpn/ethernet-segment/df-election/manual/isid YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Isid struct {
	End   *int32                                                                                                      `path:"end" module:"nokia-conf"`
	Start NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Isid_Start_Union `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Isid implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Isid) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Isid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Isid) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Isid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Isid) GetStart() NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Isid_Start_Union {
	if t == nil || t.Start == nil {
		return nil
	}
	return t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Isid
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Isid) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Isid struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Isid) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"start": t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Isid) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Isid"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Isid) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Isid) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Isid.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Isid) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Preference represents the /nokia-conf/configure/groups/group/service/system/bgp/evpn/ethernet-segment/df-election/manual/preference YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Preference struct {
	Mode  E_NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Preference_Mode `path:"mode" module:"nokia-conf"`
	Value *uint32                                                                                                      `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Preference implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Preference) IsYANGGoStruct() {
}

// GetMode retrieves the value of the leaf Mode from the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Preference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Preference) GetMode() E_NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Preference_Mode {
	if t == nil || t.Mode == 0 {
		return NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Preference_Mode_revertive
	}
	return t.Mode
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Preference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Preference) GetValue() uint32 {
	if t == nil || t.Value == nil {
		return 32767
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Preference
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Preference) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mode == 0 {
		t.Mode = NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Preference_Mode_revertive
	}
	if t.Value == nil {
		var v uint32 = 32767
		t.Value = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Preference) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Preference"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Preference) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Preference) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Preference.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_DfElection_Manual_Preference) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Pbb represents the /nokia-conf/configure/groups/group/service/system/bgp/evpn/ethernet-segment/pbb YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Pbb struct {
	EsBmacTableSize *uint32 `path:"es-bmac-table-size" module:"nokia-conf"`
	SourceBmacLsb   *string `path:"source-bmac-lsb" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Pbb implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Pbb) IsYANGGoStruct() {
}

// GetEsBmacTableSize retrieves the value of the leaf EsBmacTableSize from the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Pbb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EsBmacTableSize is set, it can
// safely use t.GetEsBmacTableSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EsBmacTableSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Pbb) GetEsBmacTableSize() uint32 {
	if t == nil || t.EsBmacTableSize == nil {
		return 8
	}
	return *t.EsBmacTableSize
}

// GetSourceBmacLsb retrieves the value of the leaf SourceBmacLsb from the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Pbb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceBmacLsb is set, it can
// safely use t.GetSourceBmacLsb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceBmacLsb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Pbb) GetSourceBmacLsb() string {
	if t == nil || t.SourceBmacLsb == nil {
		return ""
	}
	return *t.SourceBmacLsb
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Pbb
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Pbb) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.EsBmacTableSize == nil {
		var v uint32 = 8
		t.EsBmacTableSize = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Pbb) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Pbb"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Pbb) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Pbb) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Pbb.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_EthernetSegment_Pbb) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_IpPrefixRoutes represents the /nokia-conf/configure/groups/group/service/system/bgp/evpn/ip-prefix-routes YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_IpPrefixRoutes struct {
	DPathLengthIgnore              *bool `path:"d-path-length-ignore" module:"nokia-conf"`
	IffAttributeUniformPropagation *bool `path:"iff-attribute-uniform-propagation" module:"nokia-conf"`
	IffBgpPathSelection            *bool `path:"iff-bgp-path-selection" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_IpPrefixRoutes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_IpPrefixRoutes) IsYANGGoStruct() {}

// GetDPathLengthIgnore retrieves the value of the leaf DPathLengthIgnore from the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_IpPrefixRoutes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DPathLengthIgnore is set, it can
// safely use t.GetDPathLengthIgnore() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DPathLengthIgnore == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_IpPrefixRoutes) GetDPathLengthIgnore() bool {
	if t == nil || t.DPathLengthIgnore == nil {
		return false
	}
	return *t.DPathLengthIgnore
}

// GetIffAttributeUniformPropagation retrieves the value of the leaf IffAttributeUniformPropagation from the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_IpPrefixRoutes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IffAttributeUniformPropagation is set, it can
// safely use t.GetIffAttributeUniformPropagation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IffAttributeUniformPropagation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_IpPrefixRoutes) GetIffAttributeUniformPropagation() bool {
	if t == nil || t.IffAttributeUniformPropagation == nil {
		return false
	}
	return *t.IffAttributeUniformPropagation
}

// GetIffBgpPathSelection retrieves the value of the leaf IffBgpPathSelection from the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_IpPrefixRoutes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IffBgpPathSelection is set, it can
// safely use t.GetIffBgpPathSelection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IffBgpPathSelection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_IpPrefixRoutes) GetIffBgpPathSelection() bool {
	if t == nil || t.IffBgpPathSelection == nil {
		return false
	}
	return *t.IffBgpPathSelection
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_IpPrefixRoutes
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_IpPrefixRoutes) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DPathLengthIgnore == nil {
		var v bool = false
		t.DPathLengthIgnore = &v
	}
	if t.IffAttributeUniformPropagation == nil {
		var v bool = false
		t.IffAttributeUniformPropagation = &v
	}
	if t.IffBgpPathSelection == nil {
		var v bool = false
		t.IffBgpPathSelection = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_IpPrefixRoutes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_IpPrefixRoutes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_IpPrefixRoutes) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_IpPrefixRoutes) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_IpPrefixRoutes.
func (*NokiaConf_Configure_Groups_Group_Service_System_Bgp_Evpn_IpPrefixRoutes) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_System_Fdb represents the /nokia-conf/configure/groups/group/service/system/fdb YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_System_Fdb struct {
	TableSize *uint32 `path:"table-size" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_System_Fdb implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_System_Fdb) IsYANGGoStruct() {}

// GetTableSize retrieves the value of the leaf TableSize from the NokiaConf_Configure_Groups_Group_Service_System_Fdb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TableSize is set, it can
// safely use t.GetTableSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TableSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Fdb) GetTableSize() uint32 {
	if t == nil || t.TableSize == nil {
		return 0
	}
	return *t.TableSize
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_System_Fdb
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Fdb) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Fdb) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_System_Fdb"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Fdb) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Fdb) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_System_Fdb.
func (*NokiaConf_Configure_Groups_Group_Service_System_Fdb) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_System_GreEthBridged represents the /nokia-conf/configure/groups/group/service/system/gre-eth-bridged YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_System_GreEthBridged struct {
	TunnelTermination map[string]*NokiaConf_Configure_Groups_Group_Service_System_GreEthBridged_TunnelTermination `path:"tunnel-termination" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_System_GreEthBridged implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_System_GreEthBridged) IsYANGGoStruct() {}

// NewTunnelTermination creates a new entry in the TunnelTermination list of the
// NokiaConf_Configure_Groups_Group_Service_System_GreEthBridged struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_System_GreEthBridged) NewTunnelTermination(IpAddress string) (*NokiaConf_Configure_Groups_Group_Service_System_GreEthBridged_TunnelTermination, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TunnelTermination == nil {
		t.TunnelTermination = make(map[string]*NokiaConf_Configure_Groups_Group_Service_System_GreEthBridged_TunnelTermination)
	}

	key := IpAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TunnelTermination[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TunnelTermination", key)
	}

	t.TunnelTermination[key] = &NokiaConf_Configure_Groups_Group_Service_System_GreEthBridged_TunnelTermination{
		IpAddress: &IpAddress,
	}

	return t.TunnelTermination[key], nil
}

// RenameTunnelTermination renames an entry in the list TunnelTermination within
// the NokiaConf_Configure_Groups_Group_Service_System_GreEthBridged struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_GreEthBridged) RenameTunnelTermination(oldK, newK string) error {
	if _, ok := t.TunnelTermination[newK]; ok {
		return fmt.Errorf("key %v already exists in TunnelTermination", newK)
	}

	e, ok := t.TunnelTermination[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TunnelTermination", oldK)
	}
	e.IpAddress = &newK

	t.TunnelTermination[newK] = e
	delete(t.TunnelTermination, oldK)
	return nil
}

// GetOrCreateTunnelTermination retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_System_GreEthBridged. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_System_GreEthBridged) GetOrCreateTunnelTermination(IpAddress string) *NokiaConf_Configure_Groups_Group_Service_System_GreEthBridged_TunnelTermination {

	key := IpAddress

	if v, ok := t.TunnelTermination[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTunnelTermination(IpAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTunnelTermination got unexpected error: %v", err))
	}
	return v
}

// GetTunnelTermination retrieves the value with the specified key from
// the TunnelTermination map field of NokiaConf_Configure_Groups_Group_Service_System_GreEthBridged. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_System_GreEthBridged) GetTunnelTermination(IpAddress string) *NokiaConf_Configure_Groups_Group_Service_System_GreEthBridged_TunnelTermination {

	if t == nil {
		return nil
	}

	key := IpAddress

	if lm, ok := t.TunnelTermination[key]; ok {
		return lm
	}
	return nil
}

// DeleteTunnelTermination deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_System_GreEthBridged. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_System_GreEthBridged) DeleteTunnelTermination(IpAddress string) {
	key := IpAddress

	delete(t.TunnelTermination, key)
}

// AppendTunnelTermination appends the supplied NokiaConf_Configure_Groups_Group_Service_System_GreEthBridged_TunnelTermination struct to the
// list TunnelTermination of NokiaConf_Configure_Groups_Group_Service_System_GreEthBridged. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_System_GreEthBridged_TunnelTermination already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_System_GreEthBridged) AppendTunnelTermination(v *NokiaConf_Configure_Groups_Group_Service_System_GreEthBridged_TunnelTermination) error {
	if v.IpAddress == nil {
		return fmt.Errorf("invalid nil key received for IpAddress")
	}

	key := *v.IpAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TunnelTermination == nil {
		t.TunnelTermination = make(map[string]*NokiaConf_Configure_Groups_Group_Service_System_GreEthBridged_TunnelTermination)
	}

	if _, ok := t.TunnelTermination[key]; ok {
		return fmt.Errorf("duplicate key for list TunnelTermination %v", key)
	}

	t.TunnelTermination[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_System_GreEthBridged
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_System_GreEthBridged) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.TunnelTermination {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_GreEthBridged) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_System_GreEthBridged"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_GreEthBridged) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_System_GreEthBridged) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_System_GreEthBridged.
func (*NokiaConf_Configure_Groups_Group_Service_System_GreEthBridged) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_System_GreEthBridged_TunnelTermination represents the /nokia-conf/configure/groups/group/service/system/gre-eth-bridged/tunnel-termination YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_System_GreEthBridged_TunnelTermination struct {
	FpeId     *uint32 `path:"fpe-id" module:"nokia-conf"`
	IpAddress *string `path:"ip-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_System_GreEthBridged_TunnelTermination implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_System_GreEthBridged_TunnelTermination) IsYANGGoStruct() {
}

// GetFpeId retrieves the value of the leaf FpeId from the NokiaConf_Configure_Groups_Group_Service_System_GreEthBridged_TunnelTermination
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FpeId is set, it can
// safely use t.GetFpeId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FpeId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_GreEthBridged_TunnelTermination) GetFpeId() uint32 {
	if t == nil || t.FpeId == nil {
		return 0
	}
	return *t.FpeId
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Groups_Group_Service_System_GreEthBridged_TunnelTermination
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_GreEthBridged_TunnelTermination) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_System_GreEthBridged_TunnelTermination
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_System_GreEthBridged_TunnelTermination) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_System_GreEthBridged_TunnelTermination struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_System_GreEthBridged_TunnelTermination) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpAddress == nil {
		return nil, fmt.Errorf("nil value for key IpAddress")
	}

	return map[string]interface{}{
		"ip-address": *t.IpAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_GreEthBridged_TunnelTermination) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_System_GreEthBridged_TunnelTermination"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_GreEthBridged_TunnelTermination) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_System_GreEthBridged_TunnelTermination) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_System_GreEthBridged_TunnelTermination.
func (*NokiaConf_Configure_Groups_Group_Service_System_GreEthBridged_TunnelTermination) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_System_PwPortList represents the /nokia-conf/configure/groups/group/service/system/pw-port-list YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_System_PwPortList struct {
	Port map[string]*NokiaConf_Configure_Groups_Group_Service_System_PwPortList_Port `path:"port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_System_PwPortList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_System_PwPortList) IsYANGGoStruct() {}

// NewPort creates a new entry in the Port list of the
// NokiaConf_Configure_Groups_Group_Service_System_PwPortList struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_System_PwPortList) NewPort(PortId string) (*NokiaConf_Configure_Groups_Group_Service_System_PwPortList_Port, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Port == nil {
		t.Port = make(map[string]*NokiaConf_Configure_Groups_Group_Service_System_PwPortList_Port)
	}

	key := PortId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Port[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Port", key)
	}

	t.Port[key] = &NokiaConf_Configure_Groups_Group_Service_System_PwPortList_Port{
		PortId: &PortId,
	}

	return t.Port[key], nil
}

// RenamePort renames an entry in the list Port within
// the NokiaConf_Configure_Groups_Group_Service_System_PwPortList struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_PwPortList) RenamePort(oldK, newK string) error {
	if _, ok := t.Port[newK]; ok {
		return fmt.Errorf("key %v already exists in Port", newK)
	}

	e, ok := t.Port[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Port", oldK)
	}
	e.PortId = &newK

	t.Port[newK] = e
	delete(t.Port, oldK)
	return nil
}

// GetOrCreatePort retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_System_PwPortList. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_System_PwPortList) GetOrCreatePort(PortId string) *NokiaConf_Configure_Groups_Group_Service_System_PwPortList_Port {

	key := PortId

	if v, ok := t.Port[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPort(PortId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePort got unexpected error: %v", err))
	}
	return v
}

// GetPort retrieves the value with the specified key from
// the Port map field of NokiaConf_Configure_Groups_Group_Service_System_PwPortList. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_System_PwPortList) GetPort(PortId string) *NokiaConf_Configure_Groups_Group_Service_System_PwPortList_Port {

	if t == nil {
		return nil
	}

	key := PortId

	if lm, ok := t.Port[key]; ok {
		return lm
	}
	return nil
}

// DeletePort deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_System_PwPortList. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_System_PwPortList) DeletePort(PortId string) {
	key := PortId

	delete(t.Port, key)
}

// AppendPort appends the supplied NokiaConf_Configure_Groups_Group_Service_System_PwPortList_Port struct to the
// list Port of NokiaConf_Configure_Groups_Group_Service_System_PwPortList. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_System_PwPortList_Port already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_System_PwPortList) AppendPort(v *NokiaConf_Configure_Groups_Group_Service_System_PwPortList_Port) error {
	if v.PortId == nil {
		return fmt.Errorf("invalid nil key received for PortId")
	}

	key := *v.PortId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Port == nil {
		t.Port = make(map[string]*NokiaConf_Configure_Groups_Group_Service_System_PwPortList_Port)
	}

	if _, ok := t.Port[key]; ok {
		return fmt.Errorf("duplicate key for list Port %v", key)
	}

	t.Port[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_System_PwPortList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_System_PwPortList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Port {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_PwPortList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_System_PwPortList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_PwPortList) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_System_PwPortList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_System_PwPortList.
func (*NokiaConf_Configure_Groups_Group_Service_System_PwPortList) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_System_PwPortList_Port represents the /nokia-conf/configure/groups/group/service/system/pw-port-list/port YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_System_PwPortList_Port struct {
	PortId *string `path:"port-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_System_PwPortList_Port implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_System_PwPortList_Port) IsYANGGoStruct() {}

// GetPortId retrieves the value of the leaf PortId from the NokiaConf_Configure_Groups_Group_Service_System_PwPortList_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortId is set, it can
// safely use t.GetPortId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_PwPortList_Port) GetPortId() string {
	if t == nil || t.PortId == nil {
		return ""
	}
	return *t.PortId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_System_PwPortList_Port
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_System_PwPortList_Port) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_System_PwPortList_Port struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_System_PwPortList_Port) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PortId == nil {
		return nil, fmt.Errorf("nil value for key PortId")
	}

	return map[string]interface{}{
		"port-id": *t.PortId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_PwPortList_Port) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_System_PwPortList_Port"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_PwPortList_Port) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_System_PwPortList_Port) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_System_PwPortList_Port.
func (*NokiaConf_Configure_Groups_Group_Service_System_PwPortList_Port) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_System_Vxlan represents the /nokia-conf/configure/groups/group/service/system/vxlan YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_System_Vxlan struct {
	AssistedReplication *NokiaConf_Configure_Groups_Group_Service_System_Vxlan_AssistedReplication          `path:"assisted-replication" module:"nokia-conf" yangPresence:"true"`
	TunnelTermination   map[string]*NokiaConf_Configure_Groups_Group_Service_System_Vxlan_TunnelTermination `path:"tunnel-termination" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_System_Vxlan implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_System_Vxlan) IsYANGGoStruct() {}

// NewTunnelTermination creates a new entry in the TunnelTermination list of the
// NokiaConf_Configure_Groups_Group_Service_System_Vxlan struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Vxlan) NewTunnelTermination(IpAddress string) (*NokiaConf_Configure_Groups_Group_Service_System_Vxlan_TunnelTermination, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TunnelTermination == nil {
		t.TunnelTermination = make(map[string]*NokiaConf_Configure_Groups_Group_Service_System_Vxlan_TunnelTermination)
	}

	key := IpAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TunnelTermination[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TunnelTermination", key)
	}

	t.TunnelTermination[key] = &NokiaConf_Configure_Groups_Group_Service_System_Vxlan_TunnelTermination{
		IpAddress: &IpAddress,
	}

	return t.TunnelTermination[key], nil
}

// RenameTunnelTermination renames an entry in the list TunnelTermination within
// the NokiaConf_Configure_Groups_Group_Service_System_Vxlan struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Vxlan) RenameTunnelTermination(oldK, newK string) error {
	if _, ok := t.TunnelTermination[newK]; ok {
		return fmt.Errorf("key %v already exists in TunnelTermination", newK)
	}

	e, ok := t.TunnelTermination[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TunnelTermination", oldK)
	}
	e.IpAddress = &newK

	t.TunnelTermination[newK] = e
	delete(t.TunnelTermination, oldK)
	return nil
}

// GetOrCreateTunnelTermination retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_System_Vxlan. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Vxlan) GetOrCreateTunnelTermination(IpAddress string) *NokiaConf_Configure_Groups_Group_Service_System_Vxlan_TunnelTermination {

	key := IpAddress

	if v, ok := t.TunnelTermination[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTunnelTermination(IpAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTunnelTermination got unexpected error: %v", err))
	}
	return v
}

// GetTunnelTermination retrieves the value with the specified key from
// the TunnelTermination map field of NokiaConf_Configure_Groups_Group_Service_System_Vxlan. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Vxlan) GetTunnelTermination(IpAddress string) *NokiaConf_Configure_Groups_Group_Service_System_Vxlan_TunnelTermination {

	if t == nil {
		return nil
	}

	key := IpAddress

	if lm, ok := t.TunnelTermination[key]; ok {
		return lm
	}
	return nil
}

// DeleteTunnelTermination deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_System_Vxlan. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Vxlan) DeleteTunnelTermination(IpAddress string) {
	key := IpAddress

	delete(t.TunnelTermination, key)
}

// AppendTunnelTermination appends the supplied NokiaConf_Configure_Groups_Group_Service_System_Vxlan_TunnelTermination struct to the
// list TunnelTermination of NokiaConf_Configure_Groups_Group_Service_System_Vxlan. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_System_Vxlan_TunnelTermination already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Vxlan) AppendTunnelTermination(v *NokiaConf_Configure_Groups_Group_Service_System_Vxlan_TunnelTermination) error {
	if v.IpAddress == nil {
		return fmt.Errorf("invalid nil key received for IpAddress")
	}

	key := *v.IpAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TunnelTermination == nil {
		t.TunnelTermination = make(map[string]*NokiaConf_Configure_Groups_Group_Service_System_Vxlan_TunnelTermination)
	}

	if _, ok := t.TunnelTermination[key]; ok {
		return fmt.Errorf("duplicate key for list TunnelTermination %v", key)
	}

	t.TunnelTermination[key] = v
	return nil
}

// GetOrCreateAssistedReplication retrieves the value of the AssistedReplication field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Vxlan) GetOrCreateAssistedReplication() *NokiaConf_Configure_Groups_Group_Service_System_Vxlan_AssistedReplication {
	if t.AssistedReplication != nil {
		return t.AssistedReplication
	}
	t.AssistedReplication = &NokiaConf_Configure_Groups_Group_Service_System_Vxlan_AssistedReplication{}
	return t.AssistedReplication
}

// GetAssistedReplication returns the value of the AssistedReplication struct pointer
// from NokiaConf_Configure_Groups_Group_Service_System_Vxlan. If the receiver or the field AssistedReplication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Vxlan) GetAssistedReplication() *NokiaConf_Configure_Groups_Group_Service_System_Vxlan_AssistedReplication {
	if t != nil && t.AssistedReplication != nil {
		return t.AssistedReplication
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_System_Vxlan
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Vxlan) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AssistedReplication.PopulateDefaults()
	for _, e := range t.TunnelTermination {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Vxlan) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_System_Vxlan"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Vxlan) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Vxlan) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_System_Vxlan.
func (*NokiaConf_Configure_Groups_Group_Service_System_Vxlan) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_System_Vxlan_AssistedReplication represents the /nokia-conf/configure/groups/group/service/system/vxlan/assisted-replication YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_System_Vxlan_AssistedReplication struct {
	IpAddress *string `path:"ip-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_System_Vxlan_AssistedReplication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_System_Vxlan_AssistedReplication) IsYANGGoStruct() {}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Groups_Group_Service_System_Vxlan_AssistedReplication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Vxlan_AssistedReplication) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_System_Vxlan_AssistedReplication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Vxlan_AssistedReplication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Vxlan_AssistedReplication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_System_Vxlan_AssistedReplication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Vxlan_AssistedReplication) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Vxlan_AssistedReplication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_System_Vxlan_AssistedReplication.
func (*NokiaConf_Configure_Groups_Group_Service_System_Vxlan_AssistedReplication) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_System_Vxlan_TunnelTermination represents the /nokia-conf/configure/groups/group/service/system/vxlan/tunnel-termination YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_System_Vxlan_TunnelTermination struct {
	FpeId     *uint32 `path:"fpe-id" module:"nokia-conf"`
	IpAddress *string `path:"ip-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_System_Vxlan_TunnelTermination implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_System_Vxlan_TunnelTermination) IsYANGGoStruct() {}

// GetFpeId retrieves the value of the leaf FpeId from the NokiaConf_Configure_Groups_Group_Service_System_Vxlan_TunnelTermination
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FpeId is set, it can
// safely use t.GetFpeId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FpeId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Vxlan_TunnelTermination) GetFpeId() uint32 {
	if t == nil || t.FpeId == nil {
		return 0
	}
	return *t.FpeId
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Groups_Group_Service_System_Vxlan_TunnelTermination
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Vxlan_TunnelTermination) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_System_Vxlan_TunnelTermination
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Vxlan_TunnelTermination) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_System_Vxlan_TunnelTermination struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Vxlan_TunnelTermination) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpAddress == nil {
		return nil, fmt.Errorf("nil value for key IpAddress")
	}

	return map[string]interface{}{
		"ip-address": *t.IpAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Vxlan_TunnelTermination) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_System_Vxlan_TunnelTermination"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Vxlan_TunnelTermination) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_System_Vxlan_TunnelTermination) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_System_Vxlan_TunnelTermination.
func (*NokiaConf_Configure_Groups_Group_Service_System_Vxlan_TunnelTermination) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Template represents the /nokia-conf/configure/groups/group/service/template YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Template struct {
	EpipeSapTemplate map[string]*NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate `path:"epipe-sap-template" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Template implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Template) IsYANGGoStruct() {}

// NewEpipeSapTemplate creates a new entry in the EpipeSapTemplate list of the
// NokiaConf_Configure_Groups_Group_Service_Template struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Template) NewEpipeSapTemplate(Name string) (*NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EpipeSapTemplate == nil {
		t.EpipeSapTemplate = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.EpipeSapTemplate[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list EpipeSapTemplate", key)
	}

	t.EpipeSapTemplate[key] = &NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate{
		Name: &Name,
	}

	return t.EpipeSapTemplate[key], nil
}

// RenameEpipeSapTemplate renames an entry in the list EpipeSapTemplate within
// the NokiaConf_Configure_Groups_Group_Service_Template struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Template) RenameEpipeSapTemplate(oldK, newK string) error {
	if _, ok := t.EpipeSapTemplate[newK]; ok {
		return fmt.Errorf("key %v already exists in EpipeSapTemplate", newK)
	}

	e, ok := t.EpipeSapTemplate[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in EpipeSapTemplate", oldK)
	}
	e.Name = &newK

	t.EpipeSapTemplate[newK] = e
	delete(t.EpipeSapTemplate, oldK)
	return nil
}

// GetOrCreateEpipeSapTemplate retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Template. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Template) GetOrCreateEpipeSapTemplate(Name string) *NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate {

	key := Name

	if v, ok := t.EpipeSapTemplate[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEpipeSapTemplate(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEpipeSapTemplate got unexpected error: %v", err))
	}
	return v
}

// GetEpipeSapTemplate retrieves the value with the specified key from
// the EpipeSapTemplate map field of NokiaConf_Configure_Groups_Group_Service_Template. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Template) GetEpipeSapTemplate(Name string) *NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.EpipeSapTemplate[key]; ok {
		return lm
	}
	return nil
}

// DeleteEpipeSapTemplate deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Template. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Template) DeleteEpipeSapTemplate(Name string) {
	key := Name

	delete(t.EpipeSapTemplate, key)
}

// AppendEpipeSapTemplate appends the supplied NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate struct to the
// list EpipeSapTemplate of NokiaConf_Configure_Groups_Group_Service_Template. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Template) AppendEpipeSapTemplate(v *NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EpipeSapTemplate == nil {
		t.EpipeSapTemplate = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate)
	}

	if _, ok := t.EpipeSapTemplate[key]; ok {
		return fmt.Errorf("duplicate key for list EpipeSapTemplate %v", key)
	}

	t.EpipeSapTemplate[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Template
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Template) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.EpipeSapTemplate {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Template) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Template"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Template) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Template) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Template.
func (*NokiaConf_Configure_Groups_Group_Service_Template) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate represents the /nokia-conf/configure/groups/group/service/template/epipe-sap-template YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate struct {
	Egress  *NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Egress  `path:"egress" module:"nokia-conf"`
	Ingress *NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Ingress `path:"ingress" module:"nokia-conf"`
	Name    *string                                                                     `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate) IsYANGGoStruct() {}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate) GetOrCreateEgress() *NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Egress{}
	return t.Egress
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate) GetOrCreateIngress() *NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Ingress{}
	return t.Ingress
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate) GetEgress() *NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate) GetIngress() *NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Egress.PopulateDefaults()
	t.Ingress.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate.
func (*NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Egress represents the /nokia-conf/configure/groups/group/service/template/epipe-sap-template/egress YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Egress struct {
	Filter *NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Egress_Filter `path:"filter" module:"nokia-conf"`
	Qos    *NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Egress_Qos    `path:"qos" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Egress) IsYANGGoStruct() {}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Egress) GetOrCreateFilter() *NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Egress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Egress_Filter{}
	return t.Filter
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Egress) GetOrCreateQos() *NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Egress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Egress_Qos{}
	return t.Qos
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Egress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Egress) GetFilter() *NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Egress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Egress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Egress) GetQos() *NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Egress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Filter.PopulateDefaults()
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Egress.
func (*NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Egress_Filter represents the /nokia-conf/configure/groups/group/service/template/epipe-sap-template/egress/filter YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Egress_Filter struct {
	Ip   *string `path:"ip" module:"nokia-conf"`
	Ipv6 *string `path:"ipv6" module:"nokia-conf"`
	Mac  *string `path:"mac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Egress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Egress_Filter) IsYANGGoStruct() {
}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Egress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Egress_Filter) GetIpv6() string {
	if t == nil || t.Ipv6 == nil {
		return ""
	}
	return *t.Ipv6
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Egress_Filter) GetMac() string {
	if t == nil || t.Mac == nil {
		return ""
	}
	return *t.Mac
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Egress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Egress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Egress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Egress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Egress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Egress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Egress_Filter.
func (*NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Egress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Egress_Qos represents the /nokia-conf/configure/groups/group/service/template/epipe-sap-template/egress/qos YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Egress_Qos struct {
	PolicyName *string `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Egress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Egress_Qos) IsYANGGoStruct() {
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Egress_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Egress_Qos) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Egress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Egress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Egress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Egress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Egress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Egress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Egress_Qos.
func (*NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Egress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Ingress represents the /nokia-conf/configure/groups/group/service/template/epipe-sap-template/ingress YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Ingress struct {
	Filter *NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Ingress_Filter `path:"filter" module:"nokia-conf"`
	Qos    *NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Ingress_Qos    `path:"qos" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Ingress) IsYANGGoStruct() {}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Ingress) GetOrCreateFilter() *NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Ingress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Ingress_Filter{}
	return t.Filter
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Ingress) GetOrCreateQos() *NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Ingress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Ingress_Qos{}
	return t.Qos
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Ingress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Ingress) GetFilter() *NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Ingress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Ingress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Ingress) GetQos() *NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Ingress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Filter.PopulateDefaults()
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Ingress.
func (*NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Ingress_Filter represents the /nokia-conf/configure/groups/group/service/template/epipe-sap-template/ingress/filter YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Ingress_Filter struct {
	Ip   *string `path:"ip" module:"nokia-conf"`
	Ipv6 *string `path:"ipv6" module:"nokia-conf"`
	Mac  *string `path:"mac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Ingress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Ingress_Filter) IsYANGGoStruct() {
}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Ingress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Ingress_Filter) GetIpv6() string {
	if t == nil || t.Ipv6 == nil {
		return ""
	}
	return *t.Ipv6
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Ingress_Filter) GetMac() string {
	if t == nil || t.Mac == nil {
		return ""
	}
	return *t.Mac
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Ingress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Ingress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Ingress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Ingress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Ingress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Ingress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Ingress_Filter.
func (*NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Ingress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Ingress_Qos represents the /nokia-conf/configure/groups/group/service/template/epipe-sap-template/ingress/qos YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Ingress_Qos struct {
	PolicyName  *string                                     `path:"policy-name" module:"nokia-conf"`
	QueuingType E_NokiaTypesServices_ServicesSapQueuingType `path:"queuing-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Ingress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Ingress_Qos) IsYANGGoStruct() {
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Ingress_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Ingress_Qos) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// GetQueuingType retrieves the value of the leaf QueuingType from the NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Ingress_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueuingType is set, it can
// safely use t.GetQueuingType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueuingType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Ingress_Qos) GetQueuingType() E_NokiaTypesServices_ServicesSapQueuingType {
	if t == nil || t.QueuingType == 0 {
		return 0
	}
	return t.QueuingType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Ingress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Ingress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Ingress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Ingress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Ingress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Ingress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Ingress_Qos.
func (*NokiaConf_Configure_Groups_Group_Service_Template_EpipeSapTemplate_Ingress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Upnp represents the /nokia-conf/configure/groups/group/service/upnp YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Upnp struct {
	Policy map[string]*NokiaConf_Configure_Groups_Group_Service_Upnp_Policy `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Upnp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Upnp) IsYANGGoStruct() {}

// NewPolicy creates a new entry in the Policy list of the
// NokiaConf_Configure_Groups_Group_Service_Upnp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Upnp) NewPolicy(Name string) (*NokiaConf_Configure_Groups_Group_Service_Upnp_Policy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policy == nil {
		t.Policy = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Upnp_Policy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Policy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Policy", key)
	}

	t.Policy[key] = &NokiaConf_Configure_Groups_Group_Service_Upnp_Policy{
		Name: &Name,
	}

	return t.Policy[key], nil
}

// RenamePolicy renames an entry in the list Policy within
// the NokiaConf_Configure_Groups_Group_Service_Upnp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Upnp) RenamePolicy(oldK, newK string) error {
	if _, ok := t.Policy[newK]; ok {
		return fmt.Errorf("key %v already exists in Policy", newK)
	}

	e, ok := t.Policy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Policy", oldK)
	}
	e.Name = &newK

	t.Policy[newK] = e
	delete(t.Policy, oldK)
	return nil
}

// GetOrCreatePolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Upnp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Upnp) GetOrCreatePolicy(Name string) *NokiaConf_Configure_Groups_Group_Service_Upnp_Policy {

	key := Name

	if v, ok := t.Policy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicy got unexpected error: %v", err))
	}
	return v
}

// GetPolicy retrieves the value with the specified key from
// the Policy map field of NokiaConf_Configure_Groups_Group_Service_Upnp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Upnp) GetPolicy(Name string) *NokiaConf_Configure_Groups_Group_Service_Upnp_Policy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Policy[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Upnp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Upnp) DeletePolicy(Name string) {
	key := Name

	delete(t.Policy, key)
}

// AppendPolicy appends the supplied NokiaConf_Configure_Groups_Group_Service_Upnp_Policy struct to the
// list Policy of NokiaConf_Configure_Groups_Group_Service_Upnp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Upnp_Policy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Upnp) AppendPolicy(v *NokiaConf_Configure_Groups_Group_Service_Upnp_Policy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policy == nil {
		t.Policy = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Upnp_Policy)
	}

	if _, ok := t.Policy[key]; ok {
		return fmt.Errorf("duplicate key for list Policy %v", key)
	}

	t.Policy[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Upnp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Upnp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Policy {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Upnp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Upnp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Upnp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Upnp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Upnp.
func (*NokiaConf_Configure_Groups_Group_Service_Upnp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Upnp_Policy represents the /nokia-conf/configure/groups/group/service/upnp/policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Upnp_Policy struct {
	Description  *string `path:"description" module:"nokia-conf"`
	MappingLimit *uint32 `path:"mapping-limit" module:"nokia-conf"`
	Name         *string `path:"name" module:"nokia-conf"`
	Port         *int32  `path:"port" module:"nokia-conf"`
	StrictMode   *bool   `path:"strict-mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Upnp_Policy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Upnp_Policy) IsYANGGoStruct() {}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Upnp_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Upnp_Policy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetMappingLimit retrieves the value of the leaf MappingLimit from the NokiaConf_Configure_Groups_Group_Service_Upnp_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MappingLimit is set, it can
// safely use t.GetMappingLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MappingLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Upnp_Policy) GetMappingLimit() uint32 {
	if t == nil || t.MappingLimit == nil {
		return 256
	}
	return *t.MappingLimit
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Service_Upnp_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Upnp_Policy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPort retrieves the value of the leaf Port from the NokiaConf_Configure_Groups_Group_Service_Upnp_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Upnp_Policy) GetPort() int32 {
	if t == nil || t.Port == nil {
		return 5000
	}
	return *t.Port
}

// GetStrictMode retrieves the value of the leaf StrictMode from the NokiaConf_Configure_Groups_Group_Service_Upnp_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StrictMode is set, it can
// safely use t.GetStrictMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StrictMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Upnp_Policy) GetStrictMode() bool {
	if t == nil || t.StrictMode == nil {
		return false
	}
	return *t.StrictMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Upnp_Policy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Upnp_Policy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MappingLimit == nil {
		var v uint32 = 256
		t.MappingLimit = &v
	}
	if t.Port == nil {
		var v int32 = 5000
		t.Port = &v
	}
	if t.StrictMode == nil {
		var v bool = false
		t.StrictMode = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Upnp_Policy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Upnp_Policy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Upnp_Policy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Upnp_Policy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Upnp_Policy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Upnp_Policy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Upnp_Policy.
func (*NokiaConf_Configure_Groups_Group_Service_Upnp_Policy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls represents the /nokia-conf/configure/groups/group/service/vpls YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls struct {
	AdminState             E_NokiaTypesSros_AdminState                                                                                                `path:"admin-state" module:"nokia-conf"`
	Bgp                    map[NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp_BgpInstance_Union]*NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp `path:"bgp" module:"nokia-conf"`
	BgpAd                  *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpAd                                                                       `path:"bgp-ad" module:"nokia-conf" yangPresence:"true"`
	BgpEvpn                *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn                                                                     `path:"bgp-evpn" module:"nokia-conf" yangPresence:"true"`
	BgpMhSite              map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_BgpMhSite                                                        `path:"bgp-mh-site" module:"nokia-conf"`
	BgpVpls                *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpVpls                                                                     `path:"bgp-vpls" module:"nokia-conf" yangPresence:"true"`
	CaptureSap             map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap                                                       `path:"capture-sap" module:"nokia-conf"`
	Customer               *string                                                                                                                    `path:"customer" module:"nokia-conf"`
	Description            *string                                                                                                                    `path:"description" module:"nokia-conf"`
	Endpoint               map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_Endpoint                                                         `path:"endpoint" module:"nokia-conf"`
	EthCfm                 *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm                                                                      `path:"eth-cfm" module:"nokia-conf" yangPresence:"true"`
	Etree                  *bool                                                                                                                      `path:"etree" module:"nokia-conf"`
	Fdb                    *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb                                                                         `path:"fdb" module:"nokia-conf"`
	Gsmp                   *NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp                                                                        `path:"gsmp" module:"nokia-conf" yangPresence:"true"`
	IgmpHostTracking       *NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpHostTracking                                                            `path:"igmp-host-tracking" module:"nokia-conf" yangPresence:"true"`
	IgmpSnooping           *NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping                                                                `path:"igmp-snooping" module:"nokia-conf" yangPresence:"true"`
	IgnoreL2VpnMtuMismatch *bool                                                                                                                      `path:"ignore-l2vpn-mtu-mismatch" module:"nokia-conf"`
	Interface              map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_Interface                                                        `path:"interface" module:"nokia-conf"`
	IsidPolicy             *NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy                                                                  `path:"isid-policy" module:"nokia-conf"`
	LoadBalancing          *NokiaConf_Configure_Groups_Group_Service_Vpls_LoadBalancing                                                               `path:"load-balancing" module:"nokia-conf"`
	MVpls                  *bool                                                                                                                      `path:"m-vpls" module:"nokia-conf"`
	MacFlush               *NokiaConf_Configure_Groups_Group_Service_Vpls_MacFlush                                                                    `path:"mac-flush" module:"nokia-conf"`
	MacProtect             *NokiaConf_Configure_Groups_Group_Service_Vpls_MacProtect                                                                  `path:"mac-protect" module:"nokia-conf"`
	McastIpv6SnoopingScope E_NokiaConf_Configure_Groups_Group_Service_Vpls_McastIpv6SnoopingScope                                                     `path:"mcast-ipv6-snooping-scope" module:"nokia-conf"`
	McrDefaultGtw          *NokiaConf_Configure_Groups_Group_Service_Vpls_McrDefaultGtw                                                               `path:"mcr-default-gtw" module:"nokia-conf" yangPresence:"true"`
	MeshSdp                map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp                                                          `path:"mesh-sdp" module:"nokia-conf"`
	Mfib                   *NokiaConf_Configure_Groups_Group_Service_Vpls_Mfib                                                                        `path:"mfib" module:"nokia-conf"`
	MldSnooping            *NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping                                                                 `path:"mld-snooping" module:"nokia-conf" yangPresence:"true"`
	Mrp                    *NokiaConf_Configure_Groups_Group_Service_Vpls_Mrp                                                                         `path:"mrp" module:"nokia-conf"`
	MulticastInfoPolicy    *string                                                                                                                    `path:"multicast-info-policy" module:"nokia-conf"`
	Pbb                    *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb                                                                         `path:"pbb" module:"nokia-conf"`
	PbbType                E_NokiaTypesServices_PbbType                                                                                               `path:"pbb-type" module:"nokia-conf"`
	PimSnooping            *NokiaConf_Configure_Groups_Group_Service_Vpls_PimSnooping                                                                 `path:"pim-snooping" module:"nokia-conf" yangPresence:"true"`
	ProviderTunnel         *NokiaConf_Configure_Groups_Group_Service_Vpls_ProviderTunnel                                                              `path:"provider-tunnel" module:"nokia-conf" yangPresence:"true"`
	ProxyArp               *NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp                                                                    `path:"proxy-arp" module:"nokia-conf" yangPresence:"true"`
	ProxyNd                *NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyNd                                                                     `path:"proxy-nd" module:"nokia-conf" yangPresence:"true"`
	RoutedVpls             *NokiaConf_Configure_Groups_Group_Service_Vpls_RoutedVpls                                                                  `path:"routed-vpls" module:"nokia-conf" yangPresence:"true"`
	Sap                    map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_Sap                                                              `path:"sap" module:"nokia-conf"`
	ServiceId              *uint32                                                                                                                    `path:"service-id" module:"nokia-conf"`
	ServiceMtu             *int32                                                                                                                     `path:"service-mtu" module:"nokia-conf"`
	ServiceName            *string                                                                                                                    `path:"service-name" module:"nokia-conf"`
	ShcvPolicyIpv4         *string                                                                                                                    `path:"shcv-policy-ipv4" module:"nokia-conf"`
	Spb                    *NokiaConf_Configure_Groups_Group_Service_Vpls_Spb                                                                         `path:"spb" module:"nokia-conf" yangPresence:"true"`
	SpbmControlVpls        *NokiaConf_Configure_Groups_Group_Service_Vpls_SpbmControlVpls                                                             `path:"spbm-control-vpls" module:"nokia-conf"`
	SplitHorizonGroup      map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_SplitHorizonGroup                                                `path:"split-horizon-group" module:"nokia-conf"`
	SpokeSdp               map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_SpokeSdp                                                         `path:"spoke-sdp" module:"nokia-conf"`
	Stp                    *NokiaConf_Configure_Groups_Group_Service_Vpls_Stp                                                                         `path:"stp" module:"nokia-conf"`
	TempFlooding           *int32                                                                                                                     `path:"temp-flooding" module:"nokia-conf"`
	VpnId                  *uint32                                                                                                                    `path:"vpn-id" module:"nokia-conf"`
	Vxlan                  *NokiaConf_Configure_Groups_Group_Service_Vpls_Vxlan                                                                       `path:"vxlan" module:"nokia-conf"`
	WlanGw                 *NokiaConf_Configure_Groups_Group_Service_Vpls_WlanGw                                                                      `path:"wlan-gw" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls) IsYANGGoStruct() {}

// NewBgp creates a new entry in the Bgp list of the
// NokiaConf_Configure_Groups_Group_Service_Vpls struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) NewBgp(BgpInstance NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp_BgpInstance_Union) (*NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Bgp == nil {
		t.Bgp = make(map[NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp_BgpInstance_Union]*NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp)
	}

	key := BgpInstance

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Bgp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Bgp", key)
	}

	t.Bgp[key] = &NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp{
		BgpInstance: BgpInstance,
	}

	return t.Bgp[key], nil
}

// RenameBgp renames an entry in the list Bgp within
// the NokiaConf_Configure_Groups_Group_Service_Vpls struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) RenameBgp(oldK, newK NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp_BgpInstance_Union) error {
	if _, ok := t.Bgp[newK]; ok {
		return fmt.Errorf("key %v already exists in Bgp", newK)
	}

	e, ok := t.Bgp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Bgp", oldK)
	}
	e.BgpInstance = newK

	t.Bgp[newK] = e
	delete(t.Bgp, oldK)
	return nil
}

// GetOrCreateBgp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetOrCreateBgp(BgpInstance NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp_BgpInstance_Union) *NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp {

	key := BgpInstance

	if v, ok := t.Bgp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewBgp(BgpInstance)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateBgp got unexpected error: %v", err))
	}
	return v
}

// GetBgp retrieves the value with the specified key from
// the Bgp map field of NokiaConf_Configure_Groups_Group_Service_Vpls. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetBgp(BgpInstance NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp_BgpInstance_Union) *NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp {

	if t == nil {
		return nil
	}

	key := BgpInstance

	if lm, ok := t.Bgp[key]; ok {
		return lm
	}
	return nil
}

// DeleteBgp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) DeleteBgp(BgpInstance NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp_BgpInstance_Union) {
	key := BgpInstance

	delete(t.Bgp, key)
}

// AppendBgp appends the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp struct to the
// list Bgp of NokiaConf_Configure_Groups_Group_Service_Vpls. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) AppendBgp(v *NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp) error {
	key := v.BgpInstance

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Bgp == nil {
		t.Bgp = make(map[NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp_BgpInstance_Union]*NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp)
	}

	if _, ok := t.Bgp[key]; ok {
		return fmt.Errorf("duplicate key for list Bgp %v", key)
	}

	t.Bgp[key] = v
	return nil
}

// NewBgpMhSite creates a new entry in the BgpMhSite list of the
// NokiaConf_Configure_Groups_Group_Service_Vpls struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) NewBgpMhSite(SiteName string) (*NokiaConf_Configure_Groups_Group_Service_Vpls_BgpMhSite, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BgpMhSite == nil {
		t.BgpMhSite = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_BgpMhSite)
	}

	key := SiteName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.BgpMhSite[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list BgpMhSite", key)
	}

	t.BgpMhSite[key] = &NokiaConf_Configure_Groups_Group_Service_Vpls_BgpMhSite{
		SiteName: &SiteName,
	}

	return t.BgpMhSite[key], nil
}

// RenameBgpMhSite renames an entry in the list BgpMhSite within
// the NokiaConf_Configure_Groups_Group_Service_Vpls struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) RenameBgpMhSite(oldK, newK string) error {
	if _, ok := t.BgpMhSite[newK]; ok {
		return fmt.Errorf("key %v already exists in BgpMhSite", newK)
	}

	e, ok := t.BgpMhSite[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in BgpMhSite", oldK)
	}
	e.SiteName = &newK

	t.BgpMhSite[newK] = e
	delete(t.BgpMhSite, oldK)
	return nil
}

// GetOrCreateBgpMhSite retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetOrCreateBgpMhSite(SiteName string) *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpMhSite {

	key := SiteName

	if v, ok := t.BgpMhSite[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewBgpMhSite(SiteName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateBgpMhSite got unexpected error: %v", err))
	}
	return v
}

// GetBgpMhSite retrieves the value with the specified key from
// the BgpMhSite map field of NokiaConf_Configure_Groups_Group_Service_Vpls. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetBgpMhSite(SiteName string) *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpMhSite {

	if t == nil {
		return nil
	}

	key := SiteName

	if lm, ok := t.BgpMhSite[key]; ok {
		return lm
	}
	return nil
}

// DeleteBgpMhSite deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) DeleteBgpMhSite(SiteName string) {
	key := SiteName

	delete(t.BgpMhSite, key)
}

// AppendBgpMhSite appends the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_BgpMhSite struct to the
// list BgpMhSite of NokiaConf_Configure_Groups_Group_Service_Vpls. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_BgpMhSite already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) AppendBgpMhSite(v *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpMhSite) error {
	if v.SiteName == nil {
		return fmt.Errorf("invalid nil key received for SiteName")
	}

	key := *v.SiteName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BgpMhSite == nil {
		t.BgpMhSite = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_BgpMhSite)
	}

	if _, ok := t.BgpMhSite[key]; ok {
		return fmt.Errorf("duplicate key for list BgpMhSite %v", key)
	}

	t.BgpMhSite[key] = v
	return nil
}

// NewCaptureSap creates a new entry in the CaptureSap list of the
// NokiaConf_Configure_Groups_Group_Service_Vpls struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) NewCaptureSap(SapId string) (*NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CaptureSap == nil {
		t.CaptureSap = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap)
	}

	key := SapId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.CaptureSap[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list CaptureSap", key)
	}

	t.CaptureSap[key] = &NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap{
		SapId: &SapId,
	}

	return t.CaptureSap[key], nil
}

// RenameCaptureSap renames an entry in the list CaptureSap within
// the NokiaConf_Configure_Groups_Group_Service_Vpls struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) RenameCaptureSap(oldK, newK string) error {
	if _, ok := t.CaptureSap[newK]; ok {
		return fmt.Errorf("key %v already exists in CaptureSap", newK)
	}

	e, ok := t.CaptureSap[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in CaptureSap", oldK)
	}
	e.SapId = &newK

	t.CaptureSap[newK] = e
	delete(t.CaptureSap, oldK)
	return nil
}

// GetOrCreateCaptureSap retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetOrCreateCaptureSap(SapId string) *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap {

	key := SapId

	if v, ok := t.CaptureSap[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCaptureSap(SapId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCaptureSap got unexpected error: %v", err))
	}
	return v
}

// GetCaptureSap retrieves the value with the specified key from
// the CaptureSap map field of NokiaConf_Configure_Groups_Group_Service_Vpls. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetCaptureSap(SapId string) *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap {

	if t == nil {
		return nil
	}

	key := SapId

	if lm, ok := t.CaptureSap[key]; ok {
		return lm
	}
	return nil
}

// DeleteCaptureSap deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) DeleteCaptureSap(SapId string) {
	key := SapId

	delete(t.CaptureSap, key)
}

// AppendCaptureSap appends the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap struct to the
// list CaptureSap of NokiaConf_Configure_Groups_Group_Service_Vpls. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) AppendCaptureSap(v *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap) error {
	if v.SapId == nil {
		return fmt.Errorf("invalid nil key received for SapId")
	}

	key := *v.SapId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CaptureSap == nil {
		t.CaptureSap = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap)
	}

	if _, ok := t.CaptureSap[key]; ok {
		return fmt.Errorf("duplicate key for list CaptureSap %v", key)
	}

	t.CaptureSap[key] = v
	return nil
}

// NewEndpoint creates a new entry in the Endpoint list of the
// NokiaConf_Configure_Groups_Group_Service_Vpls struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) NewEndpoint(Name string) (*NokiaConf_Configure_Groups_Group_Service_Vpls_Endpoint, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Endpoint == nil {
		t.Endpoint = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_Endpoint)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Endpoint[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Endpoint", key)
	}

	t.Endpoint[key] = &NokiaConf_Configure_Groups_Group_Service_Vpls_Endpoint{
		Name: &Name,
	}

	return t.Endpoint[key], nil
}

// RenameEndpoint renames an entry in the list Endpoint within
// the NokiaConf_Configure_Groups_Group_Service_Vpls struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) RenameEndpoint(oldK, newK string) error {
	if _, ok := t.Endpoint[newK]; ok {
		return fmt.Errorf("key %v already exists in Endpoint", newK)
	}

	e, ok := t.Endpoint[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Endpoint", oldK)
	}
	e.Name = &newK

	t.Endpoint[newK] = e
	delete(t.Endpoint, oldK)
	return nil
}

// GetOrCreateEndpoint retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetOrCreateEndpoint(Name string) *NokiaConf_Configure_Groups_Group_Service_Vpls_Endpoint {

	key := Name

	if v, ok := t.Endpoint[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEndpoint(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEndpoint got unexpected error: %v", err))
	}
	return v
}

// GetEndpoint retrieves the value with the specified key from
// the Endpoint map field of NokiaConf_Configure_Groups_Group_Service_Vpls. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetEndpoint(Name string) *NokiaConf_Configure_Groups_Group_Service_Vpls_Endpoint {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Endpoint[key]; ok {
		return lm
	}
	return nil
}

// DeleteEndpoint deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) DeleteEndpoint(Name string) {
	key := Name

	delete(t.Endpoint, key)
}

// AppendEndpoint appends the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_Endpoint struct to the
// list Endpoint of NokiaConf_Configure_Groups_Group_Service_Vpls. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_Endpoint already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) AppendEndpoint(v *NokiaConf_Configure_Groups_Group_Service_Vpls_Endpoint) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Endpoint == nil {
		t.Endpoint = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_Endpoint)
	}

	if _, ok := t.Endpoint[key]; ok {
		return fmt.Errorf("duplicate key for list Endpoint %v", key)
	}

	t.Endpoint[key] = v
	return nil
}

// NewInterface creates a new entry in the Interface list of the
// NokiaConf_Configure_Groups_Group_Service_Vpls struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) NewInterface(InterfaceName string) (*NokiaConf_Configure_Groups_Group_Service_Vpls_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_Interface)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &NokiaConf_Configure_Groups_Group_Service_Vpls_Interface{
		InterfaceName: &InterfaceName,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the NokiaConf_Configure_Groups_Group_Service_Vpls struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.InterfaceName = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetOrCreateInterface(InterfaceName string) *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface {

	key := InterfaceName

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of NokiaConf_Configure_Groups_Group_Service_Vpls. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetInterface(InterfaceName string) *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface {

	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) DeleteInterface(InterfaceName string) {
	key := InterfaceName

	delete(t.Interface, key)
}

// AppendInterface appends the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_Interface struct to the
// list Interface of NokiaConf_Configure_Groups_Group_Service_Vpls. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_Interface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) AppendInterface(v *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// NewMeshSdp creates a new entry in the MeshSdp list of the
// NokiaConf_Configure_Groups_Group_Service_Vpls struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) NewMeshSdp(SdpBindId string) (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MeshSdp == nil {
		t.MeshSdp = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp)
	}

	key := SdpBindId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MeshSdp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MeshSdp", key)
	}

	t.MeshSdp[key] = &NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp{
		SdpBindId: &SdpBindId,
	}

	return t.MeshSdp[key], nil
}

// RenameMeshSdp renames an entry in the list MeshSdp within
// the NokiaConf_Configure_Groups_Group_Service_Vpls struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) RenameMeshSdp(oldK, newK string) error {
	if _, ok := t.MeshSdp[newK]; ok {
		return fmt.Errorf("key %v already exists in MeshSdp", newK)
	}

	e, ok := t.MeshSdp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MeshSdp", oldK)
	}
	e.SdpBindId = &newK

	t.MeshSdp[newK] = e
	delete(t.MeshSdp, oldK)
	return nil
}

// GetOrCreateMeshSdp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetOrCreateMeshSdp(SdpBindId string) *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp {

	key := SdpBindId

	if v, ok := t.MeshSdp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMeshSdp(SdpBindId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMeshSdp got unexpected error: %v", err))
	}
	return v
}

// GetMeshSdp retrieves the value with the specified key from
// the MeshSdp map field of NokiaConf_Configure_Groups_Group_Service_Vpls. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetMeshSdp(SdpBindId string) *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp {

	if t == nil {
		return nil
	}

	key := SdpBindId

	if lm, ok := t.MeshSdp[key]; ok {
		return lm
	}
	return nil
}

// DeleteMeshSdp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) DeleteMeshSdp(SdpBindId string) {
	key := SdpBindId

	delete(t.MeshSdp, key)
}

// AppendMeshSdp appends the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp struct to the
// list MeshSdp of NokiaConf_Configure_Groups_Group_Service_Vpls. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) AppendMeshSdp(v *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp) error {
	if v.SdpBindId == nil {
		return fmt.Errorf("invalid nil key received for SdpBindId")
	}

	key := *v.SdpBindId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MeshSdp == nil {
		t.MeshSdp = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp)
	}

	if _, ok := t.MeshSdp[key]; ok {
		return fmt.Errorf("duplicate key for list MeshSdp %v", key)
	}

	t.MeshSdp[key] = v
	return nil
}

// NewSap creates a new entry in the Sap list of the
// NokiaConf_Configure_Groups_Group_Service_Vpls struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) NewSap(SapId string) (*NokiaConf_Configure_Groups_Group_Service_Vpls_Sap, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sap == nil {
		t.Sap = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_Sap)
	}

	key := SapId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Sap[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Sap", key)
	}

	t.Sap[key] = &NokiaConf_Configure_Groups_Group_Service_Vpls_Sap{
		SapId: &SapId,
	}

	return t.Sap[key], nil
}

// RenameSap renames an entry in the list Sap within
// the NokiaConf_Configure_Groups_Group_Service_Vpls struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) RenameSap(oldK, newK string) error {
	if _, ok := t.Sap[newK]; ok {
		return fmt.Errorf("key %v already exists in Sap", newK)
	}

	e, ok := t.Sap[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Sap", oldK)
	}
	e.SapId = &newK

	t.Sap[newK] = e
	delete(t.Sap, oldK)
	return nil
}

// GetOrCreateSap retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetOrCreateSap(SapId string) *NokiaConf_Configure_Groups_Group_Service_Vpls_Sap {

	key := SapId

	if v, ok := t.Sap[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSap(SapId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSap got unexpected error: %v", err))
	}
	return v
}

// GetSap retrieves the value with the specified key from
// the Sap map field of NokiaConf_Configure_Groups_Group_Service_Vpls. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetSap(SapId string) *NokiaConf_Configure_Groups_Group_Service_Vpls_Sap {

	if t == nil {
		return nil
	}

	key := SapId

	if lm, ok := t.Sap[key]; ok {
		return lm
	}
	return nil
}

// DeleteSap deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) DeleteSap(SapId string) {
	key := SapId

	delete(t.Sap, key)
}

// AppendSap appends the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_Sap struct to the
// list Sap of NokiaConf_Configure_Groups_Group_Service_Vpls. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_Sap already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) AppendSap(v *NokiaConf_Configure_Groups_Group_Service_Vpls_Sap) error {
	if v.SapId == nil {
		return fmt.Errorf("invalid nil key received for SapId")
	}

	key := *v.SapId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sap == nil {
		t.Sap = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_Sap)
	}

	if _, ok := t.Sap[key]; ok {
		return fmt.Errorf("duplicate key for list Sap %v", key)
	}

	t.Sap[key] = v
	return nil
}

// NewSplitHorizonGroup creates a new entry in the SplitHorizonGroup list of the
// NokiaConf_Configure_Groups_Group_Service_Vpls struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) NewSplitHorizonGroup(ShgName string) (*NokiaConf_Configure_Groups_Group_Service_Vpls_SplitHorizonGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SplitHorizonGroup == nil {
		t.SplitHorizonGroup = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_SplitHorizonGroup)
	}

	key := ShgName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SplitHorizonGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SplitHorizonGroup", key)
	}

	t.SplitHorizonGroup[key] = &NokiaConf_Configure_Groups_Group_Service_Vpls_SplitHorizonGroup{
		ShgName: &ShgName,
	}

	return t.SplitHorizonGroup[key], nil
}

// RenameSplitHorizonGroup renames an entry in the list SplitHorizonGroup within
// the NokiaConf_Configure_Groups_Group_Service_Vpls struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) RenameSplitHorizonGroup(oldK, newK string) error {
	if _, ok := t.SplitHorizonGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in SplitHorizonGroup", newK)
	}

	e, ok := t.SplitHorizonGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SplitHorizonGroup", oldK)
	}
	e.ShgName = &newK

	t.SplitHorizonGroup[newK] = e
	delete(t.SplitHorizonGroup, oldK)
	return nil
}

// GetOrCreateSplitHorizonGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetOrCreateSplitHorizonGroup(ShgName string) *NokiaConf_Configure_Groups_Group_Service_Vpls_SplitHorizonGroup {

	key := ShgName

	if v, ok := t.SplitHorizonGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSplitHorizonGroup(ShgName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSplitHorizonGroup got unexpected error: %v", err))
	}
	return v
}

// GetSplitHorizonGroup retrieves the value with the specified key from
// the SplitHorizonGroup map field of NokiaConf_Configure_Groups_Group_Service_Vpls. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetSplitHorizonGroup(ShgName string) *NokiaConf_Configure_Groups_Group_Service_Vpls_SplitHorizonGroup {

	if t == nil {
		return nil
	}

	key := ShgName

	if lm, ok := t.SplitHorizonGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteSplitHorizonGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) DeleteSplitHorizonGroup(ShgName string) {
	key := ShgName

	delete(t.SplitHorizonGroup, key)
}

// AppendSplitHorizonGroup appends the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_SplitHorizonGroup struct to the
// list SplitHorizonGroup of NokiaConf_Configure_Groups_Group_Service_Vpls. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_SplitHorizonGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) AppendSplitHorizonGroup(v *NokiaConf_Configure_Groups_Group_Service_Vpls_SplitHorizonGroup) error {
	if v.ShgName == nil {
		return fmt.Errorf("invalid nil key received for ShgName")
	}

	key := *v.ShgName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SplitHorizonGroup == nil {
		t.SplitHorizonGroup = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_SplitHorizonGroup)
	}

	if _, ok := t.SplitHorizonGroup[key]; ok {
		return fmt.Errorf("duplicate key for list SplitHorizonGroup %v", key)
	}

	t.SplitHorizonGroup[key] = v
	return nil
}

// NewSpokeSdp creates a new entry in the SpokeSdp list of the
// NokiaConf_Configure_Groups_Group_Service_Vpls struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) NewSpokeSdp(SdpBindId string) (*NokiaConf_Configure_Groups_Group_Service_Vpls_SpokeSdp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SpokeSdp == nil {
		t.SpokeSdp = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_SpokeSdp)
	}

	key := SdpBindId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SpokeSdp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SpokeSdp", key)
	}

	t.SpokeSdp[key] = &NokiaConf_Configure_Groups_Group_Service_Vpls_SpokeSdp{
		SdpBindId: &SdpBindId,
	}

	return t.SpokeSdp[key], nil
}

// RenameSpokeSdp renames an entry in the list SpokeSdp within
// the NokiaConf_Configure_Groups_Group_Service_Vpls struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) RenameSpokeSdp(oldK, newK string) error {
	if _, ok := t.SpokeSdp[newK]; ok {
		return fmt.Errorf("key %v already exists in SpokeSdp", newK)
	}

	e, ok := t.SpokeSdp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SpokeSdp", oldK)
	}
	e.SdpBindId = &newK

	t.SpokeSdp[newK] = e
	delete(t.SpokeSdp, oldK)
	return nil
}

// GetOrCreateSpokeSdp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetOrCreateSpokeSdp(SdpBindId string) *NokiaConf_Configure_Groups_Group_Service_Vpls_SpokeSdp {

	key := SdpBindId

	if v, ok := t.SpokeSdp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSpokeSdp(SdpBindId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSpokeSdp got unexpected error: %v", err))
	}
	return v
}

// GetSpokeSdp retrieves the value with the specified key from
// the SpokeSdp map field of NokiaConf_Configure_Groups_Group_Service_Vpls. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetSpokeSdp(SdpBindId string) *NokiaConf_Configure_Groups_Group_Service_Vpls_SpokeSdp {

	if t == nil {
		return nil
	}

	key := SdpBindId

	if lm, ok := t.SpokeSdp[key]; ok {
		return lm
	}
	return nil
}

// DeleteSpokeSdp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) DeleteSpokeSdp(SdpBindId string) {
	key := SdpBindId

	delete(t.SpokeSdp, key)
}

// AppendSpokeSdp appends the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_SpokeSdp struct to the
// list SpokeSdp of NokiaConf_Configure_Groups_Group_Service_Vpls. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_SpokeSdp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) AppendSpokeSdp(v *NokiaConf_Configure_Groups_Group_Service_Vpls_SpokeSdp) error {
	if v.SdpBindId == nil {
		return fmt.Errorf("invalid nil key received for SdpBindId")
	}

	key := *v.SdpBindId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SpokeSdp == nil {
		t.SpokeSdp = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_SpokeSdp)
	}

	if _, ok := t.SpokeSdp[key]; ok {
		return fmt.Errorf("duplicate key for list SpokeSdp %v", key)
	}

	t.SpokeSdp[key] = v
	return nil
}

// GetOrCreateBgpAd retrieves the value of the BgpAd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetOrCreateBgpAd() *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpAd {
	if t.BgpAd != nil {
		return t.BgpAd
	}
	t.BgpAd = &NokiaConf_Configure_Groups_Group_Service_Vpls_BgpAd{}
	return t.BgpAd
}

// GetOrCreateBgpEvpn retrieves the value of the BgpEvpn field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetOrCreateBgpEvpn() *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn {
	if t.BgpEvpn != nil {
		return t.BgpEvpn
	}
	t.BgpEvpn = &NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn{}
	return t.BgpEvpn
}

// GetOrCreateBgpVpls retrieves the value of the BgpVpls field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetOrCreateBgpVpls() *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpVpls {
	if t.BgpVpls != nil {
		return t.BgpVpls
	}
	t.BgpVpls = &NokiaConf_Configure_Groups_Group_Service_Vpls_BgpVpls{}
	return t.BgpVpls
}

// GetOrCreateEthCfm retrieves the value of the EthCfm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetOrCreateEthCfm() *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm {
	if t.EthCfm != nil {
		return t.EthCfm
	}
	t.EthCfm = &NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm{}
	return t.EthCfm
}

// GetOrCreateFdb retrieves the value of the Fdb field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetOrCreateFdb() *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb {
	if t.Fdb != nil {
		return t.Fdb
	}
	t.Fdb = &NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb{}
	return t.Fdb
}

// GetOrCreateGsmp retrieves the value of the Gsmp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetOrCreateGsmp() *NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp {
	if t.Gsmp != nil {
		return t.Gsmp
	}
	t.Gsmp = &NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp{}
	return t.Gsmp
}

// GetOrCreateIgmpHostTracking retrieves the value of the IgmpHostTracking field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetOrCreateIgmpHostTracking() *NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpHostTracking {
	if t.IgmpHostTracking != nil {
		return t.IgmpHostTracking
	}
	t.IgmpHostTracking = &NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpHostTracking{}
	return t.IgmpHostTracking
}

// GetOrCreateIgmpSnooping retrieves the value of the IgmpSnooping field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetOrCreateIgmpSnooping() *NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping {
	if t.IgmpSnooping != nil {
		return t.IgmpSnooping
	}
	t.IgmpSnooping = &NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping{}
	return t.IgmpSnooping
}

// GetOrCreateIsidPolicy retrieves the value of the IsidPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetOrCreateIsidPolicy() *NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy {
	if t.IsidPolicy != nil {
		return t.IsidPolicy
	}
	t.IsidPolicy = &NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy{}
	return t.IsidPolicy
}

// GetOrCreateLoadBalancing retrieves the value of the LoadBalancing field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetOrCreateLoadBalancing() *NokiaConf_Configure_Groups_Group_Service_Vpls_LoadBalancing {
	if t.LoadBalancing != nil {
		return t.LoadBalancing
	}
	t.LoadBalancing = &NokiaConf_Configure_Groups_Group_Service_Vpls_LoadBalancing{}
	return t.LoadBalancing
}

// GetOrCreateMacFlush retrieves the value of the MacFlush field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetOrCreateMacFlush() *NokiaConf_Configure_Groups_Group_Service_Vpls_MacFlush {
	if t.MacFlush != nil {
		return t.MacFlush
	}
	t.MacFlush = &NokiaConf_Configure_Groups_Group_Service_Vpls_MacFlush{}
	return t.MacFlush
}

// GetOrCreateMacProtect retrieves the value of the MacProtect field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetOrCreateMacProtect() *NokiaConf_Configure_Groups_Group_Service_Vpls_MacProtect {
	if t.MacProtect != nil {
		return t.MacProtect
	}
	t.MacProtect = &NokiaConf_Configure_Groups_Group_Service_Vpls_MacProtect{}
	return t.MacProtect
}

// GetOrCreateMcrDefaultGtw retrieves the value of the McrDefaultGtw field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetOrCreateMcrDefaultGtw() *NokiaConf_Configure_Groups_Group_Service_Vpls_McrDefaultGtw {
	if t.McrDefaultGtw != nil {
		return t.McrDefaultGtw
	}
	t.McrDefaultGtw = &NokiaConf_Configure_Groups_Group_Service_Vpls_McrDefaultGtw{}
	return t.McrDefaultGtw
}

// GetOrCreateMfib retrieves the value of the Mfib field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetOrCreateMfib() *NokiaConf_Configure_Groups_Group_Service_Vpls_Mfib {
	if t.Mfib != nil {
		return t.Mfib
	}
	t.Mfib = &NokiaConf_Configure_Groups_Group_Service_Vpls_Mfib{}
	return t.Mfib
}

// GetOrCreateMldSnooping retrieves the value of the MldSnooping field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetOrCreateMldSnooping() *NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping {
	if t.MldSnooping != nil {
		return t.MldSnooping
	}
	t.MldSnooping = &NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping{}
	return t.MldSnooping
}

// GetOrCreateMrp retrieves the value of the Mrp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetOrCreateMrp() *NokiaConf_Configure_Groups_Group_Service_Vpls_Mrp {
	if t.Mrp != nil {
		return t.Mrp
	}
	t.Mrp = &NokiaConf_Configure_Groups_Group_Service_Vpls_Mrp{}
	return t.Mrp
}

// GetOrCreatePbb retrieves the value of the Pbb field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetOrCreatePbb() *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb {
	if t.Pbb != nil {
		return t.Pbb
	}
	t.Pbb = &NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb{}
	return t.Pbb
}

// GetOrCreatePimSnooping retrieves the value of the PimSnooping field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetOrCreatePimSnooping() *NokiaConf_Configure_Groups_Group_Service_Vpls_PimSnooping {
	if t.PimSnooping != nil {
		return t.PimSnooping
	}
	t.PimSnooping = &NokiaConf_Configure_Groups_Group_Service_Vpls_PimSnooping{}
	return t.PimSnooping
}

// GetOrCreateProviderTunnel retrieves the value of the ProviderTunnel field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetOrCreateProviderTunnel() *NokiaConf_Configure_Groups_Group_Service_Vpls_ProviderTunnel {
	if t.ProviderTunnel != nil {
		return t.ProviderTunnel
	}
	t.ProviderTunnel = &NokiaConf_Configure_Groups_Group_Service_Vpls_ProviderTunnel{}
	return t.ProviderTunnel
}

// GetOrCreateProxyArp retrieves the value of the ProxyArp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetOrCreateProxyArp() *NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp {
	if t.ProxyArp != nil {
		return t.ProxyArp
	}
	t.ProxyArp = &NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp{}
	return t.ProxyArp
}

// GetOrCreateProxyNd retrieves the value of the ProxyNd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetOrCreateProxyNd() *NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyNd {
	if t.ProxyNd != nil {
		return t.ProxyNd
	}
	t.ProxyNd = &NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyNd{}
	return t.ProxyNd
}

// GetOrCreateRoutedVpls retrieves the value of the RoutedVpls field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetOrCreateRoutedVpls() *NokiaConf_Configure_Groups_Group_Service_Vpls_RoutedVpls {
	if t.RoutedVpls != nil {
		return t.RoutedVpls
	}
	t.RoutedVpls = &NokiaConf_Configure_Groups_Group_Service_Vpls_RoutedVpls{}
	return t.RoutedVpls
}

// GetOrCreateSpb retrieves the value of the Spb field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetOrCreateSpb() *NokiaConf_Configure_Groups_Group_Service_Vpls_Spb {
	if t.Spb != nil {
		return t.Spb
	}
	t.Spb = &NokiaConf_Configure_Groups_Group_Service_Vpls_Spb{}
	return t.Spb
}

// GetOrCreateSpbmControlVpls retrieves the value of the SpbmControlVpls field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetOrCreateSpbmControlVpls() *NokiaConf_Configure_Groups_Group_Service_Vpls_SpbmControlVpls {
	if t.SpbmControlVpls != nil {
		return t.SpbmControlVpls
	}
	t.SpbmControlVpls = &NokiaConf_Configure_Groups_Group_Service_Vpls_SpbmControlVpls{}
	return t.SpbmControlVpls
}

// GetOrCreateStp retrieves the value of the Stp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetOrCreateStp() *NokiaConf_Configure_Groups_Group_Service_Vpls_Stp {
	if t.Stp != nil {
		return t.Stp
	}
	t.Stp = &NokiaConf_Configure_Groups_Group_Service_Vpls_Stp{}
	return t.Stp
}

// GetOrCreateVxlan retrieves the value of the Vxlan field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetOrCreateVxlan() *NokiaConf_Configure_Groups_Group_Service_Vpls_Vxlan {
	if t.Vxlan != nil {
		return t.Vxlan
	}
	t.Vxlan = &NokiaConf_Configure_Groups_Group_Service_Vpls_Vxlan{}
	return t.Vxlan
}

// GetOrCreateWlanGw retrieves the value of the WlanGw field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetOrCreateWlanGw() *NokiaConf_Configure_Groups_Group_Service_Vpls_WlanGw {
	if t.WlanGw != nil {
		return t.WlanGw
	}
	t.WlanGw = &NokiaConf_Configure_Groups_Group_Service_Vpls_WlanGw{}
	return t.WlanGw
}

// GetBgpAd returns the value of the BgpAd struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls. If the receiver or the field BgpAd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetBgpAd() *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpAd {
	if t != nil && t.BgpAd != nil {
		return t.BgpAd
	}
	return nil
}

// GetBgpEvpn returns the value of the BgpEvpn struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls. If the receiver or the field BgpEvpn is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetBgpEvpn() *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn {
	if t != nil && t.BgpEvpn != nil {
		return t.BgpEvpn
	}
	return nil
}

// GetBgpVpls returns the value of the BgpVpls struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls. If the receiver or the field BgpVpls is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetBgpVpls() *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpVpls {
	if t != nil && t.BgpVpls != nil {
		return t.BgpVpls
	}
	return nil
}

// GetEthCfm returns the value of the EthCfm struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls. If the receiver or the field EthCfm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetEthCfm() *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm {
	if t != nil && t.EthCfm != nil {
		return t.EthCfm
	}
	return nil
}

// GetFdb returns the value of the Fdb struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls. If the receiver or the field Fdb is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetFdb() *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb {
	if t != nil && t.Fdb != nil {
		return t.Fdb
	}
	return nil
}

// GetGsmp returns the value of the Gsmp struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls. If the receiver or the field Gsmp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetGsmp() *NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp {
	if t != nil && t.Gsmp != nil {
		return t.Gsmp
	}
	return nil
}

// GetIgmpHostTracking returns the value of the IgmpHostTracking struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls. If the receiver or the field IgmpHostTracking is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetIgmpHostTracking() *NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpHostTracking {
	if t != nil && t.IgmpHostTracking != nil {
		return t.IgmpHostTracking
	}
	return nil
}

// GetIgmpSnooping returns the value of the IgmpSnooping struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls. If the receiver or the field IgmpSnooping is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetIgmpSnooping() *NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping {
	if t != nil && t.IgmpSnooping != nil {
		return t.IgmpSnooping
	}
	return nil
}

// GetIsidPolicy returns the value of the IsidPolicy struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls. If the receiver or the field IsidPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetIsidPolicy() *NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy {
	if t != nil && t.IsidPolicy != nil {
		return t.IsidPolicy
	}
	return nil
}

// GetLoadBalancing returns the value of the LoadBalancing struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls. If the receiver or the field LoadBalancing is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetLoadBalancing() *NokiaConf_Configure_Groups_Group_Service_Vpls_LoadBalancing {
	if t != nil && t.LoadBalancing != nil {
		return t.LoadBalancing
	}
	return nil
}

// GetMacFlush returns the value of the MacFlush struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls. If the receiver or the field MacFlush is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetMacFlush() *NokiaConf_Configure_Groups_Group_Service_Vpls_MacFlush {
	if t != nil && t.MacFlush != nil {
		return t.MacFlush
	}
	return nil
}

// GetMacProtect returns the value of the MacProtect struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls. If the receiver or the field MacProtect is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetMacProtect() *NokiaConf_Configure_Groups_Group_Service_Vpls_MacProtect {
	if t != nil && t.MacProtect != nil {
		return t.MacProtect
	}
	return nil
}

// GetMcrDefaultGtw returns the value of the McrDefaultGtw struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls. If the receiver or the field McrDefaultGtw is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetMcrDefaultGtw() *NokiaConf_Configure_Groups_Group_Service_Vpls_McrDefaultGtw {
	if t != nil && t.McrDefaultGtw != nil {
		return t.McrDefaultGtw
	}
	return nil
}

// GetMfib returns the value of the Mfib struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls. If the receiver or the field Mfib is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetMfib() *NokiaConf_Configure_Groups_Group_Service_Vpls_Mfib {
	if t != nil && t.Mfib != nil {
		return t.Mfib
	}
	return nil
}

// GetMldSnooping returns the value of the MldSnooping struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls. If the receiver or the field MldSnooping is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetMldSnooping() *NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping {
	if t != nil && t.MldSnooping != nil {
		return t.MldSnooping
	}
	return nil
}

// GetMrp returns the value of the Mrp struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls. If the receiver or the field Mrp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetMrp() *NokiaConf_Configure_Groups_Group_Service_Vpls_Mrp {
	if t != nil && t.Mrp != nil {
		return t.Mrp
	}
	return nil
}

// GetPbb returns the value of the Pbb struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls. If the receiver or the field Pbb is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetPbb() *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb {
	if t != nil && t.Pbb != nil {
		return t.Pbb
	}
	return nil
}

// GetPimSnooping returns the value of the PimSnooping struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls. If the receiver or the field PimSnooping is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetPimSnooping() *NokiaConf_Configure_Groups_Group_Service_Vpls_PimSnooping {
	if t != nil && t.PimSnooping != nil {
		return t.PimSnooping
	}
	return nil
}

// GetProviderTunnel returns the value of the ProviderTunnel struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls. If the receiver or the field ProviderTunnel is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetProviderTunnel() *NokiaConf_Configure_Groups_Group_Service_Vpls_ProviderTunnel {
	if t != nil && t.ProviderTunnel != nil {
		return t.ProviderTunnel
	}
	return nil
}

// GetProxyArp returns the value of the ProxyArp struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls. If the receiver or the field ProxyArp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetProxyArp() *NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp {
	if t != nil && t.ProxyArp != nil {
		return t.ProxyArp
	}
	return nil
}

// GetProxyNd returns the value of the ProxyNd struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls. If the receiver or the field ProxyNd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetProxyNd() *NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyNd {
	if t != nil && t.ProxyNd != nil {
		return t.ProxyNd
	}
	return nil
}

// GetRoutedVpls returns the value of the RoutedVpls struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls. If the receiver or the field RoutedVpls is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetRoutedVpls() *NokiaConf_Configure_Groups_Group_Service_Vpls_RoutedVpls {
	if t != nil && t.RoutedVpls != nil {
		return t.RoutedVpls
	}
	return nil
}

// GetSpb returns the value of the Spb struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls. If the receiver or the field Spb is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetSpb() *NokiaConf_Configure_Groups_Group_Service_Vpls_Spb {
	if t != nil && t.Spb != nil {
		return t.Spb
	}
	return nil
}

// GetSpbmControlVpls returns the value of the SpbmControlVpls struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls. If the receiver or the field SpbmControlVpls is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetSpbmControlVpls() *NokiaConf_Configure_Groups_Group_Service_Vpls_SpbmControlVpls {
	if t != nil && t.SpbmControlVpls != nil {
		return t.SpbmControlVpls
	}
	return nil
}

// GetStp returns the value of the Stp struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls. If the receiver or the field Stp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetStp() *NokiaConf_Configure_Groups_Group_Service_Vpls_Stp {
	if t != nil && t.Stp != nil {
		return t.Stp
	}
	return nil
}

// GetVxlan returns the value of the Vxlan struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls. If the receiver or the field Vxlan is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetVxlan() *NokiaConf_Configure_Groups_Group_Service_Vpls_Vxlan {
	if t != nil && t.Vxlan != nil {
		return t.Vxlan
	}
	return nil
}

// GetWlanGw returns the value of the WlanGw struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls. If the receiver or the field WlanGw is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetWlanGw() *NokiaConf_Configure_Groups_Group_Service_Vpls_WlanGw {
	if t != nil && t.WlanGw != nil {
		return t.WlanGw
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetCustomer retrieves the value of the leaf Customer from the NokiaConf_Configure_Groups_Group_Service_Vpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Customer is set, it can
// safely use t.GetCustomer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Customer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetCustomer() string {
	if t == nil || t.Customer == nil {
		return ""
	}
	return *t.Customer
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Vpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEtree retrieves the value of the leaf Etree from the NokiaConf_Configure_Groups_Group_Service_Vpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Etree is set, it can
// safely use t.GetEtree() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Etree == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetEtree() bool {
	if t == nil || t.Etree == nil {
		return false
	}
	return *t.Etree
}

// GetIgnoreL2VpnMtuMismatch retrieves the value of the leaf IgnoreL2VpnMtuMismatch from the NokiaConf_Configure_Groups_Group_Service_Vpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreL2VpnMtuMismatch is set, it can
// safely use t.GetIgnoreL2VpnMtuMismatch() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreL2VpnMtuMismatch == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetIgnoreL2VpnMtuMismatch() bool {
	if t == nil || t.IgnoreL2VpnMtuMismatch == nil {
		return false
	}
	return *t.IgnoreL2VpnMtuMismatch
}

// GetMVpls retrieves the value of the leaf MVpls from the NokiaConf_Configure_Groups_Group_Service_Vpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MVpls is set, it can
// safely use t.GetMVpls() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MVpls == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetMVpls() bool {
	if t == nil || t.MVpls == nil {
		return false
	}
	return *t.MVpls
}

// GetMcastIpv6SnoopingScope retrieves the value of the leaf McastIpv6SnoopingScope from the NokiaConf_Configure_Groups_Group_Service_Vpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McastIpv6SnoopingScope is set, it can
// safely use t.GetMcastIpv6SnoopingScope() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McastIpv6SnoopingScope == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetMcastIpv6SnoopingScope() E_NokiaConf_Configure_Groups_Group_Service_Vpls_McastIpv6SnoopingScope {
	if t == nil || t.McastIpv6SnoopingScope == 0 {
		return NokiaConf_Configure_Groups_Group_Service_Vpls_McastIpv6SnoopingScope_mac_based
	}
	return t.McastIpv6SnoopingScope
}

// GetMulticastInfoPolicy retrieves the value of the leaf MulticastInfoPolicy from the NokiaConf_Configure_Groups_Group_Service_Vpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MulticastInfoPolicy is set, it can
// safely use t.GetMulticastInfoPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MulticastInfoPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetMulticastInfoPolicy() string {
	if t == nil || t.MulticastInfoPolicy == nil {
		return ""
	}
	return *t.MulticastInfoPolicy
}

// GetPbbType retrieves the value of the leaf PbbType from the NokiaConf_Configure_Groups_Group_Service_Vpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PbbType is set, it can
// safely use t.GetPbbType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PbbType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetPbbType() E_NokiaTypesServices_PbbType {
	if t == nil || t.PbbType == 0 {
		return 0
	}
	return t.PbbType
}

// GetServiceId retrieves the value of the leaf ServiceId from the NokiaConf_Configure_Groups_Group_Service_Vpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceId is set, it can
// safely use t.GetServiceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetServiceId() uint32 {
	if t == nil || t.ServiceId == nil {
		return 0
	}
	return *t.ServiceId
}

// GetServiceMtu retrieves the value of the leaf ServiceMtu from the NokiaConf_Configure_Groups_Group_Service_Vpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceMtu is set, it can
// safely use t.GetServiceMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceMtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetServiceMtu() int32 {
	if t == nil || t.ServiceMtu == nil {
		return 0
	}
	return *t.ServiceMtu
}

// GetServiceName retrieves the value of the leaf ServiceName from the NokiaConf_Configure_Groups_Group_Service_Vpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceName is set, it can
// safely use t.GetServiceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetServiceName() string {
	if t == nil || t.ServiceName == nil {
		return ""
	}
	return *t.ServiceName
}

// GetShcvPolicyIpv4 retrieves the value of the leaf ShcvPolicyIpv4 from the NokiaConf_Configure_Groups_Group_Service_Vpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ShcvPolicyIpv4 is set, it can
// safely use t.GetShcvPolicyIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ShcvPolicyIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetShcvPolicyIpv4() string {
	if t == nil || t.ShcvPolicyIpv4 == nil {
		return ""
	}
	return *t.ShcvPolicyIpv4
}

// GetTempFlooding retrieves the value of the leaf TempFlooding from the NokiaConf_Configure_Groups_Group_Service_Vpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TempFlooding is set, it can
// safely use t.GetTempFlooding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TempFlooding == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetTempFlooding() int32 {
	if t == nil || t.TempFlooding == nil {
		return 0
	}
	return *t.TempFlooding
}

// GetVpnId retrieves the value of the leaf VpnId from the NokiaConf_Configure_Groups_Group_Service_Vpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnId is set, it can
// safely use t.GetVpnId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) GetVpnId() uint32 {
	if t == nil || t.VpnId == nil {
		return 0
	}
	return *t.VpnId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Etree == nil {
		var v bool = false
		t.Etree = &v
	}
	if t.IgnoreL2VpnMtuMismatch == nil {
		var v bool = false
		t.IgnoreL2VpnMtuMismatch = &v
	}
	if t.MVpls == nil {
		var v bool = false
		t.MVpls = &v
	}
	if t.McastIpv6SnoopingScope == 0 {
		t.McastIpv6SnoopingScope = NokiaConf_Configure_Groups_Group_Service_Vpls_McastIpv6SnoopingScope_mac_based
	}
	t.BgpAd.PopulateDefaults()
	t.BgpEvpn.PopulateDefaults()
	t.BgpVpls.PopulateDefaults()
	t.EthCfm.PopulateDefaults()
	t.Fdb.PopulateDefaults()
	t.Gsmp.PopulateDefaults()
	t.IgmpHostTracking.PopulateDefaults()
	t.IgmpSnooping.PopulateDefaults()
	t.IsidPolicy.PopulateDefaults()
	t.LoadBalancing.PopulateDefaults()
	t.MacFlush.PopulateDefaults()
	t.MacProtect.PopulateDefaults()
	t.McrDefaultGtw.PopulateDefaults()
	t.Mfib.PopulateDefaults()
	t.MldSnooping.PopulateDefaults()
	t.Mrp.PopulateDefaults()
	t.Pbb.PopulateDefaults()
	t.PimSnooping.PopulateDefaults()
	t.ProviderTunnel.PopulateDefaults()
	t.ProxyArp.PopulateDefaults()
	t.ProxyNd.PopulateDefaults()
	t.RoutedVpls.PopulateDefaults()
	t.Spb.PopulateDefaults()
	t.SpbmControlVpls.PopulateDefaults()
	t.Stp.PopulateDefaults()
	t.Vxlan.PopulateDefaults()
	t.WlanGw.PopulateDefaults()
	for _, e := range t.Bgp {
		e.PopulateDefaults()
	}
	for _, e := range t.BgpMhSite {
		e.PopulateDefaults()
	}
	for _, e := range t.CaptureSap {
		e.PopulateDefaults()
	}
	for _, e := range t.Endpoint {
		e.PopulateDefaults()
	}
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
	for _, e := range t.MeshSdp {
		e.PopulateDefaults()
	}
	for _, e := range t.Sap {
		e.PopulateDefaults()
	}
	for _, e := range t.SplitHorizonGroup {
		e.PopulateDefaults()
	}
	for _, e := range t.SpokeSdp {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vpls struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ServiceName == nil {
		return nil, fmt.Errorf("nil value for key ServiceName")
	}

	return map[string]interface{}{
		"service-name": *t.ServiceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp represents the /nokia-conf/configure/groups/group/service/vpls/bgp YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp struct {
	AdvServiceMtu      *int32                                                                          `path:"adv-service-mtu" module:"nokia-conf"`
	BgpInstance        NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp_BgpInstance_Union             `path:"bgp-instance" module:"nokia-conf"`
	PwTemplateBinding  map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp_PwTemplateBinding `path:"pw-template-binding" module:"nokia-conf"`
	RouteDistinguisher NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp_RouteDistinguisher_Union      `path:"route-distinguisher" module:"nokia-conf"`
	RouteTarget        *NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp_RouteTarget                  `path:"route-target" module:"nokia-conf"`
	VsiExport          []string                                                                        `path:"vsi-export" module:"nokia-conf"`
	VsiImport          []string                                                                        `path:"vsi-import" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp) IsYANGGoStruct() {}

// NewPwTemplateBinding creates a new entry in the PwTemplateBinding list of the
// NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp) NewPwTemplateBinding(PwTemplateName string) (*NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp_PwTemplateBinding, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PwTemplateBinding == nil {
		t.PwTemplateBinding = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp_PwTemplateBinding)
	}

	key := PwTemplateName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PwTemplateBinding[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PwTemplateBinding", key)
	}

	t.PwTemplateBinding[key] = &NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp_PwTemplateBinding{
		PwTemplateName: &PwTemplateName,
	}

	return t.PwTemplateBinding[key], nil
}

// RenamePwTemplateBinding renames an entry in the list PwTemplateBinding within
// the NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp) RenamePwTemplateBinding(oldK, newK string) error {
	if _, ok := t.PwTemplateBinding[newK]; ok {
		return fmt.Errorf("key %v already exists in PwTemplateBinding", newK)
	}

	e, ok := t.PwTemplateBinding[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PwTemplateBinding", oldK)
	}
	e.PwTemplateName = &newK

	t.PwTemplateBinding[newK] = e
	delete(t.PwTemplateBinding, oldK)
	return nil
}

// GetOrCreatePwTemplateBinding retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp) GetOrCreatePwTemplateBinding(PwTemplateName string) *NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp_PwTemplateBinding {

	key := PwTemplateName

	if v, ok := t.PwTemplateBinding[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPwTemplateBinding(PwTemplateName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePwTemplateBinding got unexpected error: %v", err))
	}
	return v
}

// GetPwTemplateBinding retrieves the value with the specified key from
// the PwTemplateBinding map field of NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp) GetPwTemplateBinding(PwTemplateName string) *NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp_PwTemplateBinding {

	if t == nil {
		return nil
	}

	key := PwTemplateName

	if lm, ok := t.PwTemplateBinding[key]; ok {
		return lm
	}
	return nil
}

// DeletePwTemplateBinding deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp) DeletePwTemplateBinding(PwTemplateName string) {
	key := PwTemplateName

	delete(t.PwTemplateBinding, key)
}

// AppendPwTemplateBinding appends the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp_PwTemplateBinding struct to the
// list PwTemplateBinding of NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp_PwTemplateBinding already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp) AppendPwTemplateBinding(v *NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp_PwTemplateBinding) error {
	if v.PwTemplateName == nil {
		return fmt.Errorf("invalid nil key received for PwTemplateName")
	}

	key := *v.PwTemplateName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PwTemplateBinding == nil {
		t.PwTemplateBinding = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp_PwTemplateBinding)
	}

	if _, ok := t.PwTemplateBinding[key]; ok {
		return fmt.Errorf("duplicate key for list PwTemplateBinding %v", key)
	}

	t.PwTemplateBinding[key] = v
	return nil
}

// GetOrCreateRouteTarget retrieves the value of the RouteTarget field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp) GetOrCreateRouteTarget() *NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp_RouteTarget {
	if t.RouteTarget != nil {
		return t.RouteTarget
	}
	t.RouteTarget = &NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp_RouteTarget{}
	return t.RouteTarget
}

// GetRouteTarget returns the value of the RouteTarget struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp. If the receiver or the field RouteTarget is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp) GetRouteTarget() *NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp_RouteTarget {
	if t != nil && t.RouteTarget != nil {
		return t.RouteTarget
	}
	return nil
}

// GetAdvServiceMtu retrieves the value of the leaf AdvServiceMtu from the NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvServiceMtu is set, it can
// safely use t.GetAdvServiceMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvServiceMtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp) GetAdvServiceMtu() int32 {
	if t == nil || t.AdvServiceMtu == nil {
		return 0
	}
	return *t.AdvServiceMtu
}

// GetBgpInstance retrieves the value of the leaf BgpInstance from the NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BgpInstance is set, it can
// safely use t.GetBgpInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BgpInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp) GetBgpInstance() NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp_BgpInstance_Union {
	if t == nil || t.BgpInstance == nil {
		return nil
	}
	return t.BgpInstance
}

// GetRouteDistinguisher retrieves the value of the leaf RouteDistinguisher from the NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteDistinguisher is set, it can
// safely use t.GetRouteDistinguisher() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteDistinguisher == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp) GetRouteDistinguisher() NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp_RouteDistinguisher_Union {
	if t == nil || t.RouteDistinguisher == nil {
		return nil
	}
	return t.RouteDistinguisher
}

// GetVsiExport retrieves the value of the leaf VsiExport from the NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VsiExport is set, it can
// safely use t.GetVsiExport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VsiExport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp) GetVsiExport() []string {
	if t == nil || t.VsiExport == nil {
		return nil
	}
	return t.VsiExport
}

// GetVsiImport retrieves the value of the leaf VsiImport from the NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VsiImport is set, it can
// safely use t.GetVsiImport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VsiImport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp) GetVsiImport() []string {
	if t == nil || t.VsiImport == nil {
		return nil
	}
	return t.VsiImport
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.RouteTarget.PopulateDefaults()
	for _, e := range t.PwTemplateBinding {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"bgp-instance": t.BgpInstance,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_BgpAd represents the /nokia-conf/configure/groups/group/service/vpls/bgp-ad YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_BgpAd struct {
	AdminState  E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	VplsId      *string                     `path:"vpls-id" module:"nokia-conf"`
	VsiIdPrefix *string                     `path:"vsi-id-prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_BgpAd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_BgpAd) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpAd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpAd) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetVplsId retrieves the value of the leaf VplsId from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpAd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VplsId is set, it can
// safely use t.GetVplsId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VplsId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpAd) GetVplsId() string {
	if t == nil || t.VplsId == nil {
		return ""
	}
	return *t.VplsId
}

// GetVsiIdPrefix retrieves the value of the leaf VsiIdPrefix from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpAd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VsiIdPrefix is set, it can
// safely use t.GetVsiIdPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VsiIdPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpAd) GetVsiIdPrefix() string {
	if t == nil || t.VsiIdPrefix == nil {
		return ""
	}
	return *t.VsiIdPrefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpAd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpAd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpAd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_BgpAd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpAd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpAd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_BgpAd.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_BgpAd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn represents the /nokia-conf/configure/groups/group/service/vpls/bgp-evpn YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn struct {
	AcceptIvplsEvpnFlush *bool                                                                                                                                          `path:"accept-ivpls-evpn-flush" module:"nokia-conf"`
	Evi                  *uint32                                                                                                                                        `path:"evi" module:"nokia-conf"`
	InclMcastOrigIp      *string                                                                                                                                        `path:"incl-mcast-orig-ip" module:"nokia-conf"`
	IsidRouteTarget      *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget                                                                         `path:"isid-route-target" module:"nokia-conf"`
	MacDuplication       *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_MacDuplication                                                                          `path:"mac-duplication" module:"nokia-conf"`
	Mpls                 map[NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_BgpInstance_Union]*NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls   `path:"mpls" module:"nokia-conf"`
	Routes               *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes                                                                                  `path:"routes" module:"nokia-conf"`
	Vxlan                map[NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan_BgpInstance_Union]*NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan `path:"vxlan" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn) IsYANGGoStruct() {}

// NewMpls creates a new entry in the Mpls list of the
// NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn) NewMpls(BgpInstance NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_BgpInstance_Union) (*NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mpls == nil {
		t.Mpls = make(map[NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_BgpInstance_Union]*NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls)
	}

	key := BgpInstance

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mpls[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mpls", key)
	}

	t.Mpls[key] = &NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls{
		BgpInstance: BgpInstance,
	}

	return t.Mpls[key], nil
}

// RenameMpls renames an entry in the list Mpls within
// the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn) RenameMpls(oldK, newK NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_BgpInstance_Union) error {
	if _, ok := t.Mpls[newK]; ok {
		return fmt.Errorf("key %v already exists in Mpls", newK)
	}

	e, ok := t.Mpls[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mpls", oldK)
	}
	e.BgpInstance = newK

	t.Mpls[newK] = e
	delete(t.Mpls, oldK)
	return nil
}

// GetOrCreateMpls retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn) GetOrCreateMpls(BgpInstance NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_BgpInstance_Union) *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls {

	key := BgpInstance

	if v, ok := t.Mpls[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMpls(BgpInstance)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMpls got unexpected error: %v", err))
	}
	return v
}

// GetMpls retrieves the value with the specified key from
// the Mpls map field of NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn) GetMpls(BgpInstance NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_BgpInstance_Union) *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls {

	if t == nil {
		return nil
	}

	key := BgpInstance

	if lm, ok := t.Mpls[key]; ok {
		return lm
	}
	return nil
}

// DeleteMpls deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn) DeleteMpls(BgpInstance NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_BgpInstance_Union) {
	key := BgpInstance

	delete(t.Mpls, key)
}

// AppendMpls appends the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls struct to the
// list Mpls of NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn) AppendMpls(v *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls) error {
	key := v.BgpInstance

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mpls == nil {
		t.Mpls = make(map[NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_BgpInstance_Union]*NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls)
	}

	if _, ok := t.Mpls[key]; ok {
		return fmt.Errorf("duplicate key for list Mpls %v", key)
	}

	t.Mpls[key] = v
	return nil
}

// NewVxlan creates a new entry in the Vxlan list of the
// NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn) NewVxlan(BgpInstance NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan_BgpInstance_Union) (*NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vxlan == nil {
		t.Vxlan = make(map[NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan_BgpInstance_Union]*NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan)
	}

	key := BgpInstance

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Vxlan[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Vxlan", key)
	}

	t.Vxlan[key] = &NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan{
		BgpInstance: BgpInstance,
	}

	return t.Vxlan[key], nil
}

// RenameVxlan renames an entry in the list Vxlan within
// the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn) RenameVxlan(oldK, newK NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan_BgpInstance_Union) error {
	if _, ok := t.Vxlan[newK]; ok {
		return fmt.Errorf("key %v already exists in Vxlan", newK)
	}

	e, ok := t.Vxlan[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Vxlan", oldK)
	}
	e.BgpInstance = newK

	t.Vxlan[newK] = e
	delete(t.Vxlan, oldK)
	return nil
}

// GetOrCreateVxlan retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn) GetOrCreateVxlan(BgpInstance NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan_BgpInstance_Union) *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan {

	key := BgpInstance

	if v, ok := t.Vxlan[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVxlan(BgpInstance)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVxlan got unexpected error: %v", err))
	}
	return v
}

// GetVxlan retrieves the value with the specified key from
// the Vxlan map field of NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn) GetVxlan(BgpInstance NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan_BgpInstance_Union) *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan {

	if t == nil {
		return nil
	}

	key := BgpInstance

	if lm, ok := t.Vxlan[key]; ok {
		return lm
	}
	return nil
}

// DeleteVxlan deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn) DeleteVxlan(BgpInstance NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan_BgpInstance_Union) {
	key := BgpInstance

	delete(t.Vxlan, key)
}

// AppendVxlan appends the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan struct to the
// list Vxlan of NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn) AppendVxlan(v *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan) error {
	key := v.BgpInstance

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vxlan == nil {
		t.Vxlan = make(map[NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan_BgpInstance_Union]*NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan)
	}

	if _, ok := t.Vxlan[key]; ok {
		return fmt.Errorf("duplicate key for list Vxlan %v", key)
	}

	t.Vxlan[key] = v
	return nil
}

// GetOrCreateIsidRouteTarget retrieves the value of the IsidRouteTarget field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn) GetOrCreateIsidRouteTarget() *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget {
	if t.IsidRouteTarget != nil {
		return t.IsidRouteTarget
	}
	t.IsidRouteTarget = &NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget{}
	return t.IsidRouteTarget
}

// GetOrCreateMacDuplication retrieves the value of the MacDuplication field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn) GetOrCreateMacDuplication() *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_MacDuplication {
	if t.MacDuplication != nil {
		return t.MacDuplication
	}
	t.MacDuplication = &NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_MacDuplication{}
	return t.MacDuplication
}

// GetOrCreateRoutes retrieves the value of the Routes field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn) GetOrCreateRoutes() *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes {
	if t.Routes != nil {
		return t.Routes
	}
	t.Routes = &NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes{}
	return t.Routes
}

// GetIsidRouteTarget returns the value of the IsidRouteTarget struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn. If the receiver or the field IsidRouteTarget is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn) GetIsidRouteTarget() *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget {
	if t != nil && t.IsidRouteTarget != nil {
		return t.IsidRouteTarget
	}
	return nil
}

// GetMacDuplication returns the value of the MacDuplication struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn. If the receiver or the field MacDuplication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn) GetMacDuplication() *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_MacDuplication {
	if t != nil && t.MacDuplication != nil {
		return t.MacDuplication
	}
	return nil
}

// GetRoutes returns the value of the Routes struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn. If the receiver or the field Routes is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn) GetRoutes() *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes {
	if t != nil && t.Routes != nil {
		return t.Routes
	}
	return nil
}

// GetAcceptIvplsEvpnFlush retrieves the value of the leaf AcceptIvplsEvpnFlush from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AcceptIvplsEvpnFlush is set, it can
// safely use t.GetAcceptIvplsEvpnFlush() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AcceptIvplsEvpnFlush == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn) GetAcceptIvplsEvpnFlush() bool {
	if t == nil || t.AcceptIvplsEvpnFlush == nil {
		return false
	}
	return *t.AcceptIvplsEvpnFlush
}

// GetEvi retrieves the value of the leaf Evi from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Evi is set, it can
// safely use t.GetEvi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Evi == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn) GetEvi() uint32 {
	if t == nil || t.Evi == nil {
		return 0
	}
	return *t.Evi
}

// GetInclMcastOrigIp retrieves the value of the leaf InclMcastOrigIp from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InclMcastOrigIp is set, it can
// safely use t.GetInclMcastOrigIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InclMcastOrigIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn) GetInclMcastOrigIp() string {
	if t == nil || t.InclMcastOrigIp == nil {
		return ""
	}
	return *t.InclMcastOrigIp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AcceptIvplsEvpnFlush == nil {
		var v bool = false
		t.AcceptIvplsEvpnFlush = &v
	}
	t.IsidRouteTarget.PopulateDefaults()
	t.MacDuplication.PopulateDefaults()
	t.Routes.PopulateDefaults()
	for _, e := range t.Mpls {
		e.PopulateDefaults()
	}
	for _, e := range t.Vxlan {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget represents the /nokia-conf/configure/groups/group/service/vpls/bgp-evpn/isid-route-target YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget struct {
	Range map[NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget_Range_Start_Union]*NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget_Range `path:"range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget) IsYANGGoStruct() {}

// NewRange creates a new entry in the Range list of the
// NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget) NewRange(Start NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget_Range_Start_Union) (*NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget_Range, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Range == nil {
		t.Range = make(map[NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget_Range_Start_Union]*NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget_Range)
	}

	key := Start

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Range[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Range", key)
	}

	t.Range[key] = &NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget_Range{
		Start: Start,
	}

	return t.Range[key], nil
}

// RenameRange renames an entry in the list Range within
// the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget) RenameRange(oldK, newK NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget_Range_Start_Union) error {
	if _, ok := t.Range[newK]; ok {
		return fmt.Errorf("key %v already exists in Range", newK)
	}

	e, ok := t.Range[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Range", oldK)
	}
	e.Start = newK

	t.Range[newK] = e
	delete(t.Range, oldK)
	return nil
}

// GetOrCreateRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget) GetOrCreateRange(Start NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget_Range_Start_Union) *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget_Range {

	key := Start

	if v, ok := t.Range[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRange(Start)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRange got unexpected error: %v", err))
	}
	return v
}

// GetRange retrieves the value with the specified key from
// the Range map field of NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget) GetRange(Start NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget_Range_Start_Union) *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget_Range {

	if t == nil {
		return nil
	}

	key := Start

	if lm, ok := t.Range[key]; ok {
		return lm
	}
	return nil
}

// DeleteRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget) DeleteRange(Start NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget_Range_Start_Union) {
	key := Start

	delete(t.Range, key)
}

// AppendRange appends the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget_Range struct to the
// list Range of NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget_Range already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget) AppendRange(v *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget_Range) error {
	key := v.Start

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Range == nil {
		t.Range = make(map[NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget_Range_Start_Union]*NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget_Range)
	}

	if _, ok := t.Range[key]; ok {
		return fmt.Errorf("duplicate key for list Range %v", key)
	}

	t.Range[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Range {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget_Range represents the /nokia-conf/configure/groups/group/service/vpls/bgp-evpn/isid-route-target/range YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget_Range struct {
	End         *int32                                                                                  `path:"end" module:"nokia-conf"`
	RouteTarget *string                                                                                 `path:"route-target" module:"nokia-conf"`
	Start       NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget_Range_Start_Union `path:"start" module:"nokia-conf"`
	Type        E_NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget_Range_Type      `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetRouteTarget retrieves the value of the leaf RouteTarget from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteTarget is set, it can
// safely use t.GetRouteTarget() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteTarget == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget_Range) GetRouteTarget() string {
	if t == nil || t.RouteTarget == nil {
		return ""
	}
	return *t.RouteTarget
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget_Range) GetStart() NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget_Range_Start_Union {
	if t == nil || t.Start == nil {
		return nil
	}
	return t.Start
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget_Range) GetType() E_NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget_Range_Type {
	if t == nil || t.Type == 0 {
		return NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget_Range_Type_auto
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Type == 0 {
		t.Type = NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget_Range_Type_auto
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget_Range struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget_Range) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"start": t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget_Range.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_IsidRouteTarget_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_MacDuplication represents the /nokia-conf/configure/groups/group/service/vpls/bgp-evpn/mac-duplication YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_MacDuplication struct {
	Blackhole *bool                                                                            `path:"blackhole" module:"nokia-conf"`
	Detect    *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_MacDuplication_Detect     `path:"detect" module:"nokia-conf"`
	Retry     NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_MacDuplication_Retry_Union `path:"retry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_MacDuplication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_MacDuplication) IsYANGGoStruct() {}

// GetOrCreateDetect retrieves the value of the Detect field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_MacDuplication) GetOrCreateDetect() *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_MacDuplication_Detect {
	if t.Detect != nil {
		return t.Detect
	}
	t.Detect = &NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_MacDuplication_Detect{}
	return t.Detect
}

// GetDetect returns the value of the Detect struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_MacDuplication. If the receiver or the field Detect is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_MacDuplication) GetDetect() *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_MacDuplication_Detect {
	if t != nil && t.Detect != nil {
		return t.Detect
	}
	return nil
}

// GetBlackhole retrieves the value of the leaf Blackhole from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_MacDuplication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Blackhole is set, it can
// safely use t.GetBlackhole() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Blackhole == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_MacDuplication) GetBlackhole() bool {
	if t == nil || t.Blackhole == nil {
		return false
	}
	return *t.Blackhole
}

// GetRetry retrieves the value of the leaf Retry from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_MacDuplication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Retry is set, it can
// safely use t.GetRetry() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Retry == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_MacDuplication) GetRetry() NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_MacDuplication_Retry_Union {
	if t == nil || t.Retry == nil {
		return UnionUint32(9)
	}
	return t.Retry
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_MacDuplication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_MacDuplication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Blackhole == nil {
		var v bool = false
		t.Blackhole = &v
	}
	if t.Retry == nil {
		t.Retry = UnionUint32(9)
	}
	t.Detect.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_MacDuplication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_MacDuplication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_MacDuplication) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_MacDuplication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_MacDuplication.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_MacDuplication) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_MacDuplication_Detect represents the /nokia-conf/configure/groups/group/service/vpls/bgp-evpn/mac-duplication/detect YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_MacDuplication_Detect struct {
	NumMoves *uint32 `path:"num-moves" module:"nokia-conf"`
	Window   *uint32 `path:"window" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_MacDuplication_Detect implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_MacDuplication_Detect) IsYANGGoStruct() {
}

// GetNumMoves retrieves the value of the leaf NumMoves from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_MacDuplication_Detect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NumMoves is set, it can
// safely use t.GetNumMoves() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NumMoves == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_MacDuplication_Detect) GetNumMoves() uint32 {
	if t == nil || t.NumMoves == nil {
		return 5
	}
	return *t.NumMoves
}

// GetWindow retrieves the value of the leaf Window from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_MacDuplication_Detect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Window is set, it can
// safely use t.GetWindow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Window == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_MacDuplication_Detect) GetWindow() uint32 {
	if t == nil || t.Window == nil {
		return 3
	}
	return *t.Window
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_MacDuplication_Detect
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_MacDuplication_Detect) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.NumMoves == nil {
		var v uint32 = 5
		t.NumMoves = &v
	}
	if t.Window == nil {
		var v uint32 = 3
		t.Window = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_MacDuplication_Detect) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_MacDuplication_Detect"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_MacDuplication_Detect) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_MacDuplication_Detect) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_MacDuplication_Detect.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_MacDuplication_Detect) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls represents the /nokia-conf/configure/groups/group/service/vpls/bgp-evpn/mpls YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls struct {
	AdminState                 E_NokiaTypesSros_AdminState                                                  `path:"admin-state" module:"nokia-conf"`
	AutoBindTunnel             *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel   `path:"auto-bind-tunnel" module:"nokia-conf"`
	BgpInstance                NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_BgpInstance_Union `path:"bgp-instance" module:"nokia-conf"`
	ControlWord                *bool                                                                        `path:"control-word" module:"nokia-conf"`
	DefaultRouteTag            *string                                                                      `path:"default-route-tag" module:"nokia-conf"`
	DynamicEgressLabelLimit    *bool                                                                        `path:"dynamic-egress-label-limit" module:"nokia-conf"`
	Ecmp                       *int32                                                                       `path:"ecmp" module:"nokia-conf"`
	EntropyLabel               *bool                                                                        `path:"entropy-label" module:"nokia-conf"`
	EviThreeByteAutoRt         *bool                                                                        `path:"evi-three-byte-auto-rt" module:"nokia-conf"`
	Fdb                        *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_Fdb              `path:"fdb" module:"nokia-conf"`
	ForceVcForwarding          E_NokiaTypesServices_BgpEvpnForceVcForwarding                                `path:"force-vc-forwarding" module:"nokia-conf"`
	IngressReplicationBumLabel *bool                                                                        `path:"ingress-replication-bum-label" module:"nokia-conf"`
	MhMode                     E_NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_MhMode          `path:"mh-mode" module:"nokia-conf"`
	OperGroup                  *string                                                                      `path:"oper-group" module:"nokia-conf"`
	RouteNextHop               *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_RouteNextHop     `path:"route-next-hop" module:"nokia-conf"`
	SendTunnelEncap            *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_SendTunnelEncap  `path:"send-tunnel-encap" module:"nokia-conf"`
	SplitHorizonGroup          *string                                                                      `path:"split-horizon-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls) IsYANGGoStruct() {}

// GetOrCreateAutoBindTunnel retrieves the value of the AutoBindTunnel field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls) GetOrCreateAutoBindTunnel() *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel {
	if t.AutoBindTunnel != nil {
		return t.AutoBindTunnel
	}
	t.AutoBindTunnel = &NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel{}
	return t.AutoBindTunnel
}

// GetOrCreateFdb retrieves the value of the Fdb field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls) GetOrCreateFdb() *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_Fdb {
	if t.Fdb != nil {
		return t.Fdb
	}
	t.Fdb = &NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_Fdb{}
	return t.Fdb
}

// GetOrCreateRouteNextHop retrieves the value of the RouteNextHop field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls) GetOrCreateRouteNextHop() *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_RouteNextHop {
	if t.RouteNextHop != nil {
		return t.RouteNextHop
	}
	t.RouteNextHop = &NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_RouteNextHop{}
	return t.RouteNextHop
}

// GetOrCreateSendTunnelEncap retrieves the value of the SendTunnelEncap field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls) GetOrCreateSendTunnelEncap() *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_SendTunnelEncap {
	if t.SendTunnelEncap != nil {
		return t.SendTunnelEncap
	}
	t.SendTunnelEncap = &NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_SendTunnelEncap{}
	return t.SendTunnelEncap
}

// GetAutoBindTunnel returns the value of the AutoBindTunnel struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls. If the receiver or the field AutoBindTunnel is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls) GetAutoBindTunnel() *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel {
	if t != nil && t.AutoBindTunnel != nil {
		return t.AutoBindTunnel
	}
	return nil
}

// GetFdb returns the value of the Fdb struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls. If the receiver or the field Fdb is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls) GetFdb() *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_Fdb {
	if t != nil && t.Fdb != nil {
		return t.Fdb
	}
	return nil
}

// GetRouteNextHop returns the value of the RouteNextHop struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls. If the receiver or the field RouteNextHop is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls) GetRouteNextHop() *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_RouteNextHop {
	if t != nil && t.RouteNextHop != nil {
		return t.RouteNextHop
	}
	return nil
}

// GetSendTunnelEncap returns the value of the SendTunnelEncap struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls. If the receiver or the field SendTunnelEncap is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls) GetSendTunnelEncap() *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_SendTunnelEncap {
	if t != nil && t.SendTunnelEncap != nil {
		return t.SendTunnelEncap
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetBgpInstance retrieves the value of the leaf BgpInstance from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BgpInstance is set, it can
// safely use t.GetBgpInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BgpInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls) GetBgpInstance() NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_BgpInstance_Union {
	if t == nil || t.BgpInstance == nil {
		return nil
	}
	return t.BgpInstance
}

// GetControlWord retrieves the value of the leaf ControlWord from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ControlWord is set, it can
// safely use t.GetControlWord() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ControlWord == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls) GetControlWord() bool {
	if t == nil || t.ControlWord == nil {
		return false
	}
	return *t.ControlWord
}

// GetDefaultRouteTag retrieves the value of the leaf DefaultRouteTag from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultRouteTag is set, it can
// safely use t.GetDefaultRouteTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultRouteTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls) GetDefaultRouteTag() string {
	if t == nil || t.DefaultRouteTag == nil {
		return ""
	}
	return *t.DefaultRouteTag
}

// GetDynamicEgressLabelLimit retrieves the value of the leaf DynamicEgressLabelLimit from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DynamicEgressLabelLimit is set, it can
// safely use t.GetDynamicEgressLabelLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DynamicEgressLabelLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls) GetDynamicEgressLabelLimit() bool {
	if t == nil || t.DynamicEgressLabelLimit == nil {
		return false
	}
	return *t.DynamicEgressLabelLimit
}

// GetEcmp retrieves the value of the leaf Ecmp from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ecmp is set, it can
// safely use t.GetEcmp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ecmp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls) GetEcmp() int32 {
	if t == nil || t.Ecmp == nil {
		return 1
	}
	return *t.Ecmp
}

// GetEntropyLabel retrieves the value of the leaf EntropyLabel from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntropyLabel is set, it can
// safely use t.GetEntropyLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntropyLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls) GetEntropyLabel() bool {
	if t == nil || t.EntropyLabel == nil {
		return false
	}
	return *t.EntropyLabel
}

// GetEviThreeByteAutoRt retrieves the value of the leaf EviThreeByteAutoRt from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EviThreeByteAutoRt is set, it can
// safely use t.GetEviThreeByteAutoRt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EviThreeByteAutoRt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls) GetEviThreeByteAutoRt() bool {
	if t == nil || t.EviThreeByteAutoRt == nil {
		return false
	}
	return *t.EviThreeByteAutoRt
}

// GetForceVcForwarding retrieves the value of the leaf ForceVcForwarding from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForceVcForwarding is set, it can
// safely use t.GetForceVcForwarding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForceVcForwarding == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls) GetForceVcForwarding() E_NokiaTypesServices_BgpEvpnForceVcForwarding {
	if t == nil || t.ForceVcForwarding == 0 {
		return 0
	}
	return t.ForceVcForwarding
}

// GetIngressReplicationBumLabel retrieves the value of the leaf IngressReplicationBumLabel from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IngressReplicationBumLabel is set, it can
// safely use t.GetIngressReplicationBumLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IngressReplicationBumLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls) GetIngressReplicationBumLabel() bool {
	if t == nil || t.IngressReplicationBumLabel == nil {
		return false
	}
	return *t.IngressReplicationBumLabel
}

// GetMhMode retrieves the value of the leaf MhMode from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MhMode is set, it can
// safely use t.GetMhMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MhMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls) GetMhMode() E_NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_MhMode {
	if t == nil || t.MhMode == 0 {
		return NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_MhMode_network
	}
	return t.MhMode
}

// GetOperGroup retrieves the value of the leaf OperGroup from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OperGroup is set, it can
// safely use t.GetOperGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OperGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls) GetOperGroup() string {
	if t == nil || t.OperGroup == nil {
		return ""
	}
	return *t.OperGroup
}

// GetSplitHorizonGroup retrieves the value of the leaf SplitHorizonGroup from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SplitHorizonGroup is set, it can
// safely use t.GetSplitHorizonGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SplitHorizonGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls) GetSplitHorizonGroup() string {
	if t == nil || t.SplitHorizonGroup == nil {
		return ""
	}
	return *t.SplitHorizonGroup
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.ControlWord == nil {
		var v bool = false
		t.ControlWord = &v
	}
	if t.DynamicEgressLabelLimit == nil {
		var v bool = false
		t.DynamicEgressLabelLimit = &v
	}
	if t.Ecmp == nil {
		var v int32 = 1
		t.Ecmp = &v
	}
	if t.EntropyLabel == nil {
		var v bool = false
		t.EntropyLabel = &v
	}
	if t.EviThreeByteAutoRt == nil {
		var v bool = false
		t.EviThreeByteAutoRt = &v
	}
	if t.IngressReplicationBumLabel == nil {
		var v bool = false
		t.IngressReplicationBumLabel = &v
	}
	if t.MhMode == 0 {
		t.MhMode = NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_MhMode_network
	}
	t.AutoBindTunnel.PopulateDefaults()
	t.Fdb.PopulateDefaults()
	t.RouteNextHop.PopulateDefaults()
	t.SendTunnelEncap.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"bgp-instance": t.BgpInstance,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel represents the /nokia-conf/configure/groups/group/service/vpls/bgp-evpn/mpls/auto-bind-tunnel YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel struct {
	AllowFlexAlgoFallback      *bool                                                                                       `path:"allow-flex-algo-fallback" module:"nokia-conf"`
	Ecmp                       *uint32                                                                                     `path:"ecmp" module:"nokia-conf"`
	EnforceStrictTunnelTagging *bool                                                                                       `path:"enforce-strict-tunnel-tagging" module:"nokia-conf"`
	Resolution                 E_NokiaTypesServices_ResolveStatus                                                          `path:"resolution" module:"nokia-conf"`
	ResolutionFilter           *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter `path:"resolution-filter" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel) IsYANGGoStruct() {}

// GetOrCreateResolutionFilter retrieves the value of the ResolutionFilter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel) GetOrCreateResolutionFilter() *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter {
	if t.ResolutionFilter != nil {
		return t.ResolutionFilter
	}
	t.ResolutionFilter = &NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter{}
	return t.ResolutionFilter
}

// GetResolutionFilter returns the value of the ResolutionFilter struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel. If the receiver or the field ResolutionFilter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel) GetResolutionFilter() *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter {
	if t != nil && t.ResolutionFilter != nil {
		return t.ResolutionFilter
	}
	return nil
}

// GetAllowFlexAlgoFallback retrieves the value of the leaf AllowFlexAlgoFallback from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowFlexAlgoFallback is set, it can
// safely use t.GetAllowFlexAlgoFallback() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowFlexAlgoFallback == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel) GetAllowFlexAlgoFallback() bool {
	if t == nil || t.AllowFlexAlgoFallback == nil {
		return false
	}
	return *t.AllowFlexAlgoFallback
}

// GetEcmp retrieves the value of the leaf Ecmp from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ecmp is set, it can
// safely use t.GetEcmp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ecmp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel) GetEcmp() uint32 {
	if t == nil || t.Ecmp == nil {
		return 1
	}
	return *t.Ecmp
}

// GetEnforceStrictTunnelTagging retrieves the value of the leaf EnforceStrictTunnelTagging from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnforceStrictTunnelTagging is set, it can
// safely use t.GetEnforceStrictTunnelTagging() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnforceStrictTunnelTagging == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel) GetEnforceStrictTunnelTagging() bool {
	if t == nil || t.EnforceStrictTunnelTagging == nil {
		return false
	}
	return *t.EnforceStrictTunnelTagging
}

// GetResolution retrieves the value of the leaf Resolution from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Resolution is set, it can
// safely use t.GetResolution() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Resolution == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel) GetResolution() E_NokiaTypesServices_ResolveStatus {
	if t == nil || t.Resolution == 0 {
		return NokiaTypesServices_ResolveStatus_none
	}
	return t.Resolution
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowFlexAlgoFallback == nil {
		var v bool = false
		t.AllowFlexAlgoFallback = &v
	}
	if t.Ecmp == nil {
		var v uint32 = 1
		t.Ecmp = &v
	}
	if t.EnforceStrictTunnelTagging == nil {
		var v bool = false
		t.EnforceStrictTunnelTagging = &v
	}
	if t.Resolution == 0 {
		t.Resolution = NokiaTypesServices_ResolveStatus_none
	}
	t.ResolutionFilter.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter represents the /nokia-conf/configure/groups/group/service/vpls/bgp-evpn/mpls/auto-bind-tunnel/resolution-filter YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter struct {
	Bgp           *bool `path:"bgp" module:"nokia-conf"`
	Ldp           *bool `path:"ldp" module:"nokia-conf"`
	MplsFwdPolicy *bool `path:"mpls-fwd-policy" module:"nokia-conf"`
	RibApi        *bool `path:"rib-api" module:"nokia-conf"`
	Rsvp          *bool `path:"rsvp" module:"nokia-conf"`
	SrIsis        *bool `path:"sr-isis" module:"nokia-conf"`
	SrOspf        *bool `path:"sr-ospf" module:"nokia-conf"`
	SrOspf3       *bool `path:"sr-ospf3" module:"nokia-conf"`
	SrPolicy      *bool `path:"sr-policy" module:"nokia-conf"`
	SrTe          *bool `path:"sr-te" module:"nokia-conf"`
	Udp           *bool `path:"udp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) IsYANGGoStruct() {
}

// GetBgp retrieves the value of the leaf Bgp from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bgp is set, it can
// safely use t.GetBgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bgp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) GetBgp() bool {
	if t == nil || t.Bgp == nil {
		return false
	}
	return *t.Bgp
}

// GetLdp retrieves the value of the leaf Ldp from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ldp is set, it can
// safely use t.GetLdp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ldp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) GetLdp() bool {
	if t == nil || t.Ldp == nil {
		return false
	}
	return *t.Ldp
}

// GetMplsFwdPolicy retrieves the value of the leaf MplsFwdPolicy from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MplsFwdPolicy is set, it can
// safely use t.GetMplsFwdPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MplsFwdPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) GetMplsFwdPolicy() bool {
	if t == nil || t.MplsFwdPolicy == nil {
		return false
	}
	return *t.MplsFwdPolicy
}

// GetRibApi retrieves the value of the leaf RibApi from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RibApi is set, it can
// safely use t.GetRibApi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RibApi == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) GetRibApi() bool {
	if t == nil || t.RibApi == nil {
		return false
	}
	return *t.RibApi
}

// GetRsvp retrieves the value of the leaf Rsvp from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rsvp is set, it can
// safely use t.GetRsvp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rsvp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) GetRsvp() bool {
	if t == nil || t.Rsvp == nil {
		return false
	}
	return *t.Rsvp
}

// GetSrIsis retrieves the value of the leaf SrIsis from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrIsis is set, it can
// safely use t.GetSrIsis() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrIsis == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) GetSrIsis() bool {
	if t == nil || t.SrIsis == nil {
		return false
	}
	return *t.SrIsis
}

// GetSrOspf retrieves the value of the leaf SrOspf from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrOspf is set, it can
// safely use t.GetSrOspf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrOspf == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) GetSrOspf() bool {
	if t == nil || t.SrOspf == nil {
		return false
	}
	return *t.SrOspf
}

// GetSrOspf3 retrieves the value of the leaf SrOspf3 from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrOspf3 is set, it can
// safely use t.GetSrOspf3() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrOspf3 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) GetSrOspf3() bool {
	if t == nil || t.SrOspf3 == nil {
		return false
	}
	return *t.SrOspf3
}

// GetSrPolicy retrieves the value of the leaf SrPolicy from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrPolicy is set, it can
// safely use t.GetSrPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) GetSrPolicy() bool {
	if t == nil || t.SrPolicy == nil {
		return false
	}
	return *t.SrPolicy
}

// GetSrTe retrieves the value of the leaf SrTe from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrTe is set, it can
// safely use t.GetSrTe() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrTe == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) GetSrTe() bool {
	if t == nil || t.SrTe == nil {
		return false
	}
	return *t.SrTe
}

// GetUdp retrieves the value of the leaf Udp from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Udp is set, it can
// safely use t.GetUdp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Udp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) GetUdp() bool {
	if t == nil || t.Udp == nil {
		return false
	}
	return *t.Udp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Bgp == nil {
		var v bool = false
		t.Bgp = &v
	}
	if t.Ldp == nil {
		var v bool = false
		t.Ldp = &v
	}
	if t.MplsFwdPolicy == nil {
		var v bool = false
		t.MplsFwdPolicy = &v
	}
	if t.RibApi == nil {
		var v bool = false
		t.RibApi = &v
	}
	if t.Rsvp == nil {
		var v bool = false
		t.Rsvp = &v
	}
	if t.SrIsis == nil {
		var v bool = false
		t.SrIsis = &v
	}
	if t.SrOspf == nil {
		var v bool = false
		t.SrOspf = &v
	}
	if t.SrOspf3 == nil {
		var v bool = false
		t.SrOspf3 = &v
	}
	if t.SrPolicy == nil {
		var v bool = false
		t.SrPolicy = &v
	}
	if t.SrTe == nil {
		var v bool = false
		t.SrTe = &v
	}
	if t.Udp == nil {
		var v bool = false
		t.Udp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_Fdb represents the /nokia-conf/configure/groups/group/service/vpls/bgp-evpn/mpls/fdb YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_Fdb struct {
	ProtectedSrcMacViolationAction E_NokiaTypesServices_ProtectedSrcMacViolationDfAction `path:"protected-src-mac-violation-action" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_Fdb implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_Fdb) IsYANGGoStruct() {}

// GetProtectedSrcMacViolationAction retrieves the value of the leaf ProtectedSrcMacViolationAction from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_Fdb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProtectedSrcMacViolationAction is set, it can
// safely use t.GetProtectedSrcMacViolationAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProtectedSrcMacViolationAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_Fdb) GetProtectedSrcMacViolationAction() E_NokiaTypesServices_ProtectedSrcMacViolationDfAction {
	if t == nil || t.ProtectedSrcMacViolationAction == 0 {
		return 0
	}
	return t.ProtectedSrcMacViolationAction
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_Fdb
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_Fdb) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_Fdb) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_Fdb"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_Fdb) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_Fdb) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_Fdb.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_Fdb) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_RouteNextHop represents the /nokia-conf/configure/groups/group/service/vpls/bgp-evpn/mpls/route-next-hop YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_RouteNextHop struct {
	IpAddress  *string   `path:"ip-address" module:"nokia-conf"`
	SystemIpv4 YANGEmpty `path:"system-ipv4" module:"nokia-conf"`
	SystemIpv6 YANGEmpty `path:"system-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_RouteNextHop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_RouteNextHop) IsYANGGoStruct() {}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_RouteNextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_RouteNextHop) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetSystemIpv4 retrieves the value of the leaf SystemIpv4 from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_RouteNextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SystemIpv4 is set, it can
// safely use t.GetSystemIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SystemIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_RouteNextHop) GetSystemIpv4() YANGEmpty {
	if t == nil || t.SystemIpv4 == false {
		return false
	}
	return t.SystemIpv4
}

// GetSystemIpv6 retrieves the value of the leaf SystemIpv6 from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_RouteNextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SystemIpv6 is set, it can
// safely use t.GetSystemIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SystemIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_RouteNextHop) GetSystemIpv6() YANGEmpty {
	if t == nil || t.SystemIpv6 == false {
		return false
	}
	return t.SystemIpv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_RouteNextHop
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_RouteNextHop) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_RouteNextHop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_RouteNextHop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_RouteNextHop) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_RouteNextHop) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_RouteNextHop.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_RouteNextHop) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_SendTunnelEncap represents the /nokia-conf/configure/groups/group/service/vpls/bgp-evpn/mpls/send-tunnel-encap YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_SendTunnelEncap struct {
	Mpls        *bool `path:"mpls" module:"nokia-conf"`
	MplsOverUdp *bool `path:"mpls-over-udp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_SendTunnelEncap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_SendTunnelEncap) IsYANGGoStruct() {}

// GetMpls retrieves the value of the leaf Mpls from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_SendTunnelEncap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mpls is set, it can
// safely use t.GetMpls() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mpls == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_SendTunnelEncap) GetMpls() bool {
	if t == nil || t.Mpls == nil {
		return true
	}
	return *t.Mpls
}

// GetMplsOverUdp retrieves the value of the leaf MplsOverUdp from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_SendTunnelEncap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MplsOverUdp is set, it can
// safely use t.GetMplsOverUdp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MplsOverUdp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_SendTunnelEncap) GetMplsOverUdp() bool {
	if t == nil || t.MplsOverUdp == nil {
		return false
	}
	return *t.MplsOverUdp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_SendTunnelEncap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_SendTunnelEncap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mpls == nil {
		var v bool = true
		t.Mpls = &v
	}
	if t.MplsOverUdp == nil {
		var v bool = false
		t.MplsOverUdp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_SendTunnelEncap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_SendTunnelEncap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_SendTunnelEncap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_SendTunnelEncap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_SendTunnelEncap.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Mpls_SendTunnelEncap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes represents the /nokia-conf/configure/groups/group/service/vpls/bgp-evpn/routes YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes struct {
	InclMcast *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_InclMcast `path:"incl-mcast" module:"nokia-conf"`
	IpPrefix  *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_IpPrefix  `path:"ip-prefix" module:"nokia-conf"`
	MacIp     *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_MacIp     `path:"mac-ip" module:"nokia-conf"`
	SelMcast  *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_SelMcast  `path:"sel-mcast" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes) IsYANGGoStruct() {}

// GetOrCreateInclMcast retrieves the value of the InclMcast field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes) GetOrCreateInclMcast() *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_InclMcast {
	if t.InclMcast != nil {
		return t.InclMcast
	}
	t.InclMcast = &NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_InclMcast{}
	return t.InclMcast
}

// GetOrCreateIpPrefix retrieves the value of the IpPrefix field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes) GetOrCreateIpPrefix() *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_IpPrefix {
	if t.IpPrefix != nil {
		return t.IpPrefix
	}
	t.IpPrefix = &NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_IpPrefix{}
	return t.IpPrefix
}

// GetOrCreateMacIp retrieves the value of the MacIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes) GetOrCreateMacIp() *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_MacIp {
	if t.MacIp != nil {
		return t.MacIp
	}
	t.MacIp = &NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_MacIp{}
	return t.MacIp
}

// GetOrCreateSelMcast retrieves the value of the SelMcast field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes) GetOrCreateSelMcast() *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_SelMcast {
	if t.SelMcast != nil {
		return t.SelMcast
	}
	t.SelMcast = &NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_SelMcast{}
	return t.SelMcast
}

// GetInclMcast returns the value of the InclMcast struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes. If the receiver or the field InclMcast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes) GetInclMcast() *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_InclMcast {
	if t != nil && t.InclMcast != nil {
		return t.InclMcast
	}
	return nil
}

// GetIpPrefix returns the value of the IpPrefix struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes. If the receiver or the field IpPrefix is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes) GetIpPrefix() *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_IpPrefix {
	if t != nil && t.IpPrefix != nil {
		return t.IpPrefix
	}
	return nil
}

// GetMacIp returns the value of the MacIp struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes. If the receiver or the field MacIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes) GetMacIp() *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_MacIp {
	if t != nil && t.MacIp != nil {
		return t.MacIp
	}
	return nil
}

// GetSelMcast returns the value of the SelMcast struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes. If the receiver or the field SelMcast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes) GetSelMcast() *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_SelMcast {
	if t != nil && t.SelMcast != nil {
		return t.SelMcast
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.InclMcast.PopulateDefaults()
	t.IpPrefix.PopulateDefaults()
	t.MacIp.PopulateDefaults()
	t.SelMcast.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_InclMcast represents the /nokia-conf/configure/groups/group/service/vpls/bgp-evpn/routes/incl-mcast YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_InclMcast struct {
	AdvertiseIngressReplication *bool `path:"advertise-ingress-replication" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_InclMcast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_InclMcast) IsYANGGoStruct() {}

// GetAdvertiseIngressReplication retrieves the value of the leaf AdvertiseIngressReplication from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_InclMcast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseIngressReplication is set, it can
// safely use t.GetAdvertiseIngressReplication() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseIngressReplication == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_InclMcast) GetAdvertiseIngressReplication() bool {
	if t == nil || t.AdvertiseIngressReplication == nil {
		return true
	}
	return *t.AdvertiseIngressReplication
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_InclMcast
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_InclMcast) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdvertiseIngressReplication == nil {
		var v bool = true
		t.AdvertiseIngressReplication = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_InclMcast) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_InclMcast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_InclMcast) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_InclMcast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_InclMcast.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_InclMcast) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_IpPrefix represents the /nokia-conf/configure/groups/group/service/vpls/bgp-evpn/routes/ip-prefix YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_IpPrefix struct {
	Advertise                  *bool   `path:"advertise" module:"nokia-conf"`
	DomainId                   *string `path:"domain-id" module:"nokia-conf"`
	IncludeDirectInterfaceHost *bool   `path:"include-direct-interface-host" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_IpPrefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_IpPrefix) IsYANGGoStruct() {}

// GetAdvertise retrieves the value of the leaf Advertise from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_IpPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Advertise is set, it can
// safely use t.GetAdvertise() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Advertise == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_IpPrefix) GetAdvertise() bool {
	if t == nil || t.Advertise == nil {
		return false
	}
	return *t.Advertise
}

// GetDomainId retrieves the value of the leaf DomainId from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_IpPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DomainId is set, it can
// safely use t.GetDomainId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DomainId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_IpPrefix) GetDomainId() string {
	if t == nil || t.DomainId == nil {
		return ""
	}
	return *t.DomainId
}

// GetIncludeDirectInterfaceHost retrieves the value of the leaf IncludeDirectInterfaceHost from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_IpPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IncludeDirectInterfaceHost is set, it can
// safely use t.GetIncludeDirectInterfaceHost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IncludeDirectInterfaceHost == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_IpPrefix) GetIncludeDirectInterfaceHost() bool {
	if t == nil || t.IncludeDirectInterfaceHost == nil {
		return false
	}
	return *t.IncludeDirectInterfaceHost
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_IpPrefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_IpPrefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Advertise == nil {
		var v bool = false
		t.Advertise = &v
	}
	if t.IncludeDirectInterfaceHost == nil {
		var v bool = false
		t.IncludeDirectInterfaceHost = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_IpPrefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_IpPrefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_IpPrefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_IpPrefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_IpPrefix.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_IpPrefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_MacIp represents the /nokia-conf/configure/groups/group/service/vpls/bgp-evpn/routes/mac-ip YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_MacIp struct {
	Advertise  *bool `path:"advertise" module:"nokia-conf"`
	CfmMac     *bool `path:"cfm-mac" module:"nokia-conf"`
	UnknownMac *bool `path:"unknown-mac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_MacIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_MacIp) IsYANGGoStruct() {}

// GetAdvertise retrieves the value of the leaf Advertise from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_MacIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Advertise is set, it can
// safely use t.GetAdvertise() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Advertise == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_MacIp) GetAdvertise() bool {
	if t == nil || t.Advertise == nil {
		return true
	}
	return *t.Advertise
}

// GetCfmMac retrieves the value of the leaf CfmMac from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_MacIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CfmMac is set, it can
// safely use t.GetCfmMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CfmMac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_MacIp) GetCfmMac() bool {
	if t == nil || t.CfmMac == nil {
		return false
	}
	return *t.CfmMac
}

// GetUnknownMac retrieves the value of the leaf UnknownMac from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_MacIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnknownMac is set, it can
// safely use t.GetUnknownMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnknownMac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_MacIp) GetUnknownMac() bool {
	if t == nil || t.UnknownMac == nil {
		return false
	}
	return *t.UnknownMac
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_MacIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_MacIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Advertise == nil {
		var v bool = true
		t.Advertise = &v
	}
	if t.CfmMac == nil {
		var v bool = false
		t.CfmMac = &v
	}
	if t.UnknownMac == nil {
		var v bool = false
		t.UnknownMac = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_MacIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_MacIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_MacIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_MacIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_MacIp.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_MacIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_SelMcast represents the /nokia-conf/configure/groups/group/service/vpls/bgp-evpn/routes/sel-mcast YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_SelMcast struct {
	Advertise *bool `path:"advertise" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_SelMcast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_SelMcast) IsYANGGoStruct() {}

// GetAdvertise retrieves the value of the leaf Advertise from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_SelMcast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Advertise is set, it can
// safely use t.GetAdvertise() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Advertise == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_SelMcast) GetAdvertise() bool {
	if t == nil || t.Advertise == nil {
		return false
	}
	return *t.Advertise
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_SelMcast
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_SelMcast) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Advertise == nil {
		var v bool = false
		t.Advertise = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_SelMcast) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_SelMcast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_SelMcast) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_SelMcast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_SelMcast.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Routes_SelMcast) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan represents the /nokia-conf/configure/groups/group/service/vpls/bgp-evpn/vxlan YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan struct {
	AdminState           E_NokiaTypesSros_AdminState                                                   `path:"admin-state" module:"nokia-conf"`
	BgpInstance          NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan_BgpInstance_Union `path:"bgp-instance" module:"nokia-conf"`
	DefaultRouteTag      *string                                                                       `path:"default-route-tag" module:"nokia-conf"`
	Ecmp                 *int32                                                                        `path:"ecmp" module:"nokia-conf"`
	EviThreeByteAutoRt   *bool                                                                         `path:"evi-three-byte-auto-rt" module:"nokia-conf"`
	MhMode               E_NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan_MhMode          `path:"mh-mode" module:"nokia-conf"`
	OperGroup            *string                                                                       `path:"oper-group" module:"nokia-conf"`
	Routes               *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan_Routes           `path:"routes" module:"nokia-conf"`
	SendInclMcastIrOnNdf *bool                                                                         `path:"send-incl-mcast-ir-on-ndf" module:"nokia-conf"`
	SendTunnelEncap      *bool                                                                         `path:"send-tunnel-encap" module:"nokia-conf"`
	VxlanInstance        *uint32                                                                       `path:"vxlan-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan) IsYANGGoStruct() {}

// GetOrCreateRoutes retrieves the value of the Routes field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan) GetOrCreateRoutes() *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan_Routes {
	if t.Routes != nil {
		return t.Routes
	}
	t.Routes = &NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan_Routes{}
	return t.Routes
}

// GetRoutes returns the value of the Routes struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan. If the receiver or the field Routes is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan) GetRoutes() *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan_Routes {
	if t != nil && t.Routes != nil {
		return t.Routes
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetBgpInstance retrieves the value of the leaf BgpInstance from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BgpInstance is set, it can
// safely use t.GetBgpInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BgpInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan) GetBgpInstance() NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan_BgpInstance_Union {
	if t == nil || t.BgpInstance == nil {
		return nil
	}
	return t.BgpInstance
}

// GetDefaultRouteTag retrieves the value of the leaf DefaultRouteTag from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultRouteTag is set, it can
// safely use t.GetDefaultRouteTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultRouteTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan) GetDefaultRouteTag() string {
	if t == nil || t.DefaultRouteTag == nil {
		return ""
	}
	return *t.DefaultRouteTag
}

// GetEcmp retrieves the value of the leaf Ecmp from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ecmp is set, it can
// safely use t.GetEcmp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ecmp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan) GetEcmp() int32 {
	if t == nil || t.Ecmp == nil {
		return 1
	}
	return *t.Ecmp
}

// GetEviThreeByteAutoRt retrieves the value of the leaf EviThreeByteAutoRt from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EviThreeByteAutoRt is set, it can
// safely use t.GetEviThreeByteAutoRt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EviThreeByteAutoRt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan) GetEviThreeByteAutoRt() bool {
	if t == nil || t.EviThreeByteAutoRt == nil {
		return false
	}
	return *t.EviThreeByteAutoRt
}

// GetMhMode retrieves the value of the leaf MhMode from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MhMode is set, it can
// safely use t.GetMhMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MhMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan) GetMhMode() E_NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan_MhMode {
	if t == nil || t.MhMode == 0 {
		return NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan_MhMode_access
	}
	return t.MhMode
}

// GetOperGroup retrieves the value of the leaf OperGroup from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OperGroup is set, it can
// safely use t.GetOperGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OperGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan) GetOperGroup() string {
	if t == nil || t.OperGroup == nil {
		return ""
	}
	return *t.OperGroup
}

// GetSendInclMcastIrOnNdf retrieves the value of the leaf SendInclMcastIrOnNdf from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SendInclMcastIrOnNdf is set, it can
// safely use t.GetSendInclMcastIrOnNdf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SendInclMcastIrOnNdf == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan) GetSendInclMcastIrOnNdf() bool {
	if t == nil || t.SendInclMcastIrOnNdf == nil {
		return true
	}
	return *t.SendInclMcastIrOnNdf
}

// GetSendTunnelEncap retrieves the value of the leaf SendTunnelEncap from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SendTunnelEncap is set, it can
// safely use t.GetSendTunnelEncap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SendTunnelEncap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan) GetSendTunnelEncap() bool {
	if t == nil || t.SendTunnelEncap == nil {
		return true
	}
	return *t.SendTunnelEncap
}

// GetVxlanInstance retrieves the value of the leaf VxlanInstance from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VxlanInstance is set, it can
// safely use t.GetVxlanInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VxlanInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan) GetVxlanInstance() uint32 {
	if t == nil || t.VxlanInstance == nil {
		return 0
	}
	return *t.VxlanInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Ecmp == nil {
		var v int32 = 1
		t.Ecmp = &v
	}
	if t.EviThreeByteAutoRt == nil {
		var v bool = false
		t.EviThreeByteAutoRt = &v
	}
	if t.MhMode == 0 {
		t.MhMode = NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan_MhMode_access
	}
	if t.SendInclMcastIrOnNdf == nil {
		var v bool = true
		t.SendInclMcastIrOnNdf = &v
	}
	if t.SendTunnelEncap == nil {
		var v bool = true
		t.SendTunnelEncap = &v
	}
	t.Routes.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"bgp-instance": t.BgpInstance,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan_Routes represents the /nokia-conf/configure/groups/group/service/vpls/bgp-evpn/vxlan/routes YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan_Routes struct {
	AutoDisc *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan_Routes_AutoDisc `path:"auto-disc" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan_Routes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan_Routes) IsYANGGoStruct() {}

// GetOrCreateAutoDisc retrieves the value of the AutoDisc field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan_Routes) GetOrCreateAutoDisc() *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan_Routes_AutoDisc {
	if t.AutoDisc != nil {
		return t.AutoDisc
	}
	t.AutoDisc = &NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan_Routes_AutoDisc{}
	return t.AutoDisc
}

// GetAutoDisc returns the value of the AutoDisc struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan_Routes. If the receiver or the field AutoDisc is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan_Routes) GetAutoDisc() *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan_Routes_AutoDisc {
	if t != nil && t.AutoDisc != nil {
		return t.AutoDisc
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan_Routes
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan_Routes) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AutoDisc.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan_Routes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan_Routes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan_Routes) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan_Routes) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan_Routes.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan_Routes) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan_Routes_AutoDisc represents the /nokia-conf/configure/groups/group/service/vpls/bgp-evpn/vxlan/routes/auto-disc YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan_Routes_AutoDisc struct {
	Advertise *bool `path:"advertise" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan_Routes_AutoDisc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan_Routes_AutoDisc) IsYANGGoStruct() {
}

// GetAdvertise retrieves the value of the leaf Advertise from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan_Routes_AutoDisc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Advertise is set, it can
// safely use t.GetAdvertise() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Advertise == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan_Routes_AutoDisc) GetAdvertise() bool {
	if t == nil || t.Advertise == nil {
		return false
	}
	return *t.Advertise
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan_Routes_AutoDisc
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan_Routes_AutoDisc) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Advertise == nil {
		var v bool = false
		t.Advertise = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan_Routes_AutoDisc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan_Routes_AutoDisc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan_Routes_AutoDisc) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan_Routes_AutoDisc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan_Routes_AutoDisc.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_BgpEvpn_Vxlan_Routes_AutoDisc) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_BgpMhSite represents the /nokia-conf/configure/groups/group/service/vpls/bgp-mh-site YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_BgpMhSite struct {
	ActivationTimer  *int32                                                                        `path:"activation-timer" module:"nokia-conf"`
	AdminState       E_NokiaTypesSros_AdminState                                                   `path:"admin-state" module:"nokia-conf"`
	BootTimer        *int32                                                                        `path:"boot-timer" module:"nokia-conf"`
	FailedThreshold  NokiaConf_Configure_Groups_Group_Service_Vpls_BgpMhSite_FailedThreshold_Union `path:"failed-threshold" module:"nokia-conf"`
	Id               *int32                                                                        `path:"id" module:"nokia-conf"`
	MeshSdpBinds     YANGEmpty                                                                     `path:"mesh-sdp-binds" module:"nokia-conf"`
	MinDownTimer     *int32                                                                        `path:"min-down-timer" module:"nokia-conf"`
	MonitorOperGroup *string                                                                       `path:"monitor-oper-group" module:"nokia-conf"`
	Sap              *string                                                                       `path:"sap" module:"nokia-conf"`
	ShgName          *string                                                                       `path:"shg-name" module:"nokia-conf"`
	SiteName         *string                                                                       `path:"site-name" module:"nokia-conf"`
	SpokeSdp         *string                                                                       `path:"spoke-sdp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_BgpMhSite implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_BgpMhSite) IsYANGGoStruct() {}

// GetActivationTimer retrieves the value of the leaf ActivationTimer from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpMhSite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActivationTimer is set, it can
// safely use t.GetActivationTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActivationTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpMhSite) GetActivationTimer() int32 {
	if t == nil || t.ActivationTimer == nil {
		return 0
	}
	return *t.ActivationTimer
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpMhSite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpMhSite) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetBootTimer retrieves the value of the leaf BootTimer from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpMhSite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BootTimer is set, it can
// safely use t.GetBootTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BootTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpMhSite) GetBootTimer() int32 {
	if t == nil || t.BootTimer == nil {
		return 0
	}
	return *t.BootTimer
}

// GetFailedThreshold retrieves the value of the leaf FailedThreshold from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpMhSite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FailedThreshold is set, it can
// safely use t.GetFailedThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FailedThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpMhSite) GetFailedThreshold() NokiaConf_Configure_Groups_Group_Service_Vpls_BgpMhSite_FailedThreshold_Union {
	if t == nil || t.FailedThreshold == nil {
		return NokiaTypesServices_FailedThreshold_Enum_all
	}
	return t.FailedThreshold
}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpMhSite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpMhSite) GetId() int32 {
	if t == nil || t.Id == nil {
		return 0
	}
	return *t.Id
}

// GetMeshSdpBinds retrieves the value of the leaf MeshSdpBinds from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpMhSite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MeshSdpBinds is set, it can
// safely use t.GetMeshSdpBinds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MeshSdpBinds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpMhSite) GetMeshSdpBinds() YANGEmpty {
	if t == nil || t.MeshSdpBinds == false {
		return false
	}
	return t.MeshSdpBinds
}

// GetMinDownTimer retrieves the value of the leaf MinDownTimer from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpMhSite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinDownTimer is set, it can
// safely use t.GetMinDownTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinDownTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpMhSite) GetMinDownTimer() int32 {
	if t == nil || t.MinDownTimer == nil {
		return 0
	}
	return *t.MinDownTimer
}

// GetMonitorOperGroup retrieves the value of the leaf MonitorOperGroup from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpMhSite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorOperGroup is set, it can
// safely use t.GetMonitorOperGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorOperGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpMhSite) GetMonitorOperGroup() string {
	if t == nil || t.MonitorOperGroup == nil {
		return ""
	}
	return *t.MonitorOperGroup
}

// GetSap retrieves the value of the leaf Sap from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpMhSite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Sap is set, it can
// safely use t.GetSap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Sap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpMhSite) GetSap() string {
	if t == nil || t.Sap == nil {
		return ""
	}
	return *t.Sap
}

// GetShgName retrieves the value of the leaf ShgName from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpMhSite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ShgName is set, it can
// safely use t.GetShgName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ShgName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpMhSite) GetShgName() string {
	if t == nil || t.ShgName == nil {
		return ""
	}
	return *t.ShgName
}

// GetSiteName retrieves the value of the leaf SiteName from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpMhSite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SiteName is set, it can
// safely use t.GetSiteName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SiteName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpMhSite) GetSiteName() string {
	if t == nil || t.SiteName == nil {
		return ""
	}
	return *t.SiteName
}

// GetSpokeSdp retrieves the value of the leaf SpokeSdp from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpMhSite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SpokeSdp is set, it can
// safely use t.GetSpokeSdp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SpokeSdp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpMhSite) GetSpokeSdp() string {
	if t == nil || t.SpokeSdp == nil {
		return ""
	}
	return *t.SpokeSdp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpMhSite
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpMhSite) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.FailedThreshold == nil {
		t.FailedThreshold = NokiaTypesServices_FailedThreshold_Enum_all
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpMhSite struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpMhSite) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SiteName == nil {
		return nil, fmt.Errorf("nil value for key SiteName")
	}

	return map[string]interface{}{
		"site-name": *t.SiteName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpMhSite) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_BgpMhSite"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpMhSite) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpMhSite) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_BgpMhSite.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_BgpMhSite) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_BgpVpls represents the /nokia-conf/configure/groups/group/service/vpls/bgp-vpls YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_BgpVpls struct {
	AdminState  E_NokiaTypesSros_AdminState                               `path:"admin-state" module:"nokia-conf"`
	MaximumVeId *int32                                                    `path:"maximum-ve-id" module:"nokia-conf"`
	Ve          *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpVpls_Ve `path:"ve" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_BgpVpls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_BgpVpls) IsYANGGoStruct() {}

// GetOrCreateVe retrieves the value of the Ve field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpVpls) GetOrCreateVe() *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpVpls_Ve {
	if t.Ve != nil {
		return t.Ve
	}
	t.Ve = &NokiaConf_Configure_Groups_Group_Service_Vpls_BgpVpls_Ve{}
	return t.Ve
}

// GetVe returns the value of the Ve struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_BgpVpls. If the receiver or the field Ve is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpVpls) GetVe() *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpVpls_Ve {
	if t != nil && t.Ve != nil {
		return t.Ve
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpVpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpVpls) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetMaximumVeId retrieves the value of the leaf MaximumVeId from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpVpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumVeId is set, it can
// safely use t.GetMaximumVeId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumVeId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpVpls) GetMaximumVeId() int32 {
	if t == nil || t.MaximumVeId == nil {
		return 0
	}
	return *t.MaximumVeId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpVpls
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpVpls) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.Ve.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpVpls) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_BgpVpls"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpVpls) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpVpls) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_BgpVpls.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_BgpVpls) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_BgpVpls_Ve represents the /nokia-conf/configure/groups/group/service/vpls/bgp-vpls/ve YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_BgpVpls_Ve struct {
	Id   *int32  `path:"id" module:"nokia-conf"`
	Name *string `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_BgpVpls_Ve implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_BgpVpls_Ve) IsYANGGoStruct() {}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpVpls_Ve
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpVpls_Ve) GetId() int32 {
	if t == nil || t.Id == nil {
		return 0
	}
	return *t.Id
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpVpls_Ve
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpVpls_Ve) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_BgpVpls_Ve
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpVpls_Ve) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpVpls_Ve) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_BgpVpls_Ve"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpVpls_Ve) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_BgpVpls_Ve) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_BgpVpls_Ve.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_BgpVpls_Ve) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp_PwTemplateBinding represents the /nokia-conf/configure/groups/group/service/vpls/bgp/pw-template-binding YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp_PwTemplateBinding struct {
	BfdLiveness       *bool    `path:"bfd-liveness" module:"nokia-conf"`
	BfdTemplate       *string  `path:"bfd-template" module:"nokia-conf"`
	ImportRt          []string `path:"import-rt" module:"nokia-conf"`
	MonitorOperGroup  *string  `path:"monitor-oper-group" module:"nokia-conf"`
	OperGroup         *string  `path:"oper-group" module:"nokia-conf"`
	PwTemplateName    *string  `path:"pw-template-name" module:"nokia-conf"`
	SplitHorizonGroup *string  `path:"split-horizon-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp_PwTemplateBinding implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp_PwTemplateBinding) IsYANGGoStruct() {}

// GetBfdLiveness retrieves the value of the leaf BfdLiveness from the NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp_PwTemplateBinding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdLiveness is set, it can
// safely use t.GetBfdLiveness() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdLiveness == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp_PwTemplateBinding) GetBfdLiveness() bool {
	if t == nil || t.BfdLiveness == nil {
		return false
	}
	return *t.BfdLiveness
}

// GetBfdTemplate retrieves the value of the leaf BfdTemplate from the NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp_PwTemplateBinding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdTemplate is set, it can
// safely use t.GetBfdTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp_PwTemplateBinding) GetBfdTemplate() string {
	if t == nil || t.BfdTemplate == nil {
		return ""
	}
	return *t.BfdTemplate
}

// GetImportRt retrieves the value of the leaf ImportRt from the NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp_PwTemplateBinding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportRt is set, it can
// safely use t.GetImportRt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportRt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp_PwTemplateBinding) GetImportRt() []string {
	if t == nil || t.ImportRt == nil {
		return nil
	}
	return t.ImportRt
}

// GetMonitorOperGroup retrieves the value of the leaf MonitorOperGroup from the NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp_PwTemplateBinding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorOperGroup is set, it can
// safely use t.GetMonitorOperGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorOperGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp_PwTemplateBinding) GetMonitorOperGroup() string {
	if t == nil || t.MonitorOperGroup == nil {
		return ""
	}
	return *t.MonitorOperGroup
}

// GetOperGroup retrieves the value of the leaf OperGroup from the NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp_PwTemplateBinding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OperGroup is set, it can
// safely use t.GetOperGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OperGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp_PwTemplateBinding) GetOperGroup() string {
	if t == nil || t.OperGroup == nil {
		return ""
	}
	return *t.OperGroup
}

// GetPwTemplateName retrieves the value of the leaf PwTemplateName from the NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp_PwTemplateBinding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PwTemplateName is set, it can
// safely use t.GetPwTemplateName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PwTemplateName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp_PwTemplateBinding) GetPwTemplateName() string {
	if t == nil || t.PwTemplateName == nil {
		return ""
	}
	return *t.PwTemplateName
}

// GetSplitHorizonGroup retrieves the value of the leaf SplitHorizonGroup from the NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp_PwTemplateBinding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SplitHorizonGroup is set, it can
// safely use t.GetSplitHorizonGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SplitHorizonGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp_PwTemplateBinding) GetSplitHorizonGroup() string {
	if t == nil || t.SplitHorizonGroup == nil {
		return ""
	}
	return *t.SplitHorizonGroup
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp_PwTemplateBinding
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp_PwTemplateBinding) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BfdLiveness == nil {
		var v bool = false
		t.BfdLiveness = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp_PwTemplateBinding struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp_PwTemplateBinding) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PwTemplateName == nil {
		return nil, fmt.Errorf("nil value for key PwTemplateName")
	}

	return map[string]interface{}{
		"pw-template-name": *t.PwTemplateName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp_PwTemplateBinding) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp_PwTemplateBinding"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp_PwTemplateBinding) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp_PwTemplateBinding) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp_PwTemplateBinding.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp_PwTemplateBinding) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp_RouteTarget represents the /nokia-conf/configure/groups/group/service/vpls/bgp/route-target YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp_RouteTarget struct {
	Export *string `path:"export" module:"nokia-conf"`
	Import *string `path:"import" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp_RouteTarget implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp_RouteTarget) IsYANGGoStruct() {}

// GetExport retrieves the value of the leaf Export from the NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp_RouteTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Export is set, it can
// safely use t.GetExport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Export == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp_RouteTarget) GetExport() string {
	if t == nil || t.Export == nil {
		return ""
	}
	return *t.Export
}

// GetImport retrieves the value of the leaf Import from the NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp_RouteTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Import is set, it can
// safely use t.GetImport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Import == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp_RouteTarget) GetImport() string {
	if t == nil || t.Import == nil {
		return ""
	}
	return *t.Import
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp_RouteTarget
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp_RouteTarget) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp_RouteTarget) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp_RouteTarget"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp_RouteTarget) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp_RouteTarget) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp_RouteTarget.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Bgp_RouteTarget) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap represents the /nokia-conf/configure/groups/group/service/vpls/capture-sap YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap struct {
	AdminState        E_NokiaTypesSros_AdminState                                             `path:"admin-state" module:"nokia-conf"`
	AllowDot1QMsaps   *bool                                                                   `path:"allow-dot1q-msaps" module:"nokia-conf"`
	Bandwidth         *uint64                                                                 `path:"bandwidth" module:"nokia-conf"`
	CpuProtection     *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_CpuProtection `path:"cpu-protection" module:"nokia-conf"`
	Description       *string                                                                 `path:"description" module:"nokia-conf"`
	Dhcp              *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Dhcp          `path:"dhcp" module:"nokia-conf"`
	Dhcp6             *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Dhcp6         `path:"dhcp6" module:"nokia-conf"`
	DistCpuProtection *string                                                                 `path:"dist-cpu-protection" module:"nokia-conf"`
	HostLockoutPolicy *string                                                                 `path:"host-lockout-policy" module:"nokia-conf"`
	Ingress           *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Ingress       `path:"ingress" module:"nokia-conf"`
	IpoeSession       *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_IpoeSession   `path:"ipoe-session" module:"nokia-conf" yangPresence:"true"`
	MsapDefaults      *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_MsapDefaults  `path:"msap-defaults" module:"nokia-conf"`
	NasreqAuthPolicy  *string                                                                 `path:"nasreq-auth-policy" module:"nokia-conf"`
	Pfcp              *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp          `path:"pfcp" module:"nokia-conf" yangPresence:"true"`
	Pppoe             *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pppoe         `path:"pppoe" module:"nokia-conf"`
	RadiusAuthPolicy  *string                                                                 `path:"radius-auth-policy" module:"nokia-conf"`
	RouterSolicit     *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_RouterSolicit `path:"router-solicit" module:"nokia-conf"`
	SapId             *string                                                                 `path:"sap-id" module:"nokia-conf"`
	TrackSrrp         *uint32                                                                 `path:"track-srrp" module:"nokia-conf"`
	TriggerPacket     *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_TriggerPacket `path:"trigger-packet" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap) IsYANGGoStruct() {}

// GetOrCreateCpuProtection retrieves the value of the CpuProtection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap) GetOrCreateCpuProtection() *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_CpuProtection {
	if t.CpuProtection != nil {
		return t.CpuProtection
	}
	t.CpuProtection = &NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_CpuProtection{}
	return t.CpuProtection
}

// GetOrCreateDhcp retrieves the value of the Dhcp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap) GetOrCreateDhcp() *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Dhcp {
	if t.Dhcp != nil {
		return t.Dhcp
	}
	t.Dhcp = &NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Dhcp{}
	return t.Dhcp
}

// GetOrCreateDhcp6 retrieves the value of the Dhcp6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap) GetOrCreateDhcp6() *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Dhcp6 {
	if t.Dhcp6 != nil {
		return t.Dhcp6
	}
	t.Dhcp6 = &NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Dhcp6{}
	return t.Dhcp6
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap) GetOrCreateIngress() *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Ingress{}
	return t.Ingress
}

// GetOrCreateIpoeSession retrieves the value of the IpoeSession field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap) GetOrCreateIpoeSession() *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_IpoeSession {
	if t.IpoeSession != nil {
		return t.IpoeSession
	}
	t.IpoeSession = &NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_IpoeSession{}
	return t.IpoeSession
}

// GetOrCreateMsapDefaults retrieves the value of the MsapDefaults field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap) GetOrCreateMsapDefaults() *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_MsapDefaults {
	if t.MsapDefaults != nil {
		return t.MsapDefaults
	}
	t.MsapDefaults = &NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_MsapDefaults{}
	return t.MsapDefaults
}

// GetOrCreatePfcp retrieves the value of the Pfcp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap) GetOrCreatePfcp() *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp {
	if t.Pfcp != nil {
		return t.Pfcp
	}
	t.Pfcp = &NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp{}
	return t.Pfcp
}

// GetOrCreatePppoe retrieves the value of the Pppoe field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap) GetOrCreatePppoe() *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pppoe {
	if t.Pppoe != nil {
		return t.Pppoe
	}
	t.Pppoe = &NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pppoe{}
	return t.Pppoe
}

// GetOrCreateRouterSolicit retrieves the value of the RouterSolicit field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap) GetOrCreateRouterSolicit() *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_RouterSolicit {
	if t.RouterSolicit != nil {
		return t.RouterSolicit
	}
	t.RouterSolicit = &NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_RouterSolicit{}
	return t.RouterSolicit
}

// GetOrCreateTriggerPacket retrieves the value of the TriggerPacket field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap) GetOrCreateTriggerPacket() *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_TriggerPacket {
	if t.TriggerPacket != nil {
		return t.TriggerPacket
	}
	t.TriggerPacket = &NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_TriggerPacket{}
	return t.TriggerPacket
}

// GetCpuProtection returns the value of the CpuProtection struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap. If the receiver or the field CpuProtection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap) GetCpuProtection() *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_CpuProtection {
	if t != nil && t.CpuProtection != nil {
		return t.CpuProtection
	}
	return nil
}

// GetDhcp returns the value of the Dhcp struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap. If the receiver or the field Dhcp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap) GetDhcp() *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Dhcp {
	if t != nil && t.Dhcp != nil {
		return t.Dhcp
	}
	return nil
}

// GetDhcp6 returns the value of the Dhcp6 struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap. If the receiver or the field Dhcp6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap) GetDhcp6() *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Dhcp6 {
	if t != nil && t.Dhcp6 != nil {
		return t.Dhcp6
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap) GetIngress() *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetIpoeSession returns the value of the IpoeSession struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap. If the receiver or the field IpoeSession is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap) GetIpoeSession() *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_IpoeSession {
	if t != nil && t.IpoeSession != nil {
		return t.IpoeSession
	}
	return nil
}

// GetMsapDefaults returns the value of the MsapDefaults struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap. If the receiver or the field MsapDefaults is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap) GetMsapDefaults() *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_MsapDefaults {
	if t != nil && t.MsapDefaults != nil {
		return t.MsapDefaults
	}
	return nil
}

// GetPfcp returns the value of the Pfcp struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap. If the receiver or the field Pfcp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap) GetPfcp() *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp {
	if t != nil && t.Pfcp != nil {
		return t.Pfcp
	}
	return nil
}

// GetPppoe returns the value of the Pppoe struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap. If the receiver or the field Pppoe is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap) GetPppoe() *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pppoe {
	if t != nil && t.Pppoe != nil {
		return t.Pppoe
	}
	return nil
}

// GetRouterSolicit returns the value of the RouterSolicit struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap. If the receiver or the field RouterSolicit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap) GetRouterSolicit() *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_RouterSolicit {
	if t != nil && t.RouterSolicit != nil {
		return t.RouterSolicit
	}
	return nil
}

// GetTriggerPacket returns the value of the TriggerPacket struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap. If the receiver or the field TriggerPacket is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap) GetTriggerPacket() *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_TriggerPacket {
	if t != nil && t.TriggerPacket != nil {
		return t.TriggerPacket
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetAllowDot1QMsaps retrieves the value of the leaf AllowDot1QMsaps from the NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowDot1QMsaps is set, it can
// safely use t.GetAllowDot1QMsaps() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowDot1QMsaps == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap) GetAllowDot1QMsaps() bool {
	if t == nil || t.AllowDot1QMsaps == nil {
		return false
	}
	return *t.AllowDot1QMsaps
}

// GetBandwidth retrieves the value of the leaf Bandwidth from the NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bandwidth is set, it can
// safely use t.GetBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap) GetBandwidth() uint64 {
	if t == nil || t.Bandwidth == nil {
		return 0
	}
	return *t.Bandwidth
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDistCpuProtection retrieves the value of the leaf DistCpuProtection from the NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DistCpuProtection is set, it can
// safely use t.GetDistCpuProtection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DistCpuProtection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap) GetDistCpuProtection() string {
	if t == nil || t.DistCpuProtection == nil {
		return ""
	}
	return *t.DistCpuProtection
}

// GetHostLockoutPolicy retrieves the value of the leaf HostLockoutPolicy from the NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HostLockoutPolicy is set, it can
// safely use t.GetHostLockoutPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HostLockoutPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap) GetHostLockoutPolicy() string {
	if t == nil || t.HostLockoutPolicy == nil {
		return ""
	}
	return *t.HostLockoutPolicy
}

// GetNasreqAuthPolicy retrieves the value of the leaf NasreqAuthPolicy from the NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NasreqAuthPolicy is set, it can
// safely use t.GetNasreqAuthPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NasreqAuthPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap) GetNasreqAuthPolicy() string {
	if t == nil || t.NasreqAuthPolicy == nil {
		return ""
	}
	return *t.NasreqAuthPolicy
}

// GetRadiusAuthPolicy retrieves the value of the leaf RadiusAuthPolicy from the NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RadiusAuthPolicy is set, it can
// safely use t.GetRadiusAuthPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RadiusAuthPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap) GetRadiusAuthPolicy() string {
	if t == nil || t.RadiusAuthPolicy == nil {
		return ""
	}
	return *t.RadiusAuthPolicy
}

// GetSapId retrieves the value of the leaf SapId from the NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SapId is set, it can
// safely use t.GetSapId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SapId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap) GetSapId() string {
	if t == nil || t.SapId == nil {
		return ""
	}
	return *t.SapId
}

// GetTrackSrrp retrieves the value of the leaf TrackSrrp from the NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TrackSrrp is set, it can
// safely use t.GetTrackSrrp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TrackSrrp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap) GetTrackSrrp() uint32 {
	if t == nil || t.TrackSrrp == nil {
		return 0
	}
	return *t.TrackSrrp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.AllowDot1QMsaps == nil {
		var v bool = false
		t.AllowDot1QMsaps = &v
	}
	t.CpuProtection.PopulateDefaults()
	t.Dhcp.PopulateDefaults()
	t.Dhcp6.PopulateDefaults()
	t.Ingress.PopulateDefaults()
	t.IpoeSession.PopulateDefaults()
	t.MsapDefaults.PopulateDefaults()
	t.Pfcp.PopulateDefaults()
	t.Pppoe.PopulateDefaults()
	t.RouterSolicit.PopulateDefaults()
	t.TriggerPacket.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SapId == nil {
		return nil, fmt.Errorf("nil value for key SapId")
	}

	return map[string]interface{}{
		"sap-id": *t.SapId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_CpuProtection represents the /nokia-conf/configure/groups/group/service/vpls/capture-sap/cpu-protection YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_CpuProtection struct {
	MacMonitoring YANGEmpty `path:"mac-monitoring" module:"nokia-conf"`
	PolicyId      *uint32   `path:"policy-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_CpuProtection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_CpuProtection) IsYANGGoStruct() {}

// GetMacMonitoring retrieves the value of the leaf MacMonitoring from the NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_CpuProtection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacMonitoring is set, it can
// safely use t.GetMacMonitoring() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacMonitoring == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_CpuProtection) GetMacMonitoring() YANGEmpty {
	if t == nil || t.MacMonitoring == false {
		return false
	}
	return t.MacMonitoring
}

// GetPolicyId retrieves the value of the leaf PolicyId from the NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_CpuProtection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyId is set, it can
// safely use t.GetPolicyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_CpuProtection) GetPolicyId() uint32 {
	if t == nil || t.PolicyId == nil {
		return 0
	}
	return *t.PolicyId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_CpuProtection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_CpuProtection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_CpuProtection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_CpuProtection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_CpuProtection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_CpuProtection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_CpuProtection.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_CpuProtection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Dhcp represents the /nokia-conf/configure/groups/group/service/vpls/capture-sap/dhcp YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Dhcp struct {
	PythonPolicy *string `path:"python-policy" module:"nokia-conf"`
	UserDb       *string `path:"user-db" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Dhcp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Dhcp) IsYANGGoStruct() {}

// GetPythonPolicy retrieves the value of the leaf PythonPolicy from the NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PythonPolicy is set, it can
// safely use t.GetPythonPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PythonPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Dhcp) GetPythonPolicy() string {
	if t == nil || t.PythonPolicy == nil {
		return ""
	}
	return *t.PythonPolicy
}

// GetUserDb retrieves the value of the leaf UserDb from the NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UserDb is set, it can
// safely use t.GetUserDb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UserDb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Dhcp) GetUserDb() string {
	if t == nil || t.UserDb == nil {
		return ""
	}
	return *t.UserDb
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Dhcp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Dhcp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Dhcp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Dhcp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Dhcp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Dhcp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Dhcp.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Dhcp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Dhcp6 represents the /nokia-conf/configure/groups/group/service/vpls/capture-sap/dhcp6 YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Dhcp6 struct {
	PythonPolicy *string `path:"python-policy" module:"nokia-conf"`
	UserDb       *string `path:"user-db" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Dhcp6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Dhcp6) IsYANGGoStruct() {}

// GetPythonPolicy retrieves the value of the leaf PythonPolicy from the NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Dhcp6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PythonPolicy is set, it can
// safely use t.GetPythonPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PythonPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Dhcp6) GetPythonPolicy() string {
	if t == nil || t.PythonPolicy == nil {
		return ""
	}
	return *t.PythonPolicy
}

// GetUserDb retrieves the value of the leaf UserDb from the NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Dhcp6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UserDb is set, it can
// safely use t.GetUserDb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UserDb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Dhcp6) GetUserDb() string {
	if t == nil || t.UserDb == nil {
		return ""
	}
	return *t.UserDb
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Dhcp6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Dhcp6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Dhcp6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Dhcp6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Dhcp6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Dhcp6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Dhcp6.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Dhcp6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Ingress represents the /nokia-conf/configure/groups/group/service/vpls/capture-sap/ingress YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Ingress struct {
	Filter       *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Ingress_Filter `path:"filter" module:"nokia-conf"`
	IpFilterPair *bool                                                                    `path:"ip-filter-pair" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Ingress) IsYANGGoStruct() {}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Ingress) GetOrCreateFilter() *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Ingress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Ingress_Filter{}
	return t.Filter
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Ingress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Ingress) GetFilter() *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Ingress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetIpFilterPair retrieves the value of the leaf IpFilterPair from the NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpFilterPair is set, it can
// safely use t.GetIpFilterPair() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpFilterPair == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Ingress) GetIpFilterPair() bool {
	if t == nil || t.IpFilterPair == nil {
		return false
	}
	return *t.IpFilterPair
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IpFilterPair == nil {
		var v bool = false
		t.IpFilterPair = &v
	}
	t.Filter.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Ingress.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Ingress_Filter represents the /nokia-conf/configure/groups/group/service/vpls/capture-sap/ingress/filter YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Ingress_Filter struct {
	Mac *string `path:"mac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Ingress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Ingress_Filter) IsYANGGoStruct() {}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Ingress_Filter) GetMac() string {
	if t == nil || t.Mac == nil {
		return ""
	}
	return *t.Mac
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Ingress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Ingress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Ingress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Ingress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Ingress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Ingress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Ingress_Filter.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Ingress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_IpoeSession represents the /nokia-conf/configure/groups/group/service/vpls/capture-sap/ipoe-session YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_IpoeSession struct {
	AdminState        E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Description       *string                     `path:"description" module:"nokia-conf"`
	IpoeSessionPolicy *string                     `path:"ipoe-session-policy" module:"nokia-conf"`
	UserDb            *string                     `path:"user-db" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_IpoeSession implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_IpoeSession) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_IpoeSession
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_IpoeSession) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_IpoeSession
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_IpoeSession) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetIpoeSessionPolicy retrieves the value of the leaf IpoeSessionPolicy from the NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_IpoeSession
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpoeSessionPolicy is set, it can
// safely use t.GetIpoeSessionPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpoeSessionPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_IpoeSession) GetIpoeSessionPolicy() string {
	if t == nil || t.IpoeSessionPolicy == nil {
		return ""
	}
	return *t.IpoeSessionPolicy
}

// GetUserDb retrieves the value of the leaf UserDb from the NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_IpoeSession
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UserDb is set, it can
// safely use t.GetUserDb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UserDb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_IpoeSession) GetUserDb() string {
	if t == nil || t.UserDb == nil {
		return ""
	}
	return *t.UserDb
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_IpoeSession
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_IpoeSession) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_IpoeSession) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_IpoeSession"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_IpoeSession) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_IpoeSession) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_IpoeSession.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_IpoeSession) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_MsapDefaults represents the /nokia-conf/configure/groups/group/service/vpls/capture-sap/msap-defaults YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_MsapDefaults struct {
	GroupInterface *string `path:"group-interface" module:"nokia-conf"`
	Policy         *string `path:"policy" module:"nokia-conf"`
	ServiceName    *string `path:"service-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_MsapDefaults implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_MsapDefaults) IsYANGGoStruct() {}

// GetGroupInterface retrieves the value of the leaf GroupInterface from the NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_MsapDefaults
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupInterface is set, it can
// safely use t.GetGroupInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupInterface == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_MsapDefaults) GetGroupInterface() string {
	if t == nil || t.GroupInterface == nil {
		return ""
	}
	return *t.GroupInterface
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_MsapDefaults
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_MsapDefaults) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// GetServiceName retrieves the value of the leaf ServiceName from the NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_MsapDefaults
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceName is set, it can
// safely use t.GetServiceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_MsapDefaults) GetServiceName() string {
	if t == nil || t.ServiceName == nil {
		return ""
	}
	return *t.ServiceName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_MsapDefaults
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_MsapDefaults) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_MsapDefaults) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_MsapDefaults"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_MsapDefaults) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_MsapDefaults) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_MsapDefaults.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_MsapDefaults) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp represents the /nokia-conf/configure/groups/group/service/vpls/capture-sap/pfcp YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp struct {
	Association     *string                                                                     `path:"association" module:"nokia-conf"`
	L2AccessIdAlias *string                                                                     `path:"l2-access-id-alias" module:"nokia-conf"`
	UpResiliency    *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp_UpResiliency `path:"up-resiliency" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp) IsYANGGoStruct() {}

// GetOrCreateUpResiliency retrieves the value of the UpResiliency field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp) GetOrCreateUpResiliency() *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp_UpResiliency {
	if t.UpResiliency != nil {
		return t.UpResiliency
	}
	t.UpResiliency = &NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp_UpResiliency{}
	return t.UpResiliency
}

// GetUpResiliency returns the value of the UpResiliency struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp. If the receiver or the field UpResiliency is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp) GetUpResiliency() *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp_UpResiliency {
	if t != nil && t.UpResiliency != nil {
		return t.UpResiliency
	}
	return nil
}

// GetAssociation retrieves the value of the leaf Association from the NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Association is set, it can
// safely use t.GetAssociation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Association == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp) GetAssociation() string {
	if t == nil || t.Association == nil {
		return ""
	}
	return *t.Association
}

// GetL2AccessIdAlias retrieves the value of the leaf L2AccessIdAlias from the NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if L2AccessIdAlias is set, it can
// safely use t.GetL2AccessIdAlias() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.L2AccessIdAlias == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp) GetL2AccessIdAlias() string {
	if t == nil || t.L2AccessIdAlias == nil {
		return ""
	}
	return *t.L2AccessIdAlias
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.UpResiliency.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp_UpResiliency represents the /nokia-conf/configure/groups/group/service/vpls/capture-sap/pfcp/up-resiliency YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp_UpResiliency struct {
	MonitorOperGroup map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp_UpResiliency_MonitorOperGroup `path:"monitor-oper-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp_UpResiliency implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp_UpResiliency) IsYANGGoStruct() {}

// NewMonitorOperGroup creates a new entry in the MonitorOperGroup list of the
// NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp_UpResiliency struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp_UpResiliency) NewMonitorOperGroup(OperGroup string) (*NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp_UpResiliency_MonitorOperGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MonitorOperGroup == nil {
		t.MonitorOperGroup = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp_UpResiliency_MonitorOperGroup)
	}

	key := OperGroup

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MonitorOperGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MonitorOperGroup", key)
	}

	t.MonitorOperGroup[key] = &NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp_UpResiliency_MonitorOperGroup{
		OperGroup: &OperGroup,
	}

	return t.MonitorOperGroup[key], nil
}

// RenameMonitorOperGroup renames an entry in the list MonitorOperGroup within
// the NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp_UpResiliency struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp_UpResiliency) RenameMonitorOperGroup(oldK, newK string) error {
	if _, ok := t.MonitorOperGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in MonitorOperGroup", newK)
	}

	e, ok := t.MonitorOperGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MonitorOperGroup", oldK)
	}
	e.OperGroup = &newK

	t.MonitorOperGroup[newK] = e
	delete(t.MonitorOperGroup, oldK)
	return nil
}

// GetOrCreateMonitorOperGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp_UpResiliency. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp_UpResiliency) GetOrCreateMonitorOperGroup(OperGroup string) *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp_UpResiliency_MonitorOperGroup {

	key := OperGroup

	if v, ok := t.MonitorOperGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMonitorOperGroup(OperGroup)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMonitorOperGroup got unexpected error: %v", err))
	}
	return v
}

// GetMonitorOperGroup retrieves the value with the specified key from
// the MonitorOperGroup map field of NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp_UpResiliency. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp_UpResiliency) GetMonitorOperGroup(OperGroup string) *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp_UpResiliency_MonitorOperGroup {

	if t == nil {
		return nil
	}

	key := OperGroup

	if lm, ok := t.MonitorOperGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteMonitorOperGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp_UpResiliency. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp_UpResiliency) DeleteMonitorOperGroup(OperGroup string) {
	key := OperGroup

	delete(t.MonitorOperGroup, key)
}

// AppendMonitorOperGroup appends the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp_UpResiliency_MonitorOperGroup struct to the
// list MonitorOperGroup of NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp_UpResiliency. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp_UpResiliency_MonitorOperGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp_UpResiliency) AppendMonitorOperGroup(v *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp_UpResiliency_MonitorOperGroup) error {
	if v.OperGroup == nil {
		return fmt.Errorf("invalid nil key received for OperGroup")
	}

	key := *v.OperGroup

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MonitorOperGroup == nil {
		t.MonitorOperGroup = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp_UpResiliency_MonitorOperGroup)
	}

	if _, ok := t.MonitorOperGroup[key]; ok {
		return fmt.Errorf("duplicate key for list MonitorOperGroup %v", key)
	}

	t.MonitorOperGroup[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp_UpResiliency
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp_UpResiliency) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.MonitorOperGroup {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp_UpResiliency) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp_UpResiliency"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp_UpResiliency) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp_UpResiliency) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp_UpResiliency.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp_UpResiliency) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp_UpResiliency_MonitorOperGroup represents the /nokia-conf/configure/groups/group/service/vpls/capture-sap/pfcp/up-resiliency/monitor-oper-group YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp_UpResiliency_MonitorOperGroup struct {
	HealthDrop *uint32 `path:"health-drop" module:"nokia-conf"`
	OperGroup  *string `path:"oper-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp_UpResiliency_MonitorOperGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp_UpResiliency_MonitorOperGroup) IsYANGGoStruct() {
}

// GetHealthDrop retrieves the value of the leaf HealthDrop from the NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp_UpResiliency_MonitorOperGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HealthDrop is set, it can
// safely use t.GetHealthDrop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HealthDrop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp_UpResiliency_MonitorOperGroup) GetHealthDrop() uint32 {
	if t == nil || t.HealthDrop == nil {
		return 1
	}
	return *t.HealthDrop
}

// GetOperGroup retrieves the value of the leaf OperGroup from the NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp_UpResiliency_MonitorOperGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OperGroup is set, it can
// safely use t.GetOperGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OperGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp_UpResiliency_MonitorOperGroup) GetOperGroup() string {
	if t == nil || t.OperGroup == nil {
		return ""
	}
	return *t.OperGroup
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp_UpResiliency_MonitorOperGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp_UpResiliency_MonitorOperGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HealthDrop == nil {
		var v uint32 = 1
		t.HealthDrop = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp_UpResiliency_MonitorOperGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp_UpResiliency_MonitorOperGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.OperGroup == nil {
		return nil, fmt.Errorf("nil value for key OperGroup")
	}

	return map[string]interface{}{
		"oper-group": *t.OperGroup,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp_UpResiliency_MonitorOperGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp_UpResiliency_MonitorOperGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp_UpResiliency_MonitorOperGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp_UpResiliency_MonitorOperGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp_UpResiliency_MonitorOperGroup.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pfcp_UpResiliency_MonitorOperGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pppoe represents the /nokia-conf/configure/groups/group/service/vpls/capture-sap/pppoe YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pppoe struct {
	Policy       *string `path:"policy" module:"nokia-conf"`
	PythonPolicy *string `path:"python-policy" module:"nokia-conf"`
	UserDb       *string `path:"user-db" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pppoe implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pppoe) IsYANGGoStruct() {}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pppoe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pppoe) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// GetPythonPolicy retrieves the value of the leaf PythonPolicy from the NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pppoe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PythonPolicy is set, it can
// safely use t.GetPythonPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PythonPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pppoe) GetPythonPolicy() string {
	if t == nil || t.PythonPolicy == nil {
		return ""
	}
	return *t.PythonPolicy
}

// GetUserDb retrieves the value of the leaf UserDb from the NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pppoe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UserDb is set, it can
// safely use t.GetUserDb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UserDb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pppoe) GetUserDb() string {
	if t == nil || t.UserDb == nil {
		return ""
	}
	return *t.UserDb
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pppoe
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pppoe) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pppoe) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pppoe"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pppoe) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pppoe) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pppoe.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_Pppoe) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_RouterSolicit represents the /nokia-conf/configure/groups/group/service/vpls/capture-sap/router-solicit YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_RouterSolicit struct {
	UserDb *string `path:"user-db" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_RouterSolicit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_RouterSolicit) IsYANGGoStruct() {}

// GetUserDb retrieves the value of the leaf UserDb from the NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_RouterSolicit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UserDb is set, it can
// safely use t.GetUserDb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UserDb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_RouterSolicit) GetUserDb() string {
	if t == nil || t.UserDb == nil {
		return ""
	}
	return *t.UserDb
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_RouterSolicit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_RouterSolicit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_RouterSolicit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_RouterSolicit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_RouterSolicit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_RouterSolicit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_RouterSolicit.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_RouterSolicit) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_TriggerPacket represents the /nokia-conf/configure/groups/group/service/vpls/capture-sap/trigger-packet YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_TriggerPacket struct {
	Arp        *bool `path:"arp" module:"nokia-conf"`
	Data       *bool `path:"data" module:"nokia-conf"`
	Dhcp       *bool `path:"dhcp" module:"nokia-conf"`
	Dhcp6      *bool `path:"dhcp6" module:"nokia-conf"`
	Pppoe      *bool `path:"pppoe" module:"nokia-conf"`
	RtrSolicit *bool `path:"rtr-solicit" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_TriggerPacket implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_TriggerPacket) IsYANGGoStruct() {}

// GetArp retrieves the value of the leaf Arp from the NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_TriggerPacket
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Arp is set, it can
// safely use t.GetArp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Arp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_TriggerPacket) GetArp() bool {
	if t == nil || t.Arp == nil {
		return false
	}
	return *t.Arp
}

// GetData retrieves the value of the leaf Data from the NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_TriggerPacket
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Data is set, it can
// safely use t.GetData() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Data == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_TriggerPacket) GetData() bool {
	if t == nil || t.Data == nil {
		return false
	}
	return *t.Data
}

// GetDhcp retrieves the value of the leaf Dhcp from the NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_TriggerPacket
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dhcp is set, it can
// safely use t.GetDhcp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dhcp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_TriggerPacket) GetDhcp() bool {
	if t == nil || t.Dhcp == nil {
		return false
	}
	return *t.Dhcp
}

// GetDhcp6 retrieves the value of the leaf Dhcp6 from the NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_TriggerPacket
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dhcp6 is set, it can
// safely use t.GetDhcp6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dhcp6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_TriggerPacket) GetDhcp6() bool {
	if t == nil || t.Dhcp6 == nil {
		return false
	}
	return *t.Dhcp6
}

// GetPppoe retrieves the value of the leaf Pppoe from the NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_TriggerPacket
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pppoe is set, it can
// safely use t.GetPppoe() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pppoe == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_TriggerPacket) GetPppoe() bool {
	if t == nil || t.Pppoe == nil {
		return false
	}
	return *t.Pppoe
}

// GetRtrSolicit retrieves the value of the leaf RtrSolicit from the NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_TriggerPacket
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RtrSolicit is set, it can
// safely use t.GetRtrSolicit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RtrSolicit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_TriggerPacket) GetRtrSolicit() bool {
	if t == nil || t.RtrSolicit == nil {
		return false
	}
	return *t.RtrSolicit
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_TriggerPacket
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_TriggerPacket) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Arp == nil {
		var v bool = false
		t.Arp = &v
	}
	if t.Data == nil {
		var v bool = false
		t.Data = &v
	}
	if t.Dhcp == nil {
		var v bool = false
		t.Dhcp = &v
	}
	if t.Dhcp6 == nil {
		var v bool = false
		t.Dhcp6 = &v
	}
	if t.Pppoe == nil {
		var v bool = false
		t.Pppoe = &v
	}
	if t.RtrSolicit == nil {
		var v bool = false
		t.RtrSolicit = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_TriggerPacket) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_TriggerPacket"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_TriggerPacket) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_TriggerPacket) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_TriggerPacket.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_CaptureSap_TriggerPacket) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_Endpoint represents the /nokia-conf/configure/groups/group/service/vpls/endpoint YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_Endpoint struct {
	BlockOnMeshFailure       *bool                                                                   `path:"block-on-mesh-failure" module:"nokia-conf"`
	Description              *string                                                                 `path:"description" module:"nokia-conf"`
	Fdb                      *NokiaConf_Configure_Groups_Group_Service_Vpls_Endpoint_Fdb             `path:"fdb" module:"nokia-conf"`
	IgnoreStandbySignaling   *bool                                                                   `path:"ignore-standby-signaling" module:"nokia-conf"`
	Name                     *string                                                                 `path:"name" module:"nokia-conf"`
	RevertTime               NokiaConf_Configure_Groups_Group_Service_Vpls_Endpoint_RevertTime_Union `path:"revert-time" module:"nokia-conf"`
	SuppressStandbySignaling *bool                                                                   `path:"suppress-standby-signaling" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_Endpoint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Endpoint) IsYANGGoStruct() {}

// GetOrCreateFdb retrieves the value of the Fdb field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Endpoint) GetOrCreateFdb() *NokiaConf_Configure_Groups_Group_Service_Vpls_Endpoint_Fdb {
	if t.Fdb != nil {
		return t.Fdb
	}
	t.Fdb = &NokiaConf_Configure_Groups_Group_Service_Vpls_Endpoint_Fdb{}
	return t.Fdb
}

// GetFdb returns the value of the Fdb struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_Endpoint. If the receiver or the field Fdb is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Endpoint) GetFdb() *NokiaConf_Configure_Groups_Group_Service_Vpls_Endpoint_Fdb {
	if t != nil && t.Fdb != nil {
		return t.Fdb
	}
	return nil
}

// GetBlockOnMeshFailure retrieves the value of the leaf BlockOnMeshFailure from the NokiaConf_Configure_Groups_Group_Service_Vpls_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BlockOnMeshFailure is set, it can
// safely use t.GetBlockOnMeshFailure() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BlockOnMeshFailure == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Endpoint) GetBlockOnMeshFailure() bool {
	if t == nil || t.BlockOnMeshFailure == nil {
		return false
	}
	return *t.BlockOnMeshFailure
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Vpls_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Endpoint) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetIgnoreStandbySignaling retrieves the value of the leaf IgnoreStandbySignaling from the NokiaConf_Configure_Groups_Group_Service_Vpls_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreStandbySignaling is set, it can
// safely use t.GetIgnoreStandbySignaling() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreStandbySignaling == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Endpoint) GetIgnoreStandbySignaling() bool {
	if t == nil || t.IgnoreStandbySignaling == nil {
		return false
	}
	return *t.IgnoreStandbySignaling
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Service_Vpls_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Endpoint) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetRevertTime retrieves the value of the leaf RevertTime from the NokiaConf_Configure_Groups_Group_Service_Vpls_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RevertTime is set, it can
// safely use t.GetRevertTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RevertTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Endpoint) GetRevertTime() NokiaConf_Configure_Groups_Group_Service_Vpls_Endpoint_RevertTime_Union {
	if t == nil || t.RevertTime == nil {
		return NokiaTypesServices_RevertTime_Enum_immediate
	}
	return t.RevertTime
}

// GetSuppressStandbySignaling retrieves the value of the leaf SuppressStandbySignaling from the NokiaConf_Configure_Groups_Group_Service_Vpls_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SuppressStandbySignaling is set, it can
// safely use t.GetSuppressStandbySignaling() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SuppressStandbySignaling == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Endpoint) GetSuppressStandbySignaling() bool {
	if t == nil || t.SuppressStandbySignaling == nil {
		return true
	}
	return *t.SuppressStandbySignaling
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_Endpoint
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Endpoint) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BlockOnMeshFailure == nil {
		var v bool = false
		t.BlockOnMeshFailure = &v
	}
	if t.IgnoreStandbySignaling == nil {
		var v bool = false
		t.IgnoreStandbySignaling = &v
	}
	if t.RevertTime == nil {
		t.RevertTime = NokiaTypesServices_RevertTime_Enum_immediate
	}
	if t.SuppressStandbySignaling == nil {
		var v bool = true
		t.SuppressStandbySignaling = &v
	}
	t.Fdb.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vpls_Endpoint struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Endpoint) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Endpoint) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_Endpoint"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Endpoint) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Endpoint) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_Endpoint.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Endpoint) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_Endpoint_Fdb represents the /nokia-conf/configure/groups/group/service/vpls/endpoint/fdb YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_Endpoint_Fdb struct {
	AutoLearnMacProtect            *bool                                                  `path:"auto-learn-mac-protect" module:"nokia-conf"`
	MacPinning                     *bool                                                  `path:"mac-pinning" module:"nokia-conf"`
	MaximumMacAddresses            *int32                                                 `path:"maximum-mac-addresses" module:"nokia-conf"`
	ProtectedSrcMacViolationAction E_NokiaTypesServices_SdpProtectedSrcMacViolationAction `path:"protected-src-mac-violation-action" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_Endpoint_Fdb implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Endpoint_Fdb) IsYANGGoStruct() {}

// GetAutoLearnMacProtect retrieves the value of the leaf AutoLearnMacProtect from the NokiaConf_Configure_Groups_Group_Service_Vpls_Endpoint_Fdb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoLearnMacProtect is set, it can
// safely use t.GetAutoLearnMacProtect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoLearnMacProtect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Endpoint_Fdb) GetAutoLearnMacProtect() bool {
	if t == nil || t.AutoLearnMacProtect == nil {
		return false
	}
	return *t.AutoLearnMacProtect
}

// GetMacPinning retrieves the value of the leaf MacPinning from the NokiaConf_Configure_Groups_Group_Service_Vpls_Endpoint_Fdb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacPinning is set, it can
// safely use t.GetMacPinning() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacPinning == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Endpoint_Fdb) GetMacPinning() bool {
	if t == nil || t.MacPinning == nil {
		return false
	}
	return *t.MacPinning
}

// GetMaximumMacAddresses retrieves the value of the leaf MaximumMacAddresses from the NokiaConf_Configure_Groups_Group_Service_Vpls_Endpoint_Fdb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumMacAddresses is set, it can
// safely use t.GetMaximumMacAddresses() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumMacAddresses == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Endpoint_Fdb) GetMaximumMacAddresses() int32 {
	if t == nil || t.MaximumMacAddresses == nil {
		return 0
	}
	return *t.MaximumMacAddresses
}

// GetProtectedSrcMacViolationAction retrieves the value of the leaf ProtectedSrcMacViolationAction from the NokiaConf_Configure_Groups_Group_Service_Vpls_Endpoint_Fdb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProtectedSrcMacViolationAction is set, it can
// safely use t.GetProtectedSrcMacViolationAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProtectedSrcMacViolationAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Endpoint_Fdb) GetProtectedSrcMacViolationAction() E_NokiaTypesServices_SdpProtectedSrcMacViolationAction {
	if t == nil || t.ProtectedSrcMacViolationAction == 0 {
		return 0
	}
	return t.ProtectedSrcMacViolationAction
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_Endpoint_Fdb
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Endpoint_Fdb) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AutoLearnMacProtect == nil {
		var v bool = false
		t.AutoLearnMacProtect = &v
	}
	if t.MacPinning == nil {
		var v bool = false
		t.MacPinning = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Endpoint_Fdb) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_Endpoint_Fdb"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Endpoint_Fdb) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Endpoint_Fdb) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_Endpoint_Fdb.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Endpoint_Fdb) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm represents the /nokia-conf/configure/groups/group/service/vpls/eth-cfm YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm struct {
	Mep map[NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Key]*NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep `path:"mep" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm) IsYANGGoStruct() {}

// NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Key represents the key for list Mep of element /nokia-conf/configure/groups/group/service/vpls/eth-cfm.
type NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Key struct {
	MdAdminName string                                                               `path:"md-admin-name"`
	MaAdminName string                                                               `path:"ma-admin-name"`
	MepId       NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_MepId_Union `path:"mep-id"`
}

// NewMep creates a new entry in the Mep list of the
// NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm) NewMep(MdAdminName string, MaAdminName string, MepId NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_MepId_Union) (*NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mep == nil {
		t.Mep = make(map[NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Key]*NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep)
	}

	key := NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mep[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mep", key)
	}

	t.Mep[key] = &NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep{
		MdAdminName: &MdAdminName,
		MaAdminName: &MaAdminName,
		MepId:       MepId,
	}

	return t.Mep[key], nil
}

// RenameMep renames an entry in the list Mep within
// the NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm) RenameMep(oldK, newK NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Key) error {
	if _, ok := t.Mep[newK]; ok {
		return fmt.Errorf("key %v already exists in Mep", newK)
	}

	e, ok := t.Mep[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mep", oldK)
	}
	e.MdAdminName = &newK.MdAdminName
	e.MaAdminName = &newK.MaAdminName
	e.MepId = newK.MepId

	t.Mep[newK] = e
	delete(t.Mep, oldK)
	return nil
}

// GetOrCreateMep retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm) GetOrCreateMep(MdAdminName string, MaAdminName string, MepId NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_MepId_Union) *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep {

	key := NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	if v, ok := t.Mep[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMep(MdAdminName, MaAdminName, MepId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMep got unexpected error: %v", err))
	}
	return v
}

// GetMep retrieves the value with the specified key from
// the Mep map field of NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm) GetMep(MdAdminName string, MaAdminName string, MepId NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_MepId_Union) *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	if lm, ok := t.Mep[key]; ok {
		return lm
	}
	return nil
}

// DeleteMep deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm) DeleteMep(MdAdminName string, MaAdminName string, MepId NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_MepId_Union) {
	key := NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	delete(t.Mep, key)
}

// AppendMep appends the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep struct to the
// list Mep of NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm) AppendMep(v *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep) error {
	if v.MdAdminName == nil {
		return fmt.Errorf("invalid nil key for MdAdminName")
	}

	if v.MaAdminName == nil {
		return fmt.Errorf("invalid nil key for MaAdminName")
	}

	key := NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Key{
		MdAdminName: *v.MdAdminName,
		MaAdminName: *v.MaAdminName,
		MepId:       v.MepId,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mep == nil {
		t.Mep = make(map[NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Key]*NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep)
	}

	if _, ok := t.Mep[key]; ok {
		return fmt.Errorf("duplicate key for list Mep %v", key)
	}

	t.Mep[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Mep {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep represents the /nokia-conf/configure/groups/group/service/vpls/eth-cfm/mep YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep struct {
	AdminState           E_NokiaTypesSros_AdminState                                                 `path:"admin-state" module:"nokia-conf"`
	AlarmNotification    *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_AlarmNotification `path:"alarm-notification" module:"nokia-conf"`
	Ccm                  *bool                                                                       `path:"ccm" module:"nokia-conf"`
	CcmLtmPriority       *uint8                                                                      `path:"ccm-ltm-priority" module:"nokia-conf"`
	CcmPaddingSize       *uint32                                                                     `path:"ccm-padding-size" module:"nokia-conf"`
	CfmVlanTag           *string                                                                     `path:"cfm-vlan-tag" module:"nokia-conf"`
	Description          *string                                                                     `path:"description" module:"nokia-conf"`
	EthTest              *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_EthTest           `path:"eth-test" module:"nokia-conf" yangPresence:"true"`
	Grace                *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Grace             `path:"grace" module:"nokia-conf"`
	LowPriorityDefect    E_NokiaTypesEthCfm_LowestAlarmPriority                                      `path:"low-priority-defect" module:"nokia-conf"`
	MaAdminName          *string                                                                     `path:"ma-admin-name" module:"nokia-conf"`
	MacAddress           *string                                                                     `path:"mac-address" module:"nokia-conf"`
	MdAdminName          *string                                                                     `path:"md-admin-name" module:"nokia-conf"`
	MepId                NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_MepId_Union        `path:"mep-id" module:"nokia-conf"`
	OneWayDelayThreshold *uint32                                                                     `path:"one-way-delay-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep) IsYANGGoStruct() {}

// GetOrCreateAlarmNotification retrieves the value of the AlarmNotification field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep) GetOrCreateAlarmNotification() *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_AlarmNotification {
	if t.AlarmNotification != nil {
		return t.AlarmNotification
	}
	t.AlarmNotification = &NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_AlarmNotification{}
	return t.AlarmNotification
}

// GetOrCreateEthTest retrieves the value of the EthTest field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep) GetOrCreateEthTest() *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_EthTest {
	if t.EthTest != nil {
		return t.EthTest
	}
	t.EthTest = &NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_EthTest{}
	return t.EthTest
}

// GetOrCreateGrace retrieves the value of the Grace field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep) GetOrCreateGrace() *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Grace {
	if t.Grace != nil {
		return t.Grace
	}
	t.Grace = &NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Grace{}
	return t.Grace
}

// GetAlarmNotification returns the value of the AlarmNotification struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep. If the receiver or the field AlarmNotification is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep) GetAlarmNotification() *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_AlarmNotification {
	if t != nil && t.AlarmNotification != nil {
		return t.AlarmNotification
	}
	return nil
}

// GetEthTest returns the value of the EthTest struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep. If the receiver or the field EthTest is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep) GetEthTest() *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_EthTest {
	if t != nil && t.EthTest != nil {
		return t.EthTest
	}
	return nil
}

// GetGrace returns the value of the Grace struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep. If the receiver or the field Grace is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep) GetGrace() *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Grace {
	if t != nil && t.Grace != nil {
		return t.Grace
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetCcm retrieves the value of the leaf Ccm from the NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ccm is set, it can
// safely use t.GetCcm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ccm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep) GetCcm() bool {
	if t == nil || t.Ccm == nil {
		return false
	}
	return *t.Ccm
}

// GetCcmLtmPriority retrieves the value of the leaf CcmLtmPriority from the NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CcmLtmPriority is set, it can
// safely use t.GetCcmLtmPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CcmLtmPriority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep) GetCcmLtmPriority() uint8 {
	if t == nil || t.CcmLtmPriority == nil {
		return 7
	}
	return *t.CcmLtmPriority
}

// GetCcmPaddingSize retrieves the value of the leaf CcmPaddingSize from the NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CcmPaddingSize is set, it can
// safely use t.GetCcmPaddingSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CcmPaddingSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep) GetCcmPaddingSize() uint32 {
	if t == nil || t.CcmPaddingSize == nil {
		return 0
	}
	return *t.CcmPaddingSize
}

// GetCfmVlanTag retrieves the value of the leaf CfmVlanTag from the NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CfmVlanTag is set, it can
// safely use t.GetCfmVlanTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CfmVlanTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep) GetCfmVlanTag() string {
	if t == nil || t.CfmVlanTag == nil {
		return ""
	}
	return *t.CfmVlanTag
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetLowPriorityDefect retrieves the value of the leaf LowPriorityDefect from the NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowPriorityDefect is set, it can
// safely use t.GetLowPriorityDefect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowPriorityDefect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep) GetLowPriorityDefect() E_NokiaTypesEthCfm_LowestAlarmPriority {
	if t == nil || t.LowPriorityDefect == 0 {
		return NokiaTypesEthCfm_LowestAlarmPriority_mac_rem_err_xcon
	}
	return t.LowPriorityDefect
}

// GetMaAdminName retrieves the value of the leaf MaAdminName from the NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaAdminName is set, it can
// safely use t.GetMaAdminName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaAdminName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep) GetMaAdminName() string {
	if t == nil || t.MaAdminName == nil {
		return ""
	}
	return *t.MaAdminName
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return ""
	}
	return *t.MacAddress
}

// GetMdAdminName retrieves the value of the leaf MdAdminName from the NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MdAdminName is set, it can
// safely use t.GetMdAdminName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MdAdminName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep) GetMdAdminName() string {
	if t == nil || t.MdAdminName == nil {
		return ""
	}
	return *t.MdAdminName
}

// GetMepId retrieves the value of the leaf MepId from the NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MepId is set, it can
// safely use t.GetMepId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MepId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep) GetMepId() NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_MepId_Union {
	if t == nil || t.MepId == nil {
		return nil
	}
	return t.MepId
}

// GetOneWayDelayThreshold retrieves the value of the leaf OneWayDelayThreshold from the NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OneWayDelayThreshold is set, it can
// safely use t.GetOneWayDelayThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OneWayDelayThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep) GetOneWayDelayThreshold() uint32 {
	if t == nil || t.OneWayDelayThreshold == nil {
		return 3
	}
	return *t.OneWayDelayThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Ccm == nil {
		var v bool = false
		t.Ccm = &v
	}
	if t.CcmLtmPriority == nil {
		var v uint8 = 7
		t.CcmLtmPriority = &v
	}
	if t.LowPriorityDefect == 0 {
		t.LowPriorityDefect = NokiaTypesEthCfm_LowestAlarmPriority_mac_rem_err_xcon
	}
	if t.OneWayDelayThreshold == nil {
		var v uint32 = 3
		t.OneWayDelayThreshold = &v
	}
	t.AlarmNotification.PopulateDefaults()
	t.EthTest.PopulateDefaults()
	t.Grace.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MaAdminName == nil {
		return nil, fmt.Errorf("nil value for key MaAdminName")
	}

	if t.MdAdminName == nil {
		return nil, fmt.Errorf("nil value for key MdAdminName")
	}

	return map[string]interface{}{
		"ma-admin-name": *t.MaAdminName,
		"md-admin-name": *t.MdAdminName,
		"mep-id":        t.MepId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_AlarmNotification represents the /nokia-conf/configure/groups/group/service/vpls/eth-cfm/mep/alarm-notification YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_AlarmNotification struct {
	FngAlarmTime *int32 `path:"fng-alarm-time" module:"nokia-conf"`
	FngResetTime *int32 `path:"fng-reset-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_AlarmNotification implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_AlarmNotification) IsYANGGoStruct() {}

// GetFngAlarmTime retrieves the value of the leaf FngAlarmTime from the NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_AlarmNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FngAlarmTime is set, it can
// safely use t.GetFngAlarmTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FngAlarmTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_AlarmNotification) GetFngAlarmTime() int32 {
	if t == nil || t.FngAlarmTime == nil {
		return 0
	}
	return *t.FngAlarmTime
}

// GetFngResetTime retrieves the value of the leaf FngResetTime from the NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_AlarmNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FngResetTime is set, it can
// safely use t.GetFngResetTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FngResetTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_AlarmNotification) GetFngResetTime() int32 {
	if t == nil || t.FngResetTime == nil {
		return 0
	}
	return *t.FngResetTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_AlarmNotification
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_AlarmNotification) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_AlarmNotification) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_AlarmNotification"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_AlarmNotification) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_AlarmNotification) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_AlarmNotification.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_AlarmNotification) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_EthTest represents the /nokia-conf/configure/groups/group/service/vpls/eth-cfm/mep/eth-test YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_EthTest struct {
	BitErrorThreshold *uint32                                                                       `path:"bit-error-threshold" module:"nokia-conf"`
	TestPattern       *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_EthTest_TestPattern `path:"test-pattern" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_EthTest implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_EthTest) IsYANGGoStruct() {}

// GetOrCreateTestPattern retrieves the value of the TestPattern field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_EthTest) GetOrCreateTestPattern() *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_EthTest_TestPattern {
	if t.TestPattern != nil {
		return t.TestPattern
	}
	t.TestPattern = &NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_EthTest_TestPattern{}
	return t.TestPattern
}

// GetTestPattern returns the value of the TestPattern struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_EthTest. If the receiver or the field TestPattern is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_EthTest) GetTestPattern() *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_EthTest_TestPattern {
	if t != nil && t.TestPattern != nil {
		return t.TestPattern
	}
	return nil
}

// GetBitErrorThreshold retrieves the value of the leaf BitErrorThreshold from the NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_EthTest
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BitErrorThreshold is set, it can
// safely use t.GetBitErrorThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BitErrorThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_EthTest) GetBitErrorThreshold() uint32 {
	if t == nil || t.BitErrorThreshold == nil {
		return 1
	}
	return *t.BitErrorThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_EthTest
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_EthTest) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BitErrorThreshold == nil {
		var v uint32 = 1
		t.BitErrorThreshold = &v
	}
	t.TestPattern.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_EthTest) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_EthTest"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_EthTest) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_EthTest) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_EthTest.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_EthTest) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_EthTest_TestPattern represents the /nokia-conf/configure/groups/group/service/vpls/eth-cfm/mep/eth-test/test-pattern YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_EthTest_TestPattern struct {
	CrcTlv  *bool                                                                                  `path:"crc-tlv" module:"nokia-conf"`
	Pattern E_NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_EthTest_TestPattern_Pattern `path:"pattern" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_EthTest_TestPattern implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_EthTest_TestPattern) IsYANGGoStruct() {
}

// GetCrcTlv retrieves the value of the leaf CrcTlv from the NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_EthTest_TestPattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CrcTlv is set, it can
// safely use t.GetCrcTlv() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CrcTlv == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_EthTest_TestPattern) GetCrcTlv() bool {
	if t == nil || t.CrcTlv == nil {
		return false
	}
	return *t.CrcTlv
}

// GetPattern retrieves the value of the leaf Pattern from the NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_EthTest_TestPattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pattern is set, it can
// safely use t.GetPattern() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pattern == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_EthTest_TestPattern) GetPattern() E_NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_EthTest_TestPattern_Pattern {
	if t == nil || t.Pattern == 0 {
		return NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_EthTest_TestPattern_Pattern_all_zeros
	}
	return t.Pattern
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_EthTest_TestPattern
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_EthTest_TestPattern) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CrcTlv == nil {
		var v bool = false
		t.CrcTlv = &v
	}
	if t.Pattern == 0 {
		t.Pattern = NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_EthTest_TestPattern_Pattern_all_zeros
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_EthTest_TestPattern) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_EthTest_TestPattern"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_EthTest_TestPattern) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_EthTest_TestPattern) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_EthTest_TestPattern.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_EthTest_TestPattern) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Grace represents the /nokia-conf/configure/groups/group/service/vpls/eth-cfm/mep/grace YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Grace struct {
	EthEd       *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Grace_EthEd       `path:"eth-ed" module:"nokia-conf"`
	EthVsmGrace *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Grace_EthVsmGrace `path:"eth-vsm-grace" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Grace implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Grace) IsYANGGoStruct() {}

// GetOrCreateEthEd retrieves the value of the EthEd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Grace) GetOrCreateEthEd() *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Grace_EthEd {
	if t.EthEd != nil {
		return t.EthEd
	}
	t.EthEd = &NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Grace_EthEd{}
	return t.EthEd
}

// GetOrCreateEthVsmGrace retrieves the value of the EthVsmGrace field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Grace) GetOrCreateEthVsmGrace() *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Grace_EthVsmGrace {
	if t.EthVsmGrace != nil {
		return t.EthVsmGrace
	}
	t.EthVsmGrace = &NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Grace_EthVsmGrace{}
	return t.EthVsmGrace
}

// GetEthEd returns the value of the EthEd struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Grace. If the receiver or the field EthEd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Grace) GetEthEd() *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Grace_EthEd {
	if t != nil && t.EthEd != nil {
		return t.EthEd
	}
	return nil
}

// GetEthVsmGrace returns the value of the EthVsmGrace struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Grace. If the receiver or the field EthVsmGrace is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Grace) GetEthVsmGrace() *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Grace_EthVsmGrace {
	if t != nil && t.EthVsmGrace != nil {
		return t.EthVsmGrace
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Grace
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Grace) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.EthEd.PopulateDefaults()
	t.EthVsmGrace.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Grace) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Grace"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Grace) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Grace) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Grace.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Grace) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Grace_EthEd represents the /nokia-conf/configure/groups/group/service/vpls/eth-cfm/mep/grace/eth-ed YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Grace_EthEd struct {
	MaxRxDefectWindow *uint32 `path:"max-rx-defect-window" module:"nokia-conf"`
	Priority          *int32  `path:"priority" module:"nokia-conf"`
	RxEthEd           *bool   `path:"rx-eth-ed" module:"nokia-conf"`
	TxEthEd           *bool   `path:"tx-eth-ed" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Grace_EthEd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Grace_EthEd) IsYANGGoStruct() {}

// GetMaxRxDefectWindow retrieves the value of the leaf MaxRxDefectWindow from the NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRxDefectWindow is set, it can
// safely use t.GetMaxRxDefectWindow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRxDefectWindow == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Grace_EthEd) GetMaxRxDefectWindow() uint32 {
	if t == nil || t.MaxRxDefectWindow == nil {
		return 0
	}
	return *t.MaxRxDefectWindow
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Grace_EthEd) GetPriority() int32 {
	if t == nil || t.Priority == nil {
		return 0
	}
	return *t.Priority
}

// GetRxEthEd retrieves the value of the leaf RxEthEd from the NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RxEthEd is set, it can
// safely use t.GetRxEthEd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RxEthEd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Grace_EthEd) GetRxEthEd() bool {
	if t == nil || t.RxEthEd == nil {
		return true
	}
	return *t.RxEthEd
}

// GetTxEthEd retrieves the value of the leaf TxEthEd from the NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxEthEd is set, it can
// safely use t.GetTxEthEd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxEthEd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Grace_EthEd) GetTxEthEd() bool {
	if t == nil || t.TxEthEd == nil {
		return false
	}
	return *t.TxEthEd
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Grace_EthEd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Grace_EthEd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RxEthEd == nil {
		var v bool = true
		t.RxEthEd = &v
	}
	if t.TxEthEd == nil {
		var v bool = false
		t.TxEthEd = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Grace_EthEd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Grace_EthEd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Grace_EthEd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Grace_EthEd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Grace_EthEd.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Grace_EthEd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Grace_EthVsmGrace represents the /nokia-conf/configure/groups/group/service/vpls/eth-cfm/mep/grace/eth-vsm-grace YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Grace_EthVsmGrace struct {
	RxEthVsmGrace *bool `path:"rx-eth-vsm-grace" module:"nokia-conf"`
	TxEthVsmGrace *bool `path:"tx-eth-vsm-grace" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Grace_EthVsmGrace implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Grace_EthVsmGrace) IsYANGGoStruct() {}

// GetRxEthVsmGrace retrieves the value of the leaf RxEthVsmGrace from the NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Grace_EthVsmGrace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RxEthVsmGrace is set, it can
// safely use t.GetRxEthVsmGrace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RxEthVsmGrace == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Grace_EthVsmGrace) GetRxEthVsmGrace() bool {
	if t == nil || t.RxEthVsmGrace == nil {
		return true
	}
	return *t.RxEthVsmGrace
}

// GetTxEthVsmGrace retrieves the value of the leaf TxEthVsmGrace from the NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Grace_EthVsmGrace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxEthVsmGrace is set, it can
// safely use t.GetTxEthVsmGrace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxEthVsmGrace == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Grace_EthVsmGrace) GetTxEthVsmGrace() bool {
	if t == nil || t.TxEthVsmGrace == nil {
		return true
	}
	return *t.TxEthVsmGrace
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Grace_EthVsmGrace
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Grace_EthVsmGrace) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RxEthVsmGrace == nil {
		var v bool = true
		t.RxEthVsmGrace = &v
	}
	if t.TxEthVsmGrace == nil {
		var v bool = true
		t.TxEthVsmGrace = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Grace_EthVsmGrace) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Grace_EthVsmGrace"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Grace_EthVsmGrace) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Grace_EthVsmGrace) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Grace_EthVsmGrace.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_EthCfm_Mep_Grace_EthVsmGrace) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb represents the /nokia-conf/configure/groups/group/service/vpls/fdb YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb struct {
	DiscardUnknown    *bool                                                          `path:"discard-unknown" module:"nokia-conf"`
	MacLearning       *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacLearning `path:"mac-learning" module:"nokia-conf"`
	MacMove           *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove     `path:"mac-move" module:"nokia-conf"`
	MacSubnetLength   *int32                                                         `path:"mac-subnet-length" module:"nokia-conf"`
	SelectiveLearning *bool                                                          `path:"selective-learning" module:"nokia-conf"`
	StaticMac         *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_StaticMac   `path:"static-mac" module:"nokia-conf"`
	Table             *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_Table       `path:"table" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb) IsYANGGoStruct() {}

// GetOrCreateMacLearning retrieves the value of the MacLearning field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb) GetOrCreateMacLearning() *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacLearning {
	if t.MacLearning != nil {
		return t.MacLearning
	}
	t.MacLearning = &NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacLearning{}
	return t.MacLearning
}

// GetOrCreateMacMove retrieves the value of the MacMove field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb) GetOrCreateMacMove() *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove {
	if t.MacMove != nil {
		return t.MacMove
	}
	t.MacMove = &NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove{}
	return t.MacMove
}

// GetOrCreateStaticMac retrieves the value of the StaticMac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb) GetOrCreateStaticMac() *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_StaticMac {
	if t.StaticMac != nil {
		return t.StaticMac
	}
	t.StaticMac = &NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_StaticMac{}
	return t.StaticMac
}

// GetOrCreateTable retrieves the value of the Table field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb) GetOrCreateTable() *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_Table {
	if t.Table != nil {
		return t.Table
	}
	t.Table = &NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_Table{}
	return t.Table
}

// GetMacLearning returns the value of the MacLearning struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb. If the receiver or the field MacLearning is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb) GetMacLearning() *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacLearning {
	if t != nil && t.MacLearning != nil {
		return t.MacLearning
	}
	return nil
}

// GetMacMove returns the value of the MacMove struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb. If the receiver or the field MacMove is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb) GetMacMove() *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove {
	if t != nil && t.MacMove != nil {
		return t.MacMove
	}
	return nil
}

// GetStaticMac returns the value of the StaticMac struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb. If the receiver or the field StaticMac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb) GetStaticMac() *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_StaticMac {
	if t != nil && t.StaticMac != nil {
		return t.StaticMac
	}
	return nil
}

// GetTable returns the value of the Table struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb. If the receiver or the field Table is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb) GetTable() *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_Table {
	if t != nil && t.Table != nil {
		return t.Table
	}
	return nil
}

// GetDiscardUnknown retrieves the value of the leaf DiscardUnknown from the NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DiscardUnknown is set, it can
// safely use t.GetDiscardUnknown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DiscardUnknown == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb) GetDiscardUnknown() bool {
	if t == nil || t.DiscardUnknown == nil {
		return false
	}
	return *t.DiscardUnknown
}

// GetMacSubnetLength retrieves the value of the leaf MacSubnetLength from the NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacSubnetLength is set, it can
// safely use t.GetMacSubnetLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacSubnetLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb) GetMacSubnetLength() int32 {
	if t == nil || t.MacSubnetLength == nil {
		return 48
	}
	return *t.MacSubnetLength
}

// GetSelectiveLearning retrieves the value of the leaf SelectiveLearning from the NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SelectiveLearning is set, it can
// safely use t.GetSelectiveLearning() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SelectiveLearning == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb) GetSelectiveLearning() bool {
	if t == nil || t.SelectiveLearning == nil {
		return false
	}
	return *t.SelectiveLearning
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DiscardUnknown == nil {
		var v bool = false
		t.DiscardUnknown = &v
	}
	if t.MacSubnetLength == nil {
		var v int32 = 48
		t.MacSubnetLength = &v
	}
	if t.SelectiveLearning == nil {
		var v bool = false
		t.SelectiveLearning = &v
	}
	t.MacLearning.PopulateDefaults()
	t.MacMove.PopulateDefaults()
	t.StaticMac.PopulateDefaults()
	t.Table.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacLearning represents the /nokia-conf/configure/groups/group/service/vpls/fdb/mac-learning YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacLearning struct {
	Aging         *bool  `path:"aging" module:"nokia-conf"`
	Learning      *bool  `path:"learning" module:"nokia-conf"`
	LocalAgeTime  *int32 `path:"local-age-time" module:"nokia-conf"`
	RemoteAgeTime *int32 `path:"remote-age-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacLearning implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacLearning) IsYANGGoStruct() {}

// GetAging retrieves the value of the leaf Aging from the NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacLearning
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Aging is set, it can
// safely use t.GetAging() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Aging == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacLearning) GetAging() bool {
	if t == nil || t.Aging == nil {
		return true
	}
	return *t.Aging
}

// GetLearning retrieves the value of the leaf Learning from the NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacLearning
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Learning is set, it can
// safely use t.GetLearning() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Learning == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacLearning) GetLearning() bool {
	if t == nil || t.Learning == nil {
		return true
	}
	return *t.Learning
}

// GetLocalAgeTime retrieves the value of the leaf LocalAgeTime from the NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacLearning
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalAgeTime is set, it can
// safely use t.GetLocalAgeTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalAgeTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacLearning) GetLocalAgeTime() int32 {
	if t == nil || t.LocalAgeTime == nil {
		return 300
	}
	return *t.LocalAgeTime
}

// GetRemoteAgeTime retrieves the value of the leaf RemoteAgeTime from the NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacLearning
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteAgeTime is set, it can
// safely use t.GetRemoteAgeTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteAgeTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacLearning) GetRemoteAgeTime() int32 {
	if t == nil || t.RemoteAgeTime == nil {
		return 900
	}
	return *t.RemoteAgeTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacLearning
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacLearning) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Aging == nil {
		var v bool = true
		t.Aging = &v
	}
	if t.Learning == nil {
		var v bool = true
		t.Learning = &v
	}
	if t.LocalAgeTime == nil {
		var v int32 = 300
		t.LocalAgeTime = &v
	}
	if t.RemoteAgeTime == nil {
		var v int32 = 900
		t.RemoteAgeTime = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacLearning) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacLearning"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacLearning) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacLearning) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacLearning.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacLearning) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove represents the /nokia-conf/configure/groups/group/service/vpls/fdb/mac-move YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove struct {
	AdminState                E_NokiaTypesSros_AdminState                                                    `path:"admin-state" module:"nokia-conf"`
	HoldDownTime              *uint32                                                                        `path:"hold-down-time" module:"nokia-conf"`
	MoveFrequency             *uint32                                                                        `path:"move-frequency" module:"nokia-conf"`
	PrimaryCumulativeFactor   *uint32                                                                        `path:"primary-cumulative-factor" module:"nokia-conf"`
	RetryCount                NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove_RetryCount_Union     `path:"retry-count" module:"nokia-conf"`
	Sap                       map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove_Sap      `path:"sap" module:"nokia-conf"`
	SecondaryCumulativeFactor *uint32                                                                        `path:"secondary-cumulative-factor" module:"nokia-conf"`
	SpokeSdp                  map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove_SpokeSdp `path:"spoke-sdp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove) IsYANGGoStruct() {}

// NewSap creates a new entry in the Sap list of the
// NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove) NewSap(SapId string) (*NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove_Sap, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sap == nil {
		t.Sap = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove_Sap)
	}

	key := SapId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Sap[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Sap", key)
	}

	t.Sap[key] = &NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove_Sap{
		SapId: &SapId,
	}

	return t.Sap[key], nil
}

// RenameSap renames an entry in the list Sap within
// the NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove) RenameSap(oldK, newK string) error {
	if _, ok := t.Sap[newK]; ok {
		return fmt.Errorf("key %v already exists in Sap", newK)
	}

	e, ok := t.Sap[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Sap", oldK)
	}
	e.SapId = &newK

	t.Sap[newK] = e
	delete(t.Sap, oldK)
	return nil
}

// GetOrCreateSap retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove) GetOrCreateSap(SapId string) *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove_Sap {

	key := SapId

	if v, ok := t.Sap[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSap(SapId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSap got unexpected error: %v", err))
	}
	return v
}

// GetSap retrieves the value with the specified key from
// the Sap map field of NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove) GetSap(SapId string) *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove_Sap {

	if t == nil {
		return nil
	}

	key := SapId

	if lm, ok := t.Sap[key]; ok {
		return lm
	}
	return nil
}

// DeleteSap deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove) DeleteSap(SapId string) {
	key := SapId

	delete(t.Sap, key)
}

// AppendSap appends the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove_Sap struct to the
// list Sap of NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove_Sap already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove) AppendSap(v *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove_Sap) error {
	if v.SapId == nil {
		return fmt.Errorf("invalid nil key received for SapId")
	}

	key := *v.SapId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sap == nil {
		t.Sap = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove_Sap)
	}

	if _, ok := t.Sap[key]; ok {
		return fmt.Errorf("duplicate key for list Sap %v", key)
	}

	t.Sap[key] = v
	return nil
}

// NewSpokeSdp creates a new entry in the SpokeSdp list of the
// NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove) NewSpokeSdp(SdpBindId string) (*NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove_SpokeSdp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SpokeSdp == nil {
		t.SpokeSdp = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove_SpokeSdp)
	}

	key := SdpBindId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SpokeSdp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SpokeSdp", key)
	}

	t.SpokeSdp[key] = &NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove_SpokeSdp{
		SdpBindId: &SdpBindId,
	}

	return t.SpokeSdp[key], nil
}

// RenameSpokeSdp renames an entry in the list SpokeSdp within
// the NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove) RenameSpokeSdp(oldK, newK string) error {
	if _, ok := t.SpokeSdp[newK]; ok {
		return fmt.Errorf("key %v already exists in SpokeSdp", newK)
	}

	e, ok := t.SpokeSdp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SpokeSdp", oldK)
	}
	e.SdpBindId = &newK

	t.SpokeSdp[newK] = e
	delete(t.SpokeSdp, oldK)
	return nil
}

// GetOrCreateSpokeSdp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove) GetOrCreateSpokeSdp(SdpBindId string) *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove_SpokeSdp {

	key := SdpBindId

	if v, ok := t.SpokeSdp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSpokeSdp(SdpBindId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSpokeSdp got unexpected error: %v", err))
	}
	return v
}

// GetSpokeSdp retrieves the value with the specified key from
// the SpokeSdp map field of NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove) GetSpokeSdp(SdpBindId string) *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove_SpokeSdp {

	if t == nil {
		return nil
	}

	key := SdpBindId

	if lm, ok := t.SpokeSdp[key]; ok {
		return lm
	}
	return nil
}

// DeleteSpokeSdp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove) DeleteSpokeSdp(SdpBindId string) {
	key := SdpBindId

	delete(t.SpokeSdp, key)
}

// AppendSpokeSdp appends the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove_SpokeSdp struct to the
// list SpokeSdp of NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove_SpokeSdp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove) AppendSpokeSdp(v *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove_SpokeSdp) error {
	if v.SdpBindId == nil {
		return fmt.Errorf("invalid nil key received for SdpBindId")
	}

	key := *v.SdpBindId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SpokeSdp == nil {
		t.SpokeSdp = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove_SpokeSdp)
	}

	if _, ok := t.SpokeSdp[key]; ok {
		return fmt.Errorf("duplicate key for list SpokeSdp %v", key)
	}

	t.SpokeSdp[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetHoldDownTime retrieves the value of the leaf HoldDownTime from the NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldDownTime is set, it can
// safely use t.GetHoldDownTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldDownTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove) GetHoldDownTime() uint32 {
	if t == nil || t.HoldDownTime == nil {
		return 10
	}
	return *t.HoldDownTime
}

// GetMoveFrequency retrieves the value of the leaf MoveFrequency from the NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MoveFrequency is set, it can
// safely use t.GetMoveFrequency() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MoveFrequency == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove) GetMoveFrequency() uint32 {
	if t == nil || t.MoveFrequency == nil {
		return 2
	}
	return *t.MoveFrequency
}

// GetPrimaryCumulativeFactor retrieves the value of the leaf PrimaryCumulativeFactor from the NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrimaryCumulativeFactor is set, it can
// safely use t.GetPrimaryCumulativeFactor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrimaryCumulativeFactor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove) GetPrimaryCumulativeFactor() uint32 {
	if t == nil || t.PrimaryCumulativeFactor == nil {
		return 3
	}
	return *t.PrimaryCumulativeFactor
}

// GetRetryCount retrieves the value of the leaf RetryCount from the NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetryCount is set, it can
// safely use t.GetRetryCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetryCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove) GetRetryCount() NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove_RetryCount_Union {
	if t == nil || t.RetryCount == nil {
		return UnionUint32(3)
	}
	return t.RetryCount
}

// GetSecondaryCumulativeFactor retrieves the value of the leaf SecondaryCumulativeFactor from the NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecondaryCumulativeFactor is set, it can
// safely use t.GetSecondaryCumulativeFactor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecondaryCumulativeFactor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove) GetSecondaryCumulativeFactor() uint32 {
	if t == nil || t.SecondaryCumulativeFactor == nil {
		return 2
	}
	return *t.SecondaryCumulativeFactor
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.HoldDownTime == nil {
		var v uint32 = 10
		t.HoldDownTime = &v
	}
	if t.MoveFrequency == nil {
		var v uint32 = 2
		t.MoveFrequency = &v
	}
	if t.PrimaryCumulativeFactor == nil {
		var v uint32 = 3
		t.PrimaryCumulativeFactor = &v
	}
	if t.RetryCount == nil {
		t.RetryCount = UnionUint32(3)
	}
	if t.SecondaryCumulativeFactor == nil {
		var v uint32 = 2
		t.SecondaryCumulativeFactor = &v
	}
	for _, e := range t.Sap {
		e.PopulateDefaults()
	}
	for _, e := range t.SpokeSdp {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove_Sap represents the /nokia-conf/configure/groups/group/service/vpls/fdb/mac-move/sap YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove_Sap struct {
	Level E_NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove_Sap_Level `path:"level" module:"nokia-conf"`
	SapId *string                                                               `path:"sap-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove_Sap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove_Sap) IsYANGGoStruct() {}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove_Sap) GetLevel() E_NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove_Sap_Level {
	if t == nil || t.Level == 0 {
		return 0
	}
	return t.Level
}

// GetSapId retrieves the value of the leaf SapId from the NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SapId is set, it can
// safely use t.GetSapId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SapId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove_Sap) GetSapId() string {
	if t == nil || t.SapId == nil {
		return ""
	}
	return *t.SapId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove_Sap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove_Sap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove_Sap struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove_Sap) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SapId == nil {
		return nil, fmt.Errorf("nil value for key SapId")
	}

	return map[string]interface{}{
		"sap-id": *t.SapId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove_Sap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove_Sap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove_Sap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove_Sap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove_Sap.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove_Sap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove_SpokeSdp represents the /nokia-conf/configure/groups/group/service/vpls/fdb/mac-move/spoke-sdp YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove_SpokeSdp struct {
	Level     E_NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove_SpokeSdp_Level `path:"level" module:"nokia-conf"`
	SdpBindId *string                                                                    `path:"sdp-bind-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove_SpokeSdp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove_SpokeSdp) IsYANGGoStruct() {}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove_SpokeSdp) GetLevel() E_NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove_SpokeSdp_Level {
	if t == nil || t.Level == 0 {
		return 0
	}
	return t.Level
}

// GetSdpBindId retrieves the value of the leaf SdpBindId from the NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SdpBindId is set, it can
// safely use t.GetSdpBindId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SdpBindId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove_SpokeSdp) GetSdpBindId() string {
	if t == nil || t.SdpBindId == nil {
		return ""
	}
	return *t.SdpBindId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove_SpokeSdp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove_SpokeSdp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove_SpokeSdp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove_SpokeSdp) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SdpBindId == nil {
		return nil, fmt.Errorf("nil value for key SdpBindId")
	}

	return map[string]interface{}{
		"sdp-bind-id": *t.SdpBindId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove_SpokeSdp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove_SpokeSdp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove_SpokeSdp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove_SpokeSdp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove_SpokeSdp.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_MacMove_SpokeSdp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_StaticMac represents the /nokia-conf/configure/groups/group/service/vpls/fdb/static-mac YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_StaticMac struct {
	Mac map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_StaticMac_Mac `path:"mac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_StaticMac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_StaticMac) IsYANGGoStruct() {}

// NewMac creates a new entry in the Mac list of the
// NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_StaticMac struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_StaticMac) NewMac(MacAddress string) (*NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_StaticMac_Mac, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mac == nil {
		t.Mac = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_StaticMac_Mac)
	}

	key := MacAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mac[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mac", key)
	}

	t.Mac[key] = &NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_StaticMac_Mac{
		MacAddress: &MacAddress,
	}

	return t.Mac[key], nil
}

// RenameMac renames an entry in the list Mac within
// the NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_StaticMac struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_StaticMac) RenameMac(oldK, newK string) error {
	if _, ok := t.Mac[newK]; ok {
		return fmt.Errorf("key %v already exists in Mac", newK)
	}

	e, ok := t.Mac[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mac", oldK)
	}
	e.MacAddress = &newK

	t.Mac[newK] = e
	delete(t.Mac, oldK)
	return nil
}

// GetOrCreateMac retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_StaticMac. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_StaticMac) GetOrCreateMac(MacAddress string) *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_StaticMac_Mac {

	key := MacAddress

	if v, ok := t.Mac[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMac(MacAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMac got unexpected error: %v", err))
	}
	return v
}

// GetMac retrieves the value with the specified key from
// the Mac map field of NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_StaticMac. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_StaticMac) GetMac(MacAddress string) *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_StaticMac_Mac {

	if t == nil {
		return nil
	}

	key := MacAddress

	if lm, ok := t.Mac[key]; ok {
		return lm
	}
	return nil
}

// DeleteMac deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_StaticMac. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_StaticMac) DeleteMac(MacAddress string) {
	key := MacAddress

	delete(t.Mac, key)
}

// AppendMac appends the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_StaticMac_Mac struct to the
// list Mac of NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_StaticMac. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_StaticMac_Mac already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_StaticMac) AppendMac(v *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_StaticMac_Mac) error {
	if v.MacAddress == nil {
		return fmt.Errorf("invalid nil key received for MacAddress")
	}

	key := *v.MacAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mac == nil {
		t.Mac = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_StaticMac_Mac)
	}

	if _, ok := t.Mac[key]; ok {
		return fmt.Errorf("duplicate key for list Mac %v", key)
	}

	t.Mac[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_StaticMac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_StaticMac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Mac {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_StaticMac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_StaticMac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_StaticMac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_StaticMac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_StaticMac.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_StaticMac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_StaticMac_Mac represents the /nokia-conf/configure/groups/group/service/vpls/fdb/static-mac/mac YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_StaticMac_Mac struct {
	Blackhole  YANGEmpty                                                                 `path:"blackhole" module:"nokia-conf"`
	Endpoint   *string                                                                   `path:"endpoint" module:"nokia-conf"`
	MacAddress *string                                                                   `path:"mac-address" module:"nokia-conf"`
	MeshSdp    *string                                                                   `path:"mesh-sdp" module:"nokia-conf"`
	Monitor    E_NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_StaticMac_Mac_Monitor `path:"monitor" module:"nokia-conf"`
	Sap        *string                                                                   `path:"sap" module:"nokia-conf"`
	SpokeSdp   *string                                                                   `path:"spoke-sdp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_StaticMac_Mac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_StaticMac_Mac) IsYANGGoStruct() {}

// GetBlackhole retrieves the value of the leaf Blackhole from the NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_StaticMac_Mac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Blackhole is set, it can
// safely use t.GetBlackhole() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Blackhole == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_StaticMac_Mac) GetBlackhole() YANGEmpty {
	if t == nil || t.Blackhole == false {
		return false
	}
	return t.Blackhole
}

// GetEndpoint retrieves the value of the leaf Endpoint from the NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_StaticMac_Mac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Endpoint is set, it can
// safely use t.GetEndpoint() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Endpoint == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_StaticMac_Mac) GetEndpoint() string {
	if t == nil || t.Endpoint == nil {
		return ""
	}
	return *t.Endpoint
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_StaticMac_Mac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_StaticMac_Mac) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return ""
	}
	return *t.MacAddress
}

// GetMeshSdp retrieves the value of the leaf MeshSdp from the NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_StaticMac_Mac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MeshSdp is set, it can
// safely use t.GetMeshSdp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MeshSdp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_StaticMac_Mac) GetMeshSdp() string {
	if t == nil || t.MeshSdp == nil {
		return ""
	}
	return *t.MeshSdp
}

// GetMonitor retrieves the value of the leaf Monitor from the NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_StaticMac_Mac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Monitor is set, it can
// safely use t.GetMonitor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Monitor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_StaticMac_Mac) GetMonitor() E_NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_StaticMac_Mac_Monitor {
	if t == nil || t.Monitor == 0 {
		return NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_StaticMac_Mac_Monitor_none
	}
	return t.Monitor
}

// GetSap retrieves the value of the leaf Sap from the NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_StaticMac_Mac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Sap is set, it can
// safely use t.GetSap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Sap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_StaticMac_Mac) GetSap() string {
	if t == nil || t.Sap == nil {
		return ""
	}
	return *t.Sap
}

// GetSpokeSdp retrieves the value of the leaf SpokeSdp from the NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_StaticMac_Mac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SpokeSdp is set, it can
// safely use t.GetSpokeSdp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SpokeSdp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_StaticMac_Mac) GetSpokeSdp() string {
	if t == nil || t.SpokeSdp == nil {
		return ""
	}
	return *t.SpokeSdp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_StaticMac_Mac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_StaticMac_Mac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Monitor == 0 {
		t.Monitor = NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_StaticMac_Mac_Monitor_none
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_StaticMac_Mac struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_StaticMac_Mac) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MacAddress == nil {
		return nil, fmt.Errorf("nil value for key MacAddress")
	}

	return map[string]interface{}{
		"mac-address": *t.MacAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_StaticMac_Mac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_StaticMac_Mac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_StaticMac_Mac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_StaticMac_Mac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_StaticMac_Mac.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_StaticMac_Mac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_Table represents the /nokia-conf/configure/groups/group/service/vpls/fdb/table YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_Table struct {
	HighWmark *int32 `path:"high-wmark" module:"nokia-conf"`
	LowWmark  *int32 `path:"low-wmark" module:"nokia-conf"`
	Size      *int32 `path:"size" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_Table implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_Table) IsYANGGoStruct() {}

// GetHighWmark retrieves the value of the leaf HighWmark from the NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_Table
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HighWmark is set, it can
// safely use t.GetHighWmark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HighWmark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_Table) GetHighWmark() int32 {
	if t == nil || t.HighWmark == nil {
		return 95
	}
	return *t.HighWmark
}

// GetLowWmark retrieves the value of the leaf LowWmark from the NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_Table
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowWmark is set, it can
// safely use t.GetLowWmark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowWmark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_Table) GetLowWmark() int32 {
	if t == nil || t.LowWmark == nil {
		return 90
	}
	return *t.LowWmark
}

// GetSize retrieves the value of the leaf Size from the NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_Table
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Size is set, it can
// safely use t.GetSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Size == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_Table) GetSize() int32 {
	if t == nil || t.Size == nil {
		return 250
	}
	return *t.Size
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_Table
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_Table) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HighWmark == nil {
		var v int32 = 95
		t.HighWmark = &v
	}
	if t.LowWmark == nil {
		var v int32 = 90
		t.LowWmark = &v
	}
	if t.Size == nil {
		var v int32 = 250
		t.Size = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_Table) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_Table"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_Table) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_Table) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_Table.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Fdb_Table) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp represents the /nokia-conf/configure/groups/group/service/vpls/gsmp YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp struct {
	AdminState E_NokiaTypesSros_AdminState                                          `path:"admin-state" module:"nokia-conf"`
	Group      map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group `path:"group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp) IsYANGGoStruct() {}

// NewGroup creates a new entry in the Group list of the
// NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp) NewGroup(Name string) (*NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group{
		Name: &Name,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp) RenameGroup(oldK, newK string) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.Name = &newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp) GetOrCreateGroup(Name string) *NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group {

	key := Name

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp) GetGroup(Name string) *NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp) DeleteGroup(Name string) {
	key := Name

	delete(t.Group, key)
}

// AppendGroup appends the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group struct to the
// list Group of NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp) AppendGroup(v *NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group represents the /nokia-conf/configure/groups/group/service/vpls/gsmp/group YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group struct {
	AdminState     E_NokiaTypesSros_AdminState                                                   `path:"admin-state" module:"nokia-conf"`
	Ancp           *NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Ancp                `path:"ancp" module:"nokia-conf"`
	Description    *string                                                                       `path:"description" module:"nokia-conf"`
	HoldMultiplier *uint32                                                                       `path:"hold-multiplier" module:"nokia-conf"`
	IdleFilter     *bool                                                                         `path:"idle-filter" module:"nokia-conf"`
	Keepalive      *uint32                                                                       `path:"keepalive" module:"nokia-conf"`
	Name           *string                                                                       `path:"name" module:"nokia-conf"`
	Neighbor       map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Neighbor `path:"neighbor" module:"nokia-conf"`
	Persistency    *bool                                                                         `path:"persistency" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group) IsYANGGoStruct() {}

// NewNeighbor creates a new entry in the Neighbor list of the
// NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group) NewNeighbor(RemoteAddress string) (*NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Neighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Neighbor)
	}

	key := RemoteAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Neighbor{
		RemoteAddress: &RemoteAddress,
	}

	return t.Neighbor[key], nil
}

// RenameNeighbor renames an entry in the list Neighbor within
// the NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group) RenameNeighbor(oldK, newK string) error {
	if _, ok := t.Neighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in Neighbor", newK)
	}

	e, ok := t.Neighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Neighbor", oldK)
	}
	e.RemoteAddress = &newK

	t.Neighbor[newK] = e
	delete(t.Neighbor, oldK)
	return nil
}

// GetOrCreateNeighbor retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group) GetOrCreateNeighbor(RemoteAddress string) *NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Neighbor {

	key := RemoteAddress

	if v, ok := t.Neighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNeighbor(RemoteAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetNeighbor retrieves the value with the specified key from
// the Neighbor map field of NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group) GetNeighbor(RemoteAddress string) *NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Neighbor {

	if t == nil {
		return nil
	}

	key := RemoteAddress

	if lm, ok := t.Neighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteNeighbor deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group) DeleteNeighbor(RemoteAddress string) {
	key := RemoteAddress

	delete(t.Neighbor, key)
}

// AppendNeighbor appends the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Neighbor struct to the
// list Neighbor of NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Neighbor already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group) AppendNeighbor(v *NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Neighbor) error {
	if v.RemoteAddress == nil {
		return fmt.Errorf("invalid nil key received for RemoteAddress")
	}

	key := *v.RemoteAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Neighbor)
	}

	if _, ok := t.Neighbor[key]; ok {
		return fmt.Errorf("duplicate key for list Neighbor %v", key)
	}

	t.Neighbor[key] = v
	return nil
}

// GetOrCreateAncp retrieves the value of the Ancp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group) GetOrCreateAncp() *NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Ancp {
	if t.Ancp != nil {
		return t.Ancp
	}
	t.Ancp = &NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Ancp{}
	return t.Ancp
}

// GetAncp returns the value of the Ancp struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group. If the receiver or the field Ancp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group) GetAncp() *NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Ancp {
	if t != nil && t.Ancp != nil {
		return t.Ancp
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetHoldMultiplier retrieves the value of the leaf HoldMultiplier from the NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldMultiplier is set, it can
// safely use t.GetHoldMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldMultiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group) GetHoldMultiplier() uint32 {
	if t == nil || t.HoldMultiplier == nil {
		return 3
	}
	return *t.HoldMultiplier
}

// GetIdleFilter retrieves the value of the leaf IdleFilter from the NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IdleFilter is set, it can
// safely use t.GetIdleFilter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IdleFilter == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group) GetIdleFilter() bool {
	if t == nil || t.IdleFilter == nil {
		return false
	}
	return *t.IdleFilter
}

// GetKeepalive retrieves the value of the leaf Keepalive from the NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Keepalive is set, it can
// safely use t.GetKeepalive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Keepalive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group) GetKeepalive() uint32 {
	if t == nil || t.Keepalive == nil {
		return 10
	}
	return *t.Keepalive
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPersistency retrieves the value of the leaf Persistency from the NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Persistency is set, it can
// safely use t.GetPersistency() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Persistency == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group) GetPersistency() bool {
	if t == nil || t.Persistency == nil {
		return false
	}
	return *t.Persistency
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.HoldMultiplier == nil {
		var v uint32 = 3
		t.HoldMultiplier = &v
	}
	if t.IdleFilter == nil {
		var v bool = false
		t.IdleFilter = &v
	}
	if t.Keepalive == nil {
		var v uint32 = 10
		t.Keepalive = &v
	}
	if t.Persistency == nil {
		var v bool = false
		t.Persistency = &v
	}
	t.Ancp.PopulateDefaults()
	for _, e := range t.Neighbor {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Ancp represents the /nokia-conf/configure/groups/group/service/vpls/gsmp/group/ancp YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Ancp struct {
	DynamicTopologyDiscovery *bool `path:"dynamic-topology-discovery" module:"nokia-conf"`
	Oam                      *bool `path:"oam" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Ancp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Ancp) IsYANGGoStruct() {}

// GetDynamicTopologyDiscovery retrieves the value of the leaf DynamicTopologyDiscovery from the NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Ancp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DynamicTopologyDiscovery is set, it can
// safely use t.GetDynamicTopologyDiscovery() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DynamicTopologyDiscovery == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Ancp) GetDynamicTopologyDiscovery() bool {
	if t == nil || t.DynamicTopologyDiscovery == nil {
		return true
	}
	return *t.DynamicTopologyDiscovery
}

// GetOam retrieves the value of the leaf Oam from the NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Ancp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Oam is set, it can
// safely use t.GetOam() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Oam == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Ancp) GetOam() bool {
	if t == nil || t.Oam == nil {
		return false
	}
	return *t.Oam
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Ancp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Ancp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DynamicTopologyDiscovery == nil {
		var v bool = true
		t.DynamicTopologyDiscovery = &v
	}
	if t.Oam == nil {
		var v bool = false
		t.Oam = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Ancp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Ancp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Ancp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Ancp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Ancp.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Ancp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Neighbor represents the /nokia-conf/configure/groups/group/service/vpls/gsmp/group/neighbor YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Neighbor struct {
	AdminState      E_NokiaTypesSros_AdminState                                                        `path:"admin-state" module:"nokia-conf"`
	Description     *string                                                                            `path:"description" module:"nokia-conf"`
	LocalAddress    *string                                                                            `path:"local-address" module:"nokia-conf"`
	PriorityMarking *NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Neighbor_PriorityMarking `path:"priority-marking" module:"nokia-conf"`
	RemoteAddress   *string                                                                            `path:"remote-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Neighbor) IsYANGGoStruct() {}

// GetOrCreatePriorityMarking retrieves the value of the PriorityMarking field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Neighbor) GetOrCreatePriorityMarking() *NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Neighbor_PriorityMarking {
	if t.PriorityMarking != nil {
		return t.PriorityMarking
	}
	t.PriorityMarking = &NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Neighbor_PriorityMarking{}
	return t.PriorityMarking
}

// GetPriorityMarking returns the value of the PriorityMarking struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Neighbor. If the receiver or the field PriorityMarking is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Neighbor) GetPriorityMarking() *NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Neighbor_PriorityMarking {
	if t != nil && t.PriorityMarking != nil {
		return t.PriorityMarking
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Neighbor) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Neighbor) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetLocalAddress retrieves the value of the leaf LocalAddress from the NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalAddress is set, it can
// safely use t.GetLocalAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Neighbor) GetLocalAddress() string {
	if t == nil || t.LocalAddress == nil {
		return ""
	}
	return *t.LocalAddress
}

// GetRemoteAddress retrieves the value of the leaf RemoteAddress from the NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteAddress is set, it can
// safely use t.GetRemoteAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Neighbor) GetRemoteAddress() string {
	if t == nil || t.RemoteAddress == nil {
		return ""
	}
	return *t.RemoteAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Neighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Neighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.PriorityMarking.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Neighbor struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.RemoteAddress == nil {
		return nil, fmt.Errorf("nil value for key RemoteAddress")
	}

	return map[string]interface{}{
		"remote-address": *t.RemoteAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Neighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Neighbor) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Neighbor.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Neighbor) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Neighbor_PriorityMarking represents the /nokia-conf/configure/groups/group/service/vpls/gsmp/group/neighbor/priority-marking YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Neighbor_PriorityMarking struct {
	Dscp E_NokiaTypesQos_DscpName `path:"dscp" module:"nokia-conf"`
	Prec *int32                   `path:"prec" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Neighbor_PriorityMarking implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Neighbor_PriorityMarking) IsYANGGoStruct() {
}

// GetDscp retrieves the value of the leaf Dscp from the NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Neighbor_PriorityMarking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dscp is set, it can
// safely use t.GetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dscp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Neighbor_PriorityMarking) GetDscp() E_NokiaTypesQos_DscpName {
	if t == nil || t.Dscp == 0 {
		return 0
	}
	return t.Dscp
}

// GetPrec retrieves the value of the leaf Prec from the NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Neighbor_PriorityMarking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prec is set, it can
// safely use t.GetPrec() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prec == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Neighbor_PriorityMarking) GetPrec() int32 {
	if t == nil || t.Prec == nil {
		return 0
	}
	return *t.Prec
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Neighbor_PriorityMarking
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Neighbor_PriorityMarking) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Neighbor_PriorityMarking) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Neighbor_PriorityMarking"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Neighbor_PriorityMarking) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Neighbor_PriorityMarking) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Neighbor_PriorityMarking.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Gsmp_Group_Neighbor_PriorityMarking) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpHostTracking represents the /nokia-conf/configure/groups/group/service/vpls/igmp-host-tracking YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpHostTracking struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ExpiryTime *uint32                     `path:"expiry-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpHostTracking implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpHostTracking) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpHostTracking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpHostTracking) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetExpiryTime retrieves the value of the leaf ExpiryTime from the NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpHostTracking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExpiryTime is set, it can
// safely use t.GetExpiryTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExpiryTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpHostTracking) GetExpiryTime() uint32 {
	if t == nil || t.ExpiryTime == nil {
		return 260
	}
	return *t.ExpiryTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpHostTracking
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpHostTracking) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.ExpiryTime == nil {
		var v uint32 = 260
		t.ExpiryTime = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpHostTracking) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpHostTracking"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpHostTracking) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpHostTracking) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpHostTracking.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpHostTracking) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping represents the /nokia-conf/configure/groups/group/service/vpls/igmp-snooping YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping struct {
	AdminState          E_NokiaTypesSros_AdminState                                                         `path:"admin-state" module:"nokia-conf"`
	EvpnProxy           *NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping_EvpnProxy               `path:"evpn-proxy" module:"nokia-conf"`
	Mvr                 *NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping_Mvr                     `path:"mvr" module:"nokia-conf"`
	QueryInterval       *uint32                                                                             `path:"query-interval" module:"nokia-conf"`
	QuerySourceAddress  NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping_QuerySourceAddress_Union `path:"query-source-address" module:"nokia-conf"`
	ReportSourceAddress *string                                                                             `path:"report-source-address" module:"nokia-conf"`
	RobustCount         *uint32                                                                             `path:"robust-count" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping) IsYANGGoStruct() {}

// GetOrCreateEvpnProxy retrieves the value of the EvpnProxy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping) GetOrCreateEvpnProxy() *NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping_EvpnProxy {
	if t.EvpnProxy != nil {
		return t.EvpnProxy
	}
	t.EvpnProxy = &NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping_EvpnProxy{}
	return t.EvpnProxy
}

// GetOrCreateMvr retrieves the value of the Mvr field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping) GetOrCreateMvr() *NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping_Mvr {
	if t.Mvr != nil {
		return t.Mvr
	}
	t.Mvr = &NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping_Mvr{}
	return t.Mvr
}

// GetEvpnProxy returns the value of the EvpnProxy struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping. If the receiver or the field EvpnProxy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping) GetEvpnProxy() *NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping_EvpnProxy {
	if t != nil && t.EvpnProxy != nil {
		return t.EvpnProxy
	}
	return nil
}

// GetMvr returns the value of the Mvr struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping. If the receiver or the field Mvr is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping) GetMvr() *NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping_Mvr {
	if t != nil && t.Mvr != nil {
		return t.Mvr
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetQueryInterval retrieves the value of the leaf QueryInterval from the NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryInterval is set, it can
// safely use t.GetQueryInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping) GetQueryInterval() uint32 {
	if t == nil || t.QueryInterval == nil {
		return 125
	}
	return *t.QueryInterval
}

// GetQuerySourceAddress retrieves the value of the leaf QuerySourceAddress from the NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QuerySourceAddress is set, it can
// safely use t.GetQuerySourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QuerySourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping) GetQuerySourceAddress() NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping_QuerySourceAddress_Union {
	if t == nil || t.QuerySourceAddress == nil {
		return NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping_QuerySourceAddress_Enum_system
	}
	return t.QuerySourceAddress
}

// GetReportSourceAddress retrieves the value of the leaf ReportSourceAddress from the NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReportSourceAddress is set, it can
// safely use t.GetReportSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReportSourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping) GetReportSourceAddress() string {
	if t == nil || t.ReportSourceAddress == nil {
		return ""
	}
	return *t.ReportSourceAddress
}

// GetRobustCount retrieves the value of the leaf RobustCount from the NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RobustCount is set, it can
// safely use t.GetRobustCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RobustCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping) GetRobustCount() uint32 {
	if t == nil || t.RobustCount == nil {
		return 2
	}
	return *t.RobustCount
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.QueryInterval == nil {
		var v uint32 = 125
		t.QueryInterval = &v
	}
	if t.QuerySourceAddress == nil {
		t.QuerySourceAddress = NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping_QuerySourceAddress_Enum_system
	}
	if t.RobustCount == nil {
		var v uint32 = 2
		t.RobustCount = &v
	}
	t.EvpnProxy.PopulateDefaults()
	t.Mvr.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping_EvpnProxy represents the /nokia-conf/configure/groups/group/service/vpls/igmp-snooping/evpn-proxy YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping_EvpnProxy struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping_EvpnProxy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping_EvpnProxy) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping_EvpnProxy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping_EvpnProxy) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping_EvpnProxy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping_EvpnProxy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping_EvpnProxy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping_EvpnProxy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping_EvpnProxy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping_EvpnProxy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping_EvpnProxy.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping_EvpnProxy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping_Mvr represents the /nokia-conf/configure/groups/group/service/vpls/igmp-snooping/mvr YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping_Mvr struct {
	AdminState  E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Description *string                     `path:"description" module:"nokia-conf"`
	GroupPolicy *string                     `path:"group-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping_Mvr implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping_Mvr) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping_Mvr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping_Mvr) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping_Mvr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping_Mvr) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetGroupPolicy retrieves the value of the leaf GroupPolicy from the NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping_Mvr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupPolicy is set, it can
// safely use t.GetGroupPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping_Mvr) GetGroupPolicy() string {
	if t == nil || t.GroupPolicy == nil {
		return ""
	}
	return *t.GroupPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping_Mvr
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping_Mvr) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping_Mvr) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping_Mvr"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping_Mvr) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping_Mvr) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping_Mvr.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_IgmpSnooping_Mvr) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_Interface represents the /nokia-conf/configure/groups/group/service/vpls/interface YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_Interface struct {
	AdminState    E_NokiaTypesSros_AdminState                                       `path:"admin-state" module:"nokia-conf"`
	Description   *string                                                           `path:"description" module:"nokia-conf"`
	HoldTime      *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime `path:"hold-time" module:"nokia-conf"`
	InterfaceName *string                                                           `path:"interface-name" module:"nokia-conf"`
	Ipv4          *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4     `path:"ipv4" module:"nokia-conf"`
	Mac           *string                                                           `path:"mac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Interface) IsYANGGoStruct() {}

// GetOrCreateHoldTime retrieves the value of the HoldTime field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface) GetOrCreateHoldTime() *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime {
	if t.HoldTime != nil {
		return t.HoldTime
	}
	t.HoldTime = &NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime{}
	return t.HoldTime
}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface) GetOrCreateIpv4() *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4{}
	return t.Ipv4
}

// GetHoldTime returns the value of the HoldTime struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_Interface. If the receiver or the field HoldTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface) GetHoldTime() *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime {
	if t != nil && t.HoldTime != nil {
		return t.HoldTime
	}
	return nil
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_Interface. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface) GetIpv4() *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vpls_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Vpls_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Groups_Group_Service_Vpls_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Groups_Group_Service_Vpls_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface) GetMac() string {
	if t == nil || t.Mac == nil {
		return ""
	}
	return *t.Mac
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	t.HoldTime.PopulateDefaults()
	t.Ipv4.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vpls_Interface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_Interface.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Interface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime represents the /nokia-conf/configure/groups/group/service/vpls/interface/hold-time YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime struct {
	Ipv4 *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime_Ipv4 `path:"ipv4" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime) IsYANGGoStruct() {}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime) GetOrCreateIpv4() *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime_Ipv4{}
	return t.Ipv4
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime) GetIpv4() *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ipv4.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime_Ipv4 represents the /nokia-conf/configure/groups/group/service/vpls/interface/hold-time/ipv4 YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime_Ipv4 struct {
	Down *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime_Ipv4_Down `path:"down" module:"nokia-conf"`
	Up   *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime_Ipv4_Up   `path:"up" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime_Ipv4) IsYANGGoStruct() {}

// GetOrCreateDown retrieves the value of the Down field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime_Ipv4) GetOrCreateDown() *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime_Ipv4_Down {
	if t.Down != nil {
		return t.Down
	}
	t.Down = &NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime_Ipv4_Down{}
	return t.Down
}

// GetOrCreateUp retrieves the value of the Up field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime_Ipv4) GetOrCreateUp() *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime_Ipv4_Up {
	if t.Up != nil {
		return t.Up
	}
	t.Up = &NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime_Ipv4_Up{}
	return t.Up
}

// GetDown returns the value of the Down struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime_Ipv4. If the receiver or the field Down is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime_Ipv4) GetDown() *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime_Ipv4_Down {
	if t != nil && t.Down != nil {
		return t.Down
	}
	return nil
}

// GetUp returns the value of the Up struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime_Ipv4. If the receiver or the field Up is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime_Ipv4) GetUp() *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime_Ipv4_Up {
	if t != nil && t.Up != nil {
		return t.Up
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Down.PopulateDefaults()
	t.Up.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime_Ipv4.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime_Ipv4_Down represents the /nokia-conf/configure/groups/group/service/vpls/interface/hold-time/ipv4/down YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime_Ipv4_Down struct {
	InitOnly *bool   `path:"init-only" module:"nokia-conf"`
	Seconds  *uint32 `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime_Ipv4_Down implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime_Ipv4_Down) IsYANGGoStruct() {}

// GetInitOnly retrieves the value of the leaf InitOnly from the NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime_Ipv4_Down
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitOnly is set, it can
// safely use t.GetInitOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime_Ipv4_Down) GetInitOnly() bool {
	if t == nil || t.InitOnly == nil {
		return false
	}
	return *t.InitOnly
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime_Ipv4_Down
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime_Ipv4_Down) GetSeconds() uint32 {
	if t == nil || t.Seconds == nil {
		return 0
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime_Ipv4_Down
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime_Ipv4_Down) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InitOnly == nil {
		var v bool = false
		t.InitOnly = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime_Ipv4_Down) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime_Ipv4_Down"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime_Ipv4_Down) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime_Ipv4_Down) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime_Ipv4_Down.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime_Ipv4_Down) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime_Ipv4_Up represents the /nokia-conf/configure/groups/group/service/vpls/interface/hold-time/ipv4/up YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime_Ipv4_Up struct {
	Seconds *uint32 `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime_Ipv4_Up implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime_Ipv4_Up) IsYANGGoStruct() {}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime_Ipv4_Up
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime_Ipv4_Up) GetSeconds() uint32 {
	if t == nil || t.Seconds == nil {
		return 0
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime_Ipv4_Up
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime_Ipv4_Up) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime_Ipv4_Up) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime_Ipv4_Up"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime_Ipv4_Up) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime_Ipv4_Up) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime_Ipv4_Up.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_HoldTime_Ipv4_Up) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4 represents the /nokia-conf/configure/groups/group/service/vpls/interface/ipv4 YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4 struct {
	NeighborDiscovery *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_NeighborDiscovery `path:"neighbor-discovery" module:"nokia-conf"`
	Primary           *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_Primary           `path:"primary" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4) IsYANGGoStruct() {}

// GetOrCreateNeighborDiscovery retrieves the value of the NeighborDiscovery field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4) GetOrCreateNeighborDiscovery() *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_NeighborDiscovery {
	if t.NeighborDiscovery != nil {
		return t.NeighborDiscovery
	}
	t.NeighborDiscovery = &NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_NeighborDiscovery{}
	return t.NeighborDiscovery
}

// GetOrCreatePrimary retrieves the value of the Primary field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4) GetOrCreatePrimary() *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_Primary {
	if t.Primary != nil {
		return t.Primary
	}
	t.Primary = &NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_Primary{}
	return t.Primary
}

// GetNeighborDiscovery returns the value of the NeighborDiscovery struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4. If the receiver or the field NeighborDiscovery is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4) GetNeighborDiscovery() *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_NeighborDiscovery {
	if t != nil && t.NeighborDiscovery != nil {
		return t.NeighborDiscovery
	}
	return nil
}

// GetPrimary returns the value of the Primary struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4. If the receiver or the field Primary is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4) GetPrimary() *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_Primary {
	if t != nil && t.Primary != nil {
		return t.Primary
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.NeighborDiscovery.PopulateDefaults()
	t.Primary.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_NeighborDiscovery represents the /nokia-conf/configure/groups/group/service/vpls/interface/ipv4/neighbor-discovery YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_NeighborDiscovery struct {
	StaticNeighbor map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_NeighborDiscovery_StaticNeighbor `path:"static-neighbor" module:"nokia-conf"`
	Timeout        *uint32                                                                                                   `path:"timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_NeighborDiscovery implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_NeighborDiscovery) IsYANGGoStruct() {
}

// NewStaticNeighbor creates a new entry in the StaticNeighbor list of the
// NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_NeighborDiscovery struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_NeighborDiscovery) NewStaticNeighbor(Ipv4Address string) (*NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_NeighborDiscovery_StaticNeighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StaticNeighbor == nil {
		t.StaticNeighbor = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_NeighborDiscovery_StaticNeighbor)
	}

	key := Ipv4Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.StaticNeighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list StaticNeighbor", key)
	}

	t.StaticNeighbor[key] = &NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_NeighborDiscovery_StaticNeighbor{
		Ipv4Address: &Ipv4Address,
	}

	return t.StaticNeighbor[key], nil
}

// RenameStaticNeighbor renames an entry in the list StaticNeighbor within
// the NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_NeighborDiscovery struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_NeighborDiscovery) RenameStaticNeighbor(oldK, newK string) error {
	if _, ok := t.StaticNeighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in StaticNeighbor", newK)
	}

	e, ok := t.StaticNeighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in StaticNeighbor", oldK)
	}
	e.Ipv4Address = &newK

	t.StaticNeighbor[newK] = e
	delete(t.StaticNeighbor, oldK)
	return nil
}

// GetOrCreateStaticNeighbor retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_NeighborDiscovery. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_NeighborDiscovery) GetOrCreateStaticNeighbor(Ipv4Address string) *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_NeighborDiscovery_StaticNeighbor {

	key := Ipv4Address

	if v, ok := t.StaticNeighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewStaticNeighbor(Ipv4Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateStaticNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetStaticNeighbor retrieves the value with the specified key from
// the StaticNeighbor map field of NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_NeighborDiscovery. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_NeighborDiscovery) GetStaticNeighbor(Ipv4Address string) *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_NeighborDiscovery_StaticNeighbor {

	if t == nil {
		return nil
	}

	key := Ipv4Address

	if lm, ok := t.StaticNeighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteStaticNeighbor deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_NeighborDiscovery. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_NeighborDiscovery) DeleteStaticNeighbor(Ipv4Address string) {
	key := Ipv4Address

	delete(t.StaticNeighbor, key)
}

// AppendStaticNeighbor appends the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_NeighborDiscovery_StaticNeighbor struct to the
// list StaticNeighbor of NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_NeighborDiscovery. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_NeighborDiscovery_StaticNeighbor already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_NeighborDiscovery) AppendStaticNeighbor(v *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_NeighborDiscovery_StaticNeighbor) error {
	if v.Ipv4Address == nil {
		return fmt.Errorf("invalid nil key received for Ipv4Address")
	}

	key := *v.Ipv4Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StaticNeighbor == nil {
		t.StaticNeighbor = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_NeighborDiscovery_StaticNeighbor)
	}

	if _, ok := t.StaticNeighbor[key]; ok {
		return fmt.Errorf("duplicate key for list StaticNeighbor %v", key)
	}

	t.StaticNeighbor[key] = v
	return nil
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_NeighborDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_NeighborDiscovery) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 14400
	}
	return *t.Timeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_NeighborDiscovery
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_NeighborDiscovery) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Timeout == nil {
		var v uint32 = 14400
		t.Timeout = &v
	}
	for _, e := range t.StaticNeighbor {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_NeighborDiscovery) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_NeighborDiscovery"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_NeighborDiscovery) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_NeighborDiscovery) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_NeighborDiscovery.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_NeighborDiscovery) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_NeighborDiscovery_StaticNeighbor represents the /nokia-conf/configure/groups/group/service/vpls/interface/ipv4/neighbor-discovery/static-neighbor YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_NeighborDiscovery_StaticNeighbor struct {
	Ipv4Address *string `path:"ipv4-address" module:"nokia-conf"`
	MacAddress  *string `path:"mac-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_NeighborDiscovery_StaticNeighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_NeighborDiscovery_StaticNeighbor) IsYANGGoStruct() {
}

// GetIpv4Address retrieves the value of the leaf Ipv4Address from the NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_NeighborDiscovery_StaticNeighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Address is set, it can
// safely use t.GetIpv4Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_NeighborDiscovery_StaticNeighbor) GetIpv4Address() string {
	if t == nil || t.Ipv4Address == nil {
		return ""
	}
	return *t.Ipv4Address
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_NeighborDiscovery_StaticNeighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_NeighborDiscovery_StaticNeighbor) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return ""
	}
	return *t.MacAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_NeighborDiscovery_StaticNeighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_NeighborDiscovery_StaticNeighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_NeighborDiscovery_StaticNeighbor struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_NeighborDiscovery_StaticNeighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv4Address == nil {
		return nil, fmt.Errorf("nil value for key Ipv4Address")
	}

	return map[string]interface{}{
		"ipv4-address": *t.Ipv4Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_NeighborDiscovery_StaticNeighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_NeighborDiscovery_StaticNeighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_NeighborDiscovery_StaticNeighbor) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_NeighborDiscovery_StaticNeighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_NeighborDiscovery_StaticNeighbor.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_NeighborDiscovery_StaticNeighbor) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_Primary represents the /nokia-conf/configure/groups/group/service/vpls/interface/ipv4/primary YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_Primary struct {
	Address      *string `path:"address" module:"nokia-conf"`
	PrefixLength *uint32 `path:"prefix-length" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_Primary implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_Primary) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_Primary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_Primary) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetPrefixLength retrieves the value of the leaf PrefixLength from the NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_Primary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixLength is set, it can
// safely use t.GetPrefixLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_Primary) GetPrefixLength() uint32 {
	if t == nil || t.PrefixLength == nil {
		return 0
	}
	return *t.PrefixLength
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_Primary
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_Primary) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_Primary) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_Primary"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_Primary) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_Primary) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_Primary.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Interface_Ipv4_Primary) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy represents the /nokia-conf/configure/groups/group/service/vpls/isid-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy struct {
	Entry map[NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy_Entry_RangeEntryId_Union]*NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy_Entry `path:"entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy) NewEntry(RangeEntryId NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy_Entry_RangeEntryId_Union) (*NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy_Entry_RangeEntryId_Union]*NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy_Entry)
	}

	key := RangeEntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy_Entry{
		RangeEntryId: RangeEntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy) RenameEntry(oldK, newK NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy_Entry_RangeEntryId_Union) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.RangeEntryId = newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy) GetOrCreateEntry(RangeEntryId NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy_Entry_RangeEntryId_Union) *NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy_Entry {

	key := RangeEntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(RangeEntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy) GetEntry(RangeEntryId NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy_Entry_RangeEntryId_Union) *NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy_Entry {

	if t == nil {
		return nil
	}

	key := RangeEntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy) DeleteEntry(RangeEntryId NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy_Entry_RangeEntryId_Union) {
	key := RangeEntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy_Entry struct to the
// list Entry of NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy) AppendEntry(v *NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy_Entry) error {
	key := v.RangeEntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy_Entry_RangeEntryId_Union]*NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy_Entry represents the /nokia-conf/configure/groups/group/service/vpls/isid-policy/entry YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy_Entry struct {
	AdvertiseLocal *bool                                                                             `path:"advertise-local" module:"nokia-conf"`
	Range          *NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy_Entry_Range             `path:"range" module:"nokia-conf"`
	RangeEntryId   NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy_Entry_RangeEntryId_Union `path:"range-entry-id" module:"nokia-conf"`
	UseDefMcast    *bool                                                                             `path:"use-def-mcast" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy_Entry) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy_Entry) GetOrCreateRange() *NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy_Entry_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy_Entry_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy_Entry. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy_Entry) GetRange() *NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy_Entry_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetAdvertiseLocal retrieves the value of the leaf AdvertiseLocal from the NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseLocal is set, it can
// safely use t.GetAdvertiseLocal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseLocal == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy_Entry) GetAdvertiseLocal() bool {
	if t == nil || t.AdvertiseLocal == nil {
		return true
	}
	return *t.AdvertiseLocal
}

// GetRangeEntryId retrieves the value of the leaf RangeEntryId from the NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RangeEntryId is set, it can
// safely use t.GetRangeEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RangeEntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy_Entry) GetRangeEntryId() NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy_Entry_RangeEntryId_Union {
	if t == nil || t.RangeEntryId == nil {
		return nil
	}
	return t.RangeEntryId
}

// GetUseDefMcast retrieves the value of the leaf UseDefMcast from the NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseDefMcast is set, it can
// safely use t.GetUseDefMcast() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseDefMcast == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy_Entry) GetUseDefMcast() bool {
	if t == nil || t.UseDefMcast == nil {
		return false
	}
	return *t.UseDefMcast
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdvertiseLocal == nil {
		var v bool = true
		t.AdvertiseLocal = &v
	}
	if t.UseDefMcast == nil {
		var v bool = false
		t.UseDefMcast = &v
	}
	t.Range.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy_Entry) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"range-entry-id": t.RangeEntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy_Entry.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy_Entry_Range represents the /nokia-conf/configure/groups/group/service/vpls/isid-policy/entry/range YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy_Entry_Range struct {
	End   *int32 `path:"end" module:"nokia-conf"`
	Start *int32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy_Entry_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy_Entry_Range) IsYANGGoStruct() {}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy_Entry_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy_Entry_Range) GetEnd() int32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy_Entry_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy_Entry_Range) GetStart() int32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy_Entry_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy_Entry_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy_Entry_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy_Entry_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy_Entry_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy_Entry_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy_Entry_Range.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_IsidPolicy_Entry_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_LoadBalancing represents the /nokia-conf/configure/groups/group/service/vpls/load-balancing YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_LoadBalancing struct {
	LblEthOrIpL4Teid  *bool `path:"lbl-eth-or-ip-l4-teid" module:"nokia-conf"`
	PerServiceHashing *bool `path:"per-service-hashing" module:"nokia-conf"`
	SpiLoadBalancing  *bool `path:"spi-load-balancing" module:"nokia-conf"`
	TeidLoadBalancing *bool `path:"teid-load-balancing" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_LoadBalancing implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_LoadBalancing) IsYANGGoStruct() {}

// GetLblEthOrIpL4Teid retrieves the value of the leaf LblEthOrIpL4Teid from the NokiaConf_Configure_Groups_Group_Service_Vpls_LoadBalancing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LblEthOrIpL4Teid is set, it can
// safely use t.GetLblEthOrIpL4Teid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LblEthOrIpL4Teid == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_LoadBalancing) GetLblEthOrIpL4Teid() bool {
	if t == nil || t.LblEthOrIpL4Teid == nil {
		return false
	}
	return *t.LblEthOrIpL4Teid
}

// GetPerServiceHashing retrieves the value of the leaf PerServiceHashing from the NokiaConf_Configure_Groups_Group_Service_Vpls_LoadBalancing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PerServiceHashing is set, it can
// safely use t.GetPerServiceHashing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PerServiceHashing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_LoadBalancing) GetPerServiceHashing() bool {
	if t == nil || t.PerServiceHashing == nil {
		return false
	}
	return *t.PerServiceHashing
}

// GetSpiLoadBalancing retrieves the value of the leaf SpiLoadBalancing from the NokiaConf_Configure_Groups_Group_Service_Vpls_LoadBalancing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SpiLoadBalancing is set, it can
// safely use t.GetSpiLoadBalancing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SpiLoadBalancing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_LoadBalancing) GetSpiLoadBalancing() bool {
	if t == nil || t.SpiLoadBalancing == nil {
		return false
	}
	return *t.SpiLoadBalancing
}

// GetTeidLoadBalancing retrieves the value of the leaf TeidLoadBalancing from the NokiaConf_Configure_Groups_Group_Service_Vpls_LoadBalancing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TeidLoadBalancing is set, it can
// safely use t.GetTeidLoadBalancing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TeidLoadBalancing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_LoadBalancing) GetTeidLoadBalancing() bool {
	if t == nil || t.TeidLoadBalancing == nil {
		return false
	}
	return *t.TeidLoadBalancing
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_LoadBalancing
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_LoadBalancing) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LblEthOrIpL4Teid == nil {
		var v bool = false
		t.LblEthOrIpL4Teid = &v
	}
	if t.PerServiceHashing == nil {
		var v bool = false
		t.PerServiceHashing = &v
	}
	if t.SpiLoadBalancing == nil {
		var v bool = false
		t.SpiLoadBalancing = &v
	}
	if t.TeidLoadBalancing == nil {
		var v bool = false
		t.TeidLoadBalancing = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_LoadBalancing) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_LoadBalancing"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_LoadBalancing) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_LoadBalancing) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_LoadBalancing.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_LoadBalancing) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_MacFlush represents the /nokia-conf/configure/groups/group/service/vpls/mac-flush YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_MacFlush struct {
	Tldp *NokiaConf_Configure_Groups_Group_Service_Vpls_MacFlush_Tldp `path:"tldp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_MacFlush implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MacFlush) IsYANGGoStruct() {}

// GetOrCreateTldp retrieves the value of the Tldp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MacFlush) GetOrCreateTldp() *NokiaConf_Configure_Groups_Group_Service_Vpls_MacFlush_Tldp {
	if t.Tldp != nil {
		return t.Tldp
	}
	t.Tldp = &NokiaConf_Configure_Groups_Group_Service_Vpls_MacFlush_Tldp{}
	return t.Tldp
}

// GetTldp returns the value of the Tldp struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_MacFlush. If the receiver or the field Tldp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MacFlush) GetTldp() *NokiaConf_Configure_Groups_Group_Service_Vpls_MacFlush_Tldp {
	if t != nil && t.Tldp != nil {
		return t.Tldp
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_MacFlush
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MacFlush) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Tldp.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MacFlush) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_MacFlush"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MacFlush) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MacFlush) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_MacFlush.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MacFlush) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_MacFlush_Tldp represents the /nokia-conf/configure/groups/group/service/vpls/mac-flush/tldp YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_MacFlush_Tldp struct {
	Propagate     *bool `path:"propagate" module:"nokia-conf"`
	SendOnFailure *bool `path:"send-on-failure" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_MacFlush_Tldp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MacFlush_Tldp) IsYANGGoStruct() {}

// GetPropagate retrieves the value of the leaf Propagate from the NokiaConf_Configure_Groups_Group_Service_Vpls_MacFlush_Tldp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Propagate is set, it can
// safely use t.GetPropagate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Propagate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MacFlush_Tldp) GetPropagate() bool {
	if t == nil || t.Propagate == nil {
		return false
	}
	return *t.Propagate
}

// GetSendOnFailure retrieves the value of the leaf SendOnFailure from the NokiaConf_Configure_Groups_Group_Service_Vpls_MacFlush_Tldp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SendOnFailure is set, it can
// safely use t.GetSendOnFailure() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SendOnFailure == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MacFlush_Tldp) GetSendOnFailure() bool {
	if t == nil || t.SendOnFailure == nil {
		return false
	}
	return *t.SendOnFailure
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_MacFlush_Tldp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MacFlush_Tldp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Propagate == nil {
		var v bool = false
		t.Propagate = &v
	}
	if t.SendOnFailure == nil {
		var v bool = false
		t.SendOnFailure = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MacFlush_Tldp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_MacFlush_Tldp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MacFlush_Tldp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MacFlush_Tldp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_MacFlush_Tldp.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MacFlush_Tldp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_MacProtect represents the /nokia-conf/configure/groups/group/service/vpls/mac-protect YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_MacProtect struct {
	Mac map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_MacProtect_Mac `path:"mac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_MacProtect implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MacProtect) IsYANGGoStruct() {}

// NewMac creates a new entry in the Mac list of the
// NokiaConf_Configure_Groups_Group_Service_Vpls_MacProtect struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MacProtect) NewMac(MacAddress string) (*NokiaConf_Configure_Groups_Group_Service_Vpls_MacProtect_Mac, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mac == nil {
		t.Mac = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_MacProtect_Mac)
	}

	key := MacAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mac[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mac", key)
	}

	t.Mac[key] = &NokiaConf_Configure_Groups_Group_Service_Vpls_MacProtect_Mac{
		MacAddress: &MacAddress,
	}

	return t.Mac[key], nil
}

// RenameMac renames an entry in the list Mac within
// the NokiaConf_Configure_Groups_Group_Service_Vpls_MacProtect struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MacProtect) RenameMac(oldK, newK string) error {
	if _, ok := t.Mac[newK]; ok {
		return fmt.Errorf("key %v already exists in Mac", newK)
	}

	e, ok := t.Mac[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mac", oldK)
	}
	e.MacAddress = &newK

	t.Mac[newK] = e
	delete(t.Mac, oldK)
	return nil
}

// GetOrCreateMac retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls_MacProtect. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MacProtect) GetOrCreateMac(MacAddress string) *NokiaConf_Configure_Groups_Group_Service_Vpls_MacProtect_Mac {

	key := MacAddress

	if v, ok := t.Mac[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMac(MacAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMac got unexpected error: %v", err))
	}
	return v
}

// GetMac retrieves the value with the specified key from
// the Mac map field of NokiaConf_Configure_Groups_Group_Service_Vpls_MacProtect. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MacProtect) GetMac(MacAddress string) *NokiaConf_Configure_Groups_Group_Service_Vpls_MacProtect_Mac {

	if t == nil {
		return nil
	}

	key := MacAddress

	if lm, ok := t.Mac[key]; ok {
		return lm
	}
	return nil
}

// DeleteMac deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls_MacProtect. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MacProtect) DeleteMac(MacAddress string) {
	key := MacAddress

	delete(t.Mac, key)
}

// AppendMac appends the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_MacProtect_Mac struct to the
// list Mac of NokiaConf_Configure_Groups_Group_Service_Vpls_MacProtect. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_MacProtect_Mac already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MacProtect) AppendMac(v *NokiaConf_Configure_Groups_Group_Service_Vpls_MacProtect_Mac) error {
	if v.MacAddress == nil {
		return fmt.Errorf("invalid nil key received for MacAddress")
	}

	key := *v.MacAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mac == nil {
		t.Mac = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_MacProtect_Mac)
	}

	if _, ok := t.Mac[key]; ok {
		return fmt.Errorf("duplicate key for list Mac %v", key)
	}

	t.Mac[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_MacProtect
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MacProtect) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Mac {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MacProtect) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_MacProtect"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MacProtect) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MacProtect) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_MacProtect.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MacProtect) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_MacProtect_Mac represents the /nokia-conf/configure/groups/group/service/vpls/mac-protect/mac YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_MacProtect_Mac struct {
	MacAddress *string `path:"mac-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_MacProtect_Mac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MacProtect_Mac) IsYANGGoStruct() {}

// GetMacAddress retrieves the value of the leaf MacAddress from the NokiaConf_Configure_Groups_Group_Service_Vpls_MacProtect_Mac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MacProtect_Mac) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return ""
	}
	return *t.MacAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_MacProtect_Mac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MacProtect_Mac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vpls_MacProtect_Mac struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MacProtect_Mac) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MacAddress == nil {
		return nil, fmt.Errorf("nil value for key MacAddress")
	}

	return map[string]interface{}{
		"mac-address": *t.MacAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MacProtect_Mac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_MacProtect_Mac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MacProtect_Mac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MacProtect_Mac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_MacProtect_Mac.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MacProtect_Mac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_McrDefaultGtw represents the /nokia-conf/configure/groups/group/service/vpls/mcr-default-gtw YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_McrDefaultGtw struct {
	Ip  *string `path:"ip" module:"nokia-conf"`
	Mac *string `path:"mac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_McrDefaultGtw implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_McrDefaultGtw) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Groups_Group_Service_Vpls_McrDefaultGtw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_McrDefaultGtw) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Groups_Group_Service_Vpls_McrDefaultGtw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_McrDefaultGtw) GetMac() string {
	if t == nil || t.Mac == nil {
		return "00:00:00:00:00:00"
	}
	return *t.Mac
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_McrDefaultGtw
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_McrDefaultGtw) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mac == nil {
		var v string = "00:00:00:00:00:00"
		t.Mac = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_McrDefaultGtw) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_McrDefaultGtw"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_McrDefaultGtw) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_McrDefaultGtw) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_McrDefaultGtw.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_McrDefaultGtw) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp represents the /nokia-conf/configure/groups/group/service/vpls/mesh-sdp YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp struct {
	AccountingPolicy  *uint32                                                                   `path:"accounting-policy" module:"nokia-conf"`
	AdminState        E_NokiaTypesSros_AdminState                                               `path:"admin-state" module:"nokia-conf"`
	Bfd               *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Bfd                `path:"bfd" module:"nokia-conf"`
	BfdLiveness       *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_BfdLiveness        `path:"bfd-liveness" module:"nokia-conf" yangPresence:"true"`
	BfdTemplate       *string                                                                   `path:"bfd-template" module:"nokia-conf"`
	CollectStats      *bool                                                                     `path:"collect-stats" module:"nokia-conf"`
	ControlWord       *bool                                                                     `path:"control-word" module:"nokia-conf"`
	CpuProtection     *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_CpuProtection      `path:"cpu-protection" module:"nokia-conf"`
	Description       *string                                                                   `path:"description" module:"nokia-conf"`
	Dhcp              *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Dhcp               `path:"dhcp" module:"nokia-conf" yangPresence:"true"`
	Egress            *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress             `path:"egress" module:"nokia-conf"`
	EntropyLabel      YANGEmpty                                                                 `path:"entropy-label" module:"nokia-conf"`
	EthCfm            *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm             `path:"eth-cfm" module:"nokia-conf" yangPresence:"true"`
	EtreeLeaf         *bool                                                                     `path:"etree-leaf" module:"nokia-conf"`
	EtreeRootLeafTag  *bool                                                                     `path:"etree-root-leaf-tag" module:"nokia-conf"`
	Fdb               *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Fdb                `path:"fdb" module:"nokia-conf"`
	ForceVcForwarding E_NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_ForceVcForwarding `path:"force-vc-forwarding" module:"nokia-conf"`
	HashLabel         *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_HashLabel          `path:"hash-label" module:"nokia-conf" yangPresence:"true"`
	IgmpSnooping      *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping       `path:"igmp-snooping" module:"nokia-conf" yangPresence:"true"`
	Ingress           *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress            `path:"ingress" module:"nokia-conf"`
	MldSnooping       *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping        `path:"mld-snooping" module:"nokia-conf" yangPresence:"true"`
	Mrp               *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Mrp                `path:"mrp" module:"nokia-conf" yangPresence:"true"`
	Pbb               *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb                `path:"pbb" module:"nokia-conf"`
	SdpBindId         *string                                                                   `path:"sdp-bind-id" module:"nokia-conf"`
	VcType            E_NokiaTypesServices_VplsSdpBindVcType                                    `path:"vc-type" module:"nokia-conf"`
	VlanVcTag         *uint32                                                                   `path:"vlan-vc-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp) IsYANGGoStruct() {}

// GetOrCreateBfd retrieves the value of the Bfd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp) GetOrCreateBfd() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Bfd {
	if t.Bfd != nil {
		return t.Bfd
	}
	t.Bfd = &NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Bfd{}
	return t.Bfd
}

// GetOrCreateBfdLiveness retrieves the value of the BfdLiveness field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp) GetOrCreateBfdLiveness() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_BfdLiveness {
	if t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	t.BfdLiveness = &NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_BfdLiveness{}
	return t.BfdLiveness
}

// GetOrCreateCpuProtection retrieves the value of the CpuProtection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp) GetOrCreateCpuProtection() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_CpuProtection {
	if t.CpuProtection != nil {
		return t.CpuProtection
	}
	t.CpuProtection = &NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_CpuProtection{}
	return t.CpuProtection
}

// GetOrCreateDhcp retrieves the value of the Dhcp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp) GetOrCreateDhcp() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Dhcp {
	if t.Dhcp != nil {
		return t.Dhcp
	}
	t.Dhcp = &NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Dhcp{}
	return t.Dhcp
}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp) GetOrCreateEgress() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress{}
	return t.Egress
}

// GetOrCreateEthCfm retrieves the value of the EthCfm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp) GetOrCreateEthCfm() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm {
	if t.EthCfm != nil {
		return t.EthCfm
	}
	t.EthCfm = &NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm{}
	return t.EthCfm
}

// GetOrCreateFdb retrieves the value of the Fdb field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp) GetOrCreateFdb() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Fdb {
	if t.Fdb != nil {
		return t.Fdb
	}
	t.Fdb = &NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Fdb{}
	return t.Fdb
}

// GetOrCreateHashLabel retrieves the value of the HashLabel field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp) GetOrCreateHashLabel() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_HashLabel {
	if t.HashLabel != nil {
		return t.HashLabel
	}
	t.HashLabel = &NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_HashLabel{}
	return t.HashLabel
}

// GetOrCreateIgmpSnooping retrieves the value of the IgmpSnooping field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp) GetOrCreateIgmpSnooping() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping {
	if t.IgmpSnooping != nil {
		return t.IgmpSnooping
	}
	t.IgmpSnooping = &NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping{}
	return t.IgmpSnooping
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp) GetOrCreateIngress() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress{}
	return t.Ingress
}

// GetOrCreateMldSnooping retrieves the value of the MldSnooping field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp) GetOrCreateMldSnooping() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping {
	if t.MldSnooping != nil {
		return t.MldSnooping
	}
	t.MldSnooping = &NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping{}
	return t.MldSnooping
}

// GetOrCreateMrp retrieves the value of the Mrp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp) GetOrCreateMrp() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Mrp {
	if t.Mrp != nil {
		return t.Mrp
	}
	t.Mrp = &NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Mrp{}
	return t.Mrp
}

// GetOrCreatePbb retrieves the value of the Pbb field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp) GetOrCreatePbb() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb {
	if t.Pbb != nil {
		return t.Pbb
	}
	t.Pbb = &NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb{}
	return t.Pbb
}

// GetBfd returns the value of the Bfd struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp. If the receiver or the field Bfd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp) GetBfd() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Bfd {
	if t != nil && t.Bfd != nil {
		return t.Bfd
	}
	return nil
}

// GetBfdLiveness returns the value of the BfdLiveness struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp. If the receiver or the field BfdLiveness is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp) GetBfdLiveness() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_BfdLiveness {
	if t != nil && t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	return nil
}

// GetCpuProtection returns the value of the CpuProtection struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp. If the receiver or the field CpuProtection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp) GetCpuProtection() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_CpuProtection {
	if t != nil && t.CpuProtection != nil {
		return t.CpuProtection
	}
	return nil
}

// GetDhcp returns the value of the Dhcp struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp. If the receiver or the field Dhcp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp) GetDhcp() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Dhcp {
	if t != nil && t.Dhcp != nil {
		return t.Dhcp
	}
	return nil
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp) GetEgress() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetEthCfm returns the value of the EthCfm struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp. If the receiver or the field EthCfm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp) GetEthCfm() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm {
	if t != nil && t.EthCfm != nil {
		return t.EthCfm
	}
	return nil
}

// GetFdb returns the value of the Fdb struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp. If the receiver or the field Fdb is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp) GetFdb() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Fdb {
	if t != nil && t.Fdb != nil {
		return t.Fdb
	}
	return nil
}

// GetHashLabel returns the value of the HashLabel struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp. If the receiver or the field HashLabel is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp) GetHashLabel() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_HashLabel {
	if t != nil && t.HashLabel != nil {
		return t.HashLabel
	}
	return nil
}

// GetIgmpSnooping returns the value of the IgmpSnooping struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp. If the receiver or the field IgmpSnooping is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp) GetIgmpSnooping() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping {
	if t != nil && t.IgmpSnooping != nil {
		return t.IgmpSnooping
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp) GetIngress() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetMldSnooping returns the value of the MldSnooping struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp. If the receiver or the field MldSnooping is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp) GetMldSnooping() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping {
	if t != nil && t.MldSnooping != nil {
		return t.MldSnooping
	}
	return nil
}

// GetMrp returns the value of the Mrp struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp. If the receiver or the field Mrp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp) GetMrp() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Mrp {
	if t != nil && t.Mrp != nil {
		return t.Mrp
	}
	return nil
}

// GetPbb returns the value of the Pbb struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp. If the receiver or the field Pbb is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp) GetPbb() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb {
	if t != nil && t.Pbb != nil {
		return t.Pbb
	}
	return nil
}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetBfdTemplate retrieves the value of the leaf BfdTemplate from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdTemplate is set, it can
// safely use t.GetBfdTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp) GetBfdTemplate() string {
	if t == nil || t.BfdTemplate == nil {
		return ""
	}
	return *t.BfdTemplate
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// GetControlWord retrieves the value of the leaf ControlWord from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ControlWord is set, it can
// safely use t.GetControlWord() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ControlWord == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp) GetControlWord() bool {
	if t == nil || t.ControlWord == nil {
		return false
	}
	return *t.ControlWord
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEntropyLabel retrieves the value of the leaf EntropyLabel from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntropyLabel is set, it can
// safely use t.GetEntropyLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntropyLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp) GetEntropyLabel() YANGEmpty {
	if t == nil || t.EntropyLabel == false {
		return false
	}
	return t.EntropyLabel
}

// GetEtreeLeaf retrieves the value of the leaf EtreeLeaf from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EtreeLeaf is set, it can
// safely use t.GetEtreeLeaf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EtreeLeaf == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp) GetEtreeLeaf() bool {
	if t == nil || t.EtreeLeaf == nil {
		return false
	}
	return *t.EtreeLeaf
}

// GetEtreeRootLeafTag retrieves the value of the leaf EtreeRootLeafTag from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EtreeRootLeafTag is set, it can
// safely use t.GetEtreeRootLeafTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EtreeRootLeafTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp) GetEtreeRootLeafTag() bool {
	if t == nil || t.EtreeRootLeafTag == nil {
		return false
	}
	return *t.EtreeRootLeafTag
}

// GetForceVcForwarding retrieves the value of the leaf ForceVcForwarding from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForceVcForwarding is set, it can
// safely use t.GetForceVcForwarding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForceVcForwarding == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp) GetForceVcForwarding() E_NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_ForceVcForwarding {
	if t == nil || t.ForceVcForwarding == 0 {
		return 0
	}
	return t.ForceVcForwarding
}

// GetSdpBindId retrieves the value of the leaf SdpBindId from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SdpBindId is set, it can
// safely use t.GetSdpBindId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SdpBindId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp) GetSdpBindId() string {
	if t == nil || t.SdpBindId == nil {
		return ""
	}
	return *t.SdpBindId
}

// GetVcType retrieves the value of the leaf VcType from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VcType is set, it can
// safely use t.GetVcType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VcType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp) GetVcType() E_NokiaTypesServices_VplsSdpBindVcType {
	if t == nil || t.VcType == 0 {
		return NokiaTypesServices_VplsSdpBindVcType_ether
	}
	return t.VcType
}

// GetVlanVcTag retrieves the value of the leaf VlanVcTag from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VlanVcTag is set, it can
// safely use t.GetVlanVcTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VlanVcTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp) GetVlanVcTag() uint32 {
	if t == nil || t.VlanVcTag == nil {
		return 0
	}
	return *t.VlanVcTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
	if t.ControlWord == nil {
		var v bool = false
		t.ControlWord = &v
	}
	if t.EtreeLeaf == nil {
		var v bool = false
		t.EtreeLeaf = &v
	}
	if t.EtreeRootLeafTag == nil {
		var v bool = false
		t.EtreeRootLeafTag = &v
	}
	if t.VcType == 0 {
		t.VcType = NokiaTypesServices_VplsSdpBindVcType_ether
	}
	t.Bfd.PopulateDefaults()
	t.BfdLiveness.PopulateDefaults()
	t.CpuProtection.PopulateDefaults()
	t.Dhcp.PopulateDefaults()
	t.Egress.PopulateDefaults()
	t.EthCfm.PopulateDefaults()
	t.Fdb.PopulateDefaults()
	t.HashLabel.PopulateDefaults()
	t.IgmpSnooping.PopulateDefaults()
	t.Ingress.PopulateDefaults()
	t.MldSnooping.PopulateDefaults()
	t.Mrp.PopulateDefaults()
	t.Pbb.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SdpBindId == nil {
		return nil, fmt.Errorf("nil value for key SdpBindId")
	}

	return map[string]interface{}{
		"sdp-bind-id": *t.SdpBindId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Bfd represents the /nokia-conf/configure/groups/group/service/vpls/mesh-sdp/bfd YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Bfd struct {
	BfdLiveness *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Bfd_BfdLiveness `path:"bfd-liveness" module:"nokia-conf" yangPresence:"true"`
	BfdTemplate *string                                                                `path:"bfd-template" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Bfd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Bfd) IsYANGGoStruct() {}

// GetOrCreateBfdLiveness retrieves the value of the BfdLiveness field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Bfd) GetOrCreateBfdLiveness() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Bfd_BfdLiveness {
	if t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	t.BfdLiveness = &NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Bfd_BfdLiveness{}
	return t.BfdLiveness
}

// GetBfdLiveness returns the value of the BfdLiveness struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Bfd. If the receiver or the field BfdLiveness is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Bfd) GetBfdLiveness() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Bfd_BfdLiveness {
	if t != nil && t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	return nil
}

// GetBfdTemplate retrieves the value of the leaf BfdTemplate from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdTemplate is set, it can
// safely use t.GetBfdTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Bfd) GetBfdTemplate() string {
	if t == nil || t.BfdTemplate == nil {
		return ""
	}
	return *t.BfdTemplate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Bfd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Bfd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.BfdLiveness.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Bfd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Bfd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Bfd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Bfd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Bfd.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Bfd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_BfdLiveness represents the /nokia-conf/configure/groups/group/service/vpls/mesh-sdp/bfd-liveness YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_BfdLiveness struct {
	Encap E_NokiaTypesServices_BfdEncap `path:"encap" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_BfdLiveness implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_BfdLiveness) IsYANGGoStruct() {}

// GetEncap retrieves the value of the leaf Encap from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Encap is set, it can
// safely use t.GetEncap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Encap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_BfdLiveness) GetEncap() E_NokiaTypesServices_BfdEncap {
	if t == nil || t.Encap == 0 {
		return NokiaTypesServices_BfdEncap_ipv4
	}
	return t.Encap
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_BfdLiveness
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_BfdLiveness) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Encap == 0 {
		t.Encap = NokiaTypesServices_BfdEncap_ipv4
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_BfdLiveness) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_BfdLiveness"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_BfdLiveness) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_BfdLiveness) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_BfdLiveness.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_BfdLiveness) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Bfd_BfdLiveness represents the /nokia-conf/configure/groups/group/service/vpls/mesh-sdp/bfd/bfd-liveness YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Bfd_BfdLiveness struct {
	Encap E_NokiaTypesServices_BfdEncap `path:"encap" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Bfd_BfdLiveness implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Bfd_BfdLiveness) IsYANGGoStruct() {}

// GetEncap retrieves the value of the leaf Encap from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Bfd_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Encap is set, it can
// safely use t.GetEncap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Encap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Bfd_BfdLiveness) GetEncap() E_NokiaTypesServices_BfdEncap {
	if t == nil || t.Encap == 0 {
		return NokiaTypesServices_BfdEncap_ipv4
	}
	return t.Encap
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Bfd_BfdLiveness
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Bfd_BfdLiveness) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Encap == 0 {
		t.Encap = NokiaTypesServices_BfdEncap_ipv4
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Bfd_BfdLiveness) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Bfd_BfdLiveness"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Bfd_BfdLiveness) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Bfd_BfdLiveness) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Bfd_BfdLiveness.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Bfd_BfdLiveness) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_CpuProtection represents the /nokia-conf/configure/groups/group/service/vpls/mesh-sdp/cpu-protection YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_CpuProtection struct {
	EthCfmMonitoring *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_CpuProtection_EthCfmMonitoring `path:"eth-cfm-monitoring" module:"nokia-conf" yangPresence:"true"`
	MacMonitoring    YANGEmpty                                                                             `path:"mac-monitoring" module:"nokia-conf"`
	PolicyId         *uint32                                                                               `path:"policy-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_CpuProtection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_CpuProtection) IsYANGGoStruct() {}

// GetOrCreateEthCfmMonitoring retrieves the value of the EthCfmMonitoring field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_CpuProtection) GetOrCreateEthCfmMonitoring() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_CpuProtection_EthCfmMonitoring {
	if t.EthCfmMonitoring != nil {
		return t.EthCfmMonitoring
	}
	t.EthCfmMonitoring = &NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_CpuProtection_EthCfmMonitoring{}
	return t.EthCfmMonitoring
}

// GetEthCfmMonitoring returns the value of the EthCfmMonitoring struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_CpuProtection. If the receiver or the field EthCfmMonitoring is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_CpuProtection) GetEthCfmMonitoring() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_CpuProtection_EthCfmMonitoring {
	if t != nil && t.EthCfmMonitoring != nil {
		return t.EthCfmMonitoring
	}
	return nil
}

// GetMacMonitoring retrieves the value of the leaf MacMonitoring from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_CpuProtection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacMonitoring is set, it can
// safely use t.GetMacMonitoring() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacMonitoring == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_CpuProtection) GetMacMonitoring() YANGEmpty {
	if t == nil || t.MacMonitoring == false {
		return false
	}
	return t.MacMonitoring
}

// GetPolicyId retrieves the value of the leaf PolicyId from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_CpuProtection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyId is set, it can
// safely use t.GetPolicyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_CpuProtection) GetPolicyId() uint32 {
	if t == nil || t.PolicyId == nil {
		return 0
	}
	return *t.PolicyId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_CpuProtection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_CpuProtection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.EthCfmMonitoring.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_CpuProtection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_CpuProtection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_CpuProtection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_CpuProtection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_CpuProtection.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_CpuProtection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_CpuProtection_EthCfmMonitoring represents the /nokia-conf/configure/groups/group/service/vpls/mesh-sdp/cpu-protection/eth-cfm-monitoring YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_CpuProtection_EthCfmMonitoring struct {
	Aggregate YANGEmpty `path:"aggregate" module:"nokia-conf"`
	Car       YANGEmpty `path:"car" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_CpuProtection_EthCfmMonitoring implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_CpuProtection_EthCfmMonitoring) IsYANGGoStruct() {
}

// GetAggregate retrieves the value of the leaf Aggregate from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_CpuProtection_EthCfmMonitoring
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Aggregate is set, it can
// safely use t.GetAggregate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Aggregate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_CpuProtection_EthCfmMonitoring) GetAggregate() YANGEmpty {
	if t == nil || t.Aggregate == false {
		return false
	}
	return t.Aggregate
}

// GetCar retrieves the value of the leaf Car from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_CpuProtection_EthCfmMonitoring
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Car is set, it can
// safely use t.GetCar() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Car == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_CpuProtection_EthCfmMonitoring) GetCar() YANGEmpty {
	if t == nil || t.Car == false {
		return false
	}
	return t.Car
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_CpuProtection_EthCfmMonitoring
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_CpuProtection_EthCfmMonitoring) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_CpuProtection_EthCfmMonitoring) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_CpuProtection_EthCfmMonitoring"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_CpuProtection_EthCfmMonitoring) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_CpuProtection_EthCfmMonitoring) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_CpuProtection_EthCfmMonitoring.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_CpuProtection_EthCfmMonitoring) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Dhcp represents the /nokia-conf/configure/groups/group/service/vpls/mesh-sdp/dhcp YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Dhcp struct {
	Description *string `path:"description" module:"nokia-conf"`
	Snoop       *bool   `path:"snoop" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Dhcp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Dhcp) IsYANGGoStruct() {}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Dhcp) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetSnoop retrieves the value of the leaf Snoop from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Snoop is set, it can
// safely use t.GetSnoop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Snoop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Dhcp) GetSnoop() bool {
	if t == nil || t.Snoop == nil {
		return false
	}
	return *t.Snoop
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Dhcp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Dhcp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Snoop == nil {
		var v bool = false
		t.Snoop = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Dhcp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Dhcp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Dhcp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Dhcp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Dhcp.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Dhcp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress represents the /nokia-conf/configure/groups/group/service/vpls/mesh-sdp/egress YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress struct {
	Filter                     *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Filter                     `path:"filter" module:"nokia-conf"`
	MfibAllowedMdaDestinations *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations `path:"mfib-allowed-mda-destinations" module:"nokia-conf"`
	Qos                        *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Qos                        `path:"qos" module:"nokia-conf"`
	VcLabel                    *uint32                                                                                  `path:"vc-label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress) IsYANGGoStruct() {}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress) GetOrCreateFilter() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Filter{}
	return t.Filter
}

// GetOrCreateMfibAllowedMdaDestinations retrieves the value of the MfibAllowedMdaDestinations field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress) GetOrCreateMfibAllowedMdaDestinations() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations {
	if t.MfibAllowedMdaDestinations != nil {
		return t.MfibAllowedMdaDestinations
	}
	t.MfibAllowedMdaDestinations = &NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations{}
	return t.MfibAllowedMdaDestinations
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress) GetOrCreateQos() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Qos{}
	return t.Qos
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress) GetFilter() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetMfibAllowedMdaDestinations returns the value of the MfibAllowedMdaDestinations struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress. If the receiver or the field MfibAllowedMdaDestinations is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress) GetMfibAllowedMdaDestinations() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations {
	if t != nil && t.MfibAllowedMdaDestinations != nil {
		return t.MfibAllowedMdaDestinations
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress) GetQos() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// GetVcLabel retrieves the value of the leaf VcLabel from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VcLabel is set, it can
// safely use t.GetVcLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VcLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress) GetVcLabel() uint32 {
	if t == nil || t.VcLabel == nil {
		return 0
	}
	return *t.VcLabel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Filter.PopulateDefaults()
	t.MfibAllowedMdaDestinations.PopulateDefaults()
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Filter represents the /nokia-conf/configure/groups/group/service/vpls/mesh-sdp/egress/filter YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Filter struct {
	Ip   *string `path:"ip" module:"nokia-conf"`
	Ipv6 *string `path:"ipv6" module:"nokia-conf"`
	Mac  *string `path:"mac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Filter) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Filter) GetIpv6() string {
	if t == nil || t.Ipv6 == nil {
		return ""
	}
	return *t.Ipv6
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Filter) GetMac() string {
	if t == nil || t.Mac == nil {
		return ""
	}
	return *t.Mac
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Filter.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations represents the /nokia-conf/configure/groups/group/service/vpls/mesh-sdp/egress/mfib-allowed-mda-destinations YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations struct {
	Mda map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations_Mda `path:"mda" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations) IsYANGGoStruct() {
}

// NewMda creates a new entry in the Mda list of the
// NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations) NewMda(MdaId string) (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations_Mda, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mda == nil {
		t.Mda = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations_Mda)
	}

	key := MdaId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mda[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mda", key)
	}

	t.Mda[key] = &NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations_Mda{
		MdaId: &MdaId,
	}

	return t.Mda[key], nil
}

// RenameMda renames an entry in the list Mda within
// the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations) RenameMda(oldK, newK string) error {
	if _, ok := t.Mda[newK]; ok {
		return fmt.Errorf("key %v already exists in Mda", newK)
	}

	e, ok := t.Mda[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mda", oldK)
	}
	e.MdaId = &newK

	t.Mda[newK] = e
	delete(t.Mda, oldK)
	return nil
}

// GetOrCreateMda retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations) GetOrCreateMda(MdaId string) *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations_Mda {

	key := MdaId

	if v, ok := t.Mda[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMda(MdaId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMda got unexpected error: %v", err))
	}
	return v
}

// GetMda retrieves the value with the specified key from
// the Mda map field of NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations) GetMda(MdaId string) *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations_Mda {

	if t == nil {
		return nil
	}

	key := MdaId

	if lm, ok := t.Mda[key]; ok {
		return lm
	}
	return nil
}

// DeleteMda deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations) DeleteMda(MdaId string) {
	key := MdaId

	delete(t.Mda, key)
}

// AppendMda appends the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations_Mda struct to the
// list Mda of NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations_Mda already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations) AppendMda(v *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations_Mda) error {
	if v.MdaId == nil {
		return fmt.Errorf("invalid nil key received for MdaId")
	}

	key := *v.MdaId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mda == nil {
		t.Mda = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations_Mda)
	}

	if _, ok := t.Mda[key]; ok {
		return fmt.Errorf("duplicate key for list Mda %v", key)
	}

	t.Mda[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Mda {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations_Mda represents the /nokia-conf/configure/groups/group/service/vpls/mesh-sdp/egress/mfib-allowed-mda-destinations/mda YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations_Mda struct {
	MdaId *string `path:"mda-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations_Mda implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations_Mda) IsYANGGoStruct() {
}

// GetMdaId retrieves the value of the leaf MdaId from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations_Mda
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MdaId is set, it can
// safely use t.GetMdaId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MdaId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations_Mda) GetMdaId() string {
	if t == nil || t.MdaId == nil {
		return ""
	}
	return *t.MdaId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations_Mda
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations_Mda) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations_Mda struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations_Mda) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MdaId == nil {
		return nil, fmt.Errorf("nil value for key MdaId")
	}

	return map[string]interface{}{
		"mda-id": *t.MdaId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations_Mda) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations_Mda"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations_Mda) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations_Mda) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations_Mda.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_MfibAllowedMdaDestinations_Mda) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Qos represents the /nokia-conf/configure/groups/group/service/vpls/mesh-sdp/egress/qos YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Qos struct {
	Network *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Qos_Network `path:"network" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Qos) IsYANGGoStruct() {}

// GetOrCreateNetwork retrieves the value of the Network field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Qos) GetOrCreateNetwork() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Qos_Network {
	if t.Network != nil {
		return t.Network
	}
	t.Network = &NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Qos_Network{}
	return t.Network
}

// GetNetwork returns the value of the Network struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Qos. If the receiver or the field Network is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Qos) GetNetwork() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Qos_Network {
	if t != nil && t.Network != nil {
		return t.Network
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Network.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Qos.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Qos_Network represents the /nokia-conf/configure/groups/group/service/vpls/mesh-sdp/egress/qos/network YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Qos_Network struct {
	PolicyName        *string                                                                                     `path:"policy-name" module:"nokia-conf"`
	PortRedirectGroup *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Qos_Network_PortRedirectGroup `path:"port-redirect-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Qos_Network implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Qos_Network) IsYANGGoStruct() {}

// GetOrCreatePortRedirectGroup retrieves the value of the PortRedirectGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Qos_Network) GetOrCreatePortRedirectGroup() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Qos_Network_PortRedirectGroup {
	if t.PortRedirectGroup != nil {
		return t.PortRedirectGroup
	}
	t.PortRedirectGroup = &NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Qos_Network_PortRedirectGroup{}
	return t.PortRedirectGroup
}

// GetPortRedirectGroup returns the value of the PortRedirectGroup struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Qos_Network. If the receiver or the field PortRedirectGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Qos_Network) GetPortRedirectGroup() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Qos_Network_PortRedirectGroup {
	if t != nil && t.PortRedirectGroup != nil {
		return t.PortRedirectGroup
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Qos_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Qos_Network) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Qos_Network
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Qos_Network) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PortRedirectGroup.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Qos_Network) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Qos_Network"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Qos_Network) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Qos_Network) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Qos_Network.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Qos_Network) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Qos_Network_PortRedirectGroup represents the /nokia-conf/configure/groups/group/service/vpls/mesh-sdp/egress/qos/network/port-redirect-group YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Qos_Network_PortRedirectGroup struct {
	GroupName *string `path:"group-name" module:"nokia-conf"`
	Instance  *uint32 `path:"instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Qos_Network_PortRedirectGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Qos_Network_PortRedirectGroup) IsYANGGoStruct() {
}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Qos_Network_PortRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Qos_Network_PortRedirectGroup) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// GetInstance retrieves the value of the leaf Instance from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Qos_Network_PortRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instance is set, it can
// safely use t.GetInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Qos_Network_PortRedirectGroup) GetInstance() uint32 {
	if t == nil || t.Instance == nil {
		return 0
	}
	return *t.Instance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Qos_Network_PortRedirectGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Qos_Network_PortRedirectGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Qos_Network_PortRedirectGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Qos_Network_PortRedirectGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Qos_Network_PortRedirectGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Qos_Network_PortRedirectGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Qos_Network_PortRedirectGroup.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Egress_Qos_Network_PortRedirectGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm represents the /nokia-conf/configure/groups/group/service/vpls/mesh-sdp/eth-cfm YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm struct {
	CollectLmmFcStats        *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_CollectLmmFcStats                                                                          `path:"collect-lmm-fc-stats" module:"nokia-conf"`
	CollectLmmStats          *bool                                                                                                                                                    `path:"collect-lmm-stats" module:"nokia-conf"`
	Mep                      map[NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Key]*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep               `path:"mep" module:"nokia-conf"`
	Mip                      map[NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mip_PrimaryVlan_Union]*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mip `path:"mip" module:"nokia-conf"`
	SquelchIngressCtagLevels []uint32                                                                                                                                                 `path:"squelch-ingress-ctag-levels" module:"nokia-conf"`
	SquelchIngressLevels     []uint32                                                                                                                                                 `path:"squelch-ingress-levels" module:"nokia-conf"`
	VmepFilter               *bool                                                                                                                                                    `path:"vmep-filter" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm) IsYANGGoStruct() {}

// NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Key represents the key for list Mep of element /nokia-conf/configure/groups/group/service/vpls/mesh-sdp/eth-cfm.
type NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Key struct {
	MdAdminName string                                                                       `path:"md-admin-name"`
	MaAdminName string                                                                       `path:"ma-admin-name"`
	MepId       NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_MepId_Union `path:"mep-id"`
}

// NewMep creates a new entry in the Mep list of the
// NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm) NewMep(MdAdminName string, MaAdminName string, MepId NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_MepId_Union) (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mep == nil {
		t.Mep = make(map[NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Key]*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep)
	}

	key := NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mep[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mep", key)
	}

	t.Mep[key] = &NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep{
		MdAdminName: &MdAdminName,
		MaAdminName: &MaAdminName,
		MepId:       MepId,
	}

	return t.Mep[key], nil
}

// RenameMep renames an entry in the list Mep within
// the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm) RenameMep(oldK, newK NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Key) error {
	if _, ok := t.Mep[newK]; ok {
		return fmt.Errorf("key %v already exists in Mep", newK)
	}

	e, ok := t.Mep[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mep", oldK)
	}
	e.MdAdminName = &newK.MdAdminName
	e.MaAdminName = &newK.MaAdminName
	e.MepId = newK.MepId

	t.Mep[newK] = e
	delete(t.Mep, oldK)
	return nil
}

// GetOrCreateMep retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm) GetOrCreateMep(MdAdminName string, MaAdminName string, MepId NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_MepId_Union) *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep {

	key := NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	if v, ok := t.Mep[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMep(MdAdminName, MaAdminName, MepId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMep got unexpected error: %v", err))
	}
	return v
}

// GetMep retrieves the value with the specified key from
// the Mep map field of NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm) GetMep(MdAdminName string, MaAdminName string, MepId NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_MepId_Union) *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	if lm, ok := t.Mep[key]; ok {
		return lm
	}
	return nil
}

// DeleteMep deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm) DeleteMep(MdAdminName string, MaAdminName string, MepId NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_MepId_Union) {
	key := NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	delete(t.Mep, key)
}

// AppendMep appends the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep struct to the
// list Mep of NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm) AppendMep(v *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep) error {
	if v.MdAdminName == nil {
		return fmt.Errorf("invalid nil key for MdAdminName")
	}

	if v.MaAdminName == nil {
		return fmt.Errorf("invalid nil key for MaAdminName")
	}

	key := NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Key{
		MdAdminName: *v.MdAdminName,
		MaAdminName: *v.MaAdminName,
		MepId:       v.MepId,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mep == nil {
		t.Mep = make(map[NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Key]*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep)
	}

	if _, ok := t.Mep[key]; ok {
		return fmt.Errorf("duplicate key for list Mep %v", key)
	}

	t.Mep[key] = v
	return nil
}

// NewMip creates a new entry in the Mip list of the
// NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm) NewMip(PrimaryVlan NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mip_PrimaryVlan_Union) (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mip, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mip == nil {
		t.Mip = make(map[NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mip_PrimaryVlan_Union]*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mip)
	}

	key := PrimaryVlan

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mip[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mip", key)
	}

	t.Mip[key] = &NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mip{
		PrimaryVlan: PrimaryVlan,
	}

	return t.Mip[key], nil
}

// RenameMip renames an entry in the list Mip within
// the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm) RenameMip(oldK, newK NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mip_PrimaryVlan_Union) error {
	if _, ok := t.Mip[newK]; ok {
		return fmt.Errorf("key %v already exists in Mip", newK)
	}

	e, ok := t.Mip[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mip", oldK)
	}
	e.PrimaryVlan = newK

	t.Mip[newK] = e
	delete(t.Mip, oldK)
	return nil
}

// GetOrCreateMip retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm) GetOrCreateMip(PrimaryVlan NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mip_PrimaryVlan_Union) *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mip {

	key := PrimaryVlan

	if v, ok := t.Mip[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMip(PrimaryVlan)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMip got unexpected error: %v", err))
	}
	return v
}

// GetMip retrieves the value with the specified key from
// the Mip map field of NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm) GetMip(PrimaryVlan NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mip_PrimaryVlan_Union) *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mip {

	if t == nil {
		return nil
	}

	key := PrimaryVlan

	if lm, ok := t.Mip[key]; ok {
		return lm
	}
	return nil
}

// DeleteMip deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm) DeleteMip(PrimaryVlan NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mip_PrimaryVlan_Union) {
	key := PrimaryVlan

	delete(t.Mip, key)
}

// AppendMip appends the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mip struct to the
// list Mip of NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mip already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm) AppendMip(v *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mip) error {
	key := v.PrimaryVlan

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mip == nil {
		t.Mip = make(map[NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mip_PrimaryVlan_Union]*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mip)
	}

	if _, ok := t.Mip[key]; ok {
		return fmt.Errorf("duplicate key for list Mip %v", key)
	}

	t.Mip[key] = v
	return nil
}

// GetOrCreateCollectLmmFcStats retrieves the value of the CollectLmmFcStats field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm) GetOrCreateCollectLmmFcStats() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_CollectLmmFcStats {
	if t.CollectLmmFcStats != nil {
		return t.CollectLmmFcStats
	}
	t.CollectLmmFcStats = &NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_CollectLmmFcStats{}
	return t.CollectLmmFcStats
}

// GetCollectLmmFcStats returns the value of the CollectLmmFcStats struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm. If the receiver or the field CollectLmmFcStats is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm) GetCollectLmmFcStats() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_CollectLmmFcStats {
	if t != nil && t.CollectLmmFcStats != nil {
		return t.CollectLmmFcStats
	}
	return nil
}

// GetCollectLmmStats retrieves the value of the leaf CollectLmmStats from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectLmmStats is set, it can
// safely use t.GetCollectLmmStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectLmmStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm) GetCollectLmmStats() bool {
	if t == nil || t.CollectLmmStats == nil {
		return false
	}
	return *t.CollectLmmStats
}

// GetSquelchIngressCtagLevels retrieves the value of the leaf SquelchIngressCtagLevels from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SquelchIngressCtagLevels is set, it can
// safely use t.GetSquelchIngressCtagLevels() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SquelchIngressCtagLevels == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm) GetSquelchIngressCtagLevels() []uint32 {
	if t == nil || t.SquelchIngressCtagLevels == nil {
		return nil
	}
	return t.SquelchIngressCtagLevels
}

// GetSquelchIngressLevels retrieves the value of the leaf SquelchIngressLevels from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SquelchIngressLevels is set, it can
// safely use t.GetSquelchIngressLevels() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SquelchIngressLevels == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm) GetSquelchIngressLevels() []uint32 {
	if t == nil || t.SquelchIngressLevels == nil {
		return nil
	}
	return t.SquelchIngressLevels
}

// GetVmepFilter retrieves the value of the leaf VmepFilter from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VmepFilter is set, it can
// safely use t.GetVmepFilter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VmepFilter == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm) GetVmepFilter() bool {
	if t == nil || t.VmepFilter == nil {
		return false
	}
	return *t.VmepFilter
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CollectLmmStats == nil {
		var v bool = false
		t.CollectLmmStats = &v
	}
	if t.VmepFilter == nil {
		var v bool = false
		t.VmepFilter = &v
	}
	t.CollectLmmFcStats.PopulateDefaults()
	for _, e := range t.Mep {
		e.PopulateDefaults()
	}
	for _, e := range t.Mip {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_CollectLmmFcStats represents the /nokia-conf/configure/groups/group/service/vpls/mesh-sdp/eth-cfm/collect-lmm-fc-stats YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_CollectLmmFcStats struct {
	Fc          []E_NokiaTypesEthCfm_FcType `path:"fc" module:"nokia-conf"`
	FcInProfile []E_NokiaTypesEthCfm_FcType `path:"fc-in-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_CollectLmmFcStats implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_CollectLmmFcStats) IsYANGGoStruct() {
}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_CollectLmmFcStats
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_CollectLmmFcStats) GetFc() []E_NokiaTypesEthCfm_FcType {
	if t == nil || t.Fc == nil {
		return nil
	}
	return t.Fc
}

// GetFcInProfile retrieves the value of the leaf FcInProfile from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_CollectLmmFcStats
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FcInProfile is set, it can
// safely use t.GetFcInProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FcInProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_CollectLmmFcStats) GetFcInProfile() []E_NokiaTypesEthCfm_FcType {
	if t == nil || t.FcInProfile == nil {
		return nil
	}
	return t.FcInProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_CollectLmmFcStats
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_CollectLmmFcStats) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_CollectLmmFcStats) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_CollectLmmFcStats"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_CollectLmmFcStats) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_CollectLmmFcStats) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_CollectLmmFcStats.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_CollectLmmFcStats) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep represents the /nokia-conf/configure/groups/group/service/vpls/mesh-sdp/eth-cfm/mep YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep struct {
	AdminState           E_NokiaTypesSros_AdminState                                                         `path:"admin-state" module:"nokia-conf"`
	Ais                  *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Ais               `path:"ais" module:"nokia-conf" yangPresence:"true"`
	AlarmNotification    *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_AlarmNotification `path:"alarm-notification" module:"nokia-conf"`
	Ccm                  *bool                                                                               `path:"ccm" module:"nokia-conf"`
	CcmLtmPriority       *uint8                                                                              `path:"ccm-ltm-priority" module:"nokia-conf"`
	CcmPaddingSize       *uint32                                                                             `path:"ccm-padding-size" module:"nokia-conf"`
	CfmVlanTag           *string                                                                             `path:"cfm-vlan-tag" module:"nokia-conf"`
	Csf                  *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Csf               `path:"csf" module:"nokia-conf" yangPresence:"true"`
	Description          *string                                                                             `path:"description" module:"nokia-conf"`
	Direction            E_NokiaTypesEthCfm_MpDirection                                                      `path:"direction" module:"nokia-conf"`
	EthTest              *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest           `path:"eth-test" module:"nokia-conf" yangPresence:"true"`
	FaultPropagation     E_NokiaTypesEthCfm_FaultPropagationType                                             `path:"fault-propagation" module:"nokia-conf"`
	Grace                *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Grace             `path:"grace" module:"nokia-conf"`
	InstallMep           *bool                                                                               `path:"install-mep" module:"nokia-conf"`
	LbmSvcActResponder   *bool                                                                               `path:"lbm-svc-act-responder" module:"nokia-conf"`
	LowPriorityDefect    E_NokiaTypesEthCfm_LowestAlarmPriority                                              `path:"low-priority-defect" module:"nokia-conf"`
	MaAdminName          *string                                                                             `path:"ma-admin-name" module:"nokia-conf"`
	MacAddress           *string                                                                             `path:"mac-address" module:"nokia-conf"`
	MdAdminName          *string                                                                             `path:"md-admin-name" module:"nokia-conf"`
	MepId                NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_MepId_Union        `path:"mep-id" module:"nokia-conf"`
	OneWayDelayThreshold *uint32                                                                             `path:"one-way-delay-threshold" module:"nokia-conf"`
	PrimaryVlan          *bool                                                                               `path:"primary-vlan" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep) IsYANGGoStruct() {}

// GetOrCreateAis retrieves the value of the Ais field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep) GetOrCreateAis() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Ais {
	if t.Ais != nil {
		return t.Ais
	}
	t.Ais = &NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Ais{}
	return t.Ais
}

// GetOrCreateAlarmNotification retrieves the value of the AlarmNotification field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep) GetOrCreateAlarmNotification() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_AlarmNotification {
	if t.AlarmNotification != nil {
		return t.AlarmNotification
	}
	t.AlarmNotification = &NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_AlarmNotification{}
	return t.AlarmNotification
}

// GetOrCreateCsf retrieves the value of the Csf field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep) GetOrCreateCsf() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Csf {
	if t.Csf != nil {
		return t.Csf
	}
	t.Csf = &NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Csf{}
	return t.Csf
}

// GetOrCreateEthTest retrieves the value of the EthTest field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep) GetOrCreateEthTest() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest {
	if t.EthTest != nil {
		return t.EthTest
	}
	t.EthTest = &NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest{}
	return t.EthTest
}

// GetOrCreateGrace retrieves the value of the Grace field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep) GetOrCreateGrace() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Grace {
	if t.Grace != nil {
		return t.Grace
	}
	t.Grace = &NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Grace{}
	return t.Grace
}

// GetAis returns the value of the Ais struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep. If the receiver or the field Ais is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep) GetAis() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Ais {
	if t != nil && t.Ais != nil {
		return t.Ais
	}
	return nil
}

// GetAlarmNotification returns the value of the AlarmNotification struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep. If the receiver or the field AlarmNotification is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep) GetAlarmNotification() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_AlarmNotification {
	if t != nil && t.AlarmNotification != nil {
		return t.AlarmNotification
	}
	return nil
}

// GetCsf returns the value of the Csf struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep. If the receiver or the field Csf is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep) GetCsf() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Csf {
	if t != nil && t.Csf != nil {
		return t.Csf
	}
	return nil
}

// GetEthTest returns the value of the EthTest struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep. If the receiver or the field EthTest is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep) GetEthTest() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest {
	if t != nil && t.EthTest != nil {
		return t.EthTest
	}
	return nil
}

// GetGrace returns the value of the Grace struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep. If the receiver or the field Grace is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep) GetGrace() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Grace {
	if t != nil && t.Grace != nil {
		return t.Grace
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetCcm retrieves the value of the leaf Ccm from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ccm is set, it can
// safely use t.GetCcm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ccm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep) GetCcm() bool {
	if t == nil || t.Ccm == nil {
		return false
	}
	return *t.Ccm
}

// GetCcmLtmPriority retrieves the value of the leaf CcmLtmPriority from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CcmLtmPriority is set, it can
// safely use t.GetCcmLtmPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CcmLtmPriority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep) GetCcmLtmPriority() uint8 {
	if t == nil || t.CcmLtmPriority == nil {
		return 7
	}
	return *t.CcmLtmPriority
}

// GetCcmPaddingSize retrieves the value of the leaf CcmPaddingSize from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CcmPaddingSize is set, it can
// safely use t.GetCcmPaddingSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CcmPaddingSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep) GetCcmPaddingSize() uint32 {
	if t == nil || t.CcmPaddingSize == nil {
		return 0
	}
	return *t.CcmPaddingSize
}

// GetCfmVlanTag retrieves the value of the leaf CfmVlanTag from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CfmVlanTag is set, it can
// safely use t.GetCfmVlanTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CfmVlanTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep) GetCfmVlanTag() string {
	if t == nil || t.CfmVlanTag == nil {
		return ""
	}
	return *t.CfmVlanTag
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep) GetDirection() E_NokiaTypesEthCfm_MpDirection {
	if t == nil || t.Direction == 0 {
		return NokiaTypesEthCfm_MpDirection_down
	}
	return t.Direction
}

// GetFaultPropagation retrieves the value of the leaf FaultPropagation from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FaultPropagation is set, it can
// safely use t.GetFaultPropagation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FaultPropagation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep) GetFaultPropagation() E_NokiaTypesEthCfm_FaultPropagationType {
	if t == nil || t.FaultPropagation == 0 {
		return 0
	}
	return t.FaultPropagation
}

// GetInstallMep retrieves the value of the leaf InstallMep from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InstallMep is set, it can
// safely use t.GetInstallMep() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InstallMep == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep) GetInstallMep() bool {
	if t == nil || t.InstallMep == nil {
		return false
	}
	return *t.InstallMep
}

// GetLbmSvcActResponder retrieves the value of the leaf LbmSvcActResponder from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LbmSvcActResponder is set, it can
// safely use t.GetLbmSvcActResponder() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LbmSvcActResponder == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep) GetLbmSvcActResponder() bool {
	if t == nil || t.LbmSvcActResponder == nil {
		return false
	}
	return *t.LbmSvcActResponder
}

// GetLowPriorityDefect retrieves the value of the leaf LowPriorityDefect from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowPriorityDefect is set, it can
// safely use t.GetLowPriorityDefect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowPriorityDefect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep) GetLowPriorityDefect() E_NokiaTypesEthCfm_LowestAlarmPriority {
	if t == nil || t.LowPriorityDefect == 0 {
		return NokiaTypesEthCfm_LowestAlarmPriority_mac_rem_err_xcon
	}
	return t.LowPriorityDefect
}

// GetMaAdminName retrieves the value of the leaf MaAdminName from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaAdminName is set, it can
// safely use t.GetMaAdminName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaAdminName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep) GetMaAdminName() string {
	if t == nil || t.MaAdminName == nil {
		return ""
	}
	return *t.MaAdminName
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return ""
	}
	return *t.MacAddress
}

// GetMdAdminName retrieves the value of the leaf MdAdminName from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MdAdminName is set, it can
// safely use t.GetMdAdminName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MdAdminName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep) GetMdAdminName() string {
	if t == nil || t.MdAdminName == nil {
		return ""
	}
	return *t.MdAdminName
}

// GetMepId retrieves the value of the leaf MepId from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MepId is set, it can
// safely use t.GetMepId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MepId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep) GetMepId() NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_MepId_Union {
	if t == nil || t.MepId == nil {
		return nil
	}
	return t.MepId
}

// GetOneWayDelayThreshold retrieves the value of the leaf OneWayDelayThreshold from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OneWayDelayThreshold is set, it can
// safely use t.GetOneWayDelayThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OneWayDelayThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep) GetOneWayDelayThreshold() uint32 {
	if t == nil || t.OneWayDelayThreshold == nil {
		return 3
	}
	return *t.OneWayDelayThreshold
}

// GetPrimaryVlan retrieves the value of the leaf PrimaryVlan from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrimaryVlan is set, it can
// safely use t.GetPrimaryVlan() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrimaryVlan == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep) GetPrimaryVlan() bool {
	if t == nil || t.PrimaryVlan == nil {
		return false
	}
	return *t.PrimaryVlan
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Ccm == nil {
		var v bool = false
		t.Ccm = &v
	}
	if t.CcmLtmPriority == nil {
		var v uint8 = 7
		t.CcmLtmPriority = &v
	}
	if t.Direction == 0 {
		t.Direction = NokiaTypesEthCfm_MpDirection_down
	}
	if t.InstallMep == nil {
		var v bool = false
		t.InstallMep = &v
	}
	if t.LowPriorityDefect == 0 {
		t.LowPriorityDefect = NokiaTypesEthCfm_LowestAlarmPriority_mac_rem_err_xcon
	}
	if t.OneWayDelayThreshold == nil {
		var v uint32 = 3
		t.OneWayDelayThreshold = &v
	}
	if t.PrimaryVlan == nil {
		var v bool = false
		t.PrimaryVlan = &v
	}
	t.Ais.PopulateDefaults()
	t.AlarmNotification.PopulateDefaults()
	t.Csf.PopulateDefaults()
	t.EthTest.PopulateDefaults()
	t.Grace.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MaAdminName == nil {
		return nil, fmt.Errorf("nil value for key MaAdminName")
	}

	if t.MdAdminName == nil {
		return nil, fmt.Errorf("nil value for key MdAdminName")
	}

	return map[string]interface{}{
		"ma-admin-name": *t.MaAdminName,
		"md-admin-name": *t.MdAdminName,
		"mep-id":        t.MepId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Ais represents the /nokia-conf/configure/groups/group/service/vpls/mesh-sdp/eth-cfm/mep/ais YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Ais struct {
	ClientMegLevel    []uint32                                                                                 `path:"client-meg-level" module:"nokia-conf"`
	InterfaceSupport  *bool                                                                                    `path:"interface-support" module:"nokia-conf"`
	Interval          *uint32                                                                                  `path:"interval" module:"nokia-conf"`
	LowPriorityDefect E_NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Ais_LowPriorityDefect `path:"low-priority-defect" module:"nokia-conf"`
	Priority          *uint8                                                                                   `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Ais implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Ais) IsYANGGoStruct() {}

// GetClientMegLevel retrieves the value of the leaf ClientMegLevel from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Ais
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClientMegLevel is set, it can
// safely use t.GetClientMegLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClientMegLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Ais) GetClientMegLevel() []uint32 {
	if t == nil || t.ClientMegLevel == nil {
		return nil
	}
	return t.ClientMegLevel
}

// GetInterfaceSupport retrieves the value of the leaf InterfaceSupport from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Ais
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceSupport is set, it can
// safely use t.GetInterfaceSupport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceSupport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Ais) GetInterfaceSupport() bool {
	if t == nil || t.InterfaceSupport == nil {
		return false
	}
	return *t.InterfaceSupport
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Ais
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Ais) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 1
	}
	return *t.Interval
}

// GetLowPriorityDefect retrieves the value of the leaf LowPriorityDefect from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Ais
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowPriorityDefect is set, it can
// safely use t.GetLowPriorityDefect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowPriorityDefect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Ais) GetLowPriorityDefect() E_NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Ais_LowPriorityDefect {
	if t == nil || t.LowPriorityDefect == 0 {
		return NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Ais_LowPriorityDefect_all_def
	}
	return t.LowPriorityDefect
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Ais
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Ais) GetPriority() uint8 {
	if t == nil || t.Priority == nil {
		return 7
	}
	return *t.Priority
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Ais
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Ais) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InterfaceSupport == nil {
		var v bool = false
		t.InterfaceSupport = &v
	}
	if t.Interval == nil {
		var v uint32 = 1
		t.Interval = &v
	}
	if t.LowPriorityDefect == 0 {
		t.LowPriorityDefect = NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Ais_LowPriorityDefect_all_def
	}
	if t.Priority == nil {
		var v uint8 = 7
		t.Priority = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Ais) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Ais"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Ais) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Ais) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Ais.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Ais) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_AlarmNotification represents the /nokia-conf/configure/groups/group/service/vpls/mesh-sdp/eth-cfm/mep/alarm-notification YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_AlarmNotification struct {
	FngAlarmTime *int32 `path:"fng-alarm-time" module:"nokia-conf"`
	FngResetTime *int32 `path:"fng-reset-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_AlarmNotification implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_AlarmNotification) IsYANGGoStruct() {
}

// GetFngAlarmTime retrieves the value of the leaf FngAlarmTime from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_AlarmNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FngAlarmTime is set, it can
// safely use t.GetFngAlarmTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FngAlarmTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_AlarmNotification) GetFngAlarmTime() int32 {
	if t == nil || t.FngAlarmTime == nil {
		return 0
	}
	return *t.FngAlarmTime
}

// GetFngResetTime retrieves the value of the leaf FngResetTime from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_AlarmNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FngResetTime is set, it can
// safely use t.GetFngResetTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FngResetTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_AlarmNotification) GetFngResetTime() int32 {
	if t == nil || t.FngResetTime == nil {
		return 0
	}
	return *t.FngResetTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_AlarmNotification
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_AlarmNotification) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_AlarmNotification) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_AlarmNotification"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_AlarmNotification) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_AlarmNotification) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_AlarmNotification.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_AlarmNotification) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Csf represents the /nokia-conf/configure/groups/group/service/vpls/mesh-sdp/eth-cfm/mep/csf YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Csf struct {
	Multiplier *float64 `path:"multiplier" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Csf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Csf) IsYANGGoStruct() {}

// GetMultiplier retrieves the value of the leaf Multiplier from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Csf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multiplier is set, it can
// safely use t.GetMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Csf) GetMultiplier() float64 {
	if t == nil || t.Multiplier == nil {
		return 3.5
	}
	return *t.Multiplier
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Csf
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Csf) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Multiplier == nil {
		var v float64 = 3.5
		t.Multiplier = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Csf) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Csf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Csf) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Csf) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Csf.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Csf) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest represents the /nokia-conf/configure/groups/group/service/vpls/mesh-sdp/eth-cfm/mep/eth-test YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest struct {
	BitErrorThreshold *uint32                                                                               `path:"bit-error-threshold" module:"nokia-conf"`
	TestPattern       *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest_TestPattern `path:"test-pattern" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest) IsYANGGoStruct() {}

// GetOrCreateTestPattern retrieves the value of the TestPattern field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest) GetOrCreateTestPattern() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest_TestPattern {
	if t.TestPattern != nil {
		return t.TestPattern
	}
	t.TestPattern = &NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest_TestPattern{}
	return t.TestPattern
}

// GetTestPattern returns the value of the TestPattern struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest. If the receiver or the field TestPattern is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest) GetTestPattern() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest_TestPattern {
	if t != nil && t.TestPattern != nil {
		return t.TestPattern
	}
	return nil
}

// GetBitErrorThreshold retrieves the value of the leaf BitErrorThreshold from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BitErrorThreshold is set, it can
// safely use t.GetBitErrorThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BitErrorThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest) GetBitErrorThreshold() uint32 {
	if t == nil || t.BitErrorThreshold == nil {
		return 1
	}
	return *t.BitErrorThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BitErrorThreshold == nil {
		var v uint32 = 1
		t.BitErrorThreshold = &v
	}
	t.TestPattern.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest_TestPattern represents the /nokia-conf/configure/groups/group/service/vpls/mesh-sdp/eth-cfm/mep/eth-test/test-pattern YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest_TestPattern struct {
	CrcTlv  *bool                                                                                          `path:"crc-tlv" module:"nokia-conf"`
	Pattern E_NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest_TestPattern_Pattern `path:"pattern" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest_TestPattern implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest_TestPattern) IsYANGGoStruct() {
}

// GetCrcTlv retrieves the value of the leaf CrcTlv from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest_TestPattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CrcTlv is set, it can
// safely use t.GetCrcTlv() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CrcTlv == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest_TestPattern) GetCrcTlv() bool {
	if t == nil || t.CrcTlv == nil {
		return false
	}
	return *t.CrcTlv
}

// GetPattern retrieves the value of the leaf Pattern from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest_TestPattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pattern is set, it can
// safely use t.GetPattern() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pattern == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest_TestPattern) GetPattern() E_NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest_TestPattern_Pattern {
	if t == nil || t.Pattern == 0 {
		return NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest_TestPattern_Pattern_all_zeros
	}
	return t.Pattern
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest_TestPattern
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest_TestPattern) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CrcTlv == nil {
		var v bool = false
		t.CrcTlv = &v
	}
	if t.Pattern == 0 {
		t.Pattern = NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest_TestPattern_Pattern_all_zeros
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest_TestPattern) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest_TestPattern"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest_TestPattern) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest_TestPattern) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest_TestPattern.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_EthTest_TestPattern) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Grace represents the /nokia-conf/configure/groups/group/service/vpls/mesh-sdp/eth-cfm/mep/grace YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Grace struct {
	EthEd       *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthEd       `path:"eth-ed" module:"nokia-conf"`
	EthVsmGrace *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthVsmGrace `path:"eth-vsm-grace" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Grace implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Grace) IsYANGGoStruct() {}

// GetOrCreateEthEd retrieves the value of the EthEd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Grace) GetOrCreateEthEd() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthEd {
	if t.EthEd != nil {
		return t.EthEd
	}
	t.EthEd = &NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthEd{}
	return t.EthEd
}

// GetOrCreateEthVsmGrace retrieves the value of the EthVsmGrace field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Grace) GetOrCreateEthVsmGrace() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthVsmGrace {
	if t.EthVsmGrace != nil {
		return t.EthVsmGrace
	}
	t.EthVsmGrace = &NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthVsmGrace{}
	return t.EthVsmGrace
}

// GetEthEd returns the value of the EthEd struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Grace. If the receiver or the field EthEd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Grace) GetEthEd() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthEd {
	if t != nil && t.EthEd != nil {
		return t.EthEd
	}
	return nil
}

// GetEthVsmGrace returns the value of the EthVsmGrace struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Grace. If the receiver or the field EthVsmGrace is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Grace) GetEthVsmGrace() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthVsmGrace {
	if t != nil && t.EthVsmGrace != nil {
		return t.EthVsmGrace
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Grace
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Grace) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.EthEd.PopulateDefaults()
	t.EthVsmGrace.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Grace) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Grace"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Grace) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Grace) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Grace.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Grace) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthEd represents the /nokia-conf/configure/groups/group/service/vpls/mesh-sdp/eth-cfm/mep/grace/eth-ed YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthEd struct {
	MaxRxDefectWindow *uint32 `path:"max-rx-defect-window" module:"nokia-conf"`
	Priority          *int32  `path:"priority" module:"nokia-conf"`
	RxEthEd           *bool   `path:"rx-eth-ed" module:"nokia-conf"`
	TxEthEd           *bool   `path:"tx-eth-ed" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthEd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthEd) IsYANGGoStruct() {
}

// GetMaxRxDefectWindow retrieves the value of the leaf MaxRxDefectWindow from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRxDefectWindow is set, it can
// safely use t.GetMaxRxDefectWindow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRxDefectWindow == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthEd) GetMaxRxDefectWindow() uint32 {
	if t == nil || t.MaxRxDefectWindow == nil {
		return 0
	}
	return *t.MaxRxDefectWindow
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthEd) GetPriority() int32 {
	if t == nil || t.Priority == nil {
		return 0
	}
	return *t.Priority
}

// GetRxEthEd retrieves the value of the leaf RxEthEd from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RxEthEd is set, it can
// safely use t.GetRxEthEd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RxEthEd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthEd) GetRxEthEd() bool {
	if t == nil || t.RxEthEd == nil {
		return true
	}
	return *t.RxEthEd
}

// GetTxEthEd retrieves the value of the leaf TxEthEd from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxEthEd is set, it can
// safely use t.GetTxEthEd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxEthEd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthEd) GetTxEthEd() bool {
	if t == nil || t.TxEthEd == nil {
		return false
	}
	return *t.TxEthEd
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthEd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthEd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RxEthEd == nil {
		var v bool = true
		t.RxEthEd = &v
	}
	if t.TxEthEd == nil {
		var v bool = false
		t.TxEthEd = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthEd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthEd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthEd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthEd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthEd.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthEd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthVsmGrace represents the /nokia-conf/configure/groups/group/service/vpls/mesh-sdp/eth-cfm/mep/grace/eth-vsm-grace YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthVsmGrace struct {
	RxEthVsmGrace *bool `path:"rx-eth-vsm-grace" module:"nokia-conf"`
	TxEthVsmGrace *bool `path:"tx-eth-vsm-grace" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthVsmGrace implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthVsmGrace) IsYANGGoStruct() {
}

// GetRxEthVsmGrace retrieves the value of the leaf RxEthVsmGrace from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthVsmGrace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RxEthVsmGrace is set, it can
// safely use t.GetRxEthVsmGrace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RxEthVsmGrace == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthVsmGrace) GetRxEthVsmGrace() bool {
	if t == nil || t.RxEthVsmGrace == nil {
		return true
	}
	return *t.RxEthVsmGrace
}

// GetTxEthVsmGrace retrieves the value of the leaf TxEthVsmGrace from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthVsmGrace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxEthVsmGrace is set, it can
// safely use t.GetTxEthVsmGrace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxEthVsmGrace == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthVsmGrace) GetTxEthVsmGrace() bool {
	if t == nil || t.TxEthVsmGrace == nil {
		return true
	}
	return *t.TxEthVsmGrace
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthVsmGrace
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthVsmGrace) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RxEthVsmGrace == nil {
		var v bool = true
		t.RxEthVsmGrace = &v
	}
	if t.TxEthVsmGrace == nil {
		var v bool = true
		t.TxEthVsmGrace = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthVsmGrace) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthVsmGrace"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthVsmGrace) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthVsmGrace) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthVsmGrace.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mep_Grace_EthVsmGrace) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mip represents the /nokia-conf/configure/groups/group/service/vpls/mesh-sdp/eth-cfm/mip YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mip struct {
	CfmVlanTag  *string                                                                            `path:"cfm-vlan-tag" module:"nokia-conf"`
	MacAddress  *string                                                                            `path:"mac-address" module:"nokia-conf"`
	PrimaryVlan NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mip_PrimaryVlan_Union `path:"primary-vlan" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mip implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mip) IsYANGGoStruct() {}

// GetCfmVlanTag retrieves the value of the leaf CfmVlanTag from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CfmVlanTag is set, it can
// safely use t.GetCfmVlanTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CfmVlanTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mip) GetCfmVlanTag() string {
	if t == nil || t.CfmVlanTag == nil {
		return ""
	}
	return *t.CfmVlanTag
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mip) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return ""
	}
	return *t.MacAddress
}

// GetPrimaryVlan retrieves the value of the leaf PrimaryVlan from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrimaryVlan is set, it can
// safely use t.GetPrimaryVlan() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrimaryVlan == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mip) GetPrimaryVlan() NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mip_PrimaryVlan_Union {
	if t == nil || t.PrimaryVlan == nil {
		return nil
	}
	return t.PrimaryVlan
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mip
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mip) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mip struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mip) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"primary-vlan": t.PrimaryVlan,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mip) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mip"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mip) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mip) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mip.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_EthCfm_Mip) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Fdb represents the /nokia-conf/configure/groups/group/service/vpls/mesh-sdp/fdb YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Fdb struct {
	AutoLearnMacProtect            *bool                                                  `path:"auto-learn-mac-protect" module:"nokia-conf"`
	AutoLearnMacProtectExcludeList *string                                                `path:"auto-learn-mac-protect-exclude-list" module:"nokia-conf"`
	MacPinning                     *bool                                                  `path:"mac-pinning" module:"nokia-conf"`
	ProtectedSrcMacViolationAction E_NokiaTypesServices_SdpProtectedSrcMacViolationAction `path:"protected-src-mac-violation-action" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Fdb implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Fdb) IsYANGGoStruct() {}

// GetAutoLearnMacProtect retrieves the value of the leaf AutoLearnMacProtect from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Fdb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoLearnMacProtect is set, it can
// safely use t.GetAutoLearnMacProtect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoLearnMacProtect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Fdb) GetAutoLearnMacProtect() bool {
	if t == nil || t.AutoLearnMacProtect == nil {
		return false
	}
	return *t.AutoLearnMacProtect
}

// GetAutoLearnMacProtectExcludeList retrieves the value of the leaf AutoLearnMacProtectExcludeList from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Fdb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoLearnMacProtectExcludeList is set, it can
// safely use t.GetAutoLearnMacProtectExcludeList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoLearnMacProtectExcludeList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Fdb) GetAutoLearnMacProtectExcludeList() string {
	if t == nil || t.AutoLearnMacProtectExcludeList == nil {
		return ""
	}
	return *t.AutoLearnMacProtectExcludeList
}

// GetMacPinning retrieves the value of the leaf MacPinning from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Fdb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacPinning is set, it can
// safely use t.GetMacPinning() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacPinning == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Fdb) GetMacPinning() bool {
	if t == nil || t.MacPinning == nil {
		return false
	}
	return *t.MacPinning
}

// GetProtectedSrcMacViolationAction retrieves the value of the leaf ProtectedSrcMacViolationAction from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Fdb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProtectedSrcMacViolationAction is set, it can
// safely use t.GetProtectedSrcMacViolationAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProtectedSrcMacViolationAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Fdb) GetProtectedSrcMacViolationAction() E_NokiaTypesServices_SdpProtectedSrcMacViolationAction {
	if t == nil || t.ProtectedSrcMacViolationAction == 0 {
		return 0
	}
	return t.ProtectedSrcMacViolationAction
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Fdb
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Fdb) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AutoLearnMacProtect == nil {
		var v bool = false
		t.AutoLearnMacProtect = &v
	}
	if t.MacPinning == nil {
		var v bool = false
		t.MacPinning = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Fdb) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Fdb"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Fdb) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Fdb) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Fdb.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Fdb) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_HashLabel represents the /nokia-conf/configure/groups/group/service/vpls/mesh-sdp/hash-label YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_HashLabel struct {
	SignalCapability YANGEmpty `path:"signal-capability" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_HashLabel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_HashLabel) IsYANGGoStruct() {}

// GetSignalCapability retrieves the value of the leaf SignalCapability from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_HashLabel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SignalCapability is set, it can
// safely use t.GetSignalCapability() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SignalCapability == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_HashLabel) GetSignalCapability() YANGEmpty {
	if t == nil || t.SignalCapability == false {
		return false
	}
	return t.SignalCapability
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_HashLabel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_HashLabel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_HashLabel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_HashLabel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_HashLabel) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_HashLabel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_HashLabel.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_HashLabel) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping represents the /nokia-conf/configure/groups/group/service/vpls/mesh-sdp/igmp-snooping YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping struct {
	FastLeave                 *bool                                                                      `path:"fast-leave" module:"nokia-conf"`
	ImportPolicy              *string                                                                    `path:"import-policy" module:"nokia-conf"`
	MaximumNumberGroupSources *uint32                                                                    `path:"maximum-number-group-sources" module:"nokia-conf"`
	MaximumNumberGroups       *uint32                                                                    `path:"maximum-number-groups" module:"nokia-conf"`
	MaximumNumberSources      *uint32                                                                    `path:"maximum-number-sources" module:"nokia-conf"`
	Mcac                      *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Mcac   `path:"mcac" module:"nokia-conf"`
	MrouterPort               *bool                                                                      `path:"mrouter-port" module:"nokia-conf"`
	QueryInterval             *uint32                                                                    `path:"query-interval" module:"nokia-conf"`
	QueryLastMemberInterval   *uint32                                                                    `path:"query-last-member-interval" module:"nokia-conf"`
	QueryResponseInterval     *uint32                                                                    `path:"query-response-interval" module:"nokia-conf"`
	RobustCount               *uint32                                                                    `path:"robust-count" module:"nokia-conf"`
	RouterAlertCheck          *bool                                                                      `path:"router-alert-check" module:"nokia-conf"`
	SendQueries               *bool                                                                      `path:"send-queries" module:"nokia-conf"`
	Static                    *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static `path:"static" module:"nokia-conf"`
	Version                   E_NokiaTypesIgmp_IgmpVersion                                               `path:"version" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping) IsYANGGoStruct() {}

// GetOrCreateMcac retrieves the value of the Mcac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping) GetOrCreateMcac() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Mcac {
	if t.Mcac != nil {
		return t.Mcac
	}
	t.Mcac = &NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Mcac{}
	return t.Mcac
}

// GetOrCreateStatic retrieves the value of the Static field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping) GetOrCreateStatic() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static {
	if t.Static != nil {
		return t.Static
	}
	t.Static = &NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static{}
	return t.Static
}

// GetMcac returns the value of the Mcac struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping. If the receiver or the field Mcac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping) GetMcac() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Mcac {
	if t != nil && t.Mcac != nil {
		return t.Mcac
	}
	return nil
}

// GetStatic returns the value of the Static struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping. If the receiver or the field Static is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping) GetStatic() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static {
	if t != nil && t.Static != nil {
		return t.Static
	}
	return nil
}

// GetFastLeave retrieves the value of the leaf FastLeave from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FastLeave is set, it can
// safely use t.GetFastLeave() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FastLeave == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping) GetFastLeave() bool {
	if t == nil || t.FastLeave == nil {
		return false
	}
	return *t.FastLeave
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping) GetImportPolicy() string {
	if t == nil || t.ImportPolicy == nil {
		return ""
	}
	return *t.ImportPolicy
}

// GetMaximumNumberGroupSources retrieves the value of the leaf MaximumNumberGroupSources from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroupSources is set, it can
// safely use t.GetMaximumNumberGroupSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroupSources == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping) GetMaximumNumberGroupSources() uint32 {
	if t == nil || t.MaximumNumberGroupSources == nil {
		return 0
	}
	return *t.MaximumNumberGroupSources
}

// GetMaximumNumberGroups retrieves the value of the leaf MaximumNumberGroups from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroups is set, it can
// safely use t.GetMaximumNumberGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping) GetMaximumNumberGroups() uint32 {
	if t == nil || t.MaximumNumberGroups == nil {
		return 0
	}
	return *t.MaximumNumberGroups
}

// GetMaximumNumberSources retrieves the value of the leaf MaximumNumberSources from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberSources is set, it can
// safely use t.GetMaximumNumberSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberSources == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping) GetMaximumNumberSources() uint32 {
	if t == nil || t.MaximumNumberSources == nil {
		return 0
	}
	return *t.MaximumNumberSources
}

// GetMrouterPort retrieves the value of the leaf MrouterPort from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MrouterPort is set, it can
// safely use t.GetMrouterPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MrouterPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping) GetMrouterPort() bool {
	if t == nil || t.MrouterPort == nil {
		return false
	}
	return *t.MrouterPort
}

// GetQueryInterval retrieves the value of the leaf QueryInterval from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryInterval is set, it can
// safely use t.GetQueryInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping) GetQueryInterval() uint32 {
	if t == nil || t.QueryInterval == nil {
		return 125
	}
	return *t.QueryInterval
}

// GetQueryLastMemberInterval retrieves the value of the leaf QueryLastMemberInterval from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryLastMemberInterval is set, it can
// safely use t.GetQueryLastMemberInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryLastMemberInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping) GetQueryLastMemberInterval() uint32 {
	if t == nil || t.QueryLastMemberInterval == nil {
		return 10
	}
	return *t.QueryLastMemberInterval
}

// GetQueryResponseInterval retrieves the value of the leaf QueryResponseInterval from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryResponseInterval is set, it can
// safely use t.GetQueryResponseInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryResponseInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping) GetQueryResponseInterval() uint32 {
	if t == nil || t.QueryResponseInterval == nil {
		return 10
	}
	return *t.QueryResponseInterval
}

// GetRobustCount retrieves the value of the leaf RobustCount from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RobustCount is set, it can
// safely use t.GetRobustCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RobustCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping) GetRobustCount() uint32 {
	if t == nil || t.RobustCount == nil {
		return 2
	}
	return *t.RobustCount
}

// GetRouterAlertCheck retrieves the value of the leaf RouterAlertCheck from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterAlertCheck is set, it can
// safely use t.GetRouterAlertCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterAlertCheck == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping) GetRouterAlertCheck() bool {
	if t == nil || t.RouterAlertCheck == nil {
		return true
	}
	return *t.RouterAlertCheck
}

// GetSendQueries retrieves the value of the leaf SendQueries from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SendQueries is set, it can
// safely use t.GetSendQueries() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SendQueries == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping) GetSendQueries() bool {
	if t == nil || t.SendQueries == nil {
		return false
	}
	return *t.SendQueries
}

// GetVersion retrieves the value of the leaf Version from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping) GetVersion() E_NokiaTypesIgmp_IgmpVersion {
	if t == nil || t.Version == 0 {
		return NokiaTypesIgmp_IgmpVersion_3
	}
	return t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FastLeave == nil {
		var v bool = false
		t.FastLeave = &v
	}
	if t.MrouterPort == nil {
		var v bool = false
		t.MrouterPort = &v
	}
	if t.QueryInterval == nil {
		var v uint32 = 125
		t.QueryInterval = &v
	}
	if t.QueryLastMemberInterval == nil {
		var v uint32 = 10
		t.QueryLastMemberInterval = &v
	}
	if t.QueryResponseInterval == nil {
		var v uint32 = 10
		t.QueryResponseInterval = &v
	}
	if t.RobustCount == nil {
		var v uint32 = 2
		t.RobustCount = &v
	}
	if t.RouterAlertCheck == nil {
		var v bool = true
		t.RouterAlertCheck = &v
	}
	if t.SendQueries == nil {
		var v bool = false
		t.SendQueries = &v
	}
	if t.Version == 0 {
		t.Version = NokiaTypesIgmp_IgmpVersion_3
	}
	t.Mcac.PopulateDefaults()
	t.Static.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Mcac represents the /nokia-conf/configure/groups/group/service/vpls/mesh-sdp/igmp-snooping/mcac YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Mcac struct {
	Bandwidth       *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Mcac_Bandwidth `path:"bandwidth" module:"nokia-conf"`
	InterfacePolicy *string                                                                            `path:"interface-policy" module:"nokia-conf"`
	Policy          *string                                                                            `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Mcac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Mcac) IsYANGGoStruct() {}

// GetOrCreateBandwidth retrieves the value of the Bandwidth field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Mcac) GetOrCreateBandwidth() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Mcac_Bandwidth {
	if t.Bandwidth != nil {
		return t.Bandwidth
	}
	t.Bandwidth = &NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Mcac_Bandwidth{}
	return t.Bandwidth
}

// GetBandwidth returns the value of the Bandwidth struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Mcac. If the receiver or the field Bandwidth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Mcac) GetBandwidth() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Mcac_Bandwidth {
	if t != nil && t.Bandwidth != nil {
		return t.Bandwidth
	}
	return nil
}

// GetInterfacePolicy retrieves the value of the leaf InterfacePolicy from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Mcac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfacePolicy is set, it can
// safely use t.GetInterfacePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfacePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Mcac) GetInterfacePolicy() string {
	if t == nil || t.InterfacePolicy == nil {
		return ""
	}
	return *t.InterfacePolicy
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Mcac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Mcac) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Mcac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Mcac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Bandwidth.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Mcac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Mcac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Mcac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Mcac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Mcac.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Mcac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Mcac_Bandwidth represents the /nokia-conf/configure/groups/group/service/vpls/mesh-sdp/igmp-snooping/mcac/bandwidth YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Mcac_Bandwidth struct {
	Mandatory NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Mcac_Bandwidth_Mandatory_Union `path:"mandatory" module:"nokia-conf"`
	Total     NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Mcac_Bandwidth_Total_Union     `path:"total" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Mcac_Bandwidth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Mcac_Bandwidth) IsYANGGoStruct() {
}

// GetMandatory retrieves the value of the leaf Mandatory from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Mcac_Bandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mandatory is set, it can
// safely use t.GetMandatory() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mandatory == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Mcac_Bandwidth) GetMandatory() NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Mcac_Bandwidth_Mandatory_Union {
	if t == nil || t.Mandatory == nil {
		return NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	return t.Mandatory
}

// GetTotal retrieves the value of the leaf Total from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Mcac_Bandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Total is set, it can
// safely use t.GetTotal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Total == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Mcac_Bandwidth) GetTotal() NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Mcac_Bandwidth_Total_Union {
	if t == nil || t.Total == nil {
		return NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	return t.Total
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Mcac_Bandwidth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Mcac_Bandwidth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mandatory == nil {
		t.Mandatory = NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	if t.Total == nil {
		t.Total = NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Mcac_Bandwidth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Mcac_Bandwidth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Mcac_Bandwidth) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Mcac_Bandwidth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Mcac_Bandwidth.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Mcac_Bandwidth) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static represents the /nokia-conf/configure/groups/group/service/vpls/mesh-sdp/igmp-snooping/static YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static struct {
	Group map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group `path:"group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static) IsYANGGoStruct() {}

// NewGroup creates a new entry in the Group list of the
// NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static) NewGroup(GroupAddress string) (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group)
	}

	key := GroupAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group{
		GroupAddress: &GroupAddress,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static) RenameGroup(oldK, newK string) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.GroupAddress = &newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static) GetOrCreateGroup(GroupAddress string) *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group {

	key := GroupAddress

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(GroupAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static) GetGroup(GroupAddress string) *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group {

	if t == nil {
		return nil
	}

	key := GroupAddress

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static) DeleteGroup(GroupAddress string) {
	key := GroupAddress

	delete(t.Group, key)
}

// AppendGroup appends the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group struct to the
// list Group of NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static) AppendGroup(v *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group) error {
	if v.GroupAddress == nil {
		return fmt.Errorf("invalid nil key received for GroupAddress")
	}

	key := *v.GroupAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group represents the /nokia-conf/configure/groups/group/service/vpls/mesh-sdp/igmp-snooping/static/group YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group struct {
	GroupAddress *string                                                                                            `path:"group-address" module:"nokia-conf"`
	Source       map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group_Source `path:"source" module:"nokia-conf"`
	Starg        YANGEmpty                                                                                          `path:"starg" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group) IsYANGGoStruct() {
}

// NewSource creates a new entry in the Source list of the
// NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group) NewSource(SourceAddress string) (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group_Source, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group_Source)
	}

	key := SourceAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Source[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Source", key)
	}

	t.Source[key] = &NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group_Source{
		SourceAddress: &SourceAddress,
	}

	return t.Source[key], nil
}

// RenameSource renames an entry in the list Source within
// the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group) RenameSource(oldK, newK string) error {
	if _, ok := t.Source[newK]; ok {
		return fmt.Errorf("key %v already exists in Source", newK)
	}

	e, ok := t.Source[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Source", oldK)
	}
	e.SourceAddress = &newK

	t.Source[newK] = e
	delete(t.Source, oldK)
	return nil
}

// GetOrCreateSource retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group) GetOrCreateSource(SourceAddress string) *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group_Source {

	key := SourceAddress

	if v, ok := t.Source[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSource(SourceAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSource got unexpected error: %v", err))
	}
	return v
}

// GetSource retrieves the value with the specified key from
// the Source map field of NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group) GetSource(SourceAddress string) *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group_Source {

	if t == nil {
		return nil
	}

	key := SourceAddress

	if lm, ok := t.Source[key]; ok {
		return lm
	}
	return nil
}

// DeleteSource deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group) DeleteSource(SourceAddress string) {
	key := SourceAddress

	delete(t.Source, key)
}

// AppendSource appends the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group_Source struct to the
// list Source of NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group_Source already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group) AppendSource(v *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group_Source) error {
	if v.SourceAddress == nil {
		return fmt.Errorf("invalid nil key received for SourceAddress")
	}

	key := *v.SourceAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group_Source)
	}

	if _, ok := t.Source[key]; ok {
		return fmt.Errorf("duplicate key for list Source %v", key)
	}

	t.Source[key] = v
	return nil
}

// GetGroupAddress retrieves the value of the leaf GroupAddress from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupAddress is set, it can
// safely use t.GetGroupAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group) GetGroupAddress() string {
	if t == nil || t.GroupAddress == nil {
		return ""
	}
	return *t.GroupAddress
}

// GetStarg retrieves the value of the leaf Starg from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Starg is set, it can
// safely use t.GetStarg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Starg == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group) GetStarg() YANGEmpty {
	if t == nil || t.Starg == false {
		return false
	}
	return t.Starg
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Source {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupAddress == nil {
		return nil, fmt.Errorf("nil value for key GroupAddress")
	}

	return map[string]interface{}{
		"group-address": *t.GroupAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group_Source represents the /nokia-conf/configure/groups/group/service/vpls/mesh-sdp/igmp-snooping/static/group/source YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group_Source struct {
	SourceAddress *string `path:"source-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group_Source implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group_Source) IsYANGGoStruct() {
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group_Source) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group_Source
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group_Source) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group_Source struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group_Source) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SourceAddress == nil {
		return nil, fmt.Errorf("nil value for key SourceAddress")
	}

	return map[string]interface{}{
		"source-address": *t.SourceAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group_Source) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group_Source"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group_Source) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group_Source) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group_Source.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_IgmpSnooping_Static_Group_Source) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress represents the /nokia-conf/configure/groups/group/service/vpls/mesh-sdp/ingress YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress struct {
	Filter  *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Filter `path:"filter" module:"nokia-conf"`
	Qos     *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Qos    `path:"qos" module:"nokia-conf"`
	VcLabel *uint32                                                               `path:"vc-label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress) IsYANGGoStruct() {}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress) GetOrCreateFilter() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Filter{}
	return t.Filter
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress) GetOrCreateQos() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Qos{}
	return t.Qos
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress) GetFilter() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress) GetQos() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// GetVcLabel retrieves the value of the leaf VcLabel from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VcLabel is set, it can
// safely use t.GetVcLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VcLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress) GetVcLabel() uint32 {
	if t == nil || t.VcLabel == nil {
		return 0
	}
	return *t.VcLabel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Filter.PopulateDefaults()
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Filter represents the /nokia-conf/configure/groups/group/service/vpls/mesh-sdp/ingress/filter YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Filter struct {
	Ip   *string `path:"ip" module:"nokia-conf"`
	Ipv6 *string `path:"ipv6" module:"nokia-conf"`
	Mac  *string `path:"mac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Filter) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Filter) GetIpv6() string {
	if t == nil || t.Ipv6 == nil {
		return ""
	}
	return *t.Ipv6
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Filter) GetMac() string {
	if t == nil || t.Mac == nil {
		return ""
	}
	return *t.Mac
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Filter.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Qos represents the /nokia-conf/configure/groups/group/service/vpls/mesh-sdp/ingress/qos YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Qos struct {
	Network *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Qos_Network `path:"network" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Qos) IsYANGGoStruct() {}

// GetOrCreateNetwork retrieves the value of the Network field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Qos) GetOrCreateNetwork() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Qos_Network {
	if t.Network != nil {
		return t.Network
	}
	t.Network = &NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Qos_Network{}
	return t.Network
}

// GetNetwork returns the value of the Network struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Qos. If the receiver or the field Network is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Qos) GetNetwork() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Qos_Network {
	if t != nil && t.Network != nil {
		return t.Network
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Network.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Qos.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Qos_Network represents the /nokia-conf/configure/groups/group/service/vpls/mesh-sdp/ingress/qos/network YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Qos_Network struct {
	FpRedirectGroup *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Qos_Network_FpRedirectGroup `path:"fp-redirect-group" module:"nokia-conf"`
	PolicyName      *string                                                                                    `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Qos_Network implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Qos_Network) IsYANGGoStruct() {}

// GetOrCreateFpRedirectGroup retrieves the value of the FpRedirectGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Qos_Network) GetOrCreateFpRedirectGroup() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Qos_Network_FpRedirectGroup {
	if t.FpRedirectGroup != nil {
		return t.FpRedirectGroup
	}
	t.FpRedirectGroup = &NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Qos_Network_FpRedirectGroup{}
	return t.FpRedirectGroup
}

// GetFpRedirectGroup returns the value of the FpRedirectGroup struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Qos_Network. If the receiver or the field FpRedirectGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Qos_Network) GetFpRedirectGroup() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Qos_Network_FpRedirectGroup {
	if t != nil && t.FpRedirectGroup != nil {
		return t.FpRedirectGroup
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Qos_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Qos_Network) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Qos_Network
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Qos_Network) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.FpRedirectGroup.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Qos_Network) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Qos_Network"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Qos_Network) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Qos_Network) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Qos_Network.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Qos_Network) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Qos_Network_FpRedirectGroup represents the /nokia-conf/configure/groups/group/service/vpls/mesh-sdp/ingress/qos/network/fp-redirect-group YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Qos_Network_FpRedirectGroup struct {
	GroupName *string `path:"group-name" module:"nokia-conf"`
	Instance  *uint32 `path:"instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Qos_Network_FpRedirectGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Qos_Network_FpRedirectGroup) IsYANGGoStruct() {
}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Qos_Network_FpRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Qos_Network_FpRedirectGroup) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// GetInstance retrieves the value of the leaf Instance from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Qos_Network_FpRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instance is set, it can
// safely use t.GetInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Qos_Network_FpRedirectGroup) GetInstance() uint32 {
	if t == nil || t.Instance == nil {
		return 0
	}
	return *t.Instance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Qos_Network_FpRedirectGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Qos_Network_FpRedirectGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Qos_Network_FpRedirectGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Qos_Network_FpRedirectGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Qos_Network_FpRedirectGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Qos_Network_FpRedirectGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Qos_Network_FpRedirectGroup.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Ingress_Qos_Network_FpRedirectGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping represents the /nokia-conf/configure/groups/group/service/vpls/mesh-sdp/mld-snooping YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping struct {
	FastLeave               *bool                                                                     `path:"fast-leave" module:"nokia-conf"`
	ImportPolicy            *string                                                                   `path:"import-policy" module:"nokia-conf"`
	MaximumNumberGroups     *uint32                                                                   `path:"maximum-number-groups" module:"nokia-conf"`
	MrouterPort             *bool                                                                     `path:"mrouter-port" module:"nokia-conf"`
	QueryInterval           *uint32                                                                   `path:"query-interval" module:"nokia-conf"`
	QueryLastMemberInterval *uint32                                                                   `path:"query-last-member-interval" module:"nokia-conf"`
	QueryResponseInterval   *uint32                                                                   `path:"query-response-interval" module:"nokia-conf"`
	RobustCount             *uint32                                                                   `path:"robust-count" module:"nokia-conf"`
	RouterAlertCheck        *bool                                                                     `path:"router-alert-check" module:"nokia-conf"`
	SendQueries             *bool                                                                     `path:"send-queries" module:"nokia-conf"`
	Static                  *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static `path:"static" module:"nokia-conf"`
	Version                 E_NokiaTypesIgmp_MldVersion                                               `path:"version" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping) IsYANGGoStruct() {}

// GetOrCreateStatic retrieves the value of the Static field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping) GetOrCreateStatic() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static {
	if t.Static != nil {
		return t.Static
	}
	t.Static = &NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static{}
	return t.Static
}

// GetStatic returns the value of the Static struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping. If the receiver or the field Static is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping) GetStatic() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static {
	if t != nil && t.Static != nil {
		return t.Static
	}
	return nil
}

// GetFastLeave retrieves the value of the leaf FastLeave from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FastLeave is set, it can
// safely use t.GetFastLeave() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FastLeave == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping) GetFastLeave() bool {
	if t == nil || t.FastLeave == nil {
		return false
	}
	return *t.FastLeave
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping) GetImportPolicy() string {
	if t == nil || t.ImportPolicy == nil {
		return ""
	}
	return *t.ImportPolicy
}

// GetMaximumNumberGroups retrieves the value of the leaf MaximumNumberGroups from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroups is set, it can
// safely use t.GetMaximumNumberGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping) GetMaximumNumberGroups() uint32 {
	if t == nil || t.MaximumNumberGroups == nil {
		return 0
	}
	return *t.MaximumNumberGroups
}

// GetMrouterPort retrieves the value of the leaf MrouterPort from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MrouterPort is set, it can
// safely use t.GetMrouterPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MrouterPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping) GetMrouterPort() bool {
	if t == nil || t.MrouterPort == nil {
		return false
	}
	return *t.MrouterPort
}

// GetQueryInterval retrieves the value of the leaf QueryInterval from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryInterval is set, it can
// safely use t.GetQueryInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping) GetQueryInterval() uint32 {
	if t == nil || t.QueryInterval == nil {
		return 125
	}
	return *t.QueryInterval
}

// GetQueryLastMemberInterval retrieves the value of the leaf QueryLastMemberInterval from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryLastMemberInterval is set, it can
// safely use t.GetQueryLastMemberInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryLastMemberInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping) GetQueryLastMemberInterval() uint32 {
	if t == nil || t.QueryLastMemberInterval == nil {
		return 10
	}
	return *t.QueryLastMemberInterval
}

// GetQueryResponseInterval retrieves the value of the leaf QueryResponseInterval from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryResponseInterval is set, it can
// safely use t.GetQueryResponseInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryResponseInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping) GetQueryResponseInterval() uint32 {
	if t == nil || t.QueryResponseInterval == nil {
		return 10
	}
	return *t.QueryResponseInterval
}

// GetRobustCount retrieves the value of the leaf RobustCount from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RobustCount is set, it can
// safely use t.GetRobustCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RobustCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping) GetRobustCount() uint32 {
	if t == nil || t.RobustCount == nil {
		return 2
	}
	return *t.RobustCount
}

// GetRouterAlertCheck retrieves the value of the leaf RouterAlertCheck from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterAlertCheck is set, it can
// safely use t.GetRouterAlertCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterAlertCheck == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping) GetRouterAlertCheck() bool {
	if t == nil || t.RouterAlertCheck == nil {
		return true
	}
	return *t.RouterAlertCheck
}

// GetSendQueries retrieves the value of the leaf SendQueries from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SendQueries is set, it can
// safely use t.GetSendQueries() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SendQueries == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping) GetSendQueries() bool {
	if t == nil || t.SendQueries == nil {
		return false
	}
	return *t.SendQueries
}

// GetVersion retrieves the value of the leaf Version from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping) GetVersion() E_NokiaTypesIgmp_MldVersion {
	if t == nil || t.Version == 0 {
		return NokiaTypesIgmp_MldVersion_2
	}
	return t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FastLeave == nil {
		var v bool = false
		t.FastLeave = &v
	}
	if t.MrouterPort == nil {
		var v bool = false
		t.MrouterPort = &v
	}
	if t.QueryInterval == nil {
		var v uint32 = 125
		t.QueryInterval = &v
	}
	if t.QueryLastMemberInterval == nil {
		var v uint32 = 10
		t.QueryLastMemberInterval = &v
	}
	if t.QueryResponseInterval == nil {
		var v uint32 = 10
		t.QueryResponseInterval = &v
	}
	if t.RobustCount == nil {
		var v uint32 = 2
		t.RobustCount = &v
	}
	if t.RouterAlertCheck == nil {
		var v bool = true
		t.RouterAlertCheck = &v
	}
	if t.SendQueries == nil {
		var v bool = false
		t.SendQueries = &v
	}
	if t.Version == 0 {
		t.Version = NokiaTypesIgmp_MldVersion_2
	}
	t.Static.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static represents the /nokia-conf/configure/groups/group/service/vpls/mesh-sdp/mld-snooping/static YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static struct {
	Group map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static_Group `path:"group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static) IsYANGGoStruct() {}

// NewGroup creates a new entry in the Group list of the
// NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static) NewGroup(GroupAddress string) (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static_Group, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static_Group)
	}

	key := GroupAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static_Group{
		GroupAddress: &GroupAddress,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static) RenameGroup(oldK, newK string) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.GroupAddress = &newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static) GetOrCreateGroup(GroupAddress string) *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static_Group {

	key := GroupAddress

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(GroupAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static) GetGroup(GroupAddress string) *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static_Group {

	if t == nil {
		return nil
	}

	key := GroupAddress

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static) DeleteGroup(GroupAddress string) {
	key := GroupAddress

	delete(t.Group, key)
}

// AppendGroup appends the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static_Group struct to the
// list Group of NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static_Group already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static) AppendGroup(v *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static_Group) error {
	if v.GroupAddress == nil {
		return fmt.Errorf("invalid nil key received for GroupAddress")
	}

	key := *v.GroupAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static_Group represents the /nokia-conf/configure/groups/group/service/vpls/mesh-sdp/mld-snooping/static/group YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static_Group struct {
	GroupAddress *string                                                                                           `path:"group-address" module:"nokia-conf"`
	Source       map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static_Group_Source `path:"source" module:"nokia-conf"`
	Starg        YANGEmpty                                                                                         `path:"starg" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static_Group) IsYANGGoStruct() {
}

// NewSource creates a new entry in the Source list of the
// NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static_Group struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static_Group) NewSource(SourceAddress string) (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static_Group_Source, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static_Group_Source)
	}

	key := SourceAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Source[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Source", key)
	}

	t.Source[key] = &NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static_Group_Source{
		SourceAddress: &SourceAddress,
	}

	return t.Source[key], nil
}

// RenameSource renames an entry in the list Source within
// the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static_Group) RenameSource(oldK, newK string) error {
	if _, ok := t.Source[newK]; ok {
		return fmt.Errorf("key %v already exists in Source", newK)
	}

	e, ok := t.Source[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Source", oldK)
	}
	e.SourceAddress = &newK

	t.Source[newK] = e
	delete(t.Source, oldK)
	return nil
}

// GetOrCreateSource retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static_Group) GetOrCreateSource(SourceAddress string) *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static_Group_Source {

	key := SourceAddress

	if v, ok := t.Source[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSource(SourceAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSource got unexpected error: %v", err))
	}
	return v
}

// GetSource retrieves the value with the specified key from
// the Source map field of NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static_Group) GetSource(SourceAddress string) *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static_Group_Source {

	if t == nil {
		return nil
	}

	key := SourceAddress

	if lm, ok := t.Source[key]; ok {
		return lm
	}
	return nil
}

// DeleteSource deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static_Group. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static_Group) DeleteSource(SourceAddress string) {
	key := SourceAddress

	delete(t.Source, key)
}

// AppendSource appends the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static_Group_Source struct to the
// list Source of NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static_Group. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static_Group_Source already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static_Group) AppendSource(v *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static_Group_Source) error {
	if v.SourceAddress == nil {
		return fmt.Errorf("invalid nil key received for SourceAddress")
	}

	key := *v.SourceAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static_Group_Source)
	}

	if _, ok := t.Source[key]; ok {
		return fmt.Errorf("duplicate key for list Source %v", key)
	}

	t.Source[key] = v
	return nil
}

// GetGroupAddress retrieves the value of the leaf GroupAddress from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupAddress is set, it can
// safely use t.GetGroupAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static_Group) GetGroupAddress() string {
	if t == nil || t.GroupAddress == nil {
		return ""
	}
	return *t.GroupAddress
}

// GetStarg retrieves the value of the leaf Starg from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Starg is set, it can
// safely use t.GetStarg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Starg == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static_Group) GetStarg() YANGEmpty {
	if t == nil || t.Starg == false {
		return false
	}
	return t.Starg
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Source {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static_Group struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupAddress == nil {
		return nil, fmt.Errorf("nil value for key GroupAddress")
	}

	return map[string]interface{}{
		"group-address": *t.GroupAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static_Group) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static_Group.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static_Group) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static_Group_Source represents the /nokia-conf/configure/groups/group/service/vpls/mesh-sdp/mld-snooping/static/group/source YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static_Group_Source struct {
	SourceAddress *string `path:"source-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static_Group_Source implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static_Group_Source) IsYANGGoStruct() {
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static_Group_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static_Group_Source) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static_Group_Source
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static_Group_Source) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static_Group_Source struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static_Group_Source) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SourceAddress == nil {
		return nil, fmt.Errorf("nil value for key SourceAddress")
	}

	return map[string]interface{}{
		"source-address": *t.SourceAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static_Group_Source) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static_Group_Source"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static_Group_Source) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static_Group_Source) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static_Group_Source.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_MldSnooping_Static_Group_Source) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Mrp represents the /nokia-conf/configure/groups/group/service/vpls/mesh-sdp/mrp YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Mrp struct {
	JoinTime      *uint32 `path:"join-time" module:"nokia-conf"`
	LeaveAllTime  *uint32 `path:"leave-all-time" module:"nokia-conf"`
	LeaveTime     *uint32 `path:"leave-time" module:"nokia-conf"`
	PeriodicTime  *uint32 `path:"periodic-time" module:"nokia-conf"`
	PeriodicTimer *bool   `path:"periodic-timer" module:"nokia-conf"`
	Policy        *string `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Mrp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Mrp) IsYANGGoStruct() {}

// GetJoinTime retrieves the value of the leaf JoinTime from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Mrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if JoinTime is set, it can
// safely use t.GetJoinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.JoinTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Mrp) GetJoinTime() uint32 {
	if t == nil || t.JoinTime == nil {
		return 2
	}
	return *t.JoinTime
}

// GetLeaveAllTime retrieves the value of the leaf LeaveAllTime from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Mrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LeaveAllTime is set, it can
// safely use t.GetLeaveAllTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LeaveAllTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Mrp) GetLeaveAllTime() uint32 {
	if t == nil || t.LeaveAllTime == nil {
		return 100
	}
	return *t.LeaveAllTime
}

// GetLeaveTime retrieves the value of the leaf LeaveTime from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Mrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LeaveTime is set, it can
// safely use t.GetLeaveTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LeaveTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Mrp) GetLeaveTime() uint32 {
	if t == nil || t.LeaveTime == nil {
		return 30
	}
	return *t.LeaveTime
}

// GetPeriodicTime retrieves the value of the leaf PeriodicTime from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Mrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeriodicTime is set, it can
// safely use t.GetPeriodicTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeriodicTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Mrp) GetPeriodicTime() uint32 {
	if t == nil || t.PeriodicTime == nil {
		return 10
	}
	return *t.PeriodicTime
}

// GetPeriodicTimer retrieves the value of the leaf PeriodicTimer from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Mrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeriodicTimer is set, it can
// safely use t.GetPeriodicTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeriodicTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Mrp) GetPeriodicTimer() bool {
	if t == nil || t.PeriodicTimer == nil {
		return false
	}
	return *t.PeriodicTimer
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Mrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Mrp) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Mrp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Mrp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.JoinTime == nil {
		var v uint32 = 2
		t.JoinTime = &v
	}
	if t.LeaveAllTime == nil {
		var v uint32 = 100
		t.LeaveAllTime = &v
	}
	if t.LeaveTime == nil {
		var v uint32 = 30
		t.LeaveTime = &v
	}
	if t.PeriodicTime == nil {
		var v uint32 = 10
		t.PeriodicTime = &v
	}
	if t.PeriodicTimer == nil {
		var v bool = false
		t.PeriodicTimer = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Mrp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Mrp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Mrp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Mrp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Mrp.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Mrp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb represents the /nokia-conf/configure/groups/group/service/vpls/mesh-sdp/pbb YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb struct {
	FaultPropagation *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation `path:"fault-propagation" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb) IsYANGGoStruct() {}

// GetOrCreateFaultPropagation retrieves the value of the FaultPropagation field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb) GetOrCreateFaultPropagation() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation {
	if t.FaultPropagation != nil {
		return t.FaultPropagation
	}
	t.FaultPropagation = &NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation{}
	return t.FaultPropagation
}

// GetFaultPropagation returns the value of the FaultPropagation struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb. If the receiver or the field FaultPropagation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb) GetFaultPropagation() *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation {
	if t != nil && t.FaultPropagation != nil {
		return t.FaultPropagation
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.FaultPropagation.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation represents the /nokia-conf/configure/groups/group/service/vpls/mesh-sdp/pbb/fault-propagation YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation struct {
	BackboneMacAddress map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacAddress `path:"backbone-mac-address" module:"nokia-conf"`
	BackboneMacName    map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacName    `path:"backbone-mac-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation) IsYANGGoStruct() {}

// NewBackboneMacAddress creates a new entry in the BackboneMacAddress list of the
// NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation) NewBackboneMacAddress(Address string) (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacAddress, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BackboneMacAddress == nil {
		t.BackboneMacAddress = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacAddress)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.BackboneMacAddress[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list BackboneMacAddress", key)
	}

	t.BackboneMacAddress[key] = &NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacAddress{
		Address: &Address,
	}

	return t.BackboneMacAddress[key], nil
}

// RenameBackboneMacAddress renames an entry in the list BackboneMacAddress within
// the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation) RenameBackboneMacAddress(oldK, newK string) error {
	if _, ok := t.BackboneMacAddress[newK]; ok {
		return fmt.Errorf("key %v already exists in BackboneMacAddress", newK)
	}

	e, ok := t.BackboneMacAddress[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in BackboneMacAddress", oldK)
	}
	e.Address = &newK

	t.BackboneMacAddress[newK] = e
	delete(t.BackboneMacAddress, oldK)
	return nil
}

// GetOrCreateBackboneMacAddress retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation) GetOrCreateBackboneMacAddress(Address string) *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacAddress {

	key := Address

	if v, ok := t.BackboneMacAddress[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewBackboneMacAddress(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateBackboneMacAddress got unexpected error: %v", err))
	}
	return v
}

// GetBackboneMacAddress retrieves the value with the specified key from
// the BackboneMacAddress map field of NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation) GetBackboneMacAddress(Address string) *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacAddress {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.BackboneMacAddress[key]; ok {
		return lm
	}
	return nil
}

// DeleteBackboneMacAddress deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation) DeleteBackboneMacAddress(Address string) {
	key := Address

	delete(t.BackboneMacAddress, key)
}

// AppendBackboneMacAddress appends the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacAddress struct to the
// list BackboneMacAddress of NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacAddress already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation) AppendBackboneMacAddress(v *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacAddress) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BackboneMacAddress == nil {
		t.BackboneMacAddress = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacAddress)
	}

	if _, ok := t.BackboneMacAddress[key]; ok {
		return fmt.Errorf("duplicate key for list BackboneMacAddress %v", key)
	}

	t.BackboneMacAddress[key] = v
	return nil
}

// NewBackboneMacName creates a new entry in the BackboneMacName list of the
// NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation) NewBackboneMacName(Name string) (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacName, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BackboneMacName == nil {
		t.BackboneMacName = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacName)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.BackboneMacName[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list BackboneMacName", key)
	}

	t.BackboneMacName[key] = &NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacName{
		Name: &Name,
	}

	return t.BackboneMacName[key], nil
}

// RenameBackboneMacName renames an entry in the list BackboneMacName within
// the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation) RenameBackboneMacName(oldK, newK string) error {
	if _, ok := t.BackboneMacName[newK]; ok {
		return fmt.Errorf("key %v already exists in BackboneMacName", newK)
	}

	e, ok := t.BackboneMacName[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in BackboneMacName", oldK)
	}
	e.Name = &newK

	t.BackboneMacName[newK] = e
	delete(t.BackboneMacName, oldK)
	return nil
}

// GetOrCreateBackboneMacName retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation) GetOrCreateBackboneMacName(Name string) *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacName {

	key := Name

	if v, ok := t.BackboneMacName[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewBackboneMacName(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateBackboneMacName got unexpected error: %v", err))
	}
	return v
}

// GetBackboneMacName retrieves the value with the specified key from
// the BackboneMacName map field of NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation) GetBackboneMacName(Name string) *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacName {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.BackboneMacName[key]; ok {
		return lm
	}
	return nil
}

// DeleteBackboneMacName deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation) DeleteBackboneMacName(Name string) {
	key := Name

	delete(t.BackboneMacName, key)
}

// AppendBackboneMacName appends the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacName struct to the
// list BackboneMacName of NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacName already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation) AppendBackboneMacName(v *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacName) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BackboneMacName == nil {
		t.BackboneMacName = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacName)
	}

	if _, ok := t.BackboneMacName[key]; ok {
		return fmt.Errorf("duplicate key for list BackboneMacName %v", key)
	}

	t.BackboneMacName[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.BackboneMacAddress {
		e.PopulateDefaults()
	}
	for _, e := range t.BackboneMacName {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacAddress represents the /nokia-conf/configure/groups/group/service/vpls/mesh-sdp/pbb/fault-propagation/backbone-mac-address YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacAddress struct {
	Address *string `path:"address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacAddress) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacAddress) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacAddress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacAddress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacAddress struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacAddress) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacAddress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacAddress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacAddress.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacAddress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacName represents the /nokia-conf/configure/groups/group/service/vpls/mesh-sdp/pbb/fault-propagation/backbone-mac-name YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacName struct {
	Name *string `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacName implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacName) IsYANGGoStruct() {
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacName
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacName) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacName
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacName) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacName struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacName) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacName) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacName"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacName) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacName) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacName.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MeshSdp_Pbb_FaultPropagation_BackboneMacName) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_Mfib represents the /nokia-conf/configure/groups/group/service/vpls/mfib YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_Mfib struct {
	Table *NokiaConf_Configure_Groups_Group_Service_Vpls_Mfib_Table `path:"table" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_Mfib implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Mfib) IsYANGGoStruct() {}

// GetOrCreateTable retrieves the value of the Table field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Mfib) GetOrCreateTable() *NokiaConf_Configure_Groups_Group_Service_Vpls_Mfib_Table {
	if t.Table != nil {
		return t.Table
	}
	t.Table = &NokiaConf_Configure_Groups_Group_Service_Vpls_Mfib_Table{}
	return t.Table
}

// GetTable returns the value of the Table struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_Mfib. If the receiver or the field Table is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Mfib) GetTable() *NokiaConf_Configure_Groups_Group_Service_Vpls_Mfib_Table {
	if t != nil && t.Table != nil {
		return t.Table
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_Mfib
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Mfib) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Table.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Mfib) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_Mfib"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Mfib) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Mfib) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_Mfib.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Mfib) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_Mfib_Table represents the /nokia-conf/configure/groups/group/service/vpls/mfib/table YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_Mfib_Table struct {
	HighWmark *int32 `path:"high-wmark" module:"nokia-conf"`
	LowWmark  *int32 `path:"low-wmark" module:"nokia-conf"`
	Size      *int32 `path:"size" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_Mfib_Table implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Mfib_Table) IsYANGGoStruct() {}

// GetHighWmark retrieves the value of the leaf HighWmark from the NokiaConf_Configure_Groups_Group_Service_Vpls_Mfib_Table
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HighWmark is set, it can
// safely use t.GetHighWmark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HighWmark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Mfib_Table) GetHighWmark() int32 {
	if t == nil || t.HighWmark == nil {
		return 95
	}
	return *t.HighWmark
}

// GetLowWmark retrieves the value of the leaf LowWmark from the NokiaConf_Configure_Groups_Group_Service_Vpls_Mfib_Table
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowWmark is set, it can
// safely use t.GetLowWmark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowWmark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Mfib_Table) GetLowWmark() int32 {
	if t == nil || t.LowWmark == nil {
		return 90
	}
	return *t.LowWmark
}

// GetSize retrieves the value of the leaf Size from the NokiaConf_Configure_Groups_Group_Service_Vpls_Mfib_Table
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Size is set, it can
// safely use t.GetSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Size == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Mfib_Table) GetSize() int32 {
	if t == nil || t.Size == nil {
		return 0
	}
	return *t.Size
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_Mfib_Table
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Mfib_Table) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HighWmark == nil {
		var v int32 = 95
		t.HighWmark = &v
	}
	if t.LowWmark == nil {
		var v int32 = 90
		t.LowWmark = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Mfib_Table) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_Mfib_Table"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Mfib_Table) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Mfib_Table) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_Mfib_Table.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Mfib_Table) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping represents the /nokia-conf/configure/groups/group/service/vpls/mld-snooping YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping struct {
	AdminState          E_NokiaTypesSros_AdminState                                                        `path:"admin-state" module:"nokia-conf"`
	EvpnProxy           *NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping_EvpnProxy               `path:"evpn-proxy" module:"nokia-conf"`
	Mvr                 *NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping_Mvr                     `path:"mvr" module:"nokia-conf"`
	QueryInterval       *uint32                                                                            `path:"query-interval" module:"nokia-conf"`
	QuerySourceAddress  NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping_QuerySourceAddress_Union `path:"query-source-address" module:"nokia-conf"`
	ReportSourceAddress *string                                                                            `path:"report-source-address" module:"nokia-conf"`
	RobustCount         *uint32                                                                            `path:"robust-count" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping) IsYANGGoStruct() {}

// GetOrCreateEvpnProxy retrieves the value of the EvpnProxy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping) GetOrCreateEvpnProxy() *NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping_EvpnProxy {
	if t.EvpnProxy != nil {
		return t.EvpnProxy
	}
	t.EvpnProxy = &NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping_EvpnProxy{}
	return t.EvpnProxy
}

// GetOrCreateMvr retrieves the value of the Mvr field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping) GetOrCreateMvr() *NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping_Mvr {
	if t.Mvr != nil {
		return t.Mvr
	}
	t.Mvr = &NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping_Mvr{}
	return t.Mvr
}

// GetEvpnProxy returns the value of the EvpnProxy struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping. If the receiver or the field EvpnProxy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping) GetEvpnProxy() *NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping_EvpnProxy {
	if t != nil && t.EvpnProxy != nil {
		return t.EvpnProxy
	}
	return nil
}

// GetMvr returns the value of the Mvr struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping. If the receiver or the field Mvr is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping) GetMvr() *NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping_Mvr {
	if t != nil && t.Mvr != nil {
		return t.Mvr
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetQueryInterval retrieves the value of the leaf QueryInterval from the NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryInterval is set, it can
// safely use t.GetQueryInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping) GetQueryInterval() uint32 {
	if t == nil || t.QueryInterval == nil {
		return 125
	}
	return *t.QueryInterval
}

// GetQuerySourceAddress retrieves the value of the leaf QuerySourceAddress from the NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QuerySourceAddress is set, it can
// safely use t.GetQuerySourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QuerySourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping) GetQuerySourceAddress() NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping_QuerySourceAddress_Union {
	if t == nil || t.QuerySourceAddress == nil {
		return NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping_QuerySourceAddress_Enum_system
	}
	return t.QuerySourceAddress
}

// GetReportSourceAddress retrieves the value of the leaf ReportSourceAddress from the NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReportSourceAddress is set, it can
// safely use t.GetReportSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReportSourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping) GetReportSourceAddress() string {
	if t == nil || t.ReportSourceAddress == nil {
		return ""
	}
	return *t.ReportSourceAddress
}

// GetRobustCount retrieves the value of the leaf RobustCount from the NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RobustCount is set, it can
// safely use t.GetRobustCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RobustCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping) GetRobustCount() uint32 {
	if t == nil || t.RobustCount == nil {
		return 2
	}
	return *t.RobustCount
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.QueryInterval == nil {
		var v uint32 = 125
		t.QueryInterval = &v
	}
	if t.QuerySourceAddress == nil {
		t.QuerySourceAddress = NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping_QuerySourceAddress_Enum_system
	}
	if t.RobustCount == nil {
		var v uint32 = 2
		t.RobustCount = &v
	}
	t.EvpnProxy.PopulateDefaults()
	t.Mvr.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping_EvpnProxy represents the /nokia-conf/configure/groups/group/service/vpls/mld-snooping/evpn-proxy YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping_EvpnProxy struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping_EvpnProxy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping_EvpnProxy) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping_EvpnProxy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping_EvpnProxy) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping_EvpnProxy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping_EvpnProxy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping_EvpnProxy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping_EvpnProxy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping_EvpnProxy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping_EvpnProxy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping_EvpnProxy.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping_EvpnProxy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping_Mvr represents the /nokia-conf/configure/groups/group/service/vpls/mld-snooping/mvr YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping_Mvr struct {
	AdminState  E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Description *string                     `path:"description" module:"nokia-conf"`
	GroupPolicy *string                     `path:"group-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping_Mvr implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping_Mvr) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping_Mvr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping_Mvr) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping_Mvr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping_Mvr) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetGroupPolicy retrieves the value of the leaf GroupPolicy from the NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping_Mvr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupPolicy is set, it can
// safely use t.GetGroupPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping_Mvr) GetGroupPolicy() string {
	if t == nil || t.GroupPolicy == nil {
		return ""
	}
	return *t.GroupPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping_Mvr
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping_Mvr) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping_Mvr) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping_Mvr"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping_Mvr) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping_Mvr) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping_Mvr.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_MldSnooping_Mvr) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_Mrp represents the /nokia-conf/configure/groups/group/service/vpls/mrp YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_Mrp struct {
	AdminState E_NokiaTypesSros_AdminState                             `path:"admin-state" module:"nokia-conf"`
	Mmrp       *NokiaConf_Configure_Groups_Group_Service_Vpls_Mrp_Mmrp `path:"mmrp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_Mrp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Mrp) IsYANGGoStruct() {}

// GetOrCreateMmrp retrieves the value of the Mmrp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Mrp) GetOrCreateMmrp() *NokiaConf_Configure_Groups_Group_Service_Vpls_Mrp_Mmrp {
	if t.Mmrp != nil {
		return t.Mmrp
	}
	t.Mmrp = &NokiaConf_Configure_Groups_Group_Service_Vpls_Mrp_Mmrp{}
	return t.Mmrp
}

// GetMmrp returns the value of the Mmrp struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_Mrp. If the receiver or the field Mmrp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Mrp) GetMmrp() *NokiaConf_Configure_Groups_Group_Service_Vpls_Mrp_Mmrp {
	if t != nil && t.Mmrp != nil {
		return t.Mmrp
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vpls_Mrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Mrp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_Mrp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Mrp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.Mmrp.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Mrp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_Mrp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Mrp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Mrp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_Mrp.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Mrp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_Mrp_Mmrp represents the /nokia-conf/configure/groups/group/service/vpls/mrp/mmrp YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_Mrp_Mmrp struct {
	AdminState     E_NokiaTypesSros_AdminState                                            `path:"admin-state" module:"nokia-conf"`
	AttributeTable *NokiaConf_Configure_Groups_Group_Service_Vpls_Mrp_Mmrp_AttributeTable `path:"attribute-table" module:"nokia-conf"`
	EndStationOnly *bool                                                                  `path:"end-station-only" module:"nokia-conf"`
	FloodTime      *uint32                                                                `path:"flood-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_Mrp_Mmrp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Mrp_Mmrp) IsYANGGoStruct() {}

// GetOrCreateAttributeTable retrieves the value of the AttributeTable field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Mrp_Mmrp) GetOrCreateAttributeTable() *NokiaConf_Configure_Groups_Group_Service_Vpls_Mrp_Mmrp_AttributeTable {
	if t.AttributeTable != nil {
		return t.AttributeTable
	}
	t.AttributeTable = &NokiaConf_Configure_Groups_Group_Service_Vpls_Mrp_Mmrp_AttributeTable{}
	return t.AttributeTable
}

// GetAttributeTable returns the value of the AttributeTable struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_Mrp_Mmrp. If the receiver or the field AttributeTable is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Mrp_Mmrp) GetAttributeTable() *NokiaConf_Configure_Groups_Group_Service_Vpls_Mrp_Mmrp_AttributeTable {
	if t != nil && t.AttributeTable != nil {
		return t.AttributeTable
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vpls_Mrp_Mmrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Mrp_Mmrp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetEndStationOnly retrieves the value of the leaf EndStationOnly from the NokiaConf_Configure_Groups_Group_Service_Vpls_Mrp_Mmrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EndStationOnly is set, it can
// safely use t.GetEndStationOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EndStationOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Mrp_Mmrp) GetEndStationOnly() bool {
	if t == nil || t.EndStationOnly == nil {
		return false
	}
	return *t.EndStationOnly
}

// GetFloodTime retrieves the value of the leaf FloodTime from the NokiaConf_Configure_Groups_Group_Service_Vpls_Mrp_Mmrp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FloodTime is set, it can
// safely use t.GetFloodTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FloodTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Mrp_Mmrp) GetFloodTime() uint32 {
	if t == nil || t.FloodTime == nil {
		return 0
	}
	return *t.FloodTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_Mrp_Mmrp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Mrp_Mmrp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.EndStationOnly == nil {
		var v bool = false
		t.EndStationOnly = &v
	}
	t.AttributeTable.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Mrp_Mmrp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_Mrp_Mmrp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Mrp_Mmrp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Mrp_Mmrp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_Mrp_Mmrp.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Mrp_Mmrp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_Mrp_Mmrp_AttributeTable represents the /nokia-conf/configure/groups/group/service/vpls/mrp/mmrp/attribute-table YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_Mrp_Mmrp_AttributeTable struct {
	HighWmark *int32  `path:"high-wmark" module:"nokia-conf"`
	LowWmark  *int32  `path:"low-wmark" module:"nokia-conf"`
	Size      *uint32 `path:"size" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_Mrp_Mmrp_AttributeTable implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Mrp_Mmrp_AttributeTable) IsYANGGoStruct() {}

// GetHighWmark retrieves the value of the leaf HighWmark from the NokiaConf_Configure_Groups_Group_Service_Vpls_Mrp_Mmrp_AttributeTable
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HighWmark is set, it can
// safely use t.GetHighWmark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HighWmark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Mrp_Mmrp_AttributeTable) GetHighWmark() int32 {
	if t == nil || t.HighWmark == nil {
		return 95
	}
	return *t.HighWmark
}

// GetLowWmark retrieves the value of the leaf LowWmark from the NokiaConf_Configure_Groups_Group_Service_Vpls_Mrp_Mmrp_AttributeTable
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowWmark is set, it can
// safely use t.GetLowWmark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowWmark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Mrp_Mmrp_AttributeTable) GetLowWmark() int32 {
	if t == nil || t.LowWmark == nil {
		return 90
	}
	return *t.LowWmark
}

// GetSize retrieves the value of the leaf Size from the NokiaConf_Configure_Groups_Group_Service_Vpls_Mrp_Mmrp_AttributeTable
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Size is set, it can
// safely use t.GetSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Size == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Mrp_Mmrp_AttributeTable) GetSize() uint32 {
	if t == nil || t.Size == nil {
		return 2048
	}
	return *t.Size
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_Mrp_Mmrp_AttributeTable
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Mrp_Mmrp_AttributeTable) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HighWmark == nil {
		var v int32 = 95
		t.HighWmark = &v
	}
	if t.LowWmark == nil {
		var v int32 = 90
		t.LowWmark = &v
	}
	if t.Size == nil {
		var v uint32 = 2048
		t.Size = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Mrp_Mmrp_AttributeTable) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_Mrp_Mmrp_AttributeTable"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Mrp_Mmrp_AttributeTable) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Mrp_Mmrp_AttributeTable) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_Mrp_Mmrp_AttributeTable.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Mrp_Mmrp_AttributeTable) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb represents the /nokia-conf/configure/groups/group/service/vpls/pbb YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb struct {
	BackboneVpls        map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls `path:"backbone-vpls" module:"nokia-conf"`
	ForceQtagForwarding *bool                                                                      `path:"force-qtag-forwarding" module:"nokia-conf"`
	IVplsMacFlush       *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush           `path:"i-vpls-mac-flush" module:"nokia-conf"`
	MacNotification     *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_MacNotification         `path:"mac-notification" module:"nokia-conf"`
	SourceBmac          *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_SourceBmac              `path:"source-bmac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb) IsYANGGoStruct() {}

// NewBackboneVpls creates a new entry in the BackboneVpls list of the
// NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb) NewBackboneVpls(BackboneVplsServiceName string) (*NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BackboneVpls == nil {
		t.BackboneVpls = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls)
	}

	key := BackboneVplsServiceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.BackboneVpls[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list BackboneVpls", key)
	}

	t.BackboneVpls[key] = &NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls{
		BackboneVplsServiceName: &BackboneVplsServiceName,
	}

	return t.BackboneVpls[key], nil
}

// RenameBackboneVpls renames an entry in the list BackboneVpls within
// the NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb) RenameBackboneVpls(oldK, newK string) error {
	if _, ok := t.BackboneVpls[newK]; ok {
		return fmt.Errorf("key %v already exists in BackboneVpls", newK)
	}

	e, ok := t.BackboneVpls[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in BackboneVpls", oldK)
	}
	e.BackboneVplsServiceName = &newK

	t.BackboneVpls[newK] = e
	delete(t.BackboneVpls, oldK)
	return nil
}

// GetOrCreateBackboneVpls retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb) GetOrCreateBackboneVpls(BackboneVplsServiceName string) *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls {

	key := BackboneVplsServiceName

	if v, ok := t.BackboneVpls[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewBackboneVpls(BackboneVplsServiceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateBackboneVpls got unexpected error: %v", err))
	}
	return v
}

// GetBackboneVpls retrieves the value with the specified key from
// the BackboneVpls map field of NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb) GetBackboneVpls(BackboneVplsServiceName string) *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls {

	if t == nil {
		return nil
	}

	key := BackboneVplsServiceName

	if lm, ok := t.BackboneVpls[key]; ok {
		return lm
	}
	return nil
}

// DeleteBackboneVpls deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb) DeleteBackboneVpls(BackboneVplsServiceName string) {
	key := BackboneVplsServiceName

	delete(t.BackboneVpls, key)
}

// AppendBackboneVpls appends the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls struct to the
// list BackboneVpls of NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb) AppendBackboneVpls(v *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls) error {
	if v.BackboneVplsServiceName == nil {
		return fmt.Errorf("invalid nil key received for BackboneVplsServiceName")
	}

	key := *v.BackboneVplsServiceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BackboneVpls == nil {
		t.BackboneVpls = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls)
	}

	if _, ok := t.BackboneVpls[key]; ok {
		return fmt.Errorf("duplicate key for list BackboneVpls %v", key)
	}

	t.BackboneVpls[key] = v
	return nil
}

// GetOrCreateIVplsMacFlush retrieves the value of the IVplsMacFlush field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb) GetOrCreateIVplsMacFlush() *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush {
	if t.IVplsMacFlush != nil {
		return t.IVplsMacFlush
	}
	t.IVplsMacFlush = &NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush{}
	return t.IVplsMacFlush
}

// GetOrCreateMacNotification retrieves the value of the MacNotification field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb) GetOrCreateMacNotification() *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_MacNotification {
	if t.MacNotification != nil {
		return t.MacNotification
	}
	t.MacNotification = &NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_MacNotification{}
	return t.MacNotification
}

// GetOrCreateSourceBmac retrieves the value of the SourceBmac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb) GetOrCreateSourceBmac() *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_SourceBmac {
	if t.SourceBmac != nil {
		return t.SourceBmac
	}
	t.SourceBmac = &NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_SourceBmac{}
	return t.SourceBmac
}

// GetIVplsMacFlush returns the value of the IVplsMacFlush struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb. If the receiver or the field IVplsMacFlush is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb) GetIVplsMacFlush() *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush {
	if t != nil && t.IVplsMacFlush != nil {
		return t.IVplsMacFlush
	}
	return nil
}

// GetMacNotification returns the value of the MacNotification struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb. If the receiver or the field MacNotification is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb) GetMacNotification() *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_MacNotification {
	if t != nil && t.MacNotification != nil {
		return t.MacNotification
	}
	return nil
}

// GetSourceBmac returns the value of the SourceBmac struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb. If the receiver or the field SourceBmac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb) GetSourceBmac() *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_SourceBmac {
	if t != nil && t.SourceBmac != nil {
		return t.SourceBmac
	}
	return nil
}

// GetForceQtagForwarding retrieves the value of the leaf ForceQtagForwarding from the NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForceQtagForwarding is set, it can
// safely use t.GetForceQtagForwarding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForceQtagForwarding == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb) GetForceQtagForwarding() bool {
	if t == nil || t.ForceQtagForwarding == nil {
		return false
	}
	return *t.ForceQtagForwarding
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ForceQtagForwarding == nil {
		var v bool = false
		t.ForceQtagForwarding = &v
	}
	t.IVplsMacFlush.PopulateDefaults()
	t.MacNotification.PopulateDefaults()
	t.SourceBmac.PopulateDefaults()
	for _, e := range t.BackboneVpls {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls represents the /nokia-conf/configure/groups/group/service/vpls/pbb/backbone-vpls YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls struct {
	BackboneVplsServiceName *string                                                                             `path:"backbone-vpls-service-name" module:"nokia-conf"`
	Fdb                     *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Fdb                 `path:"fdb" module:"nokia-conf"`
	IgmpSnooping            *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping        `path:"igmp-snooping" module:"nokia-conf"`
	Isid                    *int32                                                                              `path:"isid" module:"nokia-conf"`
	MeshSdp                 map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MeshSdp  `path:"mesh-sdp" module:"nokia-conf"`
	MldSnooping             *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MldSnooping         `path:"mld-snooping" module:"nokia-conf"`
	Sap                     map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Sap      `path:"sap" module:"nokia-conf"`
	SpokeSdp                map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_SpokeSdp `path:"spoke-sdp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls) IsYANGGoStruct() {}

// NewMeshSdp creates a new entry in the MeshSdp list of the
// NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls) NewMeshSdp(SdpBindId string) (*NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MeshSdp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MeshSdp == nil {
		t.MeshSdp = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MeshSdp)
	}

	key := SdpBindId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MeshSdp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MeshSdp", key)
	}

	t.MeshSdp[key] = &NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MeshSdp{
		SdpBindId: &SdpBindId,
	}

	return t.MeshSdp[key], nil
}

// RenameMeshSdp renames an entry in the list MeshSdp within
// the NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls) RenameMeshSdp(oldK, newK string) error {
	if _, ok := t.MeshSdp[newK]; ok {
		return fmt.Errorf("key %v already exists in MeshSdp", newK)
	}

	e, ok := t.MeshSdp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MeshSdp", oldK)
	}
	e.SdpBindId = &newK

	t.MeshSdp[newK] = e
	delete(t.MeshSdp, oldK)
	return nil
}

// GetOrCreateMeshSdp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls) GetOrCreateMeshSdp(SdpBindId string) *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MeshSdp {

	key := SdpBindId

	if v, ok := t.MeshSdp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMeshSdp(SdpBindId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMeshSdp got unexpected error: %v", err))
	}
	return v
}

// GetMeshSdp retrieves the value with the specified key from
// the MeshSdp map field of NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls) GetMeshSdp(SdpBindId string) *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MeshSdp {

	if t == nil {
		return nil
	}

	key := SdpBindId

	if lm, ok := t.MeshSdp[key]; ok {
		return lm
	}
	return nil
}

// DeleteMeshSdp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls) DeleteMeshSdp(SdpBindId string) {
	key := SdpBindId

	delete(t.MeshSdp, key)
}

// AppendMeshSdp appends the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MeshSdp struct to the
// list MeshSdp of NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MeshSdp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls) AppendMeshSdp(v *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MeshSdp) error {
	if v.SdpBindId == nil {
		return fmt.Errorf("invalid nil key received for SdpBindId")
	}

	key := *v.SdpBindId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MeshSdp == nil {
		t.MeshSdp = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MeshSdp)
	}

	if _, ok := t.MeshSdp[key]; ok {
		return fmt.Errorf("duplicate key for list MeshSdp %v", key)
	}

	t.MeshSdp[key] = v
	return nil
}

// NewSap creates a new entry in the Sap list of the
// NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls) NewSap(SapId string) (*NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Sap, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sap == nil {
		t.Sap = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Sap)
	}

	key := SapId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Sap[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Sap", key)
	}

	t.Sap[key] = &NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Sap{
		SapId: &SapId,
	}

	return t.Sap[key], nil
}

// RenameSap renames an entry in the list Sap within
// the NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls) RenameSap(oldK, newK string) error {
	if _, ok := t.Sap[newK]; ok {
		return fmt.Errorf("key %v already exists in Sap", newK)
	}

	e, ok := t.Sap[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Sap", oldK)
	}
	e.SapId = &newK

	t.Sap[newK] = e
	delete(t.Sap, oldK)
	return nil
}

// GetOrCreateSap retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls) GetOrCreateSap(SapId string) *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Sap {

	key := SapId

	if v, ok := t.Sap[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSap(SapId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSap got unexpected error: %v", err))
	}
	return v
}

// GetSap retrieves the value with the specified key from
// the Sap map field of NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls) GetSap(SapId string) *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Sap {

	if t == nil {
		return nil
	}

	key := SapId

	if lm, ok := t.Sap[key]; ok {
		return lm
	}
	return nil
}

// DeleteSap deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls) DeleteSap(SapId string) {
	key := SapId

	delete(t.Sap, key)
}

// AppendSap appends the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Sap struct to the
// list Sap of NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Sap already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls) AppendSap(v *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Sap) error {
	if v.SapId == nil {
		return fmt.Errorf("invalid nil key received for SapId")
	}

	key := *v.SapId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sap == nil {
		t.Sap = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Sap)
	}

	if _, ok := t.Sap[key]; ok {
		return fmt.Errorf("duplicate key for list Sap %v", key)
	}

	t.Sap[key] = v
	return nil
}

// NewSpokeSdp creates a new entry in the SpokeSdp list of the
// NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls) NewSpokeSdp(SdpBindId string) (*NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_SpokeSdp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SpokeSdp == nil {
		t.SpokeSdp = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_SpokeSdp)
	}

	key := SdpBindId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SpokeSdp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SpokeSdp", key)
	}

	t.SpokeSdp[key] = &NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_SpokeSdp{
		SdpBindId: &SdpBindId,
	}

	return t.SpokeSdp[key], nil
}

// RenameSpokeSdp renames an entry in the list SpokeSdp within
// the NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls) RenameSpokeSdp(oldK, newK string) error {
	if _, ok := t.SpokeSdp[newK]; ok {
		return fmt.Errorf("key %v already exists in SpokeSdp", newK)
	}

	e, ok := t.SpokeSdp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SpokeSdp", oldK)
	}
	e.SdpBindId = &newK

	t.SpokeSdp[newK] = e
	delete(t.SpokeSdp, oldK)
	return nil
}

// GetOrCreateSpokeSdp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls) GetOrCreateSpokeSdp(SdpBindId string) *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_SpokeSdp {

	key := SdpBindId

	if v, ok := t.SpokeSdp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSpokeSdp(SdpBindId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSpokeSdp got unexpected error: %v", err))
	}
	return v
}

// GetSpokeSdp retrieves the value with the specified key from
// the SpokeSdp map field of NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls) GetSpokeSdp(SdpBindId string) *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_SpokeSdp {

	if t == nil {
		return nil
	}

	key := SdpBindId

	if lm, ok := t.SpokeSdp[key]; ok {
		return lm
	}
	return nil
}

// DeleteSpokeSdp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls) DeleteSpokeSdp(SdpBindId string) {
	key := SdpBindId

	delete(t.SpokeSdp, key)
}

// AppendSpokeSdp appends the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_SpokeSdp struct to the
// list SpokeSdp of NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_SpokeSdp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls) AppendSpokeSdp(v *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_SpokeSdp) error {
	if v.SdpBindId == nil {
		return fmt.Errorf("invalid nil key received for SdpBindId")
	}

	key := *v.SdpBindId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SpokeSdp == nil {
		t.SpokeSdp = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_SpokeSdp)
	}

	if _, ok := t.SpokeSdp[key]; ok {
		return fmt.Errorf("duplicate key for list SpokeSdp %v", key)
	}

	t.SpokeSdp[key] = v
	return nil
}

// GetOrCreateFdb retrieves the value of the Fdb field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls) GetOrCreateFdb() *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Fdb {
	if t.Fdb != nil {
		return t.Fdb
	}
	t.Fdb = &NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Fdb{}
	return t.Fdb
}

// GetOrCreateIgmpSnooping retrieves the value of the IgmpSnooping field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls) GetOrCreateIgmpSnooping() *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping {
	if t.IgmpSnooping != nil {
		return t.IgmpSnooping
	}
	t.IgmpSnooping = &NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping{}
	return t.IgmpSnooping
}

// GetOrCreateMldSnooping retrieves the value of the MldSnooping field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls) GetOrCreateMldSnooping() *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MldSnooping {
	if t.MldSnooping != nil {
		return t.MldSnooping
	}
	t.MldSnooping = &NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MldSnooping{}
	return t.MldSnooping
}

// GetFdb returns the value of the Fdb struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls. If the receiver or the field Fdb is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls) GetFdb() *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Fdb {
	if t != nil && t.Fdb != nil {
		return t.Fdb
	}
	return nil
}

// GetIgmpSnooping returns the value of the IgmpSnooping struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls. If the receiver or the field IgmpSnooping is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls) GetIgmpSnooping() *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping {
	if t != nil && t.IgmpSnooping != nil {
		return t.IgmpSnooping
	}
	return nil
}

// GetMldSnooping returns the value of the MldSnooping struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls. If the receiver or the field MldSnooping is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls) GetMldSnooping() *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MldSnooping {
	if t != nil && t.MldSnooping != nil {
		return t.MldSnooping
	}
	return nil
}

// GetBackboneVplsServiceName retrieves the value of the leaf BackboneVplsServiceName from the NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BackboneVplsServiceName is set, it can
// safely use t.GetBackboneVplsServiceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BackboneVplsServiceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls) GetBackboneVplsServiceName() string {
	if t == nil || t.BackboneVplsServiceName == nil {
		return ""
	}
	return *t.BackboneVplsServiceName
}

// GetIsid retrieves the value of the leaf Isid from the NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Isid is set, it can
// safely use t.GetIsid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Isid == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls) GetIsid() int32 {
	if t == nil || t.Isid == nil {
		return 0
	}
	return *t.Isid
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Fdb.PopulateDefaults()
	t.IgmpSnooping.PopulateDefaults()
	t.MldSnooping.PopulateDefaults()
	for _, e := range t.MeshSdp {
		e.PopulateDefaults()
	}
	for _, e := range t.Sap {
		e.PopulateDefaults()
	}
	for _, e := range t.SpokeSdp {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls) ΛListKeyMap() (map[string]interface{}, error) {
	if t.BackboneVplsServiceName == nil {
		return nil, fmt.Errorf("nil value for key BackboneVplsServiceName")
	}

	return map[string]interface{}{
		"backbone-vpls-service-name": *t.BackboneVplsServiceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Fdb represents the /nokia-conf/configure/groups/group/service/vpls/pbb/backbone-vpls/fdb YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Fdb struct {
	ProtectedSrcMacViolationAction E_NokiaTypesServices_ProtectedSrcMacViolationDfAction `path:"protected-src-mac-violation-action" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Fdb implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Fdb) IsYANGGoStruct() {}

// GetProtectedSrcMacViolationAction retrieves the value of the leaf ProtectedSrcMacViolationAction from the NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Fdb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProtectedSrcMacViolationAction is set, it can
// safely use t.GetProtectedSrcMacViolationAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProtectedSrcMacViolationAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Fdb) GetProtectedSrcMacViolationAction() E_NokiaTypesServices_ProtectedSrcMacViolationDfAction {
	if t == nil || t.ProtectedSrcMacViolationAction == 0 {
		return 0
	}
	return t.ProtectedSrcMacViolationAction
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Fdb
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Fdb) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Fdb) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Fdb"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Fdb) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Fdb) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Fdb.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Fdb) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping represents the /nokia-conf/configure/groups/group/service/vpls/pbb/backbone-vpls/igmp-snooping YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping struct {
	MrouterDestination map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping_MrouterDestination `path:"mrouter-destination" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping) IsYANGGoStruct() {
}

// NewMrouterDestination creates a new entry in the MrouterDestination list of the
// NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping) NewMrouterDestination(MacReference string) (*NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping_MrouterDestination, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MrouterDestination == nil {
		t.MrouterDestination = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping_MrouterDestination)
	}

	key := MacReference

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MrouterDestination[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MrouterDestination", key)
	}

	t.MrouterDestination[key] = &NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping_MrouterDestination{
		MacReference: &MacReference,
	}

	return t.MrouterDestination[key], nil
}

// RenameMrouterDestination renames an entry in the list MrouterDestination within
// the NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping) RenameMrouterDestination(oldK, newK string) error {
	if _, ok := t.MrouterDestination[newK]; ok {
		return fmt.Errorf("key %v already exists in MrouterDestination", newK)
	}

	e, ok := t.MrouterDestination[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MrouterDestination", oldK)
	}
	e.MacReference = &newK

	t.MrouterDestination[newK] = e
	delete(t.MrouterDestination, oldK)
	return nil
}

// GetOrCreateMrouterDestination retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping) GetOrCreateMrouterDestination(MacReference string) *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping_MrouterDestination {

	key := MacReference

	if v, ok := t.MrouterDestination[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMrouterDestination(MacReference)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMrouterDestination got unexpected error: %v", err))
	}
	return v
}

// GetMrouterDestination retrieves the value with the specified key from
// the MrouterDestination map field of NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping) GetMrouterDestination(MacReference string) *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping_MrouterDestination {

	if t == nil {
		return nil
	}

	key := MacReference

	if lm, ok := t.MrouterDestination[key]; ok {
		return lm
	}
	return nil
}

// DeleteMrouterDestination deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping) DeleteMrouterDestination(MacReference string) {
	key := MacReference

	delete(t.MrouterDestination, key)
}

// AppendMrouterDestination appends the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping_MrouterDestination struct to the
// list MrouterDestination of NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping_MrouterDestination already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping) AppendMrouterDestination(v *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping_MrouterDestination) error {
	if v.MacReference == nil {
		return fmt.Errorf("invalid nil key received for MacReference")
	}

	key := *v.MacReference

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MrouterDestination == nil {
		t.MrouterDestination = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping_MrouterDestination)
	}

	if _, ok := t.MrouterDestination[key]; ok {
		return fmt.Errorf("duplicate key for list MrouterDestination %v", key)
	}

	t.MrouterDestination[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.MrouterDestination {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping_MrouterDestination represents the /nokia-conf/configure/groups/group/service/vpls/pbb/backbone-vpls/igmp-snooping/mrouter-destination YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping_MrouterDestination struct {
	MacReference *string `path:"mac-reference" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping_MrouterDestination implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping_MrouterDestination) IsYANGGoStruct() {
}

// GetMacReference retrieves the value of the leaf MacReference from the NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping_MrouterDestination
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacReference is set, it can
// safely use t.GetMacReference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacReference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping_MrouterDestination) GetMacReference() string {
	if t == nil || t.MacReference == nil {
		return ""
	}
	return *t.MacReference
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping_MrouterDestination
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping_MrouterDestination) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping_MrouterDestination struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping_MrouterDestination) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MacReference == nil {
		return nil, fmt.Errorf("nil value for key MacReference")
	}

	return map[string]interface{}{
		"mac-reference": *t.MacReference,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping_MrouterDestination) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping_MrouterDestination"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping_MrouterDestination) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping_MrouterDestination) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping_MrouterDestination.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_IgmpSnooping_MrouterDestination) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MeshSdp represents the /nokia-conf/configure/groups/group/service/vpls/pbb/backbone-vpls/mesh-sdp YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MeshSdp struct {
	IgmpSnooping *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MeshSdp_IgmpSnooping `path:"igmp-snooping" module:"nokia-conf"`
	MldSnooping  *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MeshSdp_MldSnooping  `path:"mld-snooping" module:"nokia-conf"`
	SdpBindId    *string                                                                              `path:"sdp-bind-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MeshSdp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MeshSdp) IsYANGGoStruct() {}

// GetOrCreateIgmpSnooping retrieves the value of the IgmpSnooping field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MeshSdp) GetOrCreateIgmpSnooping() *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MeshSdp_IgmpSnooping {
	if t.IgmpSnooping != nil {
		return t.IgmpSnooping
	}
	t.IgmpSnooping = &NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MeshSdp_IgmpSnooping{}
	return t.IgmpSnooping
}

// GetOrCreateMldSnooping retrieves the value of the MldSnooping field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MeshSdp) GetOrCreateMldSnooping() *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MeshSdp_MldSnooping {
	if t.MldSnooping != nil {
		return t.MldSnooping
	}
	t.MldSnooping = &NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MeshSdp_MldSnooping{}
	return t.MldSnooping
}

// GetIgmpSnooping returns the value of the IgmpSnooping struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MeshSdp. If the receiver or the field IgmpSnooping is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MeshSdp) GetIgmpSnooping() *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MeshSdp_IgmpSnooping {
	if t != nil && t.IgmpSnooping != nil {
		return t.IgmpSnooping
	}
	return nil
}

// GetMldSnooping returns the value of the MldSnooping struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MeshSdp. If the receiver or the field MldSnooping is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MeshSdp) GetMldSnooping() *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MeshSdp_MldSnooping {
	if t != nil && t.MldSnooping != nil {
		return t.MldSnooping
	}
	return nil
}

// GetSdpBindId retrieves the value of the leaf SdpBindId from the NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MeshSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SdpBindId is set, it can
// safely use t.GetSdpBindId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SdpBindId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MeshSdp) GetSdpBindId() string {
	if t == nil || t.SdpBindId == nil {
		return ""
	}
	return *t.SdpBindId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MeshSdp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MeshSdp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.IgmpSnooping.PopulateDefaults()
	t.MldSnooping.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MeshSdp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MeshSdp) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SdpBindId == nil {
		return nil, fmt.Errorf("nil value for key SdpBindId")
	}

	return map[string]interface{}{
		"sdp-bind-id": *t.SdpBindId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MeshSdp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MeshSdp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MeshSdp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MeshSdp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MeshSdp.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MeshSdp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MeshSdp_IgmpSnooping represents the /nokia-conf/configure/groups/group/service/vpls/pbb/backbone-vpls/mesh-sdp/igmp-snooping YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MeshSdp_IgmpSnooping struct {
	MrouterPort *bool `path:"mrouter-port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MeshSdp_IgmpSnooping implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MeshSdp_IgmpSnooping) IsYANGGoStruct() {
}

// GetMrouterPort retrieves the value of the leaf MrouterPort from the NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MeshSdp_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MrouterPort is set, it can
// safely use t.GetMrouterPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MrouterPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MeshSdp_IgmpSnooping) GetMrouterPort() bool {
	if t == nil || t.MrouterPort == nil {
		return false
	}
	return *t.MrouterPort
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MeshSdp_IgmpSnooping
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MeshSdp_IgmpSnooping) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MrouterPort == nil {
		var v bool = false
		t.MrouterPort = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MeshSdp_IgmpSnooping) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MeshSdp_IgmpSnooping"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MeshSdp_IgmpSnooping) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MeshSdp_IgmpSnooping) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MeshSdp_IgmpSnooping.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MeshSdp_IgmpSnooping) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MeshSdp_MldSnooping represents the /nokia-conf/configure/groups/group/service/vpls/pbb/backbone-vpls/mesh-sdp/mld-snooping YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MeshSdp_MldSnooping struct {
	MrouterPort *bool `path:"mrouter-port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MeshSdp_MldSnooping implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MeshSdp_MldSnooping) IsYANGGoStruct() {
}

// GetMrouterPort retrieves the value of the leaf MrouterPort from the NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MeshSdp_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MrouterPort is set, it can
// safely use t.GetMrouterPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MrouterPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MeshSdp_MldSnooping) GetMrouterPort() bool {
	if t == nil || t.MrouterPort == nil {
		return false
	}
	return *t.MrouterPort
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MeshSdp_MldSnooping
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MeshSdp_MldSnooping) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MrouterPort == nil {
		var v bool = false
		t.MrouterPort = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MeshSdp_MldSnooping) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MeshSdp_MldSnooping"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MeshSdp_MldSnooping) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MeshSdp_MldSnooping) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MeshSdp_MldSnooping.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MeshSdp_MldSnooping) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MldSnooping represents the /nokia-conf/configure/groups/group/service/vpls/pbb/backbone-vpls/mld-snooping YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MldSnooping struct {
	MrouterDestination map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MldSnooping_MrouterDestination `path:"mrouter-destination" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MldSnooping implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MldSnooping) IsYANGGoStruct() {}

// NewMrouterDestination creates a new entry in the MrouterDestination list of the
// NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MldSnooping struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MldSnooping) NewMrouterDestination(MacReference string) (*NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MldSnooping_MrouterDestination, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MrouterDestination == nil {
		t.MrouterDestination = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MldSnooping_MrouterDestination)
	}

	key := MacReference

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MrouterDestination[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MrouterDestination", key)
	}

	t.MrouterDestination[key] = &NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MldSnooping_MrouterDestination{
		MacReference: &MacReference,
	}

	return t.MrouterDestination[key], nil
}

// RenameMrouterDestination renames an entry in the list MrouterDestination within
// the NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MldSnooping struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MldSnooping) RenameMrouterDestination(oldK, newK string) error {
	if _, ok := t.MrouterDestination[newK]; ok {
		return fmt.Errorf("key %v already exists in MrouterDestination", newK)
	}

	e, ok := t.MrouterDestination[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MrouterDestination", oldK)
	}
	e.MacReference = &newK

	t.MrouterDestination[newK] = e
	delete(t.MrouterDestination, oldK)
	return nil
}

// GetOrCreateMrouterDestination retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MldSnooping. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MldSnooping) GetOrCreateMrouterDestination(MacReference string) *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MldSnooping_MrouterDestination {

	key := MacReference

	if v, ok := t.MrouterDestination[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMrouterDestination(MacReference)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMrouterDestination got unexpected error: %v", err))
	}
	return v
}

// GetMrouterDestination retrieves the value with the specified key from
// the MrouterDestination map field of NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MldSnooping. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MldSnooping) GetMrouterDestination(MacReference string) *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MldSnooping_MrouterDestination {

	if t == nil {
		return nil
	}

	key := MacReference

	if lm, ok := t.MrouterDestination[key]; ok {
		return lm
	}
	return nil
}

// DeleteMrouterDestination deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MldSnooping. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MldSnooping) DeleteMrouterDestination(MacReference string) {
	key := MacReference

	delete(t.MrouterDestination, key)
}

// AppendMrouterDestination appends the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MldSnooping_MrouterDestination struct to the
// list MrouterDestination of NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MldSnooping. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MldSnooping_MrouterDestination already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MldSnooping) AppendMrouterDestination(v *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MldSnooping_MrouterDestination) error {
	if v.MacReference == nil {
		return fmt.Errorf("invalid nil key received for MacReference")
	}

	key := *v.MacReference

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MrouterDestination == nil {
		t.MrouterDestination = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MldSnooping_MrouterDestination)
	}

	if _, ok := t.MrouterDestination[key]; ok {
		return fmt.Errorf("duplicate key for list MrouterDestination %v", key)
	}

	t.MrouterDestination[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MldSnooping
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MldSnooping) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.MrouterDestination {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MldSnooping) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MldSnooping"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MldSnooping) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MldSnooping) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MldSnooping.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MldSnooping) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MldSnooping_MrouterDestination represents the /nokia-conf/configure/groups/group/service/vpls/pbb/backbone-vpls/mld-snooping/mrouter-destination YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MldSnooping_MrouterDestination struct {
	MacReference *string `path:"mac-reference" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MldSnooping_MrouterDestination implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MldSnooping_MrouterDestination) IsYANGGoStruct() {
}

// GetMacReference retrieves the value of the leaf MacReference from the NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MldSnooping_MrouterDestination
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacReference is set, it can
// safely use t.GetMacReference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacReference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MldSnooping_MrouterDestination) GetMacReference() string {
	if t == nil || t.MacReference == nil {
		return ""
	}
	return *t.MacReference
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MldSnooping_MrouterDestination
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MldSnooping_MrouterDestination) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MldSnooping_MrouterDestination struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MldSnooping_MrouterDestination) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MacReference == nil {
		return nil, fmt.Errorf("nil value for key MacReference")
	}

	return map[string]interface{}{
		"mac-reference": *t.MacReference,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MldSnooping_MrouterDestination) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MldSnooping_MrouterDestination"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MldSnooping_MrouterDestination) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MldSnooping_MrouterDestination) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MldSnooping_MrouterDestination.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_MldSnooping_MrouterDestination) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Sap represents the /nokia-conf/configure/groups/group/service/vpls/pbb/backbone-vpls/sap YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Sap struct {
	IgmpSnooping *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Sap_IgmpSnooping `path:"igmp-snooping" module:"nokia-conf"`
	MldSnooping  *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Sap_MldSnooping  `path:"mld-snooping" module:"nokia-conf"`
	SapId        *string                                                                          `path:"sap-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Sap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Sap) IsYANGGoStruct() {}

// GetOrCreateIgmpSnooping retrieves the value of the IgmpSnooping field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Sap) GetOrCreateIgmpSnooping() *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Sap_IgmpSnooping {
	if t.IgmpSnooping != nil {
		return t.IgmpSnooping
	}
	t.IgmpSnooping = &NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Sap_IgmpSnooping{}
	return t.IgmpSnooping
}

// GetOrCreateMldSnooping retrieves the value of the MldSnooping field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Sap) GetOrCreateMldSnooping() *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Sap_MldSnooping {
	if t.MldSnooping != nil {
		return t.MldSnooping
	}
	t.MldSnooping = &NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Sap_MldSnooping{}
	return t.MldSnooping
}

// GetIgmpSnooping returns the value of the IgmpSnooping struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Sap. If the receiver or the field IgmpSnooping is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Sap) GetIgmpSnooping() *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Sap_IgmpSnooping {
	if t != nil && t.IgmpSnooping != nil {
		return t.IgmpSnooping
	}
	return nil
}

// GetMldSnooping returns the value of the MldSnooping struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Sap. If the receiver or the field MldSnooping is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Sap) GetMldSnooping() *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Sap_MldSnooping {
	if t != nil && t.MldSnooping != nil {
		return t.MldSnooping
	}
	return nil
}

// GetSapId retrieves the value of the leaf SapId from the NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SapId is set, it can
// safely use t.GetSapId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SapId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Sap) GetSapId() string {
	if t == nil || t.SapId == nil {
		return ""
	}
	return *t.SapId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Sap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Sap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.IgmpSnooping.PopulateDefaults()
	t.MldSnooping.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Sap struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Sap) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SapId == nil {
		return nil, fmt.Errorf("nil value for key SapId")
	}

	return map[string]interface{}{
		"sap-id": *t.SapId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Sap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Sap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Sap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Sap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Sap.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Sap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Sap_IgmpSnooping represents the /nokia-conf/configure/groups/group/service/vpls/pbb/backbone-vpls/sap/igmp-snooping YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Sap_IgmpSnooping struct {
	MrouterPort *bool `path:"mrouter-port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Sap_IgmpSnooping implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Sap_IgmpSnooping) IsYANGGoStruct() {
}

// GetMrouterPort retrieves the value of the leaf MrouterPort from the NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Sap_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MrouterPort is set, it can
// safely use t.GetMrouterPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MrouterPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Sap_IgmpSnooping) GetMrouterPort() bool {
	if t == nil || t.MrouterPort == nil {
		return false
	}
	return *t.MrouterPort
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Sap_IgmpSnooping
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Sap_IgmpSnooping) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MrouterPort == nil {
		var v bool = false
		t.MrouterPort = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Sap_IgmpSnooping) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Sap_IgmpSnooping"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Sap_IgmpSnooping) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Sap_IgmpSnooping) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Sap_IgmpSnooping.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Sap_IgmpSnooping) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Sap_MldSnooping represents the /nokia-conf/configure/groups/group/service/vpls/pbb/backbone-vpls/sap/mld-snooping YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Sap_MldSnooping struct {
	MrouterPort *bool `path:"mrouter-port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Sap_MldSnooping implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Sap_MldSnooping) IsYANGGoStruct() {
}

// GetMrouterPort retrieves the value of the leaf MrouterPort from the NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Sap_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MrouterPort is set, it can
// safely use t.GetMrouterPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MrouterPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Sap_MldSnooping) GetMrouterPort() bool {
	if t == nil || t.MrouterPort == nil {
		return false
	}
	return *t.MrouterPort
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Sap_MldSnooping
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Sap_MldSnooping) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MrouterPort == nil {
		var v bool = false
		t.MrouterPort = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Sap_MldSnooping) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Sap_MldSnooping"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Sap_MldSnooping) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Sap_MldSnooping) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Sap_MldSnooping.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_Sap_MldSnooping) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_SpokeSdp represents the /nokia-conf/configure/groups/group/service/vpls/pbb/backbone-vpls/spoke-sdp YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_SpokeSdp struct {
	IgmpSnooping *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_SpokeSdp_IgmpSnooping `path:"igmp-snooping" module:"nokia-conf"`
	MldSnooping  *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_SpokeSdp_MldSnooping  `path:"mld-snooping" module:"nokia-conf"`
	SdpBindId    *string                                                                               `path:"sdp-bind-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_SpokeSdp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_SpokeSdp) IsYANGGoStruct() {}

// GetOrCreateIgmpSnooping retrieves the value of the IgmpSnooping field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_SpokeSdp) GetOrCreateIgmpSnooping() *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_SpokeSdp_IgmpSnooping {
	if t.IgmpSnooping != nil {
		return t.IgmpSnooping
	}
	t.IgmpSnooping = &NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_SpokeSdp_IgmpSnooping{}
	return t.IgmpSnooping
}

// GetOrCreateMldSnooping retrieves the value of the MldSnooping field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_SpokeSdp) GetOrCreateMldSnooping() *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_SpokeSdp_MldSnooping {
	if t.MldSnooping != nil {
		return t.MldSnooping
	}
	t.MldSnooping = &NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_SpokeSdp_MldSnooping{}
	return t.MldSnooping
}

// GetIgmpSnooping returns the value of the IgmpSnooping struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_SpokeSdp. If the receiver or the field IgmpSnooping is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_SpokeSdp) GetIgmpSnooping() *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_SpokeSdp_IgmpSnooping {
	if t != nil && t.IgmpSnooping != nil {
		return t.IgmpSnooping
	}
	return nil
}

// GetMldSnooping returns the value of the MldSnooping struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_SpokeSdp. If the receiver or the field MldSnooping is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_SpokeSdp) GetMldSnooping() *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_SpokeSdp_MldSnooping {
	if t != nil && t.MldSnooping != nil {
		return t.MldSnooping
	}
	return nil
}

// GetSdpBindId retrieves the value of the leaf SdpBindId from the NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SdpBindId is set, it can
// safely use t.GetSdpBindId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SdpBindId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_SpokeSdp) GetSdpBindId() string {
	if t == nil || t.SdpBindId == nil {
		return ""
	}
	return *t.SdpBindId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_SpokeSdp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_SpokeSdp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.IgmpSnooping.PopulateDefaults()
	t.MldSnooping.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_SpokeSdp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_SpokeSdp) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SdpBindId == nil {
		return nil, fmt.Errorf("nil value for key SdpBindId")
	}

	return map[string]interface{}{
		"sdp-bind-id": *t.SdpBindId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_SpokeSdp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_SpokeSdp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_SpokeSdp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_SpokeSdp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_SpokeSdp.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_SpokeSdp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_SpokeSdp_IgmpSnooping represents the /nokia-conf/configure/groups/group/service/vpls/pbb/backbone-vpls/spoke-sdp/igmp-snooping YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_SpokeSdp_IgmpSnooping struct {
	MrouterPort *bool `path:"mrouter-port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_SpokeSdp_IgmpSnooping implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_SpokeSdp_IgmpSnooping) IsYANGGoStruct() {
}

// GetMrouterPort retrieves the value of the leaf MrouterPort from the NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_SpokeSdp_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MrouterPort is set, it can
// safely use t.GetMrouterPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MrouterPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_SpokeSdp_IgmpSnooping) GetMrouterPort() bool {
	if t == nil || t.MrouterPort == nil {
		return false
	}
	return *t.MrouterPort
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_SpokeSdp_IgmpSnooping
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_SpokeSdp_IgmpSnooping) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MrouterPort == nil {
		var v bool = false
		t.MrouterPort = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_SpokeSdp_IgmpSnooping) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_SpokeSdp_IgmpSnooping"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_SpokeSdp_IgmpSnooping) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_SpokeSdp_IgmpSnooping) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_SpokeSdp_IgmpSnooping.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_SpokeSdp_IgmpSnooping) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_SpokeSdp_MldSnooping represents the /nokia-conf/configure/groups/group/service/vpls/pbb/backbone-vpls/spoke-sdp/mld-snooping YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_SpokeSdp_MldSnooping struct {
	MrouterPort *bool `path:"mrouter-port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_SpokeSdp_MldSnooping implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_SpokeSdp_MldSnooping) IsYANGGoStruct() {
}

// GetMrouterPort retrieves the value of the leaf MrouterPort from the NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_SpokeSdp_MldSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MrouterPort is set, it can
// safely use t.GetMrouterPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MrouterPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_SpokeSdp_MldSnooping) GetMrouterPort() bool {
	if t == nil || t.MrouterPort == nil {
		return false
	}
	return *t.MrouterPort
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_SpokeSdp_MldSnooping
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_SpokeSdp_MldSnooping) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MrouterPort == nil {
		var v bool = false
		t.MrouterPort = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_SpokeSdp_MldSnooping) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_SpokeSdp_MldSnooping"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_SpokeSdp_MldSnooping) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_SpokeSdp_MldSnooping) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_SpokeSdp_MldSnooping.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_BackboneVpls_SpokeSdp_MldSnooping) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush represents the /nokia-conf/configure/groups/group/service/vpls/pbb/i-vpls-mac-flush YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush struct {
	BgpEvpn *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush_BgpEvpn `path:"bgp-evpn" module:"nokia-conf"`
	Tldp    *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush_Tldp    `path:"tldp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush) IsYANGGoStruct() {}

// GetOrCreateBgpEvpn retrieves the value of the BgpEvpn field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush) GetOrCreateBgpEvpn() *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush_BgpEvpn {
	if t.BgpEvpn != nil {
		return t.BgpEvpn
	}
	t.BgpEvpn = &NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush_BgpEvpn{}
	return t.BgpEvpn
}

// GetOrCreateTldp retrieves the value of the Tldp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush) GetOrCreateTldp() *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush_Tldp {
	if t.Tldp != nil {
		return t.Tldp
	}
	t.Tldp = &NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush_Tldp{}
	return t.Tldp
}

// GetBgpEvpn returns the value of the BgpEvpn struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush. If the receiver or the field BgpEvpn is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush) GetBgpEvpn() *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush_BgpEvpn {
	if t != nil && t.BgpEvpn != nil {
		return t.BgpEvpn
	}
	return nil
}

// GetTldp returns the value of the Tldp struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush. If the receiver or the field Tldp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush) GetTldp() *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush_Tldp {
	if t != nil && t.Tldp != nil {
		return t.Tldp
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.BgpEvpn.PopulateDefaults()
	t.Tldp.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush_BgpEvpn represents the /nokia-conf/configure/groups/group/service/vpls/pbb/i-vpls-mac-flush/bgp-evpn YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush_BgpEvpn struct {
	SendToBvpls *bool `path:"send-to-bvpls" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush_BgpEvpn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush_BgpEvpn) IsYANGGoStruct() {}

// GetSendToBvpls retrieves the value of the leaf SendToBvpls from the NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush_BgpEvpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SendToBvpls is set, it can
// safely use t.GetSendToBvpls() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SendToBvpls == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush_BgpEvpn) GetSendToBvpls() bool {
	if t == nil || t.SendToBvpls == nil {
		return false
	}
	return *t.SendToBvpls
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush_BgpEvpn
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush_BgpEvpn) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SendToBvpls == nil {
		var v bool = false
		t.SendToBvpls = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush_BgpEvpn) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush_BgpEvpn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush_BgpEvpn) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush_BgpEvpn) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush_BgpEvpn.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush_BgpEvpn) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush_Tldp represents the /nokia-conf/configure/groups/group/service/vpls/pbb/i-vpls-mac-flush/tldp YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush_Tldp struct {
	PropagateFromBvpls *bool                                                                             `path:"propagate-from-bvpls" module:"nokia-conf"`
	SendOnBvplsFailure *bool                                                                             `path:"send-on-bvpls-failure" module:"nokia-conf"`
	SendToBvpls        *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush_Tldp_SendToBvpls `path:"send-to-bvpls" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush_Tldp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush_Tldp) IsYANGGoStruct() {}

// GetOrCreateSendToBvpls retrieves the value of the SendToBvpls field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush_Tldp) GetOrCreateSendToBvpls() *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush_Tldp_SendToBvpls {
	if t.SendToBvpls != nil {
		return t.SendToBvpls
	}
	t.SendToBvpls = &NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush_Tldp_SendToBvpls{}
	return t.SendToBvpls
}

// GetSendToBvpls returns the value of the SendToBvpls struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush_Tldp. If the receiver or the field SendToBvpls is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush_Tldp) GetSendToBvpls() *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush_Tldp_SendToBvpls {
	if t != nil && t.SendToBvpls != nil {
		return t.SendToBvpls
	}
	return nil
}

// GetPropagateFromBvpls retrieves the value of the leaf PropagateFromBvpls from the NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush_Tldp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PropagateFromBvpls is set, it can
// safely use t.GetPropagateFromBvpls() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PropagateFromBvpls == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush_Tldp) GetPropagateFromBvpls() bool {
	if t == nil || t.PropagateFromBvpls == nil {
		return false
	}
	return *t.PropagateFromBvpls
}

// GetSendOnBvplsFailure retrieves the value of the leaf SendOnBvplsFailure from the NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush_Tldp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SendOnBvplsFailure is set, it can
// safely use t.GetSendOnBvplsFailure() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SendOnBvplsFailure == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush_Tldp) GetSendOnBvplsFailure() bool {
	if t == nil || t.SendOnBvplsFailure == nil {
		return false
	}
	return *t.SendOnBvplsFailure
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush_Tldp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush_Tldp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PropagateFromBvpls == nil {
		var v bool = false
		t.PropagateFromBvpls = &v
	}
	if t.SendOnBvplsFailure == nil {
		var v bool = false
		t.SendOnBvplsFailure = &v
	}
	t.SendToBvpls.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush_Tldp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush_Tldp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush_Tldp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush_Tldp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush_Tldp.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush_Tldp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush_Tldp_SendToBvpls represents the /nokia-conf/configure/groups/group/service/vpls/pbb/i-vpls-mac-flush/tldp/send-to-bvpls YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush_Tldp_SendToBvpls struct {
	AllButMine *bool `path:"all-but-mine" module:"nokia-conf"`
	AllFromMe  *bool `path:"all-from-me" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush_Tldp_SendToBvpls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush_Tldp_SendToBvpls) IsYANGGoStruct() {
}

// GetAllButMine retrieves the value of the leaf AllButMine from the NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush_Tldp_SendToBvpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllButMine is set, it can
// safely use t.GetAllButMine() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllButMine == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush_Tldp_SendToBvpls) GetAllButMine() bool {
	if t == nil || t.AllButMine == nil {
		return false
	}
	return *t.AllButMine
}

// GetAllFromMe retrieves the value of the leaf AllFromMe from the NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush_Tldp_SendToBvpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllFromMe is set, it can
// safely use t.GetAllFromMe() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllFromMe == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush_Tldp_SendToBvpls) GetAllFromMe() bool {
	if t == nil || t.AllFromMe == nil {
		return false
	}
	return *t.AllFromMe
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush_Tldp_SendToBvpls
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush_Tldp_SendToBvpls) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllButMine == nil {
		var v bool = false
		t.AllButMine = &v
	}
	if t.AllFromMe == nil {
		var v bool = false
		t.AllFromMe = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush_Tldp_SendToBvpls) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush_Tldp_SendToBvpls"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush_Tldp_SendToBvpls) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush_Tldp_SendToBvpls) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush_Tldp_SendToBvpls.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_IVplsMacFlush_Tldp_SendToBvpls) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_MacNotification represents the /nokia-conf/configure/groups/group/service/vpls/pbb/mac-notification YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_MacNotification struct {
	AdminState E_NokiaTypesSros_AdminState                                                      `path:"admin-state" module:"nokia-conf"`
	Count      *uint32                                                                          `path:"count" module:"nokia-conf"`
	Interval   *uint32                                                                          `path:"interval" module:"nokia-conf"`
	Renotify   NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_MacNotification_Renotify_Union `path:"renotify" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_MacNotification implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_MacNotification) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_MacNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_MacNotification) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetCount retrieves the value of the leaf Count from the NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_MacNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Count is set, it can
// safely use t.GetCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Count == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_MacNotification) GetCount() uint32 {
	if t == nil || t.Count == nil {
		return 0
	}
	return *t.Count
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_MacNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_MacNotification) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetRenotify retrieves the value of the leaf Renotify from the NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_MacNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Renotify is set, it can
// safely use t.GetRenotify() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Renotify == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_MacNotification) GetRenotify() NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_MacNotification_Renotify_Union {
	if t == nil || t.Renotify == nil {
		return NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_MacNotification_Renotify_Enum_none
	}
	return t.Renotify
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_MacNotification
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_MacNotification) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Renotify == nil {
		t.Renotify = NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_MacNotification_Renotify_Enum_none
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_MacNotification) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_MacNotification"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_MacNotification) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_MacNotification) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_MacNotification.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_MacNotification) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_SourceBmac represents the /nokia-conf/configure/groups/group/service/vpls/pbb/source-bmac YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_SourceBmac struct {
	Address         *string `path:"address" module:"nokia-conf"`
	UseEsBmacLsb    *bool   `path:"use-es-bmac-lsb" module:"nokia-conf"`
	UseMclagBmacLsb *bool   `path:"use-mclag-bmac-lsb" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_SourceBmac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_SourceBmac) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_SourceBmac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_SourceBmac) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetUseEsBmacLsb retrieves the value of the leaf UseEsBmacLsb from the NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_SourceBmac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseEsBmacLsb is set, it can
// safely use t.GetUseEsBmacLsb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseEsBmacLsb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_SourceBmac) GetUseEsBmacLsb() bool {
	if t == nil || t.UseEsBmacLsb == nil {
		return false
	}
	return *t.UseEsBmacLsb
}

// GetUseMclagBmacLsb retrieves the value of the leaf UseMclagBmacLsb from the NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_SourceBmac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseMclagBmacLsb is set, it can
// safely use t.GetUseMclagBmacLsb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseMclagBmacLsb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_SourceBmac) GetUseMclagBmacLsb() bool {
	if t == nil || t.UseMclagBmacLsb == nil {
		return false
	}
	return *t.UseMclagBmacLsb
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_SourceBmac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_SourceBmac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.UseEsBmacLsb == nil {
		var v bool = false
		t.UseEsBmacLsb = &v
	}
	if t.UseMclagBmacLsb == nil {
		var v bool = false
		t.UseMclagBmacLsb = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_SourceBmac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_SourceBmac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_SourceBmac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_SourceBmac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_SourceBmac.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_Pbb_SourceBmac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_PimSnooping represents the /nokia-conf/configure/groups/group/service/vpls/pim-snooping YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_PimSnooping struct {
	GroupPolicy []string                                                        `path:"group-policy" module:"nokia-conf"`
	HoldTime    *uint32                                                         `path:"hold-time" module:"nokia-conf"`
	Ipv4        *NokiaConf_Configure_Groups_Group_Service_Vpls_PimSnooping_Ipv4 `path:"ipv4" module:"nokia-conf" yangPresence:"true"`
	Ipv6        *NokiaConf_Configure_Groups_Group_Service_Vpls_PimSnooping_Ipv6 `path:"ipv6" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_PimSnooping implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_PimSnooping) IsYANGGoStruct() {}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_PimSnooping) GetOrCreateIpv4() *NokiaConf_Configure_Groups_Group_Service_Vpls_PimSnooping_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Groups_Group_Service_Vpls_PimSnooping_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_PimSnooping) GetOrCreateIpv6() *NokiaConf_Configure_Groups_Group_Service_Vpls_PimSnooping_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &NokiaConf_Configure_Groups_Group_Service_Vpls_PimSnooping_Ipv6{}
	return t.Ipv6
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_PimSnooping. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_PimSnooping) GetIpv4() *NokiaConf_Configure_Groups_Group_Service_Vpls_PimSnooping_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_PimSnooping. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_PimSnooping) GetIpv6() *NokiaConf_Configure_Groups_Group_Service_Vpls_PimSnooping_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// GetGroupPolicy retrieves the value of the leaf GroupPolicy from the NokiaConf_Configure_Groups_Group_Service_Vpls_PimSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupPolicy is set, it can
// safely use t.GetGroupPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_PimSnooping) GetGroupPolicy() []string {
	if t == nil || t.GroupPolicy == nil {
		return nil
	}
	return t.GroupPolicy
}

// GetHoldTime retrieves the value of the leaf HoldTime from the NokiaConf_Configure_Groups_Group_Service_Vpls_PimSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldTime is set, it can
// safely use t.GetHoldTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_PimSnooping) GetHoldTime() uint32 {
	if t == nil || t.HoldTime == nil {
		return 90
	}
	return *t.HoldTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_PimSnooping
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_PimSnooping) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HoldTime == nil {
		var v uint32 = 90
		t.HoldTime = &v
	}
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_PimSnooping) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_PimSnooping"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_PimSnooping) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_PimSnooping) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_PimSnooping.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_PimSnooping) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_PimSnooping_Ipv4 represents the /nokia-conf/configure/groups/group/service/vpls/pim-snooping/ipv4 YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_PimSnooping_Ipv4 struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_PimSnooping_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_PimSnooping_Ipv4) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vpls_PimSnooping_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_PimSnooping_Ipv4) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_PimSnooping_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_PimSnooping_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_PimSnooping_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_PimSnooping_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_PimSnooping_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_PimSnooping_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_PimSnooping_Ipv4.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_PimSnooping_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_PimSnooping_Ipv6 represents the /nokia-conf/configure/groups/group/service/vpls/pim-snooping/ipv6 YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_PimSnooping_Ipv6 struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_PimSnooping_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_PimSnooping_Ipv6) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vpls_PimSnooping_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_PimSnooping_Ipv6) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_PimSnooping_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_PimSnooping_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_PimSnooping_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_PimSnooping_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_PimSnooping_Ipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_PimSnooping_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_PimSnooping_Ipv6.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_PimSnooping_Ipv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_ProviderTunnel represents the /nokia-conf/configure/groups/group/service/vpls/provider-tunnel YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_ProviderTunnel struct {
	Inclusive *NokiaConf_Configure_Groups_Group_Service_Vpls_ProviderTunnel_Inclusive `path:"inclusive" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_ProviderTunnel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_ProviderTunnel) IsYANGGoStruct() {}

// GetOrCreateInclusive retrieves the value of the Inclusive field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_ProviderTunnel) GetOrCreateInclusive() *NokiaConf_Configure_Groups_Group_Service_Vpls_ProviderTunnel_Inclusive {
	if t.Inclusive != nil {
		return t.Inclusive
	}
	t.Inclusive = &NokiaConf_Configure_Groups_Group_Service_Vpls_ProviderTunnel_Inclusive{}
	return t.Inclusive
}

// GetInclusive returns the value of the Inclusive struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_ProviderTunnel. If the receiver or the field Inclusive is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_ProviderTunnel) GetInclusive() *NokiaConf_Configure_Groups_Group_Service_Vpls_ProviderTunnel_Inclusive {
	if t != nil && t.Inclusive != nil {
		return t.Inclusive
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_ProviderTunnel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_ProviderTunnel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Inclusive.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_ProviderTunnel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_ProviderTunnel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_ProviderTunnel) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_ProviderTunnel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_ProviderTunnel.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_ProviderTunnel) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_ProviderTunnel_Inclusive represents the /nokia-conf/configure/groups/group/service/vpls/provider-tunnel/inclusive YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_ProviderTunnel_Inclusive struct {
	AdminState        E_NokiaTypesSros_AdminState                                                    `path:"admin-state" module:"nokia-conf"`
	DataDelayInterval *int32                                                                         `path:"data-delay-interval" module:"nokia-conf"`
	Mldp              YANGEmpty                                                                      `path:"mldp" module:"nokia-conf"`
	Owner             E_NokiaConf_Configure_Groups_Group_Service_Vpls_ProviderTunnel_Inclusive_Owner `path:"owner" module:"nokia-conf"`
	RootAndLeaf       *bool                                                                          `path:"root-and-leaf" module:"nokia-conf"`
	Rsvp              *NokiaConf_Configure_Groups_Group_Service_Vpls_ProviderTunnel_Inclusive_Rsvp   `path:"rsvp" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_ProviderTunnel_Inclusive implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_ProviderTunnel_Inclusive) IsYANGGoStruct() {}

// GetOrCreateRsvp retrieves the value of the Rsvp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_ProviderTunnel_Inclusive) GetOrCreateRsvp() *NokiaConf_Configure_Groups_Group_Service_Vpls_ProviderTunnel_Inclusive_Rsvp {
	if t.Rsvp != nil {
		return t.Rsvp
	}
	t.Rsvp = &NokiaConf_Configure_Groups_Group_Service_Vpls_ProviderTunnel_Inclusive_Rsvp{}
	return t.Rsvp
}

// GetRsvp returns the value of the Rsvp struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_ProviderTunnel_Inclusive. If the receiver or the field Rsvp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_ProviderTunnel_Inclusive) GetRsvp() *NokiaConf_Configure_Groups_Group_Service_Vpls_ProviderTunnel_Inclusive_Rsvp {
	if t != nil && t.Rsvp != nil {
		return t.Rsvp
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vpls_ProviderTunnel_Inclusive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_ProviderTunnel_Inclusive) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDataDelayInterval retrieves the value of the leaf DataDelayInterval from the NokiaConf_Configure_Groups_Group_Service_Vpls_ProviderTunnel_Inclusive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DataDelayInterval is set, it can
// safely use t.GetDataDelayInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DataDelayInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_ProviderTunnel_Inclusive) GetDataDelayInterval() int32 {
	if t == nil || t.DataDelayInterval == nil {
		return 15
	}
	return *t.DataDelayInterval
}

// GetMldp retrieves the value of the leaf Mldp from the NokiaConf_Configure_Groups_Group_Service_Vpls_ProviderTunnel_Inclusive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mldp is set, it can
// safely use t.GetMldp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mldp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_ProviderTunnel_Inclusive) GetMldp() YANGEmpty {
	if t == nil || t.Mldp == false {
		return false
	}
	return t.Mldp
}

// GetOwner retrieves the value of the leaf Owner from the NokiaConf_Configure_Groups_Group_Service_Vpls_ProviderTunnel_Inclusive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Owner is set, it can
// safely use t.GetOwner() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Owner == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_ProviderTunnel_Inclusive) GetOwner() E_NokiaConf_Configure_Groups_Group_Service_Vpls_ProviderTunnel_Inclusive_Owner {
	if t == nil || t.Owner == 0 {
		return 0
	}
	return t.Owner
}

// GetRootAndLeaf retrieves the value of the leaf RootAndLeaf from the NokiaConf_Configure_Groups_Group_Service_Vpls_ProviderTunnel_Inclusive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RootAndLeaf is set, it can
// safely use t.GetRootAndLeaf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RootAndLeaf == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_ProviderTunnel_Inclusive) GetRootAndLeaf() bool {
	if t == nil || t.RootAndLeaf == nil {
		return false
	}
	return *t.RootAndLeaf
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_ProviderTunnel_Inclusive
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_ProviderTunnel_Inclusive) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.DataDelayInterval == nil {
		var v int32 = 15
		t.DataDelayInterval = &v
	}
	if t.RootAndLeaf == nil {
		var v bool = false
		t.RootAndLeaf = &v
	}
	t.Rsvp.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_ProviderTunnel_Inclusive) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_ProviderTunnel_Inclusive"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_ProviderTunnel_Inclusive) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_ProviderTunnel_Inclusive) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_ProviderTunnel_Inclusive.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_ProviderTunnel_Inclusive) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_ProviderTunnel_Inclusive_Rsvp represents the /nokia-conf/configure/groups/group/service/vpls/provider-tunnel/inclusive/rsvp YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_ProviderTunnel_Inclusive_Rsvp struct {
	LspTemplate *string `path:"lsp-template" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_ProviderTunnel_Inclusive_Rsvp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_ProviderTunnel_Inclusive_Rsvp) IsYANGGoStruct() {
}

// GetLspTemplate retrieves the value of the leaf LspTemplate from the NokiaConf_Configure_Groups_Group_Service_Vpls_ProviderTunnel_Inclusive_Rsvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspTemplate is set, it can
// safely use t.GetLspTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_ProviderTunnel_Inclusive_Rsvp) GetLspTemplate() string {
	if t == nil || t.LspTemplate == nil {
		return ""
	}
	return *t.LspTemplate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_ProviderTunnel_Inclusive_Rsvp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_ProviderTunnel_Inclusive_Rsvp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_ProviderTunnel_Inclusive_Rsvp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_ProviderTunnel_Inclusive_Rsvp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_ProviderTunnel_Inclusive_Rsvp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_ProviderTunnel_Inclusive_Rsvp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_ProviderTunnel_Inclusive_Rsvp.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_ProviderTunnel_Inclusive_Rsvp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp represents the /nokia-conf/configure/groups/group/service/vpls/proxy-arp YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp struct {
	AdminState      E_NokiaTypesSros_AdminState                                              `path:"admin-state" module:"nokia-conf"`
	AgeTime         NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_AgeTime_Union     `path:"age-time" module:"nokia-conf"`
	DuplicateDetect *NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DuplicateDetect  `path:"duplicate-detect" module:"nokia-conf"`
	DynamicArp      *NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DynamicArp       `path:"dynamic-arp" module:"nokia-conf"`
	DynamicPopulate *bool                                                                    `path:"dynamic-populate" module:"nokia-conf"`
	Evpn            *NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_Evpn             `path:"evpn" module:"nokia-conf"`
	SendRefresh     NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_SendRefresh_Union `path:"send-refresh" module:"nokia-conf"`
	StaticArp       *NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_StaticArp        `path:"static-arp" module:"nokia-conf"`
	TableSize       *int32                                                                   `path:"table-size" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp) IsYANGGoStruct() {}

// GetOrCreateDuplicateDetect retrieves the value of the DuplicateDetect field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp) GetOrCreateDuplicateDetect() *NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DuplicateDetect {
	if t.DuplicateDetect != nil {
		return t.DuplicateDetect
	}
	t.DuplicateDetect = &NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DuplicateDetect{}
	return t.DuplicateDetect
}

// GetOrCreateDynamicArp retrieves the value of the DynamicArp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp) GetOrCreateDynamicArp() *NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DynamicArp {
	if t.DynamicArp != nil {
		return t.DynamicArp
	}
	t.DynamicArp = &NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DynamicArp{}
	return t.DynamicArp
}

// GetOrCreateEvpn retrieves the value of the Evpn field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp) GetOrCreateEvpn() *NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_Evpn {
	if t.Evpn != nil {
		return t.Evpn
	}
	t.Evpn = &NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_Evpn{}
	return t.Evpn
}

// GetOrCreateStaticArp retrieves the value of the StaticArp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp) GetOrCreateStaticArp() *NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_StaticArp {
	if t.StaticArp != nil {
		return t.StaticArp
	}
	t.StaticArp = &NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_StaticArp{}
	return t.StaticArp
}

// GetDuplicateDetect returns the value of the DuplicateDetect struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp. If the receiver or the field DuplicateDetect is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp) GetDuplicateDetect() *NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DuplicateDetect {
	if t != nil && t.DuplicateDetect != nil {
		return t.DuplicateDetect
	}
	return nil
}

// GetDynamicArp returns the value of the DynamicArp struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp. If the receiver or the field DynamicArp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp) GetDynamicArp() *NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DynamicArp {
	if t != nil && t.DynamicArp != nil {
		return t.DynamicArp
	}
	return nil
}

// GetEvpn returns the value of the Evpn struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp. If the receiver or the field Evpn is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp) GetEvpn() *NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_Evpn {
	if t != nil && t.Evpn != nil {
		return t.Evpn
	}
	return nil
}

// GetStaticArp returns the value of the StaticArp struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp. If the receiver or the field StaticArp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp) GetStaticArp() *NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_StaticArp {
	if t != nil && t.StaticArp != nil {
		return t.StaticArp
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAgeTime retrieves the value of the leaf AgeTime from the NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AgeTime is set, it can
// safely use t.GetAgeTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AgeTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp) GetAgeTime() NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_AgeTime_Union {
	if t == nil || t.AgeTime == nil {
		return NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_AgeTime_Enum_never
	}
	return t.AgeTime
}

// GetDynamicPopulate retrieves the value of the leaf DynamicPopulate from the NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DynamicPopulate is set, it can
// safely use t.GetDynamicPopulate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DynamicPopulate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp) GetDynamicPopulate() bool {
	if t == nil || t.DynamicPopulate == nil {
		return false
	}
	return *t.DynamicPopulate
}

// GetSendRefresh retrieves the value of the leaf SendRefresh from the NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SendRefresh is set, it can
// safely use t.GetSendRefresh() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SendRefresh == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp) GetSendRefresh() NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_SendRefresh_Union {
	if t == nil || t.SendRefresh == nil {
		return NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_SendRefresh_Enum_never
	}
	return t.SendRefresh
}

// GetTableSize retrieves the value of the leaf TableSize from the NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TableSize is set, it can
// safely use t.GetTableSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TableSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp) GetTableSize() int32 {
	if t == nil || t.TableSize == nil {
		return 250
	}
	return *t.TableSize
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.AgeTime == nil {
		t.AgeTime = NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_AgeTime_Enum_never
	}
	if t.DynamicPopulate == nil {
		var v bool = false
		t.DynamicPopulate = &v
	}
	if t.SendRefresh == nil {
		t.SendRefresh = NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_SendRefresh_Enum_never
	}
	if t.TableSize == nil {
		var v int32 = 250
		t.TableSize = &v
	}
	t.DuplicateDetect.PopulateDefaults()
	t.DynamicArp.PopulateDefaults()
	t.Evpn.PopulateDefaults()
	t.StaticArp.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DuplicateDetect represents the /nokia-conf/configure/groups/group/service/vpls/proxy-arp/duplicate-detect YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DuplicateDetect struct {
	AntiSpoofMac    *string                                                                                   `path:"anti-spoof-mac" module:"nokia-conf"`
	HoldDownTime    NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DuplicateDetect_HoldDownTime_Union `path:"hold-down-time" module:"nokia-conf"`
	NumMoves        *int32                                                                                    `path:"num-moves" module:"nokia-conf"`
	StaticBlackhole *bool                                                                                     `path:"static-blackhole" module:"nokia-conf"`
	Window          *int32                                                                                    `path:"window" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DuplicateDetect implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DuplicateDetect) IsYANGGoStruct() {}

// GetAntiSpoofMac retrieves the value of the leaf AntiSpoofMac from the NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DuplicateDetect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AntiSpoofMac is set, it can
// safely use t.GetAntiSpoofMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AntiSpoofMac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DuplicateDetect) GetAntiSpoofMac() string {
	if t == nil || t.AntiSpoofMac == nil {
		return ""
	}
	return *t.AntiSpoofMac
}

// GetHoldDownTime retrieves the value of the leaf HoldDownTime from the NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DuplicateDetect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldDownTime is set, it can
// safely use t.GetHoldDownTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldDownTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DuplicateDetect) GetHoldDownTime() NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DuplicateDetect_HoldDownTime_Union {
	if t == nil || t.HoldDownTime == nil {
		return UnionUint32(9)
	}
	return t.HoldDownTime
}

// GetNumMoves retrieves the value of the leaf NumMoves from the NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DuplicateDetect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NumMoves is set, it can
// safely use t.GetNumMoves() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NumMoves == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DuplicateDetect) GetNumMoves() int32 {
	if t == nil || t.NumMoves == nil {
		return 5
	}
	return *t.NumMoves
}

// GetStaticBlackhole retrieves the value of the leaf StaticBlackhole from the NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DuplicateDetect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StaticBlackhole is set, it can
// safely use t.GetStaticBlackhole() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StaticBlackhole == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DuplicateDetect) GetStaticBlackhole() bool {
	if t == nil || t.StaticBlackhole == nil {
		return false
	}
	return *t.StaticBlackhole
}

// GetWindow retrieves the value of the leaf Window from the NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DuplicateDetect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Window is set, it can
// safely use t.GetWindow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Window == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DuplicateDetect) GetWindow() int32 {
	if t == nil || t.Window == nil {
		return 3
	}
	return *t.Window
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DuplicateDetect
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DuplicateDetect) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HoldDownTime == nil {
		t.HoldDownTime = UnionUint32(9)
	}
	if t.NumMoves == nil {
		var v int32 = 5
		t.NumMoves = &v
	}
	if t.StaticBlackhole == nil {
		var v bool = false
		t.StaticBlackhole = &v
	}
	if t.Window == nil {
		var v int32 = 3
		t.Window = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DuplicateDetect) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DuplicateDetect"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DuplicateDetect) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DuplicateDetect) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DuplicateDetect.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DuplicateDetect) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DynamicArp represents the /nokia-conf/configure/groups/group/service/vpls/proxy-arp/dynamic-arp YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DynamicArp struct {
	IpAddress map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DynamicArp_IpAddress `path:"ip-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DynamicArp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DynamicArp) IsYANGGoStruct() {}

// NewIpAddress creates a new entry in the IpAddress list of the
// NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DynamicArp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DynamicArp) NewIpAddress(Ipv4Address string) (*NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DynamicArp_IpAddress, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IpAddress == nil {
		t.IpAddress = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DynamicArp_IpAddress)
	}

	key := Ipv4Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.IpAddress[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list IpAddress", key)
	}

	t.IpAddress[key] = &NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DynamicArp_IpAddress{
		Ipv4Address: &Ipv4Address,
	}

	return t.IpAddress[key], nil
}

// RenameIpAddress renames an entry in the list IpAddress within
// the NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DynamicArp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DynamicArp) RenameIpAddress(oldK, newK string) error {
	if _, ok := t.IpAddress[newK]; ok {
		return fmt.Errorf("key %v already exists in IpAddress", newK)
	}

	e, ok := t.IpAddress[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in IpAddress", oldK)
	}
	e.Ipv4Address = &newK

	t.IpAddress[newK] = e
	delete(t.IpAddress, oldK)
	return nil
}

// GetOrCreateIpAddress retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DynamicArp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DynamicArp) GetOrCreateIpAddress(Ipv4Address string) *NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DynamicArp_IpAddress {

	key := Ipv4Address

	if v, ok := t.IpAddress[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpAddress(Ipv4Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpAddress got unexpected error: %v", err))
	}
	return v
}

// GetIpAddress retrieves the value with the specified key from
// the IpAddress map field of NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DynamicArp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DynamicArp) GetIpAddress(Ipv4Address string) *NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DynamicArp_IpAddress {

	if t == nil {
		return nil
	}

	key := Ipv4Address

	if lm, ok := t.IpAddress[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpAddress deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DynamicArp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DynamicArp) DeleteIpAddress(Ipv4Address string) {
	key := Ipv4Address

	delete(t.IpAddress, key)
}

// AppendIpAddress appends the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DynamicArp_IpAddress struct to the
// list IpAddress of NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DynamicArp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DynamicArp_IpAddress already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DynamicArp) AppendIpAddress(v *NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DynamicArp_IpAddress) error {
	if v.Ipv4Address == nil {
		return fmt.Errorf("invalid nil key received for Ipv4Address")
	}

	key := *v.Ipv4Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IpAddress == nil {
		t.IpAddress = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DynamicArp_IpAddress)
	}

	if _, ok := t.IpAddress[key]; ok {
		return fmt.Errorf("duplicate key for list IpAddress %v", key)
	}

	t.IpAddress[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DynamicArp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DynamicArp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.IpAddress {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DynamicArp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DynamicArp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DynamicArp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DynamicArp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DynamicArp.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DynamicArp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DynamicArp_IpAddress represents the /nokia-conf/configure/groups/group/service/vpls/proxy-arp/dynamic-arp/ip-address YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DynamicArp_IpAddress struct {
	Ipv4Address      *string `path:"ipv4-address" module:"nokia-conf"`
	MacList          *string `path:"mac-list" module:"nokia-conf"`
	ResolveRetryTime *int32  `path:"resolve-retry-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DynamicArp_IpAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DynamicArp_IpAddress) IsYANGGoStruct() {
}

// GetIpv4Address retrieves the value of the leaf Ipv4Address from the NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DynamicArp_IpAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Address is set, it can
// safely use t.GetIpv4Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DynamicArp_IpAddress) GetIpv4Address() string {
	if t == nil || t.Ipv4Address == nil {
		return ""
	}
	return *t.Ipv4Address
}

// GetMacList retrieves the value of the leaf MacList from the NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DynamicArp_IpAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacList is set, it can
// safely use t.GetMacList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DynamicArp_IpAddress) GetMacList() string {
	if t == nil || t.MacList == nil {
		return ""
	}
	return *t.MacList
}

// GetResolveRetryTime retrieves the value of the leaf ResolveRetryTime from the NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DynamicArp_IpAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ResolveRetryTime is set, it can
// safely use t.GetResolveRetryTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ResolveRetryTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DynamicArp_IpAddress) GetResolveRetryTime() int32 {
	if t == nil || t.ResolveRetryTime == nil {
		return 5
	}
	return *t.ResolveRetryTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DynamicArp_IpAddress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DynamicArp_IpAddress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ResolveRetryTime == nil {
		var v int32 = 5
		t.ResolveRetryTime = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DynamicArp_IpAddress struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DynamicArp_IpAddress) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv4Address == nil {
		return nil, fmt.Errorf("nil value for key Ipv4Address")
	}

	return map[string]interface{}{
		"ipv4-address": *t.Ipv4Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DynamicArp_IpAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DynamicArp_IpAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DynamicArp_IpAddress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DynamicArp_IpAddress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DynamicArp_IpAddress.
func (*NokiaConf_Configure_Groups_Group_Service_Vpls_ProxyArp_DynamicArp_IpAddress) ΛBelongingModule() string {
	return "nokia-conf"
}
