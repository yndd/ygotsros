/*
Package ygotsros is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /home/hans/go/pkg/mod/github.com/openconfig/ygot@v0.20.0/genutil/names.go
using the following YANG input files:
	- nokia/YANG/nokia-combined/nokia-conf.yang
Imported modules were sourced from:
	- nokia/YANG/...
*/
package ygotsros

import (
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_WlanGw represents the /nokia-conf/configure/groups/group/router/radius/proxy/wlan-gw YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_WlanGw struct {
	Address     *string `path:"address" module:"nokia-conf"`
	Ipv6Address *string `path:"ipv6-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_WlanGw implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_WlanGw) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_WlanGw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_WlanGw) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetIpv6Address retrieves the value of the leaf Ipv6Address from the NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_WlanGw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Address is set, it can
// safely use t.GetIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_WlanGw) GetIpv6Address() string {
	if t == nil || t.Ipv6Address == nil {
		return ""
	}
	return *t.Ipv6Address
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_WlanGw
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_WlanGw) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_WlanGw) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_WlanGw"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_WlanGw) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_WlanGw) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_WlanGw.
func (*NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_WlanGw) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Radius_Server represents the /nokia-conf/configure/groups/group/router/radius/server YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Radius_Server struct {
	AcceptCoa            *bool   `path:"accept-coa" module:"nokia-conf"`
	AcctPort             *int32  `path:"acct-port" module:"nokia-conf"`
	Address              *string `path:"address" module:"nokia-conf"`
	AuthPort             *int32  `path:"auth-port" module:"nokia-conf"`
	Description          *string `path:"description" module:"nokia-conf"`
	Name                 *string `path:"name" module:"nokia-conf"`
	PendingRequestsLimit *uint32 `path:"pending-requests-limit" module:"nokia-conf"`
	PythonPolicy         *string `path:"python-policy" module:"nokia-conf"`
	Secret               *string `path:"secret" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Radius_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Radius_Server) IsYANGGoStruct() {}

// GetAcceptCoa retrieves the value of the leaf AcceptCoa from the NokiaConf_Configure_Groups_Group_Router_Radius_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AcceptCoa is set, it can
// safely use t.GetAcceptCoa() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AcceptCoa == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Server) GetAcceptCoa() bool {
	if t == nil || t.AcceptCoa == nil {
		return false
	}
	return *t.AcceptCoa
}

// GetAcctPort retrieves the value of the leaf AcctPort from the NokiaConf_Configure_Groups_Group_Router_Radius_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AcctPort is set, it can
// safely use t.GetAcctPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AcctPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Server) GetAcctPort() int32 {
	if t == nil || t.AcctPort == nil {
		return 1813
	}
	return *t.AcctPort
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Router_Radius_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Server) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetAuthPort retrieves the value of the leaf AuthPort from the NokiaConf_Configure_Groups_Group_Router_Radius_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthPort is set, it can
// safely use t.GetAuthPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Server) GetAuthPort() int32 {
	if t == nil || t.AuthPort == nil {
		return 1812
	}
	return *t.AuthPort
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Router_Radius_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Server) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Router_Radius_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Server) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPendingRequestsLimit retrieves the value of the leaf PendingRequestsLimit from the NokiaConf_Configure_Groups_Group_Router_Radius_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PendingRequestsLimit is set, it can
// safely use t.GetPendingRequestsLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PendingRequestsLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Server) GetPendingRequestsLimit() uint32 {
	if t == nil || t.PendingRequestsLimit == nil {
		return 4096
	}
	return *t.PendingRequestsLimit
}

// GetPythonPolicy retrieves the value of the leaf PythonPolicy from the NokiaConf_Configure_Groups_Group_Router_Radius_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PythonPolicy is set, it can
// safely use t.GetPythonPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PythonPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Server) GetPythonPolicy() string {
	if t == nil || t.PythonPolicy == nil {
		return ""
	}
	return *t.PythonPolicy
}

// GetSecret retrieves the value of the leaf Secret from the NokiaConf_Configure_Groups_Group_Router_Radius_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Secret is set, it can
// safely use t.GetSecret() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Secret == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Server) GetSecret() string {
	if t == nil || t.Secret == nil {
		return ""
	}
	return *t.Secret
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Radius_Server
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Server) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AcceptCoa == nil {
		var v bool = false
		t.AcceptCoa = &v
	}
	if t.AcctPort == nil {
		var v int32 = 1813
		t.AcctPort = &v
	}
	if t.AuthPort == nil {
		var v int32 = 1812
		t.AuthPort = &v
	}
	if t.PendingRequestsLimit == nil {
		var v uint32 = 4096
		t.PendingRequestsLimit = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Radius_Server struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Server) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Radius_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Server) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Server) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Radius_Server.
func (*NokiaConf_Configure_Groups_Group_Router_Radius_Server) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Reassembly represents the /nokia-conf/configure/groups/group/router/reassembly YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Reassembly struct {
	NatGroup      *uint32 `path:"nat-group" module:"nokia-conf"`
	ToBaseNetwork *bool   `path:"to-base-network" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Reassembly implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Reassembly) IsYANGGoStruct() {}

// GetNatGroup retrieves the value of the leaf NatGroup from the NokiaConf_Configure_Groups_Group_Router_Reassembly
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NatGroup is set, it can
// safely use t.GetNatGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NatGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Reassembly) GetNatGroup() uint32 {
	if t == nil || t.NatGroup == nil {
		return 0
	}
	return *t.NatGroup
}

// GetToBaseNetwork retrieves the value of the leaf ToBaseNetwork from the NokiaConf_Configure_Groups_Group_Router_Reassembly
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ToBaseNetwork is set, it can
// safely use t.GetToBaseNetwork() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ToBaseNetwork == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Reassembly) GetToBaseNetwork() bool {
	if t == nil || t.ToBaseNetwork == nil {
		return false
	}
	return *t.ToBaseNetwork
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Reassembly
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Reassembly) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ToBaseNetwork == nil {
		var v bool = false
		t.ToBaseNetwork = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Reassembly) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Reassembly"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Reassembly) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Reassembly) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Reassembly.
func (*NokiaConf_Configure_Groups_Group_Router_Reassembly) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_RibApi represents the /nokia-conf/configure/groups/group/router/rib-api YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_RibApi struct {
	Mpls *NokiaConf_Configure_Groups_Group_Router_RibApi_Mpls `path:"mpls" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_RibApi implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_RibApi) IsYANGGoStruct() {}

// GetOrCreateMpls retrieves the value of the Mpls field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_RibApi) GetOrCreateMpls() *NokiaConf_Configure_Groups_Group_Router_RibApi_Mpls {
	if t.Mpls != nil {
		return t.Mpls
	}
	t.Mpls = &NokiaConf_Configure_Groups_Group_Router_RibApi_Mpls{}
	return t.Mpls
}

// GetMpls returns the value of the Mpls struct pointer
// from NokiaConf_Configure_Groups_Group_Router_RibApi. If the receiver or the field Mpls is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_RibApi) GetMpls() *NokiaConf_Configure_Groups_Group_Router_RibApi_Mpls {
	if t != nil && t.Mpls != nil {
		return t.Mpls
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_RibApi
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_RibApi) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Mpls.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_RibApi) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_RibApi"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_RibApi) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_RibApi) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_RibApi.
func (*NokiaConf_Configure_Groups_Group_Router_RibApi) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_RibApi_Mpls represents the /nokia-conf/configure/groups/group/router/rib-api/mpls YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_RibApi_Mpls struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	LabelName  *string                     `path:"label-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_RibApi_Mpls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_RibApi_Mpls) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_RibApi_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_RibApi_Mpls) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetLabelName retrieves the value of the leaf LabelName from the NokiaConf_Configure_Groups_Group_Router_RibApi_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelName is set, it can
// safely use t.GetLabelName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_RibApi_Mpls) GetLabelName() string {
	if t == nil || t.LabelName == nil {
		return ""
	}
	return *t.LabelName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_RibApi_Mpls
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_RibApi_Mpls) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_RibApi_Mpls) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_RibApi_Mpls"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_RibApi_Mpls) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_RibApi_Mpls) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_RibApi_Mpls.
func (*NokiaConf_Configure_Groups_Group_Router_RibApi_Mpls) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Rip represents the /nokia-conf/configure/groups/group/router/rip YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Rip struct {
	AdminState         E_NokiaTypesSros_AdminState                                   `path:"admin-state" module:"nokia-conf"`
	AuthenticationKey  *string                                                       `path:"authentication-key" module:"nokia-conf"`
	AuthenticationType E_NokiaTypesRip_AuthType                                      `path:"authentication-type" module:"nokia-conf"`
	BfdLiveness        *bool                                                         `path:"bfd-liveness" module:"nokia-conf"`
	CheckZero          *bool                                                         `path:"check-zero" module:"nokia-conf"`
	Description        *string                                                       `path:"description" module:"nokia-conf"`
	ExportLimit        *NokiaConf_Configure_Groups_Group_Router_Rip_ExportLimit      `path:"export-limit" module:"nokia-conf" yangPresence:"true"`
	ExportPolicy       []string                                                      `path:"export-policy" module:"nokia-conf"`
	Group              map[string]*NokiaConf_Configure_Groups_Group_Router_Rip_Group `path:"group" module:"nokia-conf"`
	ImportPolicy       []string                                                      `path:"import-policy" module:"nokia-conf"`
	MessageSize        *uint32                                                       `path:"message-size" module:"nokia-conf"`
	MetricIn           *uint32                                                       `path:"metric-in" module:"nokia-conf"`
	MetricOut          *uint32                                                       `path:"metric-out" module:"nokia-conf"`
	Preference         *uint32                                                       `path:"preference" module:"nokia-conf"`
	Receive            E_NokiaTypesRip_Receive                                       `path:"receive" module:"nokia-conf"`
	Send               E_NokiaConf_Configure_Groups_Group_Router_Rip_Send            `path:"send" module:"nokia-conf"`
	SplitHorizon       *bool                                                         `path:"split-horizon" module:"nokia-conf"`
	Timers             *NokiaConf_Configure_Groups_Group_Router_Rip_Timers           `path:"timers" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Rip implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Rip) IsYANGGoStruct() {}

// NewGroup creates a new entry in the Group list of the
// NokiaConf_Configure_Groups_Group_Router_Rip struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip) NewGroup(GroupName string) (*NokiaConf_Configure_Groups_Group_Router_Rip_Group, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Rip_Group)
	}

	key := GroupName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &NokiaConf_Configure_Groups_Group_Router_Rip_Group{
		GroupName: &GroupName,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the NokiaConf_Configure_Groups_Group_Router_Rip struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip) RenameGroup(oldK, newK string) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.GroupName = &newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Rip. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip) GetOrCreateGroup(GroupName string) *NokiaConf_Configure_Groups_Group_Router_Rip_Group {

	key := GroupName

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(GroupName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of NokiaConf_Configure_Groups_Group_Router_Rip. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip) GetGroup(GroupName string) *NokiaConf_Configure_Groups_Group_Router_Rip_Group {

	if t == nil {
		return nil
	}

	key := GroupName

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Rip. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip) DeleteGroup(GroupName string) {
	key := GroupName

	delete(t.Group, key)
}

// AppendGroup appends the supplied NokiaConf_Configure_Groups_Group_Router_Rip_Group struct to the
// list Group of NokiaConf_Configure_Groups_Group_Router_Rip. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Rip_Group already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip) AppendGroup(v *NokiaConf_Configure_Groups_Group_Router_Rip_Group) error {
	if v.GroupName == nil {
		return fmt.Errorf("invalid nil key received for GroupName")
	}

	key := *v.GroupName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Rip_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// GetOrCreateExportLimit retrieves the value of the ExportLimit field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip) GetOrCreateExportLimit() *NokiaConf_Configure_Groups_Group_Router_Rip_ExportLimit {
	if t.ExportLimit != nil {
		return t.ExportLimit
	}
	t.ExportLimit = &NokiaConf_Configure_Groups_Group_Router_Rip_ExportLimit{}
	return t.ExportLimit
}

// GetOrCreateTimers retrieves the value of the Timers field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip) GetOrCreateTimers() *NokiaConf_Configure_Groups_Group_Router_Rip_Timers {
	if t.Timers != nil {
		return t.Timers
	}
	t.Timers = &NokiaConf_Configure_Groups_Group_Router_Rip_Timers{}
	return t.Timers
}

// GetExportLimit returns the value of the ExportLimit struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Rip. If the receiver or the field ExportLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip) GetExportLimit() *NokiaConf_Configure_Groups_Group_Router_Rip_ExportLimit {
	if t != nil && t.ExportLimit != nil {
		return t.ExportLimit
	}
	return nil
}

// GetTimers returns the value of the Timers struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Rip. If the receiver or the field Timers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip) GetTimers() *NokiaConf_Configure_Groups_Group_Router_Rip_Timers {
	if t != nil && t.Timers != nil {
		return t.Timers
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Rip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetAuthenticationKey retrieves the value of the leaf AuthenticationKey from the NokiaConf_Configure_Groups_Group_Router_Rip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKey is set, it can
// safely use t.GetAuthenticationKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip) GetAuthenticationKey() string {
	if t == nil || t.AuthenticationKey == nil {
		return ""
	}
	return *t.AuthenticationKey
}

// GetAuthenticationType retrieves the value of the leaf AuthenticationType from the NokiaConf_Configure_Groups_Group_Router_Rip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationType is set, it can
// safely use t.GetAuthenticationType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip) GetAuthenticationType() E_NokiaTypesRip_AuthType {
	if t == nil || t.AuthenticationType == 0 {
		return NokiaTypesRip_AuthType_none
	}
	return t.AuthenticationType
}

// GetBfdLiveness retrieves the value of the leaf BfdLiveness from the NokiaConf_Configure_Groups_Group_Router_Rip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdLiveness is set, it can
// safely use t.GetBfdLiveness() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdLiveness == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip) GetBfdLiveness() bool {
	if t == nil || t.BfdLiveness == nil {
		return false
	}
	return *t.BfdLiveness
}

// GetCheckZero retrieves the value of the leaf CheckZero from the NokiaConf_Configure_Groups_Group_Router_Rip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CheckZero is set, it can
// safely use t.GetCheckZero() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CheckZero == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip) GetCheckZero() bool {
	if t == nil || t.CheckZero == nil {
		return false
	}
	return *t.CheckZero
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Router_Rip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the NokiaConf_Configure_Groups_Group_Router_Rip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPolicy is set, it can
// safely use t.GetExportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip) GetExportPolicy() []string {
	if t == nil || t.ExportPolicy == nil {
		return nil
	}
	return t.ExportPolicy
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Groups_Group_Router_Rip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip) GetImportPolicy() []string {
	if t == nil || t.ImportPolicy == nil {
		return nil
	}
	return t.ImportPolicy
}

// GetMessageSize retrieves the value of the leaf MessageSize from the NokiaConf_Configure_Groups_Group_Router_Rip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MessageSize is set, it can
// safely use t.GetMessageSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MessageSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip) GetMessageSize() uint32 {
	if t == nil || t.MessageSize == nil {
		return 25
	}
	return *t.MessageSize
}

// GetMetricIn retrieves the value of the leaf MetricIn from the NokiaConf_Configure_Groups_Group_Router_Rip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MetricIn is set, it can
// safely use t.GetMetricIn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MetricIn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip) GetMetricIn() uint32 {
	if t == nil || t.MetricIn == nil {
		return 1
	}
	return *t.MetricIn
}

// GetMetricOut retrieves the value of the leaf MetricOut from the NokiaConf_Configure_Groups_Group_Router_Rip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MetricOut is set, it can
// safely use t.GetMetricOut() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MetricOut == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip) GetMetricOut() uint32 {
	if t == nil || t.MetricOut == nil {
		return 1
	}
	return *t.MetricOut
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Groups_Group_Router_Rip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 100
	}
	return *t.Preference
}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Groups_Group_Router_Rip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip) GetReceive() E_NokiaTypesRip_Receive {
	if t == nil || t.Receive == 0 {
		return NokiaTypesRip_Receive_both
	}
	return t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Groups_Group_Router_Rip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip) GetSend() E_NokiaConf_Configure_Groups_Group_Router_Rip_Send {
	if t == nil || t.Send == 0 {
		return NokiaConf_Configure_Groups_Group_Router_Rip_Send_broadcast
	}
	return t.Send
}

// GetSplitHorizon retrieves the value of the leaf SplitHorizon from the NokiaConf_Configure_Groups_Group_Router_Rip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SplitHorizon is set, it can
// safely use t.GetSplitHorizon() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SplitHorizon == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip) GetSplitHorizon() bool {
	if t == nil || t.SplitHorizon == nil {
		return true
	}
	return *t.SplitHorizon
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Rip
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.AuthenticationType == 0 {
		t.AuthenticationType = NokiaTypesRip_AuthType_none
	}
	if t.BfdLiveness == nil {
		var v bool = false
		t.BfdLiveness = &v
	}
	if t.CheckZero == nil {
		var v bool = false
		t.CheckZero = &v
	}
	if t.MessageSize == nil {
		var v uint32 = 25
		t.MessageSize = &v
	}
	if t.MetricIn == nil {
		var v uint32 = 1
		t.MetricIn = &v
	}
	if t.MetricOut == nil {
		var v uint32 = 1
		t.MetricOut = &v
	}
	if t.Preference == nil {
		var v uint32 = 100
		t.Preference = &v
	}
	if t.Receive == 0 {
		t.Receive = NokiaTypesRip_Receive_both
	}
	if t.Send == 0 {
		t.Send = NokiaConf_Configure_Groups_Group_Router_Rip_Send_broadcast
	}
	if t.SplitHorizon == nil {
		var v bool = true
		t.SplitHorizon = &v
	}
	t.ExportLimit.PopulateDefaults()
	t.Timers.PopulateDefaults()
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Rip"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Rip.
func (*NokiaConf_Configure_Groups_Group_Router_Rip) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Rip_ExportLimit represents the /nokia-conf/configure/groups/group/router/rip/export-limit YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Rip_ExportLimit struct {
	LogPercent *uint32 `path:"log-percent" module:"nokia-conf"`
	Number     *uint32 `path:"number" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Rip_ExportLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Rip_ExportLimit) IsYANGGoStruct() {}

// GetLogPercent retrieves the value of the leaf LogPercent from the NokiaConf_Configure_Groups_Group_Router_Rip_ExportLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogPercent is set, it can
// safely use t.GetLogPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogPercent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_ExportLimit) GetLogPercent() uint32 {
	if t == nil || t.LogPercent == nil {
		return 0
	}
	return *t.LogPercent
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Groups_Group_Router_Rip_ExportLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_ExportLimit) GetNumber() uint32 {
	if t == nil || t.Number == nil {
		return 0
	}
	return *t.Number
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Rip_ExportLimit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_ExportLimit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_ExportLimit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Rip_ExportLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_ExportLimit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_ExportLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Rip_ExportLimit.
func (*NokiaConf_Configure_Groups_Group_Router_Rip_ExportLimit) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Rip_Group represents the /nokia-conf/configure/groups/group/router/rip/group YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Rip_Group struct {
	AdminState         E_NokiaTypesSros_AdminState                                            `path:"admin-state" module:"nokia-conf"`
	AuthenticationKey  *string                                                                `path:"authentication-key" module:"nokia-conf"`
	AuthenticationType E_NokiaTypesRip_AuthType                                               `path:"authentication-type" module:"nokia-conf"`
	BfdLiveness        *bool                                                                  `path:"bfd-liveness" module:"nokia-conf"`
	CheckZero          *bool                                                                  `path:"check-zero" module:"nokia-conf"`
	Description        *string                                                                `path:"description" module:"nokia-conf"`
	ExportPolicy       []string                                                               `path:"export-policy" module:"nokia-conf"`
	GroupName          *string                                                                `path:"group-name" module:"nokia-conf"`
	ImportPolicy       []string                                                               `path:"import-policy" module:"nokia-conf"`
	MessageSize        *uint32                                                                `path:"message-size" module:"nokia-conf"`
	MetricIn           *uint32                                                                `path:"metric-in" module:"nokia-conf"`
	MetricOut          *uint32                                                                `path:"metric-out" module:"nokia-conf"`
	Neighbor           map[string]*NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor `path:"neighbor" module:"nokia-conf"`
	Preference         *uint32                                                                `path:"preference" module:"nokia-conf"`
	Receive            E_NokiaTypesRip_Receive                                                `path:"receive" module:"nokia-conf"`
	Send               E_NokiaConf_Configure_Groups_Group_Router_Rip_Group_Send               `path:"send" module:"nokia-conf"`
	SplitHorizon       *bool                                                                  `path:"split-horizon" module:"nokia-conf"`
	Timers             *NokiaConf_Configure_Groups_Group_Router_Rip_Group_Timers              `path:"timers" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Rip_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Rip_Group) IsYANGGoStruct() {}

// NewNeighbor creates a new entry in the Neighbor list of the
// NokiaConf_Configure_Groups_Group_Router_Rip_Group struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group) NewNeighbor(InterfaceName string) (*NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor{
		InterfaceName: &InterfaceName,
	}

	return t.Neighbor[key], nil
}

// RenameNeighbor renames an entry in the list Neighbor within
// the NokiaConf_Configure_Groups_Group_Router_Rip_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group) RenameNeighbor(oldK, newK string) error {
	if _, ok := t.Neighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in Neighbor", newK)
	}

	e, ok := t.Neighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Neighbor", oldK)
	}
	e.InterfaceName = &newK

	t.Neighbor[newK] = e
	delete(t.Neighbor, oldK)
	return nil
}

// GetOrCreateNeighbor retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Rip_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group) GetOrCreateNeighbor(InterfaceName string) *NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor {

	key := InterfaceName

	if v, ok := t.Neighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNeighbor(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetNeighbor retrieves the value with the specified key from
// the Neighbor map field of NokiaConf_Configure_Groups_Group_Router_Rip_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group) GetNeighbor(InterfaceName string) *NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor {

	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.Neighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteNeighbor deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Rip_Group. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group) DeleteNeighbor(InterfaceName string) {
	key := InterfaceName

	delete(t.Neighbor, key)
}

// AppendNeighbor appends the supplied NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor struct to the
// list Neighbor of NokiaConf_Configure_Groups_Group_Router_Rip_Group. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group) AppendNeighbor(v *NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor)
	}

	if _, ok := t.Neighbor[key]; ok {
		return fmt.Errorf("duplicate key for list Neighbor %v", key)
	}

	t.Neighbor[key] = v
	return nil
}

// GetOrCreateTimers retrieves the value of the Timers field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group) GetOrCreateTimers() *NokiaConf_Configure_Groups_Group_Router_Rip_Group_Timers {
	if t.Timers != nil {
		return t.Timers
	}
	t.Timers = &NokiaConf_Configure_Groups_Group_Router_Rip_Group_Timers{}
	return t.Timers
}

// GetTimers returns the value of the Timers struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Rip_Group. If the receiver or the field Timers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group) GetTimers() *NokiaConf_Configure_Groups_Group_Router_Rip_Group_Timers {
	if t != nil && t.Timers != nil {
		return t.Timers
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Rip_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetAuthenticationKey retrieves the value of the leaf AuthenticationKey from the NokiaConf_Configure_Groups_Group_Router_Rip_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKey is set, it can
// safely use t.GetAuthenticationKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group) GetAuthenticationKey() string {
	if t == nil || t.AuthenticationKey == nil {
		return ""
	}
	return *t.AuthenticationKey
}

// GetAuthenticationType retrieves the value of the leaf AuthenticationType from the NokiaConf_Configure_Groups_Group_Router_Rip_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationType is set, it can
// safely use t.GetAuthenticationType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group) GetAuthenticationType() E_NokiaTypesRip_AuthType {
	if t == nil || t.AuthenticationType == 0 {
		return 0
	}
	return t.AuthenticationType
}

// GetBfdLiveness retrieves the value of the leaf BfdLiveness from the NokiaConf_Configure_Groups_Group_Router_Rip_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdLiveness is set, it can
// safely use t.GetBfdLiveness() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdLiveness == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group) GetBfdLiveness() bool {
	if t == nil || t.BfdLiveness == nil {
		return false
	}
	return *t.BfdLiveness
}

// GetCheckZero retrieves the value of the leaf CheckZero from the NokiaConf_Configure_Groups_Group_Router_Rip_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CheckZero is set, it can
// safely use t.GetCheckZero() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CheckZero == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group) GetCheckZero() bool {
	if t == nil || t.CheckZero == nil {
		return false
	}
	return *t.CheckZero
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Router_Rip_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the NokiaConf_Configure_Groups_Group_Router_Rip_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPolicy is set, it can
// safely use t.GetExportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group) GetExportPolicy() []string {
	if t == nil || t.ExportPolicy == nil {
		return nil
	}
	return t.ExportPolicy
}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Groups_Group_Router_Rip_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Groups_Group_Router_Rip_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group) GetImportPolicy() []string {
	if t == nil || t.ImportPolicy == nil {
		return nil
	}
	return t.ImportPolicy
}

// GetMessageSize retrieves the value of the leaf MessageSize from the NokiaConf_Configure_Groups_Group_Router_Rip_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MessageSize is set, it can
// safely use t.GetMessageSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MessageSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group) GetMessageSize() uint32 {
	if t == nil || t.MessageSize == nil {
		return 0
	}
	return *t.MessageSize
}

// GetMetricIn retrieves the value of the leaf MetricIn from the NokiaConf_Configure_Groups_Group_Router_Rip_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MetricIn is set, it can
// safely use t.GetMetricIn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MetricIn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group) GetMetricIn() uint32 {
	if t == nil || t.MetricIn == nil {
		return 0
	}
	return *t.MetricIn
}

// GetMetricOut retrieves the value of the leaf MetricOut from the NokiaConf_Configure_Groups_Group_Router_Rip_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MetricOut is set, it can
// safely use t.GetMetricOut() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MetricOut == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group) GetMetricOut() uint32 {
	if t == nil || t.MetricOut == nil {
		return 0
	}
	return *t.MetricOut
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Groups_Group_Router_Rip_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 0
	}
	return *t.Preference
}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Groups_Group_Router_Rip_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group) GetReceive() E_NokiaTypesRip_Receive {
	if t == nil || t.Receive == 0 {
		return 0
	}
	return t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Groups_Group_Router_Rip_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group) GetSend() E_NokiaConf_Configure_Groups_Group_Router_Rip_Group_Send {
	if t == nil || t.Send == 0 {
		return 0
	}
	return t.Send
}

// GetSplitHorizon retrieves the value of the leaf SplitHorizon from the NokiaConf_Configure_Groups_Group_Router_Rip_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SplitHorizon is set, it can
// safely use t.GetSplitHorizon() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SplitHorizon == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group) GetSplitHorizon() bool {
	if t == nil || t.SplitHorizon == nil {
		return false
	}
	return *t.SplitHorizon
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Rip_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	t.Timers.PopulateDefaults()
	for _, e := range t.Neighbor {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Rip_Group struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupName == nil {
		return nil, fmt.Errorf("nil value for key GroupName")
	}

	return map[string]interface{}{
		"group-name": *t.GroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Rip_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Rip_Group.
func (*NokiaConf_Configure_Groups_Group_Router_Rip_Group) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor represents the /nokia-conf/configure/groups/group/router/rip/group/neighbor YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor struct {
	AdminState         E_NokiaTypesSros_AdminState                                                           `path:"admin-state" module:"nokia-conf"`
	AuthenticationKey  *string                                                                               `path:"authentication-key" module:"nokia-conf"`
	AuthenticationType E_NokiaTypesRip_AuthType                                                              `path:"authentication-type" module:"nokia-conf"`
	BfdLiveness        *bool                                                                                 `path:"bfd-liveness" module:"nokia-conf"`
	CheckZero          *bool                                                                                 `path:"check-zero" module:"nokia-conf"`
	Description        *string                                                                               `path:"description" module:"nokia-conf"`
	ExportPolicy       []string                                                                              `path:"export-policy" module:"nokia-conf"`
	ImportPolicy       []string                                                                              `path:"import-policy" module:"nokia-conf"`
	InterfaceName      *string                                                                               `path:"interface-name" module:"nokia-conf"`
	MessageSize        *uint32                                                                               `path:"message-size" module:"nokia-conf"`
	MetricIn           *uint32                                                                               `path:"metric-in" module:"nokia-conf"`
	MetricOut          *uint32                                                                               `path:"metric-out" module:"nokia-conf"`
	Preference         *uint32                                                                               `path:"preference" module:"nokia-conf"`
	Receive            E_NokiaTypesRip_Receive                                                               `path:"receive" module:"nokia-conf"`
	Send               E_NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor_Send                     `path:"send" module:"nokia-conf"`
	SplitHorizon       *bool                                                                                 `path:"split-horizon" module:"nokia-conf"`
	Timers             *NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor_Timers                    `path:"timers" module:"nokia-conf" yangPresence:"true"`
	UnicastAddress     map[string]*NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor_UnicastAddress `path:"unicast-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor) IsYANGGoStruct() {}

// NewUnicastAddress creates a new entry in the UnicastAddress list of the
// NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor) NewUnicastAddress(Address string) (*NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor_UnicastAddress, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnicastAddress == nil {
		t.UnicastAddress = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor_UnicastAddress)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnicastAddress[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnicastAddress", key)
	}

	t.UnicastAddress[key] = &NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor_UnicastAddress{
		Address: &Address,
	}

	return t.UnicastAddress[key], nil
}

// RenameUnicastAddress renames an entry in the list UnicastAddress within
// the NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor) RenameUnicastAddress(oldK, newK string) error {
	if _, ok := t.UnicastAddress[newK]; ok {
		return fmt.Errorf("key %v already exists in UnicastAddress", newK)
	}

	e, ok := t.UnicastAddress[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UnicastAddress", oldK)
	}
	e.Address = &newK

	t.UnicastAddress[newK] = e
	delete(t.UnicastAddress, oldK)
	return nil
}

// GetOrCreateUnicastAddress retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor) GetOrCreateUnicastAddress(Address string) *NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor_UnicastAddress {

	key := Address

	if v, ok := t.UnicastAddress[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnicastAddress(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnicastAddress got unexpected error: %v", err))
	}
	return v
}

// GetUnicastAddress retrieves the value with the specified key from
// the UnicastAddress map field of NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor) GetUnicastAddress(Address string) *NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor_UnicastAddress {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.UnicastAddress[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnicastAddress deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor) DeleteUnicastAddress(Address string) {
	key := Address

	delete(t.UnicastAddress, key)
}

// AppendUnicastAddress appends the supplied NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor_UnicastAddress struct to the
// list UnicastAddress of NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor_UnicastAddress already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor) AppendUnicastAddress(v *NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor_UnicastAddress) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnicastAddress == nil {
		t.UnicastAddress = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor_UnicastAddress)
	}

	if _, ok := t.UnicastAddress[key]; ok {
		return fmt.Errorf("duplicate key for list UnicastAddress %v", key)
	}

	t.UnicastAddress[key] = v
	return nil
}

// GetOrCreateTimers retrieves the value of the Timers field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor) GetOrCreateTimers() *NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor_Timers {
	if t.Timers != nil {
		return t.Timers
	}
	t.Timers = &NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor_Timers{}
	return t.Timers
}

// GetTimers returns the value of the Timers struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor. If the receiver or the field Timers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor) GetTimers() *NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor_Timers {
	if t != nil && t.Timers != nil {
		return t.Timers
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetAuthenticationKey retrieves the value of the leaf AuthenticationKey from the NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKey is set, it can
// safely use t.GetAuthenticationKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor) GetAuthenticationKey() string {
	if t == nil || t.AuthenticationKey == nil {
		return ""
	}
	return *t.AuthenticationKey
}

// GetAuthenticationType retrieves the value of the leaf AuthenticationType from the NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationType is set, it can
// safely use t.GetAuthenticationType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor) GetAuthenticationType() E_NokiaTypesRip_AuthType {
	if t == nil || t.AuthenticationType == 0 {
		return 0
	}
	return t.AuthenticationType
}

// GetBfdLiveness retrieves the value of the leaf BfdLiveness from the NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdLiveness is set, it can
// safely use t.GetBfdLiveness() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdLiveness == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor) GetBfdLiveness() bool {
	if t == nil || t.BfdLiveness == nil {
		return false
	}
	return *t.BfdLiveness
}

// GetCheckZero retrieves the value of the leaf CheckZero from the NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CheckZero is set, it can
// safely use t.GetCheckZero() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CheckZero == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor) GetCheckZero() bool {
	if t == nil || t.CheckZero == nil {
		return false
	}
	return *t.CheckZero
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPolicy is set, it can
// safely use t.GetExportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor) GetExportPolicy() []string {
	if t == nil || t.ExportPolicy == nil {
		return nil
	}
	return t.ExportPolicy
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor) GetImportPolicy() []string {
	if t == nil || t.ImportPolicy == nil {
		return nil
	}
	return t.ImportPolicy
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetMessageSize retrieves the value of the leaf MessageSize from the NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MessageSize is set, it can
// safely use t.GetMessageSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MessageSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor) GetMessageSize() uint32 {
	if t == nil || t.MessageSize == nil {
		return 0
	}
	return *t.MessageSize
}

// GetMetricIn retrieves the value of the leaf MetricIn from the NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MetricIn is set, it can
// safely use t.GetMetricIn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MetricIn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor) GetMetricIn() uint32 {
	if t == nil || t.MetricIn == nil {
		return 0
	}
	return *t.MetricIn
}

// GetMetricOut retrieves the value of the leaf MetricOut from the NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MetricOut is set, it can
// safely use t.GetMetricOut() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MetricOut == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor) GetMetricOut() uint32 {
	if t == nil || t.MetricOut == nil {
		return 0
	}
	return *t.MetricOut
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 0
	}
	return *t.Preference
}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor) GetReceive() E_NokiaTypesRip_Receive {
	if t == nil || t.Receive == 0 {
		return 0
	}
	return t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor) GetSend() E_NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor_Send {
	if t == nil || t.Send == 0 {
		return 0
	}
	return t.Send
}

// GetSplitHorizon retrieves the value of the leaf SplitHorizon from the NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SplitHorizon is set, it can
// safely use t.GetSplitHorizon() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SplitHorizon == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor) GetSplitHorizon() bool {
	if t == nil || t.SplitHorizon == nil {
		return false
	}
	return *t.SplitHorizon
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	t.Timers.PopulateDefaults()
	for _, e := range t.UnicastAddress {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor.
func (*NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor_Timers represents the /nokia-conf/configure/groups/group/router/rip/group/neighbor/timers YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor_Timers struct {
	Flush   *uint32 `path:"flush" module:"nokia-conf"`
	Timeout *uint32 `path:"timeout" module:"nokia-conf"`
	Update  *uint32 `path:"update" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor_Timers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor_Timers) IsYANGGoStruct() {}

// GetFlush retrieves the value of the leaf Flush from the NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Flush is set, it can
// safely use t.GetFlush() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Flush == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor_Timers) GetFlush() uint32 {
	if t == nil || t.Flush == nil {
		return 0
	}
	return *t.Flush
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor_Timers) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 0
	}
	return *t.Timeout
}

// GetUpdate retrieves the value of the leaf Update from the NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Update is set, it can
// safely use t.GetUpdate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Update == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor_Timers) GetUpdate() uint32 {
	if t == nil || t.Update == nil {
		return 0
	}
	return *t.Update
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor_Timers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor_Timers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor_Timers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor_Timers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor_Timers) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor_Timers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor_Timers.
func (*NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor_Timers) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor_UnicastAddress represents the /nokia-conf/configure/groups/group/router/rip/group/neighbor/unicast-address YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor_UnicastAddress struct {
	Address *string `path:"address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor_UnicastAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor_UnicastAddress) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor_UnicastAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor_UnicastAddress) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor_UnicastAddress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor_UnicastAddress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor_UnicastAddress struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor_UnicastAddress) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor_UnicastAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor_UnicastAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor_UnicastAddress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor_UnicastAddress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor_UnicastAddress.
func (*NokiaConf_Configure_Groups_Group_Router_Rip_Group_Neighbor_UnicastAddress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Rip_Group_Timers represents the /nokia-conf/configure/groups/group/router/rip/group/timers YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Rip_Group_Timers struct {
	Flush   *uint32 `path:"flush" module:"nokia-conf"`
	Timeout *uint32 `path:"timeout" module:"nokia-conf"`
	Update  *uint32 `path:"update" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Rip_Group_Timers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Rip_Group_Timers) IsYANGGoStruct() {}

// GetFlush retrieves the value of the leaf Flush from the NokiaConf_Configure_Groups_Group_Router_Rip_Group_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Flush is set, it can
// safely use t.GetFlush() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Flush == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group_Timers) GetFlush() uint32 {
	if t == nil || t.Flush == nil {
		return 0
	}
	return *t.Flush
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Groups_Group_Router_Rip_Group_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group_Timers) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 0
	}
	return *t.Timeout
}

// GetUpdate retrieves the value of the leaf Update from the NokiaConf_Configure_Groups_Group_Router_Rip_Group_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Update is set, it can
// safely use t.GetUpdate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Update == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group_Timers) GetUpdate() uint32 {
	if t == nil || t.Update == nil {
		return 0
	}
	return *t.Update
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Rip_Group_Timers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group_Timers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group_Timers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Rip_Group_Timers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group_Timers) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Group_Timers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Rip_Group_Timers.
func (*NokiaConf_Configure_Groups_Group_Router_Rip_Group_Timers) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Rip_Timers represents the /nokia-conf/configure/groups/group/router/rip/timers YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Rip_Timers struct {
	Flush   *uint32 `path:"flush" module:"nokia-conf"`
	Timeout *uint32 `path:"timeout" module:"nokia-conf"`
	Update  *uint32 `path:"update" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Rip_Timers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Rip_Timers) IsYANGGoStruct() {}

// GetFlush retrieves the value of the leaf Flush from the NokiaConf_Configure_Groups_Group_Router_Rip_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Flush is set, it can
// safely use t.GetFlush() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Flush == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Timers) GetFlush() uint32 {
	if t == nil || t.Flush == nil {
		return 0
	}
	return *t.Flush
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Groups_Group_Router_Rip_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Timers) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 0
	}
	return *t.Timeout
}

// GetUpdate retrieves the value of the leaf Update from the NokiaConf_Configure_Groups_Group_Router_Rip_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Update is set, it can
// safely use t.GetUpdate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Update == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Timers) GetUpdate() uint32 {
	if t == nil || t.Update == nil {
		return 0
	}
	return *t.Update
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Rip_Timers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Timers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Timers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Rip_Timers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Timers) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Rip_Timers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Rip_Timers.
func (*NokiaConf_Configure_Groups_Group_Router_Rip_Timers) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ripng represents the /nokia-conf/configure/groups/group/router/ripng YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ripng struct {
	AdminState   E_NokiaTypesSros_AdminState                                     `path:"admin-state" module:"nokia-conf"`
	BfdLiveness  *bool                                                           `path:"bfd-liveness" module:"nokia-conf"`
	CheckZero    *bool                                                           `path:"check-zero" module:"nokia-conf"`
	Description  *string                                                         `path:"description" module:"nokia-conf"`
	ExportLimit  *NokiaConf_Configure_Groups_Group_Router_Ripng_ExportLimit      `path:"export-limit" module:"nokia-conf" yangPresence:"true"`
	ExportPolicy []string                                                        `path:"export-policy" module:"nokia-conf"`
	Group        map[string]*NokiaConf_Configure_Groups_Group_Router_Ripng_Group `path:"group" module:"nokia-conf"`
	ImportPolicy []string                                                        `path:"import-policy" module:"nokia-conf"`
	MessageSize  *uint32                                                         `path:"message-size" module:"nokia-conf"`
	MetricIn     *uint32                                                         `path:"metric-in" module:"nokia-conf"`
	MetricOut    *uint32                                                         `path:"metric-out" module:"nokia-conf"`
	Preference   *uint32                                                         `path:"preference" module:"nokia-conf"`
	Receive      E_NokiaTypesRipng_Receive                                       `path:"receive" module:"nokia-conf"`
	Send         E_NokiaConf_Configure_Groups_Group_Router_Ripng_Send            `path:"send" module:"nokia-conf"`
	SplitHorizon *bool                                                           `path:"split-horizon" module:"nokia-conf"`
	Timers       *NokiaConf_Configure_Groups_Group_Router_Ripng_Timers           `path:"timers" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ripng implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ripng) IsYANGGoStruct() {}

// NewGroup creates a new entry in the Group list of the
// NokiaConf_Configure_Groups_Group_Router_Ripng struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng) NewGroup(GroupName string) (*NokiaConf_Configure_Groups_Group_Router_Ripng_Group, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Ripng_Group)
	}

	key := GroupName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &NokiaConf_Configure_Groups_Group_Router_Ripng_Group{
		GroupName: &GroupName,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the NokiaConf_Configure_Groups_Group_Router_Ripng struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng) RenameGroup(oldK, newK string) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.GroupName = &newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ripng. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng) GetOrCreateGroup(GroupName string) *NokiaConf_Configure_Groups_Group_Router_Ripng_Group {

	key := GroupName

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(GroupName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of NokiaConf_Configure_Groups_Group_Router_Ripng. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng) GetGroup(GroupName string) *NokiaConf_Configure_Groups_Group_Router_Ripng_Group {

	if t == nil {
		return nil
	}

	key := GroupName

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ripng. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng) DeleteGroup(GroupName string) {
	key := GroupName

	delete(t.Group, key)
}

// AppendGroup appends the supplied NokiaConf_Configure_Groups_Group_Router_Ripng_Group struct to the
// list Group of NokiaConf_Configure_Groups_Group_Router_Ripng. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Ripng_Group already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng) AppendGroup(v *NokiaConf_Configure_Groups_Group_Router_Ripng_Group) error {
	if v.GroupName == nil {
		return fmt.Errorf("invalid nil key received for GroupName")
	}

	key := *v.GroupName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Ripng_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// GetOrCreateExportLimit retrieves the value of the ExportLimit field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng) GetOrCreateExportLimit() *NokiaConf_Configure_Groups_Group_Router_Ripng_ExportLimit {
	if t.ExportLimit != nil {
		return t.ExportLimit
	}
	t.ExportLimit = &NokiaConf_Configure_Groups_Group_Router_Ripng_ExportLimit{}
	return t.ExportLimit
}

// GetOrCreateTimers retrieves the value of the Timers field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng) GetOrCreateTimers() *NokiaConf_Configure_Groups_Group_Router_Ripng_Timers {
	if t.Timers != nil {
		return t.Timers
	}
	t.Timers = &NokiaConf_Configure_Groups_Group_Router_Ripng_Timers{}
	return t.Timers
}

// GetExportLimit returns the value of the ExportLimit struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ripng. If the receiver or the field ExportLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng) GetExportLimit() *NokiaConf_Configure_Groups_Group_Router_Ripng_ExportLimit {
	if t != nil && t.ExportLimit != nil {
		return t.ExportLimit
	}
	return nil
}

// GetTimers returns the value of the Timers struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ripng. If the receiver or the field Timers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng) GetTimers() *NokiaConf_Configure_Groups_Group_Router_Ripng_Timers {
	if t != nil && t.Timers != nil {
		return t.Timers
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Ripng
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetBfdLiveness retrieves the value of the leaf BfdLiveness from the NokiaConf_Configure_Groups_Group_Router_Ripng
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdLiveness is set, it can
// safely use t.GetBfdLiveness() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdLiveness == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng) GetBfdLiveness() bool {
	if t == nil || t.BfdLiveness == nil {
		return false
	}
	return *t.BfdLiveness
}

// GetCheckZero retrieves the value of the leaf CheckZero from the NokiaConf_Configure_Groups_Group_Router_Ripng
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CheckZero is set, it can
// safely use t.GetCheckZero() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CheckZero == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng) GetCheckZero() bool {
	if t == nil || t.CheckZero == nil {
		return false
	}
	return *t.CheckZero
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Router_Ripng
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the NokiaConf_Configure_Groups_Group_Router_Ripng
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPolicy is set, it can
// safely use t.GetExportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng) GetExportPolicy() []string {
	if t == nil || t.ExportPolicy == nil {
		return nil
	}
	return t.ExportPolicy
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Groups_Group_Router_Ripng
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng) GetImportPolicy() []string {
	if t == nil || t.ImportPolicy == nil {
		return nil
	}
	return t.ImportPolicy
}

// GetMessageSize retrieves the value of the leaf MessageSize from the NokiaConf_Configure_Groups_Group_Router_Ripng
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MessageSize is set, it can
// safely use t.GetMessageSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MessageSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng) GetMessageSize() uint32 {
	if t == nil || t.MessageSize == nil {
		return 25
	}
	return *t.MessageSize
}

// GetMetricIn retrieves the value of the leaf MetricIn from the NokiaConf_Configure_Groups_Group_Router_Ripng
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MetricIn is set, it can
// safely use t.GetMetricIn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MetricIn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng) GetMetricIn() uint32 {
	if t == nil || t.MetricIn == nil {
		return 1
	}
	return *t.MetricIn
}

// GetMetricOut retrieves the value of the leaf MetricOut from the NokiaConf_Configure_Groups_Group_Router_Ripng
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MetricOut is set, it can
// safely use t.GetMetricOut() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MetricOut == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng) GetMetricOut() uint32 {
	if t == nil || t.MetricOut == nil {
		return 1
	}
	return *t.MetricOut
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Groups_Group_Router_Ripng
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 100
	}
	return *t.Preference
}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Groups_Group_Router_Ripng
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng) GetReceive() E_NokiaTypesRipng_Receive {
	if t == nil || t.Receive == 0 {
		return NokiaTypesRipng_Receive_ripng
	}
	return t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Groups_Group_Router_Ripng
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng) GetSend() E_NokiaConf_Configure_Groups_Group_Router_Ripng_Send {
	if t == nil || t.Send == 0 {
		return NokiaConf_Configure_Groups_Group_Router_Ripng_Send_ripng
	}
	return t.Send
}

// GetSplitHorizon retrieves the value of the leaf SplitHorizon from the NokiaConf_Configure_Groups_Group_Router_Ripng
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SplitHorizon is set, it can
// safely use t.GetSplitHorizon() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SplitHorizon == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng) GetSplitHorizon() bool {
	if t == nil || t.SplitHorizon == nil {
		return true
	}
	return *t.SplitHorizon
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ripng
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.BfdLiveness == nil {
		var v bool = false
		t.BfdLiveness = &v
	}
	if t.CheckZero == nil {
		var v bool = false
		t.CheckZero = &v
	}
	if t.MessageSize == nil {
		var v uint32 = 25
		t.MessageSize = &v
	}
	if t.MetricIn == nil {
		var v uint32 = 1
		t.MetricIn = &v
	}
	if t.MetricOut == nil {
		var v uint32 = 1
		t.MetricOut = &v
	}
	if t.Preference == nil {
		var v uint32 = 100
		t.Preference = &v
	}
	if t.Receive == 0 {
		t.Receive = NokiaTypesRipng_Receive_ripng
	}
	if t.Send == 0 {
		t.Send = NokiaConf_Configure_Groups_Group_Router_Ripng_Send_ripng
	}
	if t.SplitHorizon == nil {
		var v bool = true
		t.SplitHorizon = &v
	}
	t.ExportLimit.PopulateDefaults()
	t.Timers.PopulateDefaults()
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ripng"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ripng.
func (*NokiaConf_Configure_Groups_Group_Router_Ripng) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ripng_ExportLimit represents the /nokia-conf/configure/groups/group/router/ripng/export-limit YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ripng_ExportLimit struct {
	LogPercent *uint32 `path:"log-percent" module:"nokia-conf"`
	Number     *uint32 `path:"number" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ripng_ExportLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ripng_ExportLimit) IsYANGGoStruct() {}

// GetLogPercent retrieves the value of the leaf LogPercent from the NokiaConf_Configure_Groups_Group_Router_Ripng_ExportLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogPercent is set, it can
// safely use t.GetLogPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogPercent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_ExportLimit) GetLogPercent() uint32 {
	if t == nil || t.LogPercent == nil {
		return 0
	}
	return *t.LogPercent
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Groups_Group_Router_Ripng_ExportLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_ExportLimit) GetNumber() uint32 {
	if t == nil || t.Number == nil {
		return 0
	}
	return *t.Number
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ripng_ExportLimit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_ExportLimit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_ExportLimit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ripng_ExportLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_ExportLimit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_ExportLimit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ripng_ExportLimit.
func (*NokiaConf_Configure_Groups_Group_Router_Ripng_ExportLimit) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ripng_Group represents the /nokia-conf/configure/groups/group/router/ripng/group YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ripng_Group struct {
	AdminState   E_NokiaTypesSros_AdminState                                              `path:"admin-state" module:"nokia-conf"`
	BfdLiveness  *bool                                                                    `path:"bfd-liveness" module:"nokia-conf"`
	CheckZero    *bool                                                                    `path:"check-zero" module:"nokia-conf"`
	Description  *string                                                                  `path:"description" module:"nokia-conf"`
	ExportPolicy []string                                                                 `path:"export-policy" module:"nokia-conf"`
	GroupName    *string                                                                  `path:"group-name" module:"nokia-conf"`
	ImportPolicy []string                                                                 `path:"import-policy" module:"nokia-conf"`
	MessageSize  *uint32                                                                  `path:"message-size" module:"nokia-conf"`
	MetricIn     *uint32                                                                  `path:"metric-in" module:"nokia-conf"`
	MetricOut    *uint32                                                                  `path:"metric-out" module:"nokia-conf"`
	Neighbor     map[string]*NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor `path:"neighbor" module:"nokia-conf"`
	Preference   *uint32                                                                  `path:"preference" module:"nokia-conf"`
	Receive      E_NokiaTypesRipng_Receive                                                `path:"receive" module:"nokia-conf"`
	Send         E_NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Send               `path:"send" module:"nokia-conf"`
	SplitHorizon *bool                                                                    `path:"split-horizon" module:"nokia-conf"`
	Timers       *NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Timers              `path:"timers" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ripng_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ripng_Group) IsYANGGoStruct() {}

// NewNeighbor creates a new entry in the Neighbor list of the
// NokiaConf_Configure_Groups_Group_Router_Ripng_Group struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group) NewNeighbor(InterfaceName string) (*NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor{
		InterfaceName: &InterfaceName,
	}

	return t.Neighbor[key], nil
}

// RenameNeighbor renames an entry in the list Neighbor within
// the NokiaConf_Configure_Groups_Group_Router_Ripng_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group) RenameNeighbor(oldK, newK string) error {
	if _, ok := t.Neighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in Neighbor", newK)
	}

	e, ok := t.Neighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Neighbor", oldK)
	}
	e.InterfaceName = &newK

	t.Neighbor[newK] = e
	delete(t.Neighbor, oldK)
	return nil
}

// GetOrCreateNeighbor retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ripng_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group) GetOrCreateNeighbor(InterfaceName string) *NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor {

	key := InterfaceName

	if v, ok := t.Neighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNeighbor(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetNeighbor retrieves the value with the specified key from
// the Neighbor map field of NokiaConf_Configure_Groups_Group_Router_Ripng_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group) GetNeighbor(InterfaceName string) *NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor {

	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.Neighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteNeighbor deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ripng_Group. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group) DeleteNeighbor(InterfaceName string) {
	key := InterfaceName

	delete(t.Neighbor, key)
}

// AppendNeighbor appends the supplied NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor struct to the
// list Neighbor of NokiaConf_Configure_Groups_Group_Router_Ripng_Group. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group) AppendNeighbor(v *NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor)
	}

	if _, ok := t.Neighbor[key]; ok {
		return fmt.Errorf("duplicate key for list Neighbor %v", key)
	}

	t.Neighbor[key] = v
	return nil
}

// GetOrCreateTimers retrieves the value of the Timers field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group) GetOrCreateTimers() *NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Timers {
	if t.Timers != nil {
		return t.Timers
	}
	t.Timers = &NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Timers{}
	return t.Timers
}

// GetTimers returns the value of the Timers struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ripng_Group. If the receiver or the field Timers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group) GetTimers() *NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Timers {
	if t != nil && t.Timers != nil {
		return t.Timers
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Ripng_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetBfdLiveness retrieves the value of the leaf BfdLiveness from the NokiaConf_Configure_Groups_Group_Router_Ripng_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdLiveness is set, it can
// safely use t.GetBfdLiveness() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdLiveness == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group) GetBfdLiveness() bool {
	if t == nil || t.BfdLiveness == nil {
		return false
	}
	return *t.BfdLiveness
}

// GetCheckZero retrieves the value of the leaf CheckZero from the NokiaConf_Configure_Groups_Group_Router_Ripng_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CheckZero is set, it can
// safely use t.GetCheckZero() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CheckZero == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group) GetCheckZero() bool {
	if t == nil || t.CheckZero == nil {
		return false
	}
	return *t.CheckZero
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Router_Ripng_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the NokiaConf_Configure_Groups_Group_Router_Ripng_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPolicy is set, it can
// safely use t.GetExportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group) GetExportPolicy() []string {
	if t == nil || t.ExportPolicy == nil {
		return nil
	}
	return t.ExportPolicy
}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Groups_Group_Router_Ripng_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Groups_Group_Router_Ripng_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group) GetImportPolicy() []string {
	if t == nil || t.ImportPolicy == nil {
		return nil
	}
	return t.ImportPolicy
}

// GetMessageSize retrieves the value of the leaf MessageSize from the NokiaConf_Configure_Groups_Group_Router_Ripng_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MessageSize is set, it can
// safely use t.GetMessageSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MessageSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group) GetMessageSize() uint32 {
	if t == nil || t.MessageSize == nil {
		return 0
	}
	return *t.MessageSize
}

// GetMetricIn retrieves the value of the leaf MetricIn from the NokiaConf_Configure_Groups_Group_Router_Ripng_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MetricIn is set, it can
// safely use t.GetMetricIn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MetricIn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group) GetMetricIn() uint32 {
	if t == nil || t.MetricIn == nil {
		return 0
	}
	return *t.MetricIn
}

// GetMetricOut retrieves the value of the leaf MetricOut from the NokiaConf_Configure_Groups_Group_Router_Ripng_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MetricOut is set, it can
// safely use t.GetMetricOut() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MetricOut == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group) GetMetricOut() uint32 {
	if t == nil || t.MetricOut == nil {
		return 0
	}
	return *t.MetricOut
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Groups_Group_Router_Ripng_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 0
	}
	return *t.Preference
}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Groups_Group_Router_Ripng_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group) GetReceive() E_NokiaTypesRipng_Receive {
	if t == nil || t.Receive == 0 {
		return 0
	}
	return t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Groups_Group_Router_Ripng_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group) GetSend() E_NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Send {
	if t == nil || t.Send == 0 {
		return 0
	}
	return t.Send
}

// GetSplitHorizon retrieves the value of the leaf SplitHorizon from the NokiaConf_Configure_Groups_Group_Router_Ripng_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SplitHorizon is set, it can
// safely use t.GetSplitHorizon() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SplitHorizon == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group) GetSplitHorizon() bool {
	if t == nil || t.SplitHorizon == nil {
		return false
	}
	return *t.SplitHorizon
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ripng_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	t.Timers.PopulateDefaults()
	for _, e := range t.Neighbor {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Ripng_Group struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupName == nil {
		return nil, fmt.Errorf("nil value for key GroupName")
	}

	return map[string]interface{}{
		"group-name": *t.GroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ripng_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ripng_Group.
func (*NokiaConf_Configure_Groups_Group_Router_Ripng_Group) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor represents the /nokia-conf/configure/groups/group/router/ripng/group/neighbor YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor struct {
	AdminState     E_NokiaTypesSros_AdminState                                                             `path:"admin-state" module:"nokia-conf"`
	BfdLiveness    *bool                                                                                   `path:"bfd-liveness" module:"nokia-conf"`
	CheckZero      *bool                                                                                   `path:"check-zero" module:"nokia-conf"`
	Description    *string                                                                                 `path:"description" module:"nokia-conf"`
	ExportPolicy   []string                                                                                `path:"export-policy" module:"nokia-conf"`
	ImportPolicy   []string                                                                                `path:"import-policy" module:"nokia-conf"`
	InterfaceName  *string                                                                                 `path:"interface-name" module:"nokia-conf"`
	MessageSize    *uint32                                                                                 `path:"message-size" module:"nokia-conf"`
	MetricIn       *uint32                                                                                 `path:"metric-in" module:"nokia-conf"`
	MetricOut      *uint32                                                                                 `path:"metric-out" module:"nokia-conf"`
	Preference     *uint32                                                                                 `path:"preference" module:"nokia-conf"`
	Receive        E_NokiaTypesRipng_Receive                                                               `path:"receive" module:"nokia-conf"`
	Send           E_NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor_Send                     `path:"send" module:"nokia-conf"`
	SplitHorizon   *bool                                                                                   `path:"split-horizon" module:"nokia-conf"`
	Timers         *NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor_Timers                    `path:"timers" module:"nokia-conf" yangPresence:"true"`
	UnicastAddress map[string]*NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor_UnicastAddress `path:"unicast-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor) IsYANGGoStruct() {}

// NewUnicastAddress creates a new entry in the UnicastAddress list of the
// NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor) NewUnicastAddress(Address string) (*NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor_UnicastAddress, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnicastAddress == nil {
		t.UnicastAddress = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor_UnicastAddress)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnicastAddress[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnicastAddress", key)
	}

	t.UnicastAddress[key] = &NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor_UnicastAddress{
		Address: &Address,
	}

	return t.UnicastAddress[key], nil
}

// RenameUnicastAddress renames an entry in the list UnicastAddress within
// the NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor) RenameUnicastAddress(oldK, newK string) error {
	if _, ok := t.UnicastAddress[newK]; ok {
		return fmt.Errorf("key %v already exists in UnicastAddress", newK)
	}

	e, ok := t.UnicastAddress[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UnicastAddress", oldK)
	}
	e.Address = &newK

	t.UnicastAddress[newK] = e
	delete(t.UnicastAddress, oldK)
	return nil
}

// GetOrCreateUnicastAddress retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor) GetOrCreateUnicastAddress(Address string) *NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor_UnicastAddress {

	key := Address

	if v, ok := t.UnicastAddress[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnicastAddress(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnicastAddress got unexpected error: %v", err))
	}
	return v
}

// GetUnicastAddress retrieves the value with the specified key from
// the UnicastAddress map field of NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor) GetUnicastAddress(Address string) *NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor_UnicastAddress {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.UnicastAddress[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnicastAddress deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor) DeleteUnicastAddress(Address string) {
	key := Address

	delete(t.UnicastAddress, key)
}

// AppendUnicastAddress appends the supplied NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor_UnicastAddress struct to the
// list UnicastAddress of NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor_UnicastAddress already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor) AppendUnicastAddress(v *NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor_UnicastAddress) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnicastAddress == nil {
		t.UnicastAddress = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor_UnicastAddress)
	}

	if _, ok := t.UnicastAddress[key]; ok {
		return fmt.Errorf("duplicate key for list UnicastAddress %v", key)
	}

	t.UnicastAddress[key] = v
	return nil
}

// GetOrCreateTimers retrieves the value of the Timers field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor) GetOrCreateTimers() *NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor_Timers {
	if t.Timers != nil {
		return t.Timers
	}
	t.Timers = &NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor_Timers{}
	return t.Timers
}

// GetTimers returns the value of the Timers struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor. If the receiver or the field Timers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor) GetTimers() *NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor_Timers {
	if t != nil && t.Timers != nil {
		return t.Timers
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetBfdLiveness retrieves the value of the leaf BfdLiveness from the NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdLiveness is set, it can
// safely use t.GetBfdLiveness() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdLiveness == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor) GetBfdLiveness() bool {
	if t == nil || t.BfdLiveness == nil {
		return false
	}
	return *t.BfdLiveness
}

// GetCheckZero retrieves the value of the leaf CheckZero from the NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CheckZero is set, it can
// safely use t.GetCheckZero() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CheckZero == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor) GetCheckZero() bool {
	if t == nil || t.CheckZero == nil {
		return false
	}
	return *t.CheckZero
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPolicy is set, it can
// safely use t.GetExportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor) GetExportPolicy() []string {
	if t == nil || t.ExportPolicy == nil {
		return nil
	}
	return t.ExportPolicy
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor) GetImportPolicy() []string {
	if t == nil || t.ImportPolicy == nil {
		return nil
	}
	return t.ImportPolicy
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetMessageSize retrieves the value of the leaf MessageSize from the NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MessageSize is set, it can
// safely use t.GetMessageSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MessageSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor) GetMessageSize() uint32 {
	if t == nil || t.MessageSize == nil {
		return 0
	}
	return *t.MessageSize
}

// GetMetricIn retrieves the value of the leaf MetricIn from the NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MetricIn is set, it can
// safely use t.GetMetricIn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MetricIn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor) GetMetricIn() uint32 {
	if t == nil || t.MetricIn == nil {
		return 0
	}
	return *t.MetricIn
}

// GetMetricOut retrieves the value of the leaf MetricOut from the NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MetricOut is set, it can
// safely use t.GetMetricOut() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MetricOut == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor) GetMetricOut() uint32 {
	if t == nil || t.MetricOut == nil {
		return 0
	}
	return *t.MetricOut
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 0
	}
	return *t.Preference
}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor) GetReceive() E_NokiaTypesRipng_Receive {
	if t == nil || t.Receive == 0 {
		return 0
	}
	return t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor) GetSend() E_NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor_Send {
	if t == nil || t.Send == 0 {
		return 0
	}
	return t.Send
}

// GetSplitHorizon retrieves the value of the leaf SplitHorizon from the NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SplitHorizon is set, it can
// safely use t.GetSplitHorizon() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SplitHorizon == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor) GetSplitHorizon() bool {
	if t == nil || t.SplitHorizon == nil {
		return false
	}
	return *t.SplitHorizon
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	t.Timers.PopulateDefaults()
	for _, e := range t.UnicastAddress {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor.
func (*NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor_Timers represents the /nokia-conf/configure/groups/group/router/ripng/group/neighbor/timers YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor_Timers struct {
	Flush   *uint32 `path:"flush" module:"nokia-conf"`
	Timeout *uint32 `path:"timeout" module:"nokia-conf"`
	Update  *uint32 `path:"update" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor_Timers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor_Timers) IsYANGGoStruct() {}

// GetFlush retrieves the value of the leaf Flush from the NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Flush is set, it can
// safely use t.GetFlush() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Flush == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor_Timers) GetFlush() uint32 {
	if t == nil || t.Flush == nil {
		return 0
	}
	return *t.Flush
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor_Timers) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 0
	}
	return *t.Timeout
}

// GetUpdate retrieves the value of the leaf Update from the NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Update is set, it can
// safely use t.GetUpdate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Update == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor_Timers) GetUpdate() uint32 {
	if t == nil || t.Update == nil {
		return 0
	}
	return *t.Update
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor_Timers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor_Timers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor_Timers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor_Timers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor_Timers) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor_Timers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor_Timers.
func (*NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor_Timers) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor_UnicastAddress represents the /nokia-conf/configure/groups/group/router/ripng/group/neighbor/unicast-address YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor_UnicastAddress struct {
	Address *string `path:"address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor_UnicastAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor_UnicastAddress) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor_UnicastAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor_UnicastAddress) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor_UnicastAddress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor_UnicastAddress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor_UnicastAddress struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor_UnicastAddress) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor_UnicastAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor_UnicastAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor_UnicastAddress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor_UnicastAddress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor_UnicastAddress.
func (*NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Neighbor_UnicastAddress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Timers represents the /nokia-conf/configure/groups/group/router/ripng/group/timers YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Timers struct {
	Flush   *uint32 `path:"flush" module:"nokia-conf"`
	Timeout *uint32 `path:"timeout" module:"nokia-conf"`
	Update  *uint32 `path:"update" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Timers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Timers) IsYANGGoStruct() {}

// GetFlush retrieves the value of the leaf Flush from the NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Flush is set, it can
// safely use t.GetFlush() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Flush == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Timers) GetFlush() uint32 {
	if t == nil || t.Flush == nil {
		return 0
	}
	return *t.Flush
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Timers) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 0
	}
	return *t.Timeout
}

// GetUpdate retrieves the value of the leaf Update from the NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Update is set, it can
// safely use t.GetUpdate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Update == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Timers) GetUpdate() uint32 {
	if t == nil || t.Update == nil {
		return 0
	}
	return *t.Update
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Timers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Timers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Timers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Timers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Timers) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Timers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Timers.
func (*NokiaConf_Configure_Groups_Group_Router_Ripng_Group_Timers) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ripng_Timers represents the /nokia-conf/configure/groups/group/router/ripng/timers YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ripng_Timers struct {
	Flush   *uint32 `path:"flush" module:"nokia-conf"`
	Timeout *uint32 `path:"timeout" module:"nokia-conf"`
	Update  *uint32 `path:"update" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ripng_Timers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ripng_Timers) IsYANGGoStruct() {}

// GetFlush retrieves the value of the leaf Flush from the NokiaConf_Configure_Groups_Group_Router_Ripng_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Flush is set, it can
// safely use t.GetFlush() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Flush == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Timers) GetFlush() uint32 {
	if t == nil || t.Flush == nil {
		return 0
	}
	return *t.Flush
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Groups_Group_Router_Ripng_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Timers) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 0
	}
	return *t.Timeout
}

// GetUpdate retrieves the value of the leaf Update from the NokiaConf_Configure_Groups_Group_Router_Ripng_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Update is set, it can
// safely use t.GetUpdate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Update == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Timers) GetUpdate() uint32 {
	if t == nil || t.Update == nil {
		return 0
	}
	return *t.Update
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ripng_Timers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Timers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Timers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ripng_Timers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Timers) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ripng_Timers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ripng_Timers.
func (*NokiaConf_Configure_Groups_Group_Router_Ripng_Timers) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Rsvp represents the /nokia-conf/configure/groups/group/router/rsvp YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Rsvp struct {
	AdminState                 E_NokiaTypesSros_AdminState                                        `path:"admin-state" module:"nokia-conf"`
	DbwAccounting              *NokiaConf_Configure_Groups_Group_Router_Rsvp_DbwAccounting        `path:"dbw-accounting" module:"nokia-conf" yangPresence:"true"`
	DiffservTe                 *NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe           `path:"diffserv-te" module:"nokia-conf" yangPresence:"true"`
	EntropyLabelCapability     *bool                                                              `path:"entropy-label-capability" module:"nokia-conf"`
	GracefulRestart            *NokiaConf_Configure_Groups_Group_Router_Rsvp_GracefulRestart      `path:"graceful-restart" module:"nokia-conf"`
	GracefulShutdown           *bool                                                              `path:"graceful-shutdown" module:"nokia-conf"`
	ImplicitNullLabel          *bool                                                              `path:"implicit-null-label" module:"nokia-conf"`
	IncludeNodeIdInRro         *bool                                                              `path:"include-node-id-in-rro" module:"nokia-conf"`
	Interface                  map[string]*NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface `path:"interface" module:"nokia-conf"`
	KeepMultiplier             *uint32                                                            `path:"keep-multiplier" module:"nokia-conf"`
	MsgPacing                  *NokiaConf_Configure_Groups_Group_Router_Rsvp_MsgPacing            `path:"msg-pacing" module:"nokia-conf" yangPresence:"true"`
	P2MpMergePointAbortTimer   *uint32                                                            `path:"p2mp-merge-point-abort-timer" module:"nokia-conf"`
	P2PMergePointAbortTimer    *uint32                                                            `path:"p2p-merge-point-abort-timer" module:"nokia-conf"`
	PreemptionTimer            *uint32                                                            `path:"preemption-timer" module:"nokia-conf"`
	RapidRetransmitTime        *uint32                                                            `path:"rapid-retransmit-time" module:"nokia-conf"`
	RapidRetryLimit            *uint32                                                            `path:"rapid-retry-limit" module:"nokia-conf"`
	RefreshReductionOverBypass *bool                                                              `path:"refresh-reduction-over-bypass" module:"nokia-conf"`
	RefreshTime                *uint32                                                            `path:"refresh-time" module:"nokia-conf"`
	TeDownThreshold            []int32                                                            `path:"te-down-threshold" module:"nokia-conf"`
	TeThresholdUpdate          *NokiaConf_Configure_Groups_Group_Router_Rsvp_TeThresholdUpdate    `path:"te-threshold-update" module:"nokia-conf" yangPresence:"true"`
	TeUpThreshold              []int32                                                            `path:"te-up-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Rsvp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Rsvp) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// NokiaConf_Configure_Groups_Group_Router_Rsvp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp) NewInterface(InterfaceName string) (*NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface{
		InterfaceName: &InterfaceName,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the NokiaConf_Configure_Groups_Group_Router_Rsvp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.InterfaceName = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Rsvp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp) GetOrCreateInterface(InterfaceName string) *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface {

	key := InterfaceName

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of NokiaConf_Configure_Groups_Group_Router_Rsvp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp) GetInterface(InterfaceName string) *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface {

	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Rsvp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp) DeleteInterface(InterfaceName string) {
	key := InterfaceName

	delete(t.Interface, key)
}

// AppendInterface appends the supplied NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface struct to the
// list Interface of NokiaConf_Configure_Groups_Group_Router_Rsvp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp) AppendInterface(v *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// GetOrCreateDbwAccounting retrieves the value of the DbwAccounting field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp) GetOrCreateDbwAccounting() *NokiaConf_Configure_Groups_Group_Router_Rsvp_DbwAccounting {
	if t.DbwAccounting != nil {
		return t.DbwAccounting
	}
	t.DbwAccounting = &NokiaConf_Configure_Groups_Group_Router_Rsvp_DbwAccounting{}
	return t.DbwAccounting
}

// GetOrCreateDiffservTe retrieves the value of the DiffservTe field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp) GetOrCreateDiffservTe() *NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe {
	if t.DiffservTe != nil {
		return t.DiffservTe
	}
	t.DiffservTe = &NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe{}
	return t.DiffservTe
}

// GetOrCreateGracefulRestart retrieves the value of the GracefulRestart field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp) GetOrCreateGracefulRestart() *NokiaConf_Configure_Groups_Group_Router_Rsvp_GracefulRestart {
	if t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	t.GracefulRestart = &NokiaConf_Configure_Groups_Group_Router_Rsvp_GracefulRestart{}
	return t.GracefulRestart
}

// GetOrCreateMsgPacing retrieves the value of the MsgPacing field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp) GetOrCreateMsgPacing() *NokiaConf_Configure_Groups_Group_Router_Rsvp_MsgPacing {
	if t.MsgPacing != nil {
		return t.MsgPacing
	}
	t.MsgPacing = &NokiaConf_Configure_Groups_Group_Router_Rsvp_MsgPacing{}
	return t.MsgPacing
}

// GetOrCreateTeThresholdUpdate retrieves the value of the TeThresholdUpdate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp) GetOrCreateTeThresholdUpdate() *NokiaConf_Configure_Groups_Group_Router_Rsvp_TeThresholdUpdate {
	if t.TeThresholdUpdate != nil {
		return t.TeThresholdUpdate
	}
	t.TeThresholdUpdate = &NokiaConf_Configure_Groups_Group_Router_Rsvp_TeThresholdUpdate{}
	return t.TeThresholdUpdate
}

// GetDbwAccounting returns the value of the DbwAccounting struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Rsvp. If the receiver or the field DbwAccounting is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp) GetDbwAccounting() *NokiaConf_Configure_Groups_Group_Router_Rsvp_DbwAccounting {
	if t != nil && t.DbwAccounting != nil {
		return t.DbwAccounting
	}
	return nil
}

// GetDiffservTe returns the value of the DiffservTe struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Rsvp. If the receiver or the field DiffservTe is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp) GetDiffservTe() *NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe {
	if t != nil && t.DiffservTe != nil {
		return t.DiffservTe
	}
	return nil
}

// GetGracefulRestart returns the value of the GracefulRestart struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Rsvp. If the receiver or the field GracefulRestart is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp) GetGracefulRestart() *NokiaConf_Configure_Groups_Group_Router_Rsvp_GracefulRestart {
	if t != nil && t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	return nil
}

// GetMsgPacing returns the value of the MsgPacing struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Rsvp. If the receiver or the field MsgPacing is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp) GetMsgPacing() *NokiaConf_Configure_Groups_Group_Router_Rsvp_MsgPacing {
	if t != nil && t.MsgPacing != nil {
		return t.MsgPacing
	}
	return nil
}

// GetTeThresholdUpdate returns the value of the TeThresholdUpdate struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Rsvp. If the receiver or the field TeThresholdUpdate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp) GetTeThresholdUpdate() *NokiaConf_Configure_Groups_Group_Router_Rsvp_TeThresholdUpdate {
	if t != nil && t.TeThresholdUpdate != nil {
		return t.TeThresholdUpdate
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Rsvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetEntropyLabelCapability retrieves the value of the leaf EntropyLabelCapability from the NokiaConf_Configure_Groups_Group_Router_Rsvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntropyLabelCapability is set, it can
// safely use t.GetEntropyLabelCapability() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntropyLabelCapability == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp) GetEntropyLabelCapability() bool {
	if t == nil || t.EntropyLabelCapability == nil {
		return false
	}
	return *t.EntropyLabelCapability
}

// GetGracefulShutdown retrieves the value of the leaf GracefulShutdown from the NokiaConf_Configure_Groups_Group_Router_Rsvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GracefulShutdown is set, it can
// safely use t.GetGracefulShutdown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GracefulShutdown == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp) GetGracefulShutdown() bool {
	if t == nil || t.GracefulShutdown == nil {
		return false
	}
	return *t.GracefulShutdown
}

// GetImplicitNullLabel retrieves the value of the leaf ImplicitNullLabel from the NokiaConf_Configure_Groups_Group_Router_Rsvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImplicitNullLabel is set, it can
// safely use t.GetImplicitNullLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImplicitNullLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp) GetImplicitNullLabel() bool {
	if t == nil || t.ImplicitNullLabel == nil {
		return false
	}
	return *t.ImplicitNullLabel
}

// GetIncludeNodeIdInRro retrieves the value of the leaf IncludeNodeIdInRro from the NokiaConf_Configure_Groups_Group_Router_Rsvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IncludeNodeIdInRro is set, it can
// safely use t.GetIncludeNodeIdInRro() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IncludeNodeIdInRro == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp) GetIncludeNodeIdInRro() bool {
	if t == nil || t.IncludeNodeIdInRro == nil {
		return false
	}
	return *t.IncludeNodeIdInRro
}

// GetKeepMultiplier retrieves the value of the leaf KeepMultiplier from the NokiaConf_Configure_Groups_Group_Router_Rsvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeepMultiplier is set, it can
// safely use t.GetKeepMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeepMultiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp) GetKeepMultiplier() uint32 {
	if t == nil || t.KeepMultiplier == nil {
		return 3
	}
	return *t.KeepMultiplier
}

// GetP2MpMergePointAbortTimer retrieves the value of the leaf P2MpMergePointAbortTimer from the NokiaConf_Configure_Groups_Group_Router_Rsvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if P2MpMergePointAbortTimer is set, it can
// safely use t.GetP2MpMergePointAbortTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.P2MpMergePointAbortTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp) GetP2MpMergePointAbortTimer() uint32 {
	if t == nil || t.P2MpMergePointAbortTimer == nil {
		return 0
	}
	return *t.P2MpMergePointAbortTimer
}

// GetP2PMergePointAbortTimer retrieves the value of the leaf P2PMergePointAbortTimer from the NokiaConf_Configure_Groups_Group_Router_Rsvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if P2PMergePointAbortTimer is set, it can
// safely use t.GetP2PMergePointAbortTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.P2PMergePointAbortTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp) GetP2PMergePointAbortTimer() uint32 {
	if t == nil || t.P2PMergePointAbortTimer == nil {
		return 0
	}
	return *t.P2PMergePointAbortTimer
}

// GetPreemptionTimer retrieves the value of the leaf PreemptionTimer from the NokiaConf_Configure_Groups_Group_Router_Rsvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreemptionTimer is set, it can
// safely use t.GetPreemptionTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreemptionTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp) GetPreemptionTimer() uint32 {
	if t == nil || t.PreemptionTimer == nil {
		return 300
	}
	return *t.PreemptionTimer
}

// GetRapidRetransmitTime retrieves the value of the leaf RapidRetransmitTime from the NokiaConf_Configure_Groups_Group_Router_Rsvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RapidRetransmitTime is set, it can
// safely use t.GetRapidRetransmitTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RapidRetransmitTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp) GetRapidRetransmitTime() uint32 {
	if t == nil || t.RapidRetransmitTime == nil {
		return 5
	}
	return *t.RapidRetransmitTime
}

// GetRapidRetryLimit retrieves the value of the leaf RapidRetryLimit from the NokiaConf_Configure_Groups_Group_Router_Rsvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RapidRetryLimit is set, it can
// safely use t.GetRapidRetryLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RapidRetryLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp) GetRapidRetryLimit() uint32 {
	if t == nil || t.RapidRetryLimit == nil {
		return 3
	}
	return *t.RapidRetryLimit
}

// GetRefreshReductionOverBypass retrieves the value of the leaf RefreshReductionOverBypass from the NokiaConf_Configure_Groups_Group_Router_Rsvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RefreshReductionOverBypass is set, it can
// safely use t.GetRefreshReductionOverBypass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RefreshReductionOverBypass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp) GetRefreshReductionOverBypass() bool {
	if t == nil || t.RefreshReductionOverBypass == nil {
		return false
	}
	return *t.RefreshReductionOverBypass
}

// GetRefreshTime retrieves the value of the leaf RefreshTime from the NokiaConf_Configure_Groups_Group_Router_Rsvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RefreshTime is set, it can
// safely use t.GetRefreshTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RefreshTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp) GetRefreshTime() uint32 {
	if t == nil || t.RefreshTime == nil {
		return 30
	}
	return *t.RefreshTime
}

// GetTeDownThreshold retrieves the value of the leaf TeDownThreshold from the NokiaConf_Configure_Groups_Group_Router_Rsvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TeDownThreshold is set, it can
// safely use t.GetTeDownThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TeDownThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp) GetTeDownThreshold() []int32 {
	if t == nil || t.TeDownThreshold == nil {
		return nil
	}
	return t.TeDownThreshold
}

// GetTeUpThreshold retrieves the value of the leaf TeUpThreshold from the NokiaConf_Configure_Groups_Group_Router_Rsvp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TeUpThreshold is set, it can
// safely use t.GetTeUpThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TeUpThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp) GetTeUpThreshold() []int32 {
	if t == nil || t.TeUpThreshold == nil {
		return nil
	}
	return t.TeUpThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Rsvp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.EntropyLabelCapability == nil {
		var v bool = false
		t.EntropyLabelCapability = &v
	}
	if t.GracefulShutdown == nil {
		var v bool = false
		t.GracefulShutdown = &v
	}
	if t.ImplicitNullLabel == nil {
		var v bool = false
		t.ImplicitNullLabel = &v
	}
	if t.IncludeNodeIdInRro == nil {
		var v bool = false
		t.IncludeNodeIdInRro = &v
	}
	if t.KeepMultiplier == nil {
		var v uint32 = 3
		t.KeepMultiplier = &v
	}
	if t.PreemptionTimer == nil {
		var v uint32 = 300
		t.PreemptionTimer = &v
	}
	if t.RapidRetransmitTime == nil {
		var v uint32 = 5
		t.RapidRetransmitTime = &v
	}
	if t.RapidRetryLimit == nil {
		var v uint32 = 3
		t.RapidRetryLimit = &v
	}
	if t.RefreshReductionOverBypass == nil {
		var v bool = false
		t.RefreshReductionOverBypass = &v
	}
	if t.RefreshTime == nil {
		var v uint32 = 30
		t.RefreshTime = &v
	}
	t.DbwAccounting.PopulateDefaults()
	t.DiffservTe.PopulateDefaults()
	t.GracefulRestart.PopulateDefaults()
	t.MsgPacing.PopulateDefaults()
	t.TeThresholdUpdate.PopulateDefaults()
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Rsvp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Rsvp.
func (*NokiaConf_Configure_Groups_Group_Router_Rsvp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Rsvp_DbwAccounting represents the /nokia-conf/configure/groups/group/router/rsvp/dbw-accounting YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Rsvp_DbwAccounting struct {
	DbwMultiplier    *uint32                                                                   `path:"dbw-multiplier" module:"nokia-conf"`
	DownThreshold    *NokiaConf_Configure_Groups_Group_Router_Rsvp_DbwAccounting_DownThreshold `path:"down-threshold" module:"nokia-conf"`
	SampleInterval   *uint32                                                                   `path:"sample-interval" module:"nokia-conf"`
	SampleMultiplier *uint32                                                                   `path:"sample-multiplier" module:"nokia-conf"`
	UpThreshold      *NokiaConf_Configure_Groups_Group_Router_Rsvp_DbwAccounting_UpThreshold   `path:"up-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Rsvp_DbwAccounting implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Rsvp_DbwAccounting) IsYANGGoStruct() {}

// GetOrCreateDownThreshold retrieves the value of the DownThreshold field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_DbwAccounting) GetOrCreateDownThreshold() *NokiaConf_Configure_Groups_Group_Router_Rsvp_DbwAccounting_DownThreshold {
	if t.DownThreshold != nil {
		return t.DownThreshold
	}
	t.DownThreshold = &NokiaConf_Configure_Groups_Group_Router_Rsvp_DbwAccounting_DownThreshold{}
	return t.DownThreshold
}

// GetOrCreateUpThreshold retrieves the value of the UpThreshold field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_DbwAccounting) GetOrCreateUpThreshold() *NokiaConf_Configure_Groups_Group_Router_Rsvp_DbwAccounting_UpThreshold {
	if t.UpThreshold != nil {
		return t.UpThreshold
	}
	t.UpThreshold = &NokiaConf_Configure_Groups_Group_Router_Rsvp_DbwAccounting_UpThreshold{}
	return t.UpThreshold
}

// GetDownThreshold returns the value of the DownThreshold struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Rsvp_DbwAccounting. If the receiver or the field DownThreshold is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_DbwAccounting) GetDownThreshold() *NokiaConf_Configure_Groups_Group_Router_Rsvp_DbwAccounting_DownThreshold {
	if t != nil && t.DownThreshold != nil {
		return t.DownThreshold
	}
	return nil
}

// GetUpThreshold returns the value of the UpThreshold struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Rsvp_DbwAccounting. If the receiver or the field UpThreshold is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_DbwAccounting) GetUpThreshold() *NokiaConf_Configure_Groups_Group_Router_Rsvp_DbwAccounting_UpThreshold {
	if t != nil && t.UpThreshold != nil {
		return t.UpThreshold
	}
	return nil
}

// GetDbwMultiplier retrieves the value of the leaf DbwMultiplier from the NokiaConf_Configure_Groups_Group_Router_Rsvp_DbwAccounting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DbwMultiplier is set, it can
// safely use t.GetDbwMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DbwMultiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_DbwAccounting) GetDbwMultiplier() uint32 {
	if t == nil || t.DbwMultiplier == nil {
		return 100
	}
	return *t.DbwMultiplier
}

// GetSampleInterval retrieves the value of the leaf SampleInterval from the NokiaConf_Configure_Groups_Group_Router_Rsvp_DbwAccounting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SampleInterval is set, it can
// safely use t.GetSampleInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SampleInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_DbwAccounting) GetSampleInterval() uint32 {
	if t == nil || t.SampleInterval == nil {
		return 30
	}
	return *t.SampleInterval
}

// GetSampleMultiplier retrieves the value of the leaf SampleMultiplier from the NokiaConf_Configure_Groups_Group_Router_Rsvp_DbwAccounting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SampleMultiplier is set, it can
// safely use t.GetSampleMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SampleMultiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_DbwAccounting) GetSampleMultiplier() uint32 {
	if t == nil || t.SampleMultiplier == nil {
		return 3
	}
	return *t.SampleMultiplier
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Rsvp_DbwAccounting
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_DbwAccounting) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DbwMultiplier == nil {
		var v uint32 = 100
		t.DbwMultiplier = &v
	}
	if t.SampleInterval == nil {
		var v uint32 = 30
		t.SampleInterval = &v
	}
	if t.SampleMultiplier == nil {
		var v uint32 = 3
		t.SampleMultiplier = &v
	}
	t.DownThreshold.PopulateDefaults()
	t.UpThreshold.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_DbwAccounting) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Rsvp_DbwAccounting"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_DbwAccounting) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_DbwAccounting) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Rsvp_DbwAccounting.
func (*NokiaConf_Configure_Groups_Group_Router_Rsvp_DbwAccounting) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Rsvp_DbwAccounting_DownThreshold represents the /nokia-conf/configure/groups/group/router/rsvp/dbw-accounting/down-threshold YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Rsvp_DbwAccounting_DownThreshold struct {
	Bw      *int32  `path:"bw" module:"nokia-conf"`
	Percent *uint32 `path:"percent" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Rsvp_DbwAccounting_DownThreshold implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Rsvp_DbwAccounting_DownThreshold) IsYANGGoStruct() {}

// GetBw retrieves the value of the leaf Bw from the NokiaConf_Configure_Groups_Group_Router_Rsvp_DbwAccounting_DownThreshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bw is set, it can
// safely use t.GetBw() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bw == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_DbwAccounting_DownThreshold) GetBw() int32 {
	if t == nil || t.Bw == nil {
		return 0
	}
	return *t.Bw
}

// GetPercent retrieves the value of the leaf Percent from the NokiaConf_Configure_Groups_Group_Router_Rsvp_DbwAccounting_DownThreshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Percent is set, it can
// safely use t.GetPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Percent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_DbwAccounting_DownThreshold) GetPercent() uint32 {
	if t == nil || t.Percent == nil {
		return 0
	}
	return *t.Percent
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Rsvp_DbwAccounting_DownThreshold
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_DbwAccounting_DownThreshold) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Percent == nil {
		var v uint32 = 0
		t.Percent = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_DbwAccounting_DownThreshold) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Rsvp_DbwAccounting_DownThreshold"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_DbwAccounting_DownThreshold) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_DbwAccounting_DownThreshold) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Rsvp_DbwAccounting_DownThreshold.
func (*NokiaConf_Configure_Groups_Group_Router_Rsvp_DbwAccounting_DownThreshold) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Rsvp_DbwAccounting_UpThreshold represents the /nokia-conf/configure/groups/group/router/rsvp/dbw-accounting/up-threshold YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Rsvp_DbwAccounting_UpThreshold struct {
	Bw      *int32  `path:"bw" module:"nokia-conf"`
	Percent *uint32 `path:"percent" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Rsvp_DbwAccounting_UpThreshold implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Rsvp_DbwAccounting_UpThreshold) IsYANGGoStruct() {}

// GetBw retrieves the value of the leaf Bw from the NokiaConf_Configure_Groups_Group_Router_Rsvp_DbwAccounting_UpThreshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bw is set, it can
// safely use t.GetBw() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bw == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_DbwAccounting_UpThreshold) GetBw() int32 {
	if t == nil || t.Bw == nil {
		return 0
	}
	return *t.Bw
}

// GetPercent retrieves the value of the leaf Percent from the NokiaConf_Configure_Groups_Group_Router_Rsvp_DbwAccounting_UpThreshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Percent is set, it can
// safely use t.GetPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Percent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_DbwAccounting_UpThreshold) GetPercent() uint32 {
	if t == nil || t.Percent == nil {
		return 0
	}
	return *t.Percent
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Rsvp_DbwAccounting_UpThreshold
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_DbwAccounting_UpThreshold) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Percent == nil {
		var v uint32 = 0
		t.Percent = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_DbwAccounting_UpThreshold) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Rsvp_DbwAccounting_UpThreshold"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_DbwAccounting_UpThreshold) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_DbwAccounting_UpThreshold) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Rsvp_DbwAccounting_UpThreshold.
func (*NokiaConf_Configure_Groups_Group_Router_Rsvp_DbwAccounting_UpThreshold) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe represents the /nokia-conf/configure/groups/group/router/rsvp/diffserv-te YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe struct {
	AdmissionControlModel E_NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_AdmissionControlModel                                                                          `path:"admission-control-model" module:"nokia-conf"`
	ClassTypeBw           *NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_ClassTypeBw                                                                                     `path:"class-type-bw" module:"nokia-conf"`
	Fc                    map[NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_Fc_FcName_Union]*NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_Fc                  `path:"fc" module:"nokia-conf"`
	TeClass               map[NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_TeClass_TeClassNumber_Union]*NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_TeClass `path:"te-class" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe) IsYANGGoStruct() {}

// NewFc creates a new entry in the Fc list of the
// NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe) NewFc(FcName NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_Fc_FcName_Union) (*NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_Fc, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_Fc_FcName_Union]*NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_Fc)
	}

	key := FcName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Fc[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Fc", key)
	}

	t.Fc[key] = &NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_Fc{
		FcName: FcName,
	}

	return t.Fc[key], nil
}

// RenameFc renames an entry in the list Fc within
// the NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe) RenameFc(oldK, newK NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_Fc_FcName_Union) error {
	if _, ok := t.Fc[newK]; ok {
		return fmt.Errorf("key %v already exists in Fc", newK)
	}

	e, ok := t.Fc[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Fc", oldK)
	}
	e.FcName = newK

	t.Fc[newK] = e
	delete(t.Fc, oldK)
	return nil
}

// GetOrCreateFc retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe) GetOrCreateFc(FcName NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_Fc_FcName_Union) *NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_Fc {

	key := FcName

	if v, ok := t.Fc[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFc(FcName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFc got unexpected error: %v", err))
	}
	return v
}

// GetFc retrieves the value with the specified key from
// the Fc map field of NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe) GetFc(FcName NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_Fc_FcName_Union) *NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_Fc {

	if t == nil {
		return nil
	}

	key := FcName

	if lm, ok := t.Fc[key]; ok {
		return lm
	}
	return nil
}

// DeleteFc deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe) DeleteFc(FcName NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_Fc_FcName_Union) {
	key := FcName

	delete(t.Fc, key)
}

// AppendFc appends the supplied NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_Fc struct to the
// list Fc of NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_Fc already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe) AppendFc(v *NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_Fc) error {
	key := v.FcName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_Fc_FcName_Union]*NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_Fc)
	}

	if _, ok := t.Fc[key]; ok {
		return fmt.Errorf("duplicate key for list Fc %v", key)
	}

	t.Fc[key] = v
	return nil
}

// NewTeClass creates a new entry in the TeClass list of the
// NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe) NewTeClass(TeClassNumber NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_TeClass_TeClassNumber_Union) (*NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_TeClass, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TeClass == nil {
		t.TeClass = make(map[NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_TeClass_TeClassNumber_Union]*NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_TeClass)
	}

	key := TeClassNumber

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TeClass[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TeClass", key)
	}

	t.TeClass[key] = &NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_TeClass{
		TeClassNumber: TeClassNumber,
	}

	return t.TeClass[key], nil
}

// RenameTeClass renames an entry in the list TeClass within
// the NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe) RenameTeClass(oldK, newK NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_TeClass_TeClassNumber_Union) error {
	if _, ok := t.TeClass[newK]; ok {
		return fmt.Errorf("key %v already exists in TeClass", newK)
	}

	e, ok := t.TeClass[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TeClass", oldK)
	}
	e.TeClassNumber = newK

	t.TeClass[newK] = e
	delete(t.TeClass, oldK)
	return nil
}

// GetOrCreateTeClass retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe) GetOrCreateTeClass(TeClassNumber NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_TeClass_TeClassNumber_Union) *NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_TeClass {

	key := TeClassNumber

	if v, ok := t.TeClass[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTeClass(TeClassNumber)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTeClass got unexpected error: %v", err))
	}
	return v
}

// GetTeClass retrieves the value with the specified key from
// the TeClass map field of NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe) GetTeClass(TeClassNumber NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_TeClass_TeClassNumber_Union) *NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_TeClass {

	if t == nil {
		return nil
	}

	key := TeClassNumber

	if lm, ok := t.TeClass[key]; ok {
		return lm
	}
	return nil
}

// DeleteTeClass deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe) DeleteTeClass(TeClassNumber NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_TeClass_TeClassNumber_Union) {
	key := TeClassNumber

	delete(t.TeClass, key)
}

// AppendTeClass appends the supplied NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_TeClass struct to the
// list TeClass of NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_TeClass already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe) AppendTeClass(v *NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_TeClass) error {
	key := v.TeClassNumber

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TeClass == nil {
		t.TeClass = make(map[NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_TeClass_TeClassNumber_Union]*NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_TeClass)
	}

	if _, ok := t.TeClass[key]; ok {
		return fmt.Errorf("duplicate key for list TeClass %v", key)
	}

	t.TeClass[key] = v
	return nil
}

// GetOrCreateClassTypeBw retrieves the value of the ClassTypeBw field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe) GetOrCreateClassTypeBw() *NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_ClassTypeBw {
	if t.ClassTypeBw != nil {
		return t.ClassTypeBw
	}
	t.ClassTypeBw = &NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_ClassTypeBw{}
	return t.ClassTypeBw
}

// GetClassTypeBw returns the value of the ClassTypeBw struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe. If the receiver or the field ClassTypeBw is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe) GetClassTypeBw() *NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_ClassTypeBw {
	if t != nil && t.ClassTypeBw != nil {
		return t.ClassTypeBw
	}
	return nil
}

// GetAdmissionControlModel retrieves the value of the leaf AdmissionControlModel from the NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdmissionControlModel is set, it can
// safely use t.GetAdmissionControlModel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdmissionControlModel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe) GetAdmissionControlModel() E_NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_AdmissionControlModel {
	if t == nil || t.AdmissionControlModel == 0 {
		return 0
	}
	return t.AdmissionControlModel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.ClassTypeBw.PopulateDefaults()
	for _, e := range t.Fc {
		e.PopulateDefaults()
	}
	for _, e := range t.TeClass {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe.
func (*NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_ClassTypeBw represents the /nokia-conf/configure/groups/group/router/rsvp/diffserv-te/class-type-bw YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_ClassTypeBw struct {
	Ct0 *int32 `path:"ct0" module:"nokia-conf"`
	Ct1 *int32 `path:"ct1" module:"nokia-conf"`
	Ct2 *int32 `path:"ct2" module:"nokia-conf"`
	Ct3 *int32 `path:"ct3" module:"nokia-conf"`
	Ct4 *int32 `path:"ct4" module:"nokia-conf"`
	Ct5 *int32 `path:"ct5" module:"nokia-conf"`
	Ct6 *int32 `path:"ct6" module:"nokia-conf"`
	Ct7 *int32 `path:"ct7" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_ClassTypeBw implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_ClassTypeBw) IsYANGGoStruct() {}

// GetCt0 retrieves the value of the leaf Ct0 from the NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_ClassTypeBw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ct0 is set, it can
// safely use t.GetCt0() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ct0 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_ClassTypeBw) GetCt0() int32 {
	if t == nil || t.Ct0 == nil {
		return 0
	}
	return *t.Ct0
}

// GetCt1 retrieves the value of the leaf Ct1 from the NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_ClassTypeBw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ct1 is set, it can
// safely use t.GetCt1() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ct1 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_ClassTypeBw) GetCt1() int32 {
	if t == nil || t.Ct1 == nil {
		return 0
	}
	return *t.Ct1
}

// GetCt2 retrieves the value of the leaf Ct2 from the NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_ClassTypeBw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ct2 is set, it can
// safely use t.GetCt2() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ct2 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_ClassTypeBw) GetCt2() int32 {
	if t == nil || t.Ct2 == nil {
		return 0
	}
	return *t.Ct2
}

// GetCt3 retrieves the value of the leaf Ct3 from the NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_ClassTypeBw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ct3 is set, it can
// safely use t.GetCt3() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ct3 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_ClassTypeBw) GetCt3() int32 {
	if t == nil || t.Ct3 == nil {
		return 0
	}
	return *t.Ct3
}

// GetCt4 retrieves the value of the leaf Ct4 from the NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_ClassTypeBw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ct4 is set, it can
// safely use t.GetCt4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ct4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_ClassTypeBw) GetCt4() int32 {
	if t == nil || t.Ct4 == nil {
		return 0
	}
	return *t.Ct4
}

// GetCt5 retrieves the value of the leaf Ct5 from the NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_ClassTypeBw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ct5 is set, it can
// safely use t.GetCt5() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ct5 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_ClassTypeBw) GetCt5() int32 {
	if t == nil || t.Ct5 == nil {
		return 0
	}
	return *t.Ct5
}

// GetCt6 retrieves the value of the leaf Ct6 from the NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_ClassTypeBw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ct6 is set, it can
// safely use t.GetCt6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ct6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_ClassTypeBw) GetCt6() int32 {
	if t == nil || t.Ct6 == nil {
		return 0
	}
	return *t.Ct6
}

// GetCt7 retrieves the value of the leaf Ct7 from the NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_ClassTypeBw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ct7 is set, it can
// safely use t.GetCt7() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ct7 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_ClassTypeBw) GetCt7() int32 {
	if t == nil || t.Ct7 == nil {
		return 0
	}
	return *t.Ct7
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_ClassTypeBw
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_ClassTypeBw) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ct0 == nil {
		var v int32 = 0
		t.Ct0 = &v
	}
	if t.Ct1 == nil {
		var v int32 = 0
		t.Ct1 = &v
	}
	if t.Ct2 == nil {
		var v int32 = 0
		t.Ct2 = &v
	}
	if t.Ct3 == nil {
		var v int32 = 0
		t.Ct3 = &v
	}
	if t.Ct4 == nil {
		var v int32 = 0
		t.Ct4 = &v
	}
	if t.Ct5 == nil {
		var v int32 = 0
		t.Ct5 = &v
	}
	if t.Ct6 == nil {
		var v int32 = 0
		t.Ct6 = &v
	}
	if t.Ct7 == nil {
		var v int32 = 0
		t.Ct7 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_ClassTypeBw) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_ClassTypeBw"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_ClassTypeBw) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_ClassTypeBw) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_ClassTypeBw.
func (*NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_ClassTypeBw) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_Fc represents the /nokia-conf/configure/groups/group/router/rsvp/diffserv-te/fc YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_Fc struct {
	ClassType *int32                                                                  `path:"class-type" module:"nokia-conf"`
	FcName    NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_Fc_FcName_Union `path:"fc-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_Fc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_Fc) IsYANGGoStruct() {}

// GetClassType retrieves the value of the leaf ClassType from the NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClassType is set, it can
// safely use t.GetClassType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClassType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_Fc) GetClassType() int32 {
	if t == nil || t.ClassType == nil {
		return 0
	}
	return *t.ClassType
}

// GetFcName retrieves the value of the leaf FcName from the NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FcName is set, it can
// safely use t.GetFcName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FcName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_Fc) GetFcName() NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_Fc_FcName_Union {
	if t == nil || t.FcName == nil {
		return nil
	}
	return t.FcName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_Fc
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_Fc) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_Fc struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_Fc) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"fc-name": t.FcName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_Fc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_Fc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_Fc) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_Fc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_Fc.
func (*NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_Fc) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_TeClass represents the /nokia-conf/configure/groups/group/router/rsvp/diffserv-te/te-class YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_TeClass struct {
	ClassType     *int32                                                                              `path:"class-type" module:"nokia-conf"`
	Priority      *int32                                                                              `path:"priority" module:"nokia-conf"`
	TeClassNumber NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_TeClass_TeClassNumber_Union `path:"te-class-number" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_TeClass implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_TeClass) IsYANGGoStruct() {}

// GetClassType retrieves the value of the leaf ClassType from the NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_TeClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClassType is set, it can
// safely use t.GetClassType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClassType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_TeClass) GetClassType() int32 {
	if t == nil || t.ClassType == nil {
		return 0
	}
	return *t.ClassType
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_TeClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_TeClass) GetPriority() int32 {
	if t == nil || t.Priority == nil {
		return 0
	}
	return *t.Priority
}

// GetTeClassNumber retrieves the value of the leaf TeClassNumber from the NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_TeClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TeClassNumber is set, it can
// safely use t.GetTeClassNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TeClassNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_TeClass) GetTeClassNumber() NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_TeClass_TeClassNumber_Union {
	if t == nil || t.TeClassNumber == nil {
		return nil
	}
	return t.TeClassNumber
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_TeClass
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_TeClass) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_TeClass struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_TeClass) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"te-class-number": t.TeClassNumber,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_TeClass) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_TeClass"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_TeClass) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_TeClass) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_TeClass.
func (*NokiaConf_Configure_Groups_Group_Router_Rsvp_DiffservTe_TeClass) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Rsvp_GracefulRestart represents the /nokia-conf/configure/groups/group/router/rsvp/graceful-restart YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Rsvp_GracefulRestart struct {
	MaxRecovery *uint32 `path:"max-recovery" module:"nokia-conf"`
	MaxRestart  *uint32 `path:"max-restart" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Rsvp_GracefulRestart implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Rsvp_GracefulRestart) IsYANGGoStruct() {}

// GetMaxRecovery retrieves the value of the leaf MaxRecovery from the NokiaConf_Configure_Groups_Group_Router_Rsvp_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRecovery is set, it can
// safely use t.GetMaxRecovery() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRecovery == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_GracefulRestart) GetMaxRecovery() uint32 {
	if t == nil || t.MaxRecovery == nil {
		return 300
	}
	return *t.MaxRecovery
}

// GetMaxRestart retrieves the value of the leaf MaxRestart from the NokiaConf_Configure_Groups_Group_Router_Rsvp_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRestart is set, it can
// safely use t.GetMaxRestart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRestart == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_GracefulRestart) GetMaxRestart() uint32 {
	if t == nil || t.MaxRestart == nil {
		return 120
	}
	return *t.MaxRestart
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Rsvp_GracefulRestart
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_GracefulRestart) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxRecovery == nil {
		var v uint32 = 300
		t.MaxRecovery = &v
	}
	if t.MaxRestart == nil {
		var v uint32 = 120
		t.MaxRestart = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_GracefulRestart) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Rsvp_GracefulRestart"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_GracefulRestart) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_GracefulRestart) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Rsvp_GracefulRestart.
func (*NokiaConf_Configure_Groups_Group_Router_Rsvp_GracefulRestart) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface represents the /nokia-conf/configure/groups/group/router/rsvp/interface YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface struct {
	AdminState                E_NokiaTypesSros_AdminState                                              `path:"admin-state" module:"nokia-conf"`
	AuthenticationKey         *string                                                                  `path:"authentication-key" module:"nokia-conf"`
	AuthenticationKeychain    *string                                                                  `path:"authentication-keychain" module:"nokia-conf"`
	BfdLiveness               *bool                                                                    `path:"bfd-liveness" module:"nokia-conf"`
	ClassTypeBw               *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_ClassTypeBw      `path:"class-type-bw" module:"nokia-conf" yangPresence:"true"`
	DbwDownThreshold          *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_DbwDownThreshold `path:"dbw-down-threshold" module:"nokia-conf" yangPresence:"true"`
	DbwMultiplier             *int32                                                                   `path:"dbw-multiplier" module:"nokia-conf"`
	DbwUpThreshold            *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_DbwUpThreshold   `path:"dbw-up-threshold" module:"nokia-conf" yangPresence:"true"`
	GracefulRestartHelperMode *bool                                                                    `path:"graceful-restart-helper-mode" module:"nokia-conf"`
	GracefulShutdown          *bool                                                                    `path:"graceful-shutdown" module:"nokia-conf"`
	HelloInterval             *uint32                                                                  `path:"hello-interval" module:"nokia-conf"`
	ImplicitNullLabel         *bool                                                                    `path:"implicit-null-label" module:"nokia-conf"`
	InterfaceName             *string                                                                  `path:"interface-name" module:"nokia-conf"`
	RefreshReduction          *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_RefreshReduction `path:"refresh-reduction" module:"nokia-conf" yangPresence:"true"`
	Subscription              *uint32                                                                  `path:"subscription" module:"nokia-conf"`
	TeDownThreshold           *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_TeDownThreshold  `path:"te-down-threshold" module:"nokia-conf" yangPresence:"true"`
	TeUpThreshold             *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_TeUpThreshold    `path:"te-up-threshold" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface) IsYANGGoStruct() {}

// GetOrCreateClassTypeBw retrieves the value of the ClassTypeBw field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface) GetOrCreateClassTypeBw() *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_ClassTypeBw {
	if t.ClassTypeBw != nil {
		return t.ClassTypeBw
	}
	t.ClassTypeBw = &NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_ClassTypeBw{}
	return t.ClassTypeBw
}

// GetOrCreateDbwDownThreshold retrieves the value of the DbwDownThreshold field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface) GetOrCreateDbwDownThreshold() *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_DbwDownThreshold {
	if t.DbwDownThreshold != nil {
		return t.DbwDownThreshold
	}
	t.DbwDownThreshold = &NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_DbwDownThreshold{}
	return t.DbwDownThreshold
}

// GetOrCreateDbwUpThreshold retrieves the value of the DbwUpThreshold field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface) GetOrCreateDbwUpThreshold() *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_DbwUpThreshold {
	if t.DbwUpThreshold != nil {
		return t.DbwUpThreshold
	}
	t.DbwUpThreshold = &NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_DbwUpThreshold{}
	return t.DbwUpThreshold
}

// GetOrCreateRefreshReduction retrieves the value of the RefreshReduction field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface) GetOrCreateRefreshReduction() *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_RefreshReduction {
	if t.RefreshReduction != nil {
		return t.RefreshReduction
	}
	t.RefreshReduction = &NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_RefreshReduction{}
	return t.RefreshReduction
}

// GetOrCreateTeDownThreshold retrieves the value of the TeDownThreshold field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface) GetOrCreateTeDownThreshold() *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_TeDownThreshold {
	if t.TeDownThreshold != nil {
		return t.TeDownThreshold
	}
	t.TeDownThreshold = &NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_TeDownThreshold{}
	return t.TeDownThreshold
}

// GetOrCreateTeUpThreshold retrieves the value of the TeUpThreshold field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface) GetOrCreateTeUpThreshold() *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_TeUpThreshold {
	if t.TeUpThreshold != nil {
		return t.TeUpThreshold
	}
	t.TeUpThreshold = &NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_TeUpThreshold{}
	return t.TeUpThreshold
}

// GetClassTypeBw returns the value of the ClassTypeBw struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface. If the receiver or the field ClassTypeBw is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface) GetClassTypeBw() *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_ClassTypeBw {
	if t != nil && t.ClassTypeBw != nil {
		return t.ClassTypeBw
	}
	return nil
}

// GetDbwDownThreshold returns the value of the DbwDownThreshold struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface. If the receiver or the field DbwDownThreshold is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface) GetDbwDownThreshold() *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_DbwDownThreshold {
	if t != nil && t.DbwDownThreshold != nil {
		return t.DbwDownThreshold
	}
	return nil
}

// GetDbwUpThreshold returns the value of the DbwUpThreshold struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface. If the receiver or the field DbwUpThreshold is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface) GetDbwUpThreshold() *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_DbwUpThreshold {
	if t != nil && t.DbwUpThreshold != nil {
		return t.DbwUpThreshold
	}
	return nil
}

// GetRefreshReduction returns the value of the RefreshReduction struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface. If the receiver or the field RefreshReduction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface) GetRefreshReduction() *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_RefreshReduction {
	if t != nil && t.RefreshReduction != nil {
		return t.RefreshReduction
	}
	return nil
}

// GetTeDownThreshold returns the value of the TeDownThreshold struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface. If the receiver or the field TeDownThreshold is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface) GetTeDownThreshold() *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_TeDownThreshold {
	if t != nil && t.TeDownThreshold != nil {
		return t.TeDownThreshold
	}
	return nil
}

// GetTeUpThreshold returns the value of the TeUpThreshold struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface. If the receiver or the field TeUpThreshold is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface) GetTeUpThreshold() *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_TeUpThreshold {
	if t != nil && t.TeUpThreshold != nil {
		return t.TeUpThreshold
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetAuthenticationKey retrieves the value of the leaf AuthenticationKey from the NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKey is set, it can
// safely use t.GetAuthenticationKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface) GetAuthenticationKey() string {
	if t == nil || t.AuthenticationKey == nil {
		return ""
	}
	return *t.AuthenticationKey
}

// GetAuthenticationKeychain retrieves the value of the leaf AuthenticationKeychain from the NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKeychain is set, it can
// safely use t.GetAuthenticationKeychain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKeychain == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface) GetAuthenticationKeychain() string {
	if t == nil || t.AuthenticationKeychain == nil {
		return ""
	}
	return *t.AuthenticationKeychain
}

// GetBfdLiveness retrieves the value of the leaf BfdLiveness from the NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdLiveness is set, it can
// safely use t.GetBfdLiveness() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdLiveness == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface) GetBfdLiveness() bool {
	if t == nil || t.BfdLiveness == nil {
		return false
	}
	return *t.BfdLiveness
}

// GetDbwMultiplier retrieves the value of the leaf DbwMultiplier from the NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DbwMultiplier is set, it can
// safely use t.GetDbwMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DbwMultiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface) GetDbwMultiplier() int32 {
	if t == nil || t.DbwMultiplier == nil {
		return 0
	}
	return *t.DbwMultiplier
}

// GetGracefulRestartHelperMode retrieves the value of the leaf GracefulRestartHelperMode from the NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GracefulRestartHelperMode is set, it can
// safely use t.GetGracefulRestartHelperMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GracefulRestartHelperMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface) GetGracefulRestartHelperMode() bool {
	if t == nil || t.GracefulRestartHelperMode == nil {
		return false
	}
	return *t.GracefulRestartHelperMode
}

// GetGracefulShutdown retrieves the value of the leaf GracefulShutdown from the NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GracefulShutdown is set, it can
// safely use t.GetGracefulShutdown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GracefulShutdown == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface) GetGracefulShutdown() bool {
	if t == nil || t.GracefulShutdown == nil {
		return false
	}
	return *t.GracefulShutdown
}

// GetHelloInterval retrieves the value of the leaf HelloInterval from the NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloInterval is set, it can
// safely use t.GetHelloInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface) GetHelloInterval() uint32 {
	if t == nil || t.HelloInterval == nil {
		return 3
	}
	return *t.HelloInterval
}

// GetImplicitNullLabel retrieves the value of the leaf ImplicitNullLabel from the NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImplicitNullLabel is set, it can
// safely use t.GetImplicitNullLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImplicitNullLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface) GetImplicitNullLabel() bool {
	if t == nil || t.ImplicitNullLabel == nil {
		return false
	}
	return *t.ImplicitNullLabel
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetSubscription retrieves the value of the leaf Subscription from the NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Subscription is set, it can
// safely use t.GetSubscription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Subscription == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface) GetSubscription() uint32 {
	if t == nil || t.Subscription == nil {
		return 100
	}
	return *t.Subscription
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.BfdLiveness == nil {
		var v bool = false
		t.BfdLiveness = &v
	}
	if t.GracefulRestartHelperMode == nil {
		var v bool = false
		t.GracefulRestartHelperMode = &v
	}
	if t.GracefulShutdown == nil {
		var v bool = false
		t.GracefulShutdown = &v
	}
	if t.HelloInterval == nil {
		var v uint32 = 3
		t.HelloInterval = &v
	}
	if t.Subscription == nil {
		var v uint32 = 100
		t.Subscription = &v
	}
	t.ClassTypeBw.PopulateDefaults()
	t.DbwDownThreshold.PopulateDefaults()
	t.DbwUpThreshold.PopulateDefaults()
	t.RefreshReduction.PopulateDefaults()
	t.TeDownThreshold.PopulateDefaults()
	t.TeUpThreshold.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface.
func (*NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_ClassTypeBw represents the /nokia-conf/configure/groups/group/router/rsvp/interface/class-type-bw YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_ClassTypeBw struct {
	Ct0 *int32 `path:"ct0" module:"nokia-conf"`
	Ct1 *int32 `path:"ct1" module:"nokia-conf"`
	Ct2 *int32 `path:"ct2" module:"nokia-conf"`
	Ct3 *int32 `path:"ct3" module:"nokia-conf"`
	Ct4 *int32 `path:"ct4" module:"nokia-conf"`
	Ct5 *int32 `path:"ct5" module:"nokia-conf"`
	Ct6 *int32 `path:"ct6" module:"nokia-conf"`
	Ct7 *int32 `path:"ct7" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_ClassTypeBw implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_ClassTypeBw) IsYANGGoStruct() {}

// GetCt0 retrieves the value of the leaf Ct0 from the NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_ClassTypeBw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ct0 is set, it can
// safely use t.GetCt0() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ct0 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_ClassTypeBw) GetCt0() int32 {
	if t == nil || t.Ct0 == nil {
		return 0
	}
	return *t.Ct0
}

// GetCt1 retrieves the value of the leaf Ct1 from the NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_ClassTypeBw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ct1 is set, it can
// safely use t.GetCt1() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ct1 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_ClassTypeBw) GetCt1() int32 {
	if t == nil || t.Ct1 == nil {
		return 0
	}
	return *t.Ct1
}

// GetCt2 retrieves the value of the leaf Ct2 from the NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_ClassTypeBw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ct2 is set, it can
// safely use t.GetCt2() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ct2 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_ClassTypeBw) GetCt2() int32 {
	if t == nil || t.Ct2 == nil {
		return 0
	}
	return *t.Ct2
}

// GetCt3 retrieves the value of the leaf Ct3 from the NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_ClassTypeBw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ct3 is set, it can
// safely use t.GetCt3() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ct3 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_ClassTypeBw) GetCt3() int32 {
	if t == nil || t.Ct3 == nil {
		return 0
	}
	return *t.Ct3
}

// GetCt4 retrieves the value of the leaf Ct4 from the NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_ClassTypeBw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ct4 is set, it can
// safely use t.GetCt4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ct4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_ClassTypeBw) GetCt4() int32 {
	if t == nil || t.Ct4 == nil {
		return 0
	}
	return *t.Ct4
}

// GetCt5 retrieves the value of the leaf Ct5 from the NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_ClassTypeBw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ct5 is set, it can
// safely use t.GetCt5() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ct5 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_ClassTypeBw) GetCt5() int32 {
	if t == nil || t.Ct5 == nil {
		return 0
	}
	return *t.Ct5
}

// GetCt6 retrieves the value of the leaf Ct6 from the NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_ClassTypeBw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ct6 is set, it can
// safely use t.GetCt6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ct6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_ClassTypeBw) GetCt6() int32 {
	if t == nil || t.Ct6 == nil {
		return 0
	}
	return *t.Ct6
}

// GetCt7 retrieves the value of the leaf Ct7 from the NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_ClassTypeBw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ct7 is set, it can
// safely use t.GetCt7() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ct7 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_ClassTypeBw) GetCt7() int32 {
	if t == nil || t.Ct7 == nil {
		return 0
	}
	return *t.Ct7
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_ClassTypeBw
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_ClassTypeBw) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_ClassTypeBw) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_ClassTypeBw"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_ClassTypeBw) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_ClassTypeBw) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_ClassTypeBw.
func (*NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_ClassTypeBw) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_DbwDownThreshold represents the /nokia-conf/configure/groups/group/router/rsvp/interface/dbw-down-threshold YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_DbwDownThreshold struct {
	Bw      *int32 `path:"bw" module:"nokia-conf"`
	Percent *int32 `path:"percent" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_DbwDownThreshold implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_DbwDownThreshold) IsYANGGoStruct() {}

// GetBw retrieves the value of the leaf Bw from the NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_DbwDownThreshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bw is set, it can
// safely use t.GetBw() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bw == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_DbwDownThreshold) GetBw() int32 {
	if t == nil || t.Bw == nil {
		return 0
	}
	return *t.Bw
}

// GetPercent retrieves the value of the leaf Percent from the NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_DbwDownThreshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Percent is set, it can
// safely use t.GetPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Percent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_DbwDownThreshold) GetPercent() int32 {
	if t == nil || t.Percent == nil {
		return 0
	}
	return *t.Percent
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_DbwDownThreshold
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_DbwDownThreshold) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_DbwDownThreshold) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_DbwDownThreshold"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_DbwDownThreshold) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_DbwDownThreshold) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_DbwDownThreshold.
func (*NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_DbwDownThreshold) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_DbwUpThreshold represents the /nokia-conf/configure/groups/group/router/rsvp/interface/dbw-up-threshold YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_DbwUpThreshold struct {
	Bw      *int32 `path:"bw" module:"nokia-conf"`
	Percent *int32 `path:"percent" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_DbwUpThreshold implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_DbwUpThreshold) IsYANGGoStruct() {}

// GetBw retrieves the value of the leaf Bw from the NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_DbwUpThreshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bw is set, it can
// safely use t.GetBw() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bw == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_DbwUpThreshold) GetBw() int32 {
	if t == nil || t.Bw == nil {
		return 0
	}
	return *t.Bw
}

// GetPercent retrieves the value of the leaf Percent from the NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_DbwUpThreshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Percent is set, it can
// safely use t.GetPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Percent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_DbwUpThreshold) GetPercent() int32 {
	if t == nil || t.Percent == nil {
		return 0
	}
	return *t.Percent
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_DbwUpThreshold
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_DbwUpThreshold) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_DbwUpThreshold) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_DbwUpThreshold"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_DbwUpThreshold) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_DbwUpThreshold) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_DbwUpThreshold.
func (*NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_DbwUpThreshold) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_RefreshReduction represents the /nokia-conf/configure/groups/group/router/rsvp/interface/refresh-reduction YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_RefreshReduction struct {
	ReliableDelivery *bool `path:"reliable-delivery" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_RefreshReduction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_RefreshReduction) IsYANGGoStruct() {}

// GetReliableDelivery retrieves the value of the leaf ReliableDelivery from the NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_RefreshReduction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReliableDelivery is set, it can
// safely use t.GetReliableDelivery() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReliableDelivery == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_RefreshReduction) GetReliableDelivery() bool {
	if t == nil || t.ReliableDelivery == nil {
		return false
	}
	return *t.ReliableDelivery
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_RefreshReduction
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_RefreshReduction) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ReliableDelivery == nil {
		var v bool = false
		t.ReliableDelivery = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_RefreshReduction) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_RefreshReduction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_RefreshReduction) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_RefreshReduction) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_RefreshReduction.
func (*NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_RefreshReduction) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_TeDownThreshold represents the /nokia-conf/configure/groups/group/router/rsvp/interface/te-down-threshold YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_TeDownThreshold struct {
	Value []int32 `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_TeDownThreshold implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_TeDownThreshold) IsYANGGoStruct() {}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_TeDownThreshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_TeDownThreshold) GetValue() []int32 {
	if t == nil || t.Value == nil {
		return nil
	}
	return t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_TeDownThreshold
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_TeDownThreshold) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_TeDownThreshold) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_TeDownThreshold"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_TeDownThreshold) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_TeDownThreshold) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_TeDownThreshold.
func (*NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_TeDownThreshold) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_TeUpThreshold represents the /nokia-conf/configure/groups/group/router/rsvp/interface/te-up-threshold YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_TeUpThreshold struct {
	Value []int32 `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_TeUpThreshold implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_TeUpThreshold) IsYANGGoStruct() {}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_TeUpThreshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_TeUpThreshold) GetValue() []int32 {
	if t == nil || t.Value == nil {
		return nil
	}
	return t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_TeUpThreshold
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_TeUpThreshold) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_TeUpThreshold) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_TeUpThreshold"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_TeUpThreshold) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_TeUpThreshold) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_TeUpThreshold.
func (*NokiaConf_Configure_Groups_Group_Router_Rsvp_Interface_TeUpThreshold) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Rsvp_MsgPacing represents the /nokia-conf/configure/groups/group/router/rsvp/msg-pacing YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Rsvp_MsgPacing struct {
	MaxBurst *uint32 `path:"max-burst" module:"nokia-conf"`
	Period   *uint32 `path:"period" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Rsvp_MsgPacing implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Rsvp_MsgPacing) IsYANGGoStruct() {}

// GetMaxBurst retrieves the value of the leaf MaxBurst from the NokiaConf_Configure_Groups_Group_Router_Rsvp_MsgPacing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxBurst is set, it can
// safely use t.GetMaxBurst() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxBurst == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_MsgPacing) GetMaxBurst() uint32 {
	if t == nil || t.MaxBurst == nil {
		return 650
	}
	return *t.MaxBurst
}

// GetPeriod retrieves the value of the leaf Period from the NokiaConf_Configure_Groups_Group_Router_Rsvp_MsgPacing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Period is set, it can
// safely use t.GetPeriod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Period == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_MsgPacing) GetPeriod() uint32 {
	if t == nil || t.Period == nil {
		return 100
	}
	return *t.Period
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Rsvp_MsgPacing
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_MsgPacing) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxBurst == nil {
		var v uint32 = 650
		t.MaxBurst = &v
	}
	if t.Period == nil {
		var v uint32 = 100
		t.Period = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_MsgPacing) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Rsvp_MsgPacing"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_MsgPacing) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_MsgPacing) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Rsvp_MsgPacing.
func (*NokiaConf_Configure_Groups_Group_Router_Rsvp_MsgPacing) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Rsvp_TeThresholdUpdate represents the /nokia-conf/configure/groups/group/router/rsvp/te-threshold-update YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Rsvp_TeThresholdUpdate struct {
	OnCacFailure *bool   `path:"on-cac-failure" module:"nokia-conf"`
	UpdateTimer  *uint32 `path:"update-timer" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Rsvp_TeThresholdUpdate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Rsvp_TeThresholdUpdate) IsYANGGoStruct() {}

// GetOnCacFailure retrieves the value of the leaf OnCacFailure from the NokiaConf_Configure_Groups_Group_Router_Rsvp_TeThresholdUpdate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OnCacFailure is set, it can
// safely use t.GetOnCacFailure() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OnCacFailure == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_TeThresholdUpdate) GetOnCacFailure() bool {
	if t == nil || t.OnCacFailure == nil {
		return false
	}
	return *t.OnCacFailure
}

// GetUpdateTimer retrieves the value of the leaf UpdateTimer from the NokiaConf_Configure_Groups_Group_Router_Rsvp_TeThresholdUpdate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UpdateTimer is set, it can
// safely use t.GetUpdateTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UpdateTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_TeThresholdUpdate) GetUpdateTimer() uint32 {
	if t == nil || t.UpdateTimer == nil {
		return 0
	}
	return *t.UpdateTimer
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Rsvp_TeThresholdUpdate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_TeThresholdUpdate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.OnCacFailure == nil {
		var v bool = false
		t.OnCacFailure = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_TeThresholdUpdate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Rsvp_TeThresholdUpdate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_TeThresholdUpdate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Rsvp_TeThresholdUpdate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Rsvp_TeThresholdUpdate.
func (*NokiaConf_Configure_Groups_Group_Router_Rsvp_TeThresholdUpdate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_SegmentRouting represents the /nokia-conf/configure/groups/group/router/segment-routing YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_SegmentRouting struct {
	MaintenancePolicy map[string]*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_MaintenancePolicy `path:"maintenance-policy" module:"nokia-conf"`
	SegmentRoutingV6  *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6             `path:"segment-routing-v6" module:"nokia-conf" yangPresence:"true"`
	SrMpls            *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls                       `path:"sr-mpls" module:"nokia-conf" yangPresence:"true"`
	SrPolicies        *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies                   `path:"sr-policies" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_SegmentRouting implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_SegmentRouting) IsYANGGoStruct() {}

// NewMaintenancePolicy creates a new entry in the MaintenancePolicy list of the
// NokiaConf_Configure_Groups_Group_Router_SegmentRouting struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting) NewMaintenancePolicy(PolicyName string) (*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_MaintenancePolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MaintenancePolicy == nil {
		t.MaintenancePolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_MaintenancePolicy)
	}

	key := PolicyName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MaintenancePolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MaintenancePolicy", key)
	}

	t.MaintenancePolicy[key] = &NokiaConf_Configure_Groups_Group_Router_SegmentRouting_MaintenancePolicy{
		PolicyName: &PolicyName,
	}

	return t.MaintenancePolicy[key], nil
}

// RenameMaintenancePolicy renames an entry in the list MaintenancePolicy within
// the NokiaConf_Configure_Groups_Group_Router_SegmentRouting struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting) RenameMaintenancePolicy(oldK, newK string) error {
	if _, ok := t.MaintenancePolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in MaintenancePolicy", newK)
	}

	e, ok := t.MaintenancePolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MaintenancePolicy", oldK)
	}
	e.PolicyName = &newK

	t.MaintenancePolicy[newK] = e
	delete(t.MaintenancePolicy, oldK)
	return nil
}

// GetOrCreateMaintenancePolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_SegmentRouting. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting) GetOrCreateMaintenancePolicy(PolicyName string) *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_MaintenancePolicy {

	key := PolicyName

	if v, ok := t.MaintenancePolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMaintenancePolicy(PolicyName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMaintenancePolicy got unexpected error: %v", err))
	}
	return v
}

// GetMaintenancePolicy retrieves the value with the specified key from
// the MaintenancePolicy map field of NokiaConf_Configure_Groups_Group_Router_SegmentRouting. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting) GetMaintenancePolicy(PolicyName string) *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_MaintenancePolicy {

	if t == nil {
		return nil
	}

	key := PolicyName

	if lm, ok := t.MaintenancePolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteMaintenancePolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_SegmentRouting. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting) DeleteMaintenancePolicy(PolicyName string) {
	key := PolicyName

	delete(t.MaintenancePolicy, key)
}

// AppendMaintenancePolicy appends the supplied NokiaConf_Configure_Groups_Group_Router_SegmentRouting_MaintenancePolicy struct to the
// list MaintenancePolicy of NokiaConf_Configure_Groups_Group_Router_SegmentRouting. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_SegmentRouting_MaintenancePolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting) AppendMaintenancePolicy(v *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_MaintenancePolicy) error {
	if v.PolicyName == nil {
		return fmt.Errorf("invalid nil key received for PolicyName")
	}

	key := *v.PolicyName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MaintenancePolicy == nil {
		t.MaintenancePolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_MaintenancePolicy)
	}

	if _, ok := t.MaintenancePolicy[key]; ok {
		return fmt.Errorf("duplicate key for list MaintenancePolicy %v", key)
	}

	t.MaintenancePolicy[key] = v
	return nil
}

// GetOrCreateSegmentRoutingV6 retrieves the value of the SegmentRoutingV6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting) GetOrCreateSegmentRoutingV6() *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6 {
	if t.SegmentRoutingV6 != nil {
		return t.SegmentRoutingV6
	}
	t.SegmentRoutingV6 = &NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6{}
	return t.SegmentRoutingV6
}

// GetOrCreateSrMpls retrieves the value of the SrMpls field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting) GetOrCreateSrMpls() *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls {
	if t.SrMpls != nil {
		return t.SrMpls
	}
	t.SrMpls = &NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls{}
	return t.SrMpls
}

// GetOrCreateSrPolicies retrieves the value of the SrPolicies field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting) GetOrCreateSrPolicies() *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies {
	if t.SrPolicies != nil {
		return t.SrPolicies
	}
	t.SrPolicies = &NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies{}
	return t.SrPolicies
}

// GetSegmentRoutingV6 returns the value of the SegmentRoutingV6 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_SegmentRouting. If the receiver or the field SegmentRoutingV6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting) GetSegmentRoutingV6() *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6 {
	if t != nil && t.SegmentRoutingV6 != nil {
		return t.SegmentRoutingV6
	}
	return nil
}

// GetSrMpls returns the value of the SrMpls struct pointer
// from NokiaConf_Configure_Groups_Group_Router_SegmentRouting. If the receiver or the field SrMpls is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting) GetSrMpls() *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls {
	if t != nil && t.SrMpls != nil {
		return t.SrMpls
	}
	return nil
}

// GetSrPolicies returns the value of the SrPolicies struct pointer
// from NokiaConf_Configure_Groups_Group_Router_SegmentRouting. If the receiver or the field SrPolicies is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting) GetSrPolicies() *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies {
	if t != nil && t.SrPolicies != nil {
		return t.SrPolicies
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_SegmentRouting
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.SegmentRoutingV6.PopulateDefaults()
	t.SrMpls.PopulateDefaults()
	t.SrPolicies.PopulateDefaults()
	for _, e := range t.MaintenancePolicy {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_SegmentRouting"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_SegmentRouting.
func (*NokiaConf_Configure_Groups_Group_Router_SegmentRouting) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_SegmentRouting_MaintenancePolicy represents the /nokia-conf/configure/groups/group/router/segment-routing/maintenance-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_SegmentRouting_MaintenancePolicy struct {
	AdminState    E_NokiaTypesSros_AdminState                                                     `path:"admin-state" module:"nokia-conf"`
	BfdLiveness   *bool                                                                           `path:"bfd-liveness" module:"nokia-conf"`
	BfdTemplate   *string                                                                         `path:"bfd-template" module:"nokia-conf"`
	HoldDownTimer *uint32                                                                         `path:"hold-down-timer" module:"nokia-conf"`
	Mode          E_NokiaConf_Configure_Groups_Group_Router_SegmentRouting_MaintenancePolicy_Mode `path:"mode" module:"nokia-conf"`
	PolicyName    *string                                                                         `path:"policy-name" module:"nokia-conf"`
	RevertTimer   *uint32                                                                         `path:"revert-timer" module:"nokia-conf"`
	Threshold     *uint32                                                                         `path:"threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_SegmentRouting_MaintenancePolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_MaintenancePolicy) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_MaintenancePolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_MaintenancePolicy) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetBfdLiveness retrieves the value of the leaf BfdLiveness from the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_MaintenancePolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdLiveness is set, it can
// safely use t.GetBfdLiveness() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdLiveness == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_MaintenancePolicy) GetBfdLiveness() bool {
	if t == nil || t.BfdLiveness == nil {
		return false
	}
	return *t.BfdLiveness
}

// GetBfdTemplate retrieves the value of the leaf BfdTemplate from the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_MaintenancePolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdTemplate is set, it can
// safely use t.GetBfdTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_MaintenancePolicy) GetBfdTemplate() string {
	if t == nil || t.BfdTemplate == nil {
		return ""
	}
	return *t.BfdTemplate
}

// GetHoldDownTimer retrieves the value of the leaf HoldDownTimer from the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_MaintenancePolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldDownTimer is set, it can
// safely use t.GetHoldDownTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldDownTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_MaintenancePolicy) GetHoldDownTimer() uint32 {
	if t == nil || t.HoldDownTimer == nil {
		return 0
	}
	return *t.HoldDownTimer
}

// GetMode retrieves the value of the leaf Mode from the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_MaintenancePolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_MaintenancePolicy) GetMode() E_NokiaConf_Configure_Groups_Group_Router_SegmentRouting_MaintenancePolicy_Mode {
	if t == nil || t.Mode == 0 {
		return NokiaConf_Configure_Groups_Group_Router_SegmentRouting_MaintenancePolicy_Mode_none
	}
	return t.Mode
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_MaintenancePolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_MaintenancePolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// GetRevertTimer retrieves the value of the leaf RevertTimer from the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_MaintenancePolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RevertTimer is set, it can
// safely use t.GetRevertTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RevertTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_MaintenancePolicy) GetRevertTimer() uint32 {
	if t == nil || t.RevertTimer == nil {
		return 0
	}
	return *t.RevertTimer
}

// GetThreshold retrieves the value of the leaf Threshold from the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_MaintenancePolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Threshold is set, it can
// safely use t.GetThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Threshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_MaintenancePolicy) GetThreshold() uint32 {
	if t == nil || t.Threshold == nil {
		return 1
	}
	return *t.Threshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_MaintenancePolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_MaintenancePolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.BfdLiveness == nil {
		var v bool = false
		t.BfdLiveness = &v
	}
	if t.HoldDownTimer == nil {
		var v uint32 = 0
		t.HoldDownTimer = &v
	}
	if t.Mode == 0 {
		t.Mode = NokiaConf_Configure_Groups_Group_Router_SegmentRouting_MaintenancePolicy_Mode_none
	}
	if t.RevertTimer == nil {
		var v uint32 = 0
		t.RevertTimer = &v
	}
	if t.Threshold == nil {
		var v uint32 = 1
		t.Threshold = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_MaintenancePolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_MaintenancePolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PolicyName == nil {
		return nil, fmt.Errorf("nil value for key PolicyName")
	}

	return map[string]interface{}{
		"policy-name": *t.PolicyName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_MaintenancePolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_SegmentRouting_MaintenancePolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_MaintenancePolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_MaintenancePolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_SegmentRouting_MaintenancePolicy.
func (*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_MaintenancePolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6 represents the /nokia-conf/configure/groups/group/router/segment-routing/segment-routing-v6 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6 struct {
	BaseRoutingInstance *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance `path:"base-routing-instance" module:"nokia-conf" yangPresence:"true"`
	Locator             map[string]*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator  `path:"locator" module:"nokia-conf"`
	OriginationFpe      []uint32                                                                                     `path:"origination-fpe" module:"nokia-conf"`
	SourceAddress       *string                                                                                      `path:"source-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6) IsYANGGoStruct() {}

// NewLocator creates a new entry in the Locator list of the
// NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6) NewLocator(LocatorName string) (*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Locator == nil {
		t.Locator = make(map[string]*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator)
	}

	key := LocatorName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Locator[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Locator", key)
	}

	t.Locator[key] = &NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator{
		LocatorName: &LocatorName,
	}

	return t.Locator[key], nil
}

// RenameLocator renames an entry in the list Locator within
// the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6) RenameLocator(oldK, newK string) error {
	if _, ok := t.Locator[newK]; ok {
		return fmt.Errorf("key %v already exists in Locator", newK)
	}

	e, ok := t.Locator[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Locator", oldK)
	}
	e.LocatorName = &newK

	t.Locator[newK] = e
	delete(t.Locator, oldK)
	return nil
}

// GetOrCreateLocator retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6) GetOrCreateLocator(LocatorName string) *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator {

	key := LocatorName

	if v, ok := t.Locator[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLocator(LocatorName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLocator got unexpected error: %v", err))
	}
	return v
}

// GetLocator retrieves the value with the specified key from
// the Locator map field of NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6) GetLocator(LocatorName string) *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator {

	if t == nil {
		return nil
	}

	key := LocatorName

	if lm, ok := t.Locator[key]; ok {
		return lm
	}
	return nil
}

// DeleteLocator deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6) DeleteLocator(LocatorName string) {
	key := LocatorName

	delete(t.Locator, key)
}

// AppendLocator appends the supplied NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator struct to the
// list Locator of NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6) AppendLocator(v *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator) error {
	if v.LocatorName == nil {
		return fmt.Errorf("invalid nil key received for LocatorName")
	}

	key := *v.LocatorName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Locator == nil {
		t.Locator = make(map[string]*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator)
	}

	if _, ok := t.Locator[key]; ok {
		return fmt.Errorf("duplicate key for list Locator %v", key)
	}

	t.Locator[key] = v
	return nil
}

// GetOrCreateBaseRoutingInstance retrieves the value of the BaseRoutingInstance field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6) GetOrCreateBaseRoutingInstance() *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance {
	if t.BaseRoutingInstance != nil {
		return t.BaseRoutingInstance
	}
	t.BaseRoutingInstance = &NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance{}
	return t.BaseRoutingInstance
}

// GetBaseRoutingInstance returns the value of the BaseRoutingInstance struct pointer
// from NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6. If the receiver or the field BaseRoutingInstance is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6) GetBaseRoutingInstance() *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance {
	if t != nil && t.BaseRoutingInstance != nil {
		return t.BaseRoutingInstance
	}
	return nil
}

// GetOriginationFpe retrieves the value of the leaf OriginationFpe from the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OriginationFpe is set, it can
// safely use t.GetOriginationFpe() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OriginationFpe == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6) GetOriginationFpe() []uint32 {
	if t == nil || t.OriginationFpe == nil {
		return nil
	}
	return t.OriginationFpe
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.BaseRoutingInstance.PopulateDefaults()
	for _, e := range t.Locator {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6.
func (*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance represents the /nokia-conf/configure/groups/group/router/segment-routing/segment-routing-v6/base-routing-instance YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance struct {
	Locator map[string]*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator `path:"locator" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance) IsYANGGoStruct() {
}

// NewLocator creates a new entry in the Locator list of the
// NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance) NewLocator(LocatorName string) (*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Locator == nil {
		t.Locator = make(map[string]*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator)
	}

	key := LocatorName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Locator[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Locator", key)
	}

	t.Locator[key] = &NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator{
		LocatorName: &LocatorName,
	}

	return t.Locator[key], nil
}

// RenameLocator renames an entry in the list Locator within
// the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance) RenameLocator(oldK, newK string) error {
	if _, ok := t.Locator[newK]; ok {
		return fmt.Errorf("key %v already exists in Locator", newK)
	}

	e, ok := t.Locator[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Locator", oldK)
	}
	e.LocatorName = &newK

	t.Locator[newK] = e
	delete(t.Locator, oldK)
	return nil
}

// GetOrCreateLocator retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance) GetOrCreateLocator(LocatorName string) *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator {

	key := LocatorName

	if v, ok := t.Locator[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLocator(LocatorName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLocator got unexpected error: %v", err))
	}
	return v
}

// GetLocator retrieves the value with the specified key from
// the Locator map field of NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance) GetLocator(LocatorName string) *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator {

	if t == nil {
		return nil
	}

	key := LocatorName

	if lm, ok := t.Locator[key]; ok {
		return lm
	}
	return nil
}

// DeleteLocator deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance) DeleteLocator(LocatorName string) {
	key := LocatorName

	delete(t.Locator, key)
}

// AppendLocator appends the supplied NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator struct to the
// list Locator of NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance) AppendLocator(v *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator) error {
	if v.LocatorName == nil {
		return fmt.Errorf("invalid nil key received for LocatorName")
	}

	key := *v.LocatorName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Locator == nil {
		t.Locator = make(map[string]*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator)
	}

	if _, ok := t.Locator[key]; ok {
		return fmt.Errorf("duplicate key for list Locator %v", key)
	}

	t.Locator[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Locator {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance.
func (*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator represents the /nokia-conf/configure/groups/group/router/segment-routing/segment-routing-v6/base-routing-instance/locator YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator struct {
	Function    *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function `path:"function" module:"nokia-conf"`
	LocatorName *string                                                                                                       `path:"locator-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator) IsYANGGoStruct() {
}

// GetOrCreateFunction retrieves the value of the Function field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator) GetOrCreateFunction() *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function {
	if t.Function != nil {
		return t.Function
	}
	t.Function = &NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function{}
	return t.Function
}

// GetFunction returns the value of the Function struct pointer
// from NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator. If the receiver or the field Function is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator) GetFunction() *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function {
	if t != nil && t.Function != nil {
		return t.Function
	}
	return nil
}

// GetLocatorName retrieves the value of the leaf LocatorName from the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocatorName is set, it can
// safely use t.GetLocatorName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocatorName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator) GetLocatorName() string {
	if t == nil || t.LocatorName == nil {
		return ""
	}
	return *t.LocatorName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Function.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LocatorName == nil {
		return nil, fmt.Errorf("nil value for key LocatorName")
	}

	return map[string]interface{}{
		"locator-name": *t.LocatorName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator.
func (*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function represents the /nokia-conf/configure/groups/group/router/segment-routing/segment-routing-v6/base-routing-instance/locator/function YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function struct {
	End              map[NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End_Value_Union]*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End                   `path:"end" module:"nokia-conf"`
	EndDt4           *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt4                                                                                                                                                 `path:"end-dt4" module:"nokia-conf" yangPresence:"true"`
	EndDt46          *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt46                                                                                                                                                `path:"end-dt46" module:"nokia-conf" yangPresence:"true"`
	EndDt6           *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt6                                                                                                                                                 `path:"end-dt6" module:"nokia-conf" yangPresence:"true"`
	EndX             map[NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX_Value_Union]*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX                 `path:"end-x" module:"nokia-conf"`
	EndXAutoAllocate map[NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate_Key]*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate `path:"end-x-auto-allocate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function) IsYANGGoStruct() {
}

// NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate_Key represents the key for list EndXAutoAllocate of element /nokia-conf/configure/groups/group/router/segment-routing/segment-routing-v6/base-routing-instance/locator/function.
type NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate_Key struct {
	SrhMode    NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate_SrhMode_Union    `path:"srh-mode"`
	Protection NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate_Protection_Union `path:"protection"`
}

// NewEnd creates a new entry in the End list of the
// NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function) NewEnd(Value NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End_Value_Union) (*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.End == nil {
		t.End = make(map[NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End_Value_Union]*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End)
	}

	key := Value

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.End[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list End", key)
	}

	t.End[key] = &NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End{
		Value: Value,
	}

	return t.End[key], nil
}

// RenameEnd renames an entry in the list End within
// the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function) RenameEnd(oldK, newK NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End_Value_Union) error {
	if _, ok := t.End[newK]; ok {
		return fmt.Errorf("key %v already exists in End", newK)
	}

	e, ok := t.End[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in End", oldK)
	}
	e.Value = newK

	t.End[newK] = e
	delete(t.End, oldK)
	return nil
}

// GetOrCreateEnd retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function) GetOrCreateEnd(Value NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End_Value_Union) *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End {

	key := Value

	if v, ok := t.End[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEnd(Value)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEnd got unexpected error: %v", err))
	}
	return v
}

// GetEnd retrieves the value with the specified key from
// the End map field of NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function) GetEnd(Value NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End_Value_Union) *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End {

	if t == nil {
		return nil
	}

	key := Value

	if lm, ok := t.End[key]; ok {
		return lm
	}
	return nil
}

// DeleteEnd deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function) DeleteEnd(Value NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End_Value_Union) {
	key := Value

	delete(t.End, key)
}

// AppendEnd appends the supplied NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End struct to the
// list End of NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function) AppendEnd(v *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End) error {
	key := v.Value

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.End == nil {
		t.End = make(map[NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End_Value_Union]*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End)
	}

	if _, ok := t.End[key]; ok {
		return fmt.Errorf("duplicate key for list End %v", key)
	}

	t.End[key] = v
	return nil
}

// NewEndX creates a new entry in the EndX list of the
// NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function) NewEndX(Value NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX_Value_Union) (*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EndX == nil {
		t.EndX = make(map[NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX_Value_Union]*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX)
	}

	key := Value

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.EndX[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list EndX", key)
	}

	t.EndX[key] = &NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX{
		Value: Value,
	}

	return t.EndX[key], nil
}

// RenameEndX renames an entry in the list EndX within
// the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function) RenameEndX(oldK, newK NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX_Value_Union) error {
	if _, ok := t.EndX[newK]; ok {
		return fmt.Errorf("key %v already exists in EndX", newK)
	}

	e, ok := t.EndX[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in EndX", oldK)
	}
	e.Value = newK

	t.EndX[newK] = e
	delete(t.EndX, oldK)
	return nil
}

// GetOrCreateEndX retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function) GetOrCreateEndX(Value NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX_Value_Union) *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX {

	key := Value

	if v, ok := t.EndX[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEndX(Value)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEndX got unexpected error: %v", err))
	}
	return v
}

// GetEndX retrieves the value with the specified key from
// the EndX map field of NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function) GetEndX(Value NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX_Value_Union) *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX {

	if t == nil {
		return nil
	}

	key := Value

	if lm, ok := t.EndX[key]; ok {
		return lm
	}
	return nil
}

// DeleteEndX deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function) DeleteEndX(Value NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX_Value_Union) {
	key := Value

	delete(t.EndX, key)
}

// AppendEndX appends the supplied NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX struct to the
// list EndX of NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function) AppendEndX(v *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX) error {
	key := v.Value

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EndX == nil {
		t.EndX = make(map[NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX_Value_Union]*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX)
	}

	if _, ok := t.EndX[key]; ok {
		return fmt.Errorf("duplicate key for list EndX %v", key)
	}

	t.EndX[key] = v
	return nil
}

// NewEndXAutoAllocate creates a new entry in the EndXAutoAllocate list of the
// NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function) NewEndXAutoAllocate(SrhMode NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate_SrhMode_Union, Protection NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate_Protection_Union) (*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EndXAutoAllocate == nil {
		t.EndXAutoAllocate = make(map[NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate_Key]*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate)
	}

	key := NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate_Key{
		SrhMode:    SrhMode,
		Protection: Protection,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.EndXAutoAllocate[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list EndXAutoAllocate", key)
	}

	t.EndXAutoAllocate[key] = &NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate{
		SrhMode:    SrhMode,
		Protection: Protection,
	}

	return t.EndXAutoAllocate[key], nil
}

// RenameEndXAutoAllocate renames an entry in the list EndXAutoAllocate within
// the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function) RenameEndXAutoAllocate(oldK, newK NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate_Key) error {
	if _, ok := t.EndXAutoAllocate[newK]; ok {
		return fmt.Errorf("key %v already exists in EndXAutoAllocate", newK)
	}

	e, ok := t.EndXAutoAllocate[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in EndXAutoAllocate", oldK)
	}
	e.SrhMode = newK.SrhMode
	e.Protection = newK.Protection

	t.EndXAutoAllocate[newK] = e
	delete(t.EndXAutoAllocate, oldK)
	return nil
}

// GetOrCreateEndXAutoAllocate retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function) GetOrCreateEndXAutoAllocate(SrhMode NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate_SrhMode_Union, Protection NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate_Protection_Union) *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate {

	key := NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate_Key{
		SrhMode:    SrhMode,
		Protection: Protection,
	}

	if v, ok := t.EndXAutoAllocate[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEndXAutoAllocate(SrhMode, Protection)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEndXAutoAllocate got unexpected error: %v", err))
	}
	return v
}

// GetEndXAutoAllocate retrieves the value with the specified key from
// the EndXAutoAllocate map field of NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function) GetEndXAutoAllocate(SrhMode NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate_SrhMode_Union, Protection NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate_Protection_Union) *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate_Key{
		SrhMode:    SrhMode,
		Protection: Protection,
	}

	if lm, ok := t.EndXAutoAllocate[key]; ok {
		return lm
	}
	return nil
}

// DeleteEndXAutoAllocate deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function) DeleteEndXAutoAllocate(SrhMode NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate_SrhMode_Union, Protection NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate_Protection_Union) {
	key := NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate_Key{
		SrhMode:    SrhMode,
		Protection: Protection,
	}

	delete(t.EndXAutoAllocate, key)
}

// AppendEndXAutoAllocate appends the supplied NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate struct to the
// list EndXAutoAllocate of NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function) AppendEndXAutoAllocate(v *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate) error {
	key := NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate_Key{
		SrhMode:    v.SrhMode,
		Protection: v.Protection,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EndXAutoAllocate == nil {
		t.EndXAutoAllocate = make(map[NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate_Key]*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate)
	}

	if _, ok := t.EndXAutoAllocate[key]; ok {
		return fmt.Errorf("duplicate key for list EndXAutoAllocate %v", key)
	}

	t.EndXAutoAllocate[key] = v
	return nil
}

// GetOrCreateEndDt4 retrieves the value of the EndDt4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function) GetOrCreateEndDt4() *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt4 {
	if t.EndDt4 != nil {
		return t.EndDt4
	}
	t.EndDt4 = &NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt4{}
	return t.EndDt4
}

// GetOrCreateEndDt46 retrieves the value of the EndDt46 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function) GetOrCreateEndDt46() *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt46 {
	if t.EndDt46 != nil {
		return t.EndDt46
	}
	t.EndDt46 = &NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt46{}
	return t.EndDt46
}

// GetOrCreateEndDt6 retrieves the value of the EndDt6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function) GetOrCreateEndDt6() *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt6 {
	if t.EndDt6 != nil {
		return t.EndDt6
	}
	t.EndDt6 = &NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt6{}
	return t.EndDt6
}

// GetEndDt4 returns the value of the EndDt4 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function. If the receiver or the field EndDt4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function) GetEndDt4() *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt4 {
	if t != nil && t.EndDt4 != nil {
		return t.EndDt4
	}
	return nil
}

// GetEndDt46 returns the value of the EndDt46 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function. If the receiver or the field EndDt46 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function) GetEndDt46() *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt46 {
	if t != nil && t.EndDt46 != nil {
		return t.EndDt46
	}
	return nil
}

// GetEndDt6 returns the value of the EndDt6 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function. If the receiver or the field EndDt6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function) GetEndDt6() *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt6 {
	if t != nil && t.EndDt6 != nil {
		return t.EndDt6
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.EndDt4.PopulateDefaults()
	t.EndDt46.PopulateDefaults()
	t.EndDt6.PopulateDefaults()
	for _, e := range t.End {
		e.PopulateDefaults()
	}
	for _, e := range t.EndX {
		e.PopulateDefaults()
	}
	for _, e := range t.EndXAutoAllocate {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function.
func (*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End represents the /nokia-conf/configure/groups/group/router/segment-routing/segment-routing-v6/base-routing-instance/locator/function/end YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End struct {
	SrhMode E_NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End_SrhMode   `path:"srh-mode" module:"nokia-conf"`
	Value   NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End_Value_Union `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End) IsYANGGoStruct() {
}

// GetSrhMode retrieves the value of the leaf SrhMode from the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrhMode is set, it can
// safely use t.GetSrhMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrhMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End) GetSrhMode() E_NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End_SrhMode {
	if t == nil || t.SrhMode == 0 {
		return NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End_SrhMode_psp
	}
	return t.SrhMode
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End) GetValue() NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End_Value_Union {
	if t == nil || t.Value == nil {
		return nil
	}
	return t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SrhMode == 0 {
		t.SrhMode = NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End_SrhMode_psp
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"value": t.Value,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End.
func (*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_End) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt4 represents the /nokia-conf/configure/groups/group/router/segment-routing/segment-routing-v6/base-routing-instance/locator/function/end-dt4 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt4 struct {
	Value *uint32 `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt4) IsYANGGoStruct() {
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt4) GetValue() uint32 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt4.
func (*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt46 represents the /nokia-conf/configure/groups/group/router/segment-routing/segment-routing-v6/base-routing-instance/locator/function/end-dt46 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt46 struct {
	Value *uint32 `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt46 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt46) IsYANGGoStruct() {
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt46
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt46) GetValue() uint32 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt46
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt46) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt46) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt46"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt46) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt46) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt46.
func (*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt46) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt6 represents the /nokia-conf/configure/groups/group/router/segment-routing/segment-routing-v6/base-routing-instance/locator/function/end-dt6 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt6 struct {
	Value *uint32 `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt6) IsYANGGoStruct() {
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt6) GetValue() uint32 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt6.
func (*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndDt6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX represents the /nokia-conf/configure/groups/group/router/segment-routing/segment-routing-v6/base-routing-instance/locator/function/end-x YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX struct {
	InterfaceName *string                                                                                                                        `path:"interface-name" module:"nokia-conf"`
	Protection    E_NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX_Protection `path:"protection" module:"nokia-conf"`
	SrhMode       E_NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX_SrhMode    `path:"srh-mode" module:"nokia-conf"`
	Value         NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX_Value_Union  `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX) IsYANGGoStruct() {
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetProtection retrieves the value of the leaf Protection from the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Protection is set, it can
// safely use t.GetProtection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Protection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX) GetProtection() E_NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX_Protection {
	if t == nil || t.Protection == 0 {
		return NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX_Protection_protected
	}
	return t.Protection
}

// GetSrhMode retrieves the value of the leaf SrhMode from the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrhMode is set, it can
// safely use t.GetSrhMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrhMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX) GetSrhMode() E_NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX_SrhMode {
	if t == nil || t.SrhMode == 0 {
		return NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX_SrhMode_psp
	}
	return t.SrhMode
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX) GetValue() NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX_Value_Union {
	if t == nil || t.Value == nil {
		return nil
	}
	return t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Protection == 0 {
		t.Protection = NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX_Protection_protected
	}
	if t.SrhMode == 0 {
		t.SrhMode = NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX_SrhMode_psp
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"value": t.Value,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX.
func (*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndX) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate represents the /nokia-conf/configure/groups/group/router/segment-routing/segment-routing-v6/base-routing-instance/locator/function/end-x-auto-allocate YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate struct {
	Protection NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate_Protection_Union `path:"protection" module:"nokia-conf"`
	SrhMode    NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate_SrhMode_Union    `path:"srh-mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate) IsYANGGoStruct() {
}

// GetProtection retrieves the value of the leaf Protection from the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Protection is set, it can
// safely use t.GetProtection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Protection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate) GetProtection() NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate_Protection_Union {
	if t == nil || t.Protection == nil {
		return nil
	}
	return t.Protection
}

// GetSrhMode retrieves the value of the leaf SrhMode from the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrhMode is set, it can
// safely use t.GetSrhMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrhMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate) GetSrhMode() NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate_SrhMode_Union {
	if t == nil || t.SrhMode == nil {
		return nil
	}
	return t.SrhMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"protection": t.Protection,
		"srh-mode":   t.SrhMode,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate.
func (*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_BaseRoutingInstance_Locator_Function_EndXAutoAllocate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator represents the /nokia-conf/configure/groups/group/router/segment-routing/segment-routing-v6/locator YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator struct {
	AdminState     E_NokiaTypesSros_AdminState                                                                     `path:"admin-state" module:"nokia-conf"`
	Algorithm      *uint32                                                                                         `path:"algorithm" module:"nokia-conf"`
	BlockLength    *uint32                                                                                         `path:"block-length" module:"nokia-conf"`
	FunctionLength *uint32                                                                                         `path:"function-length" module:"nokia-conf"`
	LocatorName    *string                                                                                         `path:"locator-name" module:"nokia-conf"`
	Prefix         *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator_Prefix         `path:"prefix" module:"nokia-conf"`
	StaticFunction *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator_StaticFunction `path:"static-function" module:"nokia-conf"`
	TerminationFpe []uint32                                                                                        `path:"termination-fpe" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator) IsYANGGoStruct() {
}

// GetOrCreatePrefix retrieves the value of the Prefix field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator) GetOrCreatePrefix() *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator_Prefix {
	if t.Prefix != nil {
		return t.Prefix
	}
	t.Prefix = &NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator_Prefix{}
	return t.Prefix
}

// GetOrCreateStaticFunction retrieves the value of the StaticFunction field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator) GetOrCreateStaticFunction() *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator_StaticFunction {
	if t.StaticFunction != nil {
		return t.StaticFunction
	}
	t.StaticFunction = &NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator_StaticFunction{}
	return t.StaticFunction
}

// GetPrefix returns the value of the Prefix struct pointer
// from NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator. If the receiver or the field Prefix is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator) GetPrefix() *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator_Prefix {
	if t != nil && t.Prefix != nil {
		return t.Prefix
	}
	return nil
}

// GetStaticFunction returns the value of the StaticFunction struct pointer
// from NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator. If the receiver or the field StaticFunction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator) GetStaticFunction() *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator_StaticFunction {
	if t != nil && t.StaticFunction != nil {
		return t.StaticFunction
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAlgorithm retrieves the value of the leaf Algorithm from the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Algorithm is set, it can
// safely use t.GetAlgorithm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Algorithm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator) GetAlgorithm() uint32 {
	if t == nil || t.Algorithm == nil {
		return 0
	}
	return *t.Algorithm
}

// GetBlockLength retrieves the value of the leaf BlockLength from the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BlockLength is set, it can
// safely use t.GetBlockLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BlockLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator) GetBlockLength() uint32 {
	if t == nil || t.BlockLength == nil {
		return 0
	}
	return *t.BlockLength
}

// GetFunctionLength retrieves the value of the leaf FunctionLength from the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FunctionLength is set, it can
// safely use t.GetFunctionLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FunctionLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator) GetFunctionLength() uint32 {
	if t == nil || t.FunctionLength == nil {
		return 20
	}
	return *t.FunctionLength
}

// GetLocatorName retrieves the value of the leaf LocatorName from the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocatorName is set, it can
// safely use t.GetLocatorName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocatorName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator) GetLocatorName() string {
	if t == nil || t.LocatorName == nil {
		return ""
	}
	return *t.LocatorName
}

// GetTerminationFpe retrieves the value of the leaf TerminationFpe from the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TerminationFpe is set, it can
// safely use t.GetTerminationFpe() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TerminationFpe == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator) GetTerminationFpe() []uint32 {
	if t == nil || t.TerminationFpe == nil {
		return nil
	}
	return t.TerminationFpe
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.BlockLength == nil {
		var v uint32 = 0
		t.BlockLength = &v
	}
	if t.FunctionLength == nil {
		var v uint32 = 20
		t.FunctionLength = &v
	}
	t.Prefix.PopulateDefaults()
	t.StaticFunction.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LocatorName == nil {
		return nil, fmt.Errorf("nil value for key LocatorName")
	}

	return map[string]interface{}{
		"locator-name": *t.LocatorName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator.
func (*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator_Prefix represents the /nokia-conf/configure/groups/group/router/segment-routing/segment-routing-v6/locator/prefix YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator_Prefix struct {
	IpPrefix *string `path:"ip-prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator_Prefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator_Prefix) IsYANGGoStruct() {
}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator_Prefix) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator_Prefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator_Prefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator_Prefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator_Prefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator_Prefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator_Prefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator_Prefix.
func (*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator_Prefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator_StaticFunction represents the /nokia-conf/configure/groups/group/router/segment-routing/segment-routing-v6/locator/static-function YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator_StaticFunction struct {
	LabelBlock *string `path:"label-block" module:"nokia-conf"`
	MaxEntries *uint32 `path:"max-entries" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator_StaticFunction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator_StaticFunction) IsYANGGoStruct() {
}

// GetLabelBlock retrieves the value of the leaf LabelBlock from the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator_StaticFunction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelBlock is set, it can
// safely use t.GetLabelBlock() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelBlock == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator_StaticFunction) GetLabelBlock() string {
	if t == nil || t.LabelBlock == nil {
		return ""
	}
	return *t.LabelBlock
}

// GetMaxEntries retrieves the value of the leaf MaxEntries from the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator_StaticFunction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxEntries is set, it can
// safely use t.GetMaxEntries() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxEntries == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator_StaticFunction) GetMaxEntries() uint32 {
	if t == nil || t.MaxEntries == nil {
		return 1
	}
	return *t.MaxEntries
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator_StaticFunction
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator_StaticFunction) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxEntries == nil {
		var v uint32 = 1
		t.MaxEntries = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator_StaticFunction) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator_StaticFunction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator_StaticFunction) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator_StaticFunction) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator_StaticFunction.
func (*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SegmentRoutingV6_Locator_StaticFunction) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls represents the /nokia-conf/configure/groups/group/router/segment-routing/sr-mpls YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls struct {
	PrefixSids map[string]*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids `path:"prefix-sids" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls) IsYANGGoStruct() {}

// NewPrefixSids creates a new entry in the PrefixSids list of the
// NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls) NewPrefixSids(InterfaceName string) (*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrefixSids == nil {
		t.PrefixSids = make(map[string]*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PrefixSids[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PrefixSids", key)
	}

	t.PrefixSids[key] = &NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids{
		InterfaceName: &InterfaceName,
	}

	return t.PrefixSids[key], nil
}

// RenamePrefixSids renames an entry in the list PrefixSids within
// the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls) RenamePrefixSids(oldK, newK string) error {
	if _, ok := t.PrefixSids[newK]; ok {
		return fmt.Errorf("key %v already exists in PrefixSids", newK)
	}

	e, ok := t.PrefixSids[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PrefixSids", oldK)
	}
	e.InterfaceName = &newK

	t.PrefixSids[newK] = e
	delete(t.PrefixSids, oldK)
	return nil
}

// GetOrCreatePrefixSids retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls) GetOrCreatePrefixSids(InterfaceName string) *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids {

	key := InterfaceName

	if v, ok := t.PrefixSids[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefixSids(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefixSids got unexpected error: %v", err))
	}
	return v
}

// GetPrefixSids retrieves the value with the specified key from
// the PrefixSids map field of NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls) GetPrefixSids(InterfaceName string) *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids {

	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.PrefixSids[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefixSids deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls) DeletePrefixSids(InterfaceName string) {
	key := InterfaceName

	delete(t.PrefixSids, key)
}

// AppendPrefixSids appends the supplied NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids struct to the
// list PrefixSids of NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls) AppendPrefixSids(v *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrefixSids == nil {
		t.PrefixSids = make(map[string]*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids)
	}

	if _, ok := t.PrefixSids[key]; ok {
		return fmt.Errorf("duplicate key for list PrefixSids %v", key)
	}

	t.PrefixSids[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.PrefixSids {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls.
func (*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids represents the /nokia-conf/configure/groups/group/router/segment-routing/sr-mpls/prefix-sids YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids struct {
	InterfaceName *string                                                                           `path:"interface-name" module:"nokia-conf"`
	Ipv4Sid       *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids_Ipv4Sid `path:"ipv4-sid" module:"nokia-conf" yangPresence:"true"`
	Ipv6Sid       *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids_Ipv6Sid `path:"ipv6-sid" module:"nokia-conf" yangPresence:"true"`
	NodeSid       *bool                                                                             `path:"node-sid" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids) IsYANGGoStruct() {}

// GetOrCreateIpv4Sid retrieves the value of the Ipv4Sid field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids) GetOrCreateIpv4Sid() *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids_Ipv4Sid {
	if t.Ipv4Sid != nil {
		return t.Ipv4Sid
	}
	t.Ipv4Sid = &NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids_Ipv4Sid{}
	return t.Ipv4Sid
}

// GetOrCreateIpv6Sid retrieves the value of the Ipv6Sid field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids) GetOrCreateIpv6Sid() *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids_Ipv6Sid {
	if t.Ipv6Sid != nil {
		return t.Ipv6Sid
	}
	t.Ipv6Sid = &NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids_Ipv6Sid{}
	return t.Ipv6Sid
}

// GetIpv4Sid returns the value of the Ipv4Sid struct pointer
// from NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids. If the receiver or the field Ipv4Sid is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids) GetIpv4Sid() *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids_Ipv4Sid {
	if t != nil && t.Ipv4Sid != nil {
		return t.Ipv4Sid
	}
	return nil
}

// GetIpv6Sid returns the value of the Ipv6Sid struct pointer
// from NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids. If the receiver or the field Ipv6Sid is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids) GetIpv6Sid() *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids_Ipv6Sid {
	if t != nil && t.Ipv6Sid != nil {
		return t.Ipv6Sid
	}
	return nil
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetNodeSid retrieves the value of the leaf NodeSid from the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NodeSid is set, it can
// safely use t.GetNodeSid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NodeSid == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids) GetNodeSid() bool {
	if t == nil || t.NodeSid == nil {
		return true
	}
	return *t.NodeSid
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.NodeSid == nil {
		var v bool = true
		t.NodeSid = &v
	}
	t.Ipv4Sid.PopulateDefaults()
	t.Ipv6Sid.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids.
func (*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids_Ipv4Sid represents the /nokia-conf/configure/groups/group/router/segment-routing/sr-mpls/prefix-sids/ipv4-sid YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids_Ipv4Sid struct {
	Index *int64 `path:"index" module:"nokia-conf"`
	Label *int64 `path:"label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids_Ipv4Sid implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids_Ipv4Sid) IsYANGGoStruct() {
}

// GetIndex retrieves the value of the leaf Index from the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids_Ipv4Sid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids_Ipv4Sid) GetIndex() int64 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetLabel retrieves the value of the leaf Label from the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids_Ipv4Sid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Label is set, it can
// safely use t.GetLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Label == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids_Ipv4Sid) GetLabel() int64 {
	if t == nil || t.Label == nil {
		return 0
	}
	return *t.Label
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids_Ipv4Sid
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids_Ipv4Sid) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids_Ipv4Sid) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids_Ipv4Sid"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids_Ipv4Sid) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids_Ipv4Sid) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids_Ipv4Sid.
func (*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids_Ipv4Sid) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids_Ipv6Sid represents the /nokia-conf/configure/groups/group/router/segment-routing/sr-mpls/prefix-sids/ipv6-sid YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids_Ipv6Sid struct {
	Index *int64 `path:"index" module:"nokia-conf"`
	Label *int64 `path:"label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids_Ipv6Sid implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids_Ipv6Sid) IsYANGGoStruct() {
}

// GetIndex retrieves the value of the leaf Index from the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids_Ipv6Sid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids_Ipv6Sid) GetIndex() int64 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetLabel retrieves the value of the leaf Label from the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids_Ipv6Sid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Label is set, it can
// safely use t.GetLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Label == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids_Ipv6Sid) GetLabel() int64 {
	if t == nil || t.Label == nil {
		return 0
	}
	return *t.Label
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids_Ipv6Sid
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids_Ipv6Sid) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids_Ipv6Sid) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids_Ipv6Sid"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids_Ipv6Sid) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids_Ipv6Sid) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids_Ipv6Sid.
func (*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrMpls_PrefixSids_Ipv6Sid) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies represents the /nokia-conf/configure/groups/group/router/segment-routing/sr-policies YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies struct {
	AdminState         E_NokiaTypesSros_AdminState                                                                `path:"admin-state" module:"nokia-conf"`
	EgressStatistics   *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_EgressStatistics        `path:"egress-statistics" module:"nokia-conf" yangPresence:"true"`
	IngressStatistics  *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_IngressStatistics       `path:"ingress-statistics" module:"nokia-conf" yangPresence:"true"`
	ReservedLabelBlock *string                                                                                    `path:"reserved-label-block" module:"nokia-conf"`
	StaticPolicy       map[string]*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy `path:"static-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies) IsYANGGoStruct() {}

// NewStaticPolicy creates a new entry in the StaticPolicy list of the
// NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies) NewStaticPolicy(Name string) (*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StaticPolicy == nil {
		t.StaticPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.StaticPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list StaticPolicy", key)
	}

	t.StaticPolicy[key] = &NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy{
		Name: &Name,
	}

	return t.StaticPolicy[key], nil
}

// RenameStaticPolicy renames an entry in the list StaticPolicy within
// the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies) RenameStaticPolicy(oldK, newK string) error {
	if _, ok := t.StaticPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in StaticPolicy", newK)
	}

	e, ok := t.StaticPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in StaticPolicy", oldK)
	}
	e.Name = &newK

	t.StaticPolicy[newK] = e
	delete(t.StaticPolicy, oldK)
	return nil
}

// GetOrCreateStaticPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies) GetOrCreateStaticPolicy(Name string) *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy {

	key := Name

	if v, ok := t.StaticPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewStaticPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateStaticPolicy got unexpected error: %v", err))
	}
	return v
}

// GetStaticPolicy retrieves the value with the specified key from
// the StaticPolicy map field of NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies) GetStaticPolicy(Name string) *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.StaticPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteStaticPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies) DeleteStaticPolicy(Name string) {
	key := Name

	delete(t.StaticPolicy, key)
}

// AppendStaticPolicy appends the supplied NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy struct to the
// list StaticPolicy of NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies) AppendStaticPolicy(v *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StaticPolicy == nil {
		t.StaticPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy)
	}

	if _, ok := t.StaticPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list StaticPolicy %v", key)
	}

	t.StaticPolicy[key] = v
	return nil
}

// GetOrCreateEgressStatistics retrieves the value of the EgressStatistics field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies) GetOrCreateEgressStatistics() *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_EgressStatistics {
	if t.EgressStatistics != nil {
		return t.EgressStatistics
	}
	t.EgressStatistics = &NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_EgressStatistics{}
	return t.EgressStatistics
}

// GetOrCreateIngressStatistics retrieves the value of the IngressStatistics field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies) GetOrCreateIngressStatistics() *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_IngressStatistics {
	if t.IngressStatistics != nil {
		return t.IngressStatistics
	}
	t.IngressStatistics = &NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_IngressStatistics{}
	return t.IngressStatistics
}

// GetEgressStatistics returns the value of the EgressStatistics struct pointer
// from NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies. If the receiver or the field EgressStatistics is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies) GetEgressStatistics() *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_EgressStatistics {
	if t != nil && t.EgressStatistics != nil {
		return t.EgressStatistics
	}
	return nil
}

// GetIngressStatistics returns the value of the IngressStatistics struct pointer
// from NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies. If the receiver or the field IngressStatistics is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies) GetIngressStatistics() *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_IngressStatistics {
	if t != nil && t.IngressStatistics != nil {
		return t.IngressStatistics
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetReservedLabelBlock retrieves the value of the leaf ReservedLabelBlock from the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReservedLabelBlock is set, it can
// safely use t.GetReservedLabelBlock() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReservedLabelBlock == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies) GetReservedLabelBlock() string {
	if t == nil || t.ReservedLabelBlock == nil {
		return ""
	}
	return *t.ReservedLabelBlock
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.EgressStatistics.PopulateDefaults()
	t.IngressStatistics.PopulateDefaults()
	for _, e := range t.StaticPolicy {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies.
func (*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_EgressStatistics represents the /nokia-conf/configure/groups/group/router/segment-routing/sr-policies/egress-statistics YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_EgressStatistics struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_EgressStatistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_EgressStatistics) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_EgressStatistics
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_EgressStatistics) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_EgressStatistics
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_EgressStatistics) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_EgressStatistics) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_EgressStatistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_EgressStatistics) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_EgressStatistics) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_EgressStatistics.
func (*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_EgressStatistics) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_IngressStatistics represents the /nokia-conf/configure/groups/group/router/segment-routing/sr-policies/ingress-statistics YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_IngressStatistics struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_IngressStatistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_IngressStatistics) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_IngressStatistics
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_IngressStatistics) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_IngressStatistics
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_IngressStatistics) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_IngressStatistics) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_IngressStatistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_IngressStatistics) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_IngressStatistics) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_IngressStatistics.
func (*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_IngressStatistics) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy represents the /nokia-conf/configure/groups/group/router/segment-routing/sr-policies/static-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy struct {
	AdminState        E_NokiaTypesSros_AdminState                                                                                                                                                                                   `path:"admin-state" module:"nokia-conf"`
	BindingSid        *uint32                                                                                                                                                                                                       `path:"binding-sid" module:"nokia-conf"`
	Color             *int64                                                                                                                                                                                                        `path:"color" module:"nokia-conf"`
	Distinguisher     *uint32                                                                                                                                                                                                       `path:"distinguisher" module:"nokia-conf"`
	Endpoint          *string                                                                                                                                                                                                       `path:"endpoint" module:"nokia-conf"`
	HeadEnd           NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_HeadEnd_Union                                                                                                                  `path:"head-end" module:"nokia-conf"`
	MaintenancePolicy *string                                                                                                                                                                                                       `path:"maintenance-policy" module:"nokia-conf"`
	Name              *string                                                                                                                                                                                                       `path:"name" module:"nokia-conf"`
	Preference        *uint32                                                                                                                                                                                                       `path:"preference" module:"nokia-conf"`
	SegmentList       map[NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_SegListIndex_Union]*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList `path:"segment-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy) IsYANGGoStruct() {
}

// NewSegmentList creates a new entry in the SegmentList list of the
// NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy) NewSegmentList(SegListIndex NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_SegListIndex_Union) (*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SegmentList == nil {
		t.SegmentList = make(map[NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_SegListIndex_Union]*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList)
	}

	key := SegListIndex

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SegmentList[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SegmentList", key)
	}

	t.SegmentList[key] = &NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList{
		SegListIndex: SegListIndex,
	}

	return t.SegmentList[key], nil
}

// RenameSegmentList renames an entry in the list SegmentList within
// the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy) RenameSegmentList(oldK, newK NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_SegListIndex_Union) error {
	if _, ok := t.SegmentList[newK]; ok {
		return fmt.Errorf("key %v already exists in SegmentList", newK)
	}

	e, ok := t.SegmentList[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SegmentList", oldK)
	}
	e.SegListIndex = newK

	t.SegmentList[newK] = e
	delete(t.SegmentList, oldK)
	return nil
}

// GetOrCreateSegmentList retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy) GetOrCreateSegmentList(SegListIndex NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_SegListIndex_Union) *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList {

	key := SegListIndex

	if v, ok := t.SegmentList[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSegmentList(SegListIndex)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSegmentList got unexpected error: %v", err))
	}
	return v
}

// GetSegmentList retrieves the value with the specified key from
// the SegmentList map field of NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy) GetSegmentList(SegListIndex NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_SegListIndex_Union) *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList {

	if t == nil {
		return nil
	}

	key := SegListIndex

	if lm, ok := t.SegmentList[key]; ok {
		return lm
	}
	return nil
}

// DeleteSegmentList deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy) DeleteSegmentList(SegListIndex NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_SegListIndex_Union) {
	key := SegListIndex

	delete(t.SegmentList, key)
}

// AppendSegmentList appends the supplied NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList struct to the
// list SegmentList of NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy) AppendSegmentList(v *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList) error {
	key := v.SegListIndex

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SegmentList == nil {
		t.SegmentList = make(map[NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_SegListIndex_Union]*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList)
	}

	if _, ok := t.SegmentList[key]; ok {
		return fmt.Errorf("duplicate key for list SegmentList %v", key)
	}

	t.SegmentList[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetBindingSid retrieves the value of the leaf BindingSid from the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BindingSid is set, it can
// safely use t.GetBindingSid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BindingSid == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy) GetBindingSid() uint32 {
	if t == nil || t.BindingSid == nil {
		return 0
	}
	return *t.BindingSid
}

// GetColor retrieves the value of the leaf Color from the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Color is set, it can
// safely use t.GetColor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Color == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy) GetColor() int64 {
	if t == nil || t.Color == nil {
		return 0
	}
	return *t.Color
}

// GetDistinguisher retrieves the value of the leaf Distinguisher from the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Distinguisher is set, it can
// safely use t.GetDistinguisher() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Distinguisher == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy) GetDistinguisher() uint32 {
	if t == nil || t.Distinguisher == nil {
		return 0
	}
	return *t.Distinguisher
}

// GetEndpoint retrieves the value of the leaf Endpoint from the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Endpoint is set, it can
// safely use t.GetEndpoint() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Endpoint == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy) GetEndpoint() string {
	if t == nil || t.Endpoint == nil {
		return ""
	}
	return *t.Endpoint
}

// GetHeadEnd retrieves the value of the leaf HeadEnd from the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HeadEnd is set, it can
// safely use t.GetHeadEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HeadEnd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy) GetHeadEnd() NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_HeadEnd_Union {
	if t == nil || t.HeadEnd == nil {
		return nil
	}
	return t.HeadEnd
}

// GetMaintenancePolicy retrieves the value of the leaf MaintenancePolicy from the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaintenancePolicy is set, it can
// safely use t.GetMaintenancePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaintenancePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy) GetMaintenancePolicy() string {
	if t == nil || t.MaintenancePolicy == nil {
		return ""
	}
	return *t.MaintenancePolicy
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 100
	}
	return *t.Preference
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Preference == nil {
		var v uint32 = 100
		t.Preference = &v
	}
	for _, e := range t.SegmentList {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy.
func (*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList represents the /nokia-conf/configure/groups/group/router/segment-routing/sr-policies/static-policy/segment-list YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList struct {
	AdminState   E_NokiaTypesSros_AdminState                                                                                                                                                                                                   `path:"admin-state" module:"nokia-conf"`
	SegListIndex NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_SegListIndex_Union                                                                                                                 `path:"seg-list-index" module:"nokia-conf"`
	Segment      map[NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_Segment_SegmentIndex_Union]*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_Segment `path:"segment" module:"nokia-conf"`
	Weight       *uint32                                                                                                                                                                                                                       `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList) IsYANGGoStruct() {
}

// NewSegment creates a new entry in the Segment list of the
// NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList) NewSegment(SegmentIndex NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_Segment_SegmentIndex_Union) (*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_Segment, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Segment == nil {
		t.Segment = make(map[NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_Segment_SegmentIndex_Union]*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_Segment)
	}

	key := SegmentIndex

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Segment[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Segment", key)
	}

	t.Segment[key] = &NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_Segment{
		SegmentIndex: SegmentIndex,
	}

	return t.Segment[key], nil
}

// RenameSegment renames an entry in the list Segment within
// the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList) RenameSegment(oldK, newK NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_Segment_SegmentIndex_Union) error {
	if _, ok := t.Segment[newK]; ok {
		return fmt.Errorf("key %v already exists in Segment", newK)
	}

	e, ok := t.Segment[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Segment", oldK)
	}
	e.SegmentIndex = newK

	t.Segment[newK] = e
	delete(t.Segment, oldK)
	return nil
}

// GetOrCreateSegment retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList) GetOrCreateSegment(SegmentIndex NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_Segment_SegmentIndex_Union) *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_Segment {

	key := SegmentIndex

	if v, ok := t.Segment[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSegment(SegmentIndex)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSegment got unexpected error: %v", err))
	}
	return v
}

// GetSegment retrieves the value with the specified key from
// the Segment map field of NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList) GetSegment(SegmentIndex NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_Segment_SegmentIndex_Union) *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_Segment {

	if t == nil {
		return nil
	}

	key := SegmentIndex

	if lm, ok := t.Segment[key]; ok {
		return lm
	}
	return nil
}

// DeleteSegment deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList) DeleteSegment(SegmentIndex NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_Segment_SegmentIndex_Union) {
	key := SegmentIndex

	delete(t.Segment, key)
}

// AppendSegment appends the supplied NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_Segment struct to the
// list Segment of NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_Segment already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList) AppendSegment(v *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_Segment) error {
	key := v.SegmentIndex

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Segment == nil {
		t.Segment = make(map[NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_Segment_SegmentIndex_Union]*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_Segment)
	}

	if _, ok := t.Segment[key]; ok {
		return fmt.Errorf("duplicate key for list Segment %v", key)
	}

	t.Segment[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetSegListIndex retrieves the value of the leaf SegListIndex from the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SegListIndex is set, it can
// safely use t.GetSegListIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SegListIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList) GetSegListIndex() NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_SegListIndex_Union {
	if t == nil || t.SegListIndex == nil {
		return nil
	}
	return t.SegListIndex
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList) GetWeight() uint32 {
	if t == nil || t.Weight == nil {
		return 1
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Weight == nil {
		var v uint32 = 1
		t.Weight = &v
	}
	for _, e := range t.Segment {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"seg-list-index": t.SegListIndex,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList.
func (*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_Segment represents the /nokia-conf/configure/groups/group/router/segment-routing/sr-policies/static-policy/segment-list/segment YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_Segment struct {
	MplsLabel    *uint32                                                                                                               `path:"mpls-label" module:"nokia-conf"`
	SegmentIndex NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_Segment_SegmentIndex_Union `path:"segment-index" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_Segment implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_Segment) IsYANGGoStruct() {
}

// GetMplsLabel retrieves the value of the leaf MplsLabel from the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_Segment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MplsLabel is set, it can
// safely use t.GetMplsLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MplsLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_Segment) GetMplsLabel() uint32 {
	if t == nil || t.MplsLabel == nil {
		return 0
	}
	return *t.MplsLabel
}

// GetSegmentIndex retrieves the value of the leaf SegmentIndex from the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_Segment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SegmentIndex is set, it can
// safely use t.GetSegmentIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SegmentIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_Segment) GetSegmentIndex() NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_Segment_SegmentIndex_Union {
	if t == nil || t.SegmentIndex == nil {
		return nil
	}
	return t.SegmentIndex
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_Segment
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_Segment) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_Segment struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_Segment) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"segment-index": t.SegmentIndex,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_Segment) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_Segment"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_Segment) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_Segment) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_Segment.
func (*NokiaConf_Configure_Groups_Group_Router_SegmentRouting_SrPolicies_StaticPolicy_SegmentList_Segment) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_SfmOverload represents the /nokia-conf/configure/groups/group/router/sfm-overload YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_SfmOverload struct {
	HoldoffTime *uint32 `path:"holdoff-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_SfmOverload implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_SfmOverload) IsYANGGoStruct() {}

// GetHoldoffTime retrieves the value of the leaf HoldoffTime from the NokiaConf_Configure_Groups_Group_Router_SfmOverload
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldoffTime is set, it can
// safely use t.GetHoldoffTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldoffTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_SfmOverload) GetHoldoffTime() uint32 {
	if t == nil || t.HoldoffTime == nil {
		return 0
	}
	return *t.HoldoffTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_SfmOverload
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_SfmOverload) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_SfmOverload) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_SfmOverload"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_SfmOverload) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_SfmOverload) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_SfmOverload.
func (*NokiaConf_Configure_Groups_Group_Router_SfmOverload) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_SgtQos represents the /nokia-conf/configure/groups/group/router/sgt-qos YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_SgtQos struct {
	Dot1P *NokiaConf_Configure_Groups_Group_Router_SgtQos_Dot1P `path:"dot1p" module:"nokia-conf"`
	Dscp  *NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp  `path:"dscp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_SgtQos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_SgtQos) IsYANGGoStruct() {}

// GetOrCreateDot1P retrieves the value of the Dot1P field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_SgtQos) GetOrCreateDot1P() *NokiaConf_Configure_Groups_Group_Router_SgtQos_Dot1P {
	if t.Dot1P != nil {
		return t.Dot1P
	}
	t.Dot1P = &NokiaConf_Configure_Groups_Group_Router_SgtQos_Dot1P{}
	return t.Dot1P
}

// GetOrCreateDscp retrieves the value of the Dscp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_SgtQos) GetOrCreateDscp() *NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp {
	if t.Dscp != nil {
		return t.Dscp
	}
	t.Dscp = &NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp{}
	return t.Dscp
}

// GetDot1P returns the value of the Dot1P struct pointer
// from NokiaConf_Configure_Groups_Group_Router_SgtQos. If the receiver or the field Dot1P is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_SgtQos) GetDot1P() *NokiaConf_Configure_Groups_Group_Router_SgtQos_Dot1P {
	if t != nil && t.Dot1P != nil {
		return t.Dot1P
	}
	return nil
}

// GetDscp returns the value of the Dscp struct pointer
// from NokiaConf_Configure_Groups_Group_Router_SgtQos. If the receiver or the field Dscp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_SgtQos) GetDscp() *NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp {
	if t != nil && t.Dscp != nil {
		return t.Dscp
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_SgtQos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_SgtQos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Dot1P.PopulateDefaults()
	t.Dscp.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_SgtQos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_SgtQos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_SgtQos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_SgtQos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_SgtQos.
func (*NokiaConf_Configure_Groups_Group_Router_SgtQos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_SgtQos_Dot1P represents the /nokia-conf/configure/groups/group/router/sgt-qos/dot1p YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_SgtQos_Dot1P struct {
	Application map[NokiaConf_Configure_Groups_Group_Router_SgtQos_Dot1P_Application_Dot1PAppName_Union]*NokiaConf_Configure_Groups_Group_Router_SgtQos_Dot1P_Application `path:"application" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_SgtQos_Dot1P implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_SgtQos_Dot1P) IsYANGGoStruct() {}

// NewApplication creates a new entry in the Application list of the
// NokiaConf_Configure_Groups_Group_Router_SgtQos_Dot1P struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_SgtQos_Dot1P) NewApplication(Dot1PAppName NokiaConf_Configure_Groups_Group_Router_SgtQos_Dot1P_Application_Dot1PAppName_Union) (*NokiaConf_Configure_Groups_Group_Router_SgtQos_Dot1P_Application, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Application == nil {
		t.Application = make(map[NokiaConf_Configure_Groups_Group_Router_SgtQos_Dot1P_Application_Dot1PAppName_Union]*NokiaConf_Configure_Groups_Group_Router_SgtQos_Dot1P_Application)
	}

	key := Dot1PAppName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Application[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Application", key)
	}

	t.Application[key] = &NokiaConf_Configure_Groups_Group_Router_SgtQos_Dot1P_Application{
		Dot1PAppName: Dot1PAppName,
	}

	return t.Application[key], nil
}

// RenameApplication renames an entry in the list Application within
// the NokiaConf_Configure_Groups_Group_Router_SgtQos_Dot1P struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_SgtQos_Dot1P) RenameApplication(oldK, newK NokiaConf_Configure_Groups_Group_Router_SgtQos_Dot1P_Application_Dot1PAppName_Union) error {
	if _, ok := t.Application[newK]; ok {
		return fmt.Errorf("key %v already exists in Application", newK)
	}

	e, ok := t.Application[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Application", oldK)
	}
	e.Dot1PAppName = newK

	t.Application[newK] = e
	delete(t.Application, oldK)
	return nil
}

// GetOrCreateApplication retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_SgtQos_Dot1P. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_SgtQos_Dot1P) GetOrCreateApplication(Dot1PAppName NokiaConf_Configure_Groups_Group_Router_SgtQos_Dot1P_Application_Dot1PAppName_Union) *NokiaConf_Configure_Groups_Group_Router_SgtQos_Dot1P_Application {

	key := Dot1PAppName

	if v, ok := t.Application[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewApplication(Dot1PAppName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateApplication got unexpected error: %v", err))
	}
	return v
}

// GetApplication retrieves the value with the specified key from
// the Application map field of NokiaConf_Configure_Groups_Group_Router_SgtQos_Dot1P. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_SgtQos_Dot1P) GetApplication(Dot1PAppName NokiaConf_Configure_Groups_Group_Router_SgtQos_Dot1P_Application_Dot1PAppName_Union) *NokiaConf_Configure_Groups_Group_Router_SgtQos_Dot1P_Application {

	if t == nil {
		return nil
	}

	key := Dot1PAppName

	if lm, ok := t.Application[key]; ok {
		return lm
	}
	return nil
}

// DeleteApplication deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_SgtQos_Dot1P. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_SgtQos_Dot1P) DeleteApplication(Dot1PAppName NokiaConf_Configure_Groups_Group_Router_SgtQos_Dot1P_Application_Dot1PAppName_Union) {
	key := Dot1PAppName

	delete(t.Application, key)
}

// AppendApplication appends the supplied NokiaConf_Configure_Groups_Group_Router_SgtQos_Dot1P_Application struct to the
// list Application of NokiaConf_Configure_Groups_Group_Router_SgtQos_Dot1P. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_SgtQos_Dot1P_Application already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_SgtQos_Dot1P) AppendApplication(v *NokiaConf_Configure_Groups_Group_Router_SgtQos_Dot1P_Application) error {
	key := v.Dot1PAppName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Application == nil {
		t.Application = make(map[NokiaConf_Configure_Groups_Group_Router_SgtQos_Dot1P_Application_Dot1PAppName_Union]*NokiaConf_Configure_Groups_Group_Router_SgtQos_Dot1P_Application)
	}

	if _, ok := t.Application[key]; ok {
		return fmt.Errorf("duplicate key for list Application %v", key)
	}

	t.Application[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_SgtQos_Dot1P
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_SgtQos_Dot1P) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Application {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_SgtQos_Dot1P) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_SgtQos_Dot1P"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_SgtQos_Dot1P) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_SgtQos_Dot1P) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_SgtQos_Dot1P.
func (*NokiaConf_Configure_Groups_Group_Router_SgtQos_Dot1P) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_SgtQos_Dot1P_Application represents the /nokia-conf/configure/groups/group/router/sgt-qos/dot1p/application YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_SgtQos_Dot1P_Application struct {
	Dot1P        NokiaConf_Configure_Groups_Group_Router_SgtQos_Dot1P_Application_Dot1P_Union        `path:"dot1p" module:"nokia-conf"`
	Dot1PAppName NokiaConf_Configure_Groups_Group_Router_SgtQos_Dot1P_Application_Dot1PAppName_Union `path:"dot1p-app-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_SgtQos_Dot1P_Application implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_SgtQos_Dot1P_Application) IsYANGGoStruct() {}

// GetDot1P retrieves the value of the leaf Dot1P from the NokiaConf_Configure_Groups_Group_Router_SgtQos_Dot1P_Application
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dot1P is set, it can
// safely use t.GetDot1P() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dot1P == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_SgtQos_Dot1P_Application) GetDot1P() NokiaConf_Configure_Groups_Group_Router_SgtQos_Dot1P_Application_Dot1P_Union {
	if t == nil || t.Dot1P == nil {
		return nil
	}
	return t.Dot1P
}

// GetDot1PAppName retrieves the value of the leaf Dot1PAppName from the NokiaConf_Configure_Groups_Group_Router_SgtQos_Dot1P_Application
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dot1PAppName is set, it can
// safely use t.GetDot1PAppName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dot1PAppName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_SgtQos_Dot1P_Application) GetDot1PAppName() NokiaConf_Configure_Groups_Group_Router_SgtQos_Dot1P_Application_Dot1PAppName_Union {
	if t == nil || t.Dot1PAppName == nil {
		return nil
	}
	return t.Dot1PAppName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_SgtQos_Dot1P_Application
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_SgtQos_Dot1P_Application) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_SgtQos_Dot1P_Application struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_SgtQos_Dot1P_Application) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"dot1p-app-name": t.Dot1PAppName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_SgtQos_Dot1P_Application) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_SgtQos_Dot1P_Application"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_SgtQos_Dot1P_Application) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_SgtQos_Dot1P_Application) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_SgtQos_Dot1P_Application.
func (*NokiaConf_Configure_Groups_Group_Router_SgtQos_Dot1P_Application) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp represents the /nokia-conf/configure/groups/group/router/sgt-qos/dscp YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp struct {
	Application map[NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_Application_DscpAppName_Union]*NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_Application `path:"application" module:"nokia-conf"`
	DscpMap     map[NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_DscpMap_DscpName_Union]*NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_DscpMap            `path:"dscp-map" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp) IsYANGGoStruct() {}

// NewApplication creates a new entry in the Application list of the
// NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp) NewApplication(DscpAppName NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_Application_DscpAppName_Union) (*NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_Application, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Application == nil {
		t.Application = make(map[NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_Application_DscpAppName_Union]*NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_Application)
	}

	key := DscpAppName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Application[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Application", key)
	}

	t.Application[key] = &NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_Application{
		DscpAppName: DscpAppName,
	}

	return t.Application[key], nil
}

// RenameApplication renames an entry in the list Application within
// the NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp) RenameApplication(oldK, newK NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_Application_DscpAppName_Union) error {
	if _, ok := t.Application[newK]; ok {
		return fmt.Errorf("key %v already exists in Application", newK)
	}

	e, ok := t.Application[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Application", oldK)
	}
	e.DscpAppName = newK

	t.Application[newK] = e
	delete(t.Application, oldK)
	return nil
}

// GetOrCreateApplication retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp) GetOrCreateApplication(DscpAppName NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_Application_DscpAppName_Union) *NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_Application {

	key := DscpAppName

	if v, ok := t.Application[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewApplication(DscpAppName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateApplication got unexpected error: %v", err))
	}
	return v
}

// GetApplication retrieves the value with the specified key from
// the Application map field of NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp) GetApplication(DscpAppName NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_Application_DscpAppName_Union) *NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_Application {

	if t == nil {
		return nil
	}

	key := DscpAppName

	if lm, ok := t.Application[key]; ok {
		return lm
	}
	return nil
}

// DeleteApplication deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp) DeleteApplication(DscpAppName NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_Application_DscpAppName_Union) {
	key := DscpAppName

	delete(t.Application, key)
}

// AppendApplication appends the supplied NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_Application struct to the
// list Application of NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_Application already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp) AppendApplication(v *NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_Application) error {
	key := v.DscpAppName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Application == nil {
		t.Application = make(map[NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_Application_DscpAppName_Union]*NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_Application)
	}

	if _, ok := t.Application[key]; ok {
		return fmt.Errorf("duplicate key for list Application %v", key)
	}

	t.Application[key] = v
	return nil
}

// NewDscpMap creates a new entry in the DscpMap list of the
// NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp) NewDscpMap(DscpName NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_DscpMap_DscpName_Union) (*NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_DscpMap, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DscpMap == nil {
		t.DscpMap = make(map[NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_DscpMap_DscpName_Union]*NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_DscpMap)
	}

	key := DscpName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DscpMap[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DscpMap", key)
	}

	t.DscpMap[key] = &NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_DscpMap{
		DscpName: DscpName,
	}

	return t.DscpMap[key], nil
}

// RenameDscpMap renames an entry in the list DscpMap within
// the NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp) RenameDscpMap(oldK, newK NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_DscpMap_DscpName_Union) error {
	if _, ok := t.DscpMap[newK]; ok {
		return fmt.Errorf("key %v already exists in DscpMap", newK)
	}

	e, ok := t.DscpMap[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in DscpMap", oldK)
	}
	e.DscpName = newK

	t.DscpMap[newK] = e
	delete(t.DscpMap, oldK)
	return nil
}

// GetOrCreateDscpMap retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp) GetOrCreateDscpMap(DscpName NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_DscpMap_DscpName_Union) *NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_DscpMap {

	key := DscpName

	if v, ok := t.DscpMap[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDscpMap(DscpName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDscpMap got unexpected error: %v", err))
	}
	return v
}

// GetDscpMap retrieves the value with the specified key from
// the DscpMap map field of NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp) GetDscpMap(DscpName NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_DscpMap_DscpName_Union) *NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_DscpMap {

	if t == nil {
		return nil
	}

	key := DscpName

	if lm, ok := t.DscpMap[key]; ok {
		return lm
	}
	return nil
}

// DeleteDscpMap deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp) DeleteDscpMap(DscpName NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_DscpMap_DscpName_Union) {
	key := DscpName

	delete(t.DscpMap, key)
}

// AppendDscpMap appends the supplied NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_DscpMap struct to the
// list DscpMap of NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_DscpMap already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp) AppendDscpMap(v *NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_DscpMap) error {
	key := v.DscpName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DscpMap == nil {
		t.DscpMap = make(map[NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_DscpMap_DscpName_Union]*NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_DscpMap)
	}

	if _, ok := t.DscpMap[key]; ok {
		return fmt.Errorf("duplicate key for list DscpMap %v", key)
	}

	t.DscpMap[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Application {
		e.PopulateDefaults()
	}
	for _, e := range t.DscpMap {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp.
func (*NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_Application represents the /nokia-conf/configure/groups/group/router/sgt-qos/dscp/application YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_Application struct {
	Dscp        NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_Application_Dscp_Union        `path:"dscp" module:"nokia-conf"`
	DscpAppName NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_Application_DscpAppName_Union `path:"dscp-app-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_Application implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_Application) IsYANGGoStruct() {}

// GetDscp retrieves the value of the leaf Dscp from the NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_Application
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dscp is set, it can
// safely use t.GetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dscp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_Application) GetDscp() NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_Application_Dscp_Union {
	if t == nil || t.Dscp == nil {
		return nil
	}
	return t.Dscp
}

// GetDscpAppName retrieves the value of the leaf DscpAppName from the NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_Application
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DscpAppName is set, it can
// safely use t.GetDscpAppName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DscpAppName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_Application) GetDscpAppName() NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_Application_DscpAppName_Union {
	if t == nil || t.DscpAppName == nil {
		return nil
	}
	return t.DscpAppName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_Application
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_Application) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_Application struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_Application) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"dscp-app-name": t.DscpAppName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_Application) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_Application"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_Application) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_Application) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_Application.
func (*NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_Application) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_DscpMap represents the /nokia-conf/configure/groups/group/router/sgt-qos/dscp/dscp-map YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_DscpMap struct {
	DscpName NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_DscpMap_DscpName_Union `path:"dscp-name" module:"nokia-conf"`
	Fc       E_NokiaTypesSros_FcName                                                    `path:"fc" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_DscpMap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_DscpMap) IsYANGGoStruct() {}

// GetDscpName retrieves the value of the leaf DscpName from the NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_DscpMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DscpName is set, it can
// safely use t.GetDscpName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DscpName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_DscpMap) GetDscpName() NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_DscpMap_DscpName_Union {
	if t == nil || t.DscpName == nil {
		return nil
	}
	return t.DscpName
}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_DscpMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_DscpMap) GetFc() E_NokiaTypesSros_FcName {
	if t == nil || t.Fc == 0 {
		return 0
	}
	return t.Fc
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_DscpMap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_DscpMap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_DscpMap struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_DscpMap) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"dscp-name": t.DscpName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_DscpMap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_DscpMap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_DscpMap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_DscpMap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_DscpMap.
func (*NokiaConf_Configure_Groups_Group_Router_SgtQos_Dscp_DscpMap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_StaticRoutes represents the /nokia-conf/configure/groups/group/router/static-routes YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_StaticRoutes struct {
	HoldDown *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_HoldDown                                                                 `path:"hold-down" module:"nokia-conf" yangPresence:"true"`
	Route    map[NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Key]*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route `path:"route" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_StaticRoutes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_StaticRoutes) IsYANGGoStruct() {}

// NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Key represents the key for list Route of element /nokia-conf/configure/groups/group/router/static-routes.
type NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Key struct {
	IpPrefix  string                                                                     `path:"ip-prefix"`
	RouteType NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_RouteType_Union `path:"route-type"`
}

// NewRoute creates a new entry in the Route list of the
// NokiaConf_Configure_Groups_Group_Router_StaticRoutes struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes) NewRoute(IpPrefix string, RouteType NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_RouteType_Union) (*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Key]*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route)
	}

	key := NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Key{
		IpPrefix:  IpPrefix,
		RouteType: RouteType,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Route[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Route", key)
	}

	t.Route[key] = &NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route{
		IpPrefix:  &IpPrefix,
		RouteType: RouteType,
	}

	return t.Route[key], nil
}

// RenameRoute renames an entry in the list Route within
// the NokiaConf_Configure_Groups_Group_Router_StaticRoutes struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes) RenameRoute(oldK, newK NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Key) error {
	if _, ok := t.Route[newK]; ok {
		return fmt.Errorf("key %v already exists in Route", newK)
	}

	e, ok := t.Route[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Route", oldK)
	}
	e.IpPrefix = &newK.IpPrefix
	e.RouteType = newK.RouteType

	t.Route[newK] = e
	delete(t.Route, oldK)
	return nil
}

// GetOrCreateRoute retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_StaticRoutes. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes) GetOrCreateRoute(IpPrefix string, RouteType NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_RouteType_Union) *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route {

	key := NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Key{
		IpPrefix:  IpPrefix,
		RouteType: RouteType,
	}

	if v, ok := t.Route[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRoute(IpPrefix, RouteType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRoute got unexpected error: %v", err))
	}
	return v
}

// GetRoute retrieves the value with the specified key from
// the Route map field of NokiaConf_Configure_Groups_Group_Router_StaticRoutes. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes) GetRoute(IpPrefix string, RouteType NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_RouteType_Union) *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Key{
		IpPrefix:  IpPrefix,
		RouteType: RouteType,
	}

	if lm, ok := t.Route[key]; ok {
		return lm
	}
	return nil
}

// DeleteRoute deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_StaticRoutes. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes) DeleteRoute(IpPrefix string, RouteType NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_RouteType_Union) {
	key := NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Key{
		IpPrefix:  IpPrefix,
		RouteType: RouteType,
	}

	delete(t.Route, key)
}

// AppendRoute appends the supplied NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route struct to the
// list Route of NokiaConf_Configure_Groups_Group_Router_StaticRoutes. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes) AppendRoute(v *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route) error {
	if v.IpPrefix == nil {
		return fmt.Errorf("invalid nil key for IpPrefix")
	}

	key := NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Key{
		IpPrefix:  *v.IpPrefix,
		RouteType: v.RouteType,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Key]*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route)
	}

	if _, ok := t.Route[key]; ok {
		return fmt.Errorf("duplicate key for list Route %v", key)
	}

	t.Route[key] = v
	return nil
}

// GetOrCreateHoldDown retrieves the value of the HoldDown field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes) GetOrCreateHoldDown() *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_HoldDown {
	if t.HoldDown != nil {
		return t.HoldDown
	}
	t.HoldDown = &NokiaConf_Configure_Groups_Group_Router_StaticRoutes_HoldDown{}
	return t.HoldDown
}

// GetHoldDown returns the value of the HoldDown struct pointer
// from NokiaConf_Configure_Groups_Group_Router_StaticRoutes. If the receiver or the field HoldDown is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes) GetHoldDown() *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_HoldDown {
	if t != nil && t.HoldDown != nil {
		return t.HoldDown
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_StaticRoutes
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.HoldDown.PopulateDefaults()
	for _, e := range t.Route {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_StaticRoutes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_StaticRoutes.
func (*NokiaConf_Configure_Groups_Group_Router_StaticRoutes) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_StaticRoutes_HoldDown represents the /nokia-conf/configure/groups/group/router/static-routes/hold-down YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_StaticRoutes_HoldDown struct {
	Initial    *uint32 `path:"initial" module:"nokia-conf"`
	MaxValue   *uint32 `path:"max-value" module:"nokia-conf"`
	Multiplier *uint32 `path:"multiplier" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_StaticRoutes_HoldDown implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_HoldDown) IsYANGGoStruct() {}

// GetInitial retrieves the value of the leaf Initial from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_HoldDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Initial is set, it can
// safely use t.GetInitial() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Initial == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_HoldDown) GetInitial() uint32 {
	if t == nil || t.Initial == nil {
		return 0
	}
	return *t.Initial
}

// GetMaxValue retrieves the value of the leaf MaxValue from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_HoldDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxValue is set, it can
// safely use t.GetMaxValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxValue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_HoldDown) GetMaxValue() uint32 {
	if t == nil || t.MaxValue == nil {
		return 0
	}
	return *t.MaxValue
}

// GetMultiplier retrieves the value of the leaf Multiplier from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_HoldDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multiplier is set, it can
// safely use t.GetMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_HoldDown) GetMultiplier() uint32 {
	if t == nil || t.Multiplier == nil {
		return 0
	}
	return *t.Multiplier
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_HoldDown
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_HoldDown) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_HoldDown) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_StaticRoutes_HoldDown"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_HoldDown) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_HoldDown) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_StaticRoutes_HoldDown.
func (*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_HoldDown) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route represents the /nokia-conf/configure/groups/group/router/static-routes/route YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route struct {
	BackupTag *uint32                                                                          `path:"backup-tag" module:"nokia-conf"`
	Blackhole *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Blackhole            `path:"blackhole" module:"nokia-conf" yangPresence:"true"`
	Community []string                                                                         `path:"community" module:"nokia-conf"`
	Indirect  map[string]*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect  `path:"indirect" module:"nokia-conf"`
	Interface map[string]*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface `path:"interface" module:"nokia-conf"`
	IpPrefix  *string                                                                          `path:"ip-prefix" module:"nokia-conf"`
	NextHop   map[string]*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop   `path:"next-hop" module:"nokia-conf"`
	RouteType NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_RouteType_Union       `path:"route-type" module:"nokia-conf"`
	Tag       *uint32                                                                          `path:"tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route) IsYANGGoStruct() {}

// NewIndirect creates a new entry in the Indirect list of the
// NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route) NewIndirect(IpAddress string) (*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Indirect == nil {
		t.Indirect = make(map[string]*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect)
	}

	key := IpAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Indirect[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Indirect", key)
	}

	t.Indirect[key] = &NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect{
		IpAddress: &IpAddress,
	}

	return t.Indirect[key], nil
}

// RenameIndirect renames an entry in the list Indirect within
// the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route) RenameIndirect(oldK, newK string) error {
	if _, ok := t.Indirect[newK]; ok {
		return fmt.Errorf("key %v already exists in Indirect", newK)
	}

	e, ok := t.Indirect[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Indirect", oldK)
	}
	e.IpAddress = &newK

	t.Indirect[newK] = e
	delete(t.Indirect, oldK)
	return nil
}

// GetOrCreateIndirect retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route) GetOrCreateIndirect(IpAddress string) *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect {

	key := IpAddress

	if v, ok := t.Indirect[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIndirect(IpAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIndirect got unexpected error: %v", err))
	}
	return v
}

// GetIndirect retrieves the value with the specified key from
// the Indirect map field of NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route) GetIndirect(IpAddress string) *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect {

	if t == nil {
		return nil
	}

	key := IpAddress

	if lm, ok := t.Indirect[key]; ok {
		return lm
	}
	return nil
}

// DeleteIndirect deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route) DeleteIndirect(IpAddress string) {
	key := IpAddress

	delete(t.Indirect, key)
}

// AppendIndirect appends the supplied NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect struct to the
// list Indirect of NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route) AppendIndirect(v *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect) error {
	if v.IpAddress == nil {
		return fmt.Errorf("invalid nil key received for IpAddress")
	}

	key := *v.IpAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Indirect == nil {
		t.Indirect = make(map[string]*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect)
	}

	if _, ok := t.Indirect[key]; ok {
		return fmt.Errorf("duplicate key for list Indirect %v", key)
	}

	t.Indirect[key] = v
	return nil
}

// NewInterface creates a new entry in the Interface list of the
// NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route) NewInterface(InterfaceName string) (*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface{
		InterfaceName: &InterfaceName,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.InterfaceName = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route) GetOrCreateInterface(InterfaceName string) *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface {

	key := InterfaceName

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route) GetInterface(InterfaceName string) *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface {

	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route) DeleteInterface(InterfaceName string) {
	key := InterfaceName

	delete(t.Interface, key)
}

// AppendInterface appends the supplied NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface struct to the
// list Interface of NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route) AppendInterface(v *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// NewNextHop creates a new entry in the NextHop list of the
// NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route) NewNextHop(IpAddress string) (*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NextHop == nil {
		t.NextHop = make(map[string]*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop)
	}

	key := IpAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NextHop[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NextHop", key)
	}

	t.NextHop[key] = &NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop{
		IpAddress: &IpAddress,
	}

	return t.NextHop[key], nil
}

// RenameNextHop renames an entry in the list NextHop within
// the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route) RenameNextHop(oldK, newK string) error {
	if _, ok := t.NextHop[newK]; ok {
		return fmt.Errorf("key %v already exists in NextHop", newK)
	}

	e, ok := t.NextHop[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NextHop", oldK)
	}
	e.IpAddress = &newK

	t.NextHop[newK] = e
	delete(t.NextHop, oldK)
	return nil
}

// GetOrCreateNextHop retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route) GetOrCreateNextHop(IpAddress string) *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop {

	key := IpAddress

	if v, ok := t.NextHop[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNextHop(IpAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNextHop got unexpected error: %v", err))
	}
	return v
}

// GetNextHop retrieves the value with the specified key from
// the NextHop map field of NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route) GetNextHop(IpAddress string) *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop {

	if t == nil {
		return nil
	}

	key := IpAddress

	if lm, ok := t.NextHop[key]; ok {
		return lm
	}
	return nil
}

// DeleteNextHop deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route) DeleteNextHop(IpAddress string) {
	key := IpAddress

	delete(t.NextHop, key)
}

// AppendNextHop appends the supplied NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop struct to the
// list NextHop of NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route) AppendNextHop(v *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop) error {
	if v.IpAddress == nil {
		return fmt.Errorf("invalid nil key received for IpAddress")
	}

	key := *v.IpAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NextHop == nil {
		t.NextHop = make(map[string]*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop)
	}

	if _, ok := t.NextHop[key]; ok {
		return fmt.Errorf("duplicate key for list NextHop %v", key)
	}

	t.NextHop[key] = v
	return nil
}

// GetOrCreateBlackhole retrieves the value of the Blackhole field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route) GetOrCreateBlackhole() *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Blackhole {
	if t.Blackhole != nil {
		return t.Blackhole
	}
	t.Blackhole = &NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Blackhole{}
	return t.Blackhole
}

// GetBlackhole returns the value of the Blackhole struct pointer
// from NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route. If the receiver or the field Blackhole is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route) GetBlackhole() *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Blackhole {
	if t != nil && t.Blackhole != nil {
		return t.Blackhole
	}
	return nil
}

// GetBackupTag retrieves the value of the leaf BackupTag from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BackupTag is set, it can
// safely use t.GetBackupTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BackupTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route) GetBackupTag() uint32 {
	if t == nil || t.BackupTag == nil {
		return 0
	}
	return *t.BackupTag
}

// GetCommunity retrieves the value of the leaf Community from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Community is set, it can
// safely use t.GetCommunity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Community == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route) GetCommunity() []string {
	if t == nil || t.Community == nil {
		return nil
	}
	return t.Community
}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// GetRouteType retrieves the value of the leaf RouteType from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteType is set, it can
// safely use t.GetRouteType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route) GetRouteType() NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_RouteType_Union {
	if t == nil || t.RouteType == nil {
		return nil
	}
	return t.RouteType
}

// GetTag retrieves the value of the leaf Tag from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tag is set, it can
// safely use t.GetTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route) GetTag() uint32 {
	if t == nil || t.Tag == nil {
		return 0
	}
	return *t.Tag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Blackhole.PopulateDefaults()
	for _, e := range t.Indirect {
		e.PopulateDefaults()
	}
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
	for _, e := range t.NextHop {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	return map[string]interface{}{
		"ip-prefix":  *t.IpPrefix,
		"route-type": t.RouteType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route.
func (*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Blackhole represents the /nokia-conf/configure/groups/group/router/static-routes/route/blackhole YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Blackhole struct {
	AdminState   E_NokiaTypesSros_AdminState                                                      `path:"admin-state" module:"nokia-conf"`
	Community    *string                                                                          `path:"community" module:"nokia-conf"`
	Description  *string                                                                          `path:"description" module:"nokia-conf"`
	DynamicBgp   *bool                                                                            `path:"dynamic-bgp" module:"nokia-conf"`
	GenerateIcmp *bool                                                                            `path:"generate-icmp" module:"nokia-conf"`
	Metric       *uint32                                                                          `path:"metric" module:"nokia-conf"`
	Preference   *uint32                                                                          `path:"preference" module:"nokia-conf"`
	PrefixList   *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Blackhole_PrefixList `path:"prefix-list" module:"nokia-conf"`
	Tag          *uint32                                                                          `path:"tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Blackhole implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Blackhole) IsYANGGoStruct() {}

// GetOrCreatePrefixList retrieves the value of the PrefixList field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Blackhole) GetOrCreatePrefixList() *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Blackhole_PrefixList {
	if t.PrefixList != nil {
		return t.PrefixList
	}
	t.PrefixList = &NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Blackhole_PrefixList{}
	return t.PrefixList
}

// GetPrefixList returns the value of the PrefixList struct pointer
// from NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Blackhole. If the receiver or the field PrefixList is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Blackhole) GetPrefixList() *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Blackhole_PrefixList {
	if t != nil && t.PrefixList != nil {
		return t.PrefixList
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Blackhole
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Blackhole) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetCommunity retrieves the value of the leaf Community from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Blackhole
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Community is set, it can
// safely use t.GetCommunity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Community == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Blackhole) GetCommunity() string {
	if t == nil || t.Community == nil {
		return ""
	}
	return *t.Community
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Blackhole
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Blackhole) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDynamicBgp retrieves the value of the leaf DynamicBgp from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Blackhole
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DynamicBgp is set, it can
// safely use t.GetDynamicBgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DynamicBgp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Blackhole) GetDynamicBgp() bool {
	if t == nil || t.DynamicBgp == nil {
		return false
	}
	return *t.DynamicBgp
}

// GetGenerateIcmp retrieves the value of the leaf GenerateIcmp from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Blackhole
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GenerateIcmp is set, it can
// safely use t.GetGenerateIcmp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GenerateIcmp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Blackhole) GetGenerateIcmp() bool {
	if t == nil || t.GenerateIcmp == nil {
		return false
	}
	return *t.GenerateIcmp
}

// GetMetric retrieves the value of the leaf Metric from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Blackhole
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Metric is set, it can
// safely use t.GetMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Metric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Blackhole) GetMetric() uint32 {
	if t == nil || t.Metric == nil {
		return 1
	}
	return *t.Metric
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Blackhole
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Blackhole) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 5
	}
	return *t.Preference
}

// GetTag retrieves the value of the leaf Tag from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Blackhole
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tag is set, it can
// safely use t.GetTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Blackhole) GetTag() uint32 {
	if t == nil || t.Tag == nil {
		return 0
	}
	return *t.Tag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Blackhole
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Blackhole) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DynamicBgp == nil {
		var v bool = false
		t.DynamicBgp = &v
	}
	if t.GenerateIcmp == nil {
		var v bool = false
		t.GenerateIcmp = &v
	}
	if t.Metric == nil {
		var v uint32 = 1
		t.Metric = &v
	}
	if t.Preference == nil {
		var v uint32 = 5
		t.Preference = &v
	}
	t.PrefixList.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Blackhole) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Blackhole"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Blackhole) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Blackhole) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Blackhole.
func (*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Blackhole) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Blackhole_PrefixList represents the /nokia-conf/configure/groups/group/router/static-routes/route/blackhole/prefix-list YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Blackhole_PrefixList struct {
	Flag E_NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Blackhole_PrefixList_Flag `path:"flag" module:"nokia-conf"`
	Name *string                                                                                `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Blackhole_PrefixList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Blackhole_PrefixList) IsYANGGoStruct() {
}

// GetFlag retrieves the value of the leaf Flag from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Blackhole_PrefixList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Flag is set, it can
// safely use t.GetFlag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Flag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Blackhole_PrefixList) GetFlag() E_NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Blackhole_PrefixList_Flag {
	if t == nil || t.Flag == 0 {
		return NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Blackhole_PrefixList_Flag_any
	}
	return t.Flag
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Blackhole_PrefixList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Blackhole_PrefixList) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Blackhole_PrefixList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Blackhole_PrefixList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Flag == 0 {
		t.Flag = NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Blackhole_PrefixList_Flag_any
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Blackhole_PrefixList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Blackhole_PrefixList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Blackhole_PrefixList) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Blackhole_PrefixList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Blackhole_PrefixList.
func (*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Blackhole_PrefixList) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect represents the /nokia-conf/configure/groups/group/router/static-routes/route/indirect YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect struct {
	AdminState       E_NokiaTypesSros_AdminState                                                              `path:"admin-state" module:"nokia-conf"`
	Community        *string                                                                                  `path:"community" module:"nokia-conf"`
	CpeCheck         map[string]*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_CpeCheck `path:"cpe-check" module:"nokia-conf"`
	Description      *string                                                                                  `path:"description" module:"nokia-conf"`
	DestinationClass *uint32                                                                                  `path:"destination-class" module:"nokia-conf"`
	IpAddress        *string                                                                                  `path:"ip-address" module:"nokia-conf"`
	Metric           *uint32                                                                                  `path:"metric" module:"nokia-conf"`
	Preference       *uint32                                                                                  `path:"preference" module:"nokia-conf"`
	PrefixList       *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_PrefixList          `path:"prefix-list" module:"nokia-conf"`
	Qos              *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_Qos                 `path:"qos" module:"nokia-conf"`
	SourceClass      *uint32                                                                                  `path:"source-class" module:"nokia-conf"`
	Tag              *uint32                                                                                  `path:"tag" module:"nokia-conf"`
	TunnelNextHop    *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop       `path:"tunnel-next-hop" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect) IsYANGGoStruct() {}

// NewCpeCheck creates a new entry in the CpeCheck list of the
// NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect) NewCpeCheck(Address string) (*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_CpeCheck, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CpeCheck == nil {
		t.CpeCheck = make(map[string]*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_CpeCheck)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.CpeCheck[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list CpeCheck", key)
	}

	t.CpeCheck[key] = &NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_CpeCheck{
		Address: &Address,
	}

	return t.CpeCheck[key], nil
}

// RenameCpeCheck renames an entry in the list CpeCheck within
// the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect) RenameCpeCheck(oldK, newK string) error {
	if _, ok := t.CpeCheck[newK]; ok {
		return fmt.Errorf("key %v already exists in CpeCheck", newK)
	}

	e, ok := t.CpeCheck[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in CpeCheck", oldK)
	}
	e.Address = &newK

	t.CpeCheck[newK] = e
	delete(t.CpeCheck, oldK)
	return nil
}

// GetOrCreateCpeCheck retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect) GetOrCreateCpeCheck(Address string) *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_CpeCheck {

	key := Address

	if v, ok := t.CpeCheck[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCpeCheck(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCpeCheck got unexpected error: %v", err))
	}
	return v
}

// GetCpeCheck retrieves the value with the specified key from
// the CpeCheck map field of NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect) GetCpeCheck(Address string) *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_CpeCheck {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.CpeCheck[key]; ok {
		return lm
	}
	return nil
}

// DeleteCpeCheck deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect) DeleteCpeCheck(Address string) {
	key := Address

	delete(t.CpeCheck, key)
}

// AppendCpeCheck appends the supplied NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_CpeCheck struct to the
// list CpeCheck of NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_CpeCheck already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect) AppendCpeCheck(v *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_CpeCheck) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CpeCheck == nil {
		t.CpeCheck = make(map[string]*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_CpeCheck)
	}

	if _, ok := t.CpeCheck[key]; ok {
		return fmt.Errorf("duplicate key for list CpeCheck %v", key)
	}

	t.CpeCheck[key] = v
	return nil
}

// GetOrCreatePrefixList retrieves the value of the PrefixList field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect) GetOrCreatePrefixList() *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_PrefixList {
	if t.PrefixList != nil {
		return t.PrefixList
	}
	t.PrefixList = &NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_PrefixList{}
	return t.PrefixList
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect) GetOrCreateQos() *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_Qos{}
	return t.Qos
}

// GetOrCreateTunnelNextHop retrieves the value of the TunnelNextHop field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect) GetOrCreateTunnelNextHop() *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop {
	if t.TunnelNextHop != nil {
		return t.TunnelNextHop
	}
	t.TunnelNextHop = &NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop{}
	return t.TunnelNextHop
}

// GetPrefixList returns the value of the PrefixList struct pointer
// from NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect. If the receiver or the field PrefixList is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect) GetPrefixList() *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_PrefixList {
	if t != nil && t.PrefixList != nil {
		return t.PrefixList
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect) GetQos() *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// GetTunnelNextHop returns the value of the TunnelNextHop struct pointer
// from NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect. If the receiver or the field TunnelNextHop is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect) GetTunnelNextHop() *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop {
	if t != nil && t.TunnelNextHop != nil {
		return t.TunnelNextHop
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetCommunity retrieves the value of the leaf Community from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Community is set, it can
// safely use t.GetCommunity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Community == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect) GetCommunity() string {
	if t == nil || t.Community == nil {
		return ""
	}
	return *t.Community
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDestinationClass retrieves the value of the leaf DestinationClass from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationClass is set, it can
// safely use t.GetDestinationClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationClass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect) GetDestinationClass() uint32 {
	if t == nil || t.DestinationClass == nil {
		return 0
	}
	return *t.DestinationClass
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetMetric retrieves the value of the leaf Metric from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Metric is set, it can
// safely use t.GetMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Metric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect) GetMetric() uint32 {
	if t == nil || t.Metric == nil {
		return 1
	}
	return *t.Metric
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 5
	}
	return *t.Preference
}

// GetSourceClass retrieves the value of the leaf SourceClass from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceClass is set, it can
// safely use t.GetSourceClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceClass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect) GetSourceClass() uint32 {
	if t == nil || t.SourceClass == nil {
		return 0
	}
	return *t.SourceClass
}

// GetTag retrieves the value of the leaf Tag from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tag is set, it can
// safely use t.GetTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect) GetTag() uint32 {
	if t == nil || t.Tag == nil {
		return 0
	}
	return *t.Tag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Metric == nil {
		var v uint32 = 1
		t.Metric = &v
	}
	if t.Preference == nil {
		var v uint32 = 5
		t.Preference = &v
	}
	t.PrefixList.PopulateDefaults()
	t.Qos.PopulateDefaults()
	t.TunnelNextHop.PopulateDefaults()
	for _, e := range t.CpeCheck {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpAddress == nil {
		return nil, fmt.Errorf("nil value for key IpAddress")
	}

	return map[string]interface{}{
		"ip-address": *t.IpAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect.
func (*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_CpeCheck represents the /nokia-conf/configure/groups/group/router/static-routes/route/indirect/cpe-check YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_CpeCheck struct {
	Address     *string `path:"address" module:"nokia-conf"`
	DropCount   *uint32 `path:"drop-count" module:"nokia-conf"`
	Interval    *uint32 `path:"interval" module:"nokia-conf"`
	Log         *bool   `path:"log" module:"nokia-conf"`
	PaddingSize *uint32 `path:"padding-size" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_CpeCheck implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_CpeCheck) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_CpeCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_CpeCheck) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetDropCount retrieves the value of the leaf DropCount from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_CpeCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DropCount is set, it can
// safely use t.GetDropCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DropCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_CpeCheck) GetDropCount() uint32 {
	if t == nil || t.DropCount == nil {
		return 3
	}
	return *t.DropCount
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_CpeCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_CpeCheck) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 1
	}
	return *t.Interval
}

// GetLog retrieves the value of the leaf Log from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_CpeCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Log is set, it can
// safely use t.GetLog() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Log == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_CpeCheck) GetLog() bool {
	if t == nil || t.Log == nil {
		return false
	}
	return *t.Log
}

// GetPaddingSize retrieves the value of the leaf PaddingSize from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_CpeCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PaddingSize is set, it can
// safely use t.GetPaddingSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PaddingSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_CpeCheck) GetPaddingSize() uint32 {
	if t == nil || t.PaddingSize == nil {
		return 56
	}
	return *t.PaddingSize
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_CpeCheck
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_CpeCheck) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DropCount == nil {
		var v uint32 = 3
		t.DropCount = &v
	}
	if t.Interval == nil {
		var v uint32 = 1
		t.Interval = &v
	}
	if t.Log == nil {
		var v bool = false
		t.Log = &v
	}
	if t.PaddingSize == nil {
		var v uint32 = 56
		t.PaddingSize = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_CpeCheck struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_CpeCheck) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_CpeCheck) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_CpeCheck"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_CpeCheck) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_CpeCheck) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_CpeCheck.
func (*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_CpeCheck) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_PrefixList represents the /nokia-conf/configure/groups/group/router/static-routes/route/indirect/prefix-list YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_PrefixList struct {
	Flag E_NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_PrefixList_Flag `path:"flag" module:"nokia-conf"`
	Name *string                                                                               `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_PrefixList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_PrefixList) IsYANGGoStruct() {
}

// GetFlag retrieves the value of the leaf Flag from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_PrefixList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Flag is set, it can
// safely use t.GetFlag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Flag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_PrefixList) GetFlag() E_NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_PrefixList_Flag {
	if t == nil || t.Flag == 0 {
		return NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_PrefixList_Flag_any
	}
	return t.Flag
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_PrefixList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_PrefixList) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_PrefixList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_PrefixList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Flag == 0 {
		t.Flag = NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_PrefixList_Flag_any
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_PrefixList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_PrefixList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_PrefixList) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_PrefixList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_PrefixList.
func (*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_PrefixList) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_Qos represents the /nokia-conf/configure/groups/group/router/static-routes/route/indirect/qos YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_Qos struct {
	ForwardingClass E_NokiaTypesSros_FcName   `path:"forwarding-class" module:"nokia-conf"`
	Priority        E_NokiaTypesSros_Priority `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_Qos) IsYANGGoStruct() {}

// GetForwardingClass retrieves the value of the leaf ForwardingClass from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForwardingClass is set, it can
// safely use t.GetForwardingClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForwardingClass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_Qos) GetForwardingClass() E_NokiaTypesSros_FcName {
	if t == nil || t.ForwardingClass == 0 {
		return 0
	}
	return t.ForwardingClass
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_Qos) GetPriority() E_NokiaTypesSros_Priority {
	if t == nil || t.Priority == 0 {
		return 0
	}
	return t.Priority
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_Qos.
func (*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop represents the /nokia-conf/configure/groups/group/router/static-routes/route/indirect/tunnel-next-hop YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop struct {
	DisallowIgp      *bool                                                                                               `path:"disallow-igp" module:"nokia-conf"`
	FlexAlgo         *uint32                                                                                             `path:"flex-algo" module:"nokia-conf"`
	Resolution       E_NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_Resolution      `path:"resolution" module:"nokia-conf"`
	ResolutionFilter *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter `path:"resolution-filter" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop) IsYANGGoStruct() {
}

// GetOrCreateResolutionFilter retrieves the value of the ResolutionFilter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop) GetOrCreateResolutionFilter() *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter {
	if t.ResolutionFilter != nil {
		return t.ResolutionFilter
	}
	t.ResolutionFilter = &NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter{}
	return t.ResolutionFilter
}

// GetResolutionFilter returns the value of the ResolutionFilter struct pointer
// from NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop. If the receiver or the field ResolutionFilter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop) GetResolutionFilter() *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter {
	if t != nil && t.ResolutionFilter != nil {
		return t.ResolutionFilter
	}
	return nil
}

// GetDisallowIgp retrieves the value of the leaf DisallowIgp from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DisallowIgp is set, it can
// safely use t.GetDisallowIgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DisallowIgp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop) GetDisallowIgp() bool {
	if t == nil || t.DisallowIgp == nil {
		return false
	}
	return *t.DisallowIgp
}

// GetFlexAlgo retrieves the value of the leaf FlexAlgo from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlexAlgo is set, it can
// safely use t.GetFlexAlgo() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlexAlgo == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop) GetFlexAlgo() uint32 {
	if t == nil || t.FlexAlgo == nil {
		return 0
	}
	return *t.FlexAlgo
}

// GetResolution retrieves the value of the leaf Resolution from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Resolution is set, it can
// safely use t.GetResolution() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Resolution == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop) GetResolution() E_NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_Resolution {
	if t == nil || t.Resolution == 0 {
		return NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_Resolution_none
	}
	return t.Resolution
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DisallowIgp == nil {
		var v bool = false
		t.DisallowIgp = &v
	}
	if t.Resolution == 0 {
		t.Resolution = NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_Resolution_none
	}
	t.ResolutionFilter.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop.
func (*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter represents the /nokia-conf/configure/groups/group/router/static-routes/route/indirect/tunnel-next-hop/resolution-filter YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter struct {
	Ldp           *bool                                                                                                      `path:"ldp" module:"nokia-conf"`
	MplsFwdPolicy *bool                                                                                                      `path:"mpls-fwd-policy" module:"nokia-conf"`
	RibApi        *bool                                                                                                      `path:"rib-api" module:"nokia-conf"`
	RsvpTe        *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe `path:"rsvp-te" module:"nokia-conf" yangPresence:"true"`
	SrIsis        *bool                                                                                                      `path:"sr-isis" module:"nokia-conf"`
	SrOspf        *bool                                                                                                      `path:"sr-ospf" module:"nokia-conf"`
	SrOspf3       *bool                                                                                                      `path:"sr-ospf3" module:"nokia-conf"`
	SrTe          *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe   `path:"sr-te" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter) IsYANGGoStruct() {
}

// GetOrCreateRsvpTe retrieves the value of the RsvpTe field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter) GetOrCreateRsvpTe() *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe {
	if t.RsvpTe != nil {
		return t.RsvpTe
	}
	t.RsvpTe = &NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe{}
	return t.RsvpTe
}

// GetOrCreateSrTe retrieves the value of the SrTe field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter) GetOrCreateSrTe() *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe {
	if t.SrTe != nil {
		return t.SrTe
	}
	t.SrTe = &NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe{}
	return t.SrTe
}

// GetRsvpTe returns the value of the RsvpTe struct pointer
// from NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter. If the receiver or the field RsvpTe is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter) GetRsvpTe() *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe {
	if t != nil && t.RsvpTe != nil {
		return t.RsvpTe
	}
	return nil
}

// GetSrTe returns the value of the SrTe struct pointer
// from NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter. If the receiver or the field SrTe is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter) GetSrTe() *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe {
	if t != nil && t.SrTe != nil {
		return t.SrTe
	}
	return nil
}

// GetLdp retrieves the value of the leaf Ldp from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ldp is set, it can
// safely use t.GetLdp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ldp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter) GetLdp() bool {
	if t == nil || t.Ldp == nil {
		return false
	}
	return *t.Ldp
}

// GetMplsFwdPolicy retrieves the value of the leaf MplsFwdPolicy from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MplsFwdPolicy is set, it can
// safely use t.GetMplsFwdPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MplsFwdPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter) GetMplsFwdPolicy() bool {
	if t == nil || t.MplsFwdPolicy == nil {
		return false
	}
	return *t.MplsFwdPolicy
}

// GetRibApi retrieves the value of the leaf RibApi from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RibApi is set, it can
// safely use t.GetRibApi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RibApi == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter) GetRibApi() bool {
	if t == nil || t.RibApi == nil {
		return false
	}
	return *t.RibApi
}

// GetSrIsis retrieves the value of the leaf SrIsis from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrIsis is set, it can
// safely use t.GetSrIsis() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrIsis == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter) GetSrIsis() bool {
	if t == nil || t.SrIsis == nil {
		return false
	}
	return *t.SrIsis
}

// GetSrOspf retrieves the value of the leaf SrOspf from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrOspf is set, it can
// safely use t.GetSrOspf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrOspf == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter) GetSrOspf() bool {
	if t == nil || t.SrOspf == nil {
		return false
	}
	return *t.SrOspf
}

// GetSrOspf3 retrieves the value of the leaf SrOspf3 from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrOspf3 is set, it can
// safely use t.GetSrOspf3() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrOspf3 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter) GetSrOspf3() bool {
	if t == nil || t.SrOspf3 == nil {
		return false
	}
	return *t.SrOspf3
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ldp == nil {
		var v bool = false
		t.Ldp = &v
	}
	if t.MplsFwdPolicy == nil {
		var v bool = false
		t.MplsFwdPolicy = &v
	}
	if t.RibApi == nil {
		var v bool = false
		t.RibApi = &v
	}
	if t.SrIsis == nil {
		var v bool = false
		t.SrIsis = &v
	}
	if t.SrOspf == nil {
		var v bool = false
		t.SrOspf = &v
	}
	if t.SrOspf3 == nil {
		var v bool = false
		t.SrOspf3 = &v
	}
	t.RsvpTe.PopulateDefaults()
	t.SrTe.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter.
func (*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe represents the /nokia-conf/configure/groups/group/router/static-routes/route/indirect/tunnel-next-hop/resolution-filter/rsvp-te YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe struct {
	Lsp map[string]*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe_Lsp `path:"lsp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe) IsYANGGoStruct() {
}

// NewLsp creates a new entry in the Lsp list of the
// NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe) NewLsp(LspName string) (*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe_Lsp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Lsp == nil {
		t.Lsp = make(map[string]*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe_Lsp)
	}

	key := LspName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Lsp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Lsp", key)
	}

	t.Lsp[key] = &NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe_Lsp{
		LspName: &LspName,
	}

	return t.Lsp[key], nil
}

// RenameLsp renames an entry in the list Lsp within
// the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe) RenameLsp(oldK, newK string) error {
	if _, ok := t.Lsp[newK]; ok {
		return fmt.Errorf("key %v already exists in Lsp", newK)
	}

	e, ok := t.Lsp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Lsp", oldK)
	}
	e.LspName = &newK

	t.Lsp[newK] = e
	delete(t.Lsp, oldK)
	return nil
}

// GetOrCreateLsp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe) GetOrCreateLsp(LspName string) *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe_Lsp {

	key := LspName

	if v, ok := t.Lsp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLsp(LspName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLsp got unexpected error: %v", err))
	}
	return v
}

// GetLsp retrieves the value with the specified key from
// the Lsp map field of NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe) GetLsp(LspName string) *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe_Lsp {

	if t == nil {
		return nil
	}

	key := LspName

	if lm, ok := t.Lsp[key]; ok {
		return lm
	}
	return nil
}

// DeleteLsp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe) DeleteLsp(LspName string) {
	key := LspName

	delete(t.Lsp, key)
}

// AppendLsp appends the supplied NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe_Lsp struct to the
// list Lsp of NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe_Lsp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe) AppendLsp(v *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe_Lsp) error {
	if v.LspName == nil {
		return fmt.Errorf("invalid nil key received for LspName")
	}

	key := *v.LspName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Lsp == nil {
		t.Lsp = make(map[string]*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe_Lsp)
	}

	if _, ok := t.Lsp[key]; ok {
		return fmt.Errorf("duplicate key for list Lsp %v", key)
	}

	t.Lsp[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Lsp {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe.
func (*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe_Lsp represents the /nokia-conf/configure/groups/group/router/static-routes/route/indirect/tunnel-next-hop/resolution-filter/rsvp-te/lsp YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe_Lsp struct {
	LspName *string `path:"lsp-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe_Lsp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe_Lsp) IsYANGGoStruct() {
}

// GetLspName retrieves the value of the leaf LspName from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe_Lsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspName is set, it can
// safely use t.GetLspName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe_Lsp) GetLspName() string {
	if t == nil || t.LspName == nil {
		return ""
	}
	return *t.LspName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe_Lsp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe_Lsp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe_Lsp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe_Lsp) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LspName == nil {
		return nil, fmt.Errorf("nil value for key LspName")
	}

	return map[string]interface{}{
		"lsp-name": *t.LspName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe_Lsp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe_Lsp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe_Lsp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe_Lsp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe_Lsp.
func (*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_RsvpTe_Lsp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe represents the /nokia-conf/configure/groups/group/router/static-routes/route/indirect/tunnel-next-hop/resolution-filter/sr-te YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe struct {
	Lsp map[string]*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe_Lsp `path:"lsp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe) IsYANGGoStruct() {
}

// NewLsp creates a new entry in the Lsp list of the
// NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe) NewLsp(LspName string) (*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe_Lsp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Lsp == nil {
		t.Lsp = make(map[string]*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe_Lsp)
	}

	key := LspName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Lsp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Lsp", key)
	}

	t.Lsp[key] = &NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe_Lsp{
		LspName: &LspName,
	}

	return t.Lsp[key], nil
}

// RenameLsp renames an entry in the list Lsp within
// the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe) RenameLsp(oldK, newK string) error {
	if _, ok := t.Lsp[newK]; ok {
		return fmt.Errorf("key %v already exists in Lsp", newK)
	}

	e, ok := t.Lsp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Lsp", oldK)
	}
	e.LspName = &newK

	t.Lsp[newK] = e
	delete(t.Lsp, oldK)
	return nil
}

// GetOrCreateLsp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe) GetOrCreateLsp(LspName string) *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe_Lsp {

	key := LspName

	if v, ok := t.Lsp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLsp(LspName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLsp got unexpected error: %v", err))
	}
	return v
}

// GetLsp retrieves the value with the specified key from
// the Lsp map field of NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe) GetLsp(LspName string) *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe_Lsp {

	if t == nil {
		return nil
	}

	key := LspName

	if lm, ok := t.Lsp[key]; ok {
		return lm
	}
	return nil
}

// DeleteLsp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe) DeleteLsp(LspName string) {
	key := LspName

	delete(t.Lsp, key)
}

// AppendLsp appends the supplied NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe_Lsp struct to the
// list Lsp of NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe_Lsp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe) AppendLsp(v *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe_Lsp) error {
	if v.LspName == nil {
		return fmt.Errorf("invalid nil key received for LspName")
	}

	key := *v.LspName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Lsp == nil {
		t.Lsp = make(map[string]*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe_Lsp)
	}

	if _, ok := t.Lsp[key]; ok {
		return fmt.Errorf("duplicate key for list Lsp %v", key)
	}

	t.Lsp[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Lsp {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe.
func (*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe_Lsp represents the /nokia-conf/configure/groups/group/router/static-routes/route/indirect/tunnel-next-hop/resolution-filter/sr-te/lsp YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe_Lsp struct {
	LspName *string `path:"lsp-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe_Lsp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe_Lsp) IsYANGGoStruct() {
}

// GetLspName retrieves the value of the leaf LspName from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe_Lsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspName is set, it can
// safely use t.GetLspName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe_Lsp) GetLspName() string {
	if t == nil || t.LspName == nil {
		return ""
	}
	return *t.LspName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe_Lsp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe_Lsp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe_Lsp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe_Lsp) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LspName == nil {
		return nil, fmt.Errorf("nil value for key LspName")
	}

	return map[string]interface{}{
		"lsp-name": *t.LspName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe_Lsp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe_Lsp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe_Lsp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe_Lsp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe_Lsp.
func (*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Indirect_TunnelNextHop_ResolutionFilter_SrTe_Lsp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface represents the /nokia-conf/configure/groups/group/router/static-routes/route/interface YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface struct {
	AdminState          E_NokiaTypesSros_AdminState                                                               `path:"admin-state" module:"nokia-conf"`
	Community           *string                                                                                   `path:"community" module:"nokia-conf"`
	CpeCheck            map[string]*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_CpeCheck `path:"cpe-check" module:"nokia-conf"`
	Description         *string                                                                                   `path:"description" module:"nokia-conf"`
	DestinationClass    *uint32                                                                                   `path:"destination-class" module:"nokia-conf"`
	InterfaceName       *string                                                                                   `path:"interface-name" module:"nokia-conf"`
	LoadBalancingWeight *uint32                                                                                   `path:"load-balancing-weight" module:"nokia-conf"`
	Metric              *uint32                                                                                   `path:"metric" module:"nokia-conf"`
	Preference          *uint32                                                                                   `path:"preference" module:"nokia-conf"`
	PrefixList          *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_PrefixList          `path:"prefix-list" module:"nokia-conf"`
	Qos                 *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_Qos                 `path:"qos" module:"nokia-conf"`
	SourceClass         *uint32                                                                                   `path:"source-class" module:"nokia-conf"`
	Tag                 *uint32                                                                                   `path:"tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface) IsYANGGoStruct() {}

// NewCpeCheck creates a new entry in the CpeCheck list of the
// NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface) NewCpeCheck(Address string) (*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_CpeCheck, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CpeCheck == nil {
		t.CpeCheck = make(map[string]*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_CpeCheck)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.CpeCheck[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list CpeCheck", key)
	}

	t.CpeCheck[key] = &NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_CpeCheck{
		Address: &Address,
	}

	return t.CpeCheck[key], nil
}

// RenameCpeCheck renames an entry in the list CpeCheck within
// the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface) RenameCpeCheck(oldK, newK string) error {
	if _, ok := t.CpeCheck[newK]; ok {
		return fmt.Errorf("key %v already exists in CpeCheck", newK)
	}

	e, ok := t.CpeCheck[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in CpeCheck", oldK)
	}
	e.Address = &newK

	t.CpeCheck[newK] = e
	delete(t.CpeCheck, oldK)
	return nil
}

// GetOrCreateCpeCheck retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface) GetOrCreateCpeCheck(Address string) *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_CpeCheck {

	key := Address

	if v, ok := t.CpeCheck[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCpeCheck(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCpeCheck got unexpected error: %v", err))
	}
	return v
}

// GetCpeCheck retrieves the value with the specified key from
// the CpeCheck map field of NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface) GetCpeCheck(Address string) *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_CpeCheck {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.CpeCheck[key]; ok {
		return lm
	}
	return nil
}

// DeleteCpeCheck deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface) DeleteCpeCheck(Address string) {
	key := Address

	delete(t.CpeCheck, key)
}

// AppendCpeCheck appends the supplied NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_CpeCheck struct to the
// list CpeCheck of NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_CpeCheck already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface) AppendCpeCheck(v *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_CpeCheck) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CpeCheck == nil {
		t.CpeCheck = make(map[string]*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_CpeCheck)
	}

	if _, ok := t.CpeCheck[key]; ok {
		return fmt.Errorf("duplicate key for list CpeCheck %v", key)
	}

	t.CpeCheck[key] = v
	return nil
}

// GetOrCreatePrefixList retrieves the value of the PrefixList field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface) GetOrCreatePrefixList() *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_PrefixList {
	if t.PrefixList != nil {
		return t.PrefixList
	}
	t.PrefixList = &NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_PrefixList{}
	return t.PrefixList
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface) GetOrCreateQos() *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_Qos{}
	return t.Qos
}

// GetPrefixList returns the value of the PrefixList struct pointer
// from NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface. If the receiver or the field PrefixList is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface) GetPrefixList() *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_PrefixList {
	if t != nil && t.PrefixList != nil {
		return t.PrefixList
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface) GetQos() *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetCommunity retrieves the value of the leaf Community from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Community is set, it can
// safely use t.GetCommunity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Community == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface) GetCommunity() string {
	if t == nil || t.Community == nil {
		return ""
	}
	return *t.Community
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDestinationClass retrieves the value of the leaf DestinationClass from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationClass is set, it can
// safely use t.GetDestinationClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationClass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface) GetDestinationClass() uint32 {
	if t == nil || t.DestinationClass == nil {
		return 0
	}
	return *t.DestinationClass
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetLoadBalancingWeight retrieves the value of the leaf LoadBalancingWeight from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoadBalancingWeight is set, it can
// safely use t.GetLoadBalancingWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoadBalancingWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface) GetLoadBalancingWeight() uint32 {
	if t == nil || t.LoadBalancingWeight == nil {
		return 0
	}
	return *t.LoadBalancingWeight
}

// GetMetric retrieves the value of the leaf Metric from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Metric is set, it can
// safely use t.GetMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Metric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface) GetMetric() uint32 {
	if t == nil || t.Metric == nil {
		return 1
	}
	return *t.Metric
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 5
	}
	return *t.Preference
}

// GetSourceClass retrieves the value of the leaf SourceClass from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceClass is set, it can
// safely use t.GetSourceClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceClass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface) GetSourceClass() uint32 {
	if t == nil || t.SourceClass == nil {
		return 0
	}
	return *t.SourceClass
}

// GetTag retrieves the value of the leaf Tag from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tag is set, it can
// safely use t.GetTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface) GetTag() uint32 {
	if t == nil || t.Tag == nil {
		return 0
	}
	return *t.Tag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Metric == nil {
		var v uint32 = 1
		t.Metric = &v
	}
	if t.Preference == nil {
		var v uint32 = 5
		t.Preference = &v
	}
	t.PrefixList.PopulateDefaults()
	t.Qos.PopulateDefaults()
	for _, e := range t.CpeCheck {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface.
func (*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_CpeCheck represents the /nokia-conf/configure/groups/group/router/static-routes/route/interface/cpe-check YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_CpeCheck struct {
	Address     *string `path:"address" module:"nokia-conf"`
	DropCount   *uint32 `path:"drop-count" module:"nokia-conf"`
	Interval    *uint32 `path:"interval" module:"nokia-conf"`
	Log         *bool   `path:"log" module:"nokia-conf"`
	PaddingSize *uint32 `path:"padding-size" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_CpeCheck implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_CpeCheck) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_CpeCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_CpeCheck) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetDropCount retrieves the value of the leaf DropCount from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_CpeCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DropCount is set, it can
// safely use t.GetDropCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DropCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_CpeCheck) GetDropCount() uint32 {
	if t == nil || t.DropCount == nil {
		return 3
	}
	return *t.DropCount
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_CpeCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_CpeCheck) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 1
	}
	return *t.Interval
}

// GetLog retrieves the value of the leaf Log from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_CpeCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Log is set, it can
// safely use t.GetLog() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Log == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_CpeCheck) GetLog() bool {
	if t == nil || t.Log == nil {
		return false
	}
	return *t.Log
}

// GetPaddingSize retrieves the value of the leaf PaddingSize from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_CpeCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PaddingSize is set, it can
// safely use t.GetPaddingSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PaddingSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_CpeCheck) GetPaddingSize() uint32 {
	if t == nil || t.PaddingSize == nil {
		return 56
	}
	return *t.PaddingSize
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_CpeCheck
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_CpeCheck) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DropCount == nil {
		var v uint32 = 3
		t.DropCount = &v
	}
	if t.Interval == nil {
		var v uint32 = 1
		t.Interval = &v
	}
	if t.Log == nil {
		var v bool = false
		t.Log = &v
	}
	if t.PaddingSize == nil {
		var v uint32 = 56
		t.PaddingSize = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_CpeCheck struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_CpeCheck) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_CpeCheck) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_CpeCheck"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_CpeCheck) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_CpeCheck) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_CpeCheck.
func (*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_CpeCheck) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_PrefixList represents the /nokia-conf/configure/groups/group/router/static-routes/route/interface/prefix-list YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_PrefixList struct {
	Flag E_NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_PrefixList_Flag `path:"flag" module:"nokia-conf"`
	Name *string                                                                                `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_PrefixList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_PrefixList) IsYANGGoStruct() {
}

// GetFlag retrieves the value of the leaf Flag from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_PrefixList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Flag is set, it can
// safely use t.GetFlag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Flag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_PrefixList) GetFlag() E_NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_PrefixList_Flag {
	if t == nil || t.Flag == 0 {
		return NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_PrefixList_Flag_any
	}
	return t.Flag
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_PrefixList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_PrefixList) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_PrefixList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_PrefixList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Flag == 0 {
		t.Flag = NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_PrefixList_Flag_any
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_PrefixList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_PrefixList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_PrefixList) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_PrefixList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_PrefixList.
func (*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_PrefixList) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_Qos represents the /nokia-conf/configure/groups/group/router/static-routes/route/interface/qos YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_Qos struct {
	ForwardingClass E_NokiaTypesSros_FcName   `path:"forwarding-class" module:"nokia-conf"`
	Priority        E_NokiaTypesSros_Priority `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_Qos) IsYANGGoStruct() {}

// GetForwardingClass retrieves the value of the leaf ForwardingClass from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForwardingClass is set, it can
// safely use t.GetForwardingClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForwardingClass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_Qos) GetForwardingClass() E_NokiaTypesSros_FcName {
	if t == nil || t.ForwardingClass == 0 {
		return 0
	}
	return t.ForwardingClass
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_Qos) GetPriority() E_NokiaTypesSros_Priority {
	if t == nil || t.Priority == 0 {
		return 0
	}
	return t.Priority
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_Qos.
func (*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_Interface_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop represents the /nokia-conf/configure/groups/group/router/static-routes/route/next-hop YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop struct {
	AdminState          E_NokiaTypesSros_AdminState                                                             `path:"admin-state" module:"nokia-conf"`
	BackupNextHop       *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_BackupNextHop       `path:"backup-next-hop" module:"nokia-conf"`
	BfdLiveness         *bool                                                                                   `path:"bfd-liveness" module:"nokia-conf"`
	Community           *string                                                                                 `path:"community" module:"nokia-conf"`
	CpeCheck            map[string]*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_CpeCheck `path:"cpe-check" module:"nokia-conf"`
	Description         *string                                                                                 `path:"description" module:"nokia-conf"`
	DestinationClass    *uint32                                                                                 `path:"destination-class" module:"nokia-conf"`
	IpAddress           *string                                                                                 `path:"ip-address" module:"nokia-conf"`
	LdpSync             *bool                                                                                   `path:"ldp-sync" module:"nokia-conf"`
	LoadBalancingWeight *uint32                                                                                 `path:"load-balancing-weight" module:"nokia-conf"`
	Metric              *uint32                                                                                 `path:"metric" module:"nokia-conf"`
	Preference          *uint32                                                                                 `path:"preference" module:"nokia-conf"`
	PrefixList          *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_PrefixList          `path:"prefix-list" module:"nokia-conf"`
	Qos                 *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_Qos                 `path:"qos" module:"nokia-conf"`
	SourceClass         *uint32                                                                                 `path:"source-class" module:"nokia-conf"`
	Tag                 *uint32                                                                                 `path:"tag" module:"nokia-conf"`
	ValidateNextHop     *bool                                                                                   `path:"validate-next-hop" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop) IsYANGGoStruct() {}

// NewCpeCheck creates a new entry in the CpeCheck list of the
// NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop) NewCpeCheck(Address string) (*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_CpeCheck, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CpeCheck == nil {
		t.CpeCheck = make(map[string]*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_CpeCheck)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.CpeCheck[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list CpeCheck", key)
	}

	t.CpeCheck[key] = &NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_CpeCheck{
		Address: &Address,
	}

	return t.CpeCheck[key], nil
}

// RenameCpeCheck renames an entry in the list CpeCheck within
// the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop) RenameCpeCheck(oldK, newK string) error {
	if _, ok := t.CpeCheck[newK]; ok {
		return fmt.Errorf("key %v already exists in CpeCheck", newK)
	}

	e, ok := t.CpeCheck[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in CpeCheck", oldK)
	}
	e.Address = &newK

	t.CpeCheck[newK] = e
	delete(t.CpeCheck, oldK)
	return nil
}

// GetOrCreateCpeCheck retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop) GetOrCreateCpeCheck(Address string) *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_CpeCheck {

	key := Address

	if v, ok := t.CpeCheck[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCpeCheck(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCpeCheck got unexpected error: %v", err))
	}
	return v
}

// GetCpeCheck retrieves the value with the specified key from
// the CpeCheck map field of NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop) GetCpeCheck(Address string) *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_CpeCheck {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.CpeCheck[key]; ok {
		return lm
	}
	return nil
}

// DeleteCpeCheck deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop) DeleteCpeCheck(Address string) {
	key := Address

	delete(t.CpeCheck, key)
}

// AppendCpeCheck appends the supplied NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_CpeCheck struct to the
// list CpeCheck of NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_CpeCheck already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop) AppendCpeCheck(v *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_CpeCheck) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CpeCheck == nil {
		t.CpeCheck = make(map[string]*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_CpeCheck)
	}

	if _, ok := t.CpeCheck[key]; ok {
		return fmt.Errorf("duplicate key for list CpeCheck %v", key)
	}

	t.CpeCheck[key] = v
	return nil
}

// GetOrCreateBackupNextHop retrieves the value of the BackupNextHop field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop) GetOrCreateBackupNextHop() *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_BackupNextHop {
	if t.BackupNextHop != nil {
		return t.BackupNextHop
	}
	t.BackupNextHop = &NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_BackupNextHop{}
	return t.BackupNextHop
}

// GetOrCreatePrefixList retrieves the value of the PrefixList field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop) GetOrCreatePrefixList() *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_PrefixList {
	if t.PrefixList != nil {
		return t.PrefixList
	}
	t.PrefixList = &NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_PrefixList{}
	return t.PrefixList
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop) GetOrCreateQos() *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_Qos{}
	return t.Qos
}

// GetBackupNextHop returns the value of the BackupNextHop struct pointer
// from NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop. If the receiver or the field BackupNextHop is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop) GetBackupNextHop() *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_BackupNextHop {
	if t != nil && t.BackupNextHop != nil {
		return t.BackupNextHop
	}
	return nil
}

// GetPrefixList returns the value of the PrefixList struct pointer
// from NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop. If the receiver or the field PrefixList is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop) GetPrefixList() *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_PrefixList {
	if t != nil && t.PrefixList != nil {
		return t.PrefixList
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop) GetQos() *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetBfdLiveness retrieves the value of the leaf BfdLiveness from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdLiveness is set, it can
// safely use t.GetBfdLiveness() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdLiveness == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop) GetBfdLiveness() bool {
	if t == nil || t.BfdLiveness == nil {
		return false
	}
	return *t.BfdLiveness
}

// GetCommunity retrieves the value of the leaf Community from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Community is set, it can
// safely use t.GetCommunity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Community == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop) GetCommunity() string {
	if t == nil || t.Community == nil {
		return ""
	}
	return *t.Community
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDestinationClass retrieves the value of the leaf DestinationClass from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationClass is set, it can
// safely use t.GetDestinationClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationClass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop) GetDestinationClass() uint32 {
	if t == nil || t.DestinationClass == nil {
		return 0
	}
	return *t.DestinationClass
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetLdpSync retrieves the value of the leaf LdpSync from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LdpSync is set, it can
// safely use t.GetLdpSync() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LdpSync == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop) GetLdpSync() bool {
	if t == nil || t.LdpSync == nil {
		return false
	}
	return *t.LdpSync
}

// GetLoadBalancingWeight retrieves the value of the leaf LoadBalancingWeight from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoadBalancingWeight is set, it can
// safely use t.GetLoadBalancingWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoadBalancingWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop) GetLoadBalancingWeight() uint32 {
	if t == nil || t.LoadBalancingWeight == nil {
		return 0
	}
	return *t.LoadBalancingWeight
}

// GetMetric retrieves the value of the leaf Metric from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Metric is set, it can
// safely use t.GetMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Metric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop) GetMetric() uint32 {
	if t == nil || t.Metric == nil {
		return 1
	}
	return *t.Metric
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 5
	}
	return *t.Preference
}

// GetSourceClass retrieves the value of the leaf SourceClass from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceClass is set, it can
// safely use t.GetSourceClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceClass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop) GetSourceClass() uint32 {
	if t == nil || t.SourceClass == nil {
		return 0
	}
	return *t.SourceClass
}

// GetTag retrieves the value of the leaf Tag from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tag is set, it can
// safely use t.GetTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop) GetTag() uint32 {
	if t == nil || t.Tag == nil {
		return 0
	}
	return *t.Tag
}

// GetValidateNextHop retrieves the value of the leaf ValidateNextHop from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidateNextHop is set, it can
// safely use t.GetValidateNextHop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidateNextHop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop) GetValidateNextHop() bool {
	if t == nil || t.ValidateNextHop == nil {
		return false
	}
	return *t.ValidateNextHop
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BfdLiveness == nil {
		var v bool = false
		t.BfdLiveness = &v
	}
	if t.LdpSync == nil {
		var v bool = false
		t.LdpSync = &v
	}
	if t.Metric == nil {
		var v uint32 = 1
		t.Metric = &v
	}
	if t.Preference == nil {
		var v uint32 = 5
		t.Preference = &v
	}
	if t.ValidateNextHop == nil {
		var v bool = false
		t.ValidateNextHop = &v
	}
	t.BackupNextHop.PopulateDefaults()
	t.PrefixList.PopulateDefaults()
	t.Qos.PopulateDefaults()
	for _, e := range t.CpeCheck {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpAddress == nil {
		return nil, fmt.Errorf("nil value for key IpAddress")
	}

	return map[string]interface{}{
		"ip-address": *t.IpAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop.
func (*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_BackupNextHop represents the /nokia-conf/configure/groups/group/router/static-routes/route/next-hop/backup-next-hop YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_BackupNextHop struct {
	Address *string `path:"address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_BackupNextHop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_BackupNextHop) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_BackupNextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_BackupNextHop) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_BackupNextHop
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_BackupNextHop) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_BackupNextHop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_BackupNextHop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_BackupNextHop) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_BackupNextHop) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_BackupNextHop.
func (*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_BackupNextHop) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_CpeCheck represents the /nokia-conf/configure/groups/group/router/static-routes/route/next-hop/cpe-check YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_CpeCheck struct {
	Address     *string `path:"address" module:"nokia-conf"`
	DropCount   *uint32 `path:"drop-count" module:"nokia-conf"`
	Interval    *uint32 `path:"interval" module:"nokia-conf"`
	Log         *bool   `path:"log" module:"nokia-conf"`
	PaddingSize *uint32 `path:"padding-size" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_CpeCheck implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_CpeCheck) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_CpeCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_CpeCheck) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetDropCount retrieves the value of the leaf DropCount from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_CpeCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DropCount is set, it can
// safely use t.GetDropCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DropCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_CpeCheck) GetDropCount() uint32 {
	if t == nil || t.DropCount == nil {
		return 3
	}
	return *t.DropCount
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_CpeCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_CpeCheck) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 1
	}
	return *t.Interval
}

// GetLog retrieves the value of the leaf Log from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_CpeCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Log is set, it can
// safely use t.GetLog() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Log == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_CpeCheck) GetLog() bool {
	if t == nil || t.Log == nil {
		return false
	}
	return *t.Log
}

// GetPaddingSize retrieves the value of the leaf PaddingSize from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_CpeCheck
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PaddingSize is set, it can
// safely use t.GetPaddingSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PaddingSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_CpeCheck) GetPaddingSize() uint32 {
	if t == nil || t.PaddingSize == nil {
		return 56
	}
	return *t.PaddingSize
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_CpeCheck
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_CpeCheck) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DropCount == nil {
		var v uint32 = 3
		t.DropCount = &v
	}
	if t.Interval == nil {
		var v uint32 = 1
		t.Interval = &v
	}
	if t.Log == nil {
		var v bool = false
		t.Log = &v
	}
	if t.PaddingSize == nil {
		var v uint32 = 56
		t.PaddingSize = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_CpeCheck struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_CpeCheck) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_CpeCheck) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_CpeCheck"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_CpeCheck) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_CpeCheck) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_CpeCheck.
func (*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_CpeCheck) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_PrefixList represents the /nokia-conf/configure/groups/group/router/static-routes/route/next-hop/prefix-list YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_PrefixList struct {
	Flag E_NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_PrefixList_Flag `path:"flag" module:"nokia-conf"`
	Name *string                                                                              `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_PrefixList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_PrefixList) IsYANGGoStruct() {
}

// GetFlag retrieves the value of the leaf Flag from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_PrefixList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Flag is set, it can
// safely use t.GetFlag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Flag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_PrefixList) GetFlag() E_NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_PrefixList_Flag {
	if t == nil || t.Flag == 0 {
		return NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_PrefixList_Flag_any
	}
	return t.Flag
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_PrefixList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_PrefixList) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_PrefixList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_PrefixList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Flag == 0 {
		t.Flag = NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_PrefixList_Flag_any
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_PrefixList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_PrefixList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_PrefixList) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_PrefixList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_PrefixList.
func (*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_PrefixList) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_Qos represents the /nokia-conf/configure/groups/group/router/static-routes/route/next-hop/qos YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_Qos struct {
	ForwardingClass E_NokiaTypesSros_FcName   `path:"forwarding-class" module:"nokia-conf"`
	Priority        E_NokiaTypesSros_Priority `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_Qos) IsYANGGoStruct() {}

// GetForwardingClass retrieves the value of the leaf ForwardingClass from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForwardingClass is set, it can
// safely use t.GetForwardingClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForwardingClass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_Qos) GetForwardingClass() E_NokiaTypesSros_FcName {
	if t == nil || t.ForwardingClass == 0 {
		return 0
	}
	return t.ForwardingClass
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_Qos) GetPriority() E_NokiaTypesSros_Priority {
	if t == nil || t.Priority == 0 {
		return 0
	}
	return t.Priority
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_Qos.
func (*NokiaConf_Configure_Groups_Group_Router_StaticRoutes_Route_NextHop_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_TtlPropagate represents the /nokia-conf/configure/groups/group/router/ttl-propagate YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_TtlPropagate struct {
	LabelRouteLocal   E_NokiaTypesRouter_TtlPropagateType       `path:"label-route-local" module:"nokia-conf"`
	LabelRouteTransit E_NokiaTypesRouter_TtlPropagateType       `path:"label-route-transit" module:"nokia-conf"`
	LsrLabelRoute     E_NokiaTypesRouter_TtlPropagateType       `path:"lsr-label-route" module:"nokia-conf"`
	VprnLocal         E_NokiaTypesRouter_RouterVprnTtlPropagate `path:"vprn-local" module:"nokia-conf"`
	VprnTransit       E_NokiaTypesRouter_RouterVprnTtlPropagate `path:"vprn-transit" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_TtlPropagate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_TtlPropagate) IsYANGGoStruct() {}

// GetLabelRouteLocal retrieves the value of the leaf LabelRouteLocal from the NokiaConf_Configure_Groups_Group_Router_TtlPropagate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelRouteLocal is set, it can
// safely use t.GetLabelRouteLocal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelRouteLocal == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_TtlPropagate) GetLabelRouteLocal() E_NokiaTypesRouter_TtlPropagateType {
	if t == nil || t.LabelRouteLocal == 0 {
		return NokiaTypesRouter_TtlPropagateType_none
	}
	return t.LabelRouteLocal
}

// GetLabelRouteTransit retrieves the value of the leaf LabelRouteTransit from the NokiaConf_Configure_Groups_Group_Router_TtlPropagate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelRouteTransit is set, it can
// safely use t.GetLabelRouteTransit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelRouteTransit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_TtlPropagate) GetLabelRouteTransit() E_NokiaTypesRouter_TtlPropagateType {
	if t == nil || t.LabelRouteTransit == 0 {
		return NokiaTypesRouter_TtlPropagateType_none
	}
	return t.LabelRouteTransit
}

// GetLsrLabelRoute retrieves the value of the leaf LsrLabelRoute from the NokiaConf_Configure_Groups_Group_Router_TtlPropagate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LsrLabelRoute is set, it can
// safely use t.GetLsrLabelRoute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LsrLabelRoute == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_TtlPropagate) GetLsrLabelRoute() E_NokiaTypesRouter_TtlPropagateType {
	if t == nil || t.LsrLabelRoute == 0 {
		return NokiaTypesRouter_TtlPropagateType_none
	}
	return t.LsrLabelRoute
}

// GetVprnLocal retrieves the value of the leaf VprnLocal from the NokiaConf_Configure_Groups_Group_Router_TtlPropagate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VprnLocal is set, it can
// safely use t.GetVprnLocal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VprnLocal == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_TtlPropagate) GetVprnLocal() E_NokiaTypesRouter_RouterVprnTtlPropagate {
	if t == nil || t.VprnLocal == 0 {
		return NokiaTypesRouter_RouterVprnTtlPropagate_vc_only
	}
	return t.VprnLocal
}

// GetVprnTransit retrieves the value of the leaf VprnTransit from the NokiaConf_Configure_Groups_Group_Router_TtlPropagate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VprnTransit is set, it can
// safely use t.GetVprnTransit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VprnTransit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_TtlPropagate) GetVprnTransit() E_NokiaTypesRouter_RouterVprnTtlPropagate {
	if t == nil || t.VprnTransit == 0 {
		return NokiaTypesRouter_RouterVprnTtlPropagate_vc_only
	}
	return t.VprnTransit
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_TtlPropagate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_TtlPropagate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LabelRouteLocal == 0 {
		t.LabelRouteLocal = NokiaTypesRouter_TtlPropagateType_none
	}
	if t.LabelRouteTransit == 0 {
		t.LabelRouteTransit = NokiaTypesRouter_TtlPropagateType_none
	}
	if t.LsrLabelRoute == 0 {
		t.LsrLabelRoute = NokiaTypesRouter_TtlPropagateType_none
	}
	if t.VprnLocal == 0 {
		t.VprnLocal = NokiaTypesRouter_RouterVprnTtlPropagate_vc_only
	}
	if t.VprnTransit == 0 {
		t.VprnTransit = NokiaTypesRouter_RouterVprnTtlPropagate_vc_only
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_TtlPropagate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_TtlPropagate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_TtlPropagate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_TtlPropagate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_TtlPropagate.
func (*NokiaConf_Configure_Groups_Group_Router_TtlPropagate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_TunnelInterface represents the /nokia-conf/configure/groups/group/router/tunnel-interface YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_TunnelInterface struct {
	LdpP2MpLeaf  map[NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpLeaf_Key]*NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpLeaf   `path:"ldp-p2mp-leaf" module:"nokia-conf"`
	LdpP2MpRoot  map[NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpRoot_Key]*NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpRoot   `path:"ldp-p2mp-root" module:"nokia-conf"`
	RsvpP2MpLeaf map[NokiaConf_Configure_Groups_Group_Router_TunnelInterface_RsvpP2MpLeaf_Key]*NokiaConf_Configure_Groups_Group_Router_TunnelInterface_RsvpP2MpLeaf `path:"rsvp-p2mp-leaf" module:"nokia-conf"`
	RsvpP2MpRoot map[string]*NokiaConf_Configure_Groups_Group_Router_TunnelInterface_RsvpP2MpRoot                                                                   `path:"rsvp-p2mp-root" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_TunnelInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_TunnelInterface) IsYANGGoStruct() {}

// NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpLeaf_Key represents the key for list LdpP2MpLeaf of element /nokia-conf/configure/groups/group/router/tunnel-interface.
type NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpLeaf_Key struct {
	P2MpId        NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpLeaf_P2MpId_Union `path:"p2mp-id"`
	SenderAddress string                                                                           `path:"sender-address"`
}

// NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpRoot_Key represents the key for list LdpP2MpRoot of element /nokia-conf/configure/groups/group/router/tunnel-interface.
type NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpRoot_Key struct {
	P2MpId        NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpRoot_P2MpId_Union `path:"p2mp-id"`
	SenderAddress string                                                                           `path:"sender-address"`
}

// NokiaConf_Configure_Groups_Group_Router_TunnelInterface_RsvpP2MpLeaf_Key represents the key for list RsvpP2MpLeaf of element /nokia-conf/configure/groups/group/router/tunnel-interface.
type NokiaConf_Configure_Groups_Group_Router_TunnelInterface_RsvpP2MpLeaf_Key struct {
	LspName       string `path:"lsp-name"`
	SenderAddress string `path:"sender-address"`
}

// NewLdpP2MpLeaf creates a new entry in the LdpP2MpLeaf list of the
// NokiaConf_Configure_Groups_Group_Router_TunnelInterface struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_TunnelInterface) NewLdpP2MpLeaf(P2MpId NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpLeaf_P2MpId_Union, SenderAddress string) (*NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpLeaf, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LdpP2MpLeaf == nil {
		t.LdpP2MpLeaf = make(map[NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpLeaf_Key]*NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpLeaf)
	}

	key := NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpLeaf_Key{
		P2MpId:        P2MpId,
		SenderAddress: SenderAddress,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.LdpP2MpLeaf[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list LdpP2MpLeaf", key)
	}

	t.LdpP2MpLeaf[key] = &NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpLeaf{
		P2MpId:        P2MpId,
		SenderAddress: &SenderAddress,
	}

	return t.LdpP2MpLeaf[key], nil
}

// RenameLdpP2MpLeaf renames an entry in the list LdpP2MpLeaf within
// the NokiaConf_Configure_Groups_Group_Router_TunnelInterface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_TunnelInterface) RenameLdpP2MpLeaf(oldK, newK NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpLeaf_Key) error {
	if _, ok := t.LdpP2MpLeaf[newK]; ok {
		return fmt.Errorf("key %v already exists in LdpP2MpLeaf", newK)
	}

	e, ok := t.LdpP2MpLeaf[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in LdpP2MpLeaf", oldK)
	}
	e.P2MpId = newK.P2MpId
	e.SenderAddress = &newK.SenderAddress

	t.LdpP2MpLeaf[newK] = e
	delete(t.LdpP2MpLeaf, oldK)
	return nil
}

// GetOrCreateLdpP2MpLeaf retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_TunnelInterface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_TunnelInterface) GetOrCreateLdpP2MpLeaf(P2MpId NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpLeaf_P2MpId_Union, SenderAddress string) *NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpLeaf {

	key := NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpLeaf_Key{
		P2MpId:        P2MpId,
		SenderAddress: SenderAddress,
	}

	if v, ok := t.LdpP2MpLeaf[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLdpP2MpLeaf(P2MpId, SenderAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLdpP2MpLeaf got unexpected error: %v", err))
	}
	return v
}

// GetLdpP2MpLeaf retrieves the value with the specified key from
// the LdpP2MpLeaf map field of NokiaConf_Configure_Groups_Group_Router_TunnelInterface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_TunnelInterface) GetLdpP2MpLeaf(P2MpId NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpLeaf_P2MpId_Union, SenderAddress string) *NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpLeaf {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpLeaf_Key{
		P2MpId:        P2MpId,
		SenderAddress: SenderAddress,
	}

	if lm, ok := t.LdpP2MpLeaf[key]; ok {
		return lm
	}
	return nil
}

// DeleteLdpP2MpLeaf deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_TunnelInterface. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_TunnelInterface) DeleteLdpP2MpLeaf(P2MpId NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpLeaf_P2MpId_Union, SenderAddress string) {
	key := NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpLeaf_Key{
		P2MpId:        P2MpId,
		SenderAddress: SenderAddress,
	}

	delete(t.LdpP2MpLeaf, key)
}

// AppendLdpP2MpLeaf appends the supplied NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpLeaf struct to the
// list LdpP2MpLeaf of NokiaConf_Configure_Groups_Group_Router_TunnelInterface. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpLeaf already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_TunnelInterface) AppendLdpP2MpLeaf(v *NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpLeaf) error {
	if v.SenderAddress == nil {
		return fmt.Errorf("invalid nil key for SenderAddress")
	}

	key := NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpLeaf_Key{
		P2MpId:        v.P2MpId,
		SenderAddress: *v.SenderAddress,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LdpP2MpLeaf == nil {
		t.LdpP2MpLeaf = make(map[NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpLeaf_Key]*NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpLeaf)
	}

	if _, ok := t.LdpP2MpLeaf[key]; ok {
		return fmt.Errorf("duplicate key for list LdpP2MpLeaf %v", key)
	}

	t.LdpP2MpLeaf[key] = v
	return nil
}

// NewLdpP2MpRoot creates a new entry in the LdpP2MpRoot list of the
// NokiaConf_Configure_Groups_Group_Router_TunnelInterface struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_TunnelInterface) NewLdpP2MpRoot(P2MpId NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpRoot_P2MpId_Union, SenderAddress string) (*NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpRoot, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LdpP2MpRoot == nil {
		t.LdpP2MpRoot = make(map[NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpRoot_Key]*NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpRoot)
	}

	key := NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpRoot_Key{
		P2MpId:        P2MpId,
		SenderAddress: SenderAddress,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.LdpP2MpRoot[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list LdpP2MpRoot", key)
	}

	t.LdpP2MpRoot[key] = &NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpRoot{
		P2MpId:        P2MpId,
		SenderAddress: &SenderAddress,
	}

	return t.LdpP2MpRoot[key], nil
}

// RenameLdpP2MpRoot renames an entry in the list LdpP2MpRoot within
// the NokiaConf_Configure_Groups_Group_Router_TunnelInterface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_TunnelInterface) RenameLdpP2MpRoot(oldK, newK NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpRoot_Key) error {
	if _, ok := t.LdpP2MpRoot[newK]; ok {
		return fmt.Errorf("key %v already exists in LdpP2MpRoot", newK)
	}

	e, ok := t.LdpP2MpRoot[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in LdpP2MpRoot", oldK)
	}
	e.P2MpId = newK.P2MpId
	e.SenderAddress = &newK.SenderAddress

	t.LdpP2MpRoot[newK] = e
	delete(t.LdpP2MpRoot, oldK)
	return nil
}

// GetOrCreateLdpP2MpRoot retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_TunnelInterface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_TunnelInterface) GetOrCreateLdpP2MpRoot(P2MpId NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpRoot_P2MpId_Union, SenderAddress string) *NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpRoot {

	key := NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpRoot_Key{
		P2MpId:        P2MpId,
		SenderAddress: SenderAddress,
	}

	if v, ok := t.LdpP2MpRoot[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLdpP2MpRoot(P2MpId, SenderAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLdpP2MpRoot got unexpected error: %v", err))
	}
	return v
}

// GetLdpP2MpRoot retrieves the value with the specified key from
// the LdpP2MpRoot map field of NokiaConf_Configure_Groups_Group_Router_TunnelInterface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_TunnelInterface) GetLdpP2MpRoot(P2MpId NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpRoot_P2MpId_Union, SenderAddress string) *NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpRoot {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpRoot_Key{
		P2MpId:        P2MpId,
		SenderAddress: SenderAddress,
	}

	if lm, ok := t.LdpP2MpRoot[key]; ok {
		return lm
	}
	return nil
}

// DeleteLdpP2MpRoot deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_TunnelInterface. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_TunnelInterface) DeleteLdpP2MpRoot(P2MpId NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpRoot_P2MpId_Union, SenderAddress string) {
	key := NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpRoot_Key{
		P2MpId:        P2MpId,
		SenderAddress: SenderAddress,
	}

	delete(t.LdpP2MpRoot, key)
}

// AppendLdpP2MpRoot appends the supplied NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpRoot struct to the
// list LdpP2MpRoot of NokiaConf_Configure_Groups_Group_Router_TunnelInterface. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpRoot already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_TunnelInterface) AppendLdpP2MpRoot(v *NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpRoot) error {
	if v.SenderAddress == nil {
		return fmt.Errorf("invalid nil key for SenderAddress")
	}

	key := NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpRoot_Key{
		P2MpId:        v.P2MpId,
		SenderAddress: *v.SenderAddress,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LdpP2MpRoot == nil {
		t.LdpP2MpRoot = make(map[NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpRoot_Key]*NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpRoot)
	}

	if _, ok := t.LdpP2MpRoot[key]; ok {
		return fmt.Errorf("duplicate key for list LdpP2MpRoot %v", key)
	}

	t.LdpP2MpRoot[key] = v
	return nil
}

// NewRsvpP2MpLeaf creates a new entry in the RsvpP2MpLeaf list of the
// NokiaConf_Configure_Groups_Group_Router_TunnelInterface struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_TunnelInterface) NewRsvpP2MpLeaf(LspName string, SenderAddress string) (*NokiaConf_Configure_Groups_Group_Router_TunnelInterface_RsvpP2MpLeaf, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RsvpP2MpLeaf == nil {
		t.RsvpP2MpLeaf = make(map[NokiaConf_Configure_Groups_Group_Router_TunnelInterface_RsvpP2MpLeaf_Key]*NokiaConf_Configure_Groups_Group_Router_TunnelInterface_RsvpP2MpLeaf)
	}

	key := NokiaConf_Configure_Groups_Group_Router_TunnelInterface_RsvpP2MpLeaf_Key{
		LspName:       LspName,
		SenderAddress: SenderAddress,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RsvpP2MpLeaf[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RsvpP2MpLeaf", key)
	}

	t.RsvpP2MpLeaf[key] = &NokiaConf_Configure_Groups_Group_Router_TunnelInterface_RsvpP2MpLeaf{
		LspName:       &LspName,
		SenderAddress: &SenderAddress,
	}

	return t.RsvpP2MpLeaf[key], nil
}

// RenameRsvpP2MpLeaf renames an entry in the list RsvpP2MpLeaf within
// the NokiaConf_Configure_Groups_Group_Router_TunnelInterface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_TunnelInterface) RenameRsvpP2MpLeaf(oldK, newK NokiaConf_Configure_Groups_Group_Router_TunnelInterface_RsvpP2MpLeaf_Key) error {
	if _, ok := t.RsvpP2MpLeaf[newK]; ok {
		return fmt.Errorf("key %v already exists in RsvpP2MpLeaf", newK)
	}

	e, ok := t.RsvpP2MpLeaf[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RsvpP2MpLeaf", oldK)
	}
	e.LspName = &newK.LspName
	e.SenderAddress = &newK.SenderAddress

	t.RsvpP2MpLeaf[newK] = e
	delete(t.RsvpP2MpLeaf, oldK)
	return nil
}

// GetOrCreateRsvpP2MpLeaf retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_TunnelInterface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_TunnelInterface) GetOrCreateRsvpP2MpLeaf(LspName string, SenderAddress string) *NokiaConf_Configure_Groups_Group_Router_TunnelInterface_RsvpP2MpLeaf {

	key := NokiaConf_Configure_Groups_Group_Router_TunnelInterface_RsvpP2MpLeaf_Key{
		LspName:       LspName,
		SenderAddress: SenderAddress,
	}

	if v, ok := t.RsvpP2MpLeaf[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRsvpP2MpLeaf(LspName, SenderAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRsvpP2MpLeaf got unexpected error: %v", err))
	}
	return v
}

// GetRsvpP2MpLeaf retrieves the value with the specified key from
// the RsvpP2MpLeaf map field of NokiaConf_Configure_Groups_Group_Router_TunnelInterface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_TunnelInterface) GetRsvpP2MpLeaf(LspName string, SenderAddress string) *NokiaConf_Configure_Groups_Group_Router_TunnelInterface_RsvpP2MpLeaf {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Router_TunnelInterface_RsvpP2MpLeaf_Key{
		LspName:       LspName,
		SenderAddress: SenderAddress,
	}

	if lm, ok := t.RsvpP2MpLeaf[key]; ok {
		return lm
	}
	return nil
}

// DeleteRsvpP2MpLeaf deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_TunnelInterface. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_TunnelInterface) DeleteRsvpP2MpLeaf(LspName string, SenderAddress string) {
	key := NokiaConf_Configure_Groups_Group_Router_TunnelInterface_RsvpP2MpLeaf_Key{
		LspName:       LspName,
		SenderAddress: SenderAddress,
	}

	delete(t.RsvpP2MpLeaf, key)
}

// AppendRsvpP2MpLeaf appends the supplied NokiaConf_Configure_Groups_Group_Router_TunnelInterface_RsvpP2MpLeaf struct to the
// list RsvpP2MpLeaf of NokiaConf_Configure_Groups_Group_Router_TunnelInterface. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_TunnelInterface_RsvpP2MpLeaf already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_TunnelInterface) AppendRsvpP2MpLeaf(v *NokiaConf_Configure_Groups_Group_Router_TunnelInterface_RsvpP2MpLeaf) error {
	if v.LspName == nil {
		return fmt.Errorf("invalid nil key for LspName")
	}

	if v.SenderAddress == nil {
		return fmt.Errorf("invalid nil key for SenderAddress")
	}

	key := NokiaConf_Configure_Groups_Group_Router_TunnelInterface_RsvpP2MpLeaf_Key{
		LspName:       *v.LspName,
		SenderAddress: *v.SenderAddress,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RsvpP2MpLeaf == nil {
		t.RsvpP2MpLeaf = make(map[NokiaConf_Configure_Groups_Group_Router_TunnelInterface_RsvpP2MpLeaf_Key]*NokiaConf_Configure_Groups_Group_Router_TunnelInterface_RsvpP2MpLeaf)
	}

	if _, ok := t.RsvpP2MpLeaf[key]; ok {
		return fmt.Errorf("duplicate key for list RsvpP2MpLeaf %v", key)
	}

	t.RsvpP2MpLeaf[key] = v
	return nil
}

// NewRsvpP2MpRoot creates a new entry in the RsvpP2MpRoot list of the
// NokiaConf_Configure_Groups_Group_Router_TunnelInterface struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_TunnelInterface) NewRsvpP2MpRoot(LspName string) (*NokiaConf_Configure_Groups_Group_Router_TunnelInterface_RsvpP2MpRoot, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RsvpP2MpRoot == nil {
		t.RsvpP2MpRoot = make(map[string]*NokiaConf_Configure_Groups_Group_Router_TunnelInterface_RsvpP2MpRoot)
	}

	key := LspName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RsvpP2MpRoot[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RsvpP2MpRoot", key)
	}

	t.RsvpP2MpRoot[key] = &NokiaConf_Configure_Groups_Group_Router_TunnelInterface_RsvpP2MpRoot{
		LspName: &LspName,
	}

	return t.RsvpP2MpRoot[key], nil
}

// RenameRsvpP2MpRoot renames an entry in the list RsvpP2MpRoot within
// the NokiaConf_Configure_Groups_Group_Router_TunnelInterface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_TunnelInterface) RenameRsvpP2MpRoot(oldK, newK string) error {
	if _, ok := t.RsvpP2MpRoot[newK]; ok {
		return fmt.Errorf("key %v already exists in RsvpP2MpRoot", newK)
	}

	e, ok := t.RsvpP2MpRoot[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RsvpP2MpRoot", oldK)
	}
	e.LspName = &newK

	t.RsvpP2MpRoot[newK] = e
	delete(t.RsvpP2MpRoot, oldK)
	return nil
}

// GetOrCreateRsvpP2MpRoot retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_TunnelInterface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_TunnelInterface) GetOrCreateRsvpP2MpRoot(LspName string) *NokiaConf_Configure_Groups_Group_Router_TunnelInterface_RsvpP2MpRoot {

	key := LspName

	if v, ok := t.RsvpP2MpRoot[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRsvpP2MpRoot(LspName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRsvpP2MpRoot got unexpected error: %v", err))
	}
	return v
}

// GetRsvpP2MpRoot retrieves the value with the specified key from
// the RsvpP2MpRoot map field of NokiaConf_Configure_Groups_Group_Router_TunnelInterface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_TunnelInterface) GetRsvpP2MpRoot(LspName string) *NokiaConf_Configure_Groups_Group_Router_TunnelInterface_RsvpP2MpRoot {

	if t == nil {
		return nil
	}

	key := LspName

	if lm, ok := t.RsvpP2MpRoot[key]; ok {
		return lm
	}
	return nil
}

// DeleteRsvpP2MpRoot deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_TunnelInterface. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_TunnelInterface) DeleteRsvpP2MpRoot(LspName string) {
	key := LspName

	delete(t.RsvpP2MpRoot, key)
}

// AppendRsvpP2MpRoot appends the supplied NokiaConf_Configure_Groups_Group_Router_TunnelInterface_RsvpP2MpRoot struct to the
// list RsvpP2MpRoot of NokiaConf_Configure_Groups_Group_Router_TunnelInterface. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_TunnelInterface_RsvpP2MpRoot already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_TunnelInterface) AppendRsvpP2MpRoot(v *NokiaConf_Configure_Groups_Group_Router_TunnelInterface_RsvpP2MpRoot) error {
	if v.LspName == nil {
		return fmt.Errorf("invalid nil key received for LspName")
	}

	key := *v.LspName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RsvpP2MpRoot == nil {
		t.RsvpP2MpRoot = make(map[string]*NokiaConf_Configure_Groups_Group_Router_TunnelInterface_RsvpP2MpRoot)
	}

	if _, ok := t.RsvpP2MpRoot[key]; ok {
		return fmt.Errorf("duplicate key for list RsvpP2MpRoot %v", key)
	}

	t.RsvpP2MpRoot[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_TunnelInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_TunnelInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.LdpP2MpLeaf {
		e.PopulateDefaults()
	}
	for _, e := range t.LdpP2MpRoot {
		e.PopulateDefaults()
	}
	for _, e := range t.RsvpP2MpLeaf {
		e.PopulateDefaults()
	}
	for _, e := range t.RsvpP2MpRoot {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_TunnelInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_TunnelInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_TunnelInterface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_TunnelInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_TunnelInterface.
func (*NokiaConf_Configure_Groups_Group_Router_TunnelInterface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpLeaf represents the /nokia-conf/configure/groups/group/router/tunnel-interface/ldp-p2mp-leaf YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpLeaf struct {
	Description   *string                                                                          `path:"description" module:"nokia-conf"`
	P2MpId        NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpLeaf_P2MpId_Union `path:"p2mp-id" module:"nokia-conf"`
	SenderAddress *string                                                                          `path:"sender-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpLeaf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpLeaf) IsYANGGoStruct() {}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpLeaf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpLeaf) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetP2MpId retrieves the value of the leaf P2MpId from the NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpLeaf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if P2MpId is set, it can
// safely use t.GetP2MpId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.P2MpId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpLeaf) GetP2MpId() NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpLeaf_P2MpId_Union {
	if t == nil || t.P2MpId == nil {
		return nil
	}
	return t.P2MpId
}

// GetSenderAddress retrieves the value of the leaf SenderAddress from the NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpLeaf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SenderAddress is set, it can
// safely use t.GetSenderAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SenderAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpLeaf) GetSenderAddress() string {
	if t == nil || t.SenderAddress == nil {
		return ""
	}
	return *t.SenderAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpLeaf
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpLeaf) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpLeaf struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpLeaf) ΛListKeyMap() (map[string]interface{}, error) {

	if t.SenderAddress == nil {
		return nil, fmt.Errorf("nil value for key SenderAddress")
	}

	return map[string]interface{}{
		"p2mp-id":        t.P2MpId,
		"sender-address": *t.SenderAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpLeaf) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpLeaf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpLeaf) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpLeaf) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpLeaf.
func (*NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpLeaf) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpRoot represents the /nokia-conf/configure/groups/group/router/tunnel-interface/ldp-p2mp-root YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpRoot struct {
	Description   *string                                                                          `path:"description" module:"nokia-conf"`
	P2MpId        NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpRoot_P2MpId_Union `path:"p2mp-id" module:"nokia-conf"`
	SenderAddress *string                                                                          `path:"sender-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpRoot implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpRoot) IsYANGGoStruct() {}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpRoot
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpRoot) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetP2MpId retrieves the value of the leaf P2MpId from the NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpRoot
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if P2MpId is set, it can
// safely use t.GetP2MpId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.P2MpId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpRoot) GetP2MpId() NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpRoot_P2MpId_Union {
	if t == nil || t.P2MpId == nil {
		return nil
	}
	return t.P2MpId
}

// GetSenderAddress retrieves the value of the leaf SenderAddress from the NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpRoot
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SenderAddress is set, it can
// safely use t.GetSenderAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SenderAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpRoot) GetSenderAddress() string {
	if t == nil || t.SenderAddress == nil {
		return ""
	}
	return *t.SenderAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpRoot
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpRoot) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpRoot struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpRoot) ΛListKeyMap() (map[string]interface{}, error) {

	if t.SenderAddress == nil {
		return nil, fmt.Errorf("nil value for key SenderAddress")
	}

	return map[string]interface{}{
		"p2mp-id":        t.P2MpId,
		"sender-address": *t.SenderAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpRoot) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpRoot"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpRoot) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpRoot) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpRoot.
func (*NokiaConf_Configure_Groups_Group_Router_TunnelInterface_LdpP2MpRoot) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_TunnelInterface_RsvpP2MpLeaf represents the /nokia-conf/configure/groups/group/router/tunnel-interface/rsvp-p2mp-leaf YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_TunnelInterface_RsvpP2MpLeaf struct {
	Description   *string `path:"description" module:"nokia-conf"`
	LspName       *string `path:"lsp-name" module:"nokia-conf"`
	SenderAddress *string `path:"sender-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_TunnelInterface_RsvpP2MpLeaf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_TunnelInterface_RsvpP2MpLeaf) IsYANGGoStruct() {}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Router_TunnelInterface_RsvpP2MpLeaf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_TunnelInterface_RsvpP2MpLeaf) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetLspName retrieves the value of the leaf LspName from the NokiaConf_Configure_Groups_Group_Router_TunnelInterface_RsvpP2MpLeaf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspName is set, it can
// safely use t.GetLspName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_TunnelInterface_RsvpP2MpLeaf) GetLspName() string {
	if t == nil || t.LspName == nil {
		return ""
	}
	return *t.LspName
}

// GetSenderAddress retrieves the value of the leaf SenderAddress from the NokiaConf_Configure_Groups_Group_Router_TunnelInterface_RsvpP2MpLeaf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SenderAddress is set, it can
// safely use t.GetSenderAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SenderAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_TunnelInterface_RsvpP2MpLeaf) GetSenderAddress() string {
	if t == nil || t.SenderAddress == nil {
		return ""
	}
	return *t.SenderAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_TunnelInterface_RsvpP2MpLeaf
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_TunnelInterface_RsvpP2MpLeaf) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_TunnelInterface_RsvpP2MpLeaf struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_TunnelInterface_RsvpP2MpLeaf) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LspName == nil {
		return nil, fmt.Errorf("nil value for key LspName")
	}

	if t.SenderAddress == nil {
		return nil, fmt.Errorf("nil value for key SenderAddress")
	}

	return map[string]interface{}{
		"lsp-name":       *t.LspName,
		"sender-address": *t.SenderAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_TunnelInterface_RsvpP2MpLeaf) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_TunnelInterface_RsvpP2MpLeaf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_TunnelInterface_RsvpP2MpLeaf) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_TunnelInterface_RsvpP2MpLeaf) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_TunnelInterface_RsvpP2MpLeaf.
func (*NokiaConf_Configure_Groups_Group_Router_TunnelInterface_RsvpP2MpLeaf) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_TunnelInterface_RsvpP2MpRoot represents the /nokia-conf/configure/groups/group/router/tunnel-interface/rsvp-p2mp-root YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_TunnelInterface_RsvpP2MpRoot struct {
	Description *string `path:"description" module:"nokia-conf"`
	LspName     *string `path:"lsp-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_TunnelInterface_RsvpP2MpRoot implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_TunnelInterface_RsvpP2MpRoot) IsYANGGoStruct() {}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Router_TunnelInterface_RsvpP2MpRoot
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_TunnelInterface_RsvpP2MpRoot) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetLspName retrieves the value of the leaf LspName from the NokiaConf_Configure_Groups_Group_Router_TunnelInterface_RsvpP2MpRoot
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspName is set, it can
// safely use t.GetLspName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_TunnelInterface_RsvpP2MpRoot) GetLspName() string {
	if t == nil || t.LspName == nil {
		return ""
	}
	return *t.LspName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_TunnelInterface_RsvpP2MpRoot
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_TunnelInterface_RsvpP2MpRoot) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_TunnelInterface_RsvpP2MpRoot struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_TunnelInterface_RsvpP2MpRoot) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LspName == nil {
		return nil, fmt.Errorf("nil value for key LspName")
	}

	return map[string]interface{}{
		"lsp-name": *t.LspName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_TunnelInterface_RsvpP2MpRoot) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_TunnelInterface_RsvpP2MpRoot"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_TunnelInterface_RsvpP2MpRoot) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_TunnelInterface_RsvpP2MpRoot) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_TunnelInterface_RsvpP2MpRoot.
func (*NokiaConf_Configure_Groups_Group_Router_TunnelInterface_RsvpP2MpRoot) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_TwampLight represents the /nokia-conf/configure/groups/group/router/twamp-light YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_TwampLight struct {
	Reflector *NokiaConf_Configure_Groups_Group_Router_TwampLight_Reflector `path:"reflector" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_TwampLight implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_TwampLight) IsYANGGoStruct() {}

// GetOrCreateReflector retrieves the value of the Reflector field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_TwampLight) GetOrCreateReflector() *NokiaConf_Configure_Groups_Group_Router_TwampLight_Reflector {
	if t.Reflector != nil {
		return t.Reflector
	}
	t.Reflector = &NokiaConf_Configure_Groups_Group_Router_TwampLight_Reflector{}
	return t.Reflector
}

// GetReflector returns the value of the Reflector struct pointer
// from NokiaConf_Configure_Groups_Group_Router_TwampLight. If the receiver or the field Reflector is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_TwampLight) GetReflector() *NokiaConf_Configure_Groups_Group_Router_TwampLight_Reflector {
	if t != nil && t.Reflector != nil {
		return t.Reflector
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_TwampLight
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_TwampLight) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Reflector.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_TwampLight) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_TwampLight"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_TwampLight) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_TwampLight) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_TwampLight.
func (*NokiaConf_Configure_Groups_Group_Router_TwampLight) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_TwampLight_Reflector represents the /nokia-conf/configure/groups/group/router/twamp-light/reflector YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_TwampLight_Reflector struct {
	AdminState               E_NokiaTypesSros_AdminState                                                     `path:"admin-state" module:"nokia-conf"`
	AllowIpv6UdpChecksumZero *bool                                                                           `path:"allow-ipv6-udp-checksum-zero" module:"nokia-conf"`
	Description              *string                                                                         `path:"description" module:"nokia-conf"`
	Prefix                   map[string]*NokiaConf_Configure_Groups_Group_Router_TwampLight_Reflector_Prefix `path:"prefix" module:"nokia-conf"`
	UdpPort                  *int32                                                                          `path:"udp-port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_TwampLight_Reflector implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_TwampLight_Reflector) IsYANGGoStruct() {}

// NewPrefix creates a new entry in the Prefix list of the
// NokiaConf_Configure_Groups_Group_Router_TwampLight_Reflector struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_TwampLight_Reflector) NewPrefix(IpPrefix string) (*NokiaConf_Configure_Groups_Group_Router_TwampLight_Reflector_Prefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Groups_Group_Router_TwampLight_Reflector_Prefix)
	}

	key := IpPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Prefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Prefix", key)
	}

	t.Prefix[key] = &NokiaConf_Configure_Groups_Group_Router_TwampLight_Reflector_Prefix{
		IpPrefix: &IpPrefix,
	}

	return t.Prefix[key], nil
}

// RenamePrefix renames an entry in the list Prefix within
// the NokiaConf_Configure_Groups_Group_Router_TwampLight_Reflector struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_TwampLight_Reflector) RenamePrefix(oldK, newK string) error {
	if _, ok := t.Prefix[newK]; ok {
		return fmt.Errorf("key %v already exists in Prefix", newK)
	}

	e, ok := t.Prefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Prefix", oldK)
	}
	e.IpPrefix = &newK

	t.Prefix[newK] = e
	delete(t.Prefix, oldK)
	return nil
}

// GetOrCreatePrefix retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_TwampLight_Reflector. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_TwampLight_Reflector) GetOrCreatePrefix(IpPrefix string) *NokiaConf_Configure_Groups_Group_Router_TwampLight_Reflector_Prefix {

	key := IpPrefix

	if v, ok := t.Prefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefix(IpPrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefix got unexpected error: %v", err))
	}
	return v
}

// GetPrefix retrieves the value with the specified key from
// the Prefix map field of NokiaConf_Configure_Groups_Group_Router_TwampLight_Reflector. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_TwampLight_Reflector) GetPrefix(IpPrefix string) *NokiaConf_Configure_Groups_Group_Router_TwampLight_Reflector_Prefix {

	if t == nil {
		return nil
	}

	key := IpPrefix

	if lm, ok := t.Prefix[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefix deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_TwampLight_Reflector. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_TwampLight_Reflector) DeletePrefix(IpPrefix string) {
	key := IpPrefix

	delete(t.Prefix, key)
}

// AppendPrefix appends the supplied NokiaConf_Configure_Groups_Group_Router_TwampLight_Reflector_Prefix struct to the
// list Prefix of NokiaConf_Configure_Groups_Group_Router_TwampLight_Reflector. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_TwampLight_Reflector_Prefix already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_TwampLight_Reflector) AppendPrefix(v *NokiaConf_Configure_Groups_Group_Router_TwampLight_Reflector_Prefix) error {
	if v.IpPrefix == nil {
		return fmt.Errorf("invalid nil key received for IpPrefix")
	}

	key := *v.IpPrefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Groups_Group_Router_TwampLight_Reflector_Prefix)
	}

	if _, ok := t.Prefix[key]; ok {
		return fmt.Errorf("duplicate key for list Prefix %v", key)
	}

	t.Prefix[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_TwampLight_Reflector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_TwampLight_Reflector) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAllowIpv6UdpChecksumZero retrieves the value of the leaf AllowIpv6UdpChecksumZero from the NokiaConf_Configure_Groups_Group_Router_TwampLight_Reflector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowIpv6UdpChecksumZero is set, it can
// safely use t.GetAllowIpv6UdpChecksumZero() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowIpv6UdpChecksumZero == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_TwampLight_Reflector) GetAllowIpv6UdpChecksumZero() bool {
	if t == nil || t.AllowIpv6UdpChecksumZero == nil {
		return false
	}
	return *t.AllowIpv6UdpChecksumZero
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Router_TwampLight_Reflector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_TwampLight_Reflector) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetUdpPort retrieves the value of the leaf UdpPort from the NokiaConf_Configure_Groups_Group_Router_TwampLight_Reflector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UdpPort is set, it can
// safely use t.GetUdpPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UdpPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_TwampLight_Reflector) GetUdpPort() int32 {
	if t == nil || t.UdpPort == nil {
		return 0
	}
	return *t.UdpPort
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_TwampLight_Reflector
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_TwampLight_Reflector) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.AllowIpv6UdpChecksumZero == nil {
		var v bool = false
		t.AllowIpv6UdpChecksumZero = &v
	}
	for _, e := range t.Prefix {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_TwampLight_Reflector) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_TwampLight_Reflector"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_TwampLight_Reflector) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_TwampLight_Reflector) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_TwampLight_Reflector.
func (*NokiaConf_Configure_Groups_Group_Router_TwampLight_Reflector) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_TwampLight_Reflector_Prefix represents the /nokia-conf/configure/groups/group/router/twamp-light/reflector/prefix YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_TwampLight_Reflector_Prefix struct {
	Description *string `path:"description" module:"nokia-conf"`
	IpPrefix    *string `path:"ip-prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_TwampLight_Reflector_Prefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_TwampLight_Reflector_Prefix) IsYANGGoStruct() {}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Router_TwampLight_Reflector_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_TwampLight_Reflector_Prefix) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_Groups_Group_Router_TwampLight_Reflector_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_TwampLight_Reflector_Prefix) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_TwampLight_Reflector_Prefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_TwampLight_Reflector_Prefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_TwampLight_Reflector_Prefix struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_TwampLight_Reflector_Prefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	return map[string]interface{}{
		"ip-prefix": *t.IpPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_TwampLight_Reflector_Prefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_TwampLight_Reflector_Prefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_TwampLight_Reflector_Prefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_TwampLight_Reflector_Prefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_TwampLight_Reflector_Prefix.
func (*NokiaConf_Configure_Groups_Group_Router_TwampLight_Reflector_Prefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Vrgw represents the /nokia-conf/configure/groups/group/router/vrgw YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Vrgw struct {
	Lanext *NokiaConf_Configure_Groups_Group_Router_Vrgw_Lanext `path:"lanext" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Vrgw implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Vrgw) IsYANGGoStruct() {}

// GetOrCreateLanext retrieves the value of the Lanext field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Vrgw) GetOrCreateLanext() *NokiaConf_Configure_Groups_Group_Router_Vrgw_Lanext {
	if t.Lanext != nil {
		return t.Lanext
	}
	t.Lanext = &NokiaConf_Configure_Groups_Group_Router_Vrgw_Lanext{}
	return t.Lanext
}

// GetLanext returns the value of the Lanext struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Vrgw. If the receiver or the field Lanext is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Vrgw) GetLanext() *NokiaConf_Configure_Groups_Group_Router_Vrgw_Lanext {
	if t != nil && t.Lanext != nil {
		return t.Lanext
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Vrgw
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Vrgw) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Lanext.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Vrgw) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Vrgw"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Vrgw) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Vrgw) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Vrgw.
func (*NokiaConf_Configure_Groups_Group_Router_Vrgw) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Vrgw_Lanext represents the /nokia-conf/configure/groups/group/router/vrgw/lanext YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Vrgw_Lanext struct {
	AdminState     E_NokiaTypesSros_AdminState                                         `path:"admin-state" module:"nokia-conf"`
	VxlanPort      *uint32                                                             `path:"vxlan-port" module:"nokia-conf"`
	VxlanVtepRange *NokiaConf_Configure_Groups_Group_Router_Vrgw_Lanext_VxlanVtepRange `path:"vxlan-vtep-range" module:"nokia-conf"`
	WlanGwGroup    *uint32                                                             `path:"wlan-gw-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Vrgw_Lanext implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Vrgw_Lanext) IsYANGGoStruct() {}

// GetOrCreateVxlanVtepRange retrieves the value of the VxlanVtepRange field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Vrgw_Lanext) GetOrCreateVxlanVtepRange() *NokiaConf_Configure_Groups_Group_Router_Vrgw_Lanext_VxlanVtepRange {
	if t.VxlanVtepRange != nil {
		return t.VxlanVtepRange
	}
	t.VxlanVtepRange = &NokiaConf_Configure_Groups_Group_Router_Vrgw_Lanext_VxlanVtepRange{}
	return t.VxlanVtepRange
}

// GetVxlanVtepRange returns the value of the VxlanVtepRange struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Vrgw_Lanext. If the receiver or the field VxlanVtepRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Vrgw_Lanext) GetVxlanVtepRange() *NokiaConf_Configure_Groups_Group_Router_Vrgw_Lanext_VxlanVtepRange {
	if t != nil && t.VxlanVtepRange != nil {
		return t.VxlanVtepRange
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Vrgw_Lanext
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Vrgw_Lanext) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetVxlanPort retrieves the value of the leaf VxlanPort from the NokiaConf_Configure_Groups_Group_Router_Vrgw_Lanext
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VxlanPort is set, it can
// safely use t.GetVxlanPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VxlanPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Vrgw_Lanext) GetVxlanPort() uint32 {
	if t == nil || t.VxlanPort == nil {
		return 4789
	}
	return *t.VxlanPort
}

// GetWlanGwGroup retrieves the value of the leaf WlanGwGroup from the NokiaConf_Configure_Groups_Group_Router_Vrgw_Lanext
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WlanGwGroup is set, it can
// safely use t.GetWlanGwGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WlanGwGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Vrgw_Lanext) GetWlanGwGroup() uint32 {
	if t == nil || t.WlanGwGroup == nil {
		return 0
	}
	return *t.WlanGwGroup
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Vrgw_Lanext
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Vrgw_Lanext) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.VxlanPort == nil {
		var v uint32 = 4789
		t.VxlanPort = &v
	}
	t.VxlanVtepRange.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Vrgw_Lanext) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Vrgw_Lanext"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Vrgw_Lanext) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Vrgw_Lanext) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Vrgw_Lanext.
func (*NokiaConf_Configure_Groups_Group_Router_Vrgw_Lanext) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Vrgw_Lanext_VxlanVtepRange represents the /nokia-conf/configure/groups/group/router/vrgw/lanext/vxlan-vtep-range YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Vrgw_Lanext_VxlanVtepRange struct {
	End   *string `path:"end" module:"nokia-conf"`
	Start *string `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Vrgw_Lanext_VxlanVtepRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Vrgw_Lanext_VxlanVtepRange) IsYANGGoStruct() {}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Router_Vrgw_Lanext_VxlanVtepRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Vrgw_Lanext_VxlanVtepRange) GetEnd() string {
	if t == nil || t.End == nil {
		return ""
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Router_Vrgw_Lanext_VxlanVtepRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Vrgw_Lanext_VxlanVtepRange) GetStart() string {
	if t == nil || t.Start == nil {
		return ""
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Vrgw_Lanext_VxlanVtepRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Vrgw_Lanext_VxlanVtepRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Vrgw_Lanext_VxlanVtepRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Vrgw_Lanext_VxlanVtepRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Vrgw_Lanext_VxlanVtepRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Vrgw_Lanext_VxlanVtepRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Vrgw_Lanext_VxlanVtepRange.
func (*NokiaConf_Configure_Groups_Group_Router_Vrgw_Lanext_VxlanVtepRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_WlanGw represents the /nokia-conf/configure/groups/group/router/wlan-gw YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_WlanGw struct {
	DistributedSubscriberMgmt   *NokiaConf_Configure_Groups_Group_Router_WlanGw_DistributedSubscriberMgmt   `path:"distributed-subscriber-mgmt" module:"nokia-conf" yangPresence:"true"`
	MobilityTriggeredAccounting *NokiaConf_Configure_Groups_Group_Router_WlanGw_MobilityTriggeredAccounting `path:"mobility-triggered-accounting" module:"nokia-conf"`
	Xconnect                    *NokiaConf_Configure_Groups_Group_Router_WlanGw_Xconnect                    `path:"xconnect" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_WlanGw implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_WlanGw) IsYANGGoStruct() {}

// GetOrCreateDistributedSubscriberMgmt retrieves the value of the DistributedSubscriberMgmt field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_WlanGw) GetOrCreateDistributedSubscriberMgmt() *NokiaConf_Configure_Groups_Group_Router_WlanGw_DistributedSubscriberMgmt {
	if t.DistributedSubscriberMgmt != nil {
		return t.DistributedSubscriberMgmt
	}
	t.DistributedSubscriberMgmt = &NokiaConf_Configure_Groups_Group_Router_WlanGw_DistributedSubscriberMgmt{}
	return t.DistributedSubscriberMgmt
}

// GetOrCreateMobilityTriggeredAccounting retrieves the value of the MobilityTriggeredAccounting field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_WlanGw) GetOrCreateMobilityTriggeredAccounting() *NokiaConf_Configure_Groups_Group_Router_WlanGw_MobilityTriggeredAccounting {
	if t.MobilityTriggeredAccounting != nil {
		return t.MobilityTriggeredAccounting
	}
	t.MobilityTriggeredAccounting = &NokiaConf_Configure_Groups_Group_Router_WlanGw_MobilityTriggeredAccounting{}
	return t.MobilityTriggeredAccounting
}

// GetOrCreateXconnect retrieves the value of the Xconnect field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_WlanGw) GetOrCreateXconnect() *NokiaConf_Configure_Groups_Group_Router_WlanGw_Xconnect {
	if t.Xconnect != nil {
		return t.Xconnect
	}
	t.Xconnect = &NokiaConf_Configure_Groups_Group_Router_WlanGw_Xconnect{}
	return t.Xconnect
}

// GetDistributedSubscriberMgmt returns the value of the DistributedSubscriberMgmt struct pointer
// from NokiaConf_Configure_Groups_Group_Router_WlanGw. If the receiver or the field DistributedSubscriberMgmt is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_WlanGw) GetDistributedSubscriberMgmt() *NokiaConf_Configure_Groups_Group_Router_WlanGw_DistributedSubscriberMgmt {
	if t != nil && t.DistributedSubscriberMgmt != nil {
		return t.DistributedSubscriberMgmt
	}
	return nil
}

// GetMobilityTriggeredAccounting returns the value of the MobilityTriggeredAccounting struct pointer
// from NokiaConf_Configure_Groups_Group_Router_WlanGw. If the receiver or the field MobilityTriggeredAccounting is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_WlanGw) GetMobilityTriggeredAccounting() *NokiaConf_Configure_Groups_Group_Router_WlanGw_MobilityTriggeredAccounting {
	if t != nil && t.MobilityTriggeredAccounting != nil {
		return t.MobilityTriggeredAccounting
	}
	return nil
}

// GetXconnect returns the value of the Xconnect struct pointer
// from NokiaConf_Configure_Groups_Group_Router_WlanGw. If the receiver or the field Xconnect is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_WlanGw) GetXconnect() *NokiaConf_Configure_Groups_Group_Router_WlanGw_Xconnect {
	if t != nil && t.Xconnect != nil {
		return t.Xconnect
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_WlanGw
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_WlanGw) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DistributedSubscriberMgmt.PopulateDefaults()
	t.MobilityTriggeredAccounting.PopulateDefaults()
	t.Xconnect.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_WlanGw) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_WlanGw"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_WlanGw) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_WlanGw) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_WlanGw.
func (*NokiaConf_Configure_Groups_Group_Router_WlanGw) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_WlanGw_DistributedSubscriberMgmt represents the /nokia-conf/configure/groups/group/router/wlan-gw/distributed-subscriber-mgmt YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_WlanGw_DistributedSubscriberMgmt struct {
	Ipv6TcpMssAdjust *uint32 `path:"ipv6-tcp-mss-adjust" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_WlanGw_DistributedSubscriberMgmt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_WlanGw_DistributedSubscriberMgmt) IsYANGGoStruct() {}

// GetIpv6TcpMssAdjust retrieves the value of the leaf Ipv6TcpMssAdjust from the NokiaConf_Configure_Groups_Group_Router_WlanGw_DistributedSubscriberMgmt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6TcpMssAdjust is set, it can
// safely use t.GetIpv6TcpMssAdjust() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6TcpMssAdjust == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_WlanGw_DistributedSubscriberMgmt) GetIpv6TcpMssAdjust() uint32 {
	if t == nil || t.Ipv6TcpMssAdjust == nil {
		return 0
	}
	return *t.Ipv6TcpMssAdjust
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_WlanGw_DistributedSubscriberMgmt
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_WlanGw_DistributedSubscriberMgmt) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_WlanGw_DistributedSubscriberMgmt) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_WlanGw_DistributedSubscriberMgmt"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_WlanGw_DistributedSubscriberMgmt) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_WlanGw_DistributedSubscriberMgmt) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_WlanGw_DistributedSubscriberMgmt.
func (*NokiaConf_Configure_Groups_Group_Router_WlanGw_DistributedSubscriberMgmt) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_WlanGw_MobilityTriggeredAccounting represents the /nokia-conf/configure/groups/group/router/wlan-gw/mobility-triggered-accounting YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_WlanGw_MobilityTriggeredAccounting struct {
	AdminState      E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	HoldDown        *uint32                     `path:"hold-down" module:"nokia-conf"`
	IncludeCounters *bool                       `path:"include-counters" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_WlanGw_MobilityTriggeredAccounting implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_WlanGw_MobilityTriggeredAccounting) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_WlanGw_MobilityTriggeredAccounting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_WlanGw_MobilityTriggeredAccounting) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetHoldDown retrieves the value of the leaf HoldDown from the NokiaConf_Configure_Groups_Group_Router_WlanGw_MobilityTriggeredAccounting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldDown is set, it can
// safely use t.GetHoldDown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldDown == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_WlanGw_MobilityTriggeredAccounting) GetHoldDown() uint32 {
	if t == nil || t.HoldDown == nil {
		return 0
	}
	return *t.HoldDown
}

// GetIncludeCounters retrieves the value of the leaf IncludeCounters from the NokiaConf_Configure_Groups_Group_Router_WlanGw_MobilityTriggeredAccounting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IncludeCounters is set, it can
// safely use t.GetIncludeCounters() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IncludeCounters == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_WlanGw_MobilityTriggeredAccounting) GetIncludeCounters() bool {
	if t == nil || t.IncludeCounters == nil {
		return false
	}
	return *t.IncludeCounters
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_WlanGw_MobilityTriggeredAccounting
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_WlanGw_MobilityTriggeredAccounting) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.IncludeCounters == nil {
		var v bool = false
		t.IncludeCounters = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_WlanGw_MobilityTriggeredAccounting) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_WlanGw_MobilityTriggeredAccounting"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_WlanGw_MobilityTriggeredAccounting) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_WlanGw_MobilityTriggeredAccounting) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_WlanGw_MobilityTriggeredAccounting.
func (*NokiaConf_Configure_Groups_Group_Router_WlanGw_MobilityTriggeredAccounting) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_WlanGw_Xconnect represents the /nokia-conf/configure/groups/group/router/wlan-gw/xconnect YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_WlanGw_Xconnect struct {
	AdminState     E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	TunnelSourceIp *string                     `path:"tunnel-source-ip" module:"nokia-conf"`
	WlanGwGroup    *uint32                     `path:"wlan-gw-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_WlanGw_Xconnect implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_WlanGw_Xconnect) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_WlanGw_Xconnect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_WlanGw_Xconnect) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetTunnelSourceIp retrieves the value of the leaf TunnelSourceIp from the NokiaConf_Configure_Groups_Group_Router_WlanGw_Xconnect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TunnelSourceIp is set, it can
// safely use t.GetTunnelSourceIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TunnelSourceIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_WlanGw_Xconnect) GetTunnelSourceIp() string {
	if t == nil || t.TunnelSourceIp == nil {
		return ""
	}
	return *t.TunnelSourceIp
}

// GetWlanGwGroup retrieves the value of the leaf WlanGwGroup from the NokiaConf_Configure_Groups_Group_Router_WlanGw_Xconnect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WlanGwGroup is set, it can
// safely use t.GetWlanGwGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WlanGwGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_WlanGw_Xconnect) GetWlanGwGroup() uint32 {
	if t == nil || t.WlanGwGroup == nil {
		return 0
	}
	return *t.WlanGwGroup
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_WlanGw_Xconnect
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_WlanGw_Xconnect) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_WlanGw_Xconnect) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_WlanGw_Xconnect"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_WlanGw_Xconnect) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_WlanGw_Xconnect) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_WlanGw_Xconnect.
func (*NokiaConf_Configure_Groups_Group_Router_WlanGw_Xconnect) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Wpp represents the /nokia-conf/configure/groups/group/router/wpp YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Wpp struct {
	AdminState E_NokiaTypesSros_AdminState                                    `path:"admin-state" module:"nokia-conf"`
	Portal     map[string]*NokiaConf_Configure_Groups_Group_Router_Wpp_Portal `path:"portal" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Wpp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Wpp) IsYANGGoStruct() {}

// NewPortal creates a new entry in the Portal list of the
// NokiaConf_Configure_Groups_Group_Router_Wpp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Wpp) NewPortal(Name string) (*NokiaConf_Configure_Groups_Group_Router_Wpp_Portal, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Portal == nil {
		t.Portal = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Wpp_Portal)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Portal[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Portal", key)
	}

	t.Portal[key] = &NokiaConf_Configure_Groups_Group_Router_Wpp_Portal{
		Name: &Name,
	}

	return t.Portal[key], nil
}

// RenamePortal renames an entry in the list Portal within
// the NokiaConf_Configure_Groups_Group_Router_Wpp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Wpp) RenamePortal(oldK, newK string) error {
	if _, ok := t.Portal[newK]; ok {
		return fmt.Errorf("key %v already exists in Portal", newK)
	}

	e, ok := t.Portal[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Portal", oldK)
	}
	e.Name = &newK

	t.Portal[newK] = e
	delete(t.Portal, oldK)
	return nil
}

// GetOrCreatePortal retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Wpp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Wpp) GetOrCreatePortal(Name string) *NokiaConf_Configure_Groups_Group_Router_Wpp_Portal {

	key := Name

	if v, ok := t.Portal[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPortal(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePortal got unexpected error: %v", err))
	}
	return v
}

// GetPortal retrieves the value with the specified key from
// the Portal map field of NokiaConf_Configure_Groups_Group_Router_Wpp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Wpp) GetPortal(Name string) *NokiaConf_Configure_Groups_Group_Router_Wpp_Portal {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Portal[key]; ok {
		return lm
	}
	return nil
}

// DeletePortal deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Wpp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Wpp) DeletePortal(Name string) {
	key := Name

	delete(t.Portal, key)
}

// AppendPortal appends the supplied NokiaConf_Configure_Groups_Group_Router_Wpp_Portal struct to the
// list Portal of NokiaConf_Configure_Groups_Group_Router_Wpp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Wpp_Portal already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Wpp) AppendPortal(v *NokiaConf_Configure_Groups_Group_Router_Wpp_Portal) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Portal == nil {
		t.Portal = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Wpp_Portal)
	}

	if _, ok := t.Portal[key]; ok {
		return fmt.Errorf("duplicate key for list Portal %v", key)
	}

	t.Portal[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Wpp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Wpp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Wpp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Wpp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.Portal {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Wpp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Wpp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Wpp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Wpp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Wpp.
func (*NokiaConf_Configure_Groups_Group_Router_Wpp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Wpp_Portal represents the /nokia-conf/configure/groups/group/router/wpp/portal YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Wpp_Portal struct {
	AckAuthRetryCount   *uint32                                                         `path:"ack-auth-retry-count" module:"nokia-conf"`
	Address             *string                                                         `path:"address" module:"nokia-conf"`
	AdminState          E_NokiaTypesSros_AdminState                                     `path:"admin-state" module:"nokia-conf"`
	Name                *string                                                         `path:"name" module:"nokia-conf"`
	NtfLogoutRetryCount *uint32                                                         `path:"ntf-logout-retry-count" module:"nokia-conf"`
	PortFormat          E_NokiaConf_Configure_Groups_Group_Router_Wpp_Portal_PortFormat `path:"port-format" module:"nokia-conf"`
	RetryInterval       *uint32                                                         `path:"retry-interval" module:"nokia-conf"`
	Secret              *string                                                         `path:"secret" module:"nokia-conf"`
	Version             *uint32                                                         `path:"version" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Wpp_Portal implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Wpp_Portal) IsYANGGoStruct() {}

// GetAckAuthRetryCount retrieves the value of the leaf AckAuthRetryCount from the NokiaConf_Configure_Groups_Group_Router_Wpp_Portal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AckAuthRetryCount is set, it can
// safely use t.GetAckAuthRetryCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AckAuthRetryCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Wpp_Portal) GetAckAuthRetryCount() uint32 {
	if t == nil || t.AckAuthRetryCount == nil {
		return 5
	}
	return *t.AckAuthRetryCount
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Router_Wpp_Portal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Wpp_Portal) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Wpp_Portal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Wpp_Portal) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Router_Wpp_Portal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Wpp_Portal) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetNtfLogoutRetryCount retrieves the value of the leaf NtfLogoutRetryCount from the NokiaConf_Configure_Groups_Group_Router_Wpp_Portal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NtfLogoutRetryCount is set, it can
// safely use t.GetNtfLogoutRetryCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NtfLogoutRetryCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Wpp_Portal) GetNtfLogoutRetryCount() uint32 {
	if t == nil || t.NtfLogoutRetryCount == nil {
		return 5
	}
	return *t.NtfLogoutRetryCount
}

// GetPortFormat retrieves the value of the leaf PortFormat from the NokiaConf_Configure_Groups_Group_Router_Wpp_Portal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortFormat is set, it can
// safely use t.GetPortFormat() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortFormat == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Wpp_Portal) GetPortFormat() E_NokiaConf_Configure_Groups_Group_Router_Wpp_Portal_PortFormat {
	if t == nil || t.PortFormat == 0 {
		return NokiaConf_Configure_Groups_Group_Router_Wpp_Portal_PortFormat_standard
	}
	return t.PortFormat
}

// GetRetryInterval retrieves the value of the leaf RetryInterval from the NokiaConf_Configure_Groups_Group_Router_Wpp_Portal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetryInterval is set, it can
// safely use t.GetRetryInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetryInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Wpp_Portal) GetRetryInterval() uint32 {
	if t == nil || t.RetryInterval == nil {
		return 2000
	}
	return *t.RetryInterval
}

// GetSecret retrieves the value of the leaf Secret from the NokiaConf_Configure_Groups_Group_Router_Wpp_Portal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Secret is set, it can
// safely use t.GetSecret() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Secret == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Wpp_Portal) GetSecret() string {
	if t == nil || t.Secret == nil {
		return ""
	}
	return *t.Secret
}

// GetVersion retrieves the value of the leaf Version from the NokiaConf_Configure_Groups_Group_Router_Wpp_Portal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Wpp_Portal) GetVersion() uint32 {
	if t == nil || t.Version == nil {
		return 1
	}
	return *t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Wpp_Portal
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Wpp_Portal) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AckAuthRetryCount == nil {
		var v uint32 = 5
		t.AckAuthRetryCount = &v
	}
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.NtfLogoutRetryCount == nil {
		var v uint32 = 5
		t.NtfLogoutRetryCount = &v
	}
	if t.PortFormat == 0 {
		t.PortFormat = NokiaConf_Configure_Groups_Group_Router_Wpp_Portal_PortFormat_standard
	}
	if t.RetryInterval == nil {
		var v uint32 = 2000
		t.RetryInterval = &v
	}
	if t.Version == nil {
		var v uint32 = 1
		t.Version = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Wpp_Portal struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Wpp_Portal) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Wpp_Portal) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Wpp_Portal"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Wpp_Portal) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Wpp_Portal) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Wpp_Portal.
func (*NokiaConf_Configure_Groups_Group_Router_Wpp_Portal) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_RoutingOptions represents the /nokia-conf/configure/groups/group/routing-options YANG schema element.
type NokiaConf_Configure_Groups_Group_RoutingOptions struct {
	AdminTags                    *NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags                    `path:"admin-tags" module:"nokia-conf"`
	FlexibleAlgorithmDefinitions *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions `path:"flexible-algorithm-definitions" module:"nokia-conf" yangPresence:"true"`
	IfAttribute                  *NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute                  `path:"if-attribute" module:"nokia-conf" yangPresence:"true"`
	IpFastReroute                *bool                                                                         `path:"ip-fast-reroute" module:"nokia-conf"`
	PolicyAccounting             *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting             `path:"policy-accounting" module:"nokia-conf" yangPresence:"true"`
	RouteNextHopPolicy           *NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy           `path:"route-next-hop-policy" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_RoutingOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_RoutingOptions) IsYANGGoStruct() {}

// GetOrCreateAdminTags retrieves the value of the AdminTags field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions) GetOrCreateAdminTags() *NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags {
	if t.AdminTags != nil {
		return t.AdminTags
	}
	t.AdminTags = &NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags{}
	return t.AdminTags
}

// GetOrCreateFlexibleAlgorithmDefinitions retrieves the value of the FlexibleAlgorithmDefinitions field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions) GetOrCreateFlexibleAlgorithmDefinitions() *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions {
	if t.FlexibleAlgorithmDefinitions != nil {
		return t.FlexibleAlgorithmDefinitions
	}
	t.FlexibleAlgorithmDefinitions = &NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions{}
	return t.FlexibleAlgorithmDefinitions
}

// GetOrCreateIfAttribute retrieves the value of the IfAttribute field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions) GetOrCreateIfAttribute() *NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute {
	if t.IfAttribute != nil {
		return t.IfAttribute
	}
	t.IfAttribute = &NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute{}
	return t.IfAttribute
}

// GetOrCreatePolicyAccounting retrieves the value of the PolicyAccounting field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions) GetOrCreatePolicyAccounting() *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting {
	if t.PolicyAccounting != nil {
		return t.PolicyAccounting
	}
	t.PolicyAccounting = &NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting{}
	return t.PolicyAccounting
}

// GetOrCreateRouteNextHopPolicy retrieves the value of the RouteNextHopPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions) GetOrCreateRouteNextHopPolicy() *NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy {
	if t.RouteNextHopPolicy != nil {
		return t.RouteNextHopPolicy
	}
	t.RouteNextHopPolicy = &NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy{}
	return t.RouteNextHopPolicy
}

// GetAdminTags returns the value of the AdminTags struct pointer
// from NokiaConf_Configure_Groups_Group_RoutingOptions. If the receiver or the field AdminTags is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions) GetAdminTags() *NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags {
	if t != nil && t.AdminTags != nil {
		return t.AdminTags
	}
	return nil
}

// GetFlexibleAlgorithmDefinitions returns the value of the FlexibleAlgorithmDefinitions struct pointer
// from NokiaConf_Configure_Groups_Group_RoutingOptions. If the receiver or the field FlexibleAlgorithmDefinitions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions) GetFlexibleAlgorithmDefinitions() *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions {
	if t != nil && t.FlexibleAlgorithmDefinitions != nil {
		return t.FlexibleAlgorithmDefinitions
	}
	return nil
}

// GetIfAttribute returns the value of the IfAttribute struct pointer
// from NokiaConf_Configure_Groups_Group_RoutingOptions. If the receiver or the field IfAttribute is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions) GetIfAttribute() *NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute {
	if t != nil && t.IfAttribute != nil {
		return t.IfAttribute
	}
	return nil
}

// GetPolicyAccounting returns the value of the PolicyAccounting struct pointer
// from NokiaConf_Configure_Groups_Group_RoutingOptions. If the receiver or the field PolicyAccounting is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions) GetPolicyAccounting() *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting {
	if t != nil && t.PolicyAccounting != nil {
		return t.PolicyAccounting
	}
	return nil
}

// GetRouteNextHopPolicy returns the value of the RouteNextHopPolicy struct pointer
// from NokiaConf_Configure_Groups_Group_RoutingOptions. If the receiver or the field RouteNextHopPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions) GetRouteNextHopPolicy() *NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy {
	if t != nil && t.RouteNextHopPolicy != nil {
		return t.RouteNextHopPolicy
	}
	return nil
}

// GetIpFastReroute retrieves the value of the leaf IpFastReroute from the NokiaConf_Configure_Groups_Group_RoutingOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpFastReroute is set, it can
// safely use t.GetIpFastReroute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpFastReroute == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions) GetIpFastReroute() bool {
	if t == nil || t.IpFastReroute == nil {
		return false
	}
	return *t.IpFastReroute
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_RoutingOptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IpFastReroute == nil {
		var v bool = false
		t.IpFastReroute = &v
	}
	t.AdminTags.PopulateDefaults()
	t.FlexibleAlgorithmDefinitions.PopulateDefaults()
	t.IfAttribute.PopulateDefaults()
	t.PolicyAccounting.PopulateDefaults()
	t.RouteNextHopPolicy.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_RoutingOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_RoutingOptions.
func (*NokiaConf_Configure_Groups_Group_RoutingOptions) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags represents the /nokia-conf/configure/groups/group/routing-options/admin-tags YANG schema element.
type NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags struct {
	AdminTag            map[string]*NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_AdminTag            `path:"admin-tag" module:"nokia-conf"`
	RouteAdminTagPolicy map[string]*NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy `path:"route-admin-tag-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags) IsYANGGoStruct() {}

// NewAdminTag creates a new entry in the AdminTag list of the
// NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags) NewAdminTag(Tag string) (*NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_AdminTag, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AdminTag == nil {
		t.AdminTag = make(map[string]*NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_AdminTag)
	}

	key := Tag

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AdminTag[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AdminTag", key)
	}

	t.AdminTag[key] = &NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_AdminTag{
		Tag: &Tag,
	}

	return t.AdminTag[key], nil
}

// RenameAdminTag renames an entry in the list AdminTag within
// the NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags) RenameAdminTag(oldK, newK string) error {
	if _, ok := t.AdminTag[newK]; ok {
		return fmt.Errorf("key %v already exists in AdminTag", newK)
	}

	e, ok := t.AdminTag[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AdminTag", oldK)
	}
	e.Tag = &newK

	t.AdminTag[newK] = e
	delete(t.AdminTag, oldK)
	return nil
}

// GetOrCreateAdminTag retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags) GetOrCreateAdminTag(Tag string) *NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_AdminTag {

	key := Tag

	if v, ok := t.AdminTag[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAdminTag(Tag)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAdminTag got unexpected error: %v", err))
	}
	return v
}

// GetAdminTag retrieves the value with the specified key from
// the AdminTag map field of NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags) GetAdminTag(Tag string) *NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_AdminTag {

	if t == nil {
		return nil
	}

	key := Tag

	if lm, ok := t.AdminTag[key]; ok {
		return lm
	}
	return nil
}

// DeleteAdminTag deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags) DeleteAdminTag(Tag string) {
	key := Tag

	delete(t.AdminTag, key)
}

// AppendAdminTag appends the supplied NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_AdminTag struct to the
// list AdminTag of NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_AdminTag already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags) AppendAdminTag(v *NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_AdminTag) error {
	if v.Tag == nil {
		return fmt.Errorf("invalid nil key received for Tag")
	}

	key := *v.Tag

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AdminTag == nil {
		t.AdminTag = make(map[string]*NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_AdminTag)
	}

	if _, ok := t.AdminTag[key]; ok {
		return fmt.Errorf("duplicate key for list AdminTag %v", key)
	}

	t.AdminTag[key] = v
	return nil
}

// NewRouteAdminTagPolicy creates a new entry in the RouteAdminTagPolicy list of the
// NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags) NewRouteAdminTagPolicy(PolicyName string) (*NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RouteAdminTagPolicy == nil {
		t.RouteAdminTagPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy)
	}

	key := PolicyName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RouteAdminTagPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RouteAdminTagPolicy", key)
	}

	t.RouteAdminTagPolicy[key] = &NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy{
		PolicyName: &PolicyName,
	}

	return t.RouteAdminTagPolicy[key], nil
}

// RenameRouteAdminTagPolicy renames an entry in the list RouteAdminTagPolicy within
// the NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags) RenameRouteAdminTagPolicy(oldK, newK string) error {
	if _, ok := t.RouteAdminTagPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in RouteAdminTagPolicy", newK)
	}

	e, ok := t.RouteAdminTagPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RouteAdminTagPolicy", oldK)
	}
	e.PolicyName = &newK

	t.RouteAdminTagPolicy[newK] = e
	delete(t.RouteAdminTagPolicy, oldK)
	return nil
}

// GetOrCreateRouteAdminTagPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags) GetOrCreateRouteAdminTagPolicy(PolicyName string) *NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy {

	key := PolicyName

	if v, ok := t.RouteAdminTagPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRouteAdminTagPolicy(PolicyName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRouteAdminTagPolicy got unexpected error: %v", err))
	}
	return v
}

// GetRouteAdminTagPolicy retrieves the value with the specified key from
// the RouteAdminTagPolicy map field of NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags) GetRouteAdminTagPolicy(PolicyName string) *NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy {

	if t == nil {
		return nil
	}

	key := PolicyName

	if lm, ok := t.RouteAdminTagPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteRouteAdminTagPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags) DeleteRouteAdminTagPolicy(PolicyName string) {
	key := PolicyName

	delete(t.RouteAdminTagPolicy, key)
}

// AppendRouteAdminTagPolicy appends the supplied NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy struct to the
// list RouteAdminTagPolicy of NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags) AppendRouteAdminTagPolicy(v *NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy) error {
	if v.PolicyName == nil {
		return fmt.Errorf("invalid nil key received for PolicyName")
	}

	key := *v.PolicyName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RouteAdminTagPolicy == nil {
		t.RouteAdminTagPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy)
	}

	if _, ok := t.RouteAdminTagPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list RouteAdminTagPolicy %v", key)
	}

	t.RouteAdminTagPolicy[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.AdminTag {
		e.PopulateDefaults()
	}
	for _, e := range t.RouteAdminTagPolicy {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags.
func (*NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_AdminTag represents the /nokia-conf/configure/groups/group/routing-options/admin-tags/admin-tag YANG schema element.
type NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_AdminTag struct {
	Tag *string `path:"tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_AdminTag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_AdminTag) IsYANGGoStruct() {}

// GetTag retrieves the value of the leaf Tag from the NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_AdminTag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tag is set, it can
// safely use t.GetTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_AdminTag) GetTag() string {
	if t == nil || t.Tag == nil {
		return ""
	}
	return *t.Tag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_AdminTag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_AdminTag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_AdminTag struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_AdminTag) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Tag == nil {
		return nil, fmt.Errorf("nil value for key Tag")
	}

	return map[string]interface{}{
		"tag": *t.Tag,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_AdminTag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_AdminTag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_AdminTag) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_AdminTag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_AdminTag.
func (*NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_AdminTag) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy represents the /nokia-conf/configure/groups/group/routing-options/admin-tags/route-admin-tag-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy struct {
	Exclude    map[string]*NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy_Exclude `path:"exclude" module:"nokia-conf"`
	Include    map[string]*NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy_Include `path:"include" module:"nokia-conf"`
	PolicyName *string                                                                                           `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy) IsYANGGoStruct() {
}

// NewExclude creates a new entry in the Exclude list of the
// NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy) NewExclude(Tag string) (*NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy_Exclude, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Exclude == nil {
		t.Exclude = make(map[string]*NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy_Exclude)
	}

	key := Tag

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Exclude[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Exclude", key)
	}

	t.Exclude[key] = &NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy_Exclude{
		Tag: &Tag,
	}

	return t.Exclude[key], nil
}

// RenameExclude renames an entry in the list Exclude within
// the NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy) RenameExclude(oldK, newK string) error {
	if _, ok := t.Exclude[newK]; ok {
		return fmt.Errorf("key %v already exists in Exclude", newK)
	}

	e, ok := t.Exclude[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Exclude", oldK)
	}
	e.Tag = &newK

	t.Exclude[newK] = e
	delete(t.Exclude, oldK)
	return nil
}

// GetOrCreateExclude retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy) GetOrCreateExclude(Tag string) *NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy_Exclude {

	key := Tag

	if v, ok := t.Exclude[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewExclude(Tag)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateExclude got unexpected error: %v", err))
	}
	return v
}

// GetExclude retrieves the value with the specified key from
// the Exclude map field of NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy) GetExclude(Tag string) *NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy_Exclude {

	if t == nil {
		return nil
	}

	key := Tag

	if lm, ok := t.Exclude[key]; ok {
		return lm
	}
	return nil
}

// DeleteExclude deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy) DeleteExclude(Tag string) {
	key := Tag

	delete(t.Exclude, key)
}

// AppendExclude appends the supplied NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy_Exclude struct to the
// list Exclude of NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy_Exclude already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy) AppendExclude(v *NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy_Exclude) error {
	if v.Tag == nil {
		return fmt.Errorf("invalid nil key received for Tag")
	}

	key := *v.Tag

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Exclude == nil {
		t.Exclude = make(map[string]*NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy_Exclude)
	}

	if _, ok := t.Exclude[key]; ok {
		return fmt.Errorf("duplicate key for list Exclude %v", key)
	}

	t.Exclude[key] = v
	return nil
}

// NewInclude creates a new entry in the Include list of the
// NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy) NewInclude(Tag string) (*NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy_Include, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Include == nil {
		t.Include = make(map[string]*NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy_Include)
	}

	key := Tag

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Include[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Include", key)
	}

	t.Include[key] = &NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy_Include{
		Tag: &Tag,
	}

	return t.Include[key], nil
}

// RenameInclude renames an entry in the list Include within
// the NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy) RenameInclude(oldK, newK string) error {
	if _, ok := t.Include[newK]; ok {
		return fmt.Errorf("key %v already exists in Include", newK)
	}

	e, ok := t.Include[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Include", oldK)
	}
	e.Tag = &newK

	t.Include[newK] = e
	delete(t.Include, oldK)
	return nil
}

// GetOrCreateInclude retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy) GetOrCreateInclude(Tag string) *NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy_Include {

	key := Tag

	if v, ok := t.Include[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInclude(Tag)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInclude got unexpected error: %v", err))
	}
	return v
}

// GetInclude retrieves the value with the specified key from
// the Include map field of NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy) GetInclude(Tag string) *NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy_Include {

	if t == nil {
		return nil
	}

	key := Tag

	if lm, ok := t.Include[key]; ok {
		return lm
	}
	return nil
}

// DeleteInclude deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy) DeleteInclude(Tag string) {
	key := Tag

	delete(t.Include, key)
}

// AppendInclude appends the supplied NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy_Include struct to the
// list Include of NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy_Include already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy) AppendInclude(v *NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy_Include) error {
	if v.Tag == nil {
		return fmt.Errorf("invalid nil key received for Tag")
	}

	key := *v.Tag

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Include == nil {
		t.Include = make(map[string]*NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy_Include)
	}

	if _, ok := t.Include[key]; ok {
		return fmt.Errorf("duplicate key for list Include %v", key)
	}

	t.Include[key] = v
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Exclude {
		e.PopulateDefaults()
	}
	for _, e := range t.Include {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PolicyName == nil {
		return nil, fmt.Errorf("nil value for key PolicyName")
	}

	return map[string]interface{}{
		"policy-name": *t.PolicyName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy.
func (*NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy_Exclude represents the /nokia-conf/configure/groups/group/routing-options/admin-tags/route-admin-tag-policy/exclude YANG schema element.
type NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy_Exclude struct {
	Tag *string `path:"tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy_Exclude implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy_Exclude) IsYANGGoStruct() {
}

// GetTag retrieves the value of the leaf Tag from the NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy_Exclude
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tag is set, it can
// safely use t.GetTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy_Exclude) GetTag() string {
	if t == nil || t.Tag == nil {
		return ""
	}
	return *t.Tag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy_Exclude
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy_Exclude) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy_Exclude struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy_Exclude) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Tag == nil {
		return nil, fmt.Errorf("nil value for key Tag")
	}

	return map[string]interface{}{
		"tag": *t.Tag,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy_Exclude) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy_Exclude"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy_Exclude) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy_Exclude) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy_Exclude.
func (*NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy_Exclude) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy_Include represents the /nokia-conf/configure/groups/group/routing-options/admin-tags/route-admin-tag-policy/include YANG schema element.
type NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy_Include struct {
	Tag *string `path:"tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy_Include implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy_Include) IsYANGGoStruct() {
}

// GetTag retrieves the value of the leaf Tag from the NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy_Include
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tag is set, it can
// safely use t.GetTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy_Include) GetTag() string {
	if t == nil || t.Tag == nil {
		return ""
	}
	return *t.Tag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy_Include
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy_Include) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy_Include struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy_Include) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Tag == nil {
		return nil, fmt.Errorf("nil value for key Tag")
	}

	return map[string]interface{}{
		"tag": *t.Tag,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy_Include) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy_Include"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy_Include) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy_Include) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy_Include.
func (*NokiaConf_Configure_Groups_Group_RoutingOptions_AdminTags_RouteAdminTagPolicy_Include) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions represents the /nokia-conf/configure/groups/group/routing-options/flexible-algorithm-definitions YANG schema element.
type NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions struct {
	FlexAlgo map[string]*NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo `path:"flex-algo" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions) IsYANGGoStruct() {
}

// NewFlexAlgo creates a new entry in the FlexAlgo list of the
// NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions) NewFlexAlgo(FlexAlgoName string) (*NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FlexAlgo == nil {
		t.FlexAlgo = make(map[string]*NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo)
	}

	key := FlexAlgoName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.FlexAlgo[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list FlexAlgo", key)
	}

	t.FlexAlgo[key] = &NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo{
		FlexAlgoName: &FlexAlgoName,
	}

	return t.FlexAlgo[key], nil
}

// RenameFlexAlgo renames an entry in the list FlexAlgo within
// the NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions) RenameFlexAlgo(oldK, newK string) error {
	if _, ok := t.FlexAlgo[newK]; ok {
		return fmt.Errorf("key %v already exists in FlexAlgo", newK)
	}

	e, ok := t.FlexAlgo[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in FlexAlgo", oldK)
	}
	e.FlexAlgoName = &newK

	t.FlexAlgo[newK] = e
	delete(t.FlexAlgo, oldK)
	return nil
}

// GetOrCreateFlexAlgo retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions) GetOrCreateFlexAlgo(FlexAlgoName string) *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo {

	key := FlexAlgoName

	if v, ok := t.FlexAlgo[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFlexAlgo(FlexAlgoName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFlexAlgo got unexpected error: %v", err))
	}
	return v
}

// GetFlexAlgo retrieves the value with the specified key from
// the FlexAlgo map field of NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions) GetFlexAlgo(FlexAlgoName string) *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo {

	if t == nil {
		return nil
	}

	key := FlexAlgoName

	if lm, ok := t.FlexAlgo[key]; ok {
		return lm
	}
	return nil
}

// DeleteFlexAlgo deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions) DeleteFlexAlgo(FlexAlgoName string) {
	key := FlexAlgoName

	delete(t.FlexAlgo, key)
}

// AppendFlexAlgo appends the supplied NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo struct to the
// list FlexAlgo of NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions) AppendFlexAlgo(v *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo) error {
	if v.FlexAlgoName == nil {
		return fmt.Errorf("invalid nil key received for FlexAlgoName")
	}

	key := *v.FlexAlgoName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FlexAlgo == nil {
		t.FlexAlgo = make(map[string]*NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo)
	}

	if _, ok := t.FlexAlgo[key]; ok {
		return fmt.Errorf("duplicate key for list FlexAlgo %v", key)
	}

	t.FlexAlgo[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.FlexAlgo {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions.
func (*NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo represents the /nokia-conf/configure/groups/group/routing-options/flexible-algorithm-definitions/flex-algo YANG schema element.
type NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo struct {
	AdminState   E_NokiaTypesSros_AdminState                                                                        `path:"admin-state" module:"nokia-conf"`
	Description  *string                                                                                            `path:"description" module:"nokia-conf"`
	Exclude      *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude     `path:"exclude" module:"nokia-conf"`
	FlagsTlv     *bool                                                                                              `path:"flags-tlv" module:"nokia-conf"`
	FlexAlgoName *string                                                                                            `path:"flex-algo-name" module:"nokia-conf"`
	IncludeAll   *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll  `path:"include-all" module:"nokia-conf"`
	IncludeAny   *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny  `path:"include-any" module:"nokia-conf"`
	MetricType   E_NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_MetricType `path:"metric-type" module:"nokia-conf"`
	Priority     *int32                                                                                             `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo) IsYANGGoStruct() {
}

// GetOrCreateExclude retrieves the value of the Exclude field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo) GetOrCreateExclude() *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude {
	if t.Exclude != nil {
		return t.Exclude
	}
	t.Exclude = &NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude{}
	return t.Exclude
}

// GetOrCreateIncludeAll retrieves the value of the IncludeAll field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo) GetOrCreateIncludeAll() *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll {
	if t.IncludeAll != nil {
		return t.IncludeAll
	}
	t.IncludeAll = &NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll{}
	return t.IncludeAll
}

// GetOrCreateIncludeAny retrieves the value of the IncludeAny field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo) GetOrCreateIncludeAny() *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny {
	if t.IncludeAny != nil {
		return t.IncludeAny
	}
	t.IncludeAny = &NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny{}
	return t.IncludeAny
}

// GetExclude returns the value of the Exclude struct pointer
// from NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo. If the receiver or the field Exclude is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo) GetExclude() *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude {
	if t != nil && t.Exclude != nil {
		return t.Exclude
	}
	return nil
}

// GetIncludeAll returns the value of the IncludeAll struct pointer
// from NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo. If the receiver or the field IncludeAll is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo) GetIncludeAll() *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll {
	if t != nil && t.IncludeAll != nil {
		return t.IncludeAll
	}
	return nil
}

// GetIncludeAny returns the value of the IncludeAny struct pointer
// from NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo. If the receiver or the field IncludeAny is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo) GetIncludeAny() *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny {
	if t != nil && t.IncludeAny != nil {
		return t.IncludeAny
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetFlagsTlv retrieves the value of the leaf FlagsTlv from the NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlagsTlv is set, it can
// safely use t.GetFlagsTlv() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlagsTlv == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo) GetFlagsTlv() bool {
	if t == nil || t.FlagsTlv == nil {
		return true
	}
	return *t.FlagsTlv
}

// GetFlexAlgoName retrieves the value of the leaf FlexAlgoName from the NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlexAlgoName is set, it can
// safely use t.GetFlexAlgoName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlexAlgoName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo) GetFlexAlgoName() string {
	if t == nil || t.FlexAlgoName == nil {
		return ""
	}
	return *t.FlexAlgoName
}

// GetMetricType retrieves the value of the leaf MetricType from the NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MetricType is set, it can
// safely use t.GetMetricType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MetricType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo) GetMetricType() E_NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_MetricType {
	if t == nil || t.MetricType == 0 {
		return NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_MetricType_igp
	}
	return t.MetricType
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo) GetPriority() int32 {
	if t == nil || t.Priority == nil {
		return 100
	}
	return *t.Priority
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.FlagsTlv == nil {
		var v bool = true
		t.FlagsTlv = &v
	}
	if t.MetricType == 0 {
		t.MetricType = NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_MetricType_igp
	}
	if t.Priority == nil {
		var v int32 = 100
		t.Priority = &v
	}
	t.Exclude.PopulateDefaults()
	t.IncludeAll.PopulateDefaults()
	t.IncludeAny.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo) ΛListKeyMap() (map[string]interface{}, error) {
	if t.FlexAlgoName == nil {
		return nil, fmt.Errorf("nil value for key FlexAlgoName")
	}

	return map[string]interface{}{
		"flex-algo-name": *t.FlexAlgoName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo.
func (*NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude represents the /nokia-conf/configure/groups/group/routing-options/flexible-algorithm-definitions/flex-algo/exclude YANG schema element.
type NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude struct {
	AdminGroup map[string]*NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude_AdminGroup `path:"admin-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude) IsYANGGoStruct() {
}

// NewAdminGroup creates a new entry in the AdminGroup list of the
// NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude) NewAdminGroup(GroupName string) (*NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude_AdminGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AdminGroup == nil {
		t.AdminGroup = make(map[string]*NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude_AdminGroup)
	}

	key := GroupName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AdminGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AdminGroup", key)
	}

	t.AdminGroup[key] = &NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude_AdminGroup{
		GroupName: &GroupName,
	}

	return t.AdminGroup[key], nil
}

// RenameAdminGroup renames an entry in the list AdminGroup within
// the NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude) RenameAdminGroup(oldK, newK string) error {
	if _, ok := t.AdminGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in AdminGroup", newK)
	}

	e, ok := t.AdminGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AdminGroup", oldK)
	}
	e.GroupName = &newK

	t.AdminGroup[newK] = e
	delete(t.AdminGroup, oldK)
	return nil
}

// GetOrCreateAdminGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude) GetOrCreateAdminGroup(GroupName string) *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude_AdminGroup {

	key := GroupName

	if v, ok := t.AdminGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAdminGroup(GroupName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAdminGroup got unexpected error: %v", err))
	}
	return v
}

// GetAdminGroup retrieves the value with the specified key from
// the AdminGroup map field of NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude) GetAdminGroup(GroupName string) *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude_AdminGroup {

	if t == nil {
		return nil
	}

	key := GroupName

	if lm, ok := t.AdminGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteAdminGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude) DeleteAdminGroup(GroupName string) {
	key := GroupName

	delete(t.AdminGroup, key)
}

// AppendAdminGroup appends the supplied NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude_AdminGroup struct to the
// list AdminGroup of NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude_AdminGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude) AppendAdminGroup(v *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude_AdminGroup) error {
	if v.GroupName == nil {
		return fmt.Errorf("invalid nil key received for GroupName")
	}

	key := *v.GroupName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AdminGroup == nil {
		t.AdminGroup = make(map[string]*NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude_AdminGroup)
	}

	if _, ok := t.AdminGroup[key]; ok {
		return fmt.Errorf("duplicate key for list AdminGroup %v", key)
	}

	t.AdminGroup[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.AdminGroup {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude.
func (*NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude_AdminGroup represents the /nokia-conf/configure/groups/group/routing-options/flexible-algorithm-definitions/flex-algo/exclude/admin-group YANG schema element.
type NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude_AdminGroup struct {
	GroupName *string `path:"group-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude_AdminGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude_AdminGroup) IsYANGGoStruct() {
}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude_AdminGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude_AdminGroup) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude_AdminGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude_AdminGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude_AdminGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude_AdminGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupName == nil {
		return nil, fmt.Errorf("nil value for key GroupName")
	}

	return map[string]interface{}{
		"group-name": *t.GroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude_AdminGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude_AdminGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude_AdminGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude_AdminGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude_AdminGroup.
func (*NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_Exclude_AdminGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll represents the /nokia-conf/configure/groups/group/routing-options/flexible-algorithm-definitions/flex-algo/include-all YANG schema element.
type NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll struct {
	AdminGroup map[string]*NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll_AdminGroup `path:"admin-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll) IsYANGGoStruct() {
}

// NewAdminGroup creates a new entry in the AdminGroup list of the
// NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll) NewAdminGroup(GroupName string) (*NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll_AdminGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AdminGroup == nil {
		t.AdminGroup = make(map[string]*NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll_AdminGroup)
	}

	key := GroupName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AdminGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AdminGroup", key)
	}

	t.AdminGroup[key] = &NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll_AdminGroup{
		GroupName: &GroupName,
	}

	return t.AdminGroup[key], nil
}

// RenameAdminGroup renames an entry in the list AdminGroup within
// the NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll) RenameAdminGroup(oldK, newK string) error {
	if _, ok := t.AdminGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in AdminGroup", newK)
	}

	e, ok := t.AdminGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AdminGroup", oldK)
	}
	e.GroupName = &newK

	t.AdminGroup[newK] = e
	delete(t.AdminGroup, oldK)
	return nil
}

// GetOrCreateAdminGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll) GetOrCreateAdminGroup(GroupName string) *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll_AdminGroup {

	key := GroupName

	if v, ok := t.AdminGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAdminGroup(GroupName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAdminGroup got unexpected error: %v", err))
	}
	return v
}

// GetAdminGroup retrieves the value with the specified key from
// the AdminGroup map field of NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll) GetAdminGroup(GroupName string) *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll_AdminGroup {

	if t == nil {
		return nil
	}

	key := GroupName

	if lm, ok := t.AdminGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteAdminGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll) DeleteAdminGroup(GroupName string) {
	key := GroupName

	delete(t.AdminGroup, key)
}

// AppendAdminGroup appends the supplied NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll_AdminGroup struct to the
// list AdminGroup of NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll_AdminGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll) AppendAdminGroup(v *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll_AdminGroup) error {
	if v.GroupName == nil {
		return fmt.Errorf("invalid nil key received for GroupName")
	}

	key := *v.GroupName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AdminGroup == nil {
		t.AdminGroup = make(map[string]*NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll_AdminGroup)
	}

	if _, ok := t.AdminGroup[key]; ok {
		return fmt.Errorf("duplicate key for list AdminGroup %v", key)
	}

	t.AdminGroup[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.AdminGroup {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll.
func (*NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll_AdminGroup represents the /nokia-conf/configure/groups/group/routing-options/flexible-algorithm-definitions/flex-algo/include-all/admin-group YANG schema element.
type NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll_AdminGroup struct {
	GroupName *string `path:"group-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll_AdminGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll_AdminGroup) IsYANGGoStruct() {
}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll_AdminGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll_AdminGroup) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll_AdminGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll_AdminGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll_AdminGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll_AdminGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupName == nil {
		return nil, fmt.Errorf("nil value for key GroupName")
	}

	return map[string]interface{}{
		"group-name": *t.GroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll_AdminGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll_AdminGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll_AdminGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll_AdminGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll_AdminGroup.
func (*NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAll_AdminGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny represents the /nokia-conf/configure/groups/group/routing-options/flexible-algorithm-definitions/flex-algo/include-any YANG schema element.
type NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny struct {
	AdminGroup map[string]*NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny_AdminGroup `path:"admin-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny) IsYANGGoStruct() {
}

// NewAdminGroup creates a new entry in the AdminGroup list of the
// NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny) NewAdminGroup(GroupName string) (*NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny_AdminGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AdminGroup == nil {
		t.AdminGroup = make(map[string]*NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny_AdminGroup)
	}

	key := GroupName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AdminGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AdminGroup", key)
	}

	t.AdminGroup[key] = &NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny_AdminGroup{
		GroupName: &GroupName,
	}

	return t.AdminGroup[key], nil
}

// RenameAdminGroup renames an entry in the list AdminGroup within
// the NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny) RenameAdminGroup(oldK, newK string) error {
	if _, ok := t.AdminGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in AdminGroup", newK)
	}

	e, ok := t.AdminGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AdminGroup", oldK)
	}
	e.GroupName = &newK

	t.AdminGroup[newK] = e
	delete(t.AdminGroup, oldK)
	return nil
}

// GetOrCreateAdminGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny) GetOrCreateAdminGroup(GroupName string) *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny_AdminGroup {

	key := GroupName

	if v, ok := t.AdminGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAdminGroup(GroupName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAdminGroup got unexpected error: %v", err))
	}
	return v
}

// GetAdminGroup retrieves the value with the specified key from
// the AdminGroup map field of NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny) GetAdminGroup(GroupName string) *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny_AdminGroup {

	if t == nil {
		return nil
	}

	key := GroupName

	if lm, ok := t.AdminGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteAdminGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny) DeleteAdminGroup(GroupName string) {
	key := GroupName

	delete(t.AdminGroup, key)
}

// AppendAdminGroup appends the supplied NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny_AdminGroup struct to the
// list AdminGroup of NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny_AdminGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny) AppendAdminGroup(v *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny_AdminGroup) error {
	if v.GroupName == nil {
		return fmt.Errorf("invalid nil key received for GroupName")
	}

	key := *v.GroupName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AdminGroup == nil {
		t.AdminGroup = make(map[string]*NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny_AdminGroup)
	}

	if _, ok := t.AdminGroup[key]; ok {
		return fmt.Errorf("duplicate key for list AdminGroup %v", key)
	}

	t.AdminGroup[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.AdminGroup {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny.
func (*NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny_AdminGroup represents the /nokia-conf/configure/groups/group/routing-options/flexible-algorithm-definitions/flex-algo/include-any/admin-group YANG schema element.
type NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny_AdminGroup struct {
	GroupName *string `path:"group-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny_AdminGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny_AdminGroup) IsYANGGoStruct() {
}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny_AdminGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny_AdminGroup) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny_AdminGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny_AdminGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny_AdminGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny_AdminGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupName == nil {
		return nil, fmt.Errorf("nil value for key GroupName")
	}

	return map[string]interface{}{
		"group-name": *t.GroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny_AdminGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny_AdminGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny_AdminGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny_AdminGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny_AdminGroup.
func (*NokiaConf_Configure_Groups_Group_RoutingOptions_FlexibleAlgorithmDefinitions_FlexAlgo_IncludeAny_AdminGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute represents the /nokia-conf/configure/groups/group/routing-options/if-attribute YANG schema element.
type NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute struct {
	AdminGroup map[string]*NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute_AdminGroup `path:"admin-group" module:"nokia-conf"`
	SrlgGroup  map[string]*NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute_SrlgGroup  `path:"srlg-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute) IsYANGGoStruct() {}

// NewAdminGroup creates a new entry in the AdminGroup list of the
// NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute) NewAdminGroup(GroupName string) (*NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute_AdminGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AdminGroup == nil {
		t.AdminGroup = make(map[string]*NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute_AdminGroup)
	}

	key := GroupName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AdminGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AdminGroup", key)
	}

	t.AdminGroup[key] = &NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute_AdminGroup{
		GroupName: &GroupName,
	}

	return t.AdminGroup[key], nil
}

// RenameAdminGroup renames an entry in the list AdminGroup within
// the NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute) RenameAdminGroup(oldK, newK string) error {
	if _, ok := t.AdminGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in AdminGroup", newK)
	}

	e, ok := t.AdminGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AdminGroup", oldK)
	}
	e.GroupName = &newK

	t.AdminGroup[newK] = e
	delete(t.AdminGroup, oldK)
	return nil
}

// GetOrCreateAdminGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute) GetOrCreateAdminGroup(GroupName string) *NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute_AdminGroup {

	key := GroupName

	if v, ok := t.AdminGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAdminGroup(GroupName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAdminGroup got unexpected error: %v", err))
	}
	return v
}

// GetAdminGroup retrieves the value with the specified key from
// the AdminGroup map field of NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute) GetAdminGroup(GroupName string) *NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute_AdminGroup {

	if t == nil {
		return nil
	}

	key := GroupName

	if lm, ok := t.AdminGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteAdminGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute) DeleteAdminGroup(GroupName string) {
	key := GroupName

	delete(t.AdminGroup, key)
}

// AppendAdminGroup appends the supplied NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute_AdminGroup struct to the
// list AdminGroup of NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute_AdminGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute) AppendAdminGroup(v *NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute_AdminGroup) error {
	if v.GroupName == nil {
		return fmt.Errorf("invalid nil key received for GroupName")
	}

	key := *v.GroupName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AdminGroup == nil {
		t.AdminGroup = make(map[string]*NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute_AdminGroup)
	}

	if _, ok := t.AdminGroup[key]; ok {
		return fmt.Errorf("duplicate key for list AdminGroup %v", key)
	}

	t.AdminGroup[key] = v
	return nil
}

// NewSrlgGroup creates a new entry in the SrlgGroup list of the
// NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute) NewSrlgGroup(Name string) (*NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute_SrlgGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SrlgGroup == nil {
		t.SrlgGroup = make(map[string]*NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute_SrlgGroup)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SrlgGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SrlgGroup", key)
	}

	t.SrlgGroup[key] = &NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute_SrlgGroup{
		Name: &Name,
	}

	return t.SrlgGroup[key], nil
}

// RenameSrlgGroup renames an entry in the list SrlgGroup within
// the NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute) RenameSrlgGroup(oldK, newK string) error {
	if _, ok := t.SrlgGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in SrlgGroup", newK)
	}

	e, ok := t.SrlgGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SrlgGroup", oldK)
	}
	e.Name = &newK

	t.SrlgGroup[newK] = e
	delete(t.SrlgGroup, oldK)
	return nil
}

// GetOrCreateSrlgGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute) GetOrCreateSrlgGroup(Name string) *NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute_SrlgGroup {

	key := Name

	if v, ok := t.SrlgGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSrlgGroup(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSrlgGroup got unexpected error: %v", err))
	}
	return v
}

// GetSrlgGroup retrieves the value with the specified key from
// the SrlgGroup map field of NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute) GetSrlgGroup(Name string) *NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute_SrlgGroup {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.SrlgGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteSrlgGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute) DeleteSrlgGroup(Name string) {
	key := Name

	delete(t.SrlgGroup, key)
}

// AppendSrlgGroup appends the supplied NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute_SrlgGroup struct to the
// list SrlgGroup of NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute_SrlgGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute) AppendSrlgGroup(v *NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute_SrlgGroup) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SrlgGroup == nil {
		t.SrlgGroup = make(map[string]*NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute_SrlgGroup)
	}

	if _, ok := t.SrlgGroup[key]; ok {
		return fmt.Errorf("duplicate key for list SrlgGroup %v", key)
	}

	t.SrlgGroup[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.AdminGroup {
		e.PopulateDefaults()
	}
	for _, e := range t.SrlgGroup {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute.
func (*NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute_AdminGroup represents the /nokia-conf/configure/groups/group/routing-options/if-attribute/admin-group YANG schema element.
type NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute_AdminGroup struct {
	GroupName *string `path:"group-name" module:"nokia-conf"`
	Value     *uint32 `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute_AdminGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute_AdminGroup) IsYANGGoStruct() {}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute_AdminGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute_AdminGroup) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute_AdminGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute_AdminGroup) GetValue() uint32 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute_AdminGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute_AdminGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute_AdminGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute_AdminGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupName == nil {
		return nil, fmt.Errorf("nil value for key GroupName")
	}

	return map[string]interface{}{
		"group-name": *t.GroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute_AdminGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute_AdminGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute_AdminGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute_AdminGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute_AdminGroup.
func (*NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute_AdminGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute_SrlgGroup represents the /nokia-conf/configure/groups/group/routing-options/if-attribute/srlg-group YANG schema element.
type NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute_SrlgGroup struct {
	Name          *string `path:"name" module:"nokia-conf"`
	PenaltyWeight *uint32 `path:"penalty-weight" module:"nokia-conf"`
	Value         *int64  `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute_SrlgGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute_SrlgGroup) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute_SrlgGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute_SrlgGroup) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPenaltyWeight retrieves the value of the leaf PenaltyWeight from the NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute_SrlgGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PenaltyWeight is set, it can
// safely use t.GetPenaltyWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PenaltyWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute_SrlgGroup) GetPenaltyWeight() uint32 {
	if t == nil || t.PenaltyWeight == nil {
		return 0
	}
	return *t.PenaltyWeight
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute_SrlgGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute_SrlgGroup) GetValue() int64 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute_SrlgGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute_SrlgGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PenaltyWeight == nil {
		var v uint32 = 0
		t.PenaltyWeight = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute_SrlgGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute_SrlgGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute_SrlgGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute_SrlgGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute_SrlgGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute_SrlgGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute_SrlgGroup.
func (*NokiaConf_Configure_Groups_Group_RoutingOptions_IfAttribute_SrlgGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting represents the /nokia-conf/configure/groups/group/routing-options/policy-accounting YANG schema element.
type NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting struct {
	PolicyAcctTemplate map[string]*NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate `path:"policy-acct-template" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting) IsYANGGoStruct() {}

// NewPolicyAcctTemplate creates a new entry in the PolicyAcctTemplate list of the
// NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting) NewPolicyAcctTemplate(Name string) (*NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PolicyAcctTemplate == nil {
		t.PolicyAcctTemplate = make(map[string]*NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PolicyAcctTemplate[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PolicyAcctTemplate", key)
	}

	t.PolicyAcctTemplate[key] = &NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate{
		Name: &Name,
	}

	return t.PolicyAcctTemplate[key], nil
}

// RenamePolicyAcctTemplate renames an entry in the list PolicyAcctTemplate within
// the NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting) RenamePolicyAcctTemplate(oldK, newK string) error {
	if _, ok := t.PolicyAcctTemplate[newK]; ok {
		return fmt.Errorf("key %v already exists in PolicyAcctTemplate", newK)
	}

	e, ok := t.PolicyAcctTemplate[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PolicyAcctTemplate", oldK)
	}
	e.Name = &newK

	t.PolicyAcctTemplate[newK] = e
	delete(t.PolicyAcctTemplate, oldK)
	return nil
}

// GetOrCreatePolicyAcctTemplate retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting) GetOrCreatePolicyAcctTemplate(Name string) *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate {

	key := Name

	if v, ok := t.PolicyAcctTemplate[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicyAcctTemplate(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicyAcctTemplate got unexpected error: %v", err))
	}
	return v
}

// GetPolicyAcctTemplate retrieves the value with the specified key from
// the PolicyAcctTemplate map field of NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting) GetPolicyAcctTemplate(Name string) *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.PolicyAcctTemplate[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicyAcctTemplate deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting) DeletePolicyAcctTemplate(Name string) {
	key := Name

	delete(t.PolicyAcctTemplate, key)
}

// AppendPolicyAcctTemplate appends the supplied NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate struct to the
// list PolicyAcctTemplate of NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting) AppendPolicyAcctTemplate(v *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PolicyAcctTemplate == nil {
		t.PolicyAcctTemplate = make(map[string]*NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate)
	}

	if _, ok := t.PolicyAcctTemplate[key]; ok {
		return fmt.Errorf("duplicate key for list PolicyAcctTemplate %v", key)
	}

	t.PolicyAcctTemplate[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.PolicyAcctTemplate {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting.
func (*NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate represents the /nokia-conf/configure/groups/group/routing-options/policy-accounting/policy-acct-template YANG schema element.
type NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate struct {
	DestClass        map[NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestClass_Index_Union]*NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestClass               `path:"dest-class" module:"nokia-conf"`
	DestinationClass map[NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestinationClass_Index_Union]*NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestinationClass `path:"destination-class" module:"nokia-conf"`
	Name             *string                                                                                                                                                                                                                    `path:"name" module:"nokia-conf"`
	Policer          map[NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer_PolicerId_Union]*NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer               `path:"policer" module:"nokia-conf"`
	SourceClass      map[NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_SourceClass_Index_Union]*NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_SourceClass           `path:"source-class" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate) IsYANGGoStruct() {
}

// NewDestClass creates a new entry in the DestClass list of the
// NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate) NewDestClass(Index NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestClass_Index_Union) (*NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestClass, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DestClass == nil {
		t.DestClass = make(map[NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestClass_Index_Union]*NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestClass)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DestClass[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DestClass", key)
	}

	t.DestClass[key] = &NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestClass{
		Index: Index,
	}

	return t.DestClass[key], nil
}

// RenameDestClass renames an entry in the list DestClass within
// the NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate) RenameDestClass(oldK, newK NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestClass_Index_Union) error {
	if _, ok := t.DestClass[newK]; ok {
		return fmt.Errorf("key %v already exists in DestClass", newK)
	}

	e, ok := t.DestClass[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in DestClass", oldK)
	}
	e.Index = newK

	t.DestClass[newK] = e
	delete(t.DestClass, oldK)
	return nil
}

// GetOrCreateDestClass retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate) GetOrCreateDestClass(Index NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestClass_Index_Union) *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestClass {

	key := Index

	if v, ok := t.DestClass[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDestClass(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDestClass got unexpected error: %v", err))
	}
	return v
}

// GetDestClass retrieves the value with the specified key from
// the DestClass map field of NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate) GetDestClass(Index NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestClass_Index_Union) *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestClass {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.DestClass[key]; ok {
		return lm
	}
	return nil
}

// DeleteDestClass deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate) DeleteDestClass(Index NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestClass_Index_Union) {
	key := Index

	delete(t.DestClass, key)
}

// AppendDestClass appends the supplied NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestClass struct to the
// list DestClass of NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestClass already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate) AppendDestClass(v *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestClass) error {
	key := v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DestClass == nil {
		t.DestClass = make(map[NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestClass_Index_Union]*NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestClass)
	}

	if _, ok := t.DestClass[key]; ok {
		return fmt.Errorf("duplicate key for list DestClass %v", key)
	}

	t.DestClass[key] = v
	return nil
}

// NewDestinationClass creates a new entry in the DestinationClass list of the
// NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate) NewDestinationClass(Index NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestinationClass_Index_Union) (*NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestinationClass, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DestinationClass == nil {
		t.DestinationClass = make(map[NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestinationClass_Index_Union]*NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestinationClass)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DestinationClass[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DestinationClass", key)
	}

	t.DestinationClass[key] = &NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestinationClass{
		Index: Index,
	}

	return t.DestinationClass[key], nil
}

// RenameDestinationClass renames an entry in the list DestinationClass within
// the NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate) RenameDestinationClass(oldK, newK NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestinationClass_Index_Union) error {
	if _, ok := t.DestinationClass[newK]; ok {
		return fmt.Errorf("key %v already exists in DestinationClass", newK)
	}

	e, ok := t.DestinationClass[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in DestinationClass", oldK)
	}
	e.Index = newK

	t.DestinationClass[newK] = e
	delete(t.DestinationClass, oldK)
	return nil
}

// GetOrCreateDestinationClass retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate) GetOrCreateDestinationClass(Index NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestinationClass_Index_Union) *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestinationClass {

	key := Index

	if v, ok := t.DestinationClass[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDestinationClass(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDestinationClass got unexpected error: %v", err))
	}
	return v
}

// GetDestinationClass retrieves the value with the specified key from
// the DestinationClass map field of NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate) GetDestinationClass(Index NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestinationClass_Index_Union) *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestinationClass {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.DestinationClass[key]; ok {
		return lm
	}
	return nil
}

// DeleteDestinationClass deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate) DeleteDestinationClass(Index NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestinationClass_Index_Union) {
	key := Index

	delete(t.DestinationClass, key)
}

// AppendDestinationClass appends the supplied NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestinationClass struct to the
// list DestinationClass of NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestinationClass already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate) AppendDestinationClass(v *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestinationClass) error {
	key := v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DestinationClass == nil {
		t.DestinationClass = make(map[NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestinationClass_Index_Union]*NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestinationClass)
	}

	if _, ok := t.DestinationClass[key]; ok {
		return fmt.Errorf("duplicate key for list DestinationClass %v", key)
	}

	t.DestinationClass[key] = v
	return nil
}

// NewPolicer creates a new entry in the Policer list of the
// NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate) NewPolicer(PolicerId NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer_PolicerId_Union) (*NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer_PolicerId_Union]*NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer)
	}

	key := PolicerId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Policer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Policer", key)
	}

	t.Policer[key] = &NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer{
		PolicerId: PolicerId,
	}

	return t.Policer[key], nil
}

// RenamePolicer renames an entry in the list Policer within
// the NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate) RenamePolicer(oldK, newK NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer_PolicerId_Union) error {
	if _, ok := t.Policer[newK]; ok {
		return fmt.Errorf("key %v already exists in Policer", newK)
	}

	e, ok := t.Policer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Policer", oldK)
	}
	e.PolicerId = newK

	t.Policer[newK] = e
	delete(t.Policer, oldK)
	return nil
}

// GetOrCreatePolicer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate) GetOrCreatePolicer(PolicerId NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer_PolicerId_Union) *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer {

	key := PolicerId

	if v, ok := t.Policer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicer(PolicerId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicer got unexpected error: %v", err))
	}
	return v
}

// GetPolicer retrieves the value with the specified key from
// the Policer map field of NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate) GetPolicer(PolicerId NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer_PolicerId_Union) *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer {

	if t == nil {
		return nil
	}

	key := PolicerId

	if lm, ok := t.Policer[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate) DeletePolicer(PolicerId NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer_PolicerId_Union) {
	key := PolicerId

	delete(t.Policer, key)
}

// AppendPolicer appends the supplied NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer struct to the
// list Policer of NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate) AppendPolicer(v *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer) error {
	key := v.PolicerId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer_PolicerId_Union]*NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer)
	}

	if _, ok := t.Policer[key]; ok {
		return fmt.Errorf("duplicate key for list Policer %v", key)
	}

	t.Policer[key] = v
	return nil
}

// NewSourceClass creates a new entry in the SourceClass list of the
// NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate) NewSourceClass(Index NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_SourceClass_Index_Union) (*NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_SourceClass, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SourceClass == nil {
		t.SourceClass = make(map[NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_SourceClass_Index_Union]*NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_SourceClass)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SourceClass[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SourceClass", key)
	}

	t.SourceClass[key] = &NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_SourceClass{
		Index: Index,
	}

	return t.SourceClass[key], nil
}

// RenameSourceClass renames an entry in the list SourceClass within
// the NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate) RenameSourceClass(oldK, newK NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_SourceClass_Index_Union) error {
	if _, ok := t.SourceClass[newK]; ok {
		return fmt.Errorf("key %v already exists in SourceClass", newK)
	}

	e, ok := t.SourceClass[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SourceClass", oldK)
	}
	e.Index = newK

	t.SourceClass[newK] = e
	delete(t.SourceClass, oldK)
	return nil
}

// GetOrCreateSourceClass retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate) GetOrCreateSourceClass(Index NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_SourceClass_Index_Union) *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_SourceClass {

	key := Index

	if v, ok := t.SourceClass[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSourceClass(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSourceClass got unexpected error: %v", err))
	}
	return v
}

// GetSourceClass retrieves the value with the specified key from
// the SourceClass map field of NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate) GetSourceClass(Index NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_SourceClass_Index_Union) *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_SourceClass {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.SourceClass[key]; ok {
		return lm
	}
	return nil
}

// DeleteSourceClass deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate) DeleteSourceClass(Index NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_SourceClass_Index_Union) {
	key := Index

	delete(t.SourceClass, key)
}

// AppendSourceClass appends the supplied NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_SourceClass struct to the
// list SourceClass of NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_SourceClass already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate) AppendSourceClass(v *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_SourceClass) error {
	key := v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SourceClass == nil {
		t.SourceClass = make(map[NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_SourceClass_Index_Union]*NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_SourceClass)
	}

	if _, ok := t.SourceClass[key]; ok {
		return fmt.Errorf("duplicate key for list SourceClass %v", key)
	}

	t.SourceClass[key] = v
	return nil
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.DestClass {
		e.PopulateDefaults()
	}
	for _, e := range t.DestinationClass {
		e.PopulateDefaults()
	}
	for _, e := range t.Policer {
		e.PopulateDefaults()
	}
	for _, e := range t.SourceClass {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate.
func (*NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestClass represents the /nokia-conf/configure/groups/group/routing-options/policy-accounting/policy-acct-template/dest-class YANG schema element.
type NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestClass struct {
	Index   NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestClass_Index_Union `path:"index" module:"nokia-conf"`
	Policer *uint32                                                                                                   `path:"policer" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestClass implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestClass) IsYANGGoStruct() {
}

// GetIndex retrieves the value of the leaf Index from the NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestClass) GetIndex() NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestClass_Index_Union {
	if t == nil || t.Index == nil {
		return nil
	}
	return t.Index
}

// GetPolicer retrieves the value of the leaf Policer from the NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policer is set, it can
// safely use t.GetPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestClass) GetPolicer() uint32 {
	if t == nil || t.Policer == nil {
		return 0
	}
	return *t.Policer
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestClass
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestClass) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestClass struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestClass) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"index": t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestClass) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestClass"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestClass) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestClass) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestClass.
func (*NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestClass) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestinationClass represents the /nokia-conf/configure/groups/group/routing-options/policy-accounting/policy-acct-template/destination-class YANG schema element.
type NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestinationClass struct {
	Index   NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestinationClass_Index_Union `path:"index" module:"nokia-conf"`
	Policer *uint32                                                                                                          `path:"policer" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestinationClass implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestinationClass) IsYANGGoStruct() {
}

// GetIndex retrieves the value of the leaf Index from the NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestinationClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestinationClass) GetIndex() NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestinationClass_Index_Union {
	if t == nil || t.Index == nil {
		return nil
	}
	return t.Index
}

// GetPolicer retrieves the value of the leaf Policer from the NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestinationClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policer is set, it can
// safely use t.GetPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestinationClass) GetPolicer() uint32 {
	if t == nil || t.Policer == nil {
		return 0
	}
	return *t.Policer
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestinationClass
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestinationClass) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestinationClass struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestinationClass) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"index": t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestinationClass) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestinationClass"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestinationClass) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestinationClass) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestinationClass.
func (*NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_DestinationClass) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer represents the /nokia-conf/configure/groups/group/routing-options/policy-accounting/policy-acct-template/policer YANG schema element.
type NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer struct {
	MaxBurstSize NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer_MaxBurstSize_Union `path:"max-burst-size" module:"nokia-conf"`
	PeakRate     NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer_PeakRate_Union     `path:"peak-rate" module:"nokia-conf"`
	PolicerId    NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer_PolicerId_Union    `path:"policer-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer) IsYANGGoStruct() {
}

// GetMaxBurstSize retrieves the value of the leaf MaxBurstSize from the NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxBurstSize is set, it can
// safely use t.GetMaxBurstSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxBurstSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer) GetMaxBurstSize() NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer_MaxBurstSize_Union {
	if t == nil || t.MaxBurstSize == nil {
		return NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer_MaxBurstSize_Enum_auto
	}
	return t.MaxBurstSize
}

// GetPeakRate retrieves the value of the leaf PeakRate from the NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeakRate is set, it can
// safely use t.GetPeakRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeakRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer) GetPeakRate() NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer_PeakRate_Union {
	if t == nil || t.PeakRate == nil {
		return NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer_PeakRate_Enum_max
	}
	return t.PeakRate
}

// GetPolicerId retrieves the value of the leaf PolicerId from the NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerId is set, it can
// safely use t.GetPolicerId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer) GetPolicerId() NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer_PolicerId_Union {
	if t == nil || t.PolicerId == nil {
		return nil
	}
	return t.PolicerId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxBurstSize == nil {
		t.MaxBurstSize = NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer_MaxBurstSize_Enum_auto
	}
	if t.PeakRate == nil {
		t.PeakRate = NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer_PeakRate_Enum_max
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"policer-id": t.PolicerId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer.
func (*NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_Policer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_SourceClass represents the /nokia-conf/configure/groups/group/routing-options/policy-accounting/policy-acct-template/source-class YANG schema element.
type NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_SourceClass struct {
	Index NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_SourceClass_Index_Union `path:"index" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_SourceClass implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_SourceClass) IsYANGGoStruct() {
}

// GetIndex retrieves the value of the leaf Index from the NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_SourceClass
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_SourceClass) GetIndex() NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_SourceClass_Index_Union {
	if t == nil || t.Index == nil {
		return nil
	}
	return t.Index
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_SourceClass
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_SourceClass) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_SourceClass struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_SourceClass) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"index": t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_SourceClass) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_SourceClass"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_SourceClass) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_SourceClass) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_SourceClass.
func (*NokiaConf_Configure_Groups_Group_RoutingOptions_PolicyAccounting_PolicyAcctTemplate_SourceClass) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy represents the /nokia-conf/configure/groups/group/routing-options/route-next-hop-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy struct {
	Template map[string]*NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template `path:"template" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy) IsYANGGoStruct() {}

// NewTemplate creates a new entry in the Template list of the
// NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy) NewTemplate(TemplateName string) (*NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Template == nil {
		t.Template = make(map[string]*NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template)
	}

	key := TemplateName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Template[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Template", key)
	}

	t.Template[key] = &NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template{
		TemplateName: &TemplateName,
	}

	return t.Template[key], nil
}

// RenameTemplate renames an entry in the list Template within
// the NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy) RenameTemplate(oldK, newK string) error {
	if _, ok := t.Template[newK]; ok {
		return fmt.Errorf("key %v already exists in Template", newK)
	}

	e, ok := t.Template[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Template", oldK)
	}
	e.TemplateName = &newK

	t.Template[newK] = e
	delete(t.Template, oldK)
	return nil
}

// GetOrCreateTemplate retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy) GetOrCreateTemplate(TemplateName string) *NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template {

	key := TemplateName

	if v, ok := t.Template[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTemplate(TemplateName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTemplate got unexpected error: %v", err))
	}
	return v
}

// GetTemplate retrieves the value with the specified key from
// the Template map field of NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy) GetTemplate(TemplateName string) *NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template {

	if t == nil {
		return nil
	}

	key := TemplateName

	if lm, ok := t.Template[key]; ok {
		return lm
	}
	return nil
}

// DeleteTemplate deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy) DeleteTemplate(TemplateName string) {
	key := TemplateName

	delete(t.Template, key)
}

// AppendTemplate appends the supplied NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template struct to the
// list Template of NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy) AppendTemplate(v *NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template) error {
	if v.TemplateName == nil {
		return fmt.Errorf("invalid nil key received for TemplateName")
	}

	key := *v.TemplateName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Template == nil {
		t.Template = make(map[string]*NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template)
	}

	if _, ok := t.Template[key]; ok {
		return fmt.Errorf("duplicate key for list Template %v", key)
	}

	t.Template[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Template {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy.
func (*NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template represents the /nokia-conf/configure/groups/group/routing-options/route-next-hop-policy/template YANG schema element.
type NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template struct {
	Description    *string                                                                                              `path:"description" module:"nokia-conf"`
	ExcludeGroup   map[string]*NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template_ExcludeGroup `path:"exclude-group" module:"nokia-conf"`
	IncludeGroup   map[string]*NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template_IncludeGroup `path:"include-group" module:"nokia-conf"`
	NhType         E_NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template_NhType                 `path:"nh-type" module:"nokia-conf"`
	ProtectionType E_NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template_ProtectionType         `path:"protection-type" module:"nokia-conf"`
	Srlg           *bool                                                                                                `path:"srlg" module:"nokia-conf"`
	TemplateName   *string                                                                                              `path:"template-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template) IsYANGGoStruct() {
}

// NewExcludeGroup creates a new entry in the ExcludeGroup list of the
// NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template) NewExcludeGroup(GroupName string) (*NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template_ExcludeGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ExcludeGroup == nil {
		t.ExcludeGroup = make(map[string]*NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template_ExcludeGroup)
	}

	key := GroupName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ExcludeGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ExcludeGroup", key)
	}

	t.ExcludeGroup[key] = &NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template_ExcludeGroup{
		GroupName: &GroupName,
	}

	return t.ExcludeGroup[key], nil
}

// RenameExcludeGroup renames an entry in the list ExcludeGroup within
// the NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template) RenameExcludeGroup(oldK, newK string) error {
	if _, ok := t.ExcludeGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in ExcludeGroup", newK)
	}

	e, ok := t.ExcludeGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ExcludeGroup", oldK)
	}
	e.GroupName = &newK

	t.ExcludeGroup[newK] = e
	delete(t.ExcludeGroup, oldK)
	return nil
}

// GetOrCreateExcludeGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template) GetOrCreateExcludeGroup(GroupName string) *NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template_ExcludeGroup {

	key := GroupName

	if v, ok := t.ExcludeGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewExcludeGroup(GroupName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateExcludeGroup got unexpected error: %v", err))
	}
	return v
}

// GetExcludeGroup retrieves the value with the specified key from
// the ExcludeGroup map field of NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template) GetExcludeGroup(GroupName string) *NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template_ExcludeGroup {

	if t == nil {
		return nil
	}

	key := GroupName

	if lm, ok := t.ExcludeGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteExcludeGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template) DeleteExcludeGroup(GroupName string) {
	key := GroupName

	delete(t.ExcludeGroup, key)
}

// AppendExcludeGroup appends the supplied NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template_ExcludeGroup struct to the
// list ExcludeGroup of NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template_ExcludeGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template) AppendExcludeGroup(v *NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template_ExcludeGroup) error {
	if v.GroupName == nil {
		return fmt.Errorf("invalid nil key received for GroupName")
	}

	key := *v.GroupName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ExcludeGroup == nil {
		t.ExcludeGroup = make(map[string]*NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template_ExcludeGroup)
	}

	if _, ok := t.ExcludeGroup[key]; ok {
		return fmt.Errorf("duplicate key for list ExcludeGroup %v", key)
	}

	t.ExcludeGroup[key] = v
	return nil
}

// NewIncludeGroup creates a new entry in the IncludeGroup list of the
// NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template) NewIncludeGroup(GroupName string) (*NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template_IncludeGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IncludeGroup == nil {
		t.IncludeGroup = make(map[string]*NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template_IncludeGroup)
	}

	key := GroupName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.IncludeGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list IncludeGroup", key)
	}

	t.IncludeGroup[key] = &NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template_IncludeGroup{
		GroupName: &GroupName,
	}

	return t.IncludeGroup[key], nil
}

// RenameIncludeGroup renames an entry in the list IncludeGroup within
// the NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template) RenameIncludeGroup(oldK, newK string) error {
	if _, ok := t.IncludeGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in IncludeGroup", newK)
	}

	e, ok := t.IncludeGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in IncludeGroup", oldK)
	}
	e.GroupName = &newK

	t.IncludeGroup[newK] = e
	delete(t.IncludeGroup, oldK)
	return nil
}

// GetOrCreateIncludeGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template) GetOrCreateIncludeGroup(GroupName string) *NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template_IncludeGroup {

	key := GroupName

	if v, ok := t.IncludeGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIncludeGroup(GroupName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIncludeGroup got unexpected error: %v", err))
	}
	return v
}

// GetIncludeGroup retrieves the value with the specified key from
// the IncludeGroup map field of NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template) GetIncludeGroup(GroupName string) *NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template_IncludeGroup {

	if t == nil {
		return nil
	}

	key := GroupName

	if lm, ok := t.IncludeGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteIncludeGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template) DeleteIncludeGroup(GroupName string) {
	key := GroupName

	delete(t.IncludeGroup, key)
}

// AppendIncludeGroup appends the supplied NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template_IncludeGroup struct to the
// list IncludeGroup of NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template_IncludeGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template) AppendIncludeGroup(v *NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template_IncludeGroup) error {
	if v.GroupName == nil {
		return fmt.Errorf("invalid nil key received for GroupName")
	}

	key := *v.GroupName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IncludeGroup == nil {
		t.IncludeGroup = make(map[string]*NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template_IncludeGroup)
	}

	if _, ok := t.IncludeGroup[key]; ok {
		return fmt.Errorf("duplicate key for list IncludeGroup %v", key)
	}

	t.IncludeGroup[key] = v
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetNhType retrieves the value of the leaf NhType from the NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NhType is set, it can
// safely use t.GetNhType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NhType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template) GetNhType() E_NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template_NhType {
	if t == nil || t.NhType == 0 {
		return NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template_NhType_ip
	}
	return t.NhType
}

// GetProtectionType retrieves the value of the leaf ProtectionType from the NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProtectionType is set, it can
// safely use t.GetProtectionType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProtectionType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template) GetProtectionType() E_NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template_ProtectionType {
	if t == nil || t.ProtectionType == 0 {
		return NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template_ProtectionType_node
	}
	return t.ProtectionType
}

// GetSrlg retrieves the value of the leaf Srlg from the NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Srlg is set, it can
// safely use t.GetSrlg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Srlg == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template) GetSrlg() bool {
	if t == nil || t.Srlg == nil {
		return false
	}
	return *t.Srlg
}

// GetTemplateName retrieves the value of the leaf TemplateName from the NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TemplateName is set, it can
// safely use t.GetTemplateName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TemplateName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template) GetTemplateName() string {
	if t == nil || t.TemplateName == nil {
		return ""
	}
	return *t.TemplateName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.NhType == 0 {
		t.NhType = NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template_NhType_ip
	}
	if t.ProtectionType == 0 {
		t.ProtectionType = NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template_ProtectionType_node
	}
	if t.Srlg == nil {
		var v bool = false
		t.Srlg = &v
	}
	for _, e := range t.ExcludeGroup {
		e.PopulateDefaults()
	}
	for _, e := range t.IncludeGroup {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template) ΛListKeyMap() (map[string]interface{}, error) {
	if t.TemplateName == nil {
		return nil, fmt.Errorf("nil value for key TemplateName")
	}

	return map[string]interface{}{
		"template-name": *t.TemplateName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template.
func (*NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template_ExcludeGroup represents the /nokia-conf/configure/groups/group/routing-options/route-next-hop-policy/template/exclude-group YANG schema element.
type NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template_ExcludeGroup struct {
	GroupName *string `path:"group-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template_ExcludeGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template_ExcludeGroup) IsYANGGoStruct() {
}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template_ExcludeGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template_ExcludeGroup) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template_ExcludeGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template_ExcludeGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template_ExcludeGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template_ExcludeGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupName == nil {
		return nil, fmt.Errorf("nil value for key GroupName")
	}

	return map[string]interface{}{
		"group-name": *t.GroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template_ExcludeGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template_ExcludeGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template_ExcludeGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template_ExcludeGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template_ExcludeGroup.
func (*NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template_ExcludeGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template_IncludeGroup represents the /nokia-conf/configure/groups/group/routing-options/route-next-hop-policy/template/include-group YANG schema element.
type NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template_IncludeGroup struct {
	GroupName  *string `path:"group-name" module:"nokia-conf"`
	Preference *int32  `path:"preference" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template_IncludeGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template_IncludeGroup) IsYANGGoStruct() {
}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template_IncludeGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template_IncludeGroup) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template_IncludeGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template_IncludeGroup) GetPreference() int32 {
	if t == nil || t.Preference == nil {
		return 255
	}
	return *t.Preference
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template_IncludeGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template_IncludeGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Preference == nil {
		var v int32 = 255
		t.Preference = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template_IncludeGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template_IncludeGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.GroupName == nil {
		return nil, fmt.Errorf("nil value for key GroupName")
	}

	return map[string]interface{}{
		"group-name": *t.GroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template_IncludeGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template_IncludeGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template_IncludeGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template_IncludeGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template_IncludeGroup.
func (*NokiaConf_Configure_Groups_Group_RoutingOptions_RouteNextHopPolicy_Template_IncludeGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Saa represents the /nokia-conf/configure/groups/group/saa YANG schema element.
type NokiaConf_Configure_Groups_Group_Saa struct {
	Owner map[NokiaConf_Configure_Groups_Group_Saa_Owner_Key]*NokiaConf_Configure_Groups_Group_Saa_Owner `path:"owner" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Saa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Saa) IsYANGGoStruct() {}

// NokiaConf_Configure_Groups_Group_Saa_Owner_Key represents the key for list Owner of element /nokia-conf/configure/groups/group/saa.
type NokiaConf_Configure_Groups_Group_Saa_Owner_Key struct {
	OwnerName string `path:"owner-name"`
	Test      string `path:"test"`
}

// NewOwner creates a new entry in the Owner list of the
// NokiaConf_Configure_Groups_Group_Saa struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Saa) NewOwner(OwnerName string, Test string) (*NokiaConf_Configure_Groups_Group_Saa_Owner, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Owner == nil {
		t.Owner = make(map[NokiaConf_Configure_Groups_Group_Saa_Owner_Key]*NokiaConf_Configure_Groups_Group_Saa_Owner)
	}

	key := NokiaConf_Configure_Groups_Group_Saa_Owner_Key{
		OwnerName: OwnerName,
		Test:      Test,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Owner[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Owner", key)
	}

	t.Owner[key] = &NokiaConf_Configure_Groups_Group_Saa_Owner{
		OwnerName: &OwnerName,
		Test:      &Test,
	}

	return t.Owner[key], nil
}

// RenameOwner renames an entry in the list Owner within
// the NokiaConf_Configure_Groups_Group_Saa struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Saa) RenameOwner(oldK, newK NokiaConf_Configure_Groups_Group_Saa_Owner_Key) error {
	if _, ok := t.Owner[newK]; ok {
		return fmt.Errorf("key %v already exists in Owner", newK)
	}

	e, ok := t.Owner[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Owner", oldK)
	}
	e.OwnerName = &newK.OwnerName
	e.Test = &newK.Test

	t.Owner[newK] = e
	delete(t.Owner, oldK)
	return nil
}

// GetOrCreateOwner retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Saa. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Saa) GetOrCreateOwner(OwnerName string, Test string) *NokiaConf_Configure_Groups_Group_Saa_Owner {

	key := NokiaConf_Configure_Groups_Group_Saa_Owner_Key{
		OwnerName: OwnerName,
		Test:      Test,
	}

	if v, ok := t.Owner[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewOwner(OwnerName, Test)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateOwner got unexpected error: %v", err))
	}
	return v
}

// GetOwner retrieves the value with the specified key from
// the Owner map field of NokiaConf_Configure_Groups_Group_Saa. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Saa) GetOwner(OwnerName string, Test string) *NokiaConf_Configure_Groups_Group_Saa_Owner {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Saa_Owner_Key{
		OwnerName: OwnerName,
		Test:      Test,
	}

	if lm, ok := t.Owner[key]; ok {
		return lm
	}
	return nil
}

// DeleteOwner deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Saa. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Saa) DeleteOwner(OwnerName string, Test string) {
	key := NokiaConf_Configure_Groups_Group_Saa_Owner_Key{
		OwnerName: OwnerName,
		Test:      Test,
	}

	delete(t.Owner, key)
}

// AppendOwner appends the supplied NokiaConf_Configure_Groups_Group_Saa_Owner struct to the
// list Owner of NokiaConf_Configure_Groups_Group_Saa. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Saa_Owner already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Saa) AppendOwner(v *NokiaConf_Configure_Groups_Group_Saa_Owner) error {
	if v.OwnerName == nil {
		return fmt.Errorf("invalid nil key for OwnerName")
	}

	if v.Test == nil {
		return fmt.Errorf("invalid nil key for Test")
	}

	key := NokiaConf_Configure_Groups_Group_Saa_Owner_Key{
		OwnerName: *v.OwnerName,
		Test:      *v.Test,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Owner == nil {
		t.Owner = make(map[NokiaConf_Configure_Groups_Group_Saa_Owner_Key]*NokiaConf_Configure_Groups_Group_Saa_Owner)
	}

	if _, ok := t.Owner[key]; ok {
		return fmt.Errorf("duplicate key for list Owner %v", key)
	}

	t.Owner[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Saa
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Saa) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Owner {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Saa) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Saa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Saa) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Saa) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Saa.
func (*NokiaConf_Configure_Groups_Group_Saa) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Saa_Owner represents the /nokia-conf/configure/groups/group/saa/owner YANG schema element.
type NokiaConf_Configure_Groups_Group_Saa_Owner struct {
	AccountingPolicy *uint32                                                                                                                  `path:"accounting-policy" module:"nokia-conf"`
	AdminState       E_NokiaTypesSros_AdminState                                                                                              `path:"admin-state" module:"nokia-conf"`
	Continuous       *bool                                                                                                                    `path:"continuous" module:"nokia-conf"`
	Description      *string                                                                                                                  `path:"description" module:"nokia-conf"`
	JitterEvent      map[NokiaConf_Configure_Groups_Group_Saa_Owner_JitterEvent_Key]*NokiaConf_Configure_Groups_Group_Saa_Owner_JitterEvent   `path:"jitter-event" module:"nokia-conf"`
	LatencyEvent     map[NokiaConf_Configure_Groups_Group_Saa_Owner_LatencyEvent_Key]*NokiaConf_Configure_Groups_Group_Saa_Owner_LatencyEvent `path:"latency-event" module:"nokia-conf"`
	LossEvent        map[NokiaConf_Configure_Groups_Group_Saa_Owner_LossEvent_Key]*NokiaConf_Configure_Groups_Group_Saa_Owner_LossEvent       `path:"loss-event" module:"nokia-conf"`
	OwnerName        *string                                                                                                                  `path:"owner-name" module:"nokia-conf"`
	ProbeHistory     E_NokiaConf_Configure_Groups_Group_Saa_Owner_ProbeHistory                                                                `path:"probe-history" module:"nokia-conf"`
	Test             *string                                                                                                                  `path:"test" module:"nokia-conf"`
	Type             *NokiaConf_Configure_Groups_Group_Saa_Owner_Type                                                                         `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Saa_Owner implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Saa_Owner) IsYANGGoStruct() {}

// NokiaConf_Configure_Groups_Group_Saa_Owner_JitterEvent_Key represents the key for list JitterEvent of element /nokia-conf/configure/groups/group/saa/owner.
type NokiaConf_Configure_Groups_Group_Saa_Owner_JitterEvent_Key struct {
	Direction     NokiaConf_Configure_Groups_Group_Saa_Owner_JitterEvent_Direction_Union     `path:"direction"`
	ThresholdType NokiaConf_Configure_Groups_Group_Saa_Owner_JitterEvent_ThresholdType_Union `path:"threshold-type"`
}

// NokiaConf_Configure_Groups_Group_Saa_Owner_LatencyEvent_Key represents the key for list LatencyEvent of element /nokia-conf/configure/groups/group/saa/owner.
type NokiaConf_Configure_Groups_Group_Saa_Owner_LatencyEvent_Key struct {
	Direction     NokiaConf_Configure_Groups_Group_Saa_Owner_LatencyEvent_Direction_Union     `path:"direction"`
	ThresholdType NokiaConf_Configure_Groups_Group_Saa_Owner_LatencyEvent_ThresholdType_Union `path:"threshold-type"`
}

// NokiaConf_Configure_Groups_Group_Saa_Owner_LossEvent_Key represents the key for list LossEvent of element /nokia-conf/configure/groups/group/saa/owner.
type NokiaConf_Configure_Groups_Group_Saa_Owner_LossEvent_Key struct {
	Direction     NokiaConf_Configure_Groups_Group_Saa_Owner_LossEvent_Direction_Union     `path:"direction"`
	ThresholdType NokiaConf_Configure_Groups_Group_Saa_Owner_LossEvent_ThresholdType_Union `path:"threshold-type"`
}

// NewJitterEvent creates a new entry in the JitterEvent list of the
// NokiaConf_Configure_Groups_Group_Saa_Owner struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner) NewJitterEvent(Direction NokiaConf_Configure_Groups_Group_Saa_Owner_JitterEvent_Direction_Union, ThresholdType NokiaConf_Configure_Groups_Group_Saa_Owner_JitterEvent_ThresholdType_Union) (*NokiaConf_Configure_Groups_Group_Saa_Owner_JitterEvent, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.JitterEvent == nil {
		t.JitterEvent = make(map[NokiaConf_Configure_Groups_Group_Saa_Owner_JitterEvent_Key]*NokiaConf_Configure_Groups_Group_Saa_Owner_JitterEvent)
	}

	key := NokiaConf_Configure_Groups_Group_Saa_Owner_JitterEvent_Key{
		Direction:     Direction,
		ThresholdType: ThresholdType,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.JitterEvent[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list JitterEvent", key)
	}

	t.JitterEvent[key] = &NokiaConf_Configure_Groups_Group_Saa_Owner_JitterEvent{
		Direction:     Direction,
		ThresholdType: ThresholdType,
	}

	return t.JitterEvent[key], nil
}

// RenameJitterEvent renames an entry in the list JitterEvent within
// the NokiaConf_Configure_Groups_Group_Saa_Owner struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner) RenameJitterEvent(oldK, newK NokiaConf_Configure_Groups_Group_Saa_Owner_JitterEvent_Key) error {
	if _, ok := t.JitterEvent[newK]; ok {
		return fmt.Errorf("key %v already exists in JitterEvent", newK)
	}

	e, ok := t.JitterEvent[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in JitterEvent", oldK)
	}
	e.Direction = newK.Direction
	e.ThresholdType = newK.ThresholdType

	t.JitterEvent[newK] = e
	delete(t.JitterEvent, oldK)
	return nil
}

// GetOrCreateJitterEvent retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Saa_Owner. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner) GetOrCreateJitterEvent(Direction NokiaConf_Configure_Groups_Group_Saa_Owner_JitterEvent_Direction_Union, ThresholdType NokiaConf_Configure_Groups_Group_Saa_Owner_JitterEvent_ThresholdType_Union) *NokiaConf_Configure_Groups_Group_Saa_Owner_JitterEvent {

	key := NokiaConf_Configure_Groups_Group_Saa_Owner_JitterEvent_Key{
		Direction:     Direction,
		ThresholdType: ThresholdType,
	}

	if v, ok := t.JitterEvent[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewJitterEvent(Direction, ThresholdType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateJitterEvent got unexpected error: %v", err))
	}
	return v
}

// GetJitterEvent retrieves the value with the specified key from
// the JitterEvent map field of NokiaConf_Configure_Groups_Group_Saa_Owner. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner) GetJitterEvent(Direction NokiaConf_Configure_Groups_Group_Saa_Owner_JitterEvent_Direction_Union, ThresholdType NokiaConf_Configure_Groups_Group_Saa_Owner_JitterEvent_ThresholdType_Union) *NokiaConf_Configure_Groups_Group_Saa_Owner_JitterEvent {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Saa_Owner_JitterEvent_Key{
		Direction:     Direction,
		ThresholdType: ThresholdType,
	}

	if lm, ok := t.JitterEvent[key]; ok {
		return lm
	}
	return nil
}

// DeleteJitterEvent deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Saa_Owner. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner) DeleteJitterEvent(Direction NokiaConf_Configure_Groups_Group_Saa_Owner_JitterEvent_Direction_Union, ThresholdType NokiaConf_Configure_Groups_Group_Saa_Owner_JitterEvent_ThresholdType_Union) {
	key := NokiaConf_Configure_Groups_Group_Saa_Owner_JitterEvent_Key{
		Direction:     Direction,
		ThresholdType: ThresholdType,
	}

	delete(t.JitterEvent, key)
}

// AppendJitterEvent appends the supplied NokiaConf_Configure_Groups_Group_Saa_Owner_JitterEvent struct to the
// list JitterEvent of NokiaConf_Configure_Groups_Group_Saa_Owner. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Saa_Owner_JitterEvent already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner) AppendJitterEvent(v *NokiaConf_Configure_Groups_Group_Saa_Owner_JitterEvent) error {
	key := NokiaConf_Configure_Groups_Group_Saa_Owner_JitterEvent_Key{
		Direction:     v.Direction,
		ThresholdType: v.ThresholdType,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.JitterEvent == nil {
		t.JitterEvent = make(map[NokiaConf_Configure_Groups_Group_Saa_Owner_JitterEvent_Key]*NokiaConf_Configure_Groups_Group_Saa_Owner_JitterEvent)
	}

	if _, ok := t.JitterEvent[key]; ok {
		return fmt.Errorf("duplicate key for list JitterEvent %v", key)
	}

	t.JitterEvent[key] = v
	return nil
}

// NewLatencyEvent creates a new entry in the LatencyEvent list of the
// NokiaConf_Configure_Groups_Group_Saa_Owner struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner) NewLatencyEvent(Direction NokiaConf_Configure_Groups_Group_Saa_Owner_LatencyEvent_Direction_Union, ThresholdType NokiaConf_Configure_Groups_Group_Saa_Owner_LatencyEvent_ThresholdType_Union) (*NokiaConf_Configure_Groups_Group_Saa_Owner_LatencyEvent, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LatencyEvent == nil {
		t.LatencyEvent = make(map[NokiaConf_Configure_Groups_Group_Saa_Owner_LatencyEvent_Key]*NokiaConf_Configure_Groups_Group_Saa_Owner_LatencyEvent)
	}

	key := NokiaConf_Configure_Groups_Group_Saa_Owner_LatencyEvent_Key{
		Direction:     Direction,
		ThresholdType: ThresholdType,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.LatencyEvent[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list LatencyEvent", key)
	}

	t.LatencyEvent[key] = &NokiaConf_Configure_Groups_Group_Saa_Owner_LatencyEvent{
		Direction:     Direction,
		ThresholdType: ThresholdType,
	}

	return t.LatencyEvent[key], nil
}

// RenameLatencyEvent renames an entry in the list LatencyEvent within
// the NokiaConf_Configure_Groups_Group_Saa_Owner struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner) RenameLatencyEvent(oldK, newK NokiaConf_Configure_Groups_Group_Saa_Owner_LatencyEvent_Key) error {
	if _, ok := t.LatencyEvent[newK]; ok {
		return fmt.Errorf("key %v already exists in LatencyEvent", newK)
	}

	e, ok := t.LatencyEvent[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in LatencyEvent", oldK)
	}
	e.Direction = newK.Direction
	e.ThresholdType = newK.ThresholdType

	t.LatencyEvent[newK] = e
	delete(t.LatencyEvent, oldK)
	return nil
}

// GetOrCreateLatencyEvent retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Saa_Owner. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner) GetOrCreateLatencyEvent(Direction NokiaConf_Configure_Groups_Group_Saa_Owner_LatencyEvent_Direction_Union, ThresholdType NokiaConf_Configure_Groups_Group_Saa_Owner_LatencyEvent_ThresholdType_Union) *NokiaConf_Configure_Groups_Group_Saa_Owner_LatencyEvent {

	key := NokiaConf_Configure_Groups_Group_Saa_Owner_LatencyEvent_Key{
		Direction:     Direction,
		ThresholdType: ThresholdType,
	}

	if v, ok := t.LatencyEvent[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLatencyEvent(Direction, ThresholdType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLatencyEvent got unexpected error: %v", err))
	}
	return v
}

// GetLatencyEvent retrieves the value with the specified key from
// the LatencyEvent map field of NokiaConf_Configure_Groups_Group_Saa_Owner. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner) GetLatencyEvent(Direction NokiaConf_Configure_Groups_Group_Saa_Owner_LatencyEvent_Direction_Union, ThresholdType NokiaConf_Configure_Groups_Group_Saa_Owner_LatencyEvent_ThresholdType_Union) *NokiaConf_Configure_Groups_Group_Saa_Owner_LatencyEvent {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Saa_Owner_LatencyEvent_Key{
		Direction:     Direction,
		ThresholdType: ThresholdType,
	}

	if lm, ok := t.LatencyEvent[key]; ok {
		return lm
	}
	return nil
}

// DeleteLatencyEvent deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Saa_Owner. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner) DeleteLatencyEvent(Direction NokiaConf_Configure_Groups_Group_Saa_Owner_LatencyEvent_Direction_Union, ThresholdType NokiaConf_Configure_Groups_Group_Saa_Owner_LatencyEvent_ThresholdType_Union) {
	key := NokiaConf_Configure_Groups_Group_Saa_Owner_LatencyEvent_Key{
		Direction:     Direction,
		ThresholdType: ThresholdType,
	}

	delete(t.LatencyEvent, key)
}

// AppendLatencyEvent appends the supplied NokiaConf_Configure_Groups_Group_Saa_Owner_LatencyEvent struct to the
// list LatencyEvent of NokiaConf_Configure_Groups_Group_Saa_Owner. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Saa_Owner_LatencyEvent already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner) AppendLatencyEvent(v *NokiaConf_Configure_Groups_Group_Saa_Owner_LatencyEvent) error {
	key := NokiaConf_Configure_Groups_Group_Saa_Owner_LatencyEvent_Key{
		Direction:     v.Direction,
		ThresholdType: v.ThresholdType,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LatencyEvent == nil {
		t.LatencyEvent = make(map[NokiaConf_Configure_Groups_Group_Saa_Owner_LatencyEvent_Key]*NokiaConf_Configure_Groups_Group_Saa_Owner_LatencyEvent)
	}

	if _, ok := t.LatencyEvent[key]; ok {
		return fmt.Errorf("duplicate key for list LatencyEvent %v", key)
	}

	t.LatencyEvent[key] = v
	return nil
}

// NewLossEvent creates a new entry in the LossEvent list of the
// NokiaConf_Configure_Groups_Group_Saa_Owner struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner) NewLossEvent(Direction NokiaConf_Configure_Groups_Group_Saa_Owner_LossEvent_Direction_Union, ThresholdType NokiaConf_Configure_Groups_Group_Saa_Owner_LossEvent_ThresholdType_Union) (*NokiaConf_Configure_Groups_Group_Saa_Owner_LossEvent, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LossEvent == nil {
		t.LossEvent = make(map[NokiaConf_Configure_Groups_Group_Saa_Owner_LossEvent_Key]*NokiaConf_Configure_Groups_Group_Saa_Owner_LossEvent)
	}

	key := NokiaConf_Configure_Groups_Group_Saa_Owner_LossEvent_Key{
		Direction:     Direction,
		ThresholdType: ThresholdType,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.LossEvent[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list LossEvent", key)
	}

	t.LossEvent[key] = &NokiaConf_Configure_Groups_Group_Saa_Owner_LossEvent{
		Direction:     Direction,
		ThresholdType: ThresholdType,
	}

	return t.LossEvent[key], nil
}

// RenameLossEvent renames an entry in the list LossEvent within
// the NokiaConf_Configure_Groups_Group_Saa_Owner struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner) RenameLossEvent(oldK, newK NokiaConf_Configure_Groups_Group_Saa_Owner_LossEvent_Key) error {
	if _, ok := t.LossEvent[newK]; ok {
		return fmt.Errorf("key %v already exists in LossEvent", newK)
	}

	e, ok := t.LossEvent[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in LossEvent", oldK)
	}
	e.Direction = newK.Direction
	e.ThresholdType = newK.ThresholdType

	t.LossEvent[newK] = e
	delete(t.LossEvent, oldK)
	return nil
}

// GetOrCreateLossEvent retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Saa_Owner. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner) GetOrCreateLossEvent(Direction NokiaConf_Configure_Groups_Group_Saa_Owner_LossEvent_Direction_Union, ThresholdType NokiaConf_Configure_Groups_Group_Saa_Owner_LossEvent_ThresholdType_Union) *NokiaConf_Configure_Groups_Group_Saa_Owner_LossEvent {

	key := NokiaConf_Configure_Groups_Group_Saa_Owner_LossEvent_Key{
		Direction:     Direction,
		ThresholdType: ThresholdType,
	}

	if v, ok := t.LossEvent[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLossEvent(Direction, ThresholdType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLossEvent got unexpected error: %v", err))
	}
	return v
}

// GetLossEvent retrieves the value with the specified key from
// the LossEvent map field of NokiaConf_Configure_Groups_Group_Saa_Owner. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner) GetLossEvent(Direction NokiaConf_Configure_Groups_Group_Saa_Owner_LossEvent_Direction_Union, ThresholdType NokiaConf_Configure_Groups_Group_Saa_Owner_LossEvent_ThresholdType_Union) *NokiaConf_Configure_Groups_Group_Saa_Owner_LossEvent {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Saa_Owner_LossEvent_Key{
		Direction:     Direction,
		ThresholdType: ThresholdType,
	}

	if lm, ok := t.LossEvent[key]; ok {
		return lm
	}
	return nil
}

// DeleteLossEvent deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Saa_Owner. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner) DeleteLossEvent(Direction NokiaConf_Configure_Groups_Group_Saa_Owner_LossEvent_Direction_Union, ThresholdType NokiaConf_Configure_Groups_Group_Saa_Owner_LossEvent_ThresholdType_Union) {
	key := NokiaConf_Configure_Groups_Group_Saa_Owner_LossEvent_Key{
		Direction:     Direction,
		ThresholdType: ThresholdType,
	}

	delete(t.LossEvent, key)
}

// AppendLossEvent appends the supplied NokiaConf_Configure_Groups_Group_Saa_Owner_LossEvent struct to the
// list LossEvent of NokiaConf_Configure_Groups_Group_Saa_Owner. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Saa_Owner_LossEvent already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner) AppendLossEvent(v *NokiaConf_Configure_Groups_Group_Saa_Owner_LossEvent) error {
	key := NokiaConf_Configure_Groups_Group_Saa_Owner_LossEvent_Key{
		Direction:     v.Direction,
		ThresholdType: v.ThresholdType,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LossEvent == nil {
		t.LossEvent = make(map[NokiaConf_Configure_Groups_Group_Saa_Owner_LossEvent_Key]*NokiaConf_Configure_Groups_Group_Saa_Owner_LossEvent)
	}

	if _, ok := t.LossEvent[key]; ok {
		return fmt.Errorf("duplicate key for list LossEvent %v", key)
	}

	t.LossEvent[key] = v
	return nil
}

// GetOrCreateType retrieves the value of the Type field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner) GetOrCreateType() *NokiaConf_Configure_Groups_Group_Saa_Owner_Type {
	if t.Type != nil {
		return t.Type
	}
	t.Type = &NokiaConf_Configure_Groups_Group_Saa_Owner_Type{}
	return t.Type
}

// GetType returns the value of the Type struct pointer
// from NokiaConf_Configure_Groups_Group_Saa_Owner. If the receiver or the field Type is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner) GetType() *NokiaConf_Configure_Groups_Group_Saa_Owner_Type {
	if t != nil && t.Type != nil {
		return t.Type
	}
	return nil
}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Groups_Group_Saa_Owner
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Saa_Owner
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetContinuous retrieves the value of the leaf Continuous from the NokiaConf_Configure_Groups_Group_Saa_Owner
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Continuous is set, it can
// safely use t.GetContinuous() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Continuous == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner) GetContinuous() bool {
	if t == nil || t.Continuous == nil {
		return false
	}
	return *t.Continuous
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Saa_Owner
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetOwnerName retrieves the value of the leaf OwnerName from the NokiaConf_Configure_Groups_Group_Saa_Owner
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OwnerName is set, it can
// safely use t.GetOwnerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OwnerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner) GetOwnerName() string {
	if t == nil || t.OwnerName == nil {
		return ""
	}
	return *t.OwnerName
}

// GetProbeHistory retrieves the value of the leaf ProbeHistory from the NokiaConf_Configure_Groups_Group_Saa_Owner
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProbeHistory is set, it can
// safely use t.GetProbeHistory() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProbeHistory == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner) GetProbeHistory() E_NokiaConf_Configure_Groups_Group_Saa_Owner_ProbeHistory {
	if t == nil || t.ProbeHistory == 0 {
		return NokiaConf_Configure_Groups_Group_Saa_Owner_ProbeHistory_auto
	}
	return t.ProbeHistory
}

// GetTest retrieves the value of the leaf Test from the NokiaConf_Configure_Groups_Group_Saa_Owner
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Test is set, it can
// safely use t.GetTest() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Test == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner) GetTest() string {
	if t == nil || t.Test == nil {
		return ""
	}
	return *t.Test
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Saa_Owner
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Continuous == nil {
		var v bool = false
		t.Continuous = &v
	}
	if t.ProbeHistory == 0 {
		t.ProbeHistory = NokiaConf_Configure_Groups_Group_Saa_Owner_ProbeHistory_auto
	}
	t.Type.PopulateDefaults()
	for _, e := range t.JitterEvent {
		e.PopulateDefaults()
	}
	for _, e := range t.LatencyEvent {
		e.PopulateDefaults()
	}
	for _, e := range t.LossEvent {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Saa_Owner struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner) ΛListKeyMap() (map[string]interface{}, error) {
	if t.OwnerName == nil {
		return nil, fmt.Errorf("nil value for key OwnerName")
	}

	if t.Test == nil {
		return nil, fmt.Errorf("nil value for key Test")
	}

	return map[string]interface{}{
		"owner-name": *t.OwnerName,
		"test":       *t.Test,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Saa_Owner"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Saa_Owner.
func (*NokiaConf_Configure_Groups_Group_Saa_Owner) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Saa_Owner_JitterEvent represents the /nokia-conf/configure/groups/group/saa/owner/jitter-event YANG schema element.
type NokiaConf_Configure_Groups_Group_Saa_Owner_JitterEvent struct {
	Direction     NokiaConf_Configure_Groups_Group_Saa_Owner_JitterEvent_Direction_Union     `path:"direction" module:"nokia-conf"`
	Threshold     *uint32                                                                    `path:"threshold" module:"nokia-conf"`
	ThresholdType NokiaConf_Configure_Groups_Group_Saa_Owner_JitterEvent_ThresholdType_Union `path:"threshold-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Saa_Owner_JitterEvent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Saa_Owner_JitterEvent) IsYANGGoStruct() {}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_Groups_Group_Saa_Owner_JitterEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner_JitterEvent) GetDirection() NokiaConf_Configure_Groups_Group_Saa_Owner_JitterEvent_Direction_Union {
	if t == nil || t.Direction == nil {
		return nil
	}
	return t.Direction
}

// GetThreshold retrieves the value of the leaf Threshold from the NokiaConf_Configure_Groups_Group_Saa_Owner_JitterEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Threshold is set, it can
// safely use t.GetThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Threshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner_JitterEvent) GetThreshold() uint32 {
	if t == nil || t.Threshold == nil {
		return 0
	}
	return *t.Threshold
}

// GetThresholdType retrieves the value of the leaf ThresholdType from the NokiaConf_Configure_Groups_Group_Saa_Owner_JitterEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ThresholdType is set, it can
// safely use t.GetThresholdType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ThresholdType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner_JitterEvent) GetThresholdType() NokiaConf_Configure_Groups_Group_Saa_Owner_JitterEvent_ThresholdType_Union {
	if t == nil || t.ThresholdType == nil {
		return nil
	}
	return t.ThresholdType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Saa_Owner_JitterEvent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner_JitterEvent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Saa_Owner_JitterEvent struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner_JitterEvent) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"direction":      t.Direction,
		"threshold-type": t.ThresholdType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner_JitterEvent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Saa_Owner_JitterEvent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner_JitterEvent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner_JitterEvent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Saa_Owner_JitterEvent.
func (*NokiaConf_Configure_Groups_Group_Saa_Owner_JitterEvent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Saa_Owner_LatencyEvent represents the /nokia-conf/configure/groups/group/saa/owner/latency-event YANG schema element.
type NokiaConf_Configure_Groups_Group_Saa_Owner_LatencyEvent struct {
	Direction     NokiaConf_Configure_Groups_Group_Saa_Owner_LatencyEvent_Direction_Union     `path:"direction" module:"nokia-conf"`
	Threshold     *uint32                                                                     `path:"threshold" module:"nokia-conf"`
	ThresholdType NokiaConf_Configure_Groups_Group_Saa_Owner_LatencyEvent_ThresholdType_Union `path:"threshold-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Saa_Owner_LatencyEvent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Saa_Owner_LatencyEvent) IsYANGGoStruct() {}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_Groups_Group_Saa_Owner_LatencyEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner_LatencyEvent) GetDirection() NokiaConf_Configure_Groups_Group_Saa_Owner_LatencyEvent_Direction_Union {
	if t == nil || t.Direction == nil {
		return nil
	}
	return t.Direction
}

// GetThreshold retrieves the value of the leaf Threshold from the NokiaConf_Configure_Groups_Group_Saa_Owner_LatencyEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Threshold is set, it can
// safely use t.GetThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Threshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner_LatencyEvent) GetThreshold() uint32 {
	if t == nil || t.Threshold == nil {
		return 0
	}
	return *t.Threshold
}

// GetThresholdType retrieves the value of the leaf ThresholdType from the NokiaConf_Configure_Groups_Group_Saa_Owner_LatencyEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ThresholdType is set, it can
// safely use t.GetThresholdType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ThresholdType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner_LatencyEvent) GetThresholdType() NokiaConf_Configure_Groups_Group_Saa_Owner_LatencyEvent_ThresholdType_Union {
	if t == nil || t.ThresholdType == nil {
		return nil
	}
	return t.ThresholdType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Saa_Owner_LatencyEvent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner_LatencyEvent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Saa_Owner_LatencyEvent struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner_LatencyEvent) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"direction":      t.Direction,
		"threshold-type": t.ThresholdType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner_LatencyEvent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Saa_Owner_LatencyEvent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner_LatencyEvent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner_LatencyEvent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Saa_Owner_LatencyEvent.
func (*NokiaConf_Configure_Groups_Group_Saa_Owner_LatencyEvent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Saa_Owner_LossEvent represents the /nokia-conf/configure/groups/group/saa/owner/loss-event YANG schema element.
type NokiaConf_Configure_Groups_Group_Saa_Owner_LossEvent struct {
	Direction     NokiaConf_Configure_Groups_Group_Saa_Owner_LossEvent_Direction_Union     `path:"direction" module:"nokia-conf"`
	Threshold     *uint32                                                                  `path:"threshold" module:"nokia-conf"`
	ThresholdType NokiaConf_Configure_Groups_Group_Saa_Owner_LossEvent_ThresholdType_Union `path:"threshold-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Saa_Owner_LossEvent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Saa_Owner_LossEvent) IsYANGGoStruct() {}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_Groups_Group_Saa_Owner_LossEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner_LossEvent) GetDirection() NokiaConf_Configure_Groups_Group_Saa_Owner_LossEvent_Direction_Union {
	if t == nil || t.Direction == nil {
		return nil
	}
	return t.Direction
}

// GetThreshold retrieves the value of the leaf Threshold from the NokiaConf_Configure_Groups_Group_Saa_Owner_LossEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Threshold is set, it can
// safely use t.GetThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Threshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner_LossEvent) GetThreshold() uint32 {
	if t == nil || t.Threshold == nil {
		return 0
	}
	return *t.Threshold
}

// GetThresholdType retrieves the value of the leaf ThresholdType from the NokiaConf_Configure_Groups_Group_Saa_Owner_LossEvent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ThresholdType is set, it can
// safely use t.GetThresholdType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ThresholdType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner_LossEvent) GetThresholdType() NokiaConf_Configure_Groups_Group_Saa_Owner_LossEvent_ThresholdType_Union {
	if t == nil || t.ThresholdType == nil {
		return nil
	}
	return t.ThresholdType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Saa_Owner_LossEvent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner_LossEvent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Saa_Owner_LossEvent struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner_LossEvent) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"direction":      t.Direction,
		"threshold-type": t.ThresholdType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner_LossEvent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Saa_Owner_LossEvent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner_LossEvent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner_LossEvent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Saa_Owner_LossEvent.
func (*NokiaConf_Configure_Groups_Group_Saa_Owner_LossEvent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Saa_Owner_Type represents the /nokia-conf/configure/groups/group/saa/owner/type YANG schema element.
type NokiaConf_Configure_Groups_Group_Saa_Owner_Type struct {
	IcmpPing *NokiaConf_Configure_Groups_Group_Saa_Owner_Type_IcmpPing `path:"icmp-ping" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Saa_Owner_Type implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Saa_Owner_Type) IsYANGGoStruct() {}

// GetOrCreateIcmpPing retrieves the value of the IcmpPing field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner_Type) GetOrCreateIcmpPing() *NokiaConf_Configure_Groups_Group_Saa_Owner_Type_IcmpPing {
	if t.IcmpPing != nil {
		return t.IcmpPing
	}
	t.IcmpPing = &NokiaConf_Configure_Groups_Group_Saa_Owner_Type_IcmpPing{}
	return t.IcmpPing
}

// GetIcmpPing returns the value of the IcmpPing struct pointer
// from NokiaConf_Configure_Groups_Group_Saa_Owner_Type. If the receiver or the field IcmpPing is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner_Type) GetIcmpPing() *NokiaConf_Configure_Groups_Group_Saa_Owner_Type_IcmpPing {
	if t != nil && t.IcmpPing != nil {
		return t.IcmpPing
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Saa_Owner_Type
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner_Type) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.IcmpPing.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner_Type) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Saa_Owner_Type"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner_Type) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner_Type) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Saa_Owner_Type.
func (*NokiaConf_Configure_Groups_Group_Saa_Owner_Type) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Saa_Owner_Type_IcmpPing represents the /nokia-conf/configure/groups/group/saa/owner/type/icmp-ping YANG schema element.
type NokiaConf_Configure_Groups_Group_Saa_Owner_Type_IcmpPing struct {
	BypassRouting      *bool                                                                   `path:"bypass-routing" module:"nokia-conf"`
	Count              *uint32                                                                 `path:"count" module:"nokia-conf"`
	DestinationAddress *string                                                                 `path:"destination-address" module:"nokia-conf"`
	DoNotFragment      *bool                                                                   `path:"do-not-fragment" module:"nokia-conf"`
	Interface          *string                                                                 `path:"interface" module:"nokia-conf"`
	Interval           NokiaConf_Configure_Groups_Group_Saa_Owner_Type_IcmpPing_Interval_Union `path:"interval" module:"nokia-conf"`
	NextHopAddress     *string                                                                 `path:"next-hop-address" module:"nokia-conf"`
	Pattern            NokiaConf_Configure_Groups_Group_Saa_Owner_Type_IcmpPing_Pattern_Union  `path:"pattern" module:"nokia-conf"`
	Qos                *NokiaConf_Configure_Groups_Group_Saa_Owner_Type_IcmpPing_Qos           `path:"qos" module:"nokia-conf"`
	RouterInstance     *string                                                                 `path:"router-instance" module:"nokia-conf"`
	Size               *uint32                                                                 `path:"size" module:"nokia-conf"`
	SourceAddress      *string                                                                 `path:"source-address" module:"nokia-conf"`
	Timeout            *uint32                                                                 `path:"timeout" module:"nokia-conf"`
	Ttl                *uint32                                                                 `path:"ttl" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Saa_Owner_Type_IcmpPing implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Saa_Owner_Type_IcmpPing) IsYANGGoStruct() {}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner_Type_IcmpPing) GetOrCreateQos() *NokiaConf_Configure_Groups_Group_Saa_Owner_Type_IcmpPing_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Groups_Group_Saa_Owner_Type_IcmpPing_Qos{}
	return t.Qos
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Groups_Group_Saa_Owner_Type_IcmpPing. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner_Type_IcmpPing) GetQos() *NokiaConf_Configure_Groups_Group_Saa_Owner_Type_IcmpPing_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// GetBypassRouting retrieves the value of the leaf BypassRouting from the NokiaConf_Configure_Groups_Group_Saa_Owner_Type_IcmpPing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BypassRouting is set, it can
// safely use t.GetBypassRouting() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BypassRouting == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner_Type_IcmpPing) GetBypassRouting() bool {
	if t == nil || t.BypassRouting == nil {
		return false
	}
	return *t.BypassRouting
}

// GetCount retrieves the value of the leaf Count from the NokiaConf_Configure_Groups_Group_Saa_Owner_Type_IcmpPing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Count is set, it can
// safely use t.GetCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Count == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner_Type_IcmpPing) GetCount() uint32 {
	if t == nil || t.Count == nil {
		return 5
	}
	return *t.Count
}

// GetDestinationAddress retrieves the value of the leaf DestinationAddress from the NokiaConf_Configure_Groups_Group_Saa_Owner_Type_IcmpPing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationAddress is set, it can
// safely use t.GetDestinationAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner_Type_IcmpPing) GetDestinationAddress() string {
	if t == nil || t.DestinationAddress == nil {
		return ""
	}
	return *t.DestinationAddress
}

// GetDoNotFragment retrieves the value of the leaf DoNotFragment from the NokiaConf_Configure_Groups_Group_Saa_Owner_Type_IcmpPing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DoNotFragment is set, it can
// safely use t.GetDoNotFragment() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DoNotFragment == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner_Type_IcmpPing) GetDoNotFragment() bool {
	if t == nil || t.DoNotFragment == nil {
		return false
	}
	return *t.DoNotFragment
}

// GetInterface retrieves the value of the leaf Interface from the NokiaConf_Configure_Groups_Group_Saa_Owner_Type_IcmpPing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner_Type_IcmpPing) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Groups_Group_Saa_Owner_Type_IcmpPing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner_Type_IcmpPing) GetInterval() NokiaConf_Configure_Groups_Group_Saa_Owner_Type_IcmpPing_Interval_Union {
	if t == nil || t.Interval == nil {
		return UnionUint32(1)
	}
	return t.Interval
}

// GetNextHopAddress retrieves the value of the leaf NextHopAddress from the NokiaConf_Configure_Groups_Group_Saa_Owner_Type_IcmpPing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHopAddress is set, it can
// safely use t.GetNextHopAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHopAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner_Type_IcmpPing) GetNextHopAddress() string {
	if t == nil || t.NextHopAddress == nil {
		return ""
	}
	return *t.NextHopAddress
}

// GetPattern retrieves the value of the leaf Pattern from the NokiaConf_Configure_Groups_Group_Saa_Owner_Type_IcmpPing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pattern is set, it can
// safely use t.GetPattern() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pattern == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner_Type_IcmpPing) GetPattern() NokiaConf_Configure_Groups_Group_Saa_Owner_Type_IcmpPing_Pattern_Union {
	if t == nil || t.Pattern == nil {
		return NokiaTypesOam_PaddingPattern_Enum_sequential
	}
	return t.Pattern
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Groups_Group_Saa_Owner_Type_IcmpPing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner_Type_IcmpPing) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return "Base"
	}
	return *t.RouterInstance
}

// GetSize retrieves the value of the leaf Size from the NokiaConf_Configure_Groups_Group_Saa_Owner_Type_IcmpPing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Size is set, it can
// safely use t.GetSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Size == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner_Type_IcmpPing) GetSize() uint32 {
	if t == nil || t.Size == nil {
		return 56
	}
	return *t.Size
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_Groups_Group_Saa_Owner_Type_IcmpPing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner_Type_IcmpPing) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Groups_Group_Saa_Owner_Type_IcmpPing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner_Type_IcmpPing) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 5
	}
	return *t.Timeout
}

// GetTtl retrieves the value of the leaf Ttl from the NokiaConf_Configure_Groups_Group_Saa_Owner_Type_IcmpPing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ttl is set, it can
// safely use t.GetTtl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ttl == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner_Type_IcmpPing) GetTtl() uint32 {
	if t == nil || t.Ttl == nil {
		return 64
	}
	return *t.Ttl
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Saa_Owner_Type_IcmpPing
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner_Type_IcmpPing) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BypassRouting == nil {
		var v bool = false
		t.BypassRouting = &v
	}
	if t.Count == nil {
		var v uint32 = 5
		t.Count = &v
	}
	if t.DoNotFragment == nil {
		var v bool = false
		t.DoNotFragment = &v
	}
	if t.Interval == nil {
		t.Interval = UnionUint32(1)
	}
	if t.Pattern == nil {
		t.Pattern = NokiaTypesOam_PaddingPattern_Enum_sequential
	}
	if t.RouterInstance == nil {
		var v string = "Base"
		t.RouterInstance = &v
	}
	if t.Size == nil {
		var v uint32 = 56
		t.Size = &v
	}
	if t.Timeout == nil {
		var v uint32 = 5
		t.Timeout = &v
	}
	if t.Ttl == nil {
		var v uint32 = 64
		t.Ttl = &v
	}
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner_Type_IcmpPing) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Saa_Owner_Type_IcmpPing"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner_Type_IcmpPing) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner_Type_IcmpPing) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Saa_Owner_Type_IcmpPing.
func (*NokiaConf_Configure_Groups_Group_Saa_Owner_Type_IcmpPing) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Saa_Owner_Type_IcmpPing_Qos represents the /nokia-conf/configure/groups/group/saa/owner/type/icmp-ping/qos YANG schema element.
type NokiaConf_Configure_Groups_Group_Saa_Owner_Type_IcmpPing_Qos struct {
	Fc  E_NokiaTypesSros_FcName `path:"fc" module:"nokia-conf"`
	Tos *uint32                 `path:"tos" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Saa_Owner_Type_IcmpPing_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Saa_Owner_Type_IcmpPing_Qos) IsYANGGoStruct() {}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Groups_Group_Saa_Owner_Type_IcmpPing_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner_Type_IcmpPing_Qos) GetFc() E_NokiaTypesSros_FcName {
	if t == nil || t.Fc == 0 {
		return NokiaTypesSros_FcName_nc
	}
	return t.Fc
}

// GetTos retrieves the value of the leaf Tos from the NokiaConf_Configure_Groups_Group_Saa_Owner_Type_IcmpPing_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tos is set, it can
// safely use t.GetTos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tos == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner_Type_IcmpPing_Qos) GetTos() uint32 {
	if t == nil || t.Tos == nil {
		return 0
	}
	return *t.Tos
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Saa_Owner_Type_IcmpPing_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner_Type_IcmpPing_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Fc == 0 {
		t.Fc = NokiaTypesSros_FcName_nc
	}
	if t.Tos == nil {
		var v uint32 = 0
		t.Tos = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner_Type_IcmpPing_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Saa_Owner_Type_IcmpPing_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner_Type_IcmpPing_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Saa_Owner_Type_IcmpPing_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Saa_Owner_Type_IcmpPing_Qos.
func (*NokiaConf_Configure_Groups_Group_Saa_Owner_Type_IcmpPing_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Satellite represents the /nokia-conf/configure/groups/group/satellite YANG schema element.
type NokiaConf_Configure_Groups_Group_Satellite struct {
	EthernetSatellite map[NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite_SatelliteId_Union]*NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite `path:"ethernet-satellite" module:"nokia-conf"`
	FileTransfer      *NokiaConf_Configure_Groups_Group_Satellite_FileTransfer                                                                                         `path:"file-transfer" module:"nokia-conf" yangPresence:"true"`
	PortTemplate      map[string]*NokiaConf_Configure_Groups_Group_Satellite_PortTemplate                                                                              `path:"port-template" module:"nokia-conf"`
	PortTopology      map[string]*NokiaConf_Configure_Groups_Group_Satellite_PortTopology                                                                              `path:"port-topology" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Satellite implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Satellite) IsYANGGoStruct() {}

// NewEthernetSatellite creates a new entry in the EthernetSatellite list of the
// NokiaConf_Configure_Groups_Group_Satellite struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Satellite) NewEthernetSatellite(SatelliteId NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite_SatelliteId_Union) (*NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EthernetSatellite == nil {
		t.EthernetSatellite = make(map[NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite_SatelliteId_Union]*NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite)
	}

	key := SatelliteId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.EthernetSatellite[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list EthernetSatellite", key)
	}

	t.EthernetSatellite[key] = &NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite{
		SatelliteId: SatelliteId,
	}

	return t.EthernetSatellite[key], nil
}

// RenameEthernetSatellite renames an entry in the list EthernetSatellite within
// the NokiaConf_Configure_Groups_Group_Satellite struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Satellite) RenameEthernetSatellite(oldK, newK NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite_SatelliteId_Union) error {
	if _, ok := t.EthernetSatellite[newK]; ok {
		return fmt.Errorf("key %v already exists in EthernetSatellite", newK)
	}

	e, ok := t.EthernetSatellite[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in EthernetSatellite", oldK)
	}
	e.SatelliteId = newK

	t.EthernetSatellite[newK] = e
	delete(t.EthernetSatellite, oldK)
	return nil
}

// GetOrCreateEthernetSatellite retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Satellite. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Satellite) GetOrCreateEthernetSatellite(SatelliteId NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite_SatelliteId_Union) *NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite {

	key := SatelliteId

	if v, ok := t.EthernetSatellite[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEthernetSatellite(SatelliteId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEthernetSatellite got unexpected error: %v", err))
	}
	return v
}

// GetEthernetSatellite retrieves the value with the specified key from
// the EthernetSatellite map field of NokiaConf_Configure_Groups_Group_Satellite. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Satellite) GetEthernetSatellite(SatelliteId NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite_SatelliteId_Union) *NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite {

	if t == nil {
		return nil
	}

	key := SatelliteId

	if lm, ok := t.EthernetSatellite[key]; ok {
		return lm
	}
	return nil
}

// DeleteEthernetSatellite deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Satellite. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Satellite) DeleteEthernetSatellite(SatelliteId NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite_SatelliteId_Union) {
	key := SatelliteId

	delete(t.EthernetSatellite, key)
}

// AppendEthernetSatellite appends the supplied NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite struct to the
// list EthernetSatellite of NokiaConf_Configure_Groups_Group_Satellite. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Satellite) AppendEthernetSatellite(v *NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite) error {
	key := v.SatelliteId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EthernetSatellite == nil {
		t.EthernetSatellite = make(map[NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite_SatelliteId_Union]*NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite)
	}

	if _, ok := t.EthernetSatellite[key]; ok {
		return fmt.Errorf("duplicate key for list EthernetSatellite %v", key)
	}

	t.EthernetSatellite[key] = v
	return nil
}

// NewPortTemplate creates a new entry in the PortTemplate list of the
// NokiaConf_Configure_Groups_Group_Satellite struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Satellite) NewPortTemplate(TemplateName string) (*NokiaConf_Configure_Groups_Group_Satellite_PortTemplate, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PortTemplate == nil {
		t.PortTemplate = make(map[string]*NokiaConf_Configure_Groups_Group_Satellite_PortTemplate)
	}

	key := TemplateName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PortTemplate[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PortTemplate", key)
	}

	t.PortTemplate[key] = &NokiaConf_Configure_Groups_Group_Satellite_PortTemplate{
		TemplateName: &TemplateName,
	}

	return t.PortTemplate[key], nil
}

// RenamePortTemplate renames an entry in the list PortTemplate within
// the NokiaConf_Configure_Groups_Group_Satellite struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Satellite) RenamePortTemplate(oldK, newK string) error {
	if _, ok := t.PortTemplate[newK]; ok {
		return fmt.Errorf("key %v already exists in PortTemplate", newK)
	}

	e, ok := t.PortTemplate[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PortTemplate", oldK)
	}
	e.TemplateName = &newK

	t.PortTemplate[newK] = e
	delete(t.PortTemplate, oldK)
	return nil
}

// GetOrCreatePortTemplate retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Satellite. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Satellite) GetOrCreatePortTemplate(TemplateName string) *NokiaConf_Configure_Groups_Group_Satellite_PortTemplate {

	key := TemplateName

	if v, ok := t.PortTemplate[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPortTemplate(TemplateName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePortTemplate got unexpected error: %v", err))
	}
	return v
}

// GetPortTemplate retrieves the value with the specified key from
// the PortTemplate map field of NokiaConf_Configure_Groups_Group_Satellite. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Satellite) GetPortTemplate(TemplateName string) *NokiaConf_Configure_Groups_Group_Satellite_PortTemplate {

	if t == nil {
		return nil
	}

	key := TemplateName

	if lm, ok := t.PortTemplate[key]; ok {
		return lm
	}
	return nil
}

// DeletePortTemplate deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Satellite. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Satellite) DeletePortTemplate(TemplateName string) {
	key := TemplateName

	delete(t.PortTemplate, key)
}

// AppendPortTemplate appends the supplied NokiaConf_Configure_Groups_Group_Satellite_PortTemplate struct to the
// list PortTemplate of NokiaConf_Configure_Groups_Group_Satellite. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Satellite_PortTemplate already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Satellite) AppendPortTemplate(v *NokiaConf_Configure_Groups_Group_Satellite_PortTemplate) error {
	if v.TemplateName == nil {
		return fmt.Errorf("invalid nil key received for TemplateName")
	}

	key := *v.TemplateName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PortTemplate == nil {
		t.PortTemplate = make(map[string]*NokiaConf_Configure_Groups_Group_Satellite_PortTemplate)
	}

	if _, ok := t.PortTemplate[key]; ok {
		return fmt.Errorf("duplicate key for list PortTemplate %v", key)
	}

	t.PortTemplate[key] = v
	return nil
}

// NewPortTopology creates a new entry in the PortTopology list of the
// NokiaConf_Configure_Groups_Group_Satellite struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Satellite) NewPortTopology(LocalPortId string) (*NokiaConf_Configure_Groups_Group_Satellite_PortTopology, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PortTopology == nil {
		t.PortTopology = make(map[string]*NokiaConf_Configure_Groups_Group_Satellite_PortTopology)
	}

	key := LocalPortId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PortTopology[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PortTopology", key)
	}

	t.PortTopology[key] = &NokiaConf_Configure_Groups_Group_Satellite_PortTopology{
		LocalPortId: &LocalPortId,
	}

	return t.PortTopology[key], nil
}

// RenamePortTopology renames an entry in the list PortTopology within
// the NokiaConf_Configure_Groups_Group_Satellite struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Satellite) RenamePortTopology(oldK, newK string) error {
	if _, ok := t.PortTopology[newK]; ok {
		return fmt.Errorf("key %v already exists in PortTopology", newK)
	}

	e, ok := t.PortTopology[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PortTopology", oldK)
	}
	e.LocalPortId = &newK

	t.PortTopology[newK] = e
	delete(t.PortTopology, oldK)
	return nil
}

// GetOrCreatePortTopology retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Satellite. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Satellite) GetOrCreatePortTopology(LocalPortId string) *NokiaConf_Configure_Groups_Group_Satellite_PortTopology {

	key := LocalPortId

	if v, ok := t.PortTopology[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPortTopology(LocalPortId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePortTopology got unexpected error: %v", err))
	}
	return v
}

// GetPortTopology retrieves the value with the specified key from
// the PortTopology map field of NokiaConf_Configure_Groups_Group_Satellite. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Satellite) GetPortTopology(LocalPortId string) *NokiaConf_Configure_Groups_Group_Satellite_PortTopology {

	if t == nil {
		return nil
	}

	key := LocalPortId

	if lm, ok := t.PortTopology[key]; ok {
		return lm
	}
	return nil
}

// DeletePortTopology deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Satellite. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Satellite) DeletePortTopology(LocalPortId string) {
	key := LocalPortId

	delete(t.PortTopology, key)
}

// AppendPortTopology appends the supplied NokiaConf_Configure_Groups_Group_Satellite_PortTopology struct to the
// list PortTopology of NokiaConf_Configure_Groups_Group_Satellite. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Satellite_PortTopology already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Satellite) AppendPortTopology(v *NokiaConf_Configure_Groups_Group_Satellite_PortTopology) error {
	if v.LocalPortId == nil {
		return fmt.Errorf("invalid nil key received for LocalPortId")
	}

	key := *v.LocalPortId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PortTopology == nil {
		t.PortTopology = make(map[string]*NokiaConf_Configure_Groups_Group_Satellite_PortTopology)
	}

	if _, ok := t.PortTopology[key]; ok {
		return fmt.Errorf("duplicate key for list PortTopology %v", key)
	}

	t.PortTopology[key] = v
	return nil
}

// GetOrCreateFileTransfer retrieves the value of the FileTransfer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Satellite) GetOrCreateFileTransfer() *NokiaConf_Configure_Groups_Group_Satellite_FileTransfer {
	if t.FileTransfer != nil {
		return t.FileTransfer
	}
	t.FileTransfer = &NokiaConf_Configure_Groups_Group_Satellite_FileTransfer{}
	return t.FileTransfer
}

// GetFileTransfer returns the value of the FileTransfer struct pointer
// from NokiaConf_Configure_Groups_Group_Satellite. If the receiver or the field FileTransfer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Satellite) GetFileTransfer() *NokiaConf_Configure_Groups_Group_Satellite_FileTransfer {
	if t != nil && t.FileTransfer != nil {
		return t.FileTransfer
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Satellite
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Satellite) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.FileTransfer.PopulateDefaults()
	for _, e := range t.EthernetSatellite {
		e.PopulateDefaults()
	}
	for _, e := range t.PortTemplate {
		e.PopulateDefaults()
	}
	for _, e := range t.PortTopology {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Satellite) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Satellite"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Satellite) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Satellite) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Satellite.
func (*NokiaConf_Configure_Groups_Group_Satellite) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite represents the /nokia-conf/configure/groups/group/satellite/ethernet-satellite YANG schema element.
type NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite struct {
	AdminState         E_NokiaTypesSros_AdminState                                                      `path:"admin-state" module:"nokia-conf"`
	ClientDownDelay    *int32                                                                           `path:"client-down-delay" module:"nokia-conf"`
	ConsoleAccess      E_NokiaTypesSros_AdminState                                                      `path:"console-access" module:"nokia-conf"`
	Description        *string                                                                          `path:"description" module:"nokia-conf"`
	Feature            []E_NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite_Feature         `path:"feature" module:"nokia-conf"`
	MacAddress         *string                                                                          `path:"mac-address" module:"nokia-conf"`
	PortMap            map[string]*NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite_PortMap `path:"port-map" module:"nokia-conf"`
	PortTemplate       *string                                                                          `path:"port-template" module:"nokia-conf"`
	PtpTc              *bool                                                                            `path:"ptp-tc" module:"nokia-conf"`
	SatType            E_NokiaTypesChassis_SatType                                                      `path:"sat-type" module:"nokia-conf"`
	SatelliteId        NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite_SatelliteId_Union   `path:"satellite-id" module:"nokia-conf"`
	SoftwareRepository *string                                                                          `path:"software-repository" module:"nokia-conf"`
	SyncE              *bool                                                                            `path:"sync-e" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite) IsYANGGoStruct() {}

// NewPortMap creates a new entry in the PortMap list of the
// NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite) NewPortMap(ClientPortId string) (*NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite_PortMap, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PortMap == nil {
		t.PortMap = make(map[string]*NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite_PortMap)
	}

	key := ClientPortId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PortMap[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PortMap", key)
	}

	t.PortMap[key] = &NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite_PortMap{
		ClientPortId: &ClientPortId,
	}

	return t.PortMap[key], nil
}

// RenamePortMap renames an entry in the list PortMap within
// the NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite) RenamePortMap(oldK, newK string) error {
	if _, ok := t.PortMap[newK]; ok {
		return fmt.Errorf("key %v already exists in PortMap", newK)
	}

	e, ok := t.PortMap[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PortMap", oldK)
	}
	e.ClientPortId = &newK

	t.PortMap[newK] = e
	delete(t.PortMap, oldK)
	return nil
}

// GetOrCreatePortMap retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite) GetOrCreatePortMap(ClientPortId string) *NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite_PortMap {

	key := ClientPortId

	if v, ok := t.PortMap[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPortMap(ClientPortId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePortMap got unexpected error: %v", err))
	}
	return v
}

// GetPortMap retrieves the value with the specified key from
// the PortMap map field of NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite) GetPortMap(ClientPortId string) *NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite_PortMap {

	if t == nil {
		return nil
	}

	key := ClientPortId

	if lm, ok := t.PortMap[key]; ok {
		return lm
	}
	return nil
}

// DeletePortMap deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite) DeletePortMap(ClientPortId string) {
	key := ClientPortId

	delete(t.PortMap, key)
}

// AppendPortMap appends the supplied NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite_PortMap struct to the
// list PortMap of NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite_PortMap already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite) AppendPortMap(v *NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite_PortMap) error {
	if v.ClientPortId == nil {
		return fmt.Errorf("invalid nil key received for ClientPortId")
	}

	key := *v.ClientPortId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PortMap == nil {
		t.PortMap = make(map[string]*NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite_PortMap)
	}

	if _, ok := t.PortMap[key]; ok {
		return fmt.Errorf("duplicate key for list PortMap %v", key)
	}

	t.PortMap[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetClientDownDelay retrieves the value of the leaf ClientDownDelay from the NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClientDownDelay is set, it can
// safely use t.GetClientDownDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClientDownDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite) GetClientDownDelay() int32 {
	if t == nil || t.ClientDownDelay == nil {
		return 0
	}
	return *t.ClientDownDelay
}

// GetConsoleAccess retrieves the value of the leaf ConsoleAccess from the NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConsoleAccess is set, it can
// safely use t.GetConsoleAccess() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConsoleAccess == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite) GetConsoleAccess() E_NokiaTypesSros_AdminState {
	if t == nil || t.ConsoleAccess == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.ConsoleAccess
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetFeature retrieves the value of the leaf Feature from the NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Feature is set, it can
// safely use t.GetFeature() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Feature == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite) GetFeature() []E_NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite_Feature {
	if t == nil || t.Feature == nil {
		return nil
	}
	return t.Feature
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return ""
	}
	return *t.MacAddress
}

// GetPortTemplate retrieves the value of the leaf PortTemplate from the NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortTemplate is set, it can
// safely use t.GetPortTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite) GetPortTemplate() string {
	if t == nil || t.PortTemplate == nil {
		return ""
	}
	return *t.PortTemplate
}

// GetPtpTc retrieves the value of the leaf PtpTc from the NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PtpTc is set, it can
// safely use t.GetPtpTc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PtpTc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite) GetPtpTc() bool {
	if t == nil || t.PtpTc == nil {
		return false
	}
	return *t.PtpTc
}

// GetSatType retrieves the value of the leaf SatType from the NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SatType is set, it can
// safely use t.GetSatType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SatType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite) GetSatType() E_NokiaTypesChassis_SatType {
	if t == nil || t.SatType == 0 {
		return 0
	}
	return t.SatType
}

// GetSatelliteId retrieves the value of the leaf SatelliteId from the NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SatelliteId is set, it can
// safely use t.GetSatelliteId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SatelliteId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite) GetSatelliteId() NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite_SatelliteId_Union {
	if t == nil || t.SatelliteId == nil {
		return nil
	}
	return t.SatelliteId
}

// GetSoftwareRepository retrieves the value of the leaf SoftwareRepository from the NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SoftwareRepository is set, it can
// safely use t.GetSoftwareRepository() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SoftwareRepository == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite) GetSoftwareRepository() string {
	if t == nil || t.SoftwareRepository == nil {
		return ""
	}
	return *t.SoftwareRepository
}

// GetSyncE retrieves the value of the leaf SyncE from the NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SyncE is set, it can
// safely use t.GetSyncE() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SyncE == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite) GetSyncE() bool {
	if t == nil || t.SyncE == nil {
		return false
	}
	return *t.SyncE
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.ConsoleAccess == 0 {
		t.ConsoleAccess = NokiaTypesSros_AdminState_disable
	}
	if t.PtpTc == nil {
		var v bool = false
		t.PtpTc = &v
	}
	if t.SyncE == nil {
		var v bool = false
		t.SyncE = &v
	}
	for _, e := range t.PortMap {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"satellite-id": t.SatelliteId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite.
func (*NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite_PortMap represents the /nokia-conf/configure/groups/group/satellite/ethernet-satellite/port-map YANG schema element.
type NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite_PortMap struct {
	ClientPortId *string `path:"client-port-id" module:"nokia-conf"`
	Primary      *string `path:"primary" module:"nokia-conf"`
	Secondary    *string `path:"secondary" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite_PortMap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite_PortMap) IsYANGGoStruct() {}

// GetClientPortId retrieves the value of the leaf ClientPortId from the NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite_PortMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClientPortId is set, it can
// safely use t.GetClientPortId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClientPortId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite_PortMap) GetClientPortId() string {
	if t == nil || t.ClientPortId == nil {
		return ""
	}
	return *t.ClientPortId
}

// GetPrimary retrieves the value of the leaf Primary from the NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite_PortMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Primary is set, it can
// safely use t.GetPrimary() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Primary == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite_PortMap) GetPrimary() string {
	if t == nil || t.Primary == nil {
		return ""
	}
	return *t.Primary
}

// GetSecondary retrieves the value of the leaf Secondary from the NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite_PortMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Secondary is set, it can
// safely use t.GetSecondary() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Secondary == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite_PortMap) GetSecondary() string {
	if t == nil || t.Secondary == nil {
		return ""
	}
	return *t.Secondary
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite_PortMap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite_PortMap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite_PortMap struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite_PortMap) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ClientPortId == nil {
		return nil, fmt.Errorf("nil value for key ClientPortId")
	}

	return map[string]interface{}{
		"client-port-id": *t.ClientPortId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite_PortMap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite_PortMap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite_PortMap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite_PortMap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite_PortMap.
func (*NokiaConf_Configure_Groups_Group_Satellite_EthernetSatellite_PortMap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Satellite_FileTransfer represents the /nokia-conf/configure/groups/group/satellite/file-transfer YANG schema element.
type NokiaConf_Configure_Groups_Group_Satellite_FileTransfer struct {
	Ftp *bool `path:"ftp" module:"nokia-conf"`
	Scp *bool `path:"scp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Satellite_FileTransfer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Satellite_FileTransfer) IsYANGGoStruct() {}

// GetFtp retrieves the value of the leaf Ftp from the NokiaConf_Configure_Groups_Group_Satellite_FileTransfer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ftp is set, it can
// safely use t.GetFtp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ftp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Satellite_FileTransfer) GetFtp() bool {
	if t == nil || t.Ftp == nil {
		return true
	}
	return *t.Ftp
}

// GetScp retrieves the value of the leaf Scp from the NokiaConf_Configure_Groups_Group_Satellite_FileTransfer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Scp is set, it can
// safely use t.GetScp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Scp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Satellite_FileTransfer) GetScp() bool {
	if t == nil || t.Scp == nil {
		return false
	}
	return *t.Scp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Satellite_FileTransfer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Satellite_FileTransfer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ftp == nil {
		var v bool = true
		t.Ftp = &v
	}
	if t.Scp == nil {
		var v bool = false
		t.Scp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Satellite_FileTransfer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Satellite_FileTransfer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Satellite_FileTransfer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Satellite_FileTransfer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Satellite_FileTransfer.
func (*NokiaConf_Configure_Groups_Group_Satellite_FileTransfer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Satellite_PortTemplate represents the /nokia-conf/configure/groups/group/satellite/port-template YANG schema element.
type NokiaConf_Configure_Groups_Group_Satellite_PortTemplate struct {
	AdminState   E_NokiaTypesSros_AdminState                                              `path:"admin-state" module:"nokia-conf"`
	Description  *string                                                                  `path:"description" module:"nokia-conf"`
	Port         map[string]*NokiaConf_Configure_Groups_Group_Satellite_PortTemplate_Port `path:"port" module:"nokia-conf"`
	SatType      E_NokiaTypesChassis_SatType                                              `path:"sat-type" module:"nokia-conf"`
	TemplateName *string                                                                  `path:"template-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Satellite_PortTemplate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Satellite_PortTemplate) IsYANGGoStruct() {}

// NewPort creates a new entry in the Port list of the
// NokiaConf_Configure_Groups_Group_Satellite_PortTemplate struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Satellite_PortTemplate) NewPort(SatPhysPortId string) (*NokiaConf_Configure_Groups_Group_Satellite_PortTemplate_Port, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Port == nil {
		t.Port = make(map[string]*NokiaConf_Configure_Groups_Group_Satellite_PortTemplate_Port)
	}

	key := SatPhysPortId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Port[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Port", key)
	}

	t.Port[key] = &NokiaConf_Configure_Groups_Group_Satellite_PortTemplate_Port{
		SatPhysPortId: &SatPhysPortId,
	}

	return t.Port[key], nil
}

// RenamePort renames an entry in the list Port within
// the NokiaConf_Configure_Groups_Group_Satellite_PortTemplate struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Satellite_PortTemplate) RenamePort(oldK, newK string) error {
	if _, ok := t.Port[newK]; ok {
		return fmt.Errorf("key %v already exists in Port", newK)
	}

	e, ok := t.Port[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Port", oldK)
	}
	e.SatPhysPortId = &newK

	t.Port[newK] = e
	delete(t.Port, oldK)
	return nil
}

// GetOrCreatePort retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Satellite_PortTemplate. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Satellite_PortTemplate) GetOrCreatePort(SatPhysPortId string) *NokiaConf_Configure_Groups_Group_Satellite_PortTemplate_Port {

	key := SatPhysPortId

	if v, ok := t.Port[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPort(SatPhysPortId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePort got unexpected error: %v", err))
	}
	return v
}

// GetPort retrieves the value with the specified key from
// the Port map field of NokiaConf_Configure_Groups_Group_Satellite_PortTemplate. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Satellite_PortTemplate) GetPort(SatPhysPortId string) *NokiaConf_Configure_Groups_Group_Satellite_PortTemplate_Port {

	if t == nil {
		return nil
	}

	key := SatPhysPortId

	if lm, ok := t.Port[key]; ok {
		return lm
	}
	return nil
}

// DeletePort deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Satellite_PortTemplate. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Satellite_PortTemplate) DeletePort(SatPhysPortId string) {
	key := SatPhysPortId

	delete(t.Port, key)
}

// AppendPort appends the supplied NokiaConf_Configure_Groups_Group_Satellite_PortTemplate_Port struct to the
// list Port of NokiaConf_Configure_Groups_Group_Satellite_PortTemplate. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Satellite_PortTemplate_Port already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Satellite_PortTemplate) AppendPort(v *NokiaConf_Configure_Groups_Group_Satellite_PortTemplate_Port) error {
	if v.SatPhysPortId == nil {
		return fmt.Errorf("invalid nil key received for SatPhysPortId")
	}

	key := *v.SatPhysPortId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Port == nil {
		t.Port = make(map[string]*NokiaConf_Configure_Groups_Group_Satellite_PortTemplate_Port)
	}

	if _, ok := t.Port[key]; ok {
		return fmt.Errorf("duplicate key for list Port %v", key)
	}

	t.Port[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Satellite_PortTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Satellite_PortTemplate) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Satellite_PortTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Satellite_PortTemplate) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetSatType retrieves the value of the leaf SatType from the NokiaConf_Configure_Groups_Group_Satellite_PortTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SatType is set, it can
// safely use t.GetSatType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SatType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Satellite_PortTemplate) GetSatType() E_NokiaTypesChassis_SatType {
	if t == nil || t.SatType == 0 {
		return 0
	}
	return t.SatType
}

// GetTemplateName retrieves the value of the leaf TemplateName from the NokiaConf_Configure_Groups_Group_Satellite_PortTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TemplateName is set, it can
// safely use t.GetTemplateName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TemplateName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Satellite_PortTemplate) GetTemplateName() string {
	if t == nil || t.TemplateName == nil {
		return ""
	}
	return *t.TemplateName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Satellite_PortTemplate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Satellite_PortTemplate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.Port {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Satellite_PortTemplate struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Satellite_PortTemplate) ΛListKeyMap() (map[string]interface{}, error) {
	if t.TemplateName == nil {
		return nil, fmt.Errorf("nil value for key TemplateName")
	}

	return map[string]interface{}{
		"template-name": *t.TemplateName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Satellite_PortTemplate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Satellite_PortTemplate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Satellite_PortTemplate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Satellite_PortTemplate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Satellite_PortTemplate.
func (*NokiaConf_Configure_Groups_Group_Satellite_PortTemplate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Satellite_PortTemplate_Port represents the /nokia-conf/configure/groups/group/satellite/port-template/port YANG schema element.
type NokiaConf_Configure_Groups_Group_Satellite_PortTemplate_Port struct {
	Role          E_NokiaConf_Configure_Groups_Group_Satellite_PortTemplate_Port_Role `path:"role" module:"nokia-conf"`
	SatPhysPortId *string                                                             `path:"sat-phys-port-id" module:"nokia-conf"`
	Uplink        *string                                                             `path:"uplink" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Satellite_PortTemplate_Port implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Satellite_PortTemplate_Port) IsYANGGoStruct() {}

// GetRole retrieves the value of the leaf Role from the NokiaConf_Configure_Groups_Group_Satellite_PortTemplate_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Role is set, it can
// safely use t.GetRole() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Role == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Satellite_PortTemplate_Port) GetRole() E_NokiaConf_Configure_Groups_Group_Satellite_PortTemplate_Port_Role {
	if t == nil || t.Role == 0 {
		return 0
	}
	return t.Role
}

// GetSatPhysPortId retrieves the value of the leaf SatPhysPortId from the NokiaConf_Configure_Groups_Group_Satellite_PortTemplate_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SatPhysPortId is set, it can
// safely use t.GetSatPhysPortId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SatPhysPortId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Satellite_PortTemplate_Port) GetSatPhysPortId() string {
	if t == nil || t.SatPhysPortId == nil {
		return ""
	}
	return *t.SatPhysPortId
}

// GetUplink retrieves the value of the leaf Uplink from the NokiaConf_Configure_Groups_Group_Satellite_PortTemplate_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Uplink is set, it can
// safely use t.GetUplink() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Uplink == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Satellite_PortTemplate_Port) GetUplink() string {
	if t == nil || t.Uplink == nil {
		return ""
	}
	return *t.Uplink
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Satellite_PortTemplate_Port
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Satellite_PortTemplate_Port) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Satellite_PortTemplate_Port struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Satellite_PortTemplate_Port) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SatPhysPortId == nil {
		return nil, fmt.Errorf("nil value for key SatPhysPortId")
	}

	return map[string]interface{}{
		"sat-phys-port-id": *t.SatPhysPortId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Satellite_PortTemplate_Port) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Satellite_PortTemplate_Port"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Satellite_PortTemplate_Port) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Satellite_PortTemplate_Port) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Satellite_PortTemplate_Port.
func (*NokiaConf_Configure_Groups_Group_Satellite_PortTemplate_Port) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Satellite_PortTopology represents the /nokia-conf/configure/groups/group/satellite/port-topology YANG schema element.
type NokiaConf_Configure_Groups_Group_Satellite_PortTopology struct {
	FarEndPortId *string `path:"far-end-port-id" module:"nokia-conf"`
	LocalPortId  *string `path:"local-port-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Satellite_PortTopology implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Satellite_PortTopology) IsYANGGoStruct() {}

// GetFarEndPortId retrieves the value of the leaf FarEndPortId from the NokiaConf_Configure_Groups_Group_Satellite_PortTopology
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FarEndPortId is set, it can
// safely use t.GetFarEndPortId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FarEndPortId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Satellite_PortTopology) GetFarEndPortId() string {
	if t == nil || t.FarEndPortId == nil {
		return ""
	}
	return *t.FarEndPortId
}

// GetLocalPortId retrieves the value of the leaf LocalPortId from the NokiaConf_Configure_Groups_Group_Satellite_PortTopology
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalPortId is set, it can
// safely use t.GetLocalPortId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalPortId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Satellite_PortTopology) GetLocalPortId() string {
	if t == nil || t.LocalPortId == nil {
		return ""
	}
	return *t.LocalPortId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Satellite_PortTopology
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Satellite_PortTopology) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Satellite_PortTopology struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Satellite_PortTopology) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LocalPortId == nil {
		return nil, fmt.Errorf("nil value for key LocalPortId")
	}

	return map[string]interface{}{
		"local-port-id": *t.LocalPortId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Satellite_PortTopology) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Satellite_PortTopology"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Satellite_PortTopology) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Satellite_PortTopology) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Satellite_PortTopology.
func (*NokiaConf_Configure_Groups_Group_Satellite_PortTopology) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service represents the /nokia-conf/configure/groups/group/service YANG schema element.
type NokiaConf_Configure_Groups_Group_Service struct {
	Cpipe      map[string]*NokiaConf_Configure_Groups_Group_Service_Cpipe                                                 `path:"cpipe" module:"nokia-conf"`
	Customer   map[string]*NokiaConf_Configure_Groups_Group_Service_Customer                                              `path:"customer" module:"nokia-conf"`
	Epipe      map[string]*NokiaConf_Configure_Groups_Group_Service_Epipe                                                 `path:"epipe" module:"nokia-conf"`
	Ies        map[string]*NokiaConf_Configure_Groups_Group_Service_Ies                                                   `path:"ies" module:"nokia-conf"`
	Ipfix      *NokiaConf_Configure_Groups_Group_Service_Ipfix                                                            `path:"ipfix" module:"nokia-conf" yangPresence:"true"`
	Ipipe      map[string]*NokiaConf_Configure_Groups_Group_Service_Ipipe                                                 `path:"ipipe" module:"nokia-conf"`
	MacList    map[string]*NokiaConf_Configure_Groups_Group_Service_MacList                                               `path:"mac-list" module:"nokia-conf"`
	MdAutoId   *NokiaConf_Configure_Groups_Group_Service_MdAutoId                                                         `path:"md-auto-id" module:"nokia-conf"`
	Mrp        *NokiaConf_Configure_Groups_Group_Service_Mrp                                                              `path:"mrp" module:"nokia-conf"`
	Nat        *NokiaConf_Configure_Groups_Group_Service_Nat                                                              `path:"nat" module:"nokia-conf" yangPresence:"true"`
	OperGroup  map[string]*NokiaConf_Configure_Groups_Group_Service_OperGroup                                             `path:"oper-group" module:"nokia-conf"`
	Pbb        *NokiaConf_Configure_Groups_Group_Service_Pbb                                                              `path:"pbb" module:"nokia-conf" yangPresence:"true"`
	ProxyArpNd *NokiaConf_Configure_Groups_Group_Service_ProxyArpNd                                                       `path:"proxy-arp-nd" module:"nokia-conf"`
	PwTemplate map[string]*NokiaConf_Configure_Groups_Group_Service_PwTemplate                                            `path:"pw-template" module:"nokia-conf"`
	Sdp        map[NokiaConf_Configure_Groups_Group_Service_Sdp_SdpId_Union]*NokiaConf_Configure_Groups_Group_Service_Sdp `path:"sdp" module:"nokia-conf"`
	SdpGroup   *NokiaConf_Configure_Groups_Group_Service_SdpGroup                                                         `path:"sdp-group" module:"nokia-conf" yangPresence:"true"`
	System     *NokiaConf_Configure_Groups_Group_Service_System                                                           `path:"system" module:"nokia-conf" yangPresence:"true"`
	Template   *NokiaConf_Configure_Groups_Group_Service_Template                                                         `path:"template" module:"nokia-conf"`
	Upnp       *NokiaConf_Configure_Groups_Group_Service_Upnp                                                             `path:"upnp" module:"nokia-conf"`
	Vpls       map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls                                                  `path:"vpls" module:"nokia-conf"`
	Vprn       map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn                                                  `path:"vprn" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service) IsYANGGoStruct() {}

// NewCpipe creates a new entry in the Cpipe list of the
// NokiaConf_Configure_Groups_Group_Service struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service) NewCpipe(ServiceName string) (*NokiaConf_Configure_Groups_Group_Service_Cpipe, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Cpipe == nil {
		t.Cpipe = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Cpipe)
	}

	key := ServiceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Cpipe[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Cpipe", key)
	}

	t.Cpipe[key] = &NokiaConf_Configure_Groups_Group_Service_Cpipe{
		ServiceName: &ServiceName,
	}

	return t.Cpipe[key], nil
}

// RenameCpipe renames an entry in the list Cpipe within
// the NokiaConf_Configure_Groups_Group_Service struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service) RenameCpipe(oldK, newK string) error {
	if _, ok := t.Cpipe[newK]; ok {
		return fmt.Errorf("key %v already exists in Cpipe", newK)
	}

	e, ok := t.Cpipe[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Cpipe", oldK)
	}
	e.ServiceName = &newK

	t.Cpipe[newK] = e
	delete(t.Cpipe, oldK)
	return nil
}

// GetOrCreateCpipe retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service) GetOrCreateCpipe(ServiceName string) *NokiaConf_Configure_Groups_Group_Service_Cpipe {

	key := ServiceName

	if v, ok := t.Cpipe[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCpipe(ServiceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCpipe got unexpected error: %v", err))
	}
	return v
}

// GetCpipe retrieves the value with the specified key from
// the Cpipe map field of NokiaConf_Configure_Groups_Group_Service. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service) GetCpipe(ServiceName string) *NokiaConf_Configure_Groups_Group_Service_Cpipe {

	if t == nil {
		return nil
	}

	key := ServiceName

	if lm, ok := t.Cpipe[key]; ok {
		return lm
	}
	return nil
}

// DeleteCpipe deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service) DeleteCpipe(ServiceName string) {
	key := ServiceName

	delete(t.Cpipe, key)
}

// AppendCpipe appends the supplied NokiaConf_Configure_Groups_Group_Service_Cpipe struct to the
// list Cpipe of NokiaConf_Configure_Groups_Group_Service. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Cpipe already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service) AppendCpipe(v *NokiaConf_Configure_Groups_Group_Service_Cpipe) error {
	if v.ServiceName == nil {
		return fmt.Errorf("invalid nil key received for ServiceName")
	}

	key := *v.ServiceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Cpipe == nil {
		t.Cpipe = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Cpipe)
	}

	if _, ok := t.Cpipe[key]; ok {
		return fmt.Errorf("duplicate key for list Cpipe %v", key)
	}

	t.Cpipe[key] = v
	return nil
}

// NewCustomer creates a new entry in the Customer list of the
// NokiaConf_Configure_Groups_Group_Service struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service) NewCustomer(CustomerName string) (*NokiaConf_Configure_Groups_Group_Service_Customer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Customer == nil {
		t.Customer = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Customer)
	}

	key := CustomerName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Customer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Customer", key)
	}

	t.Customer[key] = &NokiaConf_Configure_Groups_Group_Service_Customer{
		CustomerName: &CustomerName,
	}

	return t.Customer[key], nil
}

// RenameCustomer renames an entry in the list Customer within
// the NokiaConf_Configure_Groups_Group_Service struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service) RenameCustomer(oldK, newK string) error {
	if _, ok := t.Customer[newK]; ok {
		return fmt.Errorf("key %v already exists in Customer", newK)
	}

	e, ok := t.Customer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Customer", oldK)
	}
	e.CustomerName = &newK

	t.Customer[newK] = e
	delete(t.Customer, oldK)
	return nil
}

// GetOrCreateCustomer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service) GetOrCreateCustomer(CustomerName string) *NokiaConf_Configure_Groups_Group_Service_Customer {

	key := CustomerName

	if v, ok := t.Customer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCustomer(CustomerName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCustomer got unexpected error: %v", err))
	}
	return v
}

// GetCustomer retrieves the value with the specified key from
// the Customer map field of NokiaConf_Configure_Groups_Group_Service. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service) GetCustomer(CustomerName string) *NokiaConf_Configure_Groups_Group_Service_Customer {

	if t == nil {
		return nil
	}

	key := CustomerName

	if lm, ok := t.Customer[key]; ok {
		return lm
	}
	return nil
}

// DeleteCustomer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service) DeleteCustomer(CustomerName string) {
	key := CustomerName

	delete(t.Customer, key)
}

// AppendCustomer appends the supplied NokiaConf_Configure_Groups_Group_Service_Customer struct to the
// list Customer of NokiaConf_Configure_Groups_Group_Service. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Customer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service) AppendCustomer(v *NokiaConf_Configure_Groups_Group_Service_Customer) error {
	if v.CustomerName == nil {
		return fmt.Errorf("invalid nil key received for CustomerName")
	}

	key := *v.CustomerName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Customer == nil {
		t.Customer = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Customer)
	}

	if _, ok := t.Customer[key]; ok {
		return fmt.Errorf("duplicate key for list Customer %v", key)
	}

	t.Customer[key] = v
	return nil
}

// NewEpipe creates a new entry in the Epipe list of the
// NokiaConf_Configure_Groups_Group_Service struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service) NewEpipe(ServiceName string) (*NokiaConf_Configure_Groups_Group_Service_Epipe, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Epipe == nil {
		t.Epipe = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Epipe)
	}

	key := ServiceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Epipe[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Epipe", key)
	}

	t.Epipe[key] = &NokiaConf_Configure_Groups_Group_Service_Epipe{
		ServiceName: &ServiceName,
	}

	return t.Epipe[key], nil
}

// RenameEpipe renames an entry in the list Epipe within
// the NokiaConf_Configure_Groups_Group_Service struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service) RenameEpipe(oldK, newK string) error {
	if _, ok := t.Epipe[newK]; ok {
		return fmt.Errorf("key %v already exists in Epipe", newK)
	}

	e, ok := t.Epipe[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Epipe", oldK)
	}
	e.ServiceName = &newK

	t.Epipe[newK] = e
	delete(t.Epipe, oldK)
	return nil
}

// GetOrCreateEpipe retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service) GetOrCreateEpipe(ServiceName string) *NokiaConf_Configure_Groups_Group_Service_Epipe {

	key := ServiceName

	if v, ok := t.Epipe[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEpipe(ServiceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEpipe got unexpected error: %v", err))
	}
	return v
}

// GetEpipe retrieves the value with the specified key from
// the Epipe map field of NokiaConf_Configure_Groups_Group_Service. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service) GetEpipe(ServiceName string) *NokiaConf_Configure_Groups_Group_Service_Epipe {

	if t == nil {
		return nil
	}

	key := ServiceName

	if lm, ok := t.Epipe[key]; ok {
		return lm
	}
	return nil
}

// DeleteEpipe deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service) DeleteEpipe(ServiceName string) {
	key := ServiceName

	delete(t.Epipe, key)
}

// AppendEpipe appends the supplied NokiaConf_Configure_Groups_Group_Service_Epipe struct to the
// list Epipe of NokiaConf_Configure_Groups_Group_Service. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Epipe already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service) AppendEpipe(v *NokiaConf_Configure_Groups_Group_Service_Epipe) error {
	if v.ServiceName == nil {
		return fmt.Errorf("invalid nil key received for ServiceName")
	}

	key := *v.ServiceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Epipe == nil {
		t.Epipe = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Epipe)
	}

	if _, ok := t.Epipe[key]; ok {
		return fmt.Errorf("duplicate key for list Epipe %v", key)
	}

	t.Epipe[key] = v
	return nil
}

// NewIes creates a new entry in the Ies list of the
// NokiaConf_Configure_Groups_Group_Service struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service) NewIes(ServiceName string) (*NokiaConf_Configure_Groups_Group_Service_Ies, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ies == nil {
		t.Ies = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Ies)
	}

	key := ServiceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ies[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ies", key)
	}

	t.Ies[key] = &NokiaConf_Configure_Groups_Group_Service_Ies{
		ServiceName: &ServiceName,
	}

	return t.Ies[key], nil
}

// RenameIes renames an entry in the list Ies within
// the NokiaConf_Configure_Groups_Group_Service struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service) RenameIes(oldK, newK string) error {
	if _, ok := t.Ies[newK]; ok {
		return fmt.Errorf("key %v already exists in Ies", newK)
	}

	e, ok := t.Ies[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Ies", oldK)
	}
	e.ServiceName = &newK

	t.Ies[newK] = e
	delete(t.Ies, oldK)
	return nil
}

// GetOrCreateIes retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service) GetOrCreateIes(ServiceName string) *NokiaConf_Configure_Groups_Group_Service_Ies {

	key := ServiceName

	if v, ok := t.Ies[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIes(ServiceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIes got unexpected error: %v", err))
	}
	return v
}

// GetIes retrieves the value with the specified key from
// the Ies map field of NokiaConf_Configure_Groups_Group_Service. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service) GetIes(ServiceName string) *NokiaConf_Configure_Groups_Group_Service_Ies {

	if t == nil {
		return nil
	}

	key := ServiceName

	if lm, ok := t.Ies[key]; ok {
		return lm
	}
	return nil
}

// DeleteIes deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service) DeleteIes(ServiceName string) {
	key := ServiceName

	delete(t.Ies, key)
}

// AppendIes appends the supplied NokiaConf_Configure_Groups_Group_Service_Ies struct to the
// list Ies of NokiaConf_Configure_Groups_Group_Service. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Ies already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service) AppendIes(v *NokiaConf_Configure_Groups_Group_Service_Ies) error {
	if v.ServiceName == nil {
		return fmt.Errorf("invalid nil key received for ServiceName")
	}

	key := *v.ServiceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ies == nil {
		t.Ies = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Ies)
	}

	if _, ok := t.Ies[key]; ok {
		return fmt.Errorf("duplicate key for list Ies %v", key)
	}

	t.Ies[key] = v
	return nil
}

// NewIpipe creates a new entry in the Ipipe list of the
// NokiaConf_Configure_Groups_Group_Service struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service) NewIpipe(ServiceName string) (*NokiaConf_Configure_Groups_Group_Service_Ipipe, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipipe == nil {
		t.Ipipe = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Ipipe)
	}

	key := ServiceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ipipe[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ipipe", key)
	}

	t.Ipipe[key] = &NokiaConf_Configure_Groups_Group_Service_Ipipe{
		ServiceName: &ServiceName,
	}

	return t.Ipipe[key], nil
}

// RenameIpipe renames an entry in the list Ipipe within
// the NokiaConf_Configure_Groups_Group_Service struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service) RenameIpipe(oldK, newK string) error {
	if _, ok := t.Ipipe[newK]; ok {
		return fmt.Errorf("key %v already exists in Ipipe", newK)
	}

	e, ok := t.Ipipe[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Ipipe", oldK)
	}
	e.ServiceName = &newK

	t.Ipipe[newK] = e
	delete(t.Ipipe, oldK)
	return nil
}

// GetOrCreateIpipe retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service) GetOrCreateIpipe(ServiceName string) *NokiaConf_Configure_Groups_Group_Service_Ipipe {

	key := ServiceName

	if v, ok := t.Ipipe[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpipe(ServiceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpipe got unexpected error: %v", err))
	}
	return v
}

// GetIpipe retrieves the value with the specified key from
// the Ipipe map field of NokiaConf_Configure_Groups_Group_Service. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service) GetIpipe(ServiceName string) *NokiaConf_Configure_Groups_Group_Service_Ipipe {

	if t == nil {
		return nil
	}

	key := ServiceName

	if lm, ok := t.Ipipe[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpipe deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service) DeleteIpipe(ServiceName string) {
	key := ServiceName

	delete(t.Ipipe, key)
}

// AppendIpipe appends the supplied NokiaConf_Configure_Groups_Group_Service_Ipipe struct to the
// list Ipipe of NokiaConf_Configure_Groups_Group_Service. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Ipipe already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service) AppendIpipe(v *NokiaConf_Configure_Groups_Group_Service_Ipipe) error {
	if v.ServiceName == nil {
		return fmt.Errorf("invalid nil key received for ServiceName")
	}

	key := *v.ServiceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipipe == nil {
		t.Ipipe = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Ipipe)
	}

	if _, ok := t.Ipipe[key]; ok {
		return fmt.Errorf("duplicate key for list Ipipe %v", key)
	}

	t.Ipipe[key] = v
	return nil
}

// NewMacList creates a new entry in the MacList list of the
// NokiaConf_Configure_Groups_Group_Service struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service) NewMacList(Name string) (*NokiaConf_Configure_Groups_Group_Service_MacList, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MacList == nil {
		t.MacList = make(map[string]*NokiaConf_Configure_Groups_Group_Service_MacList)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MacList[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MacList", key)
	}

	t.MacList[key] = &NokiaConf_Configure_Groups_Group_Service_MacList{
		Name: &Name,
	}

	return t.MacList[key], nil
}

// RenameMacList renames an entry in the list MacList within
// the NokiaConf_Configure_Groups_Group_Service struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service) RenameMacList(oldK, newK string) error {
	if _, ok := t.MacList[newK]; ok {
		return fmt.Errorf("key %v already exists in MacList", newK)
	}

	e, ok := t.MacList[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MacList", oldK)
	}
	e.Name = &newK

	t.MacList[newK] = e
	delete(t.MacList, oldK)
	return nil
}

// GetOrCreateMacList retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service) GetOrCreateMacList(Name string) *NokiaConf_Configure_Groups_Group_Service_MacList {

	key := Name

	if v, ok := t.MacList[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMacList(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMacList got unexpected error: %v", err))
	}
	return v
}

// GetMacList retrieves the value with the specified key from
// the MacList map field of NokiaConf_Configure_Groups_Group_Service. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service) GetMacList(Name string) *NokiaConf_Configure_Groups_Group_Service_MacList {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.MacList[key]; ok {
		return lm
	}
	return nil
}

// DeleteMacList deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service) DeleteMacList(Name string) {
	key := Name

	delete(t.MacList, key)
}

// AppendMacList appends the supplied NokiaConf_Configure_Groups_Group_Service_MacList struct to the
// list MacList of NokiaConf_Configure_Groups_Group_Service. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_MacList already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service) AppendMacList(v *NokiaConf_Configure_Groups_Group_Service_MacList) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MacList == nil {
		t.MacList = make(map[string]*NokiaConf_Configure_Groups_Group_Service_MacList)
	}

	if _, ok := t.MacList[key]; ok {
		return fmt.Errorf("duplicate key for list MacList %v", key)
	}

	t.MacList[key] = v
	return nil
}

// NewOperGroup creates a new entry in the OperGroup list of the
// NokiaConf_Configure_Groups_Group_Service struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service) NewOperGroup(Name string) (*NokiaConf_Configure_Groups_Group_Service_OperGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.OperGroup == nil {
		t.OperGroup = make(map[string]*NokiaConf_Configure_Groups_Group_Service_OperGroup)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.OperGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list OperGroup", key)
	}

	t.OperGroup[key] = &NokiaConf_Configure_Groups_Group_Service_OperGroup{
		Name: &Name,
	}

	return t.OperGroup[key], nil
}

// RenameOperGroup renames an entry in the list OperGroup within
// the NokiaConf_Configure_Groups_Group_Service struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service) RenameOperGroup(oldK, newK string) error {
	if _, ok := t.OperGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in OperGroup", newK)
	}

	e, ok := t.OperGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in OperGroup", oldK)
	}
	e.Name = &newK

	t.OperGroup[newK] = e
	delete(t.OperGroup, oldK)
	return nil
}

// GetOrCreateOperGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service) GetOrCreateOperGroup(Name string) *NokiaConf_Configure_Groups_Group_Service_OperGroup {

	key := Name

	if v, ok := t.OperGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewOperGroup(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateOperGroup got unexpected error: %v", err))
	}
	return v
}

// GetOperGroup retrieves the value with the specified key from
// the OperGroup map field of NokiaConf_Configure_Groups_Group_Service. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service) GetOperGroup(Name string) *NokiaConf_Configure_Groups_Group_Service_OperGroup {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.OperGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteOperGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service) DeleteOperGroup(Name string) {
	key := Name

	delete(t.OperGroup, key)
}

// AppendOperGroup appends the supplied NokiaConf_Configure_Groups_Group_Service_OperGroup struct to the
// list OperGroup of NokiaConf_Configure_Groups_Group_Service. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_OperGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service) AppendOperGroup(v *NokiaConf_Configure_Groups_Group_Service_OperGroup) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.OperGroup == nil {
		t.OperGroup = make(map[string]*NokiaConf_Configure_Groups_Group_Service_OperGroup)
	}

	if _, ok := t.OperGroup[key]; ok {
		return fmt.Errorf("duplicate key for list OperGroup %v", key)
	}

	t.OperGroup[key] = v
	return nil
}

// NewPwTemplate creates a new entry in the PwTemplate list of the
// NokiaConf_Configure_Groups_Group_Service struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service) NewPwTemplate(PwTemplateName string) (*NokiaConf_Configure_Groups_Group_Service_PwTemplate, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PwTemplate == nil {
		t.PwTemplate = make(map[string]*NokiaConf_Configure_Groups_Group_Service_PwTemplate)
	}

	key := PwTemplateName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PwTemplate[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PwTemplate", key)
	}

	t.PwTemplate[key] = &NokiaConf_Configure_Groups_Group_Service_PwTemplate{
		PwTemplateName: &PwTemplateName,
	}

	return t.PwTemplate[key], nil
}

// RenamePwTemplate renames an entry in the list PwTemplate within
// the NokiaConf_Configure_Groups_Group_Service struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service) RenamePwTemplate(oldK, newK string) error {
	if _, ok := t.PwTemplate[newK]; ok {
		return fmt.Errorf("key %v already exists in PwTemplate", newK)
	}

	e, ok := t.PwTemplate[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PwTemplate", oldK)
	}
	e.PwTemplateName = &newK

	t.PwTemplate[newK] = e
	delete(t.PwTemplate, oldK)
	return nil
}

// GetOrCreatePwTemplate retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service) GetOrCreatePwTemplate(PwTemplateName string) *NokiaConf_Configure_Groups_Group_Service_PwTemplate {

	key := PwTemplateName

	if v, ok := t.PwTemplate[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPwTemplate(PwTemplateName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePwTemplate got unexpected error: %v", err))
	}
	return v
}

// GetPwTemplate retrieves the value with the specified key from
// the PwTemplate map field of NokiaConf_Configure_Groups_Group_Service. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service) GetPwTemplate(PwTemplateName string) *NokiaConf_Configure_Groups_Group_Service_PwTemplate {

	if t == nil {
		return nil
	}

	key := PwTemplateName

	if lm, ok := t.PwTemplate[key]; ok {
		return lm
	}
	return nil
}

// DeletePwTemplate deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service) DeletePwTemplate(PwTemplateName string) {
	key := PwTemplateName

	delete(t.PwTemplate, key)
}

// AppendPwTemplate appends the supplied NokiaConf_Configure_Groups_Group_Service_PwTemplate struct to the
// list PwTemplate of NokiaConf_Configure_Groups_Group_Service. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_PwTemplate already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service) AppendPwTemplate(v *NokiaConf_Configure_Groups_Group_Service_PwTemplate) error {
	if v.PwTemplateName == nil {
		return fmt.Errorf("invalid nil key received for PwTemplateName")
	}

	key := *v.PwTemplateName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PwTemplate == nil {
		t.PwTemplate = make(map[string]*NokiaConf_Configure_Groups_Group_Service_PwTemplate)
	}

	if _, ok := t.PwTemplate[key]; ok {
		return fmt.Errorf("duplicate key for list PwTemplate %v", key)
	}

	t.PwTemplate[key] = v
	return nil
}

// NewSdp creates a new entry in the Sdp list of the
// NokiaConf_Configure_Groups_Group_Service struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service) NewSdp(SdpId NokiaConf_Configure_Groups_Group_Service_Sdp_SdpId_Union) (*NokiaConf_Configure_Groups_Group_Service_Sdp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sdp == nil {
		t.Sdp = make(map[NokiaConf_Configure_Groups_Group_Service_Sdp_SdpId_Union]*NokiaConf_Configure_Groups_Group_Service_Sdp)
	}

	key := SdpId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Sdp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Sdp", key)
	}

	t.Sdp[key] = &NokiaConf_Configure_Groups_Group_Service_Sdp{
		SdpId: SdpId,
	}

	return t.Sdp[key], nil
}

// RenameSdp renames an entry in the list Sdp within
// the NokiaConf_Configure_Groups_Group_Service struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service) RenameSdp(oldK, newK NokiaConf_Configure_Groups_Group_Service_Sdp_SdpId_Union) error {
	if _, ok := t.Sdp[newK]; ok {
		return fmt.Errorf("key %v already exists in Sdp", newK)
	}

	e, ok := t.Sdp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Sdp", oldK)
	}
	e.SdpId = newK

	t.Sdp[newK] = e
	delete(t.Sdp, oldK)
	return nil
}

// GetOrCreateSdp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service) GetOrCreateSdp(SdpId NokiaConf_Configure_Groups_Group_Service_Sdp_SdpId_Union) *NokiaConf_Configure_Groups_Group_Service_Sdp {

	key := SdpId

	if v, ok := t.Sdp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSdp(SdpId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSdp got unexpected error: %v", err))
	}
	return v
}

// GetSdp retrieves the value with the specified key from
// the Sdp map field of NokiaConf_Configure_Groups_Group_Service. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service) GetSdp(SdpId NokiaConf_Configure_Groups_Group_Service_Sdp_SdpId_Union) *NokiaConf_Configure_Groups_Group_Service_Sdp {

	if t == nil {
		return nil
	}

	key := SdpId

	if lm, ok := t.Sdp[key]; ok {
		return lm
	}
	return nil
}

// DeleteSdp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service) DeleteSdp(SdpId NokiaConf_Configure_Groups_Group_Service_Sdp_SdpId_Union) {
	key := SdpId

	delete(t.Sdp, key)
}

// AppendSdp appends the supplied NokiaConf_Configure_Groups_Group_Service_Sdp struct to the
// list Sdp of NokiaConf_Configure_Groups_Group_Service. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Sdp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service) AppendSdp(v *NokiaConf_Configure_Groups_Group_Service_Sdp) error {
	key := v.SdpId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sdp == nil {
		t.Sdp = make(map[NokiaConf_Configure_Groups_Group_Service_Sdp_SdpId_Union]*NokiaConf_Configure_Groups_Group_Service_Sdp)
	}

	if _, ok := t.Sdp[key]; ok {
		return fmt.Errorf("duplicate key for list Sdp %v", key)
	}

	t.Sdp[key] = v
	return nil
}

// NewVpls creates a new entry in the Vpls list of the
// NokiaConf_Configure_Groups_Group_Service struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service) NewVpls(ServiceName string) (*NokiaConf_Configure_Groups_Group_Service_Vpls, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vpls == nil {
		t.Vpls = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls)
	}

	key := ServiceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Vpls[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Vpls", key)
	}

	t.Vpls[key] = &NokiaConf_Configure_Groups_Group_Service_Vpls{
		ServiceName: &ServiceName,
	}

	return t.Vpls[key], nil
}

// RenameVpls renames an entry in the list Vpls within
// the NokiaConf_Configure_Groups_Group_Service struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service) RenameVpls(oldK, newK string) error {
	if _, ok := t.Vpls[newK]; ok {
		return fmt.Errorf("key %v already exists in Vpls", newK)
	}

	e, ok := t.Vpls[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Vpls", oldK)
	}
	e.ServiceName = &newK

	t.Vpls[newK] = e
	delete(t.Vpls, oldK)
	return nil
}

// GetOrCreateVpls retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service) GetOrCreateVpls(ServiceName string) *NokiaConf_Configure_Groups_Group_Service_Vpls {

	key := ServiceName

	if v, ok := t.Vpls[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVpls(ServiceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVpls got unexpected error: %v", err))
	}
	return v
}

// GetVpls retrieves the value with the specified key from
// the Vpls map field of NokiaConf_Configure_Groups_Group_Service. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service) GetVpls(ServiceName string) *NokiaConf_Configure_Groups_Group_Service_Vpls {

	if t == nil {
		return nil
	}

	key := ServiceName

	if lm, ok := t.Vpls[key]; ok {
		return lm
	}
	return nil
}

// DeleteVpls deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service) DeleteVpls(ServiceName string) {
	key := ServiceName

	delete(t.Vpls, key)
}

// AppendVpls appends the supplied NokiaConf_Configure_Groups_Group_Service_Vpls struct to the
// list Vpls of NokiaConf_Configure_Groups_Group_Service. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vpls already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service) AppendVpls(v *NokiaConf_Configure_Groups_Group_Service_Vpls) error {
	if v.ServiceName == nil {
		return fmt.Errorf("invalid nil key received for ServiceName")
	}

	key := *v.ServiceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vpls == nil {
		t.Vpls = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vpls)
	}

	if _, ok := t.Vpls[key]; ok {
		return fmt.Errorf("duplicate key for list Vpls %v", key)
	}

	t.Vpls[key] = v
	return nil
}

// NewVprn creates a new entry in the Vprn list of the
// NokiaConf_Configure_Groups_Group_Service struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service) NewVprn(ServiceName string) (*NokiaConf_Configure_Groups_Group_Service_Vprn, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vprn == nil {
		t.Vprn = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn)
	}

	key := ServiceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Vprn[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Vprn", key)
	}

	t.Vprn[key] = &NokiaConf_Configure_Groups_Group_Service_Vprn{
		ServiceName: &ServiceName,
	}

	return t.Vprn[key], nil
}

// RenameVprn renames an entry in the list Vprn within
// the NokiaConf_Configure_Groups_Group_Service struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service) RenameVprn(oldK, newK string) error {
	if _, ok := t.Vprn[newK]; ok {
		return fmt.Errorf("key %v already exists in Vprn", newK)
	}

	e, ok := t.Vprn[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Vprn", oldK)
	}
	e.ServiceName = &newK

	t.Vprn[newK] = e
	delete(t.Vprn, oldK)
	return nil
}

// GetOrCreateVprn retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service) GetOrCreateVprn(ServiceName string) *NokiaConf_Configure_Groups_Group_Service_Vprn {

	key := ServiceName

	if v, ok := t.Vprn[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVprn(ServiceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVprn got unexpected error: %v", err))
	}
	return v
}

// GetVprn retrieves the value with the specified key from
// the Vprn map field of NokiaConf_Configure_Groups_Group_Service. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service) GetVprn(ServiceName string) *NokiaConf_Configure_Groups_Group_Service_Vprn {

	if t == nil {
		return nil
	}

	key := ServiceName

	if lm, ok := t.Vprn[key]; ok {
		return lm
	}
	return nil
}

// DeleteVprn deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service) DeleteVprn(ServiceName string) {
	key := ServiceName

	delete(t.Vprn, key)
}

// AppendVprn appends the supplied NokiaConf_Configure_Groups_Group_Service_Vprn struct to the
// list Vprn of NokiaConf_Configure_Groups_Group_Service. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Vprn already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service) AppendVprn(v *NokiaConf_Configure_Groups_Group_Service_Vprn) error {
	if v.ServiceName == nil {
		return fmt.Errorf("invalid nil key received for ServiceName")
	}

	key := *v.ServiceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vprn == nil {
		t.Vprn = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Vprn)
	}

	if _, ok := t.Vprn[key]; ok {
		return fmt.Errorf("duplicate key for list Vprn %v", key)
	}

	t.Vprn[key] = v
	return nil
}

// GetOrCreateIpfix retrieves the value of the Ipfix field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service) GetOrCreateIpfix() *NokiaConf_Configure_Groups_Group_Service_Ipfix {
	if t.Ipfix != nil {
		return t.Ipfix
	}
	t.Ipfix = &NokiaConf_Configure_Groups_Group_Service_Ipfix{}
	return t.Ipfix
}

// GetOrCreateMdAutoId retrieves the value of the MdAutoId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service) GetOrCreateMdAutoId() *NokiaConf_Configure_Groups_Group_Service_MdAutoId {
	if t.MdAutoId != nil {
		return t.MdAutoId
	}
	t.MdAutoId = &NokiaConf_Configure_Groups_Group_Service_MdAutoId{}
	return t.MdAutoId
}

// GetOrCreateMrp retrieves the value of the Mrp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service) GetOrCreateMrp() *NokiaConf_Configure_Groups_Group_Service_Mrp {
	if t.Mrp != nil {
		return t.Mrp
	}
	t.Mrp = &NokiaConf_Configure_Groups_Group_Service_Mrp{}
	return t.Mrp
}

// GetOrCreateNat retrieves the value of the Nat field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service) GetOrCreateNat() *NokiaConf_Configure_Groups_Group_Service_Nat {
	if t.Nat != nil {
		return t.Nat
	}
	t.Nat = &NokiaConf_Configure_Groups_Group_Service_Nat{}
	return t.Nat
}

// GetOrCreatePbb retrieves the value of the Pbb field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service) GetOrCreatePbb() *NokiaConf_Configure_Groups_Group_Service_Pbb {
	if t.Pbb != nil {
		return t.Pbb
	}
	t.Pbb = &NokiaConf_Configure_Groups_Group_Service_Pbb{}
	return t.Pbb
}

// GetOrCreateProxyArpNd retrieves the value of the ProxyArpNd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service) GetOrCreateProxyArpNd() *NokiaConf_Configure_Groups_Group_Service_ProxyArpNd {
	if t.ProxyArpNd != nil {
		return t.ProxyArpNd
	}
	t.ProxyArpNd = &NokiaConf_Configure_Groups_Group_Service_ProxyArpNd{}
	return t.ProxyArpNd
}

// GetOrCreateSdpGroup retrieves the value of the SdpGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service) GetOrCreateSdpGroup() *NokiaConf_Configure_Groups_Group_Service_SdpGroup {
	if t.SdpGroup != nil {
		return t.SdpGroup
	}
	t.SdpGroup = &NokiaConf_Configure_Groups_Group_Service_SdpGroup{}
	return t.SdpGroup
}

// GetOrCreateSystem retrieves the value of the System field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service) GetOrCreateSystem() *NokiaConf_Configure_Groups_Group_Service_System {
	if t.System != nil {
		return t.System
	}
	t.System = &NokiaConf_Configure_Groups_Group_Service_System{}
	return t.System
}

// GetOrCreateTemplate retrieves the value of the Template field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service) GetOrCreateTemplate() *NokiaConf_Configure_Groups_Group_Service_Template {
	if t.Template != nil {
		return t.Template
	}
	t.Template = &NokiaConf_Configure_Groups_Group_Service_Template{}
	return t.Template
}

// GetOrCreateUpnp retrieves the value of the Upnp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service) GetOrCreateUpnp() *NokiaConf_Configure_Groups_Group_Service_Upnp {
	if t.Upnp != nil {
		return t.Upnp
	}
	t.Upnp = &NokiaConf_Configure_Groups_Group_Service_Upnp{}
	return t.Upnp
}

// GetIpfix returns the value of the Ipfix struct pointer
// from NokiaConf_Configure_Groups_Group_Service. If the receiver or the field Ipfix is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service) GetIpfix() *NokiaConf_Configure_Groups_Group_Service_Ipfix {
	if t != nil && t.Ipfix != nil {
		return t.Ipfix
	}
	return nil
}

// GetMdAutoId returns the value of the MdAutoId struct pointer
// from NokiaConf_Configure_Groups_Group_Service. If the receiver or the field MdAutoId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service) GetMdAutoId() *NokiaConf_Configure_Groups_Group_Service_MdAutoId {
	if t != nil && t.MdAutoId != nil {
		return t.MdAutoId
	}
	return nil
}

// GetMrp returns the value of the Mrp struct pointer
// from NokiaConf_Configure_Groups_Group_Service. If the receiver or the field Mrp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service) GetMrp() *NokiaConf_Configure_Groups_Group_Service_Mrp {
	if t != nil && t.Mrp != nil {
		return t.Mrp
	}
	return nil
}

// GetNat returns the value of the Nat struct pointer
// from NokiaConf_Configure_Groups_Group_Service. If the receiver or the field Nat is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service) GetNat() *NokiaConf_Configure_Groups_Group_Service_Nat {
	if t != nil && t.Nat != nil {
		return t.Nat
	}
	return nil
}

// GetPbb returns the value of the Pbb struct pointer
// from NokiaConf_Configure_Groups_Group_Service. If the receiver or the field Pbb is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service) GetPbb() *NokiaConf_Configure_Groups_Group_Service_Pbb {
	if t != nil && t.Pbb != nil {
		return t.Pbb
	}
	return nil
}

// GetProxyArpNd returns the value of the ProxyArpNd struct pointer
// from NokiaConf_Configure_Groups_Group_Service. If the receiver or the field ProxyArpNd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service) GetProxyArpNd() *NokiaConf_Configure_Groups_Group_Service_ProxyArpNd {
	if t != nil && t.ProxyArpNd != nil {
		return t.ProxyArpNd
	}
	return nil
}

// GetSdpGroup returns the value of the SdpGroup struct pointer
// from NokiaConf_Configure_Groups_Group_Service. If the receiver or the field SdpGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service) GetSdpGroup() *NokiaConf_Configure_Groups_Group_Service_SdpGroup {
	if t != nil && t.SdpGroup != nil {
		return t.SdpGroup
	}
	return nil
}

// GetSystem returns the value of the System struct pointer
// from NokiaConf_Configure_Groups_Group_Service. If the receiver or the field System is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service) GetSystem() *NokiaConf_Configure_Groups_Group_Service_System {
	if t != nil && t.System != nil {
		return t.System
	}
	return nil
}

// GetTemplate returns the value of the Template struct pointer
// from NokiaConf_Configure_Groups_Group_Service. If the receiver or the field Template is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service) GetTemplate() *NokiaConf_Configure_Groups_Group_Service_Template {
	if t != nil && t.Template != nil {
		return t.Template
	}
	return nil
}

// GetUpnp returns the value of the Upnp struct pointer
// from NokiaConf_Configure_Groups_Group_Service. If the receiver or the field Upnp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service) GetUpnp() *NokiaConf_Configure_Groups_Group_Service_Upnp {
	if t != nil && t.Upnp != nil {
		return t.Upnp
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ipfix.PopulateDefaults()
	t.MdAutoId.PopulateDefaults()
	t.Mrp.PopulateDefaults()
	t.Nat.PopulateDefaults()
	t.Pbb.PopulateDefaults()
	t.ProxyArpNd.PopulateDefaults()
	t.SdpGroup.PopulateDefaults()
	t.System.PopulateDefaults()
	t.Template.PopulateDefaults()
	t.Upnp.PopulateDefaults()
	for _, e := range t.Cpipe {
		e.PopulateDefaults()
	}
	for _, e := range t.Customer {
		e.PopulateDefaults()
	}
	for _, e := range t.Epipe {
		e.PopulateDefaults()
	}
	for _, e := range t.Ies {
		e.PopulateDefaults()
	}
	for _, e := range t.Ipipe {
		e.PopulateDefaults()
	}
	for _, e := range t.MacList {
		e.PopulateDefaults()
	}
	for _, e := range t.OperGroup {
		e.PopulateDefaults()
	}
	for _, e := range t.PwTemplate {
		e.PopulateDefaults()
	}
	for _, e := range t.Sdp {
		e.PopulateDefaults()
	}
	for _, e := range t.Vpls {
		e.PopulateDefaults()
	}
	for _, e := range t.Vprn {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service.
func (*NokiaConf_Configure_Groups_Group_Service) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe represents the /nokia-conf/configure/groups/group/service/cpipe YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe struct {
	AdminState  E_NokiaTypesSros_AdminState                                         `path:"admin-state" module:"nokia-conf"`
	Customer    *string                                                             `path:"customer" module:"nokia-conf"`
	Description *string                                                             `path:"description" module:"nokia-conf"`
	Endpoint    map[string]*NokiaConf_Configure_Groups_Group_Service_Cpipe_Endpoint `path:"endpoint" module:"nokia-conf"`
	Sap         map[string]*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap      `path:"sap" module:"nokia-conf"`
	ServiceId   *uint32                                                             `path:"service-id" module:"nokia-conf"`
	ServiceMtu  *int32                                                              `path:"service-mtu" module:"nokia-conf"`
	ServiceName *string                                                             `path:"service-name" module:"nokia-conf"`
	SpokeSdp    map[string]*NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp `path:"spoke-sdp" module:"nokia-conf"`
	Test        *bool                                                               `path:"test" module:"nokia-conf"`
	VcSwitching *bool                                                               `path:"vc-switching" module:"nokia-conf"`
	VcType      E_NokiaTypesServices_CpipeVcType                                    `path:"vc-type" module:"nokia-conf"`
	VpnId       *uint32                                                             `path:"vpn-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe) IsYANGGoStruct() {}

// NewEndpoint creates a new entry in the Endpoint list of the
// NokiaConf_Configure_Groups_Group_Service_Cpipe struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe) NewEndpoint(Name string) (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Endpoint, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Endpoint == nil {
		t.Endpoint = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Cpipe_Endpoint)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Endpoint[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Endpoint", key)
	}

	t.Endpoint[key] = &NokiaConf_Configure_Groups_Group_Service_Cpipe_Endpoint{
		Name: &Name,
	}

	return t.Endpoint[key], nil
}

// RenameEndpoint renames an entry in the list Endpoint within
// the NokiaConf_Configure_Groups_Group_Service_Cpipe struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe) RenameEndpoint(oldK, newK string) error {
	if _, ok := t.Endpoint[newK]; ok {
		return fmt.Errorf("key %v already exists in Endpoint", newK)
	}

	e, ok := t.Endpoint[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Endpoint", oldK)
	}
	e.Name = &newK

	t.Endpoint[newK] = e
	delete(t.Endpoint, oldK)
	return nil
}

// GetOrCreateEndpoint retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Cpipe. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe) GetOrCreateEndpoint(Name string) *NokiaConf_Configure_Groups_Group_Service_Cpipe_Endpoint {

	key := Name

	if v, ok := t.Endpoint[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEndpoint(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEndpoint got unexpected error: %v", err))
	}
	return v
}

// GetEndpoint retrieves the value with the specified key from
// the Endpoint map field of NokiaConf_Configure_Groups_Group_Service_Cpipe. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe) GetEndpoint(Name string) *NokiaConf_Configure_Groups_Group_Service_Cpipe_Endpoint {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Endpoint[key]; ok {
		return lm
	}
	return nil
}

// DeleteEndpoint deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Cpipe. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe) DeleteEndpoint(Name string) {
	key := Name

	delete(t.Endpoint, key)
}

// AppendEndpoint appends the supplied NokiaConf_Configure_Groups_Group_Service_Cpipe_Endpoint struct to the
// list Endpoint of NokiaConf_Configure_Groups_Group_Service_Cpipe. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Cpipe_Endpoint already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe) AppendEndpoint(v *NokiaConf_Configure_Groups_Group_Service_Cpipe_Endpoint) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Endpoint == nil {
		t.Endpoint = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Cpipe_Endpoint)
	}

	if _, ok := t.Endpoint[key]; ok {
		return fmt.Errorf("duplicate key for list Endpoint %v", key)
	}

	t.Endpoint[key] = v
	return nil
}

// NewSap creates a new entry in the Sap list of the
// NokiaConf_Configure_Groups_Group_Service_Cpipe struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe) NewSap(SapId string) (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sap == nil {
		t.Sap = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap)
	}

	key := SapId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Sap[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Sap", key)
	}

	t.Sap[key] = &NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap{
		SapId: &SapId,
	}

	return t.Sap[key], nil
}

// RenameSap renames an entry in the list Sap within
// the NokiaConf_Configure_Groups_Group_Service_Cpipe struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe) RenameSap(oldK, newK string) error {
	if _, ok := t.Sap[newK]; ok {
		return fmt.Errorf("key %v already exists in Sap", newK)
	}

	e, ok := t.Sap[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Sap", oldK)
	}
	e.SapId = &newK

	t.Sap[newK] = e
	delete(t.Sap, oldK)
	return nil
}

// GetOrCreateSap retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Cpipe. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe) GetOrCreateSap(SapId string) *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap {

	key := SapId

	if v, ok := t.Sap[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSap(SapId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSap got unexpected error: %v", err))
	}
	return v
}

// GetSap retrieves the value with the specified key from
// the Sap map field of NokiaConf_Configure_Groups_Group_Service_Cpipe. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe) GetSap(SapId string) *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap {

	if t == nil {
		return nil
	}

	key := SapId

	if lm, ok := t.Sap[key]; ok {
		return lm
	}
	return nil
}

// DeleteSap deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Cpipe. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe) DeleteSap(SapId string) {
	key := SapId

	delete(t.Sap, key)
}

// AppendSap appends the supplied NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap struct to the
// list Sap of NokiaConf_Configure_Groups_Group_Service_Cpipe. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe) AppendSap(v *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap) error {
	if v.SapId == nil {
		return fmt.Errorf("invalid nil key received for SapId")
	}

	key := *v.SapId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sap == nil {
		t.Sap = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap)
	}

	if _, ok := t.Sap[key]; ok {
		return fmt.Errorf("duplicate key for list Sap %v", key)
	}

	t.Sap[key] = v
	return nil
}

// NewSpokeSdp creates a new entry in the SpokeSdp list of the
// NokiaConf_Configure_Groups_Group_Service_Cpipe struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe) NewSpokeSdp(SdpBindId string) (*NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SpokeSdp == nil {
		t.SpokeSdp = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp)
	}

	key := SdpBindId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SpokeSdp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SpokeSdp", key)
	}

	t.SpokeSdp[key] = &NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp{
		SdpBindId: &SdpBindId,
	}

	return t.SpokeSdp[key], nil
}

// RenameSpokeSdp renames an entry in the list SpokeSdp within
// the NokiaConf_Configure_Groups_Group_Service_Cpipe struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe) RenameSpokeSdp(oldK, newK string) error {
	if _, ok := t.SpokeSdp[newK]; ok {
		return fmt.Errorf("key %v already exists in SpokeSdp", newK)
	}

	e, ok := t.SpokeSdp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SpokeSdp", oldK)
	}
	e.SdpBindId = &newK

	t.SpokeSdp[newK] = e
	delete(t.SpokeSdp, oldK)
	return nil
}

// GetOrCreateSpokeSdp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Cpipe. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe) GetOrCreateSpokeSdp(SdpBindId string) *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp {

	key := SdpBindId

	if v, ok := t.SpokeSdp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSpokeSdp(SdpBindId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSpokeSdp got unexpected error: %v", err))
	}
	return v
}

// GetSpokeSdp retrieves the value with the specified key from
// the SpokeSdp map field of NokiaConf_Configure_Groups_Group_Service_Cpipe. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe) GetSpokeSdp(SdpBindId string) *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp {

	if t == nil {
		return nil
	}

	key := SdpBindId

	if lm, ok := t.SpokeSdp[key]; ok {
		return lm
	}
	return nil
}

// DeleteSpokeSdp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Cpipe. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe) DeleteSpokeSdp(SdpBindId string) {
	key := SdpBindId

	delete(t.SpokeSdp, key)
}

// AppendSpokeSdp appends the supplied NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp struct to the
// list SpokeSdp of NokiaConf_Configure_Groups_Group_Service_Cpipe. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe) AppendSpokeSdp(v *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp) error {
	if v.SdpBindId == nil {
		return fmt.Errorf("invalid nil key received for SdpBindId")
	}

	key := *v.SdpBindId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SpokeSdp == nil {
		t.SpokeSdp = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp)
	}

	if _, ok := t.SpokeSdp[key]; ok {
		return fmt.Errorf("duplicate key for list SpokeSdp %v", key)
	}

	t.SpokeSdp[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Cpipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetCustomer retrieves the value of the leaf Customer from the NokiaConf_Configure_Groups_Group_Service_Cpipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Customer is set, it can
// safely use t.GetCustomer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Customer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe) GetCustomer() string {
	if t == nil || t.Customer == nil {
		return ""
	}
	return *t.Customer
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Cpipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetServiceId retrieves the value of the leaf ServiceId from the NokiaConf_Configure_Groups_Group_Service_Cpipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceId is set, it can
// safely use t.GetServiceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe) GetServiceId() uint32 {
	if t == nil || t.ServiceId == nil {
		return 0
	}
	return *t.ServiceId
}

// GetServiceMtu retrieves the value of the leaf ServiceMtu from the NokiaConf_Configure_Groups_Group_Service_Cpipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceMtu is set, it can
// safely use t.GetServiceMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceMtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe) GetServiceMtu() int32 {
	if t == nil || t.ServiceMtu == nil {
		return 0
	}
	return *t.ServiceMtu
}

// GetServiceName retrieves the value of the leaf ServiceName from the NokiaConf_Configure_Groups_Group_Service_Cpipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceName is set, it can
// safely use t.GetServiceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe) GetServiceName() string {
	if t == nil || t.ServiceName == nil {
		return ""
	}
	return *t.ServiceName
}

// GetTest retrieves the value of the leaf Test from the NokiaConf_Configure_Groups_Group_Service_Cpipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Test is set, it can
// safely use t.GetTest() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Test == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe) GetTest() bool {
	if t == nil || t.Test == nil {
		return false
	}
	return *t.Test
}

// GetVcSwitching retrieves the value of the leaf VcSwitching from the NokiaConf_Configure_Groups_Group_Service_Cpipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VcSwitching is set, it can
// safely use t.GetVcSwitching() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VcSwitching == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe) GetVcSwitching() bool {
	if t == nil || t.VcSwitching == nil {
		return false
	}
	return *t.VcSwitching
}

// GetVcType retrieves the value of the leaf VcType from the NokiaConf_Configure_Groups_Group_Service_Cpipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VcType is set, it can
// safely use t.GetVcType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VcType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe) GetVcType() E_NokiaTypesServices_CpipeVcType {
	if t == nil || t.VcType == 0 {
		return 0
	}
	return t.VcType
}

// GetVpnId retrieves the value of the leaf VpnId from the NokiaConf_Configure_Groups_Group_Service_Cpipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnId is set, it can
// safely use t.GetVpnId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe) GetVpnId() uint32 {
	if t == nil || t.VpnId == nil {
		return 0
	}
	return *t.VpnId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Test == nil {
		var v bool = false
		t.Test = &v
	}
	if t.VcSwitching == nil {
		var v bool = false
		t.VcSwitching = &v
	}
	for _, e := range t.Endpoint {
		e.PopulateDefaults()
	}
	for _, e := range t.Sap {
		e.PopulateDefaults()
	}
	for _, e := range t.SpokeSdp {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Cpipe struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ServiceName == nil {
		return nil, fmt.Errorf("nil value for key ServiceName")
	}

	return map[string]interface{}{
		"service-name": *t.ServiceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_Endpoint represents the /nokia-conf/configure/groups/group/service/cpipe/endpoint YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_Endpoint struct {
	Description      *string                                                                    `path:"description" module:"nokia-conf"`
	HoldTimeActive   *uint32                                                                    `path:"hold-time-active" module:"nokia-conf"`
	Name             *string                                                                    `path:"name" module:"nokia-conf"`
	RevertTime       NokiaConf_Configure_Groups_Group_Service_Cpipe_Endpoint_RevertTime_Union   `path:"revert-time" module:"nokia-conf"`
	StandbySignaling E_NokiaConf_Configure_Groups_Group_Service_Cpipe_Endpoint_StandbySignaling `path:"standby-signaling" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_Endpoint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Endpoint) IsYANGGoStruct() {}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Endpoint) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetHoldTimeActive retrieves the value of the leaf HoldTimeActive from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldTimeActive is set, it can
// safely use t.GetHoldTimeActive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldTimeActive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Endpoint) GetHoldTimeActive() uint32 {
	if t == nil || t.HoldTimeActive == nil {
		return 0
	}
	return *t.HoldTimeActive
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Endpoint) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetRevertTime retrieves the value of the leaf RevertTime from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RevertTime is set, it can
// safely use t.GetRevertTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RevertTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Endpoint) GetRevertTime() NokiaConf_Configure_Groups_Group_Service_Cpipe_Endpoint_RevertTime_Union {
	if t == nil || t.RevertTime == nil {
		return NokiaTypesServices_RevertTime_Enum_immediate
	}
	return t.RevertTime
}

// GetStandbySignaling retrieves the value of the leaf StandbySignaling from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StandbySignaling is set, it can
// safely use t.GetStandbySignaling() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StandbySignaling == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Endpoint) GetStandbySignaling() E_NokiaConf_Configure_Groups_Group_Service_Cpipe_Endpoint_StandbySignaling {
	if t == nil || t.StandbySignaling == 0 {
		return 0
	}
	return t.StandbySignaling
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_Endpoint
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Endpoint) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RevertTime == nil {
		t.RevertTime = NokiaTypesServices_RevertTime_Enum_immediate
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Cpipe_Endpoint struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Endpoint) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Endpoint) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_Endpoint"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Endpoint) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Endpoint) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_Endpoint.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Endpoint) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap represents the /nokia-conf/configure/groups/group/service/cpipe/sap YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap struct {
	AccountingPolicy  *uint32                                                     `path:"accounting-policy" module:"nokia-conf"`
	AdminState        E_NokiaTypesSros_AdminState                                 `path:"admin-state" module:"nokia-conf"`
	Cem               *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem     `path:"cem" module:"nokia-conf"`
	CollectStats      *bool                                                       `path:"collect-stats" module:"nokia-conf"`
	Description       *string                                                     `path:"description" module:"nokia-conf"`
	DistCpuProtection *string                                                     `path:"dist-cpu-protection" module:"nokia-conf"`
	Egress            *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress  `path:"egress" module:"nokia-conf"`
	Endpoint          *string                                                     `path:"endpoint" module:"nokia-conf"`
	Ingress           *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress `path:"ingress" module:"nokia-conf"`
	Lag               *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Lag     `path:"lag" module:"nokia-conf"`
	MultiServiceSite  *string                                                     `path:"multi-service-site" module:"nokia-conf"`
	SapId             *string                                                     `path:"sap-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap) IsYANGGoStruct() {}

// GetOrCreateCem retrieves the value of the Cem field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap) GetOrCreateCem() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem {
	if t.Cem != nil {
		return t.Cem
	}
	t.Cem = &NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem{}
	return t.Cem
}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap) GetOrCreateEgress() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress{}
	return t.Egress
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap) GetOrCreateIngress() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress{}
	return t.Ingress
}

// GetOrCreateLag retrieves the value of the Lag field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap) GetOrCreateLag() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Lag {
	if t.Lag != nil {
		return t.Lag
	}
	t.Lag = &NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Lag{}
	return t.Lag
}

// GetCem returns the value of the Cem struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap. If the receiver or the field Cem is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap) GetCem() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem {
	if t != nil && t.Cem != nil {
		return t.Cem
	}
	return nil
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap) GetEgress() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap) GetIngress() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetLag returns the value of the Lag struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap. If the receiver or the field Lag is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap) GetLag() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Lag {
	if t != nil && t.Lag != nil {
		return t.Lag
	}
	return nil
}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDistCpuProtection retrieves the value of the leaf DistCpuProtection from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DistCpuProtection is set, it can
// safely use t.GetDistCpuProtection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DistCpuProtection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap) GetDistCpuProtection() string {
	if t == nil || t.DistCpuProtection == nil {
		return ""
	}
	return *t.DistCpuProtection
}

// GetEndpoint retrieves the value of the leaf Endpoint from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Endpoint is set, it can
// safely use t.GetEndpoint() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Endpoint == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap) GetEndpoint() string {
	if t == nil || t.Endpoint == nil {
		return ""
	}
	return *t.Endpoint
}

// GetMultiServiceSite retrieves the value of the leaf MultiServiceSite from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MultiServiceSite is set, it can
// safely use t.GetMultiServiceSite() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MultiServiceSite == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap) GetMultiServiceSite() string {
	if t == nil || t.MultiServiceSite == nil {
		return ""
	}
	return *t.MultiServiceSite
}

// GetSapId retrieves the value of the leaf SapId from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SapId is set, it can
// safely use t.GetSapId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SapId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap) GetSapId() string {
	if t == nil || t.SapId == nil {
		return ""
	}
	return *t.SapId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
	t.Cem.PopulateDefaults()
	t.Egress.PopulateDefaults()
	t.Ingress.PopulateDefaults()
	t.Lag.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SapId == nil {
		return nil, fmt.Errorf("nil value for key SapId")
	}

	return map[string]interface{}{
		"sap-id": *t.SapId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem represents the /nokia-conf/configure/groups/group/service/cpipe/sap/cem YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem struct {
	Packet      *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem_Packet      `path:"packet" module:"nokia-conf"`
	ReportAlarm *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem_ReportAlarm `path:"report-alarm" module:"nokia-conf"`
	RtpHeader   *bool                                                               `path:"rtp-header" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem) IsYANGGoStruct() {}

// GetOrCreatePacket retrieves the value of the Packet field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem) GetOrCreatePacket() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem_Packet {
	if t.Packet != nil {
		return t.Packet
	}
	t.Packet = &NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem_Packet{}
	return t.Packet
}

// GetOrCreateReportAlarm retrieves the value of the ReportAlarm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem) GetOrCreateReportAlarm() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem_ReportAlarm {
	if t.ReportAlarm != nil {
		return t.ReportAlarm
	}
	t.ReportAlarm = &NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem_ReportAlarm{}
	return t.ReportAlarm
}

// GetPacket returns the value of the Packet struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem. If the receiver or the field Packet is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem) GetPacket() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem_Packet {
	if t != nil && t.Packet != nil {
		return t.Packet
	}
	return nil
}

// GetReportAlarm returns the value of the ReportAlarm struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem. If the receiver or the field ReportAlarm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem) GetReportAlarm() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem_ReportAlarm {
	if t != nil && t.ReportAlarm != nil {
		return t.ReportAlarm
	}
	return nil
}

// GetRtpHeader retrieves the value of the leaf RtpHeader from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RtpHeader is set, it can
// safely use t.GetRtpHeader() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RtpHeader == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem) GetRtpHeader() bool {
	if t == nil || t.RtpHeader == nil {
		return false
	}
	return *t.RtpHeader
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RtpHeader == nil {
		var v bool = false
		t.RtpHeader = &v
	}
	t.Packet.PopulateDefaults()
	t.ReportAlarm.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem_Packet represents the /nokia-conf/configure/groups/group/service/cpipe/sap/cem/packet YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem_Packet struct {
	JitterBuffer *uint32 `path:"jitter-buffer" module:"nokia-conf"`
	PayloadSize  *uint32 `path:"payload-size" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem_Packet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem_Packet) IsYANGGoStruct() {}

// GetJitterBuffer retrieves the value of the leaf JitterBuffer from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem_Packet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if JitterBuffer is set, it can
// safely use t.GetJitterBuffer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.JitterBuffer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem_Packet) GetJitterBuffer() uint32 {
	if t == nil || t.JitterBuffer == nil {
		return 0
	}
	return *t.JitterBuffer
}

// GetPayloadSize retrieves the value of the leaf PayloadSize from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem_Packet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PayloadSize is set, it can
// safely use t.GetPayloadSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PayloadSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem_Packet) GetPayloadSize() uint32 {
	if t == nil || t.PayloadSize == nil {
		return 0
	}
	return *t.PayloadSize
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem_Packet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem_Packet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem_Packet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem_Packet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem_Packet) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem_Packet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem_Packet.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem_Packet) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem_ReportAlarm represents the /nokia-conf/configure/groups/group/service/cpipe/sap/cem/report-alarm YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem_ReportAlarm struct {
	BufferOverrun    *bool `path:"buffer-overrun" module:"nokia-conf"`
	BufferUnderrun   *bool `path:"buffer-underrun" module:"nokia-conf"`
	MalformedPackets *bool `path:"malformed-packets" module:"nokia-conf"`
	PacketLoss       *bool `path:"packet-loss" module:"nokia-conf"`
	RemoteFault      *bool `path:"remote-fault" module:"nokia-conf"`
	RemotePacketLoss *bool `path:"remote-packet-loss" module:"nokia-conf"`
	RemoteRdi        *bool `path:"remote-rdi" module:"nokia-conf"`
	StrayPackets     *bool `path:"stray-packets" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem_ReportAlarm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem_ReportAlarm) IsYANGGoStruct() {}

// GetBufferOverrun retrieves the value of the leaf BufferOverrun from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BufferOverrun is set, it can
// safely use t.GetBufferOverrun() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BufferOverrun == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem_ReportAlarm) GetBufferOverrun() bool {
	if t == nil || t.BufferOverrun == nil {
		return true
	}
	return *t.BufferOverrun
}

// GetBufferUnderrun retrieves the value of the leaf BufferUnderrun from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BufferUnderrun is set, it can
// safely use t.GetBufferUnderrun() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BufferUnderrun == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem_ReportAlarm) GetBufferUnderrun() bool {
	if t == nil || t.BufferUnderrun == nil {
		return true
	}
	return *t.BufferUnderrun
}

// GetMalformedPackets retrieves the value of the leaf MalformedPackets from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MalformedPackets is set, it can
// safely use t.GetMalformedPackets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MalformedPackets == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem_ReportAlarm) GetMalformedPackets() bool {
	if t == nil || t.MalformedPackets == nil {
		return true
	}
	return *t.MalformedPackets
}

// GetPacketLoss retrieves the value of the leaf PacketLoss from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketLoss is set, it can
// safely use t.GetPacketLoss() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketLoss == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem_ReportAlarm) GetPacketLoss() bool {
	if t == nil || t.PacketLoss == nil {
		return true
	}
	return *t.PacketLoss
}

// GetRemoteFault retrieves the value of the leaf RemoteFault from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteFault is set, it can
// safely use t.GetRemoteFault() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteFault == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem_ReportAlarm) GetRemoteFault() bool {
	if t == nil || t.RemoteFault == nil {
		return false
	}
	return *t.RemoteFault
}

// GetRemotePacketLoss retrieves the value of the leaf RemotePacketLoss from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemotePacketLoss is set, it can
// safely use t.GetRemotePacketLoss() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemotePacketLoss == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem_ReportAlarm) GetRemotePacketLoss() bool {
	if t == nil || t.RemotePacketLoss == nil {
		return false
	}
	return *t.RemotePacketLoss
}

// GetRemoteRdi retrieves the value of the leaf RemoteRdi from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteRdi is set, it can
// safely use t.GetRemoteRdi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteRdi == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem_ReportAlarm) GetRemoteRdi() bool {
	if t == nil || t.RemoteRdi == nil {
		return false
	}
	return *t.RemoteRdi
}

// GetStrayPackets retrieves the value of the leaf StrayPackets from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem_ReportAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StrayPackets is set, it can
// safely use t.GetStrayPackets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StrayPackets == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem_ReportAlarm) GetStrayPackets() bool {
	if t == nil || t.StrayPackets == nil {
		return true
	}
	return *t.StrayPackets
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem_ReportAlarm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem_ReportAlarm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BufferOverrun == nil {
		var v bool = true
		t.BufferOverrun = &v
	}
	if t.BufferUnderrun == nil {
		var v bool = true
		t.BufferUnderrun = &v
	}
	if t.MalformedPackets == nil {
		var v bool = true
		t.MalformedPackets = &v
	}
	if t.PacketLoss == nil {
		var v bool = true
		t.PacketLoss = &v
	}
	if t.RemoteFault == nil {
		var v bool = false
		t.RemoteFault = &v
	}
	if t.RemotePacketLoss == nil {
		var v bool = false
		t.RemotePacketLoss = &v
	}
	if t.RemoteRdi == nil {
		var v bool = false
		t.RemoteRdi = &v
	}
	if t.StrayPackets == nil {
		var v bool = true
		t.StrayPackets = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem_ReportAlarm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem_ReportAlarm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem_ReportAlarm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem_ReportAlarm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem_ReportAlarm.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Cem_ReportAlarm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress represents the /nokia-conf/configure/groups/group/service/cpipe/sap/egress YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress struct {
	AggRate *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_AggRate `path:"agg-rate" module:"nokia-conf"`
	Qos     *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos     `path:"qos" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress) IsYANGGoStruct() {}

// GetOrCreateAggRate retrieves the value of the AggRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress) GetOrCreateAggRate() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_AggRate {
	if t.AggRate != nil {
		return t.AggRate
	}
	t.AggRate = &NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_AggRate{}
	return t.AggRate
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress) GetOrCreateQos() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos{}
	return t.Qos
}

// GetAggRate returns the value of the AggRate struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress. If the receiver or the field AggRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress) GetAggRate() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_AggRate {
	if t != nil && t.AggRate != nil {
		return t.AggRate
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress) GetQos() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AggRate.PopulateDefaults()
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_AggRate represents the /nokia-conf/configure/groups/group/service/cpipe/sap/egress/agg-rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_AggRate struct {
	Cir                  NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_AggRate_Cir_Union `path:"cir" module:"nokia-conf"`
	LimitUnusedBandwidth *bool                                                                       `path:"limit-unused-bandwidth" module:"nokia-conf"`
	Rate                 *int64                                                                      `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_AggRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_AggRate) IsYANGGoStruct() {}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_AggRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_AggRate) GetCir() NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_AggRate_Cir_Union {
	if t == nil || t.Cir == nil {
		return UnionInt32(0)
	}
	return t.Cir
}

// GetLimitUnusedBandwidth retrieves the value of the leaf LimitUnusedBandwidth from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_AggRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LimitUnusedBandwidth is set, it can
// safely use t.GetLimitUnusedBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LimitUnusedBandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_AggRate) GetLimitUnusedBandwidth() bool {
	if t == nil || t.LimitUnusedBandwidth == nil {
		return false
	}
	return *t.LimitUnusedBandwidth
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_AggRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_AggRate) GetRate() int64 {
	if t == nil || t.Rate == nil {
		return 0
	}
	return *t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_AggRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_AggRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		t.Cir = UnionInt32(0)
	}
	if t.LimitUnusedBandwidth == nil {
		var v bool = false
		t.LimitUnusedBandwidth = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_AggRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_AggRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_AggRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_AggRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_AggRate.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_AggRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos represents the /nokia-conf/configure/groups/group/service/cpipe/sap/egress/qos YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos struct {
	PolicerControlPolicy *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy `path:"policer-control-policy" module:"nokia-conf"`
	SapEgress            *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress            `path:"sap-egress" module:"nokia-conf"`
	SchedulerPolicy      *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy      `path:"scheduler-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos) IsYANGGoStruct() {}

// GetOrCreatePolicerControlPolicy retrieves the value of the PolicerControlPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos) GetOrCreatePolicerControlPolicy() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy {
	if t.PolicerControlPolicy != nil {
		return t.PolicerControlPolicy
	}
	t.PolicerControlPolicy = &NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy{}
	return t.PolicerControlPolicy
}

// GetOrCreateSapEgress retrieves the value of the SapEgress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos) GetOrCreateSapEgress() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress {
	if t.SapEgress != nil {
		return t.SapEgress
	}
	t.SapEgress = &NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress{}
	return t.SapEgress
}

// GetOrCreateSchedulerPolicy retrieves the value of the SchedulerPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos) GetOrCreateSchedulerPolicy() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy {
	if t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	t.SchedulerPolicy = &NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy{}
	return t.SchedulerPolicy
}

// GetPolicerControlPolicy returns the value of the PolicerControlPolicy struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos. If the receiver or the field PolicerControlPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos) GetPolicerControlPolicy() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy {
	if t != nil && t.PolicerControlPolicy != nil {
		return t.PolicerControlPolicy
	}
	return nil
}

// GetSapEgress returns the value of the SapEgress struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos. If the receiver or the field SapEgress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos) GetSapEgress() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress {
	if t != nil && t.SapEgress != nil {
		return t.SapEgress
	}
	return nil
}

// GetSchedulerPolicy returns the value of the SchedulerPolicy struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos. If the receiver or the field SchedulerPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos) GetSchedulerPolicy() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy {
	if t != nil && t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PolicerControlPolicy.PopulateDefaults()
	t.SapEgress.PopulateDefaults()
	t.SchedulerPolicy.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy represents the /nokia-conf/configure/groups/group/service/cpipe/sap/egress/qos/policer-control-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy struct {
	Overrides  *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides `path:"overrides" module:"nokia-conf" yangPresence:"true"`
	PolicyName *string                                                                                       `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy) IsYANGGoStruct() {
}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy) GetOrCreateOverrides() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy) GetOverrides() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides represents the /nokia-conf/configure/groups/group/service/cpipe/sap/egress/qos/policer-control-policy/overrides YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides struct {
	Root *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root `path:"root" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides) IsYANGGoStruct() {
}

// GetOrCreateRoot retrieves the value of the Root field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides) GetOrCreateRoot() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root {
	if t.Root != nil {
		return t.Root
	}
	t.Root = &NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root{}
	return t.Root
}

// GetRoot returns the value of the Root struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides. If the receiver or the field Root is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides) GetRoot() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root {
	if t != nil && t.Root != nil {
		return t.Root
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Root.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root represents the /nokia-conf/configure/groups/group/service/cpipe/sap/egress/qos/policer-control-policy/overrides/root YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root struct {
	MaxRate               NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_MaxRate_Union          `path:"max-rate" module:"nokia-conf"`
	PriorityMbsThresholds *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds `path:"priority-mbs-thresholds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) IsYANGGoStruct() {
}

// GetOrCreatePriorityMbsThresholds retrieves the value of the PriorityMbsThresholds field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) GetOrCreatePriorityMbsThresholds() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds {
	if t.PriorityMbsThresholds != nil {
		return t.PriorityMbsThresholds
	}
	t.PriorityMbsThresholds = &NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds{}
	return t.PriorityMbsThresholds
}

// GetPriorityMbsThresholds returns the value of the PriorityMbsThresholds struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root. If the receiver or the field PriorityMbsThresholds is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) GetPriorityMbsThresholds() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds {
	if t != nil && t.PriorityMbsThresholds != nil {
		return t.PriorityMbsThresholds
	}
	return nil
}

// GetMaxRate retrieves the value of the leaf MaxRate from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRate is set, it can
// safely use t.GetMaxRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) GetMaxRate() NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_MaxRate_Union {
	if t == nil || t.MaxRate == nil {
		return nil
	}
	return t.MaxRate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PriorityMbsThresholds.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds represents the /nokia-conf/configure/groups/group/service/cpipe/sap/egress/qos/policer-control-policy/overrides/root/priority-mbs-thresholds YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds struct {
	MinThreshSeparation NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_MinThreshSeparation_Union                                                                                                                                          `path:"min-thresh-separation" module:"nokia-conf"`
	Priority            map[NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union]*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) IsYANGGoStruct() {
}

// NewPriority creates a new entry in the Priority list of the
// NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) NewPriority(PriorityLevel NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union) (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Priority == nil {
		t.Priority = make(map[NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union]*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority)
	}

	key := PriorityLevel

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Priority[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Priority", key)
	}

	t.Priority[key] = &NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority{
		PriorityLevel: PriorityLevel,
	}

	return t.Priority[key], nil
}

// RenamePriority renames an entry in the list Priority within
// the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) RenamePriority(oldK, newK NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union) error {
	if _, ok := t.Priority[newK]; ok {
		return fmt.Errorf("key %v already exists in Priority", newK)
	}

	e, ok := t.Priority[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Priority", oldK)
	}
	e.PriorityLevel = newK

	t.Priority[newK] = e
	delete(t.Priority, oldK)
	return nil
}

// GetOrCreatePriority retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) GetOrCreatePriority(PriorityLevel NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union) *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority {

	key := PriorityLevel

	if v, ok := t.Priority[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPriority(PriorityLevel)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePriority got unexpected error: %v", err))
	}
	return v
}

// GetPriority retrieves the value with the specified key from
// the Priority map field of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) GetPriority(PriorityLevel NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union) *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority {

	if t == nil {
		return nil
	}

	key := PriorityLevel

	if lm, ok := t.Priority[key]; ok {
		return lm
	}
	return nil
}

// DeletePriority deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) DeletePriority(PriorityLevel NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union) {
	key := PriorityLevel

	delete(t.Priority, key)
}

// AppendPriority appends the supplied NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority struct to the
// list Priority of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) AppendPriority(v *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) error {
	key := v.PriorityLevel

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Priority == nil {
		t.Priority = make(map[NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union]*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority)
	}

	if _, ok := t.Priority[key]; ok {
		return fmt.Errorf("duplicate key for list Priority %v", key)
	}

	t.Priority[key] = v
	return nil
}

// GetMinThreshSeparation retrieves the value of the leaf MinThreshSeparation from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinThreshSeparation is set, it can
// safely use t.GetMinThreshSeparation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinThreshSeparation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) GetMinThreshSeparation() NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_MinThreshSeparation_Union {
	if t == nil || t.MinThreshSeparation == nil {
		return nil
	}
	return t.MinThreshSeparation
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Priority {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority represents the /nokia-conf/configure/groups/group/service/cpipe/sap/egress/qos/policer-control-policy/overrides/root/priority-mbs-thresholds/priority YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority struct {
	MbsContribution NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_MbsContribution_Union `path:"mbs-contribution" module:"nokia-conf"`
	PriorityLevel   NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union   `path:"priority-level" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) IsYANGGoStruct() {
}

// GetMbsContribution retrieves the value of the leaf MbsContribution from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MbsContribution is set, it can
// safely use t.GetMbsContribution() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MbsContribution == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) GetMbsContribution() NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_MbsContribution_Union {
	if t == nil || t.MbsContribution == nil {
		return nil
	}
	return t.MbsContribution
}

// GetPriorityLevel retrieves the value of the leaf PriorityLevel from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PriorityLevel is set, it can
// safely use t.GetPriorityLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PriorityLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) GetPriorityLevel() NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union {
	if t == nil || t.PriorityLevel == nil {
		return nil
	}
	return t.PriorityLevel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"priority-level": t.PriorityLevel,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress represents the /nokia-conf/configure/groups/group/service/cpipe/sap/egress/qos/sap-egress YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress struct {
	Overrides  *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides `path:"overrides" module:"nokia-conf"`
	PolicyName *string                                                                            `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress) IsYANGGoStruct() {}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress) GetOrCreateOverrides() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress) GetOverrides() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides represents the /nokia-conf/configure/groups/group/service/cpipe/sap/egress/qos/sap-egress/overrides YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides struct {
	Policer map[NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PolicerId_Union]*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer `path:"policer" module:"nokia-conf"`
	Queue   map[NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue       `path:"queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides) IsYANGGoStruct() {
}

// NewPolicer creates a new entry in the Policer list of the
// NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides) NewPolicer(PolicerId NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PolicerId_Union) (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PolicerId_Union]*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer)
	}

	key := PolicerId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Policer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Policer", key)
	}

	t.Policer[key] = &NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer{
		PolicerId: PolicerId,
	}

	return t.Policer[key], nil
}

// RenamePolicer renames an entry in the list Policer within
// the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides) RenamePolicer(oldK, newK NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PolicerId_Union) error {
	if _, ok := t.Policer[newK]; ok {
		return fmt.Errorf("key %v already exists in Policer", newK)
	}

	e, ok := t.Policer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Policer", oldK)
	}
	e.PolicerId = newK

	t.Policer[newK] = e
	delete(t.Policer, oldK)
	return nil
}

// GetOrCreatePolicer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides) GetOrCreatePolicer(PolicerId NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PolicerId_Union) *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer {

	key := PolicerId

	if v, ok := t.Policer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicer(PolicerId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicer got unexpected error: %v", err))
	}
	return v
}

// GetPolicer retrieves the value with the specified key from
// the Policer map field of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides) GetPolicer(PolicerId NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PolicerId_Union) *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer {

	if t == nil {
		return nil
	}

	key := PolicerId

	if lm, ok := t.Policer[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides) DeletePolicer(PolicerId NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PolicerId_Union) {
	key := PolicerId

	delete(t.Policer, key)
}

// AppendPolicer appends the supplied NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer struct to the
// list Policer of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides) AppendPolicer(v *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) error {
	key := v.PolicerId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PolicerId_Union]*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer)
	}

	if _, ok := t.Policer[key]; ok {
		return fmt.Errorf("duplicate key for list Policer %v", key)
	}

	t.Policer[key] = v
	return nil
}

// NewQueue creates a new entry in the Queue list of the
// NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides) NewQueue(QueueId NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_QueueId_Union) (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue)
	}

	key := QueueId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue{
		QueueId: QueueId,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides) RenameQueue(oldK, newK NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_QueueId_Union) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.QueueId = newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides) GetOrCreateQueue(QueueId NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_QueueId_Union) *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue {

	key := QueueId

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(QueueId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides) GetQueue(QueueId NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_QueueId_Union) *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue {

	if t == nil {
		return nil
	}

	key := QueueId

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides) DeleteQueue(QueueId NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_QueueId_Union) {
	key := QueueId

	delete(t.Queue, key)
}

// AppendQueue appends the supplied NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue struct to the
// list Queue of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides) AppendQueue(v *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) error {
	key := v.QueueId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Policer {
		e.PopulateDefaults()
	}
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer represents the /nokia-conf/configure/groups/group/service/cpipe/sap/egress/qos/sap-egress/overrides/policer YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer struct {
	Cbs              NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Cbs_Union       `path:"cbs" module:"nokia-conf"`
	Mbs              NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Mbs_Union       `path:"mbs" module:"nokia-conf"`
	PacketByteOffset *int32                                                                                                    `path:"packet-byte-offset" module:"nokia-conf"`
	PercentRate      *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate    `path:"percent-rate" module:"nokia-conf"`
	PolicerId        NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PolicerId_Union `path:"policer-id" module:"nokia-conf"`
	Rate             *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate           `path:"rate" module:"nokia-conf"`
	StatMode         E_NokiaTypesQos_EgressPolicerStatMode                                                                     `path:"stat-mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) IsYANGGoStruct() {
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetOrCreatePercentRate() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate{}
	return t.PercentRate
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetOrCreateRate() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate{}
	return t.Rate
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetPercentRate() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetRate() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetCbs() NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return nil
	}
	return t.Cbs
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetMbs() NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return nil
	}
	return t.Mbs
}

// GetPacketByteOffset retrieves the value of the leaf PacketByteOffset from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketByteOffset is set, it can
// safely use t.GetPacketByteOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketByteOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetPacketByteOffset() int32 {
	if t == nil || t.PacketByteOffset == nil {
		return 0
	}
	return *t.PacketByteOffset
}

// GetPolicerId retrieves the value of the leaf PolicerId from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerId is set, it can
// safely use t.GetPolicerId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetPolicerId() NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PolicerId_Union {
	if t == nil || t.PolicerId == nil {
		return nil
	}
	return t.PolicerId
}

// GetStatMode retrieves the value of the leaf StatMode from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StatMode is set, it can
// safely use t.GetStatMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StatMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetStatMode() E_NokiaTypesQos_EgressPolicerStatMode {
	if t == nil || t.StatMode == 0 {
		return 0
	}
	return t.StatMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PercentRate.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"policer-id": t.PolicerId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate represents the /nokia-conf/configure/groups/group/service/cpipe/sap/egress/qos/sap-egress/overrides/policer/percent-rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate struct {
	Cir *float64 `path:"cir" module:"nokia-conf"`
	Pir *float64 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 0.0
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 0.0
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate represents the /nokia-conf/configure/groups/group/service/cpipe/sap/egress/qos/sap-egress/overrides/policer/rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate struct {
	Cir NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) GetCir() NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) GetPir() NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue represents the /nokia-conf/configure/groups/group/service/cpipe/sap/egress/qos/sap-egress/overrides/queue YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue struct {
	AdaptationRule    *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule    `path:"adaptation-rule" module:"nokia-conf"`
	AvgFrameOverhead  *float64                                                                                                   `path:"avg-frame-overhead" module:"nokia-conf"`
	BurstLimit        NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_BurstLimit_Union   `path:"burst-limit" module:"nokia-conf"`
	Cbs               NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Cbs_Union          `path:"cbs" module:"nokia-conf"`
	DropTail          *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail          `path:"drop-tail" module:"nokia-conf"`
	HsClassWeight     *int32                                                                                                     `path:"hs-class-weight" module:"nokia-conf"`
	HsWredQueue       *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue       `path:"hs-wred-queue" module:"nokia-conf"`
	HsWrrWeight       *int32                                                                                                     `path:"hs-wrr-weight" module:"nokia-conf"`
	Mbs               NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Mbs_Union          `path:"mbs" module:"nokia-conf"`
	MonitorDepth      *bool                                                                                                      `path:"monitor-depth" module:"nokia-conf"`
	MonitorQueueDepth *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth `path:"monitor-queue-depth" module:"nokia-conf" yangPresence:"true"`
	Parent            *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent            `path:"parent" module:"nokia-conf"`
	PercentRate       *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate       `path:"percent-rate" module:"nokia-conf"`
	QueueId           NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_QueueId_Union      `path:"queue-id" module:"nokia-conf"`
	Rate              *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate              `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) IsYANGGoStruct() {
}

// GetOrCreateAdaptationRule retrieves the value of the AdaptationRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetOrCreateAdaptationRule() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule {
	if t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	t.AdaptationRule = &NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule{}
	return t.AdaptationRule
}

// GetOrCreateDropTail retrieves the value of the DropTail field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetOrCreateDropTail() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail {
	if t.DropTail != nil {
		return t.DropTail
	}
	t.DropTail = &NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail{}
	return t.DropTail
}

// GetOrCreateHsWredQueue retrieves the value of the HsWredQueue field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetOrCreateHsWredQueue() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue {
	if t.HsWredQueue != nil {
		return t.HsWredQueue
	}
	t.HsWredQueue = &NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue{}
	return t.HsWredQueue
}

// GetOrCreateMonitorQueueDepth retrieves the value of the MonitorQueueDepth field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetOrCreateMonitorQueueDepth() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth {
	if t.MonitorQueueDepth != nil {
		return t.MonitorQueueDepth
	}
	t.MonitorQueueDepth = &NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth{}
	return t.MonitorQueueDepth
}

// GetOrCreateParent retrieves the value of the Parent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetOrCreateParent() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent {
	if t.Parent != nil {
		return t.Parent
	}
	t.Parent = &NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent{}
	return t.Parent
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetOrCreatePercentRate() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate{}
	return t.PercentRate
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetOrCreateRate() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate{}
	return t.Rate
}

// GetAdaptationRule returns the value of the AdaptationRule struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue. If the receiver or the field AdaptationRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetAdaptationRule() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule {
	if t != nil && t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	return nil
}

// GetDropTail returns the value of the DropTail struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue. If the receiver or the field DropTail is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetDropTail() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail {
	if t != nil && t.DropTail != nil {
		return t.DropTail
	}
	return nil
}

// GetHsWredQueue returns the value of the HsWredQueue struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue. If the receiver or the field HsWredQueue is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetHsWredQueue() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue {
	if t != nil && t.HsWredQueue != nil {
		return t.HsWredQueue
	}
	return nil
}

// GetMonitorQueueDepth returns the value of the MonitorQueueDepth struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue. If the receiver or the field MonitorQueueDepth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetMonitorQueueDepth() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth {
	if t != nil && t.MonitorQueueDepth != nil {
		return t.MonitorQueueDepth
	}
	return nil
}

// GetParent returns the value of the Parent struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue. If the receiver or the field Parent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetParent() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent {
	if t != nil && t.Parent != nil {
		return t.Parent
	}
	return nil
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetPercentRate() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetRate() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetAvgFrameOverhead retrieves the value of the leaf AvgFrameOverhead from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AvgFrameOverhead is set, it can
// safely use t.GetAvgFrameOverhead() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AvgFrameOverhead == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetAvgFrameOverhead() float64 {
	if t == nil || t.AvgFrameOverhead == nil {
		return 0.0
	}
	return *t.AvgFrameOverhead
}

// GetBurstLimit retrieves the value of the leaf BurstLimit from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BurstLimit is set, it can
// safely use t.GetBurstLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BurstLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetBurstLimit() NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_BurstLimit_Union {
	if t == nil || t.BurstLimit == nil {
		return nil
	}
	return t.BurstLimit
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetCbs() NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return nil
	}
	return t.Cbs
}

// GetHsClassWeight retrieves the value of the leaf HsClassWeight from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsClassWeight is set, it can
// safely use t.GetHsClassWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsClassWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetHsClassWeight() int32 {
	if t == nil || t.HsClassWeight == nil {
		return 0
	}
	return *t.HsClassWeight
}

// GetHsWrrWeight retrieves the value of the leaf HsWrrWeight from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsWrrWeight is set, it can
// safely use t.GetHsWrrWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsWrrWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetHsWrrWeight() int32 {
	if t == nil || t.HsWrrWeight == nil {
		return 1
	}
	return *t.HsWrrWeight
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetMbs() NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return nil
	}
	return t.Mbs
}

// GetMonitorDepth retrieves the value of the leaf MonitorDepth from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorDepth is set, it can
// safely use t.GetMonitorDepth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorDepth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetMonitorDepth() bool {
	if t == nil || t.MonitorDepth == nil {
		return false
	}
	return *t.MonitorDepth
}

// GetQueueId retrieves the value of the leaf QueueId from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueId is set, it can
// safely use t.GetQueueId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetQueueId() NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_QueueId_Union {
	if t == nil || t.QueueId == nil {
		return nil
	}
	return t.QueueId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HsWrrWeight == nil {
		var v int32 = 1
		t.HsWrrWeight = &v
	}
	if t.MonitorDepth == nil {
		var v bool = false
		t.MonitorDepth = &v
	}
	t.AdaptationRule.PopulateDefaults()
	t.DropTail.PopulateDefaults()
	t.HsWredQueue.PopulateDefaults()
	t.MonitorQueueDepth.PopulateDefaults()
	t.Parent.PopulateDefaults()
	t.PercentRate.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"queue-id": t.QueueId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule represents the /nokia-conf/configure/groups/group/service/cpipe/sap/egress/qos/sap-egress/overrides/queue/adaptation-rule YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule struct {
	Cir E_NokiaTypesQos_AdaptationRuleOverride `path:"cir" module:"nokia-conf"`
	Pir E_NokiaTypesQos_AdaptationRuleOverride `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) GetCir() E_NokiaTypesQos_AdaptationRuleOverride {
	if t == nil || t.Cir == 0 {
		return 0
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) GetPir() E_NokiaTypesQos_AdaptationRuleOverride {
	if t == nil || t.Pir == 0 {
		return 0
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail represents the /nokia-conf/configure/groups/group/service/cpipe/sap/egress/qos/sap-egress/overrides/queue/drop-tail YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail struct {
	Low *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low `path:"low" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) IsYANGGoStruct() {
}

// GetOrCreateLow retrieves the value of the Low field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) GetOrCreateLow() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low {
	if t.Low != nil {
		return t.Low
	}
	t.Low = &NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low{}
	return t.Low
}

// GetLow returns the value of the Low struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail. If the receiver or the field Low is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) GetLow() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low {
	if t != nil && t.Low != nil {
		return t.Low
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Low.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low represents the /nokia-conf/configure/groups/group/service/cpipe/sap/egress/qos/sap-egress/overrides/queue/drop-tail/low YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low struct {
	PercentReductionFromMbs NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low_PercentReductionFromMbs_Union `path:"percent-reduction-from-mbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low) IsYANGGoStruct() {
}

// GetPercentReductionFromMbs retrieves the value of the leaf PercentReductionFromMbs from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentReductionFromMbs is set, it can
// safely use t.GetPercentReductionFromMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentReductionFromMbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low) GetPercentReductionFromMbs() NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low_PercentReductionFromMbs_Union {
	if t == nil || t.PercentReductionFromMbs == nil {
		return nil
	}
	return t.PercentReductionFromMbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue represents the /nokia-conf/configure/groups/group/service/cpipe/sap/egress/qos/sap-egress/overrides/queue/hs-wred-queue YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue struct {
	Policy *string `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) IsYANGGoStruct() {
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth represents the /nokia-conf/configure/groups/group/service/cpipe/sap/egress/qos/sap-egress/overrides/queue/monitor-queue-depth YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth struct {
	FastPolling        *bool    `path:"fast-polling" module:"nokia-conf"`
	ViolationThreshold *float64 `path:"violation-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) IsYANGGoStruct() {
}

// GetFastPolling retrieves the value of the leaf FastPolling from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FastPolling is set, it can
// safely use t.GetFastPolling() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FastPolling == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) GetFastPolling() bool {
	if t == nil || t.FastPolling == nil {
		return false
	}
	return *t.FastPolling
}

// GetViolationThreshold retrieves the value of the leaf ViolationThreshold from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ViolationThreshold is set, it can
// safely use t.GetViolationThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ViolationThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) GetViolationThreshold() float64 {
	if t == nil || t.ViolationThreshold == nil {
		return 0.0
	}
	return *t.ViolationThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FastPolling == nil {
		var v bool = false
		t.FastPolling = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent represents the /nokia-conf/configure/groups/group/service/cpipe/sap/egress/qos/sap-egress/overrides/queue/parent YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent struct {
	CirWeight *int32 `path:"cir-weight" module:"nokia-conf"`
	Weight    *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) IsYANGGoStruct() {
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 0
	}
	return *t.CirWeight
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate represents the /nokia-conf/configure/groups/group/service/cpipe/sap/egress/qos/sap-egress/overrides/queue/percent-rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate struct {
	Cir *float64 `path:"cir" module:"nokia-conf"`
	Pir *float64 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 0.0
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 0.0
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate represents the /nokia-conf/configure/groups/group/service/cpipe/sap/egress/qos/sap-egress/overrides/queue/rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate struct {
	Cir NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) GetCir() NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) GetPir() NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy represents the /nokia-conf/configure/groups/group/service/cpipe/sap/egress/qos/scheduler-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy struct {
	Overrides  *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides `path:"overrides" module:"nokia-conf"`
	PolicyName *string                                                                                  `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy) IsYANGGoStruct() {
}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy) GetOrCreateOverrides() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy) GetOverrides() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides represents the /nokia-conf/configure/groups/group/service/cpipe/sap/egress/qos/scheduler-policy/overrides YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides struct {
	Scheduler map[string]*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler `path:"scheduler" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides) IsYANGGoStruct() {
}

// NewScheduler creates a new entry in the Scheduler list of the
// NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides) NewScheduler(SchedulerName string) (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler)
	}

	key := SchedulerName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Scheduler[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Scheduler", key)
	}

	t.Scheduler[key] = &NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler{
		SchedulerName: &SchedulerName,
	}

	return t.Scheduler[key], nil
}

// RenameScheduler renames an entry in the list Scheduler within
// the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides) RenameScheduler(oldK, newK string) error {
	if _, ok := t.Scheduler[newK]; ok {
		return fmt.Errorf("key %v already exists in Scheduler", newK)
	}

	e, ok := t.Scheduler[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Scheduler", oldK)
	}
	e.SchedulerName = &newK

	t.Scheduler[newK] = e
	delete(t.Scheduler, oldK)
	return nil
}

// GetOrCreateScheduler retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides) GetOrCreateScheduler(SchedulerName string) *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler {

	key := SchedulerName

	if v, ok := t.Scheduler[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewScheduler(SchedulerName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateScheduler got unexpected error: %v", err))
	}
	return v
}

// GetScheduler retrieves the value with the specified key from
// the Scheduler map field of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides) GetScheduler(SchedulerName string) *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler {

	if t == nil {
		return nil
	}

	key := SchedulerName

	if lm, ok := t.Scheduler[key]; ok {
		return lm
	}
	return nil
}

// DeleteScheduler deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides) DeleteScheduler(SchedulerName string) {
	key := SchedulerName

	delete(t.Scheduler, key)
}

// AppendScheduler appends the supplied NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler struct to the
// list Scheduler of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides) AppendScheduler(v *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) error {
	if v.SchedulerName == nil {
		return fmt.Errorf("invalid nil key received for SchedulerName")
	}

	key := *v.SchedulerName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler)
	}

	if _, ok := t.Scheduler[key]; ok {
		return fmt.Errorf("duplicate key for list Scheduler %v", key)
	}

	t.Scheduler[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Scheduler {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler represents the /nokia-conf/configure/groups/group/service/cpipe/sap/egress/qos/scheduler-policy/overrides/scheduler YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler struct {
	Parent        *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent `path:"parent" module:"nokia-conf"`
	Rate          *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate   `path:"rate" module:"nokia-conf"`
	SchedulerName *string                                                                                                   `path:"scheduler-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) IsYANGGoStruct() {
}

// GetOrCreateParent retrieves the value of the Parent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) GetOrCreateParent() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent {
	if t.Parent != nil {
		return t.Parent
	}
	t.Parent = &NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent{}
	return t.Parent
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) GetOrCreateRate() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate{}
	return t.Rate
}

// GetParent returns the value of the Parent struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler. If the receiver or the field Parent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) GetParent() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent {
	if t != nil && t.Parent != nil {
		return t.Parent
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) GetRate() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetSchedulerName retrieves the value of the leaf SchedulerName from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SchedulerName is set, it can
// safely use t.GetSchedulerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SchedulerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) GetSchedulerName() string {
	if t == nil || t.SchedulerName == nil {
		return ""
	}
	return *t.SchedulerName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Parent.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SchedulerName == nil {
		return nil, fmt.Errorf("nil value for key SchedulerName")
	}

	return map[string]interface{}{
		"scheduler-name": *t.SchedulerName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent represents the /nokia-conf/configure/groups/group/service/cpipe/sap/egress/qos/scheduler-policy/overrides/scheduler/parent YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent struct {
	CirWeight *int32 `path:"cir-weight" module:"nokia-conf"`
	Weight    *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) IsYANGGoStruct() {
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 0
	}
	return *t.CirWeight
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate represents the /nokia-conf/configure/groups/group/service/cpipe/sap/egress/qos/scheduler-policy/overrides/scheduler/rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate struct {
	Cir NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) GetCir() NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) GetPir() NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress represents the /nokia-conf/configure/groups/group/service/cpipe/sap/ingress YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress struct {
	Qos *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos `path:"qos" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress) IsYANGGoStruct() {}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress) GetOrCreateQos() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos{}
	return t.Qos
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress) GetQos() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos represents the /nokia-conf/configure/groups/group/service/cpipe/sap/ingress/qos YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos struct {
	PolicerControlPolicy *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy `path:"policer-control-policy" module:"nokia-conf"`
	SapIngress           *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress           `path:"sap-ingress" module:"nokia-conf"`
	SchedulerPolicy      *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy      `path:"scheduler-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos) IsYANGGoStruct() {}

// GetOrCreatePolicerControlPolicy retrieves the value of the PolicerControlPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos) GetOrCreatePolicerControlPolicy() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy {
	if t.PolicerControlPolicy != nil {
		return t.PolicerControlPolicy
	}
	t.PolicerControlPolicy = &NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy{}
	return t.PolicerControlPolicy
}

// GetOrCreateSapIngress retrieves the value of the SapIngress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos) GetOrCreateSapIngress() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress {
	if t.SapIngress != nil {
		return t.SapIngress
	}
	t.SapIngress = &NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress{}
	return t.SapIngress
}

// GetOrCreateSchedulerPolicy retrieves the value of the SchedulerPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos) GetOrCreateSchedulerPolicy() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy {
	if t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	t.SchedulerPolicy = &NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy{}
	return t.SchedulerPolicy
}

// GetPolicerControlPolicy returns the value of the PolicerControlPolicy struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos. If the receiver or the field PolicerControlPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos) GetPolicerControlPolicy() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy {
	if t != nil && t.PolicerControlPolicy != nil {
		return t.PolicerControlPolicy
	}
	return nil
}

// GetSapIngress returns the value of the SapIngress struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos. If the receiver or the field SapIngress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos) GetSapIngress() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress {
	if t != nil && t.SapIngress != nil {
		return t.SapIngress
	}
	return nil
}

// GetSchedulerPolicy returns the value of the SchedulerPolicy struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos. If the receiver or the field SchedulerPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos) GetSchedulerPolicy() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy {
	if t != nil && t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PolicerControlPolicy.PopulateDefaults()
	t.SapIngress.PopulateDefaults()
	t.SchedulerPolicy.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy represents the /nokia-conf/configure/groups/group/service/cpipe/sap/ingress/qos/policer-control-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy struct {
	Overrides  *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides `path:"overrides" module:"nokia-conf" yangPresence:"true"`
	PolicyName *string                                                                                        `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy) IsYANGGoStruct() {
}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy) GetOrCreateOverrides() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy) GetOverrides() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides represents the /nokia-conf/configure/groups/group/service/cpipe/sap/ingress/qos/policer-control-policy/overrides YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides struct {
	Root *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root `path:"root" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) IsYANGGoStruct() {
}

// GetOrCreateRoot retrieves the value of the Root field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) GetOrCreateRoot() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root {
	if t.Root != nil {
		return t.Root
	}
	t.Root = &NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root{}
	return t.Root
}

// GetRoot returns the value of the Root struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides. If the receiver or the field Root is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) GetRoot() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root {
	if t != nil && t.Root != nil {
		return t.Root
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Root.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root represents the /nokia-conf/configure/groups/group/service/cpipe/sap/ingress/qos/policer-control-policy/overrides/root YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root struct {
	MaxRate               NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_MaxRate_Union          `path:"max-rate" module:"nokia-conf"`
	PriorityMbsThresholds *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds `path:"priority-mbs-thresholds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) IsYANGGoStruct() {
}

// GetOrCreatePriorityMbsThresholds retrieves the value of the PriorityMbsThresholds field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) GetOrCreatePriorityMbsThresholds() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds {
	if t.PriorityMbsThresholds != nil {
		return t.PriorityMbsThresholds
	}
	t.PriorityMbsThresholds = &NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds{}
	return t.PriorityMbsThresholds
}

// GetPriorityMbsThresholds returns the value of the PriorityMbsThresholds struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root. If the receiver or the field PriorityMbsThresholds is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) GetPriorityMbsThresholds() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds {
	if t != nil && t.PriorityMbsThresholds != nil {
		return t.PriorityMbsThresholds
	}
	return nil
}

// GetMaxRate retrieves the value of the leaf MaxRate from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRate is set, it can
// safely use t.GetMaxRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) GetMaxRate() NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_MaxRate_Union {
	if t == nil || t.MaxRate == nil {
		return nil
	}
	return t.MaxRate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PriorityMbsThresholds.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds represents the /nokia-conf/configure/groups/group/service/cpipe/sap/ingress/qos/policer-control-policy/overrides/root/priority-mbs-thresholds YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds struct {
	MinThreshSeparation NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_MinThreshSeparation_Union                                                                                                                                           `path:"min-thresh-separation" module:"nokia-conf"`
	Priority            map[NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union]*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) IsYANGGoStruct() {
}

// NewPriority creates a new entry in the Priority list of the
// NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) NewPriority(PriorityLevel NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union) (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Priority == nil {
		t.Priority = make(map[NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union]*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority)
	}

	key := PriorityLevel

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Priority[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Priority", key)
	}

	t.Priority[key] = &NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority{
		PriorityLevel: PriorityLevel,
	}

	return t.Priority[key], nil
}

// RenamePriority renames an entry in the list Priority within
// the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) RenamePriority(oldK, newK NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union) error {
	if _, ok := t.Priority[newK]; ok {
		return fmt.Errorf("key %v already exists in Priority", newK)
	}

	e, ok := t.Priority[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Priority", oldK)
	}
	e.PriorityLevel = newK

	t.Priority[newK] = e
	delete(t.Priority, oldK)
	return nil
}

// GetOrCreatePriority retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) GetOrCreatePriority(PriorityLevel NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union) *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority {

	key := PriorityLevel

	if v, ok := t.Priority[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPriority(PriorityLevel)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePriority got unexpected error: %v", err))
	}
	return v
}

// GetPriority retrieves the value with the specified key from
// the Priority map field of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) GetPriority(PriorityLevel NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union) *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority {

	if t == nil {
		return nil
	}

	key := PriorityLevel

	if lm, ok := t.Priority[key]; ok {
		return lm
	}
	return nil
}

// DeletePriority deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) DeletePriority(PriorityLevel NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union) {
	key := PriorityLevel

	delete(t.Priority, key)
}

// AppendPriority appends the supplied NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority struct to the
// list Priority of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) AppendPriority(v *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) error {
	key := v.PriorityLevel

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Priority == nil {
		t.Priority = make(map[NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union]*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority)
	}

	if _, ok := t.Priority[key]; ok {
		return fmt.Errorf("duplicate key for list Priority %v", key)
	}

	t.Priority[key] = v
	return nil
}

// GetMinThreshSeparation retrieves the value of the leaf MinThreshSeparation from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinThreshSeparation is set, it can
// safely use t.GetMinThreshSeparation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinThreshSeparation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) GetMinThreshSeparation() NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_MinThreshSeparation_Union {
	if t == nil || t.MinThreshSeparation == nil {
		return nil
	}
	return t.MinThreshSeparation
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Priority {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority represents the /nokia-conf/configure/groups/group/service/cpipe/sap/ingress/qos/policer-control-policy/overrides/root/priority-mbs-thresholds/priority YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority struct {
	MbsContribution NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_MbsContribution_Union `path:"mbs-contribution" module:"nokia-conf"`
	PriorityLevel   NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union   `path:"priority-level" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) IsYANGGoStruct() {
}

// GetMbsContribution retrieves the value of the leaf MbsContribution from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MbsContribution is set, it can
// safely use t.GetMbsContribution() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MbsContribution == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) GetMbsContribution() NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_MbsContribution_Union {
	if t == nil || t.MbsContribution == nil {
		return nil
	}
	return t.MbsContribution
}

// GetPriorityLevel retrieves the value of the leaf PriorityLevel from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PriorityLevel is set, it can
// safely use t.GetPriorityLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PriorityLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) GetPriorityLevel() NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union {
	if t == nil || t.PriorityLevel == nil {
		return nil
	}
	return t.PriorityLevel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"priority-level": t.PriorityLevel,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress represents the /nokia-conf/configure/groups/group/service/cpipe/sap/ingress/qos/sap-ingress YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress struct {
	Overrides   *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides `path:"overrides" module:"nokia-conf"`
	PolicyName  *string                                                                              `path:"policy-name" module:"nokia-conf"`
	QueuingType E_NokiaTypesServices_ServicesSapQueuingType                                          `path:"queuing-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress) IsYANGGoStruct() {}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress) GetOrCreateOverrides() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress) GetOverrides() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// GetQueuingType retrieves the value of the leaf QueuingType from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueuingType is set, it can
// safely use t.GetQueuingType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueuingType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress) GetQueuingType() E_NokiaTypesServices_ServicesSapQueuingType {
	if t == nil || t.QueuingType == 0 {
		return 0
	}
	return t.QueuingType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides represents the /nokia-conf/configure/groups/group/service/cpipe/sap/ingress/qos/sap-ingress/overrides YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides struct {
	IpCriteria   *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria                                                                                                              `path:"ip-criteria" module:"nokia-conf"`
	Ipv6Criteria *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria                                                                                                            `path:"ipv6-criteria" module:"nokia-conf"`
	Policer      map[NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PolicerId_Union]*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer `path:"policer" module:"nokia-conf"`
	Queue        map[NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue       `path:"queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides) IsYANGGoStruct() {
}

// NewPolicer creates a new entry in the Policer list of the
// NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides) NewPolicer(PolicerId NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PolicerId_Union) (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PolicerId_Union]*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer)
	}

	key := PolicerId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Policer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Policer", key)
	}

	t.Policer[key] = &NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer{
		PolicerId: PolicerId,
	}

	return t.Policer[key], nil
}

// RenamePolicer renames an entry in the list Policer within
// the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides) RenamePolicer(oldK, newK NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PolicerId_Union) error {
	if _, ok := t.Policer[newK]; ok {
		return fmt.Errorf("key %v already exists in Policer", newK)
	}

	e, ok := t.Policer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Policer", oldK)
	}
	e.PolicerId = newK

	t.Policer[newK] = e
	delete(t.Policer, oldK)
	return nil
}

// GetOrCreatePolicer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides) GetOrCreatePolicer(PolicerId NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PolicerId_Union) *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer {

	key := PolicerId

	if v, ok := t.Policer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicer(PolicerId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicer got unexpected error: %v", err))
	}
	return v
}

// GetPolicer retrieves the value with the specified key from
// the Policer map field of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides) GetPolicer(PolicerId NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PolicerId_Union) *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer {

	if t == nil {
		return nil
	}

	key := PolicerId

	if lm, ok := t.Policer[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides) DeletePolicer(PolicerId NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PolicerId_Union) {
	key := PolicerId

	delete(t.Policer, key)
}

// AppendPolicer appends the supplied NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer struct to the
// list Policer of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides) AppendPolicer(v *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) error {
	key := v.PolicerId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PolicerId_Union]*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer)
	}

	if _, ok := t.Policer[key]; ok {
		return fmt.Errorf("duplicate key for list Policer %v", key)
	}

	t.Policer[key] = v
	return nil
}

// NewQueue creates a new entry in the Queue list of the
// NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides) NewQueue(QueueId NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_QueueId_Union) (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue)
	}

	key := QueueId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue{
		QueueId: QueueId,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides) RenameQueue(oldK, newK NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_QueueId_Union) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.QueueId = newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides) GetOrCreateQueue(QueueId NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_QueueId_Union) *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue {

	key := QueueId

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(QueueId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides) GetQueue(QueueId NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_QueueId_Union) *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue {

	if t == nil {
		return nil
	}

	key := QueueId

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides) DeleteQueue(QueueId NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_QueueId_Union) {
	key := QueueId

	delete(t.Queue, key)
}

// AppendQueue appends the supplied NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue struct to the
// list Queue of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides) AppendQueue(v *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) error {
	key := v.QueueId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// GetOrCreateIpCriteria retrieves the value of the IpCriteria field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides) GetOrCreateIpCriteria() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria {
	if t.IpCriteria != nil {
		return t.IpCriteria
	}
	t.IpCriteria = &NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria{}
	return t.IpCriteria
}

// GetOrCreateIpv6Criteria retrieves the value of the Ipv6Criteria field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides) GetOrCreateIpv6Criteria() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria {
	if t.Ipv6Criteria != nil {
		return t.Ipv6Criteria
	}
	t.Ipv6Criteria = &NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria{}
	return t.Ipv6Criteria
}

// GetIpCriteria returns the value of the IpCriteria struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides. If the receiver or the field IpCriteria is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides) GetIpCriteria() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria {
	if t != nil && t.IpCriteria != nil {
		return t.IpCriteria
	}
	return nil
}

// GetIpv6Criteria returns the value of the Ipv6Criteria struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides. If the receiver or the field Ipv6Criteria is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides) GetIpv6Criteria() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria {
	if t != nil && t.Ipv6Criteria != nil {
		return t.Ipv6Criteria
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.IpCriteria.PopulateDefaults()
	t.Ipv6Criteria.PopulateDefaults()
	for _, e := range t.Policer {
		e.PopulateDefaults()
	}
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria represents the /nokia-conf/configure/groups/group/service/cpipe/sap/ingress/qos/sap-ingress/overrides/ip-criteria YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria struct {
	ActivateEntryTag *int32 `path:"activate-entry-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria) IsYANGGoStruct() {
}

// GetActivateEntryTag retrieves the value of the leaf ActivateEntryTag from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActivateEntryTag is set, it can
// safely use t.GetActivateEntryTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActivateEntryTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria) GetActivateEntryTag() int32 {
	if t == nil || t.ActivateEntryTag == nil {
		return 0
	}
	return *t.ActivateEntryTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria represents the /nokia-conf/configure/groups/group/service/cpipe/sap/ingress/qos/sap-ingress/overrides/ipv6-criteria YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria struct {
	ActivateEntryTag *int32 `path:"activate-entry-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria) IsYANGGoStruct() {
}

// GetActivateEntryTag retrieves the value of the leaf ActivateEntryTag from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActivateEntryTag is set, it can
// safely use t.GetActivateEntryTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActivateEntryTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria) GetActivateEntryTag() int32 {
	if t == nil || t.ActivateEntryTag == nil {
		return 0
	}
	return *t.ActivateEntryTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer represents the /nokia-conf/configure/groups/group/service/cpipe/sap/ingress/qos/sap-ingress/overrides/policer YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer struct {
	Cbs              NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Cbs_Union       `path:"cbs" module:"nokia-conf"`
	Mbs              NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Mbs_Union       `path:"mbs" module:"nokia-conf"`
	PacketByteOffset *int32                                                                                                      `path:"packet-byte-offset" module:"nokia-conf"`
	PercentRate      *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate    `path:"percent-rate" module:"nokia-conf"`
	PolicerId        NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PolicerId_Union `path:"policer-id" module:"nokia-conf"`
	Rate             *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate           `path:"rate" module:"nokia-conf"`
	StatMode         E_NokiaTypesQos_IngressPolicerStatMode                                                                      `path:"stat-mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) IsYANGGoStruct() {
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetOrCreatePercentRate() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate{}
	return t.PercentRate
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetOrCreateRate() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate{}
	return t.Rate
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetPercentRate() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetRate() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetCbs() NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return nil
	}
	return t.Cbs
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetMbs() NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return nil
	}
	return t.Mbs
}

// GetPacketByteOffset retrieves the value of the leaf PacketByteOffset from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketByteOffset is set, it can
// safely use t.GetPacketByteOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketByteOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetPacketByteOffset() int32 {
	if t == nil || t.PacketByteOffset == nil {
		return 0
	}
	return *t.PacketByteOffset
}

// GetPolicerId retrieves the value of the leaf PolicerId from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerId is set, it can
// safely use t.GetPolicerId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetPolicerId() NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PolicerId_Union {
	if t == nil || t.PolicerId == nil {
		return nil
	}
	return t.PolicerId
}

// GetStatMode retrieves the value of the leaf StatMode from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StatMode is set, it can
// safely use t.GetStatMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StatMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetStatMode() E_NokiaTypesQos_IngressPolicerStatMode {
	if t == nil || t.StatMode == 0 {
		return 0
	}
	return t.StatMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PercentRate.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"policer-id": t.PolicerId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate represents the /nokia-conf/configure/groups/group/service/cpipe/sap/ingress/qos/sap-ingress/overrides/policer/percent-rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate struct {
	Cir *float64 `path:"cir" module:"nokia-conf"`
	Pir *float64 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 0.0
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 0.0
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate represents the /nokia-conf/configure/groups/group/service/cpipe/sap/ingress/qos/sap-ingress/overrides/policer/rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate struct {
	Cir NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) GetCir() NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) GetPir() NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue represents the /nokia-conf/configure/groups/group/service/cpipe/sap/ingress/qos/sap-ingress/overrides/queue YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue struct {
	AdaptationRule    *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule    `path:"adaptation-rule" module:"nokia-conf"`
	Cbs               NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Cbs_Union          `path:"cbs" module:"nokia-conf"`
	DropTail          *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail          `path:"drop-tail" module:"nokia-conf"`
	Mbs               NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Mbs_Union          `path:"mbs" module:"nokia-conf"`
	MonitorDepth      *bool                                                                                                        `path:"monitor-depth" module:"nokia-conf"`
	MonitorQueueDepth *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth `path:"monitor-queue-depth" module:"nokia-conf" yangPresence:"true"`
	Parent            *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent            `path:"parent" module:"nokia-conf"`
	PercentRate       *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate       `path:"percent-rate" module:"nokia-conf"`
	QueueId           NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_QueueId_Union      `path:"queue-id" module:"nokia-conf"`
	Rate              *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate              `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) IsYANGGoStruct() {
}

// GetOrCreateAdaptationRule retrieves the value of the AdaptationRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetOrCreateAdaptationRule() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule {
	if t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	t.AdaptationRule = &NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule{}
	return t.AdaptationRule
}

// GetOrCreateDropTail retrieves the value of the DropTail field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetOrCreateDropTail() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail {
	if t.DropTail != nil {
		return t.DropTail
	}
	t.DropTail = &NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail{}
	return t.DropTail
}

// GetOrCreateMonitorQueueDepth retrieves the value of the MonitorQueueDepth field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetOrCreateMonitorQueueDepth() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth {
	if t.MonitorQueueDepth != nil {
		return t.MonitorQueueDepth
	}
	t.MonitorQueueDepth = &NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth{}
	return t.MonitorQueueDepth
}

// GetOrCreateParent retrieves the value of the Parent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetOrCreateParent() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent {
	if t.Parent != nil {
		return t.Parent
	}
	t.Parent = &NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent{}
	return t.Parent
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetOrCreatePercentRate() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate{}
	return t.PercentRate
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetOrCreateRate() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate{}
	return t.Rate
}

// GetAdaptationRule returns the value of the AdaptationRule struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue. If the receiver or the field AdaptationRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetAdaptationRule() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule {
	if t != nil && t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	return nil
}

// GetDropTail returns the value of the DropTail struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue. If the receiver or the field DropTail is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetDropTail() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail {
	if t != nil && t.DropTail != nil {
		return t.DropTail
	}
	return nil
}

// GetMonitorQueueDepth returns the value of the MonitorQueueDepth struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue. If the receiver or the field MonitorQueueDepth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetMonitorQueueDepth() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth {
	if t != nil && t.MonitorQueueDepth != nil {
		return t.MonitorQueueDepth
	}
	return nil
}

// GetParent returns the value of the Parent struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue. If the receiver or the field Parent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetParent() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent {
	if t != nil && t.Parent != nil {
		return t.Parent
	}
	return nil
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetPercentRate() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetRate() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetCbs() NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return nil
	}
	return t.Cbs
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetMbs() NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return nil
	}
	return t.Mbs
}

// GetMonitorDepth retrieves the value of the leaf MonitorDepth from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorDepth is set, it can
// safely use t.GetMonitorDepth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorDepth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetMonitorDepth() bool {
	if t == nil || t.MonitorDepth == nil {
		return false
	}
	return *t.MonitorDepth
}

// GetQueueId retrieves the value of the leaf QueueId from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueId is set, it can
// safely use t.GetQueueId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetQueueId() NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_QueueId_Union {
	if t == nil || t.QueueId == nil {
		return nil
	}
	return t.QueueId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MonitorDepth == nil {
		var v bool = false
		t.MonitorDepth = &v
	}
	t.AdaptationRule.PopulateDefaults()
	t.DropTail.PopulateDefaults()
	t.MonitorQueueDepth.PopulateDefaults()
	t.Parent.PopulateDefaults()
	t.PercentRate.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"queue-id": t.QueueId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule represents the /nokia-conf/configure/groups/group/service/cpipe/sap/ingress/qos/sap-ingress/overrides/queue/adaptation-rule YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule struct {
	Cir E_NokiaTypesQos_AdaptationRuleOverride `path:"cir" module:"nokia-conf"`
	Pir E_NokiaTypesQos_AdaptationRuleOverride `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) GetCir() E_NokiaTypesQos_AdaptationRuleOverride {
	if t == nil || t.Cir == 0 {
		return 0
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) GetPir() E_NokiaTypesQos_AdaptationRuleOverride {
	if t == nil || t.Pir == 0 {
		return 0
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail represents the /nokia-conf/configure/groups/group/service/cpipe/sap/ingress/qos/sap-ingress/overrides/queue/drop-tail YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail struct {
	Low *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low `path:"low" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) IsYANGGoStruct() {
}

// GetOrCreateLow retrieves the value of the Low field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) GetOrCreateLow() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low {
	if t.Low != nil {
		return t.Low
	}
	t.Low = &NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low{}
	return t.Low
}

// GetLow returns the value of the Low struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail. If the receiver or the field Low is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) GetLow() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low {
	if t != nil && t.Low != nil {
		return t.Low
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Low.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low represents the /nokia-conf/configure/groups/group/service/cpipe/sap/ingress/qos/sap-ingress/overrides/queue/drop-tail/low YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low struct {
	PercentReductionFromMbs NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low_PercentReductionFromMbs_Union `path:"percent-reduction-from-mbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low) IsYANGGoStruct() {
}

// GetPercentReductionFromMbs retrieves the value of the leaf PercentReductionFromMbs from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentReductionFromMbs is set, it can
// safely use t.GetPercentReductionFromMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentReductionFromMbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low) GetPercentReductionFromMbs() NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low_PercentReductionFromMbs_Union {
	if t == nil || t.PercentReductionFromMbs == nil {
		return nil
	}
	return t.PercentReductionFromMbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth represents the /nokia-conf/configure/groups/group/service/cpipe/sap/ingress/qos/sap-ingress/overrides/queue/monitor-queue-depth YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth struct {
	FastPolling *bool `path:"fast-polling" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth) IsYANGGoStruct() {
}

// GetFastPolling retrieves the value of the leaf FastPolling from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FastPolling is set, it can
// safely use t.GetFastPolling() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FastPolling == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth) GetFastPolling() bool {
	if t == nil || t.FastPolling == nil {
		return false
	}
	return *t.FastPolling
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FastPolling == nil {
		var v bool = false
		t.FastPolling = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent represents the /nokia-conf/configure/groups/group/service/cpipe/sap/ingress/qos/sap-ingress/overrides/queue/parent YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent struct {
	CirWeight *int32 `path:"cir-weight" module:"nokia-conf"`
	Weight    *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) IsYANGGoStruct() {
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 0
	}
	return *t.CirWeight
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate represents the /nokia-conf/configure/groups/group/service/cpipe/sap/ingress/qos/sap-ingress/overrides/queue/percent-rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate struct {
	Cir *float64 `path:"cir" module:"nokia-conf"`
	Pir *float64 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 0.0
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 0.0
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate represents the /nokia-conf/configure/groups/group/service/cpipe/sap/ingress/qos/sap-ingress/overrides/queue/rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate struct {
	Cir NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) GetCir() NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) GetPir() NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy represents the /nokia-conf/configure/groups/group/service/cpipe/sap/ingress/qos/scheduler-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy struct {
	Overrides  *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides `path:"overrides" module:"nokia-conf"`
	PolicyName *string                                                                                   `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy) IsYANGGoStruct() {
}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy) GetOrCreateOverrides() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy) GetOverrides() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides represents the /nokia-conf/configure/groups/group/service/cpipe/sap/ingress/qos/scheduler-policy/overrides YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides struct {
	Scheduler map[string]*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler `path:"scheduler" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides) IsYANGGoStruct() {
}

// NewScheduler creates a new entry in the Scheduler list of the
// NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides) NewScheduler(SchedulerName string) (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler)
	}

	key := SchedulerName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Scheduler[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Scheduler", key)
	}

	t.Scheduler[key] = &NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler{
		SchedulerName: &SchedulerName,
	}

	return t.Scheduler[key], nil
}

// RenameScheduler renames an entry in the list Scheduler within
// the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides) RenameScheduler(oldK, newK string) error {
	if _, ok := t.Scheduler[newK]; ok {
		return fmt.Errorf("key %v already exists in Scheduler", newK)
	}

	e, ok := t.Scheduler[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Scheduler", oldK)
	}
	e.SchedulerName = &newK

	t.Scheduler[newK] = e
	delete(t.Scheduler, oldK)
	return nil
}

// GetOrCreateScheduler retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides) GetOrCreateScheduler(SchedulerName string) *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler {

	key := SchedulerName

	if v, ok := t.Scheduler[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewScheduler(SchedulerName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateScheduler got unexpected error: %v", err))
	}
	return v
}

// GetScheduler retrieves the value with the specified key from
// the Scheduler map field of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides) GetScheduler(SchedulerName string) *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler {

	if t == nil {
		return nil
	}

	key := SchedulerName

	if lm, ok := t.Scheduler[key]; ok {
		return lm
	}
	return nil
}

// DeleteScheduler deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides) DeleteScheduler(SchedulerName string) {
	key := SchedulerName

	delete(t.Scheduler, key)
}

// AppendScheduler appends the supplied NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler struct to the
// list Scheduler of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides) AppendScheduler(v *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) error {
	if v.SchedulerName == nil {
		return fmt.Errorf("invalid nil key received for SchedulerName")
	}

	key := *v.SchedulerName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler)
	}

	if _, ok := t.Scheduler[key]; ok {
		return fmt.Errorf("duplicate key for list Scheduler %v", key)
	}

	t.Scheduler[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Scheduler {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler represents the /nokia-conf/configure/groups/group/service/cpipe/sap/ingress/qos/scheduler-policy/overrides/scheduler YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler struct {
	Parent        *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent `path:"parent" module:"nokia-conf"`
	Rate          *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate   `path:"rate" module:"nokia-conf"`
	SchedulerName *string                                                                                                    `path:"scheduler-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) IsYANGGoStruct() {
}

// GetOrCreateParent retrieves the value of the Parent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) GetOrCreateParent() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent {
	if t.Parent != nil {
		return t.Parent
	}
	t.Parent = &NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent{}
	return t.Parent
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) GetOrCreateRate() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate{}
	return t.Rate
}

// GetParent returns the value of the Parent struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler. If the receiver or the field Parent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) GetParent() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent {
	if t != nil && t.Parent != nil {
		return t.Parent
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) GetRate() *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetSchedulerName retrieves the value of the leaf SchedulerName from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SchedulerName is set, it can
// safely use t.GetSchedulerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SchedulerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) GetSchedulerName() string {
	if t == nil || t.SchedulerName == nil {
		return ""
	}
	return *t.SchedulerName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Parent.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SchedulerName == nil {
		return nil, fmt.Errorf("nil value for key SchedulerName")
	}

	return map[string]interface{}{
		"scheduler-name": *t.SchedulerName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent represents the /nokia-conf/configure/groups/group/service/cpipe/sap/ingress/qos/scheduler-policy/overrides/scheduler/parent YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent struct {
	CirWeight *int32 `path:"cir-weight" module:"nokia-conf"`
	Weight    *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) IsYANGGoStruct() {
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 0
	}
	return *t.CirWeight
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate represents the /nokia-conf/configure/groups/group/service/cpipe/sap/ingress/qos/scheduler-policy/overrides/scheduler/rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate struct {
	Cir NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) GetCir() NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) GetPir() NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Lag represents the /nokia-conf/configure/groups/group/service/cpipe/sap/lag YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Lag struct {
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Lag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Lag) IsYANGGoStruct() {}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Lag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Lag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Lag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Lag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Lag) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Lag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Lag.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_Sap_Lag) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp represents the /nokia-conf/configure/groups/group/service/cpipe/spoke-sdp YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp struct {
	AdminState  E_NokiaTypesSros_AdminState                                             `path:"admin-state" module:"nokia-conf"`
	Bandwidth   NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Bandwidth_Union `path:"bandwidth" module:"nokia-conf"`
	Bfd         *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Bfd            `path:"bfd" module:"nokia-conf"`
	BfdLiveness *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_BfdLiveness    `path:"bfd-liveness" module:"nokia-conf" yangPresence:"true"`
	BfdTemplate *string                                                                 `path:"bfd-template" module:"nokia-conf"`
	ControlWord *bool                                                                   `path:"control-word" module:"nokia-conf"`
	Description *string                                                                 `path:"description" module:"nokia-conf"`
	Egress      *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress         `path:"egress" module:"nokia-conf"`
	Endpoint    *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Endpoint       `path:"endpoint" module:"nokia-conf"`
	Ingress     *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress        `path:"ingress" module:"nokia-conf"`
	SdpBindId   *string                                                                 `path:"sdp-bind-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp) IsYANGGoStruct() {}

// GetOrCreateBfd retrieves the value of the Bfd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp) GetOrCreateBfd() *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Bfd {
	if t.Bfd != nil {
		return t.Bfd
	}
	t.Bfd = &NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Bfd{}
	return t.Bfd
}

// GetOrCreateBfdLiveness retrieves the value of the BfdLiveness field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp) GetOrCreateBfdLiveness() *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_BfdLiveness {
	if t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	t.BfdLiveness = &NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_BfdLiveness{}
	return t.BfdLiveness
}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp) GetOrCreateEgress() *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress{}
	return t.Egress
}

// GetOrCreateEndpoint retrieves the value of the Endpoint field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp) GetOrCreateEndpoint() *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Endpoint {
	if t.Endpoint != nil {
		return t.Endpoint
	}
	t.Endpoint = &NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Endpoint{}
	return t.Endpoint
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp) GetOrCreateIngress() *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress{}
	return t.Ingress
}

// GetBfd returns the value of the Bfd struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp. If the receiver or the field Bfd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp) GetBfd() *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Bfd {
	if t != nil && t.Bfd != nil {
		return t.Bfd
	}
	return nil
}

// GetBfdLiveness returns the value of the BfdLiveness struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp. If the receiver or the field BfdLiveness is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp) GetBfdLiveness() *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_BfdLiveness {
	if t != nil && t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	return nil
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp) GetEgress() *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetEndpoint returns the value of the Endpoint struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp. If the receiver or the field Endpoint is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp) GetEndpoint() *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Endpoint {
	if t != nil && t.Endpoint != nil {
		return t.Endpoint
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp) GetIngress() *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetBandwidth retrieves the value of the leaf Bandwidth from the NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bandwidth is set, it can
// safely use t.GetBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp) GetBandwidth() NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Bandwidth_Union {
	if t == nil || t.Bandwidth == nil {
		return UnionUint32(0)
	}
	return t.Bandwidth
}

// GetBfdTemplate retrieves the value of the leaf BfdTemplate from the NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdTemplate is set, it can
// safely use t.GetBfdTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp) GetBfdTemplate() string {
	if t == nil || t.BfdTemplate == nil {
		return ""
	}
	return *t.BfdTemplate
}

// GetControlWord retrieves the value of the leaf ControlWord from the NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ControlWord is set, it can
// safely use t.GetControlWord() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ControlWord == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp) GetControlWord() bool {
	if t == nil || t.ControlWord == nil {
		return true
	}
	return *t.ControlWord
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetSdpBindId retrieves the value of the leaf SdpBindId from the NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SdpBindId is set, it can
// safely use t.GetSdpBindId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SdpBindId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp) GetSdpBindId() string {
	if t == nil || t.SdpBindId == nil {
		return ""
	}
	return *t.SdpBindId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Bandwidth == nil {
		t.Bandwidth = UnionUint32(0)
	}
	if t.ControlWord == nil {
		var v bool = true
		t.ControlWord = &v
	}
	t.Bfd.PopulateDefaults()
	t.BfdLiveness.PopulateDefaults()
	t.Egress.PopulateDefaults()
	t.Endpoint.PopulateDefaults()
	t.Ingress.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SdpBindId == nil {
		return nil, fmt.Errorf("nil value for key SdpBindId")
	}

	return map[string]interface{}{
		"sdp-bind-id": *t.SdpBindId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Bfd represents the /nokia-conf/configure/groups/group/service/cpipe/spoke-sdp/bfd YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Bfd struct {
	BfdLiveness *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Bfd_BfdLiveness `path:"bfd-liveness" module:"nokia-conf" yangPresence:"true"`
	BfdTemplate *string                                                                  `path:"bfd-template" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Bfd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Bfd) IsYANGGoStruct() {}

// GetOrCreateBfdLiveness retrieves the value of the BfdLiveness field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Bfd) GetOrCreateBfdLiveness() *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Bfd_BfdLiveness {
	if t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	t.BfdLiveness = &NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Bfd_BfdLiveness{}
	return t.BfdLiveness
}

// GetBfdLiveness returns the value of the BfdLiveness struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Bfd. If the receiver or the field BfdLiveness is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Bfd) GetBfdLiveness() *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Bfd_BfdLiveness {
	if t != nil && t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	return nil
}

// GetBfdTemplate retrieves the value of the leaf BfdTemplate from the NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdTemplate is set, it can
// safely use t.GetBfdTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Bfd) GetBfdTemplate() string {
	if t == nil || t.BfdTemplate == nil {
		return ""
	}
	return *t.BfdTemplate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Bfd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Bfd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.BfdLiveness.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Bfd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Bfd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Bfd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Bfd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Bfd.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Bfd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_BfdLiveness represents the /nokia-conf/configure/groups/group/service/cpipe/spoke-sdp/bfd-liveness YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_BfdLiveness struct {
	Encap E_NokiaTypesServices_BfdEncap `path:"encap" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_BfdLiveness implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_BfdLiveness) IsYANGGoStruct() {}

// GetEncap retrieves the value of the leaf Encap from the NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Encap is set, it can
// safely use t.GetEncap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Encap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_BfdLiveness) GetEncap() E_NokiaTypesServices_BfdEncap {
	if t == nil || t.Encap == 0 {
		return NokiaTypesServices_BfdEncap_ipv4
	}
	return t.Encap
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_BfdLiveness
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_BfdLiveness) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Encap == 0 {
		t.Encap = NokiaTypesServices_BfdEncap_ipv4
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_BfdLiveness) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_BfdLiveness"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_BfdLiveness) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_BfdLiveness) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_BfdLiveness.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_BfdLiveness) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Bfd_BfdLiveness represents the /nokia-conf/configure/groups/group/service/cpipe/spoke-sdp/bfd/bfd-liveness YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Bfd_BfdLiveness struct {
	Encap E_NokiaTypesServices_BfdEncap `path:"encap" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Bfd_BfdLiveness implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Bfd_BfdLiveness) IsYANGGoStruct() {}

// GetEncap retrieves the value of the leaf Encap from the NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Bfd_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Encap is set, it can
// safely use t.GetEncap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Encap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Bfd_BfdLiveness) GetEncap() E_NokiaTypesServices_BfdEncap {
	if t == nil || t.Encap == 0 {
		return NokiaTypesServices_BfdEncap_ipv4
	}
	return t.Encap
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Bfd_BfdLiveness
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Bfd_BfdLiveness) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Encap == 0 {
		t.Encap = NokiaTypesServices_BfdEncap_ipv4
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Bfd_BfdLiveness) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Bfd_BfdLiveness"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Bfd_BfdLiveness) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Bfd_BfdLiveness) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Bfd_BfdLiveness.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Bfd_BfdLiveness) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress represents the /nokia-conf/configure/groups/group/service/cpipe/spoke-sdp/egress YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress struct {
	Qos     *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress_Qos `path:"qos" module:"nokia-conf"`
	VcLabel *uint32                                                             `path:"vc-label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress) IsYANGGoStruct() {}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress) GetOrCreateQos() *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress_Qos{}
	return t.Qos
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress) GetQos() *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// GetVcLabel retrieves the value of the leaf VcLabel from the NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VcLabel is set, it can
// safely use t.GetVcLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VcLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress) GetVcLabel() uint32 {
	if t == nil || t.VcLabel == nil {
		return 0
	}
	return *t.VcLabel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress_Qos represents the /nokia-conf/configure/groups/group/service/cpipe/spoke-sdp/egress/qos YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress_Qos struct {
	Network *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress_Qos_Network `path:"network" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress_Qos) IsYANGGoStruct() {}

// GetOrCreateNetwork retrieves the value of the Network field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress_Qos) GetOrCreateNetwork() *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress_Qos_Network {
	if t.Network != nil {
		return t.Network
	}
	t.Network = &NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress_Qos_Network{}
	return t.Network
}

// GetNetwork returns the value of the Network struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress_Qos. If the receiver or the field Network is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress_Qos) GetNetwork() *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress_Qos_Network {
	if t != nil && t.Network != nil {
		return t.Network
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Network.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress_Qos.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress_Qos_Network represents the /nokia-conf/configure/groups/group/service/cpipe/spoke-sdp/egress/qos/network YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress_Qos_Network struct {
	PolicyName        *string                                                                                       `path:"policy-name" module:"nokia-conf"`
	PortRedirectGroup *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup `path:"port-redirect-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress_Qos_Network implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress_Qos_Network) IsYANGGoStruct() {}

// GetOrCreatePortRedirectGroup retrieves the value of the PortRedirectGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress_Qos_Network) GetOrCreatePortRedirectGroup() *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup {
	if t.PortRedirectGroup != nil {
		return t.PortRedirectGroup
	}
	t.PortRedirectGroup = &NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup{}
	return t.PortRedirectGroup
}

// GetPortRedirectGroup returns the value of the PortRedirectGroup struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress_Qos_Network. If the receiver or the field PortRedirectGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress_Qos_Network) GetPortRedirectGroup() *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup {
	if t != nil && t.PortRedirectGroup != nil {
		return t.PortRedirectGroup
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress_Qos_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress_Qos_Network) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress_Qos_Network
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress_Qos_Network) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PortRedirectGroup.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress_Qos_Network) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress_Qos_Network"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress_Qos_Network) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress_Qos_Network) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress_Qos_Network.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress_Qos_Network) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup represents the /nokia-conf/configure/groups/group/service/cpipe/spoke-sdp/egress/qos/network/port-redirect-group YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup struct {
	GroupName *string `path:"group-name" module:"nokia-conf"`
	Instance  *uint32 `path:"instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) IsYANGGoStruct() {
}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// GetInstance retrieves the value of the leaf Instance from the NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instance is set, it can
// safely use t.GetInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) GetInstance() uint32 {
	if t == nil || t.Instance == nil {
		return 0
	}
	return *t.Instance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Endpoint represents the /nokia-conf/configure/groups/group/service/cpipe/spoke-sdp/endpoint YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Endpoint struct {
	Icb        *bool                                                                             `path:"icb" module:"nokia-conf"`
	Name       *string                                                                           `path:"name" module:"nokia-conf"`
	Precedence NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Endpoint_Precedence_Union `path:"precedence" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Endpoint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Endpoint) IsYANGGoStruct() {}

// GetIcb retrieves the value of the leaf Icb from the NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Icb is set, it can
// safely use t.GetIcb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Icb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Endpoint) GetIcb() bool {
	if t == nil || t.Icb == nil {
		return false
	}
	return *t.Icb
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Endpoint) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPrecedence retrieves the value of the leaf Precedence from the NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Precedence is set, it can
// safely use t.GetPrecedence() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Precedence == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Endpoint) GetPrecedence() NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Endpoint_Precedence_Union {
	if t == nil || t.Precedence == nil {
		return UnionUint32(4)
	}
	return t.Precedence
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Endpoint
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Endpoint) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Icb == nil {
		var v bool = false
		t.Icb = &v
	}
	if t.Precedence == nil {
		t.Precedence = UnionUint32(4)
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Endpoint) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Endpoint"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Endpoint) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Endpoint) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Endpoint.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Endpoint) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress represents the /nokia-conf/configure/groups/group/service/cpipe/spoke-sdp/ingress YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress struct {
	Qos     *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress_Qos `path:"qos" module:"nokia-conf"`
	VcLabel *uint32                                                              `path:"vc-label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress) IsYANGGoStruct() {}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress) GetOrCreateQos() *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress_Qos{}
	return t.Qos
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress) GetQos() *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// GetVcLabel retrieves the value of the leaf VcLabel from the NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VcLabel is set, it can
// safely use t.GetVcLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VcLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress) GetVcLabel() uint32 {
	if t == nil || t.VcLabel == nil {
		return 0
	}
	return *t.VcLabel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress_Qos represents the /nokia-conf/configure/groups/group/service/cpipe/spoke-sdp/ingress/qos YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress_Qos struct {
	Network *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress_Qos_Network `path:"network" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress_Qos) IsYANGGoStruct() {}

// GetOrCreateNetwork retrieves the value of the Network field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress_Qos) GetOrCreateNetwork() *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress_Qos_Network {
	if t.Network != nil {
		return t.Network
	}
	t.Network = &NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress_Qos_Network{}
	return t.Network
}

// GetNetwork returns the value of the Network struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress_Qos. If the receiver or the field Network is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress_Qos) GetNetwork() *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress_Qos_Network {
	if t != nil && t.Network != nil {
		return t.Network
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Network.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress_Qos.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress_Qos_Network represents the /nokia-conf/configure/groups/group/service/cpipe/spoke-sdp/ingress/qos/network YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress_Qos_Network struct {
	FpRedirectGroup *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup `path:"fp-redirect-group" module:"nokia-conf"`
	PolicyName      *string                                                                                      `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress_Qos_Network implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress_Qos_Network) IsYANGGoStruct() {
}

// GetOrCreateFpRedirectGroup retrieves the value of the FpRedirectGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress_Qos_Network) GetOrCreateFpRedirectGroup() *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup {
	if t.FpRedirectGroup != nil {
		return t.FpRedirectGroup
	}
	t.FpRedirectGroup = &NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup{}
	return t.FpRedirectGroup
}

// GetFpRedirectGroup returns the value of the FpRedirectGroup struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress_Qos_Network. If the receiver or the field FpRedirectGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress_Qos_Network) GetFpRedirectGroup() *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup {
	if t != nil && t.FpRedirectGroup != nil {
		return t.FpRedirectGroup
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress_Qos_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress_Qos_Network) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress_Qos_Network
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress_Qos_Network) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.FpRedirectGroup.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress_Qos_Network) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress_Qos_Network"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress_Qos_Network) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress_Qos_Network) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress_Qos_Network.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress_Qos_Network) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup represents the /nokia-conf/configure/groups/group/service/cpipe/spoke-sdp/ingress/qos/network/fp-redirect-group YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup struct {
	GroupName *string `path:"group-name" module:"nokia-conf"`
	Instance  *uint32 `path:"instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) IsYANGGoStruct() {
}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// GetInstance retrieves the value of the leaf Instance from the NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instance is set, it can
// safely use t.GetInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) GetInstance() uint32 {
	if t == nil || t.Instance == nil {
		return 0
	}
	return *t.Instance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup.
func (*NokiaConf_Configure_Groups_Group_Service_Cpipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Customer represents the /nokia-conf/configure/groups/group/service/customer YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Customer struct {
	Contact          *string                                                                        `path:"contact" module:"nokia-conf"`
	CustomerId       *uint32                                                                        `path:"customer-id" module:"nokia-conf"`
	CustomerName     *string                                                                        `path:"customer-name" module:"nokia-conf"`
	Description      *string                                                                        `path:"description" module:"nokia-conf"`
	MultiServiceSite map[string]*NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite `path:"multi-service-site" module:"nokia-conf"`
	Phone            *string                                                                        `path:"phone" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Customer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Customer) IsYANGGoStruct() {}

// NewMultiServiceSite creates a new entry in the MultiServiceSite list of the
// NokiaConf_Configure_Groups_Group_Service_Customer struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer) NewMultiServiceSite(MultiServiceSiteName string) (*NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MultiServiceSite == nil {
		t.MultiServiceSite = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite)
	}

	key := MultiServiceSiteName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MultiServiceSite[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MultiServiceSite", key)
	}

	t.MultiServiceSite[key] = &NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite{
		MultiServiceSiteName: &MultiServiceSiteName,
	}

	return t.MultiServiceSite[key], nil
}

// RenameMultiServiceSite renames an entry in the list MultiServiceSite within
// the NokiaConf_Configure_Groups_Group_Service_Customer struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer) RenameMultiServiceSite(oldK, newK string) error {
	if _, ok := t.MultiServiceSite[newK]; ok {
		return fmt.Errorf("key %v already exists in MultiServiceSite", newK)
	}

	e, ok := t.MultiServiceSite[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MultiServiceSite", oldK)
	}
	e.MultiServiceSiteName = &newK

	t.MultiServiceSite[newK] = e
	delete(t.MultiServiceSite, oldK)
	return nil
}

// GetOrCreateMultiServiceSite retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Customer. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer) GetOrCreateMultiServiceSite(MultiServiceSiteName string) *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite {

	key := MultiServiceSiteName

	if v, ok := t.MultiServiceSite[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMultiServiceSite(MultiServiceSiteName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMultiServiceSite got unexpected error: %v", err))
	}
	return v
}

// GetMultiServiceSite retrieves the value with the specified key from
// the MultiServiceSite map field of NokiaConf_Configure_Groups_Group_Service_Customer. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer) GetMultiServiceSite(MultiServiceSiteName string) *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite {

	if t == nil {
		return nil
	}

	key := MultiServiceSiteName

	if lm, ok := t.MultiServiceSite[key]; ok {
		return lm
	}
	return nil
}

// DeleteMultiServiceSite deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Customer. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer) DeleteMultiServiceSite(MultiServiceSiteName string) {
	key := MultiServiceSiteName

	delete(t.MultiServiceSite, key)
}

// AppendMultiServiceSite appends the supplied NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite struct to the
// list MultiServiceSite of NokiaConf_Configure_Groups_Group_Service_Customer. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer) AppendMultiServiceSite(v *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite) error {
	if v.MultiServiceSiteName == nil {
		return fmt.Errorf("invalid nil key received for MultiServiceSiteName")
	}

	key := *v.MultiServiceSiteName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MultiServiceSite == nil {
		t.MultiServiceSite = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite)
	}

	if _, ok := t.MultiServiceSite[key]; ok {
		return fmt.Errorf("duplicate key for list MultiServiceSite %v", key)
	}

	t.MultiServiceSite[key] = v
	return nil
}

// GetContact retrieves the value of the leaf Contact from the NokiaConf_Configure_Groups_Group_Service_Customer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Contact is set, it can
// safely use t.GetContact() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Contact == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer) GetContact() string {
	if t == nil || t.Contact == nil {
		return ""
	}
	return *t.Contact
}

// GetCustomerId retrieves the value of the leaf CustomerId from the NokiaConf_Configure_Groups_Group_Service_Customer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CustomerId is set, it can
// safely use t.GetCustomerId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CustomerId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer) GetCustomerId() uint32 {
	if t == nil || t.CustomerId == nil {
		return 0
	}
	return *t.CustomerId
}

// GetCustomerName retrieves the value of the leaf CustomerName from the NokiaConf_Configure_Groups_Group_Service_Customer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CustomerName is set, it can
// safely use t.GetCustomerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CustomerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer) GetCustomerName() string {
	if t == nil || t.CustomerName == nil {
		return ""
	}
	return *t.CustomerName
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Customer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetPhone retrieves the value of the leaf Phone from the NokiaConf_Configure_Groups_Group_Service_Customer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Phone is set, it can
// safely use t.GetPhone() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Phone == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer) GetPhone() string {
	if t == nil || t.Phone == nil {
		return ""
	}
	return *t.Phone
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Customer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.MultiServiceSite {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Customer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CustomerName == nil {
		return nil, fmt.Errorf("nil value for key CustomerName")
	}

	return map[string]interface{}{
		"customer-name": *t.CustomerName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Customer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Customer.
func (*NokiaConf_Configure_Groups_Group_Service_Customer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite represents the /nokia-conf/configure/groups/group/service/customer/multi-service-site YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite struct {
	Assignment           *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Assignment `path:"assignment" module:"nokia-conf"`
	Description          *string                                                                        `path:"description" module:"nokia-conf"`
	Egress               *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress     `path:"egress" module:"nokia-conf"`
	Ingress              *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress    `path:"ingress" module:"nokia-conf"`
	MultiServiceSiteName *string                                                                        `path:"multi-service-site-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite) IsYANGGoStruct() {}

// GetOrCreateAssignment retrieves the value of the Assignment field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite) GetOrCreateAssignment() *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Assignment {
	if t.Assignment != nil {
		return t.Assignment
	}
	t.Assignment = &NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Assignment{}
	return t.Assignment
}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite) GetOrCreateEgress() *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress{}
	return t.Egress
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite) GetOrCreateIngress() *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress{}
	return t.Ingress
}

// GetAssignment returns the value of the Assignment struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite. If the receiver or the field Assignment is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite) GetAssignment() *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Assignment {
	if t != nil && t.Assignment != nil {
		return t.Assignment
	}
	return nil
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite) GetEgress() *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite) GetIngress() *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetMultiServiceSiteName retrieves the value of the leaf MultiServiceSiteName from the NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MultiServiceSiteName is set, it can
// safely use t.GetMultiServiceSiteName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MultiServiceSiteName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite) GetMultiServiceSiteName() string {
	if t == nil || t.MultiServiceSiteName == nil {
		return ""
	}
	return *t.MultiServiceSiteName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Assignment.PopulateDefaults()
	t.Egress.PopulateDefaults()
	t.Ingress.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MultiServiceSiteName == nil {
		return nil, fmt.Errorf("nil value for key MultiServiceSiteName")
	}

	return map[string]interface{}{
		"multi-service-site-name": *t.MultiServiceSiteName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite.
func (*NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Assignment represents the /nokia-conf/configure/groups/group/service/customer/multi-service-site/assignment YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Assignment struct {
	Card *uint32 `path:"card" module:"nokia-conf"`
	Fpe  *uint32 `path:"fpe" module:"nokia-conf"`
	Port *string `path:"port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Assignment implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Assignment) IsYANGGoStruct() {
}

// GetCard retrieves the value of the leaf Card from the NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Assignment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Card is set, it can
// safely use t.GetCard() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Card == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Assignment) GetCard() uint32 {
	if t == nil || t.Card == nil {
		return 0
	}
	return *t.Card
}

// GetFpe retrieves the value of the leaf Fpe from the NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Assignment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fpe is set, it can
// safely use t.GetFpe() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fpe == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Assignment) GetFpe() uint32 {
	if t == nil || t.Fpe == nil {
		return 0
	}
	return *t.Fpe
}

// GetPort retrieves the value of the leaf Port from the NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Assignment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Assignment) GetPort() string {
	if t == nil || t.Port == nil {
		return ""
	}
	return *t.Port
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Assignment
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Assignment) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Assignment) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Assignment"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Assignment) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Assignment) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Assignment.
func (*NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Assignment) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress represents the /nokia-conf/configure/groups/group/service/customer/multi-service-site/egress YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress struct {
	AggRate              *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_AggRate         `path:"agg-rate" module:"nokia-conf"`
	PolicerControlPolicy *string                                                                                    `path:"policer-control-policy" module:"nokia-conf"`
	SchedulerPolicy      *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy `path:"scheduler-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress) IsYANGGoStruct() {}

// GetOrCreateAggRate retrieves the value of the AggRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress) GetOrCreateAggRate() *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_AggRate {
	if t.AggRate != nil {
		return t.AggRate
	}
	t.AggRate = &NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_AggRate{}
	return t.AggRate
}

// GetOrCreateSchedulerPolicy retrieves the value of the SchedulerPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress) GetOrCreateSchedulerPolicy() *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy {
	if t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	t.SchedulerPolicy = &NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy{}
	return t.SchedulerPolicy
}

// GetAggRate returns the value of the AggRate struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress. If the receiver or the field AggRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress) GetAggRate() *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_AggRate {
	if t != nil && t.AggRate != nil {
		return t.AggRate
	}
	return nil
}

// GetSchedulerPolicy returns the value of the SchedulerPolicy struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress. If the receiver or the field SchedulerPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress) GetSchedulerPolicy() *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy {
	if t != nil && t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	return nil
}

// GetPolicerControlPolicy retrieves the value of the leaf PolicerControlPolicy from the NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerControlPolicy is set, it can
// safely use t.GetPolicerControlPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerControlPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress) GetPolicerControlPolicy() string {
	if t == nil || t.PolicerControlPolicy == nil {
		return ""
	}
	return *t.PolicerControlPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AggRate.PopulateDefaults()
	t.SchedulerPolicy.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress.
func (*NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_AggRate represents the /nokia-conf/configure/groups/group/service/customer/multi-service-site/egress/agg-rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_AggRate struct {
	LimitUnusedBandwidth      *bool  `path:"limit-unused-bandwidth" module:"nokia-conf"`
	QueueFrameBasedAccounting *bool  `path:"queue-frame-based-accounting" module:"nokia-conf"`
	Rate                      *int64 `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_AggRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_AggRate) IsYANGGoStruct() {
}

// GetLimitUnusedBandwidth retrieves the value of the leaf LimitUnusedBandwidth from the NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_AggRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LimitUnusedBandwidth is set, it can
// safely use t.GetLimitUnusedBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LimitUnusedBandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_AggRate) GetLimitUnusedBandwidth() bool {
	if t == nil || t.LimitUnusedBandwidth == nil {
		return false
	}
	return *t.LimitUnusedBandwidth
}

// GetQueueFrameBasedAccounting retrieves the value of the leaf QueueFrameBasedAccounting from the NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_AggRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueFrameBasedAccounting is set, it can
// safely use t.GetQueueFrameBasedAccounting() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueFrameBasedAccounting == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_AggRate) GetQueueFrameBasedAccounting() bool {
	if t == nil || t.QueueFrameBasedAccounting == nil {
		return false
	}
	return *t.QueueFrameBasedAccounting
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_AggRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_AggRate) GetRate() int64 {
	if t == nil || t.Rate == nil {
		return 0
	}
	return *t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_AggRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_AggRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LimitUnusedBandwidth == nil {
		var v bool = false
		t.LimitUnusedBandwidth = &v
	}
	if t.QueueFrameBasedAccounting == nil {
		var v bool = false
		t.QueueFrameBasedAccounting = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_AggRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_AggRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_AggRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_AggRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_AggRate.
func (*NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_AggRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy represents the /nokia-conf/configure/groups/group/service/customer/multi-service-site/egress/scheduler-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy struct {
	Overrides  *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides `path:"overrides" module:"nokia-conf"`
	PolicyName *string                                                                                              `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy) IsYANGGoStruct() {
}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy) GetOrCreateOverrides() *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy) GetOverrides() *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy.
func (*NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides represents the /nokia-conf/configure/groups/group/service/customer/multi-service-site/egress/scheduler-policy/overrides YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides struct {
	Scheduler map[string]*NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler `path:"scheduler" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides) IsYANGGoStruct() {
}

// NewScheduler creates a new entry in the Scheduler list of the
// NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides) NewScheduler(SchedulerName string) (*NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler)
	}

	key := SchedulerName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Scheduler[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Scheduler", key)
	}

	t.Scheduler[key] = &NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler{
		SchedulerName: &SchedulerName,
	}

	return t.Scheduler[key], nil
}

// RenameScheduler renames an entry in the list Scheduler within
// the NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides) RenameScheduler(oldK, newK string) error {
	if _, ok := t.Scheduler[newK]; ok {
		return fmt.Errorf("key %v already exists in Scheduler", newK)
	}

	e, ok := t.Scheduler[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Scheduler", oldK)
	}
	e.SchedulerName = &newK

	t.Scheduler[newK] = e
	delete(t.Scheduler, oldK)
	return nil
}

// GetOrCreateScheduler retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides) GetOrCreateScheduler(SchedulerName string) *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler {

	key := SchedulerName

	if v, ok := t.Scheduler[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewScheduler(SchedulerName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateScheduler got unexpected error: %v", err))
	}
	return v
}

// GetScheduler retrieves the value with the specified key from
// the Scheduler map field of NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides) GetScheduler(SchedulerName string) *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler {

	if t == nil {
		return nil
	}

	key := SchedulerName

	if lm, ok := t.Scheduler[key]; ok {
		return lm
	}
	return nil
}

// DeleteScheduler deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides) DeleteScheduler(SchedulerName string) {
	key := SchedulerName

	delete(t.Scheduler, key)
}

// AppendScheduler appends the supplied NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler struct to the
// list Scheduler of NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides) AppendScheduler(v *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler) error {
	if v.SchedulerName == nil {
		return fmt.Errorf("invalid nil key received for SchedulerName")
	}

	key := *v.SchedulerName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler)
	}

	if _, ok := t.Scheduler[key]; ok {
		return fmt.Errorf("duplicate key for list Scheduler %v", key)
	}

	t.Scheduler[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Scheduler {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides.
func (*NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler represents the /nokia-conf/configure/groups/group/service/customer/multi-service-site/egress/scheduler-policy/overrides/scheduler YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler struct {
	Parent        *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Parent `path:"parent" module:"nokia-conf"`
	Rate          *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Rate   `path:"rate" module:"nokia-conf"`
	SchedulerName *string                                                                                                               `path:"scheduler-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler) IsYANGGoStruct() {
}

// GetOrCreateParent retrieves the value of the Parent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler) GetOrCreateParent() *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Parent {
	if t.Parent != nil {
		return t.Parent
	}
	t.Parent = &NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Parent{}
	return t.Parent
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler) GetOrCreateRate() *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Rate{}
	return t.Rate
}

// GetParent returns the value of the Parent struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler. If the receiver or the field Parent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler) GetParent() *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Parent {
	if t != nil && t.Parent != nil {
		return t.Parent
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler) GetRate() *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetSchedulerName retrieves the value of the leaf SchedulerName from the NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SchedulerName is set, it can
// safely use t.GetSchedulerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SchedulerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler) GetSchedulerName() string {
	if t == nil || t.SchedulerName == nil {
		return ""
	}
	return *t.SchedulerName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Parent.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SchedulerName == nil {
		return nil, fmt.Errorf("nil value for key SchedulerName")
	}

	return map[string]interface{}{
		"scheduler-name": *t.SchedulerName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler.
func (*NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Parent represents the /nokia-conf/configure/groups/group/service/customer/multi-service-site/egress/scheduler-policy/overrides/scheduler/parent YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Parent struct {
	CirWeight *int32 `path:"cir-weight" module:"nokia-conf"`
	Weight    *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Parent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Parent) IsYANGGoStruct() {
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Parent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 0
	}
	return *t.CirWeight
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Parent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Parent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Parent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Parent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Parent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Parent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Parent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Parent.
func (*NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Parent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Rate represents the /nokia-conf/configure/groups/group/service/customer/multi-service-site/egress/scheduler-policy/overrides/scheduler/rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Rate struct {
	Cir NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Rate) GetCir() NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Rate) GetPir() NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Rate.
func (*NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Egress_SchedulerPolicy_Overrides_Scheduler_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress represents the /nokia-conf/configure/groups/group/service/customer/multi-service-site/ingress YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress struct {
	PolicerControlPolicy *string                                                                                     `path:"policer-control-policy" module:"nokia-conf"`
	SchedulerPolicy      *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy `path:"scheduler-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress) IsYANGGoStruct() {}

// GetOrCreateSchedulerPolicy retrieves the value of the SchedulerPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress) GetOrCreateSchedulerPolicy() *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy {
	if t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	t.SchedulerPolicy = &NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy{}
	return t.SchedulerPolicy
}

// GetSchedulerPolicy returns the value of the SchedulerPolicy struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress. If the receiver or the field SchedulerPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress) GetSchedulerPolicy() *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy {
	if t != nil && t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	return nil
}

// GetPolicerControlPolicy retrieves the value of the leaf PolicerControlPolicy from the NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerControlPolicy is set, it can
// safely use t.GetPolicerControlPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerControlPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress) GetPolicerControlPolicy() string {
	if t == nil || t.PolicerControlPolicy == nil {
		return ""
	}
	return *t.PolicerControlPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.SchedulerPolicy.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress.
func (*NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy represents the /nokia-conf/configure/groups/group/service/customer/multi-service-site/ingress/scheduler-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy struct {
	Overrides  *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides `path:"overrides" module:"nokia-conf"`
	PolicyName *string                                                                                               `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy) IsYANGGoStruct() {
}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy) GetOrCreateOverrides() *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy) GetOverrides() *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy.
func (*NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides represents the /nokia-conf/configure/groups/group/service/customer/multi-service-site/ingress/scheduler-policy/overrides YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides struct {
	Scheduler map[string]*NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler `path:"scheduler" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides) IsYANGGoStruct() {
}

// NewScheduler creates a new entry in the Scheduler list of the
// NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides) NewScheduler(SchedulerName string) (*NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler)
	}

	key := SchedulerName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Scheduler[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Scheduler", key)
	}

	t.Scheduler[key] = &NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler{
		SchedulerName: &SchedulerName,
	}

	return t.Scheduler[key], nil
}

// RenameScheduler renames an entry in the list Scheduler within
// the NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides) RenameScheduler(oldK, newK string) error {
	if _, ok := t.Scheduler[newK]; ok {
		return fmt.Errorf("key %v already exists in Scheduler", newK)
	}

	e, ok := t.Scheduler[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Scheduler", oldK)
	}
	e.SchedulerName = &newK

	t.Scheduler[newK] = e
	delete(t.Scheduler, oldK)
	return nil
}

// GetOrCreateScheduler retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides) GetOrCreateScheduler(SchedulerName string) *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler {

	key := SchedulerName

	if v, ok := t.Scheduler[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewScheduler(SchedulerName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateScheduler got unexpected error: %v", err))
	}
	return v
}

// GetScheduler retrieves the value with the specified key from
// the Scheduler map field of NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides) GetScheduler(SchedulerName string) *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler {

	if t == nil {
		return nil
	}

	key := SchedulerName

	if lm, ok := t.Scheduler[key]; ok {
		return lm
	}
	return nil
}

// DeleteScheduler deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides) DeleteScheduler(SchedulerName string) {
	key := SchedulerName

	delete(t.Scheduler, key)
}

// AppendScheduler appends the supplied NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler struct to the
// list Scheduler of NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides) AppendScheduler(v *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler) error {
	if v.SchedulerName == nil {
		return fmt.Errorf("invalid nil key received for SchedulerName")
	}

	key := *v.SchedulerName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler)
	}

	if _, ok := t.Scheduler[key]; ok {
		return fmt.Errorf("duplicate key for list Scheduler %v", key)
	}

	t.Scheduler[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Scheduler {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides.
func (*NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler represents the /nokia-conf/configure/groups/group/service/customer/multi-service-site/ingress/scheduler-policy/overrides/scheduler YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler struct {
	Parent        *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Parent `path:"parent" module:"nokia-conf"`
	Rate          *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Rate   `path:"rate" module:"nokia-conf"`
	SchedulerName *string                                                                                                                `path:"scheduler-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler) IsYANGGoStruct() {
}

// GetOrCreateParent retrieves the value of the Parent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler) GetOrCreateParent() *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Parent {
	if t.Parent != nil {
		return t.Parent
	}
	t.Parent = &NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Parent{}
	return t.Parent
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler) GetOrCreateRate() *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Rate{}
	return t.Rate
}

// GetParent returns the value of the Parent struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler. If the receiver or the field Parent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler) GetParent() *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Parent {
	if t != nil && t.Parent != nil {
		return t.Parent
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler) GetRate() *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetSchedulerName retrieves the value of the leaf SchedulerName from the NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SchedulerName is set, it can
// safely use t.GetSchedulerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SchedulerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler) GetSchedulerName() string {
	if t == nil || t.SchedulerName == nil {
		return ""
	}
	return *t.SchedulerName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Parent.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SchedulerName == nil {
		return nil, fmt.Errorf("nil value for key SchedulerName")
	}

	return map[string]interface{}{
		"scheduler-name": *t.SchedulerName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler.
func (*NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Parent represents the /nokia-conf/configure/groups/group/service/customer/multi-service-site/ingress/scheduler-policy/overrides/scheduler/parent YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Parent struct {
	CirWeight *int32 `path:"cir-weight" module:"nokia-conf"`
	Weight    *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Parent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Parent) IsYANGGoStruct() {
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Parent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 0
	}
	return *t.CirWeight
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Parent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Parent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Parent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Parent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Parent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Parent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Parent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Parent.
func (*NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Parent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Rate represents the /nokia-conf/configure/groups/group/service/customer/multi-service-site/ingress/scheduler-policy/overrides/scheduler/rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Rate struct {
	Cir NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Rate) GetCir() NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Rate) GetPir() NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Rate.
func (*NokiaConf_Configure_Groups_Group_Service_Customer_MultiServiceSite_Ingress_SchedulerPolicy_Overrides_Scheduler_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe represents the /nokia-conf/configure/groups/group/service/epipe YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe struct {
	AdminState             E_NokiaTypesSros_AdminState                                                                                                                         `path:"admin-state" module:"nokia-conf"`
	Bgp                    map[NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp_BgpInstance_Union]*NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp                        `path:"bgp" module:"nokia-conf"`
	BgpEvpn                *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn                                                                                             `path:"bgp-evpn" module:"nokia-conf" yangPresence:"true"`
	BgpMhSite              map[string]*NokiaConf_Configure_Groups_Group_Service_Epipe_BgpMhSite                                                                                `path:"bgp-mh-site" module:"nokia-conf"`
	BgpVpws                *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws                                                                                             `path:"bgp-vpws" module:"nokia-conf" yangPresence:"true"`
	Customer               *string                                                                                                                                             `path:"customer" module:"nokia-conf"`
	Description            *string                                                                                                                                             `path:"description" module:"nokia-conf"`
	Endpoint               map[string]*NokiaConf_Configure_Groups_Group_Service_Epipe_Endpoint                                                                                 `path:"endpoint" module:"nokia-conf"`
	EthCfm                 *NokiaConf_Configure_Groups_Group_Service_Epipe_EthCfm                                                                                              `path:"eth-cfm" module:"nokia-conf" yangPresence:"true"`
	IgnoreL2VpnMtuMismatch *bool                                                                                                                                               `path:"ignore-l2vpn-mtu-mismatch" module:"nokia-conf"`
	LoadBalancing          *NokiaConf_Configure_Groups_Group_Service_Epipe_LoadBalancing                                                                                       `path:"load-balancing" module:"nokia-conf"`
	NatOutside             map[NokiaConf_Configure_Groups_Group_Service_Epipe_NatOutside_NatGroup_Union]*NokiaConf_Configure_Groups_Group_Service_Epipe_NatOutside             `path:"nat-outside" module:"nokia-conf"`
	OperGroup              *string                                                                                                                                             `path:"oper-group" module:"nokia-conf"`
	Pbb                    *NokiaConf_Configure_Groups_Group_Service_Epipe_Pbb                                                                                                 `path:"pbb" module:"nokia-conf"`
	Sap                    map[string]*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap                                                                                      `path:"sap" module:"nokia-conf"`
	SegmentRoutingV6       map[NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Instance_Union]*NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6 `path:"segment-routing-v6" module:"nokia-conf"`
	ServiceId              *uint32                                                                                                                                             `path:"service-id" module:"nokia-conf"`
	ServiceMtu             *int32                                                                                                                                              `path:"service-mtu" module:"nokia-conf"`
	ServiceName            *string                                                                                                                                             `path:"service-name" module:"nokia-conf"`
	SpokeSdp               map[string]*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp                                                                                 `path:"spoke-sdp" module:"nokia-conf"`
	Test                   *bool                                                                                                                                               `path:"test" module:"nokia-conf"`
	VcSwitching            *bool                                                                                                                                               `path:"vc-switching" module:"nokia-conf"`
	VpnId                  *uint32                                                                                                                                             `path:"vpn-id" module:"nokia-conf"`
	Vxlan                  *NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan                                                                                               `path:"vxlan" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe) IsYANGGoStruct() {}

// NewBgp creates a new entry in the Bgp list of the
// NokiaConf_Configure_Groups_Group_Service_Epipe struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe) NewBgp(BgpInstance NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp_BgpInstance_Union) (*NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Bgp == nil {
		t.Bgp = make(map[NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp_BgpInstance_Union]*NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp)
	}

	key := BgpInstance

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Bgp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Bgp", key)
	}

	t.Bgp[key] = &NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp{
		BgpInstance: BgpInstance,
	}

	return t.Bgp[key], nil
}

// RenameBgp renames an entry in the list Bgp within
// the NokiaConf_Configure_Groups_Group_Service_Epipe struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe) RenameBgp(oldK, newK NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp_BgpInstance_Union) error {
	if _, ok := t.Bgp[newK]; ok {
		return fmt.Errorf("key %v already exists in Bgp", newK)
	}

	e, ok := t.Bgp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Bgp", oldK)
	}
	e.BgpInstance = newK

	t.Bgp[newK] = e
	delete(t.Bgp, oldK)
	return nil
}

// GetOrCreateBgp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Epipe. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe) GetOrCreateBgp(BgpInstance NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp_BgpInstance_Union) *NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp {

	key := BgpInstance

	if v, ok := t.Bgp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewBgp(BgpInstance)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateBgp got unexpected error: %v", err))
	}
	return v
}

// GetBgp retrieves the value with the specified key from
// the Bgp map field of NokiaConf_Configure_Groups_Group_Service_Epipe. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe) GetBgp(BgpInstance NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp_BgpInstance_Union) *NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp {

	if t == nil {
		return nil
	}

	key := BgpInstance

	if lm, ok := t.Bgp[key]; ok {
		return lm
	}
	return nil
}

// DeleteBgp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Epipe. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe) DeleteBgp(BgpInstance NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp_BgpInstance_Union) {
	key := BgpInstance

	delete(t.Bgp, key)
}

// AppendBgp appends the supplied NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp struct to the
// list Bgp of NokiaConf_Configure_Groups_Group_Service_Epipe. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe) AppendBgp(v *NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp) error {
	key := v.BgpInstance

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Bgp == nil {
		t.Bgp = make(map[NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp_BgpInstance_Union]*NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp)
	}

	if _, ok := t.Bgp[key]; ok {
		return fmt.Errorf("duplicate key for list Bgp %v", key)
	}

	t.Bgp[key] = v
	return nil
}

// NewBgpMhSite creates a new entry in the BgpMhSite list of the
// NokiaConf_Configure_Groups_Group_Service_Epipe struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe) NewBgpMhSite(SiteName string) (*NokiaConf_Configure_Groups_Group_Service_Epipe_BgpMhSite, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BgpMhSite == nil {
		t.BgpMhSite = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Epipe_BgpMhSite)
	}

	key := SiteName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.BgpMhSite[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list BgpMhSite", key)
	}

	t.BgpMhSite[key] = &NokiaConf_Configure_Groups_Group_Service_Epipe_BgpMhSite{
		SiteName: &SiteName,
	}

	return t.BgpMhSite[key], nil
}

// RenameBgpMhSite renames an entry in the list BgpMhSite within
// the NokiaConf_Configure_Groups_Group_Service_Epipe struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe) RenameBgpMhSite(oldK, newK string) error {
	if _, ok := t.BgpMhSite[newK]; ok {
		return fmt.Errorf("key %v already exists in BgpMhSite", newK)
	}

	e, ok := t.BgpMhSite[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in BgpMhSite", oldK)
	}
	e.SiteName = &newK

	t.BgpMhSite[newK] = e
	delete(t.BgpMhSite, oldK)
	return nil
}

// GetOrCreateBgpMhSite retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Epipe. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe) GetOrCreateBgpMhSite(SiteName string) *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpMhSite {

	key := SiteName

	if v, ok := t.BgpMhSite[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewBgpMhSite(SiteName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateBgpMhSite got unexpected error: %v", err))
	}
	return v
}

// GetBgpMhSite retrieves the value with the specified key from
// the BgpMhSite map field of NokiaConf_Configure_Groups_Group_Service_Epipe. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe) GetBgpMhSite(SiteName string) *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpMhSite {

	if t == nil {
		return nil
	}

	key := SiteName

	if lm, ok := t.BgpMhSite[key]; ok {
		return lm
	}
	return nil
}

// DeleteBgpMhSite deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Epipe. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe) DeleteBgpMhSite(SiteName string) {
	key := SiteName

	delete(t.BgpMhSite, key)
}

// AppendBgpMhSite appends the supplied NokiaConf_Configure_Groups_Group_Service_Epipe_BgpMhSite struct to the
// list BgpMhSite of NokiaConf_Configure_Groups_Group_Service_Epipe. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Epipe_BgpMhSite already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe) AppendBgpMhSite(v *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpMhSite) error {
	if v.SiteName == nil {
		return fmt.Errorf("invalid nil key received for SiteName")
	}

	key := *v.SiteName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BgpMhSite == nil {
		t.BgpMhSite = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Epipe_BgpMhSite)
	}

	if _, ok := t.BgpMhSite[key]; ok {
		return fmt.Errorf("duplicate key for list BgpMhSite %v", key)
	}

	t.BgpMhSite[key] = v
	return nil
}

// NewEndpoint creates a new entry in the Endpoint list of the
// NokiaConf_Configure_Groups_Group_Service_Epipe struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe) NewEndpoint(Name string) (*NokiaConf_Configure_Groups_Group_Service_Epipe_Endpoint, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Endpoint == nil {
		t.Endpoint = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Epipe_Endpoint)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Endpoint[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Endpoint", key)
	}

	t.Endpoint[key] = &NokiaConf_Configure_Groups_Group_Service_Epipe_Endpoint{
		Name: &Name,
	}

	return t.Endpoint[key], nil
}

// RenameEndpoint renames an entry in the list Endpoint within
// the NokiaConf_Configure_Groups_Group_Service_Epipe struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe) RenameEndpoint(oldK, newK string) error {
	if _, ok := t.Endpoint[newK]; ok {
		return fmt.Errorf("key %v already exists in Endpoint", newK)
	}

	e, ok := t.Endpoint[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Endpoint", oldK)
	}
	e.Name = &newK

	t.Endpoint[newK] = e
	delete(t.Endpoint, oldK)
	return nil
}

// GetOrCreateEndpoint retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Epipe. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe) GetOrCreateEndpoint(Name string) *NokiaConf_Configure_Groups_Group_Service_Epipe_Endpoint {

	key := Name

	if v, ok := t.Endpoint[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEndpoint(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEndpoint got unexpected error: %v", err))
	}
	return v
}

// GetEndpoint retrieves the value with the specified key from
// the Endpoint map field of NokiaConf_Configure_Groups_Group_Service_Epipe. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe) GetEndpoint(Name string) *NokiaConf_Configure_Groups_Group_Service_Epipe_Endpoint {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Endpoint[key]; ok {
		return lm
	}
	return nil
}

// DeleteEndpoint deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Epipe. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe) DeleteEndpoint(Name string) {
	key := Name

	delete(t.Endpoint, key)
}

// AppendEndpoint appends the supplied NokiaConf_Configure_Groups_Group_Service_Epipe_Endpoint struct to the
// list Endpoint of NokiaConf_Configure_Groups_Group_Service_Epipe. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Epipe_Endpoint already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe) AppendEndpoint(v *NokiaConf_Configure_Groups_Group_Service_Epipe_Endpoint) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Endpoint == nil {
		t.Endpoint = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Epipe_Endpoint)
	}

	if _, ok := t.Endpoint[key]; ok {
		return fmt.Errorf("duplicate key for list Endpoint %v", key)
	}

	t.Endpoint[key] = v
	return nil
}

// NewNatOutside creates a new entry in the NatOutside list of the
// NokiaConf_Configure_Groups_Group_Service_Epipe struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe) NewNatOutside(NatGroup NokiaConf_Configure_Groups_Group_Service_Epipe_NatOutside_NatGroup_Union) (*NokiaConf_Configure_Groups_Group_Service_Epipe_NatOutside, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NatOutside == nil {
		t.NatOutside = make(map[NokiaConf_Configure_Groups_Group_Service_Epipe_NatOutside_NatGroup_Union]*NokiaConf_Configure_Groups_Group_Service_Epipe_NatOutside)
	}

	key := NatGroup

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NatOutside[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NatOutside", key)
	}

	t.NatOutside[key] = &NokiaConf_Configure_Groups_Group_Service_Epipe_NatOutside{
		NatGroup: NatGroup,
	}

	return t.NatOutside[key], nil
}

// RenameNatOutside renames an entry in the list NatOutside within
// the NokiaConf_Configure_Groups_Group_Service_Epipe struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe) RenameNatOutside(oldK, newK NokiaConf_Configure_Groups_Group_Service_Epipe_NatOutside_NatGroup_Union) error {
	if _, ok := t.NatOutside[newK]; ok {
		return fmt.Errorf("key %v already exists in NatOutside", newK)
	}

	e, ok := t.NatOutside[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NatOutside", oldK)
	}
	e.NatGroup = newK

	t.NatOutside[newK] = e
	delete(t.NatOutside, oldK)
	return nil
}

// GetOrCreateNatOutside retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Epipe. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe) GetOrCreateNatOutside(NatGroup NokiaConf_Configure_Groups_Group_Service_Epipe_NatOutside_NatGroup_Union) *NokiaConf_Configure_Groups_Group_Service_Epipe_NatOutside {

	key := NatGroup

	if v, ok := t.NatOutside[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNatOutside(NatGroup)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNatOutside got unexpected error: %v", err))
	}
	return v
}

// GetNatOutside retrieves the value with the specified key from
// the NatOutside map field of NokiaConf_Configure_Groups_Group_Service_Epipe. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe) GetNatOutside(NatGroup NokiaConf_Configure_Groups_Group_Service_Epipe_NatOutside_NatGroup_Union) *NokiaConf_Configure_Groups_Group_Service_Epipe_NatOutside {

	if t == nil {
		return nil
	}

	key := NatGroup

	if lm, ok := t.NatOutside[key]; ok {
		return lm
	}
	return nil
}

// DeleteNatOutside deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Epipe. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe) DeleteNatOutside(NatGroup NokiaConf_Configure_Groups_Group_Service_Epipe_NatOutside_NatGroup_Union) {
	key := NatGroup

	delete(t.NatOutside, key)
}

// AppendNatOutside appends the supplied NokiaConf_Configure_Groups_Group_Service_Epipe_NatOutside struct to the
// list NatOutside of NokiaConf_Configure_Groups_Group_Service_Epipe. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Epipe_NatOutside already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe) AppendNatOutside(v *NokiaConf_Configure_Groups_Group_Service_Epipe_NatOutside) error {
	key := v.NatGroup

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NatOutside == nil {
		t.NatOutside = make(map[NokiaConf_Configure_Groups_Group_Service_Epipe_NatOutside_NatGroup_Union]*NokiaConf_Configure_Groups_Group_Service_Epipe_NatOutside)
	}

	if _, ok := t.NatOutside[key]; ok {
		return fmt.Errorf("duplicate key for list NatOutside %v", key)
	}

	t.NatOutside[key] = v
	return nil
}

// NewSap creates a new entry in the Sap list of the
// NokiaConf_Configure_Groups_Group_Service_Epipe struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe) NewSap(SapId string) (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sap == nil {
		t.Sap = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap)
	}

	key := SapId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Sap[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Sap", key)
	}

	t.Sap[key] = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap{
		SapId: &SapId,
	}

	return t.Sap[key], nil
}

// RenameSap renames an entry in the list Sap within
// the NokiaConf_Configure_Groups_Group_Service_Epipe struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe) RenameSap(oldK, newK string) error {
	if _, ok := t.Sap[newK]; ok {
		return fmt.Errorf("key %v already exists in Sap", newK)
	}

	e, ok := t.Sap[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Sap", oldK)
	}
	e.SapId = &newK

	t.Sap[newK] = e
	delete(t.Sap, oldK)
	return nil
}

// GetOrCreateSap retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Epipe. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe) GetOrCreateSap(SapId string) *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap {

	key := SapId

	if v, ok := t.Sap[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSap(SapId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSap got unexpected error: %v", err))
	}
	return v
}

// GetSap retrieves the value with the specified key from
// the Sap map field of NokiaConf_Configure_Groups_Group_Service_Epipe. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe) GetSap(SapId string) *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap {

	if t == nil {
		return nil
	}

	key := SapId

	if lm, ok := t.Sap[key]; ok {
		return lm
	}
	return nil
}

// DeleteSap deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Epipe. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe) DeleteSap(SapId string) {
	key := SapId

	delete(t.Sap, key)
}

// AppendSap appends the supplied NokiaConf_Configure_Groups_Group_Service_Epipe_Sap struct to the
// list Sap of NokiaConf_Configure_Groups_Group_Service_Epipe. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Epipe_Sap already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe) AppendSap(v *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap) error {
	if v.SapId == nil {
		return fmt.Errorf("invalid nil key received for SapId")
	}

	key := *v.SapId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sap == nil {
		t.Sap = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap)
	}

	if _, ok := t.Sap[key]; ok {
		return fmt.Errorf("duplicate key for list Sap %v", key)
	}

	t.Sap[key] = v
	return nil
}

// NewSegmentRoutingV6 creates a new entry in the SegmentRoutingV6 list of the
// NokiaConf_Configure_Groups_Group_Service_Epipe struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe) NewSegmentRoutingV6(Instance NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Instance_Union) (*NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SegmentRoutingV6 == nil {
		t.SegmentRoutingV6 = make(map[NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Instance_Union]*NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6)
	}

	key := Instance

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SegmentRoutingV6[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SegmentRoutingV6", key)
	}

	t.SegmentRoutingV6[key] = &NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6{
		Instance: Instance,
	}

	return t.SegmentRoutingV6[key], nil
}

// RenameSegmentRoutingV6 renames an entry in the list SegmentRoutingV6 within
// the NokiaConf_Configure_Groups_Group_Service_Epipe struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe) RenameSegmentRoutingV6(oldK, newK NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Instance_Union) error {
	if _, ok := t.SegmentRoutingV6[newK]; ok {
		return fmt.Errorf("key %v already exists in SegmentRoutingV6", newK)
	}

	e, ok := t.SegmentRoutingV6[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SegmentRoutingV6", oldK)
	}
	e.Instance = newK

	t.SegmentRoutingV6[newK] = e
	delete(t.SegmentRoutingV6, oldK)
	return nil
}

// GetOrCreateSegmentRoutingV6 retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Epipe. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe) GetOrCreateSegmentRoutingV6(Instance NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Instance_Union) *NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6 {

	key := Instance

	if v, ok := t.SegmentRoutingV6[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSegmentRoutingV6(Instance)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSegmentRoutingV6 got unexpected error: %v", err))
	}
	return v
}

// GetSegmentRoutingV6 retrieves the value with the specified key from
// the SegmentRoutingV6 map field of NokiaConf_Configure_Groups_Group_Service_Epipe. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe) GetSegmentRoutingV6(Instance NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Instance_Union) *NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6 {

	if t == nil {
		return nil
	}

	key := Instance

	if lm, ok := t.SegmentRoutingV6[key]; ok {
		return lm
	}
	return nil
}

// DeleteSegmentRoutingV6 deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Epipe. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe) DeleteSegmentRoutingV6(Instance NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Instance_Union) {
	key := Instance

	delete(t.SegmentRoutingV6, key)
}

// AppendSegmentRoutingV6 appends the supplied NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6 struct to the
// list SegmentRoutingV6 of NokiaConf_Configure_Groups_Group_Service_Epipe. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6 already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe) AppendSegmentRoutingV6(v *NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6) error {
	key := v.Instance

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SegmentRoutingV6 == nil {
		t.SegmentRoutingV6 = make(map[NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Instance_Union]*NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6)
	}

	if _, ok := t.SegmentRoutingV6[key]; ok {
		return fmt.Errorf("duplicate key for list SegmentRoutingV6 %v", key)
	}

	t.SegmentRoutingV6[key] = v
	return nil
}

// NewSpokeSdp creates a new entry in the SpokeSdp list of the
// NokiaConf_Configure_Groups_Group_Service_Epipe struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe) NewSpokeSdp(SdpBindId string) (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SpokeSdp == nil {
		t.SpokeSdp = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp)
	}

	key := SdpBindId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SpokeSdp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SpokeSdp", key)
	}

	t.SpokeSdp[key] = &NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp{
		SdpBindId: &SdpBindId,
	}

	return t.SpokeSdp[key], nil
}

// RenameSpokeSdp renames an entry in the list SpokeSdp within
// the NokiaConf_Configure_Groups_Group_Service_Epipe struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe) RenameSpokeSdp(oldK, newK string) error {
	if _, ok := t.SpokeSdp[newK]; ok {
		return fmt.Errorf("key %v already exists in SpokeSdp", newK)
	}

	e, ok := t.SpokeSdp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SpokeSdp", oldK)
	}
	e.SdpBindId = &newK

	t.SpokeSdp[newK] = e
	delete(t.SpokeSdp, oldK)
	return nil
}

// GetOrCreateSpokeSdp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Epipe. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe) GetOrCreateSpokeSdp(SdpBindId string) *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp {

	key := SdpBindId

	if v, ok := t.SpokeSdp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSpokeSdp(SdpBindId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSpokeSdp got unexpected error: %v", err))
	}
	return v
}

// GetSpokeSdp retrieves the value with the specified key from
// the SpokeSdp map field of NokiaConf_Configure_Groups_Group_Service_Epipe. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe) GetSpokeSdp(SdpBindId string) *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp {

	if t == nil {
		return nil
	}

	key := SdpBindId

	if lm, ok := t.SpokeSdp[key]; ok {
		return lm
	}
	return nil
}

// DeleteSpokeSdp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Epipe. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe) DeleteSpokeSdp(SdpBindId string) {
	key := SdpBindId

	delete(t.SpokeSdp, key)
}

// AppendSpokeSdp appends the supplied NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp struct to the
// list SpokeSdp of NokiaConf_Configure_Groups_Group_Service_Epipe. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe) AppendSpokeSdp(v *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp) error {
	if v.SdpBindId == nil {
		return fmt.Errorf("invalid nil key received for SdpBindId")
	}

	key := *v.SdpBindId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SpokeSdp == nil {
		t.SpokeSdp = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp)
	}

	if _, ok := t.SpokeSdp[key]; ok {
		return fmt.Errorf("duplicate key for list SpokeSdp %v", key)
	}

	t.SpokeSdp[key] = v
	return nil
}

// GetOrCreateBgpEvpn retrieves the value of the BgpEvpn field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe) GetOrCreateBgpEvpn() *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn {
	if t.BgpEvpn != nil {
		return t.BgpEvpn
	}
	t.BgpEvpn = &NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn{}
	return t.BgpEvpn
}

// GetOrCreateBgpVpws retrieves the value of the BgpVpws field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe) GetOrCreateBgpVpws() *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws {
	if t.BgpVpws != nil {
		return t.BgpVpws
	}
	t.BgpVpws = &NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws{}
	return t.BgpVpws
}

// GetOrCreateEthCfm retrieves the value of the EthCfm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe) GetOrCreateEthCfm() *NokiaConf_Configure_Groups_Group_Service_Epipe_EthCfm {
	if t.EthCfm != nil {
		return t.EthCfm
	}
	t.EthCfm = &NokiaConf_Configure_Groups_Group_Service_Epipe_EthCfm{}
	return t.EthCfm
}

// GetOrCreateLoadBalancing retrieves the value of the LoadBalancing field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe) GetOrCreateLoadBalancing() *NokiaConf_Configure_Groups_Group_Service_Epipe_LoadBalancing {
	if t.LoadBalancing != nil {
		return t.LoadBalancing
	}
	t.LoadBalancing = &NokiaConf_Configure_Groups_Group_Service_Epipe_LoadBalancing{}
	return t.LoadBalancing
}

// GetOrCreatePbb retrieves the value of the Pbb field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe) GetOrCreatePbb() *NokiaConf_Configure_Groups_Group_Service_Epipe_Pbb {
	if t.Pbb != nil {
		return t.Pbb
	}
	t.Pbb = &NokiaConf_Configure_Groups_Group_Service_Epipe_Pbb{}
	return t.Pbb
}

// GetOrCreateVxlan retrieves the value of the Vxlan field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe) GetOrCreateVxlan() *NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan {
	if t.Vxlan != nil {
		return t.Vxlan
	}
	t.Vxlan = &NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan{}
	return t.Vxlan
}

// GetBgpEvpn returns the value of the BgpEvpn struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe. If the receiver or the field BgpEvpn is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe) GetBgpEvpn() *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn {
	if t != nil && t.BgpEvpn != nil {
		return t.BgpEvpn
	}
	return nil
}

// GetBgpVpws returns the value of the BgpVpws struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe. If the receiver or the field BgpVpws is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe) GetBgpVpws() *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws {
	if t != nil && t.BgpVpws != nil {
		return t.BgpVpws
	}
	return nil
}

// GetEthCfm returns the value of the EthCfm struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe. If the receiver or the field EthCfm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe) GetEthCfm() *NokiaConf_Configure_Groups_Group_Service_Epipe_EthCfm {
	if t != nil && t.EthCfm != nil {
		return t.EthCfm
	}
	return nil
}

// GetLoadBalancing returns the value of the LoadBalancing struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe. If the receiver or the field LoadBalancing is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe) GetLoadBalancing() *NokiaConf_Configure_Groups_Group_Service_Epipe_LoadBalancing {
	if t != nil && t.LoadBalancing != nil {
		return t.LoadBalancing
	}
	return nil
}

// GetPbb returns the value of the Pbb struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe. If the receiver or the field Pbb is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe) GetPbb() *NokiaConf_Configure_Groups_Group_Service_Epipe_Pbb {
	if t != nil && t.Pbb != nil {
		return t.Pbb
	}
	return nil
}

// GetVxlan returns the value of the Vxlan struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe. If the receiver or the field Vxlan is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe) GetVxlan() *NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan {
	if t != nil && t.Vxlan != nil {
		return t.Vxlan
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Epipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetCustomer retrieves the value of the leaf Customer from the NokiaConf_Configure_Groups_Group_Service_Epipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Customer is set, it can
// safely use t.GetCustomer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Customer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe) GetCustomer() string {
	if t == nil || t.Customer == nil {
		return ""
	}
	return *t.Customer
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Epipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetIgnoreL2VpnMtuMismatch retrieves the value of the leaf IgnoreL2VpnMtuMismatch from the NokiaConf_Configure_Groups_Group_Service_Epipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreL2VpnMtuMismatch is set, it can
// safely use t.GetIgnoreL2VpnMtuMismatch() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreL2VpnMtuMismatch == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe) GetIgnoreL2VpnMtuMismatch() bool {
	if t == nil || t.IgnoreL2VpnMtuMismatch == nil {
		return false
	}
	return *t.IgnoreL2VpnMtuMismatch
}

// GetOperGroup retrieves the value of the leaf OperGroup from the NokiaConf_Configure_Groups_Group_Service_Epipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OperGroup is set, it can
// safely use t.GetOperGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OperGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe) GetOperGroup() string {
	if t == nil || t.OperGroup == nil {
		return ""
	}
	return *t.OperGroup
}

// GetServiceId retrieves the value of the leaf ServiceId from the NokiaConf_Configure_Groups_Group_Service_Epipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceId is set, it can
// safely use t.GetServiceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe) GetServiceId() uint32 {
	if t == nil || t.ServiceId == nil {
		return 0
	}
	return *t.ServiceId
}

// GetServiceMtu retrieves the value of the leaf ServiceMtu from the NokiaConf_Configure_Groups_Group_Service_Epipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceMtu is set, it can
// safely use t.GetServiceMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceMtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe) GetServiceMtu() int32 {
	if t == nil || t.ServiceMtu == nil {
		return 0
	}
	return *t.ServiceMtu
}

// GetServiceName retrieves the value of the leaf ServiceName from the NokiaConf_Configure_Groups_Group_Service_Epipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceName is set, it can
// safely use t.GetServiceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe) GetServiceName() string {
	if t == nil || t.ServiceName == nil {
		return ""
	}
	return *t.ServiceName
}

// GetTest retrieves the value of the leaf Test from the NokiaConf_Configure_Groups_Group_Service_Epipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Test is set, it can
// safely use t.GetTest() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Test == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe) GetTest() bool {
	if t == nil || t.Test == nil {
		return false
	}
	return *t.Test
}

// GetVcSwitching retrieves the value of the leaf VcSwitching from the NokiaConf_Configure_Groups_Group_Service_Epipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VcSwitching is set, it can
// safely use t.GetVcSwitching() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VcSwitching == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe) GetVcSwitching() bool {
	if t == nil || t.VcSwitching == nil {
		return false
	}
	return *t.VcSwitching
}

// GetVpnId retrieves the value of the leaf VpnId from the NokiaConf_Configure_Groups_Group_Service_Epipe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnId is set, it can
// safely use t.GetVpnId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe) GetVpnId() uint32 {
	if t == nil || t.VpnId == nil {
		return 0
	}
	return *t.VpnId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.IgnoreL2VpnMtuMismatch == nil {
		var v bool = false
		t.IgnoreL2VpnMtuMismatch = &v
	}
	if t.Test == nil {
		var v bool = false
		t.Test = &v
	}
	if t.VcSwitching == nil {
		var v bool = false
		t.VcSwitching = &v
	}
	t.BgpEvpn.PopulateDefaults()
	t.BgpVpws.PopulateDefaults()
	t.EthCfm.PopulateDefaults()
	t.LoadBalancing.PopulateDefaults()
	t.Pbb.PopulateDefaults()
	t.Vxlan.PopulateDefaults()
	for _, e := range t.Bgp {
		e.PopulateDefaults()
	}
	for _, e := range t.BgpMhSite {
		e.PopulateDefaults()
	}
	for _, e := range t.Endpoint {
		e.PopulateDefaults()
	}
	for _, e := range t.NatOutside {
		e.PopulateDefaults()
	}
	for _, e := range t.Sap {
		e.PopulateDefaults()
	}
	for _, e := range t.SegmentRoutingV6 {
		e.PopulateDefaults()
	}
	for _, e := range t.SpokeSdp {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Epipe struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ServiceName == nil {
		return nil, fmt.Errorf("nil value for key ServiceName")
	}

	return map[string]interface{}{
		"service-name": *t.ServiceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp represents the /nokia-conf/configure/groups/group/service/epipe/bgp YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp struct {
	AdvServiceMtu      *int32                                                                           `path:"adv-service-mtu" module:"nokia-conf"`
	BgpInstance        NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp_BgpInstance_Union             `path:"bgp-instance" module:"nokia-conf"`
	PwTemplateBinding  map[string]*NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp_PwTemplateBinding `path:"pw-template-binding" module:"nokia-conf"`
	RouteDistinguisher NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp_RouteDistinguisher_Union      `path:"route-distinguisher" module:"nokia-conf"`
	RouteTarget        *NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp_RouteTarget                  `path:"route-target" module:"nokia-conf"`
	VsiExport          []string                                                                         `path:"vsi-export" module:"nokia-conf"`
	VsiImport          []string                                                                         `path:"vsi-import" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp) IsYANGGoStruct() {}

// NewPwTemplateBinding creates a new entry in the PwTemplateBinding list of the
// NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp) NewPwTemplateBinding(PwTemplateName string) (*NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp_PwTemplateBinding, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PwTemplateBinding == nil {
		t.PwTemplateBinding = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp_PwTemplateBinding)
	}

	key := PwTemplateName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PwTemplateBinding[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PwTemplateBinding", key)
	}

	t.PwTemplateBinding[key] = &NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp_PwTemplateBinding{
		PwTemplateName: &PwTemplateName,
	}

	return t.PwTemplateBinding[key], nil
}

// RenamePwTemplateBinding renames an entry in the list PwTemplateBinding within
// the NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp) RenamePwTemplateBinding(oldK, newK string) error {
	if _, ok := t.PwTemplateBinding[newK]; ok {
		return fmt.Errorf("key %v already exists in PwTemplateBinding", newK)
	}

	e, ok := t.PwTemplateBinding[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PwTemplateBinding", oldK)
	}
	e.PwTemplateName = &newK

	t.PwTemplateBinding[newK] = e
	delete(t.PwTemplateBinding, oldK)
	return nil
}

// GetOrCreatePwTemplateBinding retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp) GetOrCreatePwTemplateBinding(PwTemplateName string) *NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp_PwTemplateBinding {

	key := PwTemplateName

	if v, ok := t.PwTemplateBinding[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPwTemplateBinding(PwTemplateName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePwTemplateBinding got unexpected error: %v", err))
	}
	return v
}

// GetPwTemplateBinding retrieves the value with the specified key from
// the PwTemplateBinding map field of NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp) GetPwTemplateBinding(PwTemplateName string) *NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp_PwTemplateBinding {

	if t == nil {
		return nil
	}

	key := PwTemplateName

	if lm, ok := t.PwTemplateBinding[key]; ok {
		return lm
	}
	return nil
}

// DeletePwTemplateBinding deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp) DeletePwTemplateBinding(PwTemplateName string) {
	key := PwTemplateName

	delete(t.PwTemplateBinding, key)
}

// AppendPwTemplateBinding appends the supplied NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp_PwTemplateBinding struct to the
// list PwTemplateBinding of NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp_PwTemplateBinding already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp) AppendPwTemplateBinding(v *NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp_PwTemplateBinding) error {
	if v.PwTemplateName == nil {
		return fmt.Errorf("invalid nil key received for PwTemplateName")
	}

	key := *v.PwTemplateName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PwTemplateBinding == nil {
		t.PwTemplateBinding = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp_PwTemplateBinding)
	}

	if _, ok := t.PwTemplateBinding[key]; ok {
		return fmt.Errorf("duplicate key for list PwTemplateBinding %v", key)
	}

	t.PwTemplateBinding[key] = v
	return nil
}

// GetOrCreateRouteTarget retrieves the value of the RouteTarget field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp) GetOrCreateRouteTarget() *NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp_RouteTarget {
	if t.RouteTarget != nil {
		return t.RouteTarget
	}
	t.RouteTarget = &NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp_RouteTarget{}
	return t.RouteTarget
}

// GetRouteTarget returns the value of the RouteTarget struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp. If the receiver or the field RouteTarget is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp) GetRouteTarget() *NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp_RouteTarget {
	if t != nil && t.RouteTarget != nil {
		return t.RouteTarget
	}
	return nil
}

// GetAdvServiceMtu retrieves the value of the leaf AdvServiceMtu from the NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvServiceMtu is set, it can
// safely use t.GetAdvServiceMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvServiceMtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp) GetAdvServiceMtu() int32 {
	if t == nil || t.AdvServiceMtu == nil {
		return 0
	}
	return *t.AdvServiceMtu
}

// GetBgpInstance retrieves the value of the leaf BgpInstance from the NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BgpInstance is set, it can
// safely use t.GetBgpInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BgpInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp) GetBgpInstance() NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp_BgpInstance_Union {
	if t == nil || t.BgpInstance == nil {
		return nil
	}
	return t.BgpInstance
}

// GetRouteDistinguisher retrieves the value of the leaf RouteDistinguisher from the NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteDistinguisher is set, it can
// safely use t.GetRouteDistinguisher() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteDistinguisher == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp) GetRouteDistinguisher() NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp_RouteDistinguisher_Union {
	if t == nil || t.RouteDistinguisher == nil {
		return nil
	}
	return t.RouteDistinguisher
}

// GetVsiExport retrieves the value of the leaf VsiExport from the NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VsiExport is set, it can
// safely use t.GetVsiExport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VsiExport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp) GetVsiExport() []string {
	if t == nil || t.VsiExport == nil {
		return nil
	}
	return t.VsiExport
}

// GetVsiImport retrieves the value of the leaf VsiImport from the NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VsiImport is set, it can
// safely use t.GetVsiImport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VsiImport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp) GetVsiImport() []string {
	if t == nil || t.VsiImport == nil {
		return nil
	}
	return t.VsiImport
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.RouteTarget.PopulateDefaults()
	for _, e := range t.PwTemplateBinding {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"bgp-instance": t.BgpInstance,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn represents the /nokia-conf/configure/groups/group/service/epipe/bgp-evpn YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn struct {
	Evi                     *uint32                                                                                                                                                                `path:"evi" module:"nokia-conf"`
	LocalAc                 *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_LocalAc                                                                                                        `path:"local-ac" module:"nokia-conf"`
	LocalAttachmentCircuit  map[string]*NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_LocalAttachmentCircuit                                                                              `path:"local-attachment-circuit" module:"nokia-conf"`
	Mpls                    map[NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_BgpInstance_Union]*NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls                         `path:"mpls" module:"nokia-conf"`
	RemoteAc                *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_RemoteAc                                                                                                       `path:"remote-ac" module:"nokia-conf"`
	RemoteAttachmentCircuit map[string]*NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_RemoteAttachmentCircuit                                                                             `path:"remote-attachment-circuit" module:"nokia-conf"`
	SegmentRoutingV6        map[NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6_BgpInstance_Union]*NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6 `path:"segment-routing-v6" module:"nokia-conf"`
	Vxlan                   map[NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Vxlan_BgpInstance_Union]*NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Vxlan                       `path:"vxlan" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn) IsYANGGoStruct() {}

// NewLocalAttachmentCircuit creates a new entry in the LocalAttachmentCircuit list of the
// NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn) NewLocalAttachmentCircuit(Name string) (*NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_LocalAttachmentCircuit, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LocalAttachmentCircuit == nil {
		t.LocalAttachmentCircuit = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_LocalAttachmentCircuit)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.LocalAttachmentCircuit[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list LocalAttachmentCircuit", key)
	}

	t.LocalAttachmentCircuit[key] = &NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_LocalAttachmentCircuit{
		Name: &Name,
	}

	return t.LocalAttachmentCircuit[key], nil
}

// RenameLocalAttachmentCircuit renames an entry in the list LocalAttachmentCircuit within
// the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn) RenameLocalAttachmentCircuit(oldK, newK string) error {
	if _, ok := t.LocalAttachmentCircuit[newK]; ok {
		return fmt.Errorf("key %v already exists in LocalAttachmentCircuit", newK)
	}

	e, ok := t.LocalAttachmentCircuit[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in LocalAttachmentCircuit", oldK)
	}
	e.Name = &newK

	t.LocalAttachmentCircuit[newK] = e
	delete(t.LocalAttachmentCircuit, oldK)
	return nil
}

// GetOrCreateLocalAttachmentCircuit retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn) GetOrCreateLocalAttachmentCircuit(Name string) *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_LocalAttachmentCircuit {

	key := Name

	if v, ok := t.LocalAttachmentCircuit[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLocalAttachmentCircuit(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLocalAttachmentCircuit got unexpected error: %v", err))
	}
	return v
}

// GetLocalAttachmentCircuit retrieves the value with the specified key from
// the LocalAttachmentCircuit map field of NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn) GetLocalAttachmentCircuit(Name string) *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_LocalAttachmentCircuit {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.LocalAttachmentCircuit[key]; ok {
		return lm
	}
	return nil
}

// DeleteLocalAttachmentCircuit deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn) DeleteLocalAttachmentCircuit(Name string) {
	key := Name

	delete(t.LocalAttachmentCircuit, key)
}

// AppendLocalAttachmentCircuit appends the supplied NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_LocalAttachmentCircuit struct to the
// list LocalAttachmentCircuit of NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_LocalAttachmentCircuit already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn) AppendLocalAttachmentCircuit(v *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_LocalAttachmentCircuit) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LocalAttachmentCircuit == nil {
		t.LocalAttachmentCircuit = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_LocalAttachmentCircuit)
	}

	if _, ok := t.LocalAttachmentCircuit[key]; ok {
		return fmt.Errorf("duplicate key for list LocalAttachmentCircuit %v", key)
	}

	t.LocalAttachmentCircuit[key] = v
	return nil
}

// NewMpls creates a new entry in the Mpls list of the
// NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn) NewMpls(BgpInstance NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_BgpInstance_Union) (*NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mpls == nil {
		t.Mpls = make(map[NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_BgpInstance_Union]*NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls)
	}

	key := BgpInstance

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mpls[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mpls", key)
	}

	t.Mpls[key] = &NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls{
		BgpInstance: BgpInstance,
	}

	return t.Mpls[key], nil
}

// RenameMpls renames an entry in the list Mpls within
// the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn) RenameMpls(oldK, newK NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_BgpInstance_Union) error {
	if _, ok := t.Mpls[newK]; ok {
		return fmt.Errorf("key %v already exists in Mpls", newK)
	}

	e, ok := t.Mpls[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mpls", oldK)
	}
	e.BgpInstance = newK

	t.Mpls[newK] = e
	delete(t.Mpls, oldK)
	return nil
}

// GetOrCreateMpls retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn) GetOrCreateMpls(BgpInstance NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_BgpInstance_Union) *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls {

	key := BgpInstance

	if v, ok := t.Mpls[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMpls(BgpInstance)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMpls got unexpected error: %v", err))
	}
	return v
}

// GetMpls retrieves the value with the specified key from
// the Mpls map field of NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn) GetMpls(BgpInstance NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_BgpInstance_Union) *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls {

	if t == nil {
		return nil
	}

	key := BgpInstance

	if lm, ok := t.Mpls[key]; ok {
		return lm
	}
	return nil
}

// DeleteMpls deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn) DeleteMpls(BgpInstance NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_BgpInstance_Union) {
	key := BgpInstance

	delete(t.Mpls, key)
}

// AppendMpls appends the supplied NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls struct to the
// list Mpls of NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn) AppendMpls(v *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls) error {
	key := v.BgpInstance

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mpls == nil {
		t.Mpls = make(map[NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_BgpInstance_Union]*NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls)
	}

	if _, ok := t.Mpls[key]; ok {
		return fmt.Errorf("duplicate key for list Mpls %v", key)
	}

	t.Mpls[key] = v
	return nil
}

// NewRemoteAttachmentCircuit creates a new entry in the RemoteAttachmentCircuit list of the
// NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn) NewRemoteAttachmentCircuit(Name string) (*NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_RemoteAttachmentCircuit, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RemoteAttachmentCircuit == nil {
		t.RemoteAttachmentCircuit = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_RemoteAttachmentCircuit)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RemoteAttachmentCircuit[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RemoteAttachmentCircuit", key)
	}

	t.RemoteAttachmentCircuit[key] = &NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_RemoteAttachmentCircuit{
		Name: &Name,
	}

	return t.RemoteAttachmentCircuit[key], nil
}

// RenameRemoteAttachmentCircuit renames an entry in the list RemoteAttachmentCircuit within
// the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn) RenameRemoteAttachmentCircuit(oldK, newK string) error {
	if _, ok := t.RemoteAttachmentCircuit[newK]; ok {
		return fmt.Errorf("key %v already exists in RemoteAttachmentCircuit", newK)
	}

	e, ok := t.RemoteAttachmentCircuit[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RemoteAttachmentCircuit", oldK)
	}
	e.Name = &newK

	t.RemoteAttachmentCircuit[newK] = e
	delete(t.RemoteAttachmentCircuit, oldK)
	return nil
}

// GetOrCreateRemoteAttachmentCircuit retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn) GetOrCreateRemoteAttachmentCircuit(Name string) *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_RemoteAttachmentCircuit {

	key := Name

	if v, ok := t.RemoteAttachmentCircuit[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRemoteAttachmentCircuit(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRemoteAttachmentCircuit got unexpected error: %v", err))
	}
	return v
}

// GetRemoteAttachmentCircuit retrieves the value with the specified key from
// the RemoteAttachmentCircuit map field of NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn) GetRemoteAttachmentCircuit(Name string) *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_RemoteAttachmentCircuit {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.RemoteAttachmentCircuit[key]; ok {
		return lm
	}
	return nil
}

// DeleteRemoteAttachmentCircuit deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn) DeleteRemoteAttachmentCircuit(Name string) {
	key := Name

	delete(t.RemoteAttachmentCircuit, key)
}

// AppendRemoteAttachmentCircuit appends the supplied NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_RemoteAttachmentCircuit struct to the
// list RemoteAttachmentCircuit of NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_RemoteAttachmentCircuit already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn) AppendRemoteAttachmentCircuit(v *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_RemoteAttachmentCircuit) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RemoteAttachmentCircuit == nil {
		t.RemoteAttachmentCircuit = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_RemoteAttachmentCircuit)
	}

	if _, ok := t.RemoteAttachmentCircuit[key]; ok {
		return fmt.Errorf("duplicate key for list RemoteAttachmentCircuit %v", key)
	}

	t.RemoteAttachmentCircuit[key] = v
	return nil
}

// NewSegmentRoutingV6 creates a new entry in the SegmentRoutingV6 list of the
// NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn) NewSegmentRoutingV6(BgpInstance NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6_BgpInstance_Union) (*NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SegmentRoutingV6 == nil {
		t.SegmentRoutingV6 = make(map[NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6_BgpInstance_Union]*NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6)
	}

	key := BgpInstance

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SegmentRoutingV6[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SegmentRoutingV6", key)
	}

	t.SegmentRoutingV6[key] = &NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6{
		BgpInstance: BgpInstance,
	}

	return t.SegmentRoutingV6[key], nil
}

// RenameSegmentRoutingV6 renames an entry in the list SegmentRoutingV6 within
// the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn) RenameSegmentRoutingV6(oldK, newK NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6_BgpInstance_Union) error {
	if _, ok := t.SegmentRoutingV6[newK]; ok {
		return fmt.Errorf("key %v already exists in SegmentRoutingV6", newK)
	}

	e, ok := t.SegmentRoutingV6[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SegmentRoutingV6", oldK)
	}
	e.BgpInstance = newK

	t.SegmentRoutingV6[newK] = e
	delete(t.SegmentRoutingV6, oldK)
	return nil
}

// GetOrCreateSegmentRoutingV6 retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn) GetOrCreateSegmentRoutingV6(BgpInstance NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6_BgpInstance_Union) *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6 {

	key := BgpInstance

	if v, ok := t.SegmentRoutingV6[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSegmentRoutingV6(BgpInstance)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSegmentRoutingV6 got unexpected error: %v", err))
	}
	return v
}

// GetSegmentRoutingV6 retrieves the value with the specified key from
// the SegmentRoutingV6 map field of NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn) GetSegmentRoutingV6(BgpInstance NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6_BgpInstance_Union) *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6 {

	if t == nil {
		return nil
	}

	key := BgpInstance

	if lm, ok := t.SegmentRoutingV6[key]; ok {
		return lm
	}
	return nil
}

// DeleteSegmentRoutingV6 deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn) DeleteSegmentRoutingV6(BgpInstance NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6_BgpInstance_Union) {
	key := BgpInstance

	delete(t.SegmentRoutingV6, key)
}

// AppendSegmentRoutingV6 appends the supplied NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6 struct to the
// list SegmentRoutingV6 of NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6 already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn) AppendSegmentRoutingV6(v *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6) error {
	key := v.BgpInstance

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SegmentRoutingV6 == nil {
		t.SegmentRoutingV6 = make(map[NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6_BgpInstance_Union]*NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6)
	}

	if _, ok := t.SegmentRoutingV6[key]; ok {
		return fmt.Errorf("duplicate key for list SegmentRoutingV6 %v", key)
	}

	t.SegmentRoutingV6[key] = v
	return nil
}

// NewVxlan creates a new entry in the Vxlan list of the
// NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn) NewVxlan(BgpInstance NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Vxlan_BgpInstance_Union) (*NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Vxlan, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vxlan == nil {
		t.Vxlan = make(map[NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Vxlan_BgpInstance_Union]*NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Vxlan)
	}

	key := BgpInstance

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Vxlan[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Vxlan", key)
	}

	t.Vxlan[key] = &NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Vxlan{
		BgpInstance: BgpInstance,
	}

	return t.Vxlan[key], nil
}

// RenameVxlan renames an entry in the list Vxlan within
// the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn) RenameVxlan(oldK, newK NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Vxlan_BgpInstance_Union) error {
	if _, ok := t.Vxlan[newK]; ok {
		return fmt.Errorf("key %v already exists in Vxlan", newK)
	}

	e, ok := t.Vxlan[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Vxlan", oldK)
	}
	e.BgpInstance = newK

	t.Vxlan[newK] = e
	delete(t.Vxlan, oldK)
	return nil
}

// GetOrCreateVxlan retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn) GetOrCreateVxlan(BgpInstance NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Vxlan_BgpInstance_Union) *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Vxlan {

	key := BgpInstance

	if v, ok := t.Vxlan[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVxlan(BgpInstance)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVxlan got unexpected error: %v", err))
	}
	return v
}

// GetVxlan retrieves the value with the specified key from
// the Vxlan map field of NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn) GetVxlan(BgpInstance NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Vxlan_BgpInstance_Union) *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Vxlan {

	if t == nil {
		return nil
	}

	key := BgpInstance

	if lm, ok := t.Vxlan[key]; ok {
		return lm
	}
	return nil
}

// DeleteVxlan deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn) DeleteVxlan(BgpInstance NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Vxlan_BgpInstance_Union) {
	key := BgpInstance

	delete(t.Vxlan, key)
}

// AppendVxlan appends the supplied NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Vxlan struct to the
// list Vxlan of NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Vxlan already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn) AppendVxlan(v *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Vxlan) error {
	key := v.BgpInstance

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vxlan == nil {
		t.Vxlan = make(map[NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Vxlan_BgpInstance_Union]*NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Vxlan)
	}

	if _, ok := t.Vxlan[key]; ok {
		return fmt.Errorf("duplicate key for list Vxlan %v", key)
	}

	t.Vxlan[key] = v
	return nil
}

// GetOrCreateLocalAc retrieves the value of the LocalAc field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn) GetOrCreateLocalAc() *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_LocalAc {
	if t.LocalAc != nil {
		return t.LocalAc
	}
	t.LocalAc = &NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_LocalAc{}
	return t.LocalAc
}

// GetOrCreateRemoteAc retrieves the value of the RemoteAc field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn) GetOrCreateRemoteAc() *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_RemoteAc {
	if t.RemoteAc != nil {
		return t.RemoteAc
	}
	t.RemoteAc = &NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_RemoteAc{}
	return t.RemoteAc
}

// GetLocalAc returns the value of the LocalAc struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn. If the receiver or the field LocalAc is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn) GetLocalAc() *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_LocalAc {
	if t != nil && t.LocalAc != nil {
		return t.LocalAc
	}
	return nil
}

// GetRemoteAc returns the value of the RemoteAc struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn. If the receiver or the field RemoteAc is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn) GetRemoteAc() *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_RemoteAc {
	if t != nil && t.RemoteAc != nil {
		return t.RemoteAc
	}
	return nil
}

// GetEvi retrieves the value of the leaf Evi from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Evi is set, it can
// safely use t.GetEvi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Evi == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn) GetEvi() uint32 {
	if t == nil || t.Evi == nil {
		return 0
	}
	return *t.Evi
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.LocalAc.PopulateDefaults()
	t.RemoteAc.PopulateDefaults()
	for _, e := range t.LocalAttachmentCircuit {
		e.PopulateDefaults()
	}
	for _, e := range t.Mpls {
		e.PopulateDefaults()
	}
	for _, e := range t.RemoteAttachmentCircuit {
		e.PopulateDefaults()
	}
	for _, e := range t.SegmentRoutingV6 {
		e.PopulateDefaults()
	}
	for _, e := range t.Vxlan {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_LocalAc represents the /nokia-conf/configure/groups/group/service/epipe/bgp-evpn/local-ac YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_LocalAc struct {
	EthTag *int32  `path:"eth-tag" module:"nokia-conf"`
	Name   *string `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_LocalAc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_LocalAc) IsYANGGoStruct() {}

// GetEthTag retrieves the value of the leaf EthTag from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_LocalAc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EthTag is set, it can
// safely use t.GetEthTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EthTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_LocalAc) GetEthTag() int32 {
	if t == nil || t.EthTag == nil {
		return 0
	}
	return *t.EthTag
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_LocalAc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_LocalAc) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_LocalAc
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_LocalAc) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_LocalAc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_LocalAc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_LocalAc) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_LocalAc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_LocalAc.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_LocalAc) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_LocalAttachmentCircuit represents the /nokia-conf/configure/groups/group/service/epipe/bgp-evpn/local-attachment-circuit YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_LocalAttachmentCircuit struct {
	Endpoint *string `path:"endpoint" module:"nokia-conf"`
	EthTag   *int32  `path:"eth-tag" module:"nokia-conf"`
	Name     *string `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_LocalAttachmentCircuit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_LocalAttachmentCircuit) IsYANGGoStruct() {
}

// GetEndpoint retrieves the value of the leaf Endpoint from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_LocalAttachmentCircuit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Endpoint is set, it can
// safely use t.GetEndpoint() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Endpoint == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_LocalAttachmentCircuit) GetEndpoint() string {
	if t == nil || t.Endpoint == nil {
		return ""
	}
	return *t.Endpoint
}

// GetEthTag retrieves the value of the leaf EthTag from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_LocalAttachmentCircuit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EthTag is set, it can
// safely use t.GetEthTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EthTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_LocalAttachmentCircuit) GetEthTag() int32 {
	if t == nil || t.EthTag == nil {
		return 0
	}
	return *t.EthTag
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_LocalAttachmentCircuit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_LocalAttachmentCircuit) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_LocalAttachmentCircuit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_LocalAttachmentCircuit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_LocalAttachmentCircuit struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_LocalAttachmentCircuit) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_LocalAttachmentCircuit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_LocalAttachmentCircuit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_LocalAttachmentCircuit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_LocalAttachmentCircuit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_LocalAttachmentCircuit.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_LocalAttachmentCircuit) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls represents the /nokia-conf/configure/groups/group/service/epipe/bgp-evpn/mpls YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls struct {
	AdminState              E_NokiaTypesSros_AdminState                                                     `path:"admin-state" module:"nokia-conf"`
	AutoBindTunnel          *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel     `path:"auto-bind-tunnel" module:"nokia-conf"`
	BgpInstance             NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_BgpInstance_Union   `path:"bgp-instance" module:"nokia-conf"`
	ControlWord             *bool                                                                           `path:"control-word" module:"nokia-conf"`
	DefaultRouteTag         *string                                                                         `path:"default-route-tag" module:"nokia-conf"`
	DynamicEgressLabelLimit *bool                                                                           `path:"dynamic-egress-label-limit" module:"nokia-conf"`
	Ecmp                    *int32                                                                          `path:"ecmp" module:"nokia-conf"`
	Endpoint                *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_Endpoint           `path:"endpoint" module:"nokia-conf"`
	EntropyLabel            *bool                                                                           `path:"entropy-label" module:"nokia-conf"`
	EviThreeByteAutoRt      *bool                                                                           `path:"evi-three-byte-auto-rt" module:"nokia-conf"`
	ForceVcForwarding       E_NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_ForceVcForwarding `path:"force-vc-forwarding" module:"nokia-conf"`
	OperGroup               *string                                                                         `path:"oper-group" module:"nokia-conf"`
	RouteNextHop            *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_RouteNextHop       `path:"route-next-hop" module:"nokia-conf"`
	SendTunnelEncap         *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_SendTunnelEncap    `path:"send-tunnel-encap" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls) IsYANGGoStruct() {}

// GetOrCreateAutoBindTunnel retrieves the value of the AutoBindTunnel field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls) GetOrCreateAutoBindTunnel() *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel {
	if t.AutoBindTunnel != nil {
		return t.AutoBindTunnel
	}
	t.AutoBindTunnel = &NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel{}
	return t.AutoBindTunnel
}

// GetOrCreateEndpoint retrieves the value of the Endpoint field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls) GetOrCreateEndpoint() *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_Endpoint {
	if t.Endpoint != nil {
		return t.Endpoint
	}
	t.Endpoint = &NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_Endpoint{}
	return t.Endpoint
}

// GetOrCreateRouteNextHop retrieves the value of the RouteNextHop field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls) GetOrCreateRouteNextHop() *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_RouteNextHop {
	if t.RouteNextHop != nil {
		return t.RouteNextHop
	}
	t.RouteNextHop = &NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_RouteNextHop{}
	return t.RouteNextHop
}

// GetOrCreateSendTunnelEncap retrieves the value of the SendTunnelEncap field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls) GetOrCreateSendTunnelEncap() *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_SendTunnelEncap {
	if t.SendTunnelEncap != nil {
		return t.SendTunnelEncap
	}
	t.SendTunnelEncap = &NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_SendTunnelEncap{}
	return t.SendTunnelEncap
}

// GetAutoBindTunnel returns the value of the AutoBindTunnel struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls. If the receiver or the field AutoBindTunnel is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls) GetAutoBindTunnel() *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel {
	if t != nil && t.AutoBindTunnel != nil {
		return t.AutoBindTunnel
	}
	return nil
}

// GetEndpoint returns the value of the Endpoint struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls. If the receiver or the field Endpoint is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls) GetEndpoint() *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_Endpoint {
	if t != nil && t.Endpoint != nil {
		return t.Endpoint
	}
	return nil
}

// GetRouteNextHop returns the value of the RouteNextHop struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls. If the receiver or the field RouteNextHop is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls) GetRouteNextHop() *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_RouteNextHop {
	if t != nil && t.RouteNextHop != nil {
		return t.RouteNextHop
	}
	return nil
}

// GetSendTunnelEncap returns the value of the SendTunnelEncap struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls. If the receiver or the field SendTunnelEncap is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls) GetSendTunnelEncap() *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_SendTunnelEncap {
	if t != nil && t.SendTunnelEncap != nil {
		return t.SendTunnelEncap
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetBgpInstance retrieves the value of the leaf BgpInstance from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BgpInstance is set, it can
// safely use t.GetBgpInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BgpInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls) GetBgpInstance() NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_BgpInstance_Union {
	if t == nil || t.BgpInstance == nil {
		return nil
	}
	return t.BgpInstance
}

// GetControlWord retrieves the value of the leaf ControlWord from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ControlWord is set, it can
// safely use t.GetControlWord() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ControlWord == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls) GetControlWord() bool {
	if t == nil || t.ControlWord == nil {
		return false
	}
	return *t.ControlWord
}

// GetDefaultRouteTag retrieves the value of the leaf DefaultRouteTag from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultRouteTag is set, it can
// safely use t.GetDefaultRouteTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultRouteTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls) GetDefaultRouteTag() string {
	if t == nil || t.DefaultRouteTag == nil {
		return ""
	}
	return *t.DefaultRouteTag
}

// GetDynamicEgressLabelLimit retrieves the value of the leaf DynamicEgressLabelLimit from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DynamicEgressLabelLimit is set, it can
// safely use t.GetDynamicEgressLabelLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DynamicEgressLabelLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls) GetDynamicEgressLabelLimit() bool {
	if t == nil || t.DynamicEgressLabelLimit == nil {
		return false
	}
	return *t.DynamicEgressLabelLimit
}

// GetEcmp retrieves the value of the leaf Ecmp from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ecmp is set, it can
// safely use t.GetEcmp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ecmp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls) GetEcmp() int32 {
	if t == nil || t.Ecmp == nil {
		return 1
	}
	return *t.Ecmp
}

// GetEntropyLabel retrieves the value of the leaf EntropyLabel from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntropyLabel is set, it can
// safely use t.GetEntropyLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntropyLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls) GetEntropyLabel() bool {
	if t == nil || t.EntropyLabel == nil {
		return false
	}
	return *t.EntropyLabel
}

// GetEviThreeByteAutoRt retrieves the value of the leaf EviThreeByteAutoRt from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EviThreeByteAutoRt is set, it can
// safely use t.GetEviThreeByteAutoRt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EviThreeByteAutoRt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls) GetEviThreeByteAutoRt() bool {
	if t == nil || t.EviThreeByteAutoRt == nil {
		return false
	}
	return *t.EviThreeByteAutoRt
}

// GetForceVcForwarding retrieves the value of the leaf ForceVcForwarding from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForceVcForwarding is set, it can
// safely use t.GetForceVcForwarding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForceVcForwarding == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls) GetForceVcForwarding() E_NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_ForceVcForwarding {
	if t == nil || t.ForceVcForwarding == 0 {
		return 0
	}
	return t.ForceVcForwarding
}

// GetOperGroup retrieves the value of the leaf OperGroup from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OperGroup is set, it can
// safely use t.GetOperGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OperGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls) GetOperGroup() string {
	if t == nil || t.OperGroup == nil {
		return ""
	}
	return *t.OperGroup
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.ControlWord == nil {
		var v bool = false
		t.ControlWord = &v
	}
	if t.DynamicEgressLabelLimit == nil {
		var v bool = false
		t.DynamicEgressLabelLimit = &v
	}
	if t.Ecmp == nil {
		var v int32 = 1
		t.Ecmp = &v
	}
	if t.EntropyLabel == nil {
		var v bool = false
		t.EntropyLabel = &v
	}
	if t.EviThreeByteAutoRt == nil {
		var v bool = false
		t.EviThreeByteAutoRt = &v
	}
	t.AutoBindTunnel.PopulateDefaults()
	t.Endpoint.PopulateDefaults()
	t.RouteNextHop.PopulateDefaults()
	t.SendTunnelEncap.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"bgp-instance": t.BgpInstance,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel represents the /nokia-conf/configure/groups/group/service/epipe/bgp-evpn/mpls/auto-bind-tunnel YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel struct {
	AllowFlexAlgoFallback      *bool                                                                                        `path:"allow-flex-algo-fallback" module:"nokia-conf"`
	Ecmp                       *uint32                                                                                      `path:"ecmp" module:"nokia-conf"`
	EnforceStrictTunnelTagging *bool                                                                                        `path:"enforce-strict-tunnel-tagging" module:"nokia-conf"`
	Resolution                 E_NokiaTypesServices_ResolveStatus                                                           `path:"resolution" module:"nokia-conf"`
	ResolutionFilter           *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter `path:"resolution-filter" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel) IsYANGGoStruct() {}

// GetOrCreateResolutionFilter retrieves the value of the ResolutionFilter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel) GetOrCreateResolutionFilter() *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter {
	if t.ResolutionFilter != nil {
		return t.ResolutionFilter
	}
	t.ResolutionFilter = &NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter{}
	return t.ResolutionFilter
}

// GetResolutionFilter returns the value of the ResolutionFilter struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel. If the receiver or the field ResolutionFilter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel) GetResolutionFilter() *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter {
	if t != nil && t.ResolutionFilter != nil {
		return t.ResolutionFilter
	}
	return nil
}

// GetAllowFlexAlgoFallback retrieves the value of the leaf AllowFlexAlgoFallback from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowFlexAlgoFallback is set, it can
// safely use t.GetAllowFlexAlgoFallback() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowFlexAlgoFallback == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel) GetAllowFlexAlgoFallback() bool {
	if t == nil || t.AllowFlexAlgoFallback == nil {
		return false
	}
	return *t.AllowFlexAlgoFallback
}

// GetEcmp retrieves the value of the leaf Ecmp from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ecmp is set, it can
// safely use t.GetEcmp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ecmp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel) GetEcmp() uint32 {
	if t == nil || t.Ecmp == nil {
		return 1
	}
	return *t.Ecmp
}

// GetEnforceStrictTunnelTagging retrieves the value of the leaf EnforceStrictTunnelTagging from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnforceStrictTunnelTagging is set, it can
// safely use t.GetEnforceStrictTunnelTagging() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnforceStrictTunnelTagging == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel) GetEnforceStrictTunnelTagging() bool {
	if t == nil || t.EnforceStrictTunnelTagging == nil {
		return false
	}
	return *t.EnforceStrictTunnelTagging
}

// GetResolution retrieves the value of the leaf Resolution from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Resolution is set, it can
// safely use t.GetResolution() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Resolution == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel) GetResolution() E_NokiaTypesServices_ResolveStatus {
	if t == nil || t.Resolution == 0 {
		return NokiaTypesServices_ResolveStatus_none
	}
	return t.Resolution
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowFlexAlgoFallback == nil {
		var v bool = false
		t.AllowFlexAlgoFallback = &v
	}
	if t.Ecmp == nil {
		var v uint32 = 1
		t.Ecmp = &v
	}
	if t.EnforceStrictTunnelTagging == nil {
		var v bool = false
		t.EnforceStrictTunnelTagging = &v
	}
	if t.Resolution == 0 {
		t.Resolution = NokiaTypesServices_ResolveStatus_none
	}
	t.ResolutionFilter.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter represents the /nokia-conf/configure/groups/group/service/epipe/bgp-evpn/mpls/auto-bind-tunnel/resolution-filter YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter struct {
	Bgp           *bool `path:"bgp" module:"nokia-conf"`
	Ldp           *bool `path:"ldp" module:"nokia-conf"`
	MplsFwdPolicy *bool `path:"mpls-fwd-policy" module:"nokia-conf"`
	RibApi        *bool `path:"rib-api" module:"nokia-conf"`
	Rsvp          *bool `path:"rsvp" module:"nokia-conf"`
	SrIsis        *bool `path:"sr-isis" module:"nokia-conf"`
	SrOspf        *bool `path:"sr-ospf" module:"nokia-conf"`
	SrOspf3       *bool `path:"sr-ospf3" module:"nokia-conf"`
	SrPolicy      *bool `path:"sr-policy" module:"nokia-conf"`
	SrTe          *bool `path:"sr-te" module:"nokia-conf"`
	Udp           *bool `path:"udp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) IsYANGGoStruct() {
}

// GetBgp retrieves the value of the leaf Bgp from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bgp is set, it can
// safely use t.GetBgp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bgp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) GetBgp() bool {
	if t == nil || t.Bgp == nil {
		return false
	}
	return *t.Bgp
}

// GetLdp retrieves the value of the leaf Ldp from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ldp is set, it can
// safely use t.GetLdp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ldp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) GetLdp() bool {
	if t == nil || t.Ldp == nil {
		return false
	}
	return *t.Ldp
}

// GetMplsFwdPolicy retrieves the value of the leaf MplsFwdPolicy from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MplsFwdPolicy is set, it can
// safely use t.GetMplsFwdPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MplsFwdPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) GetMplsFwdPolicy() bool {
	if t == nil || t.MplsFwdPolicy == nil {
		return false
	}
	return *t.MplsFwdPolicy
}

// GetRibApi retrieves the value of the leaf RibApi from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RibApi is set, it can
// safely use t.GetRibApi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RibApi == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) GetRibApi() bool {
	if t == nil || t.RibApi == nil {
		return false
	}
	return *t.RibApi
}

// GetRsvp retrieves the value of the leaf Rsvp from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rsvp is set, it can
// safely use t.GetRsvp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rsvp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) GetRsvp() bool {
	if t == nil || t.Rsvp == nil {
		return false
	}
	return *t.Rsvp
}

// GetSrIsis retrieves the value of the leaf SrIsis from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrIsis is set, it can
// safely use t.GetSrIsis() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrIsis == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) GetSrIsis() bool {
	if t == nil || t.SrIsis == nil {
		return false
	}
	return *t.SrIsis
}

// GetSrOspf retrieves the value of the leaf SrOspf from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrOspf is set, it can
// safely use t.GetSrOspf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrOspf == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) GetSrOspf() bool {
	if t == nil || t.SrOspf == nil {
		return false
	}
	return *t.SrOspf
}

// GetSrOspf3 retrieves the value of the leaf SrOspf3 from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrOspf3 is set, it can
// safely use t.GetSrOspf3() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrOspf3 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) GetSrOspf3() bool {
	if t == nil || t.SrOspf3 == nil {
		return false
	}
	return *t.SrOspf3
}

// GetSrPolicy retrieves the value of the leaf SrPolicy from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrPolicy is set, it can
// safely use t.GetSrPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) GetSrPolicy() bool {
	if t == nil || t.SrPolicy == nil {
		return false
	}
	return *t.SrPolicy
}

// GetSrTe retrieves the value of the leaf SrTe from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrTe is set, it can
// safely use t.GetSrTe() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrTe == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) GetSrTe() bool {
	if t == nil || t.SrTe == nil {
		return false
	}
	return *t.SrTe
}

// GetUdp retrieves the value of the leaf Udp from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Udp is set, it can
// safely use t.GetUdp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Udp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) GetUdp() bool {
	if t == nil || t.Udp == nil {
		return false
	}
	return *t.Udp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Bgp == nil {
		var v bool = false
		t.Bgp = &v
	}
	if t.Ldp == nil {
		var v bool = false
		t.Ldp = &v
	}
	if t.MplsFwdPolicy == nil {
		var v bool = false
		t.MplsFwdPolicy = &v
	}
	if t.RibApi == nil {
		var v bool = false
		t.RibApi = &v
	}
	if t.Rsvp == nil {
		var v bool = false
		t.Rsvp = &v
	}
	if t.SrIsis == nil {
		var v bool = false
		t.SrIsis = &v
	}
	if t.SrOspf == nil {
		var v bool = false
		t.SrOspf = &v
	}
	if t.SrOspf3 == nil {
		var v bool = false
		t.SrOspf3 = &v
	}
	if t.SrPolicy == nil {
		var v bool = false
		t.SrPolicy = &v
	}
	if t.SrTe == nil {
		var v bool = false
		t.SrTe = &v
	}
	if t.Udp == nil {
		var v bool = false
		t.Udp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_AutoBindTunnel_ResolutionFilter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_Endpoint represents the /nokia-conf/configure/groups/group/service/epipe/bgp-evpn/mpls/endpoint YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_Endpoint struct {
	Name *string `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_Endpoint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_Endpoint) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_Endpoint) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_Endpoint
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_Endpoint) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_Endpoint) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_Endpoint"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_Endpoint) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_Endpoint) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_Endpoint.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_Endpoint) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_RouteNextHop represents the /nokia-conf/configure/groups/group/service/epipe/bgp-evpn/mpls/route-next-hop YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_RouteNextHop struct {
	IpAddress  *string   `path:"ip-address" module:"nokia-conf"`
	SystemIpv4 YANGEmpty `path:"system-ipv4" module:"nokia-conf"`
	SystemIpv6 YANGEmpty `path:"system-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_RouteNextHop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_RouteNextHop) IsYANGGoStruct() {}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_RouteNextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_RouteNextHop) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetSystemIpv4 retrieves the value of the leaf SystemIpv4 from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_RouteNextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SystemIpv4 is set, it can
// safely use t.GetSystemIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SystemIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_RouteNextHop) GetSystemIpv4() YANGEmpty {
	if t == nil || t.SystemIpv4 == false {
		return false
	}
	return t.SystemIpv4
}

// GetSystemIpv6 retrieves the value of the leaf SystemIpv6 from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_RouteNextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SystemIpv6 is set, it can
// safely use t.GetSystemIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SystemIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_RouteNextHop) GetSystemIpv6() YANGEmpty {
	if t == nil || t.SystemIpv6 == false {
		return false
	}
	return t.SystemIpv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_RouteNextHop
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_RouteNextHop) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_RouteNextHop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_RouteNextHop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_RouteNextHop) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_RouteNextHop) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_RouteNextHop.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_RouteNextHop) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_SendTunnelEncap represents the /nokia-conf/configure/groups/group/service/epipe/bgp-evpn/mpls/send-tunnel-encap YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_SendTunnelEncap struct {
	Mpls        *bool `path:"mpls" module:"nokia-conf"`
	MplsOverUdp *bool `path:"mpls-over-udp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_SendTunnelEncap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_SendTunnelEncap) IsYANGGoStruct() {
}

// GetMpls retrieves the value of the leaf Mpls from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_SendTunnelEncap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mpls is set, it can
// safely use t.GetMpls() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mpls == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_SendTunnelEncap) GetMpls() bool {
	if t == nil || t.Mpls == nil {
		return true
	}
	return *t.Mpls
}

// GetMplsOverUdp retrieves the value of the leaf MplsOverUdp from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_SendTunnelEncap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MplsOverUdp is set, it can
// safely use t.GetMplsOverUdp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MplsOverUdp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_SendTunnelEncap) GetMplsOverUdp() bool {
	if t == nil || t.MplsOverUdp == nil {
		return false
	}
	return *t.MplsOverUdp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_SendTunnelEncap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_SendTunnelEncap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mpls == nil {
		var v bool = true
		t.Mpls = &v
	}
	if t.MplsOverUdp == nil {
		var v bool = false
		t.MplsOverUdp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_SendTunnelEncap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_SendTunnelEncap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_SendTunnelEncap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_SendTunnelEncap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_SendTunnelEncap.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Mpls_SendTunnelEncap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_RemoteAc represents the /nokia-conf/configure/groups/group/service/epipe/bgp-evpn/remote-ac YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_RemoteAc struct {
	EthTag *int32  `path:"eth-tag" module:"nokia-conf"`
	Name   *string `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_RemoteAc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_RemoteAc) IsYANGGoStruct() {}

// GetEthTag retrieves the value of the leaf EthTag from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_RemoteAc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EthTag is set, it can
// safely use t.GetEthTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EthTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_RemoteAc) GetEthTag() int32 {
	if t == nil || t.EthTag == nil {
		return 0
	}
	return *t.EthTag
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_RemoteAc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_RemoteAc) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_RemoteAc
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_RemoteAc) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_RemoteAc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_RemoteAc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_RemoteAc) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_RemoteAc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_RemoteAc.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_RemoteAc) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_RemoteAttachmentCircuit represents the /nokia-conf/configure/groups/group/service/epipe/bgp-evpn/remote-attachment-circuit YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_RemoteAttachmentCircuit struct {
	Endpoint *string `path:"endpoint" module:"nokia-conf"`
	EthTag   *int32  `path:"eth-tag" module:"nokia-conf"`
	Name     *string `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_RemoteAttachmentCircuit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_RemoteAttachmentCircuit) IsYANGGoStruct() {
}

// GetEndpoint retrieves the value of the leaf Endpoint from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_RemoteAttachmentCircuit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Endpoint is set, it can
// safely use t.GetEndpoint() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Endpoint == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_RemoteAttachmentCircuit) GetEndpoint() string {
	if t == nil || t.Endpoint == nil {
		return ""
	}
	return *t.Endpoint
}

// GetEthTag retrieves the value of the leaf EthTag from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_RemoteAttachmentCircuit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EthTag is set, it can
// safely use t.GetEthTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EthTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_RemoteAttachmentCircuit) GetEthTag() int32 {
	if t == nil || t.EthTag == nil {
		return 0
	}
	return *t.EthTag
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_RemoteAttachmentCircuit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_RemoteAttachmentCircuit) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_RemoteAttachmentCircuit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_RemoteAttachmentCircuit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_RemoteAttachmentCircuit struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_RemoteAttachmentCircuit) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_RemoteAttachmentCircuit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_RemoteAttachmentCircuit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_RemoteAttachmentCircuit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_RemoteAttachmentCircuit) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_RemoteAttachmentCircuit.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_RemoteAttachmentCircuit) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6 represents the /nokia-conf/configure/groups/group/service/epipe/bgp-evpn/segment-routing-v6 YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6 struct {
	AdminState         E_NokiaTypesSros_AdminState                                                                 `path:"admin-state" module:"nokia-conf"`
	BgpInstance        NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6_BgpInstance_Union   `path:"bgp-instance" module:"nokia-conf"`
	DefaultRouteTag    *string                                                                                     `path:"default-route-tag" module:"nokia-conf"`
	Ecmp               *int32                                                                                      `path:"ecmp" module:"nokia-conf"`
	EviThreeByteAutoRt *bool                                                                                       `path:"evi-three-byte-auto-rt" module:"nokia-conf"`
	ForceVcForwarding  E_NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6_ForceVcForwarding `path:"force-vc-forwarding" module:"nokia-conf"`
	OperGroup          *string                                                                                     `path:"oper-group" module:"nokia-conf"`
	RouteNextHop       *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6_RouteNextHop       `path:"route-next-hop" module:"nokia-conf"`
	SourceAddress      *string                                                                                     `path:"source-address" module:"nokia-conf"`
	Srv6               *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6_Srv6               `path:"srv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6) IsYANGGoStruct() {}

// GetOrCreateRouteNextHop retrieves the value of the RouteNextHop field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6) GetOrCreateRouteNextHop() *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6_RouteNextHop {
	if t.RouteNextHop != nil {
		return t.RouteNextHop
	}
	t.RouteNextHop = &NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6_RouteNextHop{}
	return t.RouteNextHop
}

// GetOrCreateSrv6 retrieves the value of the Srv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6) GetOrCreateSrv6() *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6_Srv6 {
	if t.Srv6 != nil {
		return t.Srv6
	}
	t.Srv6 = &NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6_Srv6{}
	return t.Srv6
}

// GetRouteNextHop returns the value of the RouteNextHop struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6. If the receiver or the field RouteNextHop is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6) GetRouteNextHop() *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6_RouteNextHop {
	if t != nil && t.RouteNextHop != nil {
		return t.RouteNextHop
	}
	return nil
}

// GetSrv6 returns the value of the Srv6 struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6. If the receiver or the field Srv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6) GetSrv6() *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6_Srv6 {
	if t != nil && t.Srv6 != nil {
		return t.Srv6
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetBgpInstance retrieves the value of the leaf BgpInstance from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BgpInstance is set, it can
// safely use t.GetBgpInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BgpInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6) GetBgpInstance() NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6_BgpInstance_Union {
	if t == nil || t.BgpInstance == nil {
		return nil
	}
	return t.BgpInstance
}

// GetDefaultRouteTag retrieves the value of the leaf DefaultRouteTag from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultRouteTag is set, it can
// safely use t.GetDefaultRouteTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultRouteTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6) GetDefaultRouteTag() string {
	if t == nil || t.DefaultRouteTag == nil {
		return ""
	}
	return *t.DefaultRouteTag
}

// GetEcmp retrieves the value of the leaf Ecmp from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ecmp is set, it can
// safely use t.GetEcmp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ecmp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6) GetEcmp() int32 {
	if t == nil || t.Ecmp == nil {
		return 1
	}
	return *t.Ecmp
}

// GetEviThreeByteAutoRt retrieves the value of the leaf EviThreeByteAutoRt from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EviThreeByteAutoRt is set, it can
// safely use t.GetEviThreeByteAutoRt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EviThreeByteAutoRt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6) GetEviThreeByteAutoRt() bool {
	if t == nil || t.EviThreeByteAutoRt == nil {
		return false
	}
	return *t.EviThreeByteAutoRt
}

// GetForceVcForwarding retrieves the value of the leaf ForceVcForwarding from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForceVcForwarding is set, it can
// safely use t.GetForceVcForwarding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForceVcForwarding == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6) GetForceVcForwarding() E_NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6_ForceVcForwarding {
	if t == nil || t.ForceVcForwarding == 0 {
		return 0
	}
	return t.ForceVcForwarding
}

// GetOperGroup retrieves the value of the leaf OperGroup from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OperGroup is set, it can
// safely use t.GetOperGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OperGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6) GetOperGroup() string {
	if t == nil || t.OperGroup == nil {
		return ""
	}
	return *t.OperGroup
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Ecmp == nil {
		var v int32 = 1
		t.Ecmp = &v
	}
	if t.EviThreeByteAutoRt == nil {
		var v bool = false
		t.EviThreeByteAutoRt = &v
	}
	t.RouteNextHop.PopulateDefaults()
	t.Srv6.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6 struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"bgp-instance": t.BgpInstance,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6_RouteNextHop represents the /nokia-conf/configure/groups/group/service/epipe/bgp-evpn/segment-routing-v6/route-next-hop YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6_RouteNextHop struct {
	IpAddress  *string   `path:"ip-address" module:"nokia-conf"`
	SystemIpv4 YANGEmpty `path:"system-ipv4" module:"nokia-conf"`
	SystemIpv6 YANGEmpty `path:"system-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6_RouteNextHop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6_RouteNextHop) IsYANGGoStruct() {
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6_RouteNextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6_RouteNextHop) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetSystemIpv4 retrieves the value of the leaf SystemIpv4 from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6_RouteNextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SystemIpv4 is set, it can
// safely use t.GetSystemIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SystemIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6_RouteNextHop) GetSystemIpv4() YANGEmpty {
	if t == nil || t.SystemIpv4 == false {
		return false
	}
	return t.SystemIpv4
}

// GetSystemIpv6 retrieves the value of the leaf SystemIpv6 from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6_RouteNextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SystemIpv6 is set, it can
// safely use t.GetSystemIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SystemIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6_RouteNextHop) GetSystemIpv6() YANGEmpty {
	if t == nil || t.SystemIpv6 == false {
		return false
	}
	return t.SystemIpv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6_RouteNextHop
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6_RouteNextHop) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6_RouteNextHop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6_RouteNextHop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6_RouteNextHop) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6_RouteNextHop) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6_RouteNextHop.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6_RouteNextHop) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6_Srv6 represents the /nokia-conf/configure/groups/group/service/epipe/bgp-evpn/segment-routing-v6/srv6 YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6_Srv6 struct {
	DefaultLocator *string `path:"default-locator" module:"nokia-conf"`
	Instance       *int32  `path:"instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6_Srv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6_Srv6) IsYANGGoStruct() {
}

// GetDefaultLocator retrieves the value of the leaf DefaultLocator from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6_Srv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultLocator is set, it can
// safely use t.GetDefaultLocator() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultLocator == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6_Srv6) GetDefaultLocator() string {
	if t == nil || t.DefaultLocator == nil {
		return ""
	}
	return *t.DefaultLocator
}

// GetInstance retrieves the value of the leaf Instance from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6_Srv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instance is set, it can
// safely use t.GetInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6_Srv6) GetInstance() int32 {
	if t == nil || t.Instance == nil {
		return 0
	}
	return *t.Instance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6_Srv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6_Srv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6_Srv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6_Srv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6_Srv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6_Srv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6_Srv6.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_SegmentRoutingV6_Srv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Vxlan represents the /nokia-conf/configure/groups/group/service/epipe/bgp-evpn/vxlan YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Vxlan struct {
	AdminState         E_NokiaTypesSros_AdminState                                                    `path:"admin-state" module:"nokia-conf"`
	BgpInstance        NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Vxlan_BgpInstance_Union `path:"bgp-instance" module:"nokia-conf"`
	DefaultRouteTag    *string                                                                        `path:"default-route-tag" module:"nokia-conf"`
	Ecmp               *int32                                                                         `path:"ecmp" module:"nokia-conf"`
	EviThreeByteAutoRt *bool                                                                          `path:"evi-three-byte-auto-rt" module:"nokia-conf"`
	SendTunnelEncap    *bool                                                                          `path:"send-tunnel-encap" module:"nokia-conf"`
	VxlanInstance      *uint32                                                                        `path:"vxlan-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Vxlan implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Vxlan) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Vxlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Vxlan) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetBgpInstance retrieves the value of the leaf BgpInstance from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Vxlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BgpInstance is set, it can
// safely use t.GetBgpInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BgpInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Vxlan) GetBgpInstance() NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Vxlan_BgpInstance_Union {
	if t == nil || t.BgpInstance == nil {
		return nil
	}
	return t.BgpInstance
}

// GetDefaultRouteTag retrieves the value of the leaf DefaultRouteTag from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Vxlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultRouteTag is set, it can
// safely use t.GetDefaultRouteTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultRouteTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Vxlan) GetDefaultRouteTag() string {
	if t == nil || t.DefaultRouteTag == nil {
		return ""
	}
	return *t.DefaultRouteTag
}

// GetEcmp retrieves the value of the leaf Ecmp from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Vxlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ecmp is set, it can
// safely use t.GetEcmp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ecmp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Vxlan) GetEcmp() int32 {
	if t == nil || t.Ecmp == nil {
		return 1
	}
	return *t.Ecmp
}

// GetEviThreeByteAutoRt retrieves the value of the leaf EviThreeByteAutoRt from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Vxlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EviThreeByteAutoRt is set, it can
// safely use t.GetEviThreeByteAutoRt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EviThreeByteAutoRt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Vxlan) GetEviThreeByteAutoRt() bool {
	if t == nil || t.EviThreeByteAutoRt == nil {
		return false
	}
	return *t.EviThreeByteAutoRt
}

// GetSendTunnelEncap retrieves the value of the leaf SendTunnelEncap from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Vxlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SendTunnelEncap is set, it can
// safely use t.GetSendTunnelEncap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SendTunnelEncap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Vxlan) GetSendTunnelEncap() bool {
	if t == nil || t.SendTunnelEncap == nil {
		return true
	}
	return *t.SendTunnelEncap
}

// GetVxlanInstance retrieves the value of the leaf VxlanInstance from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Vxlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VxlanInstance is set, it can
// safely use t.GetVxlanInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VxlanInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Vxlan) GetVxlanInstance() uint32 {
	if t == nil || t.VxlanInstance == nil {
		return 0
	}
	return *t.VxlanInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Vxlan
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Vxlan) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Ecmp == nil {
		var v int32 = 1
		t.Ecmp = &v
	}
	if t.EviThreeByteAutoRt == nil {
		var v bool = false
		t.EviThreeByteAutoRt = &v
	}
	if t.SendTunnelEncap == nil {
		var v bool = true
		t.SendTunnelEncap = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Vxlan struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Vxlan) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"bgp-instance": t.BgpInstance,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Vxlan) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Vxlan"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Vxlan) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Vxlan) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Vxlan.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_BgpEvpn_Vxlan) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_BgpMhSite represents the /nokia-conf/configure/groups/group/service/epipe/bgp-mh-site YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_BgpMhSite struct {
	ActivationTimer *int32                      `path:"activation-timer" module:"nokia-conf"`
	AdminState      E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	BootTimer       *int32                      `path:"boot-timer" module:"nokia-conf"`
	Id              *int32                      `path:"id" module:"nokia-conf"`
	MinDownTimer    *int32                      `path:"min-down-timer" module:"nokia-conf"`
	Preference      *uint32                     `path:"preference" module:"nokia-conf"`
	Sap             *string                     `path:"sap" module:"nokia-conf"`
	SiteName        *string                     `path:"site-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_BgpMhSite implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_BgpMhSite) IsYANGGoStruct() {}

// GetActivationTimer retrieves the value of the leaf ActivationTimer from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpMhSite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActivationTimer is set, it can
// safely use t.GetActivationTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActivationTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpMhSite) GetActivationTimer() int32 {
	if t == nil || t.ActivationTimer == nil {
		return 0
	}
	return *t.ActivationTimer
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpMhSite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpMhSite) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetBootTimer retrieves the value of the leaf BootTimer from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpMhSite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BootTimer is set, it can
// safely use t.GetBootTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BootTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpMhSite) GetBootTimer() int32 {
	if t == nil || t.BootTimer == nil {
		return 0
	}
	return *t.BootTimer
}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpMhSite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpMhSite) GetId() int32 {
	if t == nil || t.Id == nil {
		return 0
	}
	return *t.Id
}

// GetMinDownTimer retrieves the value of the leaf MinDownTimer from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpMhSite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinDownTimer is set, it can
// safely use t.GetMinDownTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinDownTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpMhSite) GetMinDownTimer() int32 {
	if t == nil || t.MinDownTimer == nil {
		return 0
	}
	return *t.MinDownTimer
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpMhSite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpMhSite) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 0
	}
	return *t.Preference
}

// GetSap retrieves the value of the leaf Sap from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpMhSite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Sap is set, it can
// safely use t.GetSap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Sap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpMhSite) GetSap() string {
	if t == nil || t.Sap == nil {
		return ""
	}
	return *t.Sap
}

// GetSiteName retrieves the value of the leaf SiteName from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpMhSite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SiteName is set, it can
// safely use t.GetSiteName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SiteName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpMhSite) GetSiteName() string {
	if t == nil || t.SiteName == nil {
		return ""
	}
	return *t.SiteName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpMhSite
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpMhSite) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpMhSite struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpMhSite) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SiteName == nil {
		return nil, fmt.Errorf("nil value for key SiteName")
	}

	return map[string]interface{}{
		"site-name": *t.SiteName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpMhSite) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_BgpMhSite"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpMhSite) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpMhSite) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_BgpMhSite.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_BgpMhSite) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws represents the /nokia-conf/configure/groups/group/service/epipe/bgp-vpws YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws struct {
	AdminState E_NokiaTypesSros_AdminState                                                 `path:"admin-state" module:"nokia-conf"`
	LocalVe    *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws_LocalVe             `path:"local-ve" module:"nokia-conf"`
	RemoteVe   map[string]*NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws_RemoteVe `path:"remote-ve" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws) IsYANGGoStruct() {}

// NewRemoteVe creates a new entry in the RemoteVe list of the
// NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws) NewRemoteVe(Name string) (*NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws_RemoteVe, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RemoteVe == nil {
		t.RemoteVe = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws_RemoteVe)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RemoteVe[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RemoteVe", key)
	}

	t.RemoteVe[key] = &NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws_RemoteVe{
		Name: &Name,
	}

	return t.RemoteVe[key], nil
}

// RenameRemoteVe renames an entry in the list RemoteVe within
// the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws) RenameRemoteVe(oldK, newK string) error {
	if _, ok := t.RemoteVe[newK]; ok {
		return fmt.Errorf("key %v already exists in RemoteVe", newK)
	}

	e, ok := t.RemoteVe[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RemoteVe", oldK)
	}
	e.Name = &newK

	t.RemoteVe[newK] = e
	delete(t.RemoteVe, oldK)
	return nil
}

// GetOrCreateRemoteVe retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws) GetOrCreateRemoteVe(Name string) *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws_RemoteVe {

	key := Name

	if v, ok := t.RemoteVe[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRemoteVe(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRemoteVe got unexpected error: %v", err))
	}
	return v
}

// GetRemoteVe retrieves the value with the specified key from
// the RemoteVe map field of NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws) GetRemoteVe(Name string) *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws_RemoteVe {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.RemoteVe[key]; ok {
		return lm
	}
	return nil
}

// DeleteRemoteVe deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws) DeleteRemoteVe(Name string) {
	key := Name

	delete(t.RemoteVe, key)
}

// AppendRemoteVe appends the supplied NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws_RemoteVe struct to the
// list RemoteVe of NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws_RemoteVe already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws) AppendRemoteVe(v *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws_RemoteVe) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RemoteVe == nil {
		t.RemoteVe = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws_RemoteVe)
	}

	if _, ok := t.RemoteVe[key]; ok {
		return fmt.Errorf("duplicate key for list RemoteVe %v", key)
	}

	t.RemoteVe[key] = v
	return nil
}

// GetOrCreateLocalVe retrieves the value of the LocalVe field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws) GetOrCreateLocalVe() *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws_LocalVe {
	if t.LocalVe != nil {
		return t.LocalVe
	}
	t.LocalVe = &NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws_LocalVe{}
	return t.LocalVe
}

// GetLocalVe returns the value of the LocalVe struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws. If the receiver or the field LocalVe is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws) GetLocalVe() *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws_LocalVe {
	if t != nil && t.LocalVe != nil {
		return t.LocalVe
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.LocalVe.PopulateDefaults()
	for _, e := range t.RemoteVe {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws_LocalVe represents the /nokia-conf/configure/groups/group/service/epipe/bgp-vpws/local-ve YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws_LocalVe struct {
	Id   *int32  `path:"id" module:"nokia-conf"`
	Name *string `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws_LocalVe implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws_LocalVe) IsYANGGoStruct() {}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws_LocalVe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws_LocalVe) GetId() int32 {
	if t == nil || t.Id == nil {
		return 0
	}
	return *t.Id
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws_LocalVe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws_LocalVe) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws_LocalVe
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws_LocalVe) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws_LocalVe) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws_LocalVe"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws_LocalVe) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws_LocalVe) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws_LocalVe.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws_LocalVe) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws_RemoteVe represents the /nokia-conf/configure/groups/group/service/epipe/bgp-vpws/remote-ve YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws_RemoteVe struct {
	Id   *int32  `path:"id" module:"nokia-conf"`
	Name *string `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws_RemoteVe implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws_RemoteVe) IsYANGGoStruct() {}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws_RemoteVe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws_RemoteVe) GetId() int32 {
	if t == nil || t.Id == nil {
		return 0
	}
	return *t.Id
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws_RemoteVe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws_RemoteVe) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws_RemoteVe
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws_RemoteVe) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws_RemoteVe struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws_RemoteVe) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws_RemoteVe) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws_RemoteVe"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws_RemoteVe) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws_RemoteVe) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws_RemoteVe.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_BgpVpws_RemoteVe) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp_PwTemplateBinding represents the /nokia-conf/configure/groups/group/service/epipe/bgp/pw-template-binding YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp_PwTemplateBinding struct {
	BfdLiveness    *bool    `path:"bfd-liveness" module:"nokia-conf"`
	BfdTemplate    *string  `path:"bfd-template" module:"nokia-conf"`
	Endpoint       *string  `path:"endpoint" module:"nokia-conf"`
	ImportRt       []string `path:"import-rt" module:"nokia-conf"`
	PwTemplateName *string  `path:"pw-template-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp_PwTemplateBinding implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp_PwTemplateBinding) IsYANGGoStruct() {}

// GetBfdLiveness retrieves the value of the leaf BfdLiveness from the NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp_PwTemplateBinding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdLiveness is set, it can
// safely use t.GetBfdLiveness() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdLiveness == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp_PwTemplateBinding) GetBfdLiveness() bool {
	if t == nil || t.BfdLiveness == nil {
		return false
	}
	return *t.BfdLiveness
}

// GetBfdTemplate retrieves the value of the leaf BfdTemplate from the NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp_PwTemplateBinding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdTemplate is set, it can
// safely use t.GetBfdTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp_PwTemplateBinding) GetBfdTemplate() string {
	if t == nil || t.BfdTemplate == nil {
		return ""
	}
	return *t.BfdTemplate
}

// GetEndpoint retrieves the value of the leaf Endpoint from the NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp_PwTemplateBinding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Endpoint is set, it can
// safely use t.GetEndpoint() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Endpoint == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp_PwTemplateBinding) GetEndpoint() string {
	if t == nil || t.Endpoint == nil {
		return ""
	}
	return *t.Endpoint
}

// GetImportRt retrieves the value of the leaf ImportRt from the NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp_PwTemplateBinding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportRt is set, it can
// safely use t.GetImportRt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportRt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp_PwTemplateBinding) GetImportRt() []string {
	if t == nil || t.ImportRt == nil {
		return nil
	}
	return t.ImportRt
}

// GetPwTemplateName retrieves the value of the leaf PwTemplateName from the NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp_PwTemplateBinding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PwTemplateName is set, it can
// safely use t.GetPwTemplateName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PwTemplateName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp_PwTemplateBinding) GetPwTemplateName() string {
	if t == nil || t.PwTemplateName == nil {
		return ""
	}
	return *t.PwTemplateName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp_PwTemplateBinding
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp_PwTemplateBinding) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BfdLiveness == nil {
		var v bool = false
		t.BfdLiveness = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp_PwTemplateBinding struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp_PwTemplateBinding) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PwTemplateName == nil {
		return nil, fmt.Errorf("nil value for key PwTemplateName")
	}

	return map[string]interface{}{
		"pw-template-name": *t.PwTemplateName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp_PwTemplateBinding) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp_PwTemplateBinding"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp_PwTemplateBinding) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp_PwTemplateBinding) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp_PwTemplateBinding.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp_PwTemplateBinding) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp_RouteTarget represents the /nokia-conf/configure/groups/group/service/epipe/bgp/route-target YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp_RouteTarget struct {
	Export *string `path:"export" module:"nokia-conf"`
	Import *string `path:"import" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp_RouteTarget implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp_RouteTarget) IsYANGGoStruct() {}

// GetExport retrieves the value of the leaf Export from the NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp_RouteTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Export is set, it can
// safely use t.GetExport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Export == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp_RouteTarget) GetExport() string {
	if t == nil || t.Export == nil {
		return ""
	}
	return *t.Export
}

// GetImport retrieves the value of the leaf Import from the NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp_RouteTarget
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Import is set, it can
// safely use t.GetImport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Import == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp_RouteTarget) GetImport() string {
	if t == nil || t.Import == nil {
		return ""
	}
	return *t.Import
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp_RouteTarget
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp_RouteTarget) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp_RouteTarget) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp_RouteTarget"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp_RouteTarget) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp_RouteTarget) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp_RouteTarget.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Bgp_RouteTarget) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Endpoint represents the /nokia-conf/configure/groups/group/service/epipe/endpoint YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Endpoint struct {
	Description      *string                                                                    `path:"description" module:"nokia-conf"`
	HoldTimeActive   *uint32                                                                    `path:"hold-time-active" module:"nokia-conf"`
	Name             *string                                                                    `path:"name" module:"nokia-conf"`
	RevertTime       NokiaConf_Configure_Groups_Group_Service_Epipe_Endpoint_RevertTime_Union   `path:"revert-time" module:"nokia-conf"`
	StandbySignaling E_NokiaConf_Configure_Groups_Group_Service_Epipe_Endpoint_StandbySignaling `path:"standby-signaling" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Endpoint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Endpoint) IsYANGGoStruct() {}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Epipe_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Endpoint) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetHoldTimeActive retrieves the value of the leaf HoldTimeActive from the NokiaConf_Configure_Groups_Group_Service_Epipe_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldTimeActive is set, it can
// safely use t.GetHoldTimeActive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldTimeActive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Endpoint) GetHoldTimeActive() uint32 {
	if t == nil || t.HoldTimeActive == nil {
		return 0
	}
	return *t.HoldTimeActive
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Service_Epipe_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Endpoint) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetRevertTime retrieves the value of the leaf RevertTime from the NokiaConf_Configure_Groups_Group_Service_Epipe_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RevertTime is set, it can
// safely use t.GetRevertTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RevertTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Endpoint) GetRevertTime() NokiaConf_Configure_Groups_Group_Service_Epipe_Endpoint_RevertTime_Union {
	if t == nil || t.RevertTime == nil {
		return NokiaTypesServices_RevertTime_Enum_immediate
	}
	return t.RevertTime
}

// GetStandbySignaling retrieves the value of the leaf StandbySignaling from the NokiaConf_Configure_Groups_Group_Service_Epipe_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StandbySignaling is set, it can
// safely use t.GetStandbySignaling() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StandbySignaling == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Endpoint) GetStandbySignaling() E_NokiaConf_Configure_Groups_Group_Service_Epipe_Endpoint_StandbySignaling {
	if t == nil || t.StandbySignaling == 0 {
		return 0
	}
	return t.StandbySignaling
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Endpoint
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Endpoint) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RevertTime == nil {
		t.RevertTime = NokiaTypesServices_RevertTime_Enum_immediate
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Epipe_Endpoint struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Endpoint) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Endpoint) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Endpoint"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Endpoint) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Endpoint) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Endpoint.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Endpoint) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_EthCfm represents the /nokia-conf/configure/groups/group/service/epipe/eth-cfm YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_EthCfm struct {
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_EthCfm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_EthCfm) IsYANGGoStruct() {}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_EthCfm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_EthCfm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_EthCfm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_EthCfm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_EthCfm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_EthCfm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_EthCfm.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_EthCfm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_LoadBalancing represents the /nokia-conf/configure/groups/group/service/epipe/load-balancing YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_LoadBalancing struct {
	LblEthOrIpL4Teid  *bool `path:"lbl-eth-or-ip-l4-teid" module:"nokia-conf"`
	PerServiceHashing *bool `path:"per-service-hashing" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_LoadBalancing implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_LoadBalancing) IsYANGGoStruct() {}

// GetLblEthOrIpL4Teid retrieves the value of the leaf LblEthOrIpL4Teid from the NokiaConf_Configure_Groups_Group_Service_Epipe_LoadBalancing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LblEthOrIpL4Teid is set, it can
// safely use t.GetLblEthOrIpL4Teid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LblEthOrIpL4Teid == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_LoadBalancing) GetLblEthOrIpL4Teid() bool {
	if t == nil || t.LblEthOrIpL4Teid == nil {
		return false
	}
	return *t.LblEthOrIpL4Teid
}

// GetPerServiceHashing retrieves the value of the leaf PerServiceHashing from the NokiaConf_Configure_Groups_Group_Service_Epipe_LoadBalancing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PerServiceHashing is set, it can
// safely use t.GetPerServiceHashing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PerServiceHashing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_LoadBalancing) GetPerServiceHashing() bool {
	if t == nil || t.PerServiceHashing == nil {
		return false
	}
	return *t.PerServiceHashing
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_LoadBalancing
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_LoadBalancing) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LblEthOrIpL4Teid == nil {
		var v bool = false
		t.LblEthOrIpL4Teid = &v
	}
	if t.PerServiceHashing == nil {
		var v bool = false
		t.PerServiceHashing = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_LoadBalancing) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_LoadBalancing"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_LoadBalancing) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_LoadBalancing) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_LoadBalancing.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_LoadBalancing) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_NatOutside represents the /nokia-conf/configure/groups/group/service/epipe/nat-outside YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_NatOutside struct {
	AdminState E_NokiaTypesSros_AdminState                                              `path:"admin-state" module:"nokia-conf"`
	NatGroup   NokiaConf_Configure_Groups_Group_Service_Epipe_NatOutside_NatGroup_Union `path:"nat-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_NatOutside implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_NatOutside) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Epipe_NatOutside
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_NatOutside) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetNatGroup retrieves the value of the leaf NatGroup from the NokiaConf_Configure_Groups_Group_Service_Epipe_NatOutside
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NatGroup is set, it can
// safely use t.GetNatGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NatGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_NatOutside) GetNatGroup() NokiaConf_Configure_Groups_Group_Service_Epipe_NatOutside_NatGroup_Union {
	if t == nil || t.NatGroup == nil {
		return nil
	}
	return t.NatGroup
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_NatOutside
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_NatOutside) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Epipe_NatOutside struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_NatOutside) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"nat-group": t.NatGroup,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_NatOutside) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_NatOutside"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_NatOutside) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_NatOutside) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_NatOutside.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_NatOutside) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Pbb represents the /nokia-conf/configure/groups/group/service/epipe/pbb YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Pbb struct {
	ForceQtagForwarding     *bool                                                                        `path:"force-qtag-forwarding" module:"nokia-conf"`
	LocalSwitchServiceState E_NokiaConf_Configure_Groups_Group_Service_Epipe_Pbb_LocalSwitchServiceState `path:"local-switch-service-state" module:"nokia-conf"`
	Tunnel                  *NokiaConf_Configure_Groups_Group_Service_Epipe_Pbb_Tunnel                   `path:"tunnel" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Pbb implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Pbb) IsYANGGoStruct() {}

// GetOrCreateTunnel retrieves the value of the Tunnel field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Pbb) GetOrCreateTunnel() *NokiaConf_Configure_Groups_Group_Service_Epipe_Pbb_Tunnel {
	if t.Tunnel != nil {
		return t.Tunnel
	}
	t.Tunnel = &NokiaConf_Configure_Groups_Group_Service_Epipe_Pbb_Tunnel{}
	return t.Tunnel
}

// GetTunnel returns the value of the Tunnel struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Pbb. If the receiver or the field Tunnel is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Pbb) GetTunnel() *NokiaConf_Configure_Groups_Group_Service_Epipe_Pbb_Tunnel {
	if t != nil && t.Tunnel != nil {
		return t.Tunnel
	}
	return nil
}

// GetForceQtagForwarding retrieves the value of the leaf ForceQtagForwarding from the NokiaConf_Configure_Groups_Group_Service_Epipe_Pbb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForceQtagForwarding is set, it can
// safely use t.GetForceQtagForwarding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForceQtagForwarding == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Pbb) GetForceQtagForwarding() bool {
	if t == nil || t.ForceQtagForwarding == nil {
		return false
	}
	return *t.ForceQtagForwarding
}

// GetLocalSwitchServiceState retrieves the value of the leaf LocalSwitchServiceState from the NokiaConf_Configure_Groups_Group_Service_Epipe_Pbb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalSwitchServiceState is set, it can
// safely use t.GetLocalSwitchServiceState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalSwitchServiceState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Pbb) GetLocalSwitchServiceState() E_NokiaConf_Configure_Groups_Group_Service_Epipe_Pbb_LocalSwitchServiceState {
	if t == nil || t.LocalSwitchServiceState == 0 {
		return NokiaConf_Configure_Groups_Group_Service_Epipe_Pbb_LocalSwitchServiceState_sap
	}
	return t.LocalSwitchServiceState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Pbb
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Pbb) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ForceQtagForwarding == nil {
		var v bool = false
		t.ForceQtagForwarding = &v
	}
	if t.LocalSwitchServiceState == 0 {
		t.LocalSwitchServiceState = NokiaConf_Configure_Groups_Group_Service_Epipe_Pbb_LocalSwitchServiceState_sap
	}
	t.Tunnel.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Pbb) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Pbb"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Pbb) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Pbb) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Pbb.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Pbb) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Pbb_Tunnel represents the /nokia-conf/configure/groups/group/service/epipe/pbb/tunnel YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Pbb_Tunnel struct {
	BackboneDestMac         *string `path:"backbone-dest-mac" module:"nokia-conf"`
	BackboneDestMacName     *string `path:"backbone-dest-mac-name" module:"nokia-conf"`
	BackboneVplsServiceName *string `path:"backbone-vpls-service-name" module:"nokia-conf"`
	Isid                    *int32  `path:"isid" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Pbb_Tunnel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Pbb_Tunnel) IsYANGGoStruct() {}

// GetBackboneDestMac retrieves the value of the leaf BackboneDestMac from the NokiaConf_Configure_Groups_Group_Service_Epipe_Pbb_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BackboneDestMac is set, it can
// safely use t.GetBackboneDestMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BackboneDestMac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Pbb_Tunnel) GetBackboneDestMac() string {
	if t == nil || t.BackboneDestMac == nil {
		return ""
	}
	return *t.BackboneDestMac
}

// GetBackboneDestMacName retrieves the value of the leaf BackboneDestMacName from the NokiaConf_Configure_Groups_Group_Service_Epipe_Pbb_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BackboneDestMacName is set, it can
// safely use t.GetBackboneDestMacName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BackboneDestMacName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Pbb_Tunnel) GetBackboneDestMacName() string {
	if t == nil || t.BackboneDestMacName == nil {
		return ""
	}
	return *t.BackboneDestMacName
}

// GetBackboneVplsServiceName retrieves the value of the leaf BackboneVplsServiceName from the NokiaConf_Configure_Groups_Group_Service_Epipe_Pbb_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BackboneVplsServiceName is set, it can
// safely use t.GetBackboneVplsServiceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BackboneVplsServiceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Pbb_Tunnel) GetBackboneVplsServiceName() string {
	if t == nil || t.BackboneVplsServiceName == nil {
		return ""
	}
	return *t.BackboneVplsServiceName
}

// GetIsid retrieves the value of the leaf Isid from the NokiaConf_Configure_Groups_Group_Service_Epipe_Pbb_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Isid is set, it can
// safely use t.GetIsid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Isid == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Pbb_Tunnel) GetIsid() int32 {
	if t == nil || t.Isid == nil {
		return 0
	}
	return *t.Isid
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Pbb_Tunnel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Pbb_Tunnel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Pbb_Tunnel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Pbb_Tunnel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Pbb_Tunnel) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Pbb_Tunnel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Pbb_Tunnel.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Pbb_Tunnel) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap represents the /nokia-conf/configure/groups/group/service/epipe/sap YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap struct {
	Aarp              *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Aarp          `path:"aarp" module:"nokia-conf" yangPresence:"true"`
	AccountingPolicy  *uint32                                                           `path:"accounting-policy" module:"nokia-conf"`
	AdminState        E_NokiaTypesSros_AdminState                                       `path:"admin-state" module:"nokia-conf"`
	AppProfile        *string                                                           `path:"app-profile" module:"nokia-conf"`
	Bandwidth         *uint64                                                           `path:"bandwidth" module:"nokia-conf"`
	Cflowd            *bool                                                             `path:"cflowd" module:"nokia-conf"`
	CollectStats      *bool                                                             `path:"collect-stats" module:"nokia-conf"`
	CpuProtection     *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_CpuProtection `path:"cpu-protection" module:"nokia-conf"`
	Description       *string                                                           `path:"description" module:"nokia-conf"`
	DistCpuProtection *string                                                           `path:"dist-cpu-protection" module:"nokia-conf"`
	Egress            *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress        `path:"egress" module:"nokia-conf"`
	Endpoint          *string                                                           `path:"endpoint" module:"nokia-conf"`
	EthCfm            *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm        `path:"eth-cfm" module:"nokia-conf" yangPresence:"true"`
	Ethernet          *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ethernet      `path:"ethernet" module:"nokia-conf"`
	IgnoreOperDown    *bool                                                             `path:"ignore-oper-down" module:"nokia-conf"`
	Ingress           *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress       `path:"ingress" module:"nokia-conf"`
	L2Tpv3Session     *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_L2Tpv3Session `path:"l2tpv3-session" module:"nokia-conf" yangPresence:"true"`
	Lag               *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Lag           `path:"lag" module:"nokia-conf"`
	McRing            *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_McRing        `path:"mc-ring" module:"nokia-conf" yangPresence:"true"`
	MonitorOperGroup  *string                                                           `path:"monitor-oper-group" module:"nokia-conf"`
	MultiServiceSite  *string                                                           `path:"multi-service-site" module:"nokia-conf"`
	OperGroup         *string                                                           `path:"oper-group" module:"nokia-conf"`
	SapId             *string                                                           `path:"sap-id" module:"nokia-conf"`
	TransitPolicy     *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_TransitPolicy `path:"transit-policy" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap) IsYANGGoStruct() {}

// GetOrCreateAarp retrieves the value of the Aarp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap) GetOrCreateAarp() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Aarp {
	if t.Aarp != nil {
		return t.Aarp
	}
	t.Aarp = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Aarp{}
	return t.Aarp
}

// GetOrCreateCpuProtection retrieves the value of the CpuProtection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap) GetOrCreateCpuProtection() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_CpuProtection {
	if t.CpuProtection != nil {
		return t.CpuProtection
	}
	t.CpuProtection = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_CpuProtection{}
	return t.CpuProtection
}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap) GetOrCreateEgress() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress{}
	return t.Egress
}

// GetOrCreateEthCfm retrieves the value of the EthCfm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap) GetOrCreateEthCfm() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm {
	if t.EthCfm != nil {
		return t.EthCfm
	}
	t.EthCfm = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm{}
	return t.EthCfm
}

// GetOrCreateEthernet retrieves the value of the Ethernet field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap) GetOrCreateEthernet() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ethernet {
	if t.Ethernet != nil {
		return t.Ethernet
	}
	t.Ethernet = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ethernet{}
	return t.Ethernet
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap) GetOrCreateIngress() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress{}
	return t.Ingress
}

// GetOrCreateL2Tpv3Session retrieves the value of the L2Tpv3Session field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap) GetOrCreateL2Tpv3Session() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_L2Tpv3Session {
	if t.L2Tpv3Session != nil {
		return t.L2Tpv3Session
	}
	t.L2Tpv3Session = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_L2Tpv3Session{}
	return t.L2Tpv3Session
}

// GetOrCreateLag retrieves the value of the Lag field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap) GetOrCreateLag() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Lag {
	if t.Lag != nil {
		return t.Lag
	}
	t.Lag = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Lag{}
	return t.Lag
}

// GetOrCreateMcRing retrieves the value of the McRing field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap) GetOrCreateMcRing() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_McRing {
	if t.McRing != nil {
		return t.McRing
	}
	t.McRing = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_McRing{}
	return t.McRing
}

// GetOrCreateTransitPolicy retrieves the value of the TransitPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap) GetOrCreateTransitPolicy() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_TransitPolicy {
	if t.TransitPolicy != nil {
		return t.TransitPolicy
	}
	t.TransitPolicy = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_TransitPolicy{}
	return t.TransitPolicy
}

// GetAarp returns the value of the Aarp struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap. If the receiver or the field Aarp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap) GetAarp() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Aarp {
	if t != nil && t.Aarp != nil {
		return t.Aarp
	}
	return nil
}

// GetCpuProtection returns the value of the CpuProtection struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap. If the receiver or the field CpuProtection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap) GetCpuProtection() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_CpuProtection {
	if t != nil && t.CpuProtection != nil {
		return t.CpuProtection
	}
	return nil
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap) GetEgress() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetEthCfm returns the value of the EthCfm struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap. If the receiver or the field EthCfm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap) GetEthCfm() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm {
	if t != nil && t.EthCfm != nil {
		return t.EthCfm
	}
	return nil
}

// GetEthernet returns the value of the Ethernet struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap. If the receiver or the field Ethernet is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap) GetEthernet() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ethernet {
	if t != nil && t.Ethernet != nil {
		return t.Ethernet
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap) GetIngress() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetL2Tpv3Session returns the value of the L2Tpv3Session struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap. If the receiver or the field L2Tpv3Session is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap) GetL2Tpv3Session() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_L2Tpv3Session {
	if t != nil && t.L2Tpv3Session != nil {
		return t.L2Tpv3Session
	}
	return nil
}

// GetLag returns the value of the Lag struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap. If the receiver or the field Lag is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap) GetLag() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Lag {
	if t != nil && t.Lag != nil {
		return t.Lag
	}
	return nil
}

// GetMcRing returns the value of the McRing struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap. If the receiver or the field McRing is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap) GetMcRing() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_McRing {
	if t != nil && t.McRing != nil {
		return t.McRing
	}
	return nil
}

// GetTransitPolicy returns the value of the TransitPolicy struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap. If the receiver or the field TransitPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap) GetTransitPolicy() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_TransitPolicy {
	if t != nil && t.TransitPolicy != nil {
		return t.TransitPolicy
	}
	return nil
}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetAppProfile retrieves the value of the leaf AppProfile from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AppProfile is set, it can
// safely use t.GetAppProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AppProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap) GetAppProfile() string {
	if t == nil || t.AppProfile == nil {
		return ""
	}
	return *t.AppProfile
}

// GetBandwidth retrieves the value of the leaf Bandwidth from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bandwidth is set, it can
// safely use t.GetBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap) GetBandwidth() uint64 {
	if t == nil || t.Bandwidth == nil {
		return 0
	}
	return *t.Bandwidth
}

// GetCflowd retrieves the value of the leaf Cflowd from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cflowd is set, it can
// safely use t.GetCflowd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cflowd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap) GetCflowd() bool {
	if t == nil || t.Cflowd == nil {
		return false
	}
	return *t.Cflowd
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDistCpuProtection retrieves the value of the leaf DistCpuProtection from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DistCpuProtection is set, it can
// safely use t.GetDistCpuProtection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DistCpuProtection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap) GetDistCpuProtection() string {
	if t == nil || t.DistCpuProtection == nil {
		return ""
	}
	return *t.DistCpuProtection
}

// GetEndpoint retrieves the value of the leaf Endpoint from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Endpoint is set, it can
// safely use t.GetEndpoint() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Endpoint == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap) GetEndpoint() string {
	if t == nil || t.Endpoint == nil {
		return ""
	}
	return *t.Endpoint
}

// GetIgnoreOperDown retrieves the value of the leaf IgnoreOperDown from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreOperDown is set, it can
// safely use t.GetIgnoreOperDown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreOperDown == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap) GetIgnoreOperDown() bool {
	if t == nil || t.IgnoreOperDown == nil {
		return false
	}
	return *t.IgnoreOperDown
}

// GetMonitorOperGroup retrieves the value of the leaf MonitorOperGroup from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorOperGroup is set, it can
// safely use t.GetMonitorOperGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorOperGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap) GetMonitorOperGroup() string {
	if t == nil || t.MonitorOperGroup == nil {
		return ""
	}
	return *t.MonitorOperGroup
}

// GetMultiServiceSite retrieves the value of the leaf MultiServiceSite from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MultiServiceSite is set, it can
// safely use t.GetMultiServiceSite() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MultiServiceSite == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap) GetMultiServiceSite() string {
	if t == nil || t.MultiServiceSite == nil {
		return ""
	}
	return *t.MultiServiceSite
}

// GetOperGroup retrieves the value of the leaf OperGroup from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OperGroup is set, it can
// safely use t.GetOperGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OperGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap) GetOperGroup() string {
	if t == nil || t.OperGroup == nil {
		return ""
	}
	return *t.OperGroup
}

// GetSapId retrieves the value of the leaf SapId from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SapId is set, it can
// safely use t.GetSapId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SapId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap) GetSapId() string {
	if t == nil || t.SapId == nil {
		return ""
	}
	return *t.SapId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Cflowd == nil {
		var v bool = false
		t.Cflowd = &v
	}
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
	if t.IgnoreOperDown == nil {
		var v bool = false
		t.IgnoreOperDown = &v
	}
	t.Aarp.PopulateDefaults()
	t.CpuProtection.PopulateDefaults()
	t.Egress.PopulateDefaults()
	t.EthCfm.PopulateDefaults()
	t.Ethernet.PopulateDefaults()
	t.Ingress.PopulateDefaults()
	t.L2Tpv3Session.PopulateDefaults()
	t.Lag.PopulateDefaults()
	t.McRing.PopulateDefaults()
	t.TransitPolicy.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SapId == nil {
		return nil, fmt.Errorf("nil value for key SapId")
	}

	return map[string]interface{}{
		"sap-id": *t.SapId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Aarp represents the /nokia-conf/configure/groups/group/service/epipe/sap/aarp YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Aarp struct {
	Id   *uint32                                              `path:"id" module:"nokia-conf"`
	Type E_NokiaTypesServices_DualHomingBsxAarpServiceRefType `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Aarp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Aarp) IsYANGGoStruct() {}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Aarp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Aarp) GetId() uint32 {
	if t == nil || t.Id == nil {
		return 0
	}
	return *t.Id
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Aarp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Aarp) GetType() E_NokiaTypesServices_DualHomingBsxAarpServiceRefType {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Aarp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Aarp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Aarp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Aarp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Aarp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Aarp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Aarp.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Aarp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_CpuProtection represents the /nokia-conf/configure/groups/group/service/epipe/sap/cpu-protection YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_CpuProtection struct {
	EthCfmMonitoring *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_CpuProtection_EthCfmMonitoring `path:"eth-cfm-monitoring" module:"nokia-conf" yangPresence:"true"`
	MacMonitoring    YANGEmpty                                                                          `path:"mac-monitoring" module:"nokia-conf"`
	PolicyId         *uint32                                                                            `path:"policy-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_CpuProtection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_CpuProtection) IsYANGGoStruct() {}

// GetOrCreateEthCfmMonitoring retrieves the value of the EthCfmMonitoring field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_CpuProtection) GetOrCreateEthCfmMonitoring() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_CpuProtection_EthCfmMonitoring {
	if t.EthCfmMonitoring != nil {
		return t.EthCfmMonitoring
	}
	t.EthCfmMonitoring = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_CpuProtection_EthCfmMonitoring{}
	return t.EthCfmMonitoring
}

// GetEthCfmMonitoring returns the value of the EthCfmMonitoring struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_CpuProtection. If the receiver or the field EthCfmMonitoring is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_CpuProtection) GetEthCfmMonitoring() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_CpuProtection_EthCfmMonitoring {
	if t != nil && t.EthCfmMonitoring != nil {
		return t.EthCfmMonitoring
	}
	return nil
}

// GetMacMonitoring retrieves the value of the leaf MacMonitoring from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_CpuProtection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacMonitoring is set, it can
// safely use t.GetMacMonitoring() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacMonitoring == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_CpuProtection) GetMacMonitoring() YANGEmpty {
	if t == nil || t.MacMonitoring == false {
		return false
	}
	return t.MacMonitoring
}

// GetPolicyId retrieves the value of the leaf PolicyId from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_CpuProtection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyId is set, it can
// safely use t.GetPolicyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_CpuProtection) GetPolicyId() uint32 {
	if t == nil || t.PolicyId == nil {
		return 0
	}
	return *t.PolicyId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_CpuProtection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_CpuProtection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.EthCfmMonitoring.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_CpuProtection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_CpuProtection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_CpuProtection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_CpuProtection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_CpuProtection.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_CpuProtection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_CpuProtection_EthCfmMonitoring represents the /nokia-conf/configure/groups/group/service/epipe/sap/cpu-protection/eth-cfm-monitoring YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_CpuProtection_EthCfmMonitoring struct {
	Aggregate YANGEmpty `path:"aggregate" module:"nokia-conf"`
	Car       YANGEmpty `path:"car" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_CpuProtection_EthCfmMonitoring implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_CpuProtection_EthCfmMonitoring) IsYANGGoStruct() {
}

// GetAggregate retrieves the value of the leaf Aggregate from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_CpuProtection_EthCfmMonitoring
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Aggregate is set, it can
// safely use t.GetAggregate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Aggregate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_CpuProtection_EthCfmMonitoring) GetAggregate() YANGEmpty {
	if t == nil || t.Aggregate == false {
		return false
	}
	return t.Aggregate
}

// GetCar retrieves the value of the leaf Car from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_CpuProtection_EthCfmMonitoring
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Car is set, it can
// safely use t.GetCar() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Car == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_CpuProtection_EthCfmMonitoring) GetCar() YANGEmpty {
	if t == nil || t.Car == false {
		return false
	}
	return t.Car
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_CpuProtection_EthCfmMonitoring
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_CpuProtection_EthCfmMonitoring) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_CpuProtection_EthCfmMonitoring) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_CpuProtection_EthCfmMonitoring"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_CpuProtection_EthCfmMonitoring) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_CpuProtection_EthCfmMonitoring) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_CpuProtection_EthCfmMonitoring.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_CpuProtection_EthCfmMonitoring) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress represents the /nokia-conf/configure/groups/group/service/epipe/sap/egress YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress struct {
	AggRate          *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_AggRate          `path:"agg-rate" module:"nokia-conf"`
	Filter           *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Filter           `path:"filter" module:"nokia-conf"`
	Qos              *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos              `path:"qos" module:"nokia-conf"`
	VlanManipulation *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_VlanManipulation `path:"vlan-manipulation" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress) IsYANGGoStruct() {}

// GetOrCreateAggRate retrieves the value of the AggRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress) GetOrCreateAggRate() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_AggRate {
	if t.AggRate != nil {
		return t.AggRate
	}
	t.AggRate = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_AggRate{}
	return t.AggRate
}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress) GetOrCreateFilter() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Filter{}
	return t.Filter
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress) GetOrCreateQos() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos{}
	return t.Qos
}

// GetOrCreateVlanManipulation retrieves the value of the VlanManipulation field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress) GetOrCreateVlanManipulation() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_VlanManipulation {
	if t.VlanManipulation != nil {
		return t.VlanManipulation
	}
	t.VlanManipulation = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_VlanManipulation{}
	return t.VlanManipulation
}

// GetAggRate returns the value of the AggRate struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress. If the receiver or the field AggRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress) GetAggRate() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_AggRate {
	if t != nil && t.AggRate != nil {
		return t.AggRate
	}
	return nil
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress) GetFilter() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress) GetQos() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// GetVlanManipulation returns the value of the VlanManipulation struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress. If the receiver or the field VlanManipulation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress) GetVlanManipulation() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_VlanManipulation {
	if t != nil && t.VlanManipulation != nil {
		return t.VlanManipulation
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AggRate.PopulateDefaults()
	t.Filter.PopulateDefaults()
	t.Qos.PopulateDefaults()
	t.VlanManipulation.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_AggRate represents the /nokia-conf/configure/groups/group/service/epipe/sap/egress/agg-rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_AggRate struct {
	Cir                       NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_AggRate_Cir_Union `path:"cir" module:"nokia-conf"`
	LimitUnusedBandwidth      *bool                                                                       `path:"limit-unused-bandwidth" module:"nokia-conf"`
	QueueFrameBasedAccounting *bool                                                                       `path:"queue-frame-based-accounting" module:"nokia-conf"`
	Rate                      *int64                                                                      `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_AggRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_AggRate) IsYANGGoStruct() {}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_AggRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_AggRate) GetCir() NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_AggRate_Cir_Union {
	if t == nil || t.Cir == nil {
		return UnionInt32(0)
	}
	return t.Cir
}

// GetLimitUnusedBandwidth retrieves the value of the leaf LimitUnusedBandwidth from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_AggRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LimitUnusedBandwidth is set, it can
// safely use t.GetLimitUnusedBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LimitUnusedBandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_AggRate) GetLimitUnusedBandwidth() bool {
	if t == nil || t.LimitUnusedBandwidth == nil {
		return false
	}
	return *t.LimitUnusedBandwidth
}

// GetQueueFrameBasedAccounting retrieves the value of the leaf QueueFrameBasedAccounting from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_AggRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueFrameBasedAccounting is set, it can
// safely use t.GetQueueFrameBasedAccounting() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueFrameBasedAccounting == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_AggRate) GetQueueFrameBasedAccounting() bool {
	if t == nil || t.QueueFrameBasedAccounting == nil {
		return false
	}
	return *t.QueueFrameBasedAccounting
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_AggRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_AggRate) GetRate() int64 {
	if t == nil || t.Rate == nil {
		return 0
	}
	return *t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_AggRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_AggRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		t.Cir = UnionInt32(0)
	}
	if t.LimitUnusedBandwidth == nil {
		var v bool = false
		t.LimitUnusedBandwidth = &v
	}
	if t.QueueFrameBasedAccounting == nil {
		var v bool = false
		t.QueueFrameBasedAccounting = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_AggRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_AggRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_AggRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_AggRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_AggRate.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_AggRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Filter represents the /nokia-conf/configure/groups/group/service/epipe/sap/egress/filter YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Filter struct {
	Ip   *string `path:"ip" module:"nokia-conf"`
	Ipv6 *string `path:"ipv6" module:"nokia-conf"`
	Mac  *string `path:"mac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Filter) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Filter) GetIpv6() string {
	if t == nil || t.Ipv6 == nil {
		return ""
	}
	return *t.Ipv6
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Filter) GetMac() string {
	if t == nil || t.Mac == nil {
		return ""
	}
	return *t.Mac
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Filter.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos represents the /nokia-conf/configure/groups/group/service/epipe/sap/egress/qos YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos struct {
	EgressRemarkPolicy   *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_EgressRemarkPolicy   `path:"egress-remark-policy" module:"nokia-conf"`
	PolicerControlPolicy *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy `path:"policer-control-policy" module:"nokia-conf"`
	QinqMarkTopOnly      *bool                                                                               `path:"qinq-mark-top-only" module:"nokia-conf"`
	SapEgress            *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress            `path:"sap-egress" module:"nokia-conf"`
	SchedulerPolicy      *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy      `path:"scheduler-policy" module:"nokia-conf"`
	VlanQosPolicy        *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_VlanQosPolicy        `path:"vlan-qos-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos) IsYANGGoStruct() {}

// GetOrCreateEgressRemarkPolicy retrieves the value of the EgressRemarkPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos) GetOrCreateEgressRemarkPolicy() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_EgressRemarkPolicy {
	if t.EgressRemarkPolicy != nil {
		return t.EgressRemarkPolicy
	}
	t.EgressRemarkPolicy = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_EgressRemarkPolicy{}
	return t.EgressRemarkPolicy
}

// GetOrCreatePolicerControlPolicy retrieves the value of the PolicerControlPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos) GetOrCreatePolicerControlPolicy() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy {
	if t.PolicerControlPolicy != nil {
		return t.PolicerControlPolicy
	}
	t.PolicerControlPolicy = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy{}
	return t.PolicerControlPolicy
}

// GetOrCreateSapEgress retrieves the value of the SapEgress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos) GetOrCreateSapEgress() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress {
	if t.SapEgress != nil {
		return t.SapEgress
	}
	t.SapEgress = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress{}
	return t.SapEgress
}

// GetOrCreateSchedulerPolicy retrieves the value of the SchedulerPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos) GetOrCreateSchedulerPolicy() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy {
	if t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	t.SchedulerPolicy = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy{}
	return t.SchedulerPolicy
}

// GetOrCreateVlanQosPolicy retrieves the value of the VlanQosPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos) GetOrCreateVlanQosPolicy() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_VlanQosPolicy {
	if t.VlanQosPolicy != nil {
		return t.VlanQosPolicy
	}
	t.VlanQosPolicy = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_VlanQosPolicy{}
	return t.VlanQosPolicy
}

// GetEgressRemarkPolicy returns the value of the EgressRemarkPolicy struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos. If the receiver or the field EgressRemarkPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos) GetEgressRemarkPolicy() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_EgressRemarkPolicy {
	if t != nil && t.EgressRemarkPolicy != nil {
		return t.EgressRemarkPolicy
	}
	return nil
}

// GetPolicerControlPolicy returns the value of the PolicerControlPolicy struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos. If the receiver or the field PolicerControlPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos) GetPolicerControlPolicy() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy {
	if t != nil && t.PolicerControlPolicy != nil {
		return t.PolicerControlPolicy
	}
	return nil
}

// GetSapEgress returns the value of the SapEgress struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos. If the receiver or the field SapEgress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos) GetSapEgress() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress {
	if t != nil && t.SapEgress != nil {
		return t.SapEgress
	}
	return nil
}

// GetSchedulerPolicy returns the value of the SchedulerPolicy struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos. If the receiver or the field SchedulerPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos) GetSchedulerPolicy() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy {
	if t != nil && t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	return nil
}

// GetVlanQosPolicy returns the value of the VlanQosPolicy struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos. If the receiver or the field VlanQosPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos) GetVlanQosPolicy() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_VlanQosPolicy {
	if t != nil && t.VlanQosPolicy != nil {
		return t.VlanQosPolicy
	}
	return nil
}

// GetQinqMarkTopOnly retrieves the value of the leaf QinqMarkTopOnly from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QinqMarkTopOnly is set, it can
// safely use t.GetQinqMarkTopOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QinqMarkTopOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos) GetQinqMarkTopOnly() bool {
	if t == nil || t.QinqMarkTopOnly == nil {
		return false
	}
	return *t.QinqMarkTopOnly
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.QinqMarkTopOnly == nil {
		var v bool = false
		t.QinqMarkTopOnly = &v
	}
	t.EgressRemarkPolicy.PopulateDefaults()
	t.PolicerControlPolicy.PopulateDefaults()
	t.SapEgress.PopulateDefaults()
	t.SchedulerPolicy.PopulateDefaults()
	t.VlanQosPolicy.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_EgressRemarkPolicy represents the /nokia-conf/configure/groups/group/service/epipe/sap/egress/qos/egress-remark-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_EgressRemarkPolicy struct {
	PolicyName *string `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_EgressRemarkPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_EgressRemarkPolicy) IsYANGGoStruct() {
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_EgressRemarkPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_EgressRemarkPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_EgressRemarkPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_EgressRemarkPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_EgressRemarkPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_EgressRemarkPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_EgressRemarkPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_EgressRemarkPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_EgressRemarkPolicy.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_EgressRemarkPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy represents the /nokia-conf/configure/groups/group/service/epipe/sap/egress/qos/policer-control-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy struct {
	Overrides  *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides `path:"overrides" module:"nokia-conf" yangPresence:"true"`
	PolicyName *string                                                                                       `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy) IsYANGGoStruct() {
}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy) GetOrCreateOverrides() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy) GetOverrides() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides represents the /nokia-conf/configure/groups/group/service/epipe/sap/egress/qos/policer-control-policy/overrides YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides struct {
	Root *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root `path:"root" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides) IsYANGGoStruct() {
}

// GetOrCreateRoot retrieves the value of the Root field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides) GetOrCreateRoot() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root {
	if t.Root != nil {
		return t.Root
	}
	t.Root = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root{}
	return t.Root
}

// GetRoot returns the value of the Root struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides. If the receiver or the field Root is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides) GetRoot() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root {
	if t != nil && t.Root != nil {
		return t.Root
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Root.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root represents the /nokia-conf/configure/groups/group/service/epipe/sap/egress/qos/policer-control-policy/overrides/root YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root struct {
	MaxRate               NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_MaxRate_Union          `path:"max-rate" module:"nokia-conf"`
	PriorityMbsThresholds *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds `path:"priority-mbs-thresholds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) IsYANGGoStruct() {
}

// GetOrCreatePriorityMbsThresholds retrieves the value of the PriorityMbsThresholds field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) GetOrCreatePriorityMbsThresholds() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds {
	if t.PriorityMbsThresholds != nil {
		return t.PriorityMbsThresholds
	}
	t.PriorityMbsThresholds = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds{}
	return t.PriorityMbsThresholds
}

// GetPriorityMbsThresholds returns the value of the PriorityMbsThresholds struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root. If the receiver or the field PriorityMbsThresholds is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) GetPriorityMbsThresholds() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds {
	if t != nil && t.PriorityMbsThresholds != nil {
		return t.PriorityMbsThresholds
	}
	return nil
}

// GetMaxRate retrieves the value of the leaf MaxRate from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRate is set, it can
// safely use t.GetMaxRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) GetMaxRate() NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_MaxRate_Union {
	if t == nil || t.MaxRate == nil {
		return nil
	}
	return t.MaxRate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PriorityMbsThresholds.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds represents the /nokia-conf/configure/groups/group/service/epipe/sap/egress/qos/policer-control-policy/overrides/root/priority-mbs-thresholds YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds struct {
	MinThreshSeparation NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_MinThreshSeparation_Union                                                                                                                                          `path:"min-thresh-separation" module:"nokia-conf"`
	Priority            map[NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union]*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) IsYANGGoStruct() {
}

// NewPriority creates a new entry in the Priority list of the
// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) NewPriority(PriorityLevel NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union) (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Priority == nil {
		t.Priority = make(map[NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union]*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority)
	}

	key := PriorityLevel

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Priority[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Priority", key)
	}

	t.Priority[key] = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority{
		PriorityLevel: PriorityLevel,
	}

	return t.Priority[key], nil
}

// RenamePriority renames an entry in the list Priority within
// the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) RenamePriority(oldK, newK NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union) error {
	if _, ok := t.Priority[newK]; ok {
		return fmt.Errorf("key %v already exists in Priority", newK)
	}

	e, ok := t.Priority[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Priority", oldK)
	}
	e.PriorityLevel = newK

	t.Priority[newK] = e
	delete(t.Priority, oldK)
	return nil
}

// GetOrCreatePriority retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) GetOrCreatePriority(PriorityLevel NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union) *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority {

	key := PriorityLevel

	if v, ok := t.Priority[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPriority(PriorityLevel)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePriority got unexpected error: %v", err))
	}
	return v
}

// GetPriority retrieves the value with the specified key from
// the Priority map field of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) GetPriority(PriorityLevel NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union) *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority {

	if t == nil {
		return nil
	}

	key := PriorityLevel

	if lm, ok := t.Priority[key]; ok {
		return lm
	}
	return nil
}

// DeletePriority deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) DeletePriority(PriorityLevel NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union) {
	key := PriorityLevel

	delete(t.Priority, key)
}

// AppendPriority appends the supplied NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority struct to the
// list Priority of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) AppendPriority(v *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) error {
	key := v.PriorityLevel

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Priority == nil {
		t.Priority = make(map[NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union]*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority)
	}

	if _, ok := t.Priority[key]; ok {
		return fmt.Errorf("duplicate key for list Priority %v", key)
	}

	t.Priority[key] = v
	return nil
}

// GetMinThreshSeparation retrieves the value of the leaf MinThreshSeparation from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinThreshSeparation is set, it can
// safely use t.GetMinThreshSeparation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinThreshSeparation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) GetMinThreshSeparation() NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_MinThreshSeparation_Union {
	if t == nil || t.MinThreshSeparation == nil {
		return nil
	}
	return t.MinThreshSeparation
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Priority {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority represents the /nokia-conf/configure/groups/group/service/epipe/sap/egress/qos/policer-control-policy/overrides/root/priority-mbs-thresholds/priority YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority struct {
	MbsContribution NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_MbsContribution_Union `path:"mbs-contribution" module:"nokia-conf"`
	PriorityLevel   NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union   `path:"priority-level" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) IsYANGGoStruct() {
}

// GetMbsContribution retrieves the value of the leaf MbsContribution from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MbsContribution is set, it can
// safely use t.GetMbsContribution() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MbsContribution == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) GetMbsContribution() NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_MbsContribution_Union {
	if t == nil || t.MbsContribution == nil {
		return nil
	}
	return t.MbsContribution
}

// GetPriorityLevel retrieves the value of the leaf PriorityLevel from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PriorityLevel is set, it can
// safely use t.GetPriorityLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PriorityLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) GetPriorityLevel() NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union {
	if t == nil || t.PriorityLevel == nil {
		return nil
	}
	return t.PriorityLevel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"priority-level": t.PriorityLevel,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress represents the /nokia-conf/configure/groups/group/service/epipe/sap/egress/qos/sap-egress YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress struct {
	Overrides         *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides         `path:"overrides" module:"nokia-conf"`
	PolicyName        *string                                                                                    `path:"policy-name" module:"nokia-conf"`
	PortRedirectGroup *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup `path:"port-redirect-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress) IsYANGGoStruct() {}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress) GetOrCreateOverrides() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides{}
	return t.Overrides
}

// GetOrCreatePortRedirectGroup retrieves the value of the PortRedirectGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress) GetOrCreatePortRedirectGroup() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup {
	if t.PortRedirectGroup != nil {
		return t.PortRedirectGroup
	}
	t.PortRedirectGroup = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup{}
	return t.PortRedirectGroup
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress) GetOverrides() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPortRedirectGroup returns the value of the PortRedirectGroup struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress. If the receiver or the field PortRedirectGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress) GetPortRedirectGroup() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup {
	if t != nil && t.PortRedirectGroup != nil {
		return t.PortRedirectGroup
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
	t.PortRedirectGroup.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides represents the /nokia-conf/configure/groups/group/service/epipe/sap/egress/qos/sap-egress/overrides YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides struct {
	HsSecondaryShaper *string                                                                                                                                                                                                      `path:"hs-secondary-shaper" module:"nokia-conf"`
	HsWrrGroup        map[NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup_GroupId_Union]*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup `path:"hs-wrr-group" module:"nokia-conf"`
	HsmdaQueues       *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues                                                                                                               `path:"hsmda-queues" module:"nokia-conf"`
	Policer           map[NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PolicerId_Union]*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer     `path:"policer" module:"nokia-conf"`
	Queue             map[NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue           `path:"queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides) IsYANGGoStruct() {
}

// NewHsWrrGroup creates a new entry in the HsWrrGroup list of the
// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides) NewHsWrrGroup(GroupId NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup_GroupId_Union) (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HsWrrGroup == nil {
		t.HsWrrGroup = make(map[NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup_GroupId_Union]*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup)
	}

	key := GroupId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.HsWrrGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list HsWrrGroup", key)
	}

	t.HsWrrGroup[key] = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup{
		GroupId: GroupId,
	}

	return t.HsWrrGroup[key], nil
}

// RenameHsWrrGroup renames an entry in the list HsWrrGroup within
// the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides) RenameHsWrrGroup(oldK, newK NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup_GroupId_Union) error {
	if _, ok := t.HsWrrGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in HsWrrGroup", newK)
	}

	e, ok := t.HsWrrGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in HsWrrGroup", oldK)
	}
	e.GroupId = newK

	t.HsWrrGroup[newK] = e
	delete(t.HsWrrGroup, oldK)
	return nil
}

// GetOrCreateHsWrrGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides) GetOrCreateHsWrrGroup(GroupId NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup_GroupId_Union) *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup {

	key := GroupId

	if v, ok := t.HsWrrGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHsWrrGroup(GroupId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHsWrrGroup got unexpected error: %v", err))
	}
	return v
}

// GetHsWrrGroup retrieves the value with the specified key from
// the HsWrrGroup map field of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides) GetHsWrrGroup(GroupId NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup_GroupId_Union) *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup {

	if t == nil {
		return nil
	}

	key := GroupId

	if lm, ok := t.HsWrrGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteHsWrrGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides) DeleteHsWrrGroup(GroupId NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup_GroupId_Union) {
	key := GroupId

	delete(t.HsWrrGroup, key)
}

// AppendHsWrrGroup appends the supplied NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup struct to the
// list HsWrrGroup of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides) AppendHsWrrGroup(v *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) error {
	key := v.GroupId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HsWrrGroup == nil {
		t.HsWrrGroup = make(map[NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup_GroupId_Union]*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup)
	}

	if _, ok := t.HsWrrGroup[key]; ok {
		return fmt.Errorf("duplicate key for list HsWrrGroup %v", key)
	}

	t.HsWrrGroup[key] = v
	return nil
}

// NewPolicer creates a new entry in the Policer list of the
// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides) NewPolicer(PolicerId NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PolicerId_Union) (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PolicerId_Union]*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer)
	}

	key := PolicerId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Policer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Policer", key)
	}

	t.Policer[key] = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer{
		PolicerId: PolicerId,
	}

	return t.Policer[key], nil
}

// RenamePolicer renames an entry in the list Policer within
// the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides) RenamePolicer(oldK, newK NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PolicerId_Union) error {
	if _, ok := t.Policer[newK]; ok {
		return fmt.Errorf("key %v already exists in Policer", newK)
	}

	e, ok := t.Policer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Policer", oldK)
	}
	e.PolicerId = newK

	t.Policer[newK] = e
	delete(t.Policer, oldK)
	return nil
}

// GetOrCreatePolicer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides) GetOrCreatePolicer(PolicerId NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PolicerId_Union) *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer {

	key := PolicerId

	if v, ok := t.Policer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicer(PolicerId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicer got unexpected error: %v", err))
	}
	return v
}

// GetPolicer retrieves the value with the specified key from
// the Policer map field of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides) GetPolicer(PolicerId NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PolicerId_Union) *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer {

	if t == nil {
		return nil
	}

	key := PolicerId

	if lm, ok := t.Policer[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides) DeletePolicer(PolicerId NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PolicerId_Union) {
	key := PolicerId

	delete(t.Policer, key)
}

// AppendPolicer appends the supplied NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer struct to the
// list Policer of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides) AppendPolicer(v *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) error {
	key := v.PolicerId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PolicerId_Union]*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer)
	}

	if _, ok := t.Policer[key]; ok {
		return fmt.Errorf("duplicate key for list Policer %v", key)
	}

	t.Policer[key] = v
	return nil
}

// NewQueue creates a new entry in the Queue list of the
// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides) NewQueue(QueueId NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_QueueId_Union) (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue)
	}

	key := QueueId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue{
		QueueId: QueueId,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides) RenameQueue(oldK, newK NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_QueueId_Union) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.QueueId = newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides) GetOrCreateQueue(QueueId NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_QueueId_Union) *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue {

	key := QueueId

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(QueueId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides) GetQueue(QueueId NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_QueueId_Union) *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue {

	if t == nil {
		return nil
	}

	key := QueueId

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides) DeleteQueue(QueueId NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_QueueId_Union) {
	key := QueueId

	delete(t.Queue, key)
}

// AppendQueue appends the supplied NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue struct to the
// list Queue of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides) AppendQueue(v *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) error {
	key := v.QueueId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// GetOrCreateHsmdaQueues retrieves the value of the HsmdaQueues field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides) GetOrCreateHsmdaQueues() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues {
	if t.HsmdaQueues != nil {
		return t.HsmdaQueues
	}
	t.HsmdaQueues = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues{}
	return t.HsmdaQueues
}

// GetHsmdaQueues returns the value of the HsmdaQueues struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides. If the receiver or the field HsmdaQueues is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides) GetHsmdaQueues() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues {
	if t != nil && t.HsmdaQueues != nil {
		return t.HsmdaQueues
	}
	return nil
}

// GetHsSecondaryShaper retrieves the value of the leaf HsSecondaryShaper from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsSecondaryShaper is set, it can
// safely use t.GetHsSecondaryShaper() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsSecondaryShaper == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides) GetHsSecondaryShaper() string {
	if t == nil || t.HsSecondaryShaper == nil {
		return ""
	}
	return *t.HsSecondaryShaper
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.HsmdaQueues.PopulateDefaults()
	for _, e := range t.HsWrrGroup {
		e.PopulateDefaults()
	}
	for _, e := range t.Policer {
		e.PopulateDefaults()
	}
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup represents the /nokia-conf/configure/groups/group/service/epipe/sap/egress/qos/sap-egress/overrides/hs-wrr-group YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup struct {
	GroupId       NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup_GroupId_Union `path:"group-id" module:"nokia-conf"`
	HsClassWeight *int32                                                                                                     `path:"hs-class-weight" module:"nokia-conf"`
	PercentRate   *float64                                                                                                   `path:"percent-rate" module:"nokia-conf"`
	Rate          NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup_Rate_Union    `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) IsYANGGoStruct() {
}

// GetGroupId retrieves the value of the leaf GroupId from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupId is set, it can
// safely use t.GetGroupId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) GetGroupId() NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup_GroupId_Union {
	if t == nil || t.GroupId == nil {
		return nil
	}
	return t.GroupId
}

// GetHsClassWeight retrieves the value of the leaf HsClassWeight from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsClassWeight is set, it can
// safely use t.GetHsClassWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsClassWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) GetHsClassWeight() int32 {
	if t == nil || t.HsClassWeight == nil {
		return 0
	}
	return *t.HsClassWeight
}

// GetPercentRate retrieves the value of the leaf PercentRate from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentRate is set, it can
// safely use t.GetPercentRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) GetPercentRate() float64 {
	if t == nil || t.PercentRate == nil {
		return 0.0
	}
	return *t.PercentRate
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) GetRate() NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup_Rate_Union {
	if t == nil || t.Rate == nil {
		return nil
	}
	return t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"group-id": t.GroupId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsWrrGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues represents the /nokia-conf/configure/groups/group/service/epipe/sap/egress/qos/sap-egress/overrides/hsmda-queues YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues struct {
	PacketByteOffset *int32                                                                                                                                                                                                                     `path:"packet-byte-offset" module:"nokia-conf"`
	Queue            map[NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue `path:"queue" module:"nokia-conf"`
	SecondaryShaper  *string                                                                                                                                                                                                                    `path:"secondary-shaper" module:"nokia-conf"`
	WrrPolicy        *string                                                                                                                                                                                                                    `path:"wrr-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) IsYANGGoStruct() {
}

// NewQueue creates a new entry in the Queue list of the
// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) NewQueue(QueueId NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue_QueueId_Union) (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue)
	}

	key := QueueId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue{
		QueueId: QueueId,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) RenameQueue(oldK, newK NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue_QueueId_Union) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.QueueId = newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) GetOrCreateQueue(QueueId NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue_QueueId_Union) *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue {

	key := QueueId

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(QueueId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) GetQueue(QueueId NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue_QueueId_Union) *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue {

	if t == nil {
		return nil
	}

	key := QueueId

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) DeleteQueue(QueueId NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue_QueueId_Union) {
	key := QueueId

	delete(t.Queue, key)
}

// AppendQueue appends the supplied NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue struct to the
// list Queue of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) AppendQueue(v *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) error {
	key := v.QueueId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// GetPacketByteOffset retrieves the value of the leaf PacketByteOffset from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketByteOffset is set, it can
// safely use t.GetPacketByteOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketByteOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) GetPacketByteOffset() int32 {
	if t == nil || t.PacketByteOffset == nil {
		return 0
	}
	return *t.PacketByteOffset
}

// GetSecondaryShaper retrieves the value of the leaf SecondaryShaper from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecondaryShaper is set, it can
// safely use t.GetSecondaryShaper() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecondaryShaper == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) GetSecondaryShaper() string {
	if t == nil || t.SecondaryShaper == nil {
		return ""
	}
	return *t.SecondaryShaper
}

// GetWrrPolicy retrieves the value of the leaf WrrPolicy from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WrrPolicy is set, it can
// safely use t.GetWrrPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WrrPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) GetWrrPolicy() string {
	if t == nil || t.WrrPolicy == nil {
		return ""
	}
	return *t.WrrPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue represents the /nokia-conf/configure/groups/group/service/epipe/sap/egress/qos/sap-egress/overrides/hsmda-queues/queue YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue struct {
	Mbs         NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue_Mbs_Union     `path:"mbs" module:"nokia-conf"`
	QueueId     NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue_QueueId_Union `path:"queue-id" module:"nokia-conf"`
	Rate        NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue_Rate_Union    `path:"rate" module:"nokia-conf"`
	SlopePolicy *string                                                                                                           `path:"slope-policy" module:"nokia-conf"`
	WrrWeight   *int32                                                                                                            `path:"wrr-weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) IsYANGGoStruct() {
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) GetMbs() NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return nil
	}
	return t.Mbs
}

// GetQueueId retrieves the value of the leaf QueueId from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueId is set, it can
// safely use t.GetQueueId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) GetQueueId() NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue_QueueId_Union {
	if t == nil || t.QueueId == nil {
		return nil
	}
	return t.QueueId
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) GetRate() NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue_Rate_Union {
	if t == nil || t.Rate == nil {
		return nil
	}
	return t.Rate
}

// GetSlopePolicy retrieves the value of the leaf SlopePolicy from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlopePolicy is set, it can
// safely use t.GetSlopePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlopePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) GetSlopePolicy() string {
	if t == nil || t.SlopePolicy == nil {
		return ""
	}
	return *t.SlopePolicy
}

// GetWrrWeight retrieves the value of the leaf WrrWeight from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WrrWeight is set, it can
// safely use t.GetWrrWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WrrWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) GetWrrWeight() int32 {
	if t == nil || t.WrrWeight == nil {
		return 0
	}
	return *t.WrrWeight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"queue-id": t.QueueId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_HsmdaQueues_Queue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer represents the /nokia-conf/configure/groups/group/service/epipe/sap/egress/qos/sap-egress/overrides/policer YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer struct {
	Cbs              NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Cbs_Union       `path:"cbs" module:"nokia-conf"`
	Mbs              NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Mbs_Union       `path:"mbs" module:"nokia-conf"`
	PacketByteOffset *int32                                                                                                    `path:"packet-byte-offset" module:"nokia-conf"`
	PercentRate      *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate    `path:"percent-rate" module:"nokia-conf"`
	PolicerId        NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PolicerId_Union `path:"policer-id" module:"nokia-conf"`
	Rate             *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate           `path:"rate" module:"nokia-conf"`
	StatMode         E_NokiaTypesQos_EgressPolicerStatMode                                                                     `path:"stat-mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) IsYANGGoStruct() {
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetOrCreatePercentRate() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate{}
	return t.PercentRate
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetOrCreateRate() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate{}
	return t.Rate
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetPercentRate() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetRate() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetCbs() NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return nil
	}
	return t.Cbs
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetMbs() NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return nil
	}
	return t.Mbs
}

// GetPacketByteOffset retrieves the value of the leaf PacketByteOffset from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketByteOffset is set, it can
// safely use t.GetPacketByteOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketByteOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetPacketByteOffset() int32 {
	if t == nil || t.PacketByteOffset == nil {
		return 0
	}
	return *t.PacketByteOffset
}

// GetPolicerId retrieves the value of the leaf PolicerId from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerId is set, it can
// safely use t.GetPolicerId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetPolicerId() NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PolicerId_Union {
	if t == nil || t.PolicerId == nil {
		return nil
	}
	return t.PolicerId
}

// GetStatMode retrieves the value of the leaf StatMode from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StatMode is set, it can
// safely use t.GetStatMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StatMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) GetStatMode() E_NokiaTypesQos_EgressPolicerStatMode {
	if t == nil || t.StatMode == 0 {
		return 0
	}
	return t.StatMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PercentRate.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"policer-id": t.PolicerId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate represents the /nokia-conf/configure/groups/group/service/epipe/sap/egress/qos/sap-egress/overrides/policer/percent-rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate struct {
	Cir *float64 `path:"cir" module:"nokia-conf"`
	Pir *float64 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 0.0
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 0.0
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate represents the /nokia-conf/configure/groups/group/service/epipe/sap/egress/qos/sap-egress/overrides/policer/rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate struct {
	Cir NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) GetCir() NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) GetPir() NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Policer_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue represents the /nokia-conf/configure/groups/group/service/epipe/sap/egress/qos/sap-egress/overrides/queue YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue struct {
	AdaptationRule    *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule    `path:"adaptation-rule" module:"nokia-conf"`
	AvgFrameOverhead  *float64                                                                                                   `path:"avg-frame-overhead" module:"nokia-conf"`
	BurstLimit        NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_BurstLimit_Union   `path:"burst-limit" module:"nokia-conf"`
	Cbs               NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Cbs_Union          `path:"cbs" module:"nokia-conf"`
	DropTail          *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail          `path:"drop-tail" module:"nokia-conf"`
	HsClassWeight     *int32                                                                                                     `path:"hs-class-weight" module:"nokia-conf"`
	HsWredQueue       *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue       `path:"hs-wred-queue" module:"nokia-conf"`
	HsWrrWeight       *int32                                                                                                     `path:"hs-wrr-weight" module:"nokia-conf"`
	Mbs               NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Mbs_Union          `path:"mbs" module:"nokia-conf"`
	MonitorDepth      *bool                                                                                                      `path:"monitor-depth" module:"nokia-conf"`
	MonitorQueueDepth *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth `path:"monitor-queue-depth" module:"nokia-conf" yangPresence:"true"`
	Parent            *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent            `path:"parent" module:"nokia-conf"`
	PercentRate       *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate       `path:"percent-rate" module:"nokia-conf"`
	QueueId           NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_QueueId_Union      `path:"queue-id" module:"nokia-conf"`
	Rate              *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate              `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) IsYANGGoStruct() {
}

// GetOrCreateAdaptationRule retrieves the value of the AdaptationRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetOrCreateAdaptationRule() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule {
	if t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	t.AdaptationRule = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule{}
	return t.AdaptationRule
}

// GetOrCreateDropTail retrieves the value of the DropTail field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetOrCreateDropTail() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail {
	if t.DropTail != nil {
		return t.DropTail
	}
	t.DropTail = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail{}
	return t.DropTail
}

// GetOrCreateHsWredQueue retrieves the value of the HsWredQueue field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetOrCreateHsWredQueue() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue {
	if t.HsWredQueue != nil {
		return t.HsWredQueue
	}
	t.HsWredQueue = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue{}
	return t.HsWredQueue
}

// GetOrCreateMonitorQueueDepth retrieves the value of the MonitorQueueDepth field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetOrCreateMonitorQueueDepth() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth {
	if t.MonitorQueueDepth != nil {
		return t.MonitorQueueDepth
	}
	t.MonitorQueueDepth = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth{}
	return t.MonitorQueueDepth
}

// GetOrCreateParent retrieves the value of the Parent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetOrCreateParent() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent {
	if t.Parent != nil {
		return t.Parent
	}
	t.Parent = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent{}
	return t.Parent
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetOrCreatePercentRate() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate{}
	return t.PercentRate
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetOrCreateRate() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate{}
	return t.Rate
}

// GetAdaptationRule returns the value of the AdaptationRule struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue. If the receiver or the field AdaptationRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetAdaptationRule() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule {
	if t != nil && t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	return nil
}

// GetDropTail returns the value of the DropTail struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue. If the receiver or the field DropTail is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetDropTail() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail {
	if t != nil && t.DropTail != nil {
		return t.DropTail
	}
	return nil
}

// GetHsWredQueue returns the value of the HsWredQueue struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue. If the receiver or the field HsWredQueue is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetHsWredQueue() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue {
	if t != nil && t.HsWredQueue != nil {
		return t.HsWredQueue
	}
	return nil
}

// GetMonitorQueueDepth returns the value of the MonitorQueueDepth struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue. If the receiver or the field MonitorQueueDepth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetMonitorQueueDepth() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth {
	if t != nil && t.MonitorQueueDepth != nil {
		return t.MonitorQueueDepth
	}
	return nil
}

// GetParent returns the value of the Parent struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue. If the receiver or the field Parent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetParent() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent {
	if t != nil && t.Parent != nil {
		return t.Parent
	}
	return nil
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetPercentRate() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetRate() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetAvgFrameOverhead retrieves the value of the leaf AvgFrameOverhead from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AvgFrameOverhead is set, it can
// safely use t.GetAvgFrameOverhead() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AvgFrameOverhead == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetAvgFrameOverhead() float64 {
	if t == nil || t.AvgFrameOverhead == nil {
		return 0.0
	}
	return *t.AvgFrameOverhead
}

// GetBurstLimit retrieves the value of the leaf BurstLimit from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BurstLimit is set, it can
// safely use t.GetBurstLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BurstLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetBurstLimit() NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_BurstLimit_Union {
	if t == nil || t.BurstLimit == nil {
		return nil
	}
	return t.BurstLimit
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetCbs() NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return nil
	}
	return t.Cbs
}

// GetHsClassWeight retrieves the value of the leaf HsClassWeight from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsClassWeight is set, it can
// safely use t.GetHsClassWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsClassWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetHsClassWeight() int32 {
	if t == nil || t.HsClassWeight == nil {
		return 0
	}
	return *t.HsClassWeight
}

// GetHsWrrWeight retrieves the value of the leaf HsWrrWeight from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsWrrWeight is set, it can
// safely use t.GetHsWrrWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsWrrWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetHsWrrWeight() int32 {
	if t == nil || t.HsWrrWeight == nil {
		return 1
	}
	return *t.HsWrrWeight
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetMbs() NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return nil
	}
	return t.Mbs
}

// GetMonitorDepth retrieves the value of the leaf MonitorDepth from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorDepth is set, it can
// safely use t.GetMonitorDepth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorDepth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetMonitorDepth() bool {
	if t == nil || t.MonitorDepth == nil {
		return false
	}
	return *t.MonitorDepth
}

// GetQueueId retrieves the value of the leaf QueueId from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueId is set, it can
// safely use t.GetQueueId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) GetQueueId() NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_QueueId_Union {
	if t == nil || t.QueueId == nil {
		return nil
	}
	return t.QueueId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HsWrrWeight == nil {
		var v int32 = 1
		t.HsWrrWeight = &v
	}
	if t.MonitorDepth == nil {
		var v bool = false
		t.MonitorDepth = &v
	}
	t.AdaptationRule.PopulateDefaults()
	t.DropTail.PopulateDefaults()
	t.HsWredQueue.PopulateDefaults()
	t.MonitorQueueDepth.PopulateDefaults()
	t.Parent.PopulateDefaults()
	t.PercentRate.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"queue-id": t.QueueId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule represents the /nokia-conf/configure/groups/group/service/epipe/sap/egress/qos/sap-egress/overrides/queue/adaptation-rule YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule struct {
	Cir E_NokiaTypesQos_AdaptationRuleOverride `path:"cir" module:"nokia-conf"`
	Pir E_NokiaTypesQos_AdaptationRuleOverride `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) GetCir() E_NokiaTypesQos_AdaptationRuleOverride {
	if t == nil || t.Cir == 0 {
		return 0
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) GetPir() E_NokiaTypesQos_AdaptationRuleOverride {
	if t == nil || t.Pir == 0 {
		return 0
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_AdaptationRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail represents the /nokia-conf/configure/groups/group/service/epipe/sap/egress/qos/sap-egress/overrides/queue/drop-tail YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail struct {
	Low *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low `path:"low" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) IsYANGGoStruct() {
}

// GetOrCreateLow retrieves the value of the Low field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) GetOrCreateLow() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low {
	if t.Low != nil {
		return t.Low
	}
	t.Low = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low{}
	return t.Low
}

// GetLow returns the value of the Low struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail. If the receiver or the field Low is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) GetLow() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low {
	if t != nil && t.Low != nil {
		return t.Low
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Low.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low represents the /nokia-conf/configure/groups/group/service/epipe/sap/egress/qos/sap-egress/overrides/queue/drop-tail/low YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low struct {
	PercentReductionFromMbs NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low_PercentReductionFromMbs_Union `path:"percent-reduction-from-mbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low) IsYANGGoStruct() {
}

// GetPercentReductionFromMbs retrieves the value of the leaf PercentReductionFromMbs from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentReductionFromMbs is set, it can
// safely use t.GetPercentReductionFromMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentReductionFromMbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low) GetPercentReductionFromMbs() NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low_PercentReductionFromMbs_Union {
	if t == nil || t.PercentReductionFromMbs == nil {
		return nil
	}
	return t.PercentReductionFromMbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_DropTail_Low) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue represents the /nokia-conf/configure/groups/group/service/epipe/sap/egress/qos/sap-egress/overrides/queue/hs-wred-queue YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue struct {
	Policy *string `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) IsYANGGoStruct() {
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth represents the /nokia-conf/configure/groups/group/service/epipe/sap/egress/qos/sap-egress/overrides/queue/monitor-queue-depth YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth struct {
	FastPolling        *bool    `path:"fast-polling" module:"nokia-conf"`
	ViolationThreshold *float64 `path:"violation-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) IsYANGGoStruct() {
}

// GetFastPolling retrieves the value of the leaf FastPolling from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FastPolling is set, it can
// safely use t.GetFastPolling() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FastPolling == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) GetFastPolling() bool {
	if t == nil || t.FastPolling == nil {
		return false
	}
	return *t.FastPolling
}

// GetViolationThreshold retrieves the value of the leaf ViolationThreshold from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ViolationThreshold is set, it can
// safely use t.GetViolationThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ViolationThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) GetViolationThreshold() float64 {
	if t == nil || t.ViolationThreshold == nil {
		return 0.0
	}
	return *t.ViolationThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FastPolling == nil {
		var v bool = false
		t.FastPolling = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_MonitorQueueDepth) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent represents the /nokia-conf/configure/groups/group/service/epipe/sap/egress/qos/sap-egress/overrides/queue/parent YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent struct {
	CirWeight *int32 `path:"cir-weight" module:"nokia-conf"`
	Weight    *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) IsYANGGoStruct() {
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 0
	}
	return *t.CirWeight
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Parent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate represents the /nokia-conf/configure/groups/group/service/epipe/sap/egress/qos/sap-egress/overrides/queue/percent-rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate struct {
	Cir *float64 `path:"cir" module:"nokia-conf"`
	Pir *float64 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 0.0
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 0.0
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate represents the /nokia-conf/configure/groups/group/service/epipe/sap/egress/qos/sap-egress/overrides/queue/rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate struct {
	Cir NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) GetCir() NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) GetPir() NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_Overrides_Queue_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup represents the /nokia-conf/configure/groups/group/service/epipe/sap/egress/qos/sap-egress/port-redirect-group YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup struct {
	GroupName *string `path:"group-name" module:"nokia-conf"`
	Instance  *uint32 `path:"instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup) IsYANGGoStruct() {
}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// GetInstance retrieves the value of the leaf Instance from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instance is set, it can
// safely use t.GetInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup) GetInstance() uint32 {
	if t == nil || t.Instance == nil {
		return 0
	}
	return *t.Instance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SapEgress_PortRedirectGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy represents the /nokia-conf/configure/groups/group/service/epipe/sap/egress/qos/scheduler-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy struct {
	Overrides  *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides `path:"overrides" module:"nokia-conf"`
	PolicyName *string                                                                                  `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy) IsYANGGoStruct() {
}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy) GetOrCreateOverrides() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy) GetOverrides() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides represents the /nokia-conf/configure/groups/group/service/epipe/sap/egress/qos/scheduler-policy/overrides YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides struct {
	Scheduler map[string]*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler `path:"scheduler" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides) IsYANGGoStruct() {
}

// NewScheduler creates a new entry in the Scheduler list of the
// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides) NewScheduler(SchedulerName string) (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler)
	}

	key := SchedulerName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Scheduler[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Scheduler", key)
	}

	t.Scheduler[key] = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler{
		SchedulerName: &SchedulerName,
	}

	return t.Scheduler[key], nil
}

// RenameScheduler renames an entry in the list Scheduler within
// the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides) RenameScheduler(oldK, newK string) error {
	if _, ok := t.Scheduler[newK]; ok {
		return fmt.Errorf("key %v already exists in Scheduler", newK)
	}

	e, ok := t.Scheduler[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Scheduler", oldK)
	}
	e.SchedulerName = &newK

	t.Scheduler[newK] = e
	delete(t.Scheduler, oldK)
	return nil
}

// GetOrCreateScheduler retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides) GetOrCreateScheduler(SchedulerName string) *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler {

	key := SchedulerName

	if v, ok := t.Scheduler[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewScheduler(SchedulerName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateScheduler got unexpected error: %v", err))
	}
	return v
}

// GetScheduler retrieves the value with the specified key from
// the Scheduler map field of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides) GetScheduler(SchedulerName string) *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler {

	if t == nil {
		return nil
	}

	key := SchedulerName

	if lm, ok := t.Scheduler[key]; ok {
		return lm
	}
	return nil
}

// DeleteScheduler deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides) DeleteScheduler(SchedulerName string) {
	key := SchedulerName

	delete(t.Scheduler, key)
}

// AppendScheduler appends the supplied NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler struct to the
// list Scheduler of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides) AppendScheduler(v *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) error {
	if v.SchedulerName == nil {
		return fmt.Errorf("invalid nil key received for SchedulerName")
	}

	key := *v.SchedulerName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler)
	}

	if _, ok := t.Scheduler[key]; ok {
		return fmt.Errorf("duplicate key for list Scheduler %v", key)
	}

	t.Scheduler[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Scheduler {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler represents the /nokia-conf/configure/groups/group/service/epipe/sap/egress/qos/scheduler-policy/overrides/scheduler YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler struct {
	Parent        *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent `path:"parent" module:"nokia-conf"`
	Rate          *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate   `path:"rate" module:"nokia-conf"`
	SchedulerName *string                                                                                                   `path:"scheduler-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) IsYANGGoStruct() {
}

// GetOrCreateParent retrieves the value of the Parent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) GetOrCreateParent() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent {
	if t.Parent != nil {
		return t.Parent
	}
	t.Parent = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent{}
	return t.Parent
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) GetOrCreateRate() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate{}
	return t.Rate
}

// GetParent returns the value of the Parent struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler. If the receiver or the field Parent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) GetParent() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent {
	if t != nil && t.Parent != nil {
		return t.Parent
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) GetRate() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetSchedulerName retrieves the value of the leaf SchedulerName from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SchedulerName is set, it can
// safely use t.GetSchedulerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SchedulerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) GetSchedulerName() string {
	if t == nil || t.SchedulerName == nil {
		return ""
	}
	return *t.SchedulerName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Parent.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SchedulerName == nil {
		return nil, fmt.Errorf("nil value for key SchedulerName")
	}

	return map[string]interface{}{
		"scheduler-name": *t.SchedulerName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent represents the /nokia-conf/configure/groups/group/service/epipe/sap/egress/qos/scheduler-policy/overrides/scheduler/parent YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent struct {
	CirWeight *int32 `path:"cir-weight" module:"nokia-conf"`
	Weight    *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) IsYANGGoStruct() {
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 0
	}
	return *t.CirWeight
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate represents the /nokia-conf/configure/groups/group/service/epipe/sap/egress/qos/scheduler-policy/overrides/scheduler/rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate struct {
	Cir NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) GetCir() NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) GetPir() NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_VlanQosPolicy represents the /nokia-conf/configure/groups/group/service/epipe/sap/egress/qos/vlan-qos-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_VlanQosPolicy struct {
	PolicyName   *string `path:"policy-name" module:"nokia-conf"`
	PortRedirect *bool   `path:"port-redirect" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_VlanQosPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_VlanQosPolicy) IsYANGGoStruct() {
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_VlanQosPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_VlanQosPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// GetPortRedirect retrieves the value of the leaf PortRedirect from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_VlanQosPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortRedirect is set, it can
// safely use t.GetPortRedirect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortRedirect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_VlanQosPolicy) GetPortRedirect() bool {
	if t == nil || t.PortRedirect == nil {
		return false
	}
	return *t.PortRedirect
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_VlanQosPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_VlanQosPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PortRedirect == nil {
		var v bool = false
		t.PortRedirect = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_VlanQosPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_VlanQosPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_VlanQosPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_VlanQosPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_VlanQosPolicy.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_Qos_VlanQosPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_VlanManipulation represents the /nokia-conf/configure/groups/group/service/epipe/sap/egress/vlan-manipulation YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_VlanManipulation struct {
	Action E_NokiaTypesServices_VlanManipulationEgressActionType `path:"action" module:"nokia-conf"`
	Tag    E_NokiaTypesServices_VlanManipulationEgressVlanType   `path:"tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_VlanManipulation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_VlanManipulation) IsYANGGoStruct() {}

// GetAction retrieves the value of the leaf Action from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_VlanManipulation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Action is set, it can
// safely use t.GetAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Action == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_VlanManipulation) GetAction() E_NokiaTypesServices_VlanManipulationEgressActionType {
	if t == nil || t.Action == 0 {
		return 0
	}
	return t.Action
}

// GetTag retrieves the value of the leaf Tag from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_VlanManipulation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tag is set, it can
// safely use t.GetTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_VlanManipulation) GetTag() E_NokiaTypesServices_VlanManipulationEgressVlanType {
	if t == nil || t.Tag == 0 {
		return NokiaTypesServices_VlanManipulationEgressVlanType_null
	}
	return t.Tag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_VlanManipulation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_VlanManipulation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Tag == 0 {
		t.Tag = NokiaTypesServices_VlanManipulationEgressVlanType_null
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_VlanManipulation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_VlanManipulation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_VlanManipulation) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_VlanManipulation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_VlanManipulation.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Egress_VlanManipulation) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm represents the /nokia-conf/configure/groups/group/service/epipe/sap/eth-cfm YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm struct {
	Ais                      *bool                                                                                                                                              `path:"ais" module:"nokia-conf"`
	CollectLmmFcStats        *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_CollectLmmFcStats                                                                       `path:"collect-lmm-fc-stats" module:"nokia-conf"`
	CollectLmmStats          *bool                                                                                                                                              `path:"collect-lmm-stats" module:"nokia-conf"`
	Mep                      map[NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Key]*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep               `path:"mep" module:"nokia-conf"`
	Mip                      map[NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mip_PrimaryVlan_Union]*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mip `path:"mip" module:"nokia-conf"`
	SquelchIngressCtagLevels []uint32                                                                                                                                           `path:"squelch-ingress-ctag-levels" module:"nokia-conf"`
	SquelchIngressLevels     []uint32                                                                                                                                           `path:"squelch-ingress-levels" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm) IsYANGGoStruct() {}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Key represents the key for list Mep of element /nokia-conf/configure/groups/group/service/epipe/sap/eth-cfm.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Key struct {
	MdAdminName string                                                                    `path:"md-admin-name"`
	MaAdminName string                                                                    `path:"ma-admin-name"`
	MepId       NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_MepId_Union `path:"mep-id"`
}

// NewMep creates a new entry in the Mep list of the
// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm) NewMep(MdAdminName string, MaAdminName string, MepId NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_MepId_Union) (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mep == nil {
		t.Mep = make(map[NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Key]*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep)
	}

	key := NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mep[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mep", key)
	}

	t.Mep[key] = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep{
		MdAdminName: &MdAdminName,
		MaAdminName: &MaAdminName,
		MepId:       MepId,
	}

	return t.Mep[key], nil
}

// RenameMep renames an entry in the list Mep within
// the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm) RenameMep(oldK, newK NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Key) error {
	if _, ok := t.Mep[newK]; ok {
		return fmt.Errorf("key %v already exists in Mep", newK)
	}

	e, ok := t.Mep[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mep", oldK)
	}
	e.MdAdminName = &newK.MdAdminName
	e.MaAdminName = &newK.MaAdminName
	e.MepId = newK.MepId

	t.Mep[newK] = e
	delete(t.Mep, oldK)
	return nil
}

// GetOrCreateMep retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm) GetOrCreateMep(MdAdminName string, MaAdminName string, MepId NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_MepId_Union) *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep {

	key := NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	if v, ok := t.Mep[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMep(MdAdminName, MaAdminName, MepId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMep got unexpected error: %v", err))
	}
	return v
}

// GetMep retrieves the value with the specified key from
// the Mep map field of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm) GetMep(MdAdminName string, MaAdminName string, MepId NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_MepId_Union) *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	if lm, ok := t.Mep[key]; ok {
		return lm
	}
	return nil
}

// DeleteMep deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm) DeleteMep(MdAdminName string, MaAdminName string, MepId NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_MepId_Union) {
	key := NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	delete(t.Mep, key)
}

// AppendMep appends the supplied NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep struct to the
// list Mep of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm) AppendMep(v *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep) error {
	if v.MdAdminName == nil {
		return fmt.Errorf("invalid nil key for MdAdminName")
	}

	if v.MaAdminName == nil {
		return fmt.Errorf("invalid nil key for MaAdminName")
	}

	key := NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Key{
		MdAdminName: *v.MdAdminName,
		MaAdminName: *v.MaAdminName,
		MepId:       v.MepId,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mep == nil {
		t.Mep = make(map[NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Key]*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep)
	}

	if _, ok := t.Mep[key]; ok {
		return fmt.Errorf("duplicate key for list Mep %v", key)
	}

	t.Mep[key] = v
	return nil
}

// NewMip creates a new entry in the Mip list of the
// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm) NewMip(PrimaryVlan NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mip_PrimaryVlan_Union) (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mip, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mip == nil {
		t.Mip = make(map[NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mip_PrimaryVlan_Union]*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mip)
	}

	key := PrimaryVlan

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mip[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mip", key)
	}

	t.Mip[key] = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mip{
		PrimaryVlan: PrimaryVlan,
	}

	return t.Mip[key], nil
}

// RenameMip renames an entry in the list Mip within
// the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm) RenameMip(oldK, newK NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mip_PrimaryVlan_Union) error {
	if _, ok := t.Mip[newK]; ok {
		return fmt.Errorf("key %v already exists in Mip", newK)
	}

	e, ok := t.Mip[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mip", oldK)
	}
	e.PrimaryVlan = newK

	t.Mip[newK] = e
	delete(t.Mip, oldK)
	return nil
}

// GetOrCreateMip retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm) GetOrCreateMip(PrimaryVlan NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mip_PrimaryVlan_Union) *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mip {

	key := PrimaryVlan

	if v, ok := t.Mip[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMip(PrimaryVlan)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMip got unexpected error: %v", err))
	}
	return v
}

// GetMip retrieves the value with the specified key from
// the Mip map field of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm) GetMip(PrimaryVlan NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mip_PrimaryVlan_Union) *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mip {

	if t == nil {
		return nil
	}

	key := PrimaryVlan

	if lm, ok := t.Mip[key]; ok {
		return lm
	}
	return nil
}

// DeleteMip deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm) DeleteMip(PrimaryVlan NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mip_PrimaryVlan_Union) {
	key := PrimaryVlan

	delete(t.Mip, key)
}

// AppendMip appends the supplied NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mip struct to the
// list Mip of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mip already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm) AppendMip(v *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mip) error {
	key := v.PrimaryVlan

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mip == nil {
		t.Mip = make(map[NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mip_PrimaryVlan_Union]*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mip)
	}

	if _, ok := t.Mip[key]; ok {
		return fmt.Errorf("duplicate key for list Mip %v", key)
	}

	t.Mip[key] = v
	return nil
}

// GetOrCreateCollectLmmFcStats retrieves the value of the CollectLmmFcStats field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm) GetOrCreateCollectLmmFcStats() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_CollectLmmFcStats {
	if t.CollectLmmFcStats != nil {
		return t.CollectLmmFcStats
	}
	t.CollectLmmFcStats = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_CollectLmmFcStats{}
	return t.CollectLmmFcStats
}

// GetCollectLmmFcStats returns the value of the CollectLmmFcStats struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm. If the receiver or the field CollectLmmFcStats is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm) GetCollectLmmFcStats() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_CollectLmmFcStats {
	if t != nil && t.CollectLmmFcStats != nil {
		return t.CollectLmmFcStats
	}
	return nil
}

// GetAis retrieves the value of the leaf Ais from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ais is set, it can
// safely use t.GetAis() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ais == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm) GetAis() bool {
	if t == nil || t.Ais == nil {
		return false
	}
	return *t.Ais
}

// GetCollectLmmStats retrieves the value of the leaf CollectLmmStats from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectLmmStats is set, it can
// safely use t.GetCollectLmmStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectLmmStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm) GetCollectLmmStats() bool {
	if t == nil || t.CollectLmmStats == nil {
		return false
	}
	return *t.CollectLmmStats
}

// GetSquelchIngressCtagLevels retrieves the value of the leaf SquelchIngressCtagLevels from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SquelchIngressCtagLevels is set, it can
// safely use t.GetSquelchIngressCtagLevels() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SquelchIngressCtagLevels == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm) GetSquelchIngressCtagLevels() []uint32 {
	if t == nil || t.SquelchIngressCtagLevels == nil {
		return nil
	}
	return t.SquelchIngressCtagLevels
}

// GetSquelchIngressLevels retrieves the value of the leaf SquelchIngressLevels from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SquelchIngressLevels is set, it can
// safely use t.GetSquelchIngressLevels() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SquelchIngressLevels == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm) GetSquelchIngressLevels() []uint32 {
	if t == nil || t.SquelchIngressLevels == nil {
		return nil
	}
	return t.SquelchIngressLevels
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ais == nil {
		var v bool = false
		t.Ais = &v
	}
	if t.CollectLmmStats == nil {
		var v bool = false
		t.CollectLmmStats = &v
	}
	t.CollectLmmFcStats.PopulateDefaults()
	for _, e := range t.Mep {
		e.PopulateDefaults()
	}
	for _, e := range t.Mip {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_CollectLmmFcStats represents the /nokia-conf/configure/groups/group/service/epipe/sap/eth-cfm/collect-lmm-fc-stats YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_CollectLmmFcStats struct {
	Fc          []E_NokiaTypesEthCfm_FcType `path:"fc" module:"nokia-conf"`
	FcInProfile []E_NokiaTypesEthCfm_FcType `path:"fc-in-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_CollectLmmFcStats implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_CollectLmmFcStats) IsYANGGoStruct() {
}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_CollectLmmFcStats
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_CollectLmmFcStats) GetFc() []E_NokiaTypesEthCfm_FcType {
	if t == nil || t.Fc == nil {
		return nil
	}
	return t.Fc
}

// GetFcInProfile retrieves the value of the leaf FcInProfile from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_CollectLmmFcStats
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FcInProfile is set, it can
// safely use t.GetFcInProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FcInProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_CollectLmmFcStats) GetFcInProfile() []E_NokiaTypesEthCfm_FcType {
	if t == nil || t.FcInProfile == nil {
		return nil
	}
	return t.FcInProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_CollectLmmFcStats
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_CollectLmmFcStats) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_CollectLmmFcStats) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_CollectLmmFcStats"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_CollectLmmFcStats) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_CollectLmmFcStats) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_CollectLmmFcStats.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_CollectLmmFcStats) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep represents the /nokia-conf/configure/groups/group/service/epipe/sap/eth-cfm/mep YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep struct {
	AdminState           E_NokiaTypesSros_AdminState                                                      `path:"admin-state" module:"nokia-conf"`
	Ais                  *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Ais               `path:"ais" module:"nokia-conf" yangPresence:"true"`
	AlarmNotification    *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_AlarmNotification `path:"alarm-notification" module:"nokia-conf"`
	Ccm                  *bool                                                                            `path:"ccm" module:"nokia-conf"`
	CcmLtmPriority       *uint8                                                                           `path:"ccm-ltm-priority" module:"nokia-conf"`
	CcmPaddingSize       *uint32                                                                          `path:"ccm-padding-size" module:"nokia-conf"`
	CfmVlanTag           *string                                                                          `path:"cfm-vlan-tag" module:"nokia-conf"`
	Csf                  *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Csf               `path:"csf" module:"nokia-conf" yangPresence:"true"`
	Description          *string                                                                          `path:"description" module:"nokia-conf"`
	Direction            E_NokiaTypesEthCfm_MpDirection                                                   `path:"direction" module:"nokia-conf"`
	EthTest              *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_EthTest           `path:"eth-test" module:"nokia-conf" yangPresence:"true"`
	FaultPropagation     E_NokiaTypesEthCfm_FaultPropagationType                                          `path:"fault-propagation" module:"nokia-conf"`
	Grace                *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Grace             `path:"grace" module:"nokia-conf"`
	InstallMep           *bool                                                                            `path:"install-mep" module:"nokia-conf"`
	LbmSvcActResponder   *bool                                                                            `path:"lbm-svc-act-responder" module:"nokia-conf"`
	LowPriorityDefect    E_NokiaTypesEthCfm_LowestAlarmPriority                                           `path:"low-priority-defect" module:"nokia-conf"`
	MaAdminName          *string                                                                          `path:"ma-admin-name" module:"nokia-conf"`
	MacAddress           *string                                                                          `path:"mac-address" module:"nokia-conf"`
	MdAdminName          *string                                                                          `path:"md-admin-name" module:"nokia-conf"`
	MepId                NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_MepId_Union        `path:"mep-id" module:"nokia-conf"`
	OneWayDelayThreshold *uint32                                                                          `path:"one-way-delay-threshold" module:"nokia-conf"`
	PrimaryVlan          *bool                                                                            `path:"primary-vlan" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep) IsYANGGoStruct() {}

// GetOrCreateAis retrieves the value of the Ais field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep) GetOrCreateAis() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Ais {
	if t.Ais != nil {
		return t.Ais
	}
	t.Ais = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Ais{}
	return t.Ais
}

// GetOrCreateAlarmNotification retrieves the value of the AlarmNotification field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep) GetOrCreateAlarmNotification() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_AlarmNotification {
	if t.AlarmNotification != nil {
		return t.AlarmNotification
	}
	t.AlarmNotification = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_AlarmNotification{}
	return t.AlarmNotification
}

// GetOrCreateCsf retrieves the value of the Csf field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep) GetOrCreateCsf() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Csf {
	if t.Csf != nil {
		return t.Csf
	}
	t.Csf = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Csf{}
	return t.Csf
}

// GetOrCreateEthTest retrieves the value of the EthTest field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep) GetOrCreateEthTest() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_EthTest {
	if t.EthTest != nil {
		return t.EthTest
	}
	t.EthTest = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_EthTest{}
	return t.EthTest
}

// GetOrCreateGrace retrieves the value of the Grace field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep) GetOrCreateGrace() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Grace {
	if t.Grace != nil {
		return t.Grace
	}
	t.Grace = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Grace{}
	return t.Grace
}

// GetAis returns the value of the Ais struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep. If the receiver or the field Ais is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep) GetAis() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Ais {
	if t != nil && t.Ais != nil {
		return t.Ais
	}
	return nil
}

// GetAlarmNotification returns the value of the AlarmNotification struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep. If the receiver or the field AlarmNotification is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep) GetAlarmNotification() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_AlarmNotification {
	if t != nil && t.AlarmNotification != nil {
		return t.AlarmNotification
	}
	return nil
}

// GetCsf returns the value of the Csf struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep. If the receiver or the field Csf is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep) GetCsf() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Csf {
	if t != nil && t.Csf != nil {
		return t.Csf
	}
	return nil
}

// GetEthTest returns the value of the EthTest struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep. If the receiver or the field EthTest is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep) GetEthTest() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_EthTest {
	if t != nil && t.EthTest != nil {
		return t.EthTest
	}
	return nil
}

// GetGrace returns the value of the Grace struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep. If the receiver or the field Grace is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep) GetGrace() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Grace {
	if t != nil && t.Grace != nil {
		return t.Grace
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetCcm retrieves the value of the leaf Ccm from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ccm is set, it can
// safely use t.GetCcm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ccm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep) GetCcm() bool {
	if t == nil || t.Ccm == nil {
		return false
	}
	return *t.Ccm
}

// GetCcmLtmPriority retrieves the value of the leaf CcmLtmPriority from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CcmLtmPriority is set, it can
// safely use t.GetCcmLtmPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CcmLtmPriority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep) GetCcmLtmPriority() uint8 {
	if t == nil || t.CcmLtmPriority == nil {
		return 7
	}
	return *t.CcmLtmPriority
}

// GetCcmPaddingSize retrieves the value of the leaf CcmPaddingSize from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CcmPaddingSize is set, it can
// safely use t.GetCcmPaddingSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CcmPaddingSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep) GetCcmPaddingSize() uint32 {
	if t == nil || t.CcmPaddingSize == nil {
		return 0
	}
	return *t.CcmPaddingSize
}

// GetCfmVlanTag retrieves the value of the leaf CfmVlanTag from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CfmVlanTag is set, it can
// safely use t.GetCfmVlanTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CfmVlanTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep) GetCfmVlanTag() string {
	if t == nil || t.CfmVlanTag == nil {
		return ""
	}
	return *t.CfmVlanTag
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep) GetDirection() E_NokiaTypesEthCfm_MpDirection {
	if t == nil || t.Direction == 0 {
		return NokiaTypesEthCfm_MpDirection_down
	}
	return t.Direction
}

// GetFaultPropagation retrieves the value of the leaf FaultPropagation from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FaultPropagation is set, it can
// safely use t.GetFaultPropagation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FaultPropagation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep) GetFaultPropagation() E_NokiaTypesEthCfm_FaultPropagationType {
	if t == nil || t.FaultPropagation == 0 {
		return 0
	}
	return t.FaultPropagation
}

// GetInstallMep retrieves the value of the leaf InstallMep from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InstallMep is set, it can
// safely use t.GetInstallMep() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InstallMep == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep) GetInstallMep() bool {
	if t == nil || t.InstallMep == nil {
		return false
	}
	return *t.InstallMep
}

// GetLbmSvcActResponder retrieves the value of the leaf LbmSvcActResponder from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LbmSvcActResponder is set, it can
// safely use t.GetLbmSvcActResponder() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LbmSvcActResponder == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep) GetLbmSvcActResponder() bool {
	if t == nil || t.LbmSvcActResponder == nil {
		return false
	}
	return *t.LbmSvcActResponder
}

// GetLowPriorityDefect retrieves the value of the leaf LowPriorityDefect from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowPriorityDefect is set, it can
// safely use t.GetLowPriorityDefect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowPriorityDefect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep) GetLowPriorityDefect() E_NokiaTypesEthCfm_LowestAlarmPriority {
	if t == nil || t.LowPriorityDefect == 0 {
		return NokiaTypesEthCfm_LowestAlarmPriority_mac_rem_err_xcon
	}
	return t.LowPriorityDefect
}

// GetMaAdminName retrieves the value of the leaf MaAdminName from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaAdminName is set, it can
// safely use t.GetMaAdminName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaAdminName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep) GetMaAdminName() string {
	if t == nil || t.MaAdminName == nil {
		return ""
	}
	return *t.MaAdminName
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return ""
	}
	return *t.MacAddress
}

// GetMdAdminName retrieves the value of the leaf MdAdminName from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MdAdminName is set, it can
// safely use t.GetMdAdminName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MdAdminName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep) GetMdAdminName() string {
	if t == nil || t.MdAdminName == nil {
		return ""
	}
	return *t.MdAdminName
}

// GetMepId retrieves the value of the leaf MepId from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MepId is set, it can
// safely use t.GetMepId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MepId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep) GetMepId() NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_MepId_Union {
	if t == nil || t.MepId == nil {
		return nil
	}
	return t.MepId
}

// GetOneWayDelayThreshold retrieves the value of the leaf OneWayDelayThreshold from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OneWayDelayThreshold is set, it can
// safely use t.GetOneWayDelayThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OneWayDelayThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep) GetOneWayDelayThreshold() uint32 {
	if t == nil || t.OneWayDelayThreshold == nil {
		return 3
	}
	return *t.OneWayDelayThreshold
}

// GetPrimaryVlan retrieves the value of the leaf PrimaryVlan from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrimaryVlan is set, it can
// safely use t.GetPrimaryVlan() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrimaryVlan == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep) GetPrimaryVlan() bool {
	if t == nil || t.PrimaryVlan == nil {
		return false
	}
	return *t.PrimaryVlan
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Ccm == nil {
		var v bool = false
		t.Ccm = &v
	}
	if t.CcmLtmPriority == nil {
		var v uint8 = 7
		t.CcmLtmPriority = &v
	}
	if t.Direction == 0 {
		t.Direction = NokiaTypesEthCfm_MpDirection_down
	}
	if t.InstallMep == nil {
		var v bool = false
		t.InstallMep = &v
	}
	if t.LowPriorityDefect == 0 {
		t.LowPriorityDefect = NokiaTypesEthCfm_LowestAlarmPriority_mac_rem_err_xcon
	}
	if t.OneWayDelayThreshold == nil {
		var v uint32 = 3
		t.OneWayDelayThreshold = &v
	}
	if t.PrimaryVlan == nil {
		var v bool = false
		t.PrimaryVlan = &v
	}
	t.Ais.PopulateDefaults()
	t.AlarmNotification.PopulateDefaults()
	t.Csf.PopulateDefaults()
	t.EthTest.PopulateDefaults()
	t.Grace.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MaAdminName == nil {
		return nil, fmt.Errorf("nil value for key MaAdminName")
	}

	if t.MdAdminName == nil {
		return nil, fmt.Errorf("nil value for key MdAdminName")
	}

	return map[string]interface{}{
		"ma-admin-name": *t.MaAdminName,
		"md-admin-name": *t.MdAdminName,
		"mep-id":        t.MepId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Ais represents the /nokia-conf/configure/groups/group/service/epipe/sap/eth-cfm/mep/ais YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Ais struct {
	ClientMegLevel    []uint32                                                                              `path:"client-meg-level" module:"nokia-conf"`
	InterfaceSupport  *bool                                                                                 `path:"interface-support" module:"nokia-conf"`
	Interval          *uint32                                                                               `path:"interval" module:"nokia-conf"`
	LowPriorityDefect E_NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Ais_LowPriorityDefect `path:"low-priority-defect" module:"nokia-conf"`
	Priority          *uint8                                                                                `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Ais implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Ais) IsYANGGoStruct() {}

// GetClientMegLevel retrieves the value of the leaf ClientMegLevel from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Ais
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClientMegLevel is set, it can
// safely use t.GetClientMegLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClientMegLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Ais) GetClientMegLevel() []uint32 {
	if t == nil || t.ClientMegLevel == nil {
		return nil
	}
	return t.ClientMegLevel
}

// GetInterfaceSupport retrieves the value of the leaf InterfaceSupport from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Ais
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceSupport is set, it can
// safely use t.GetInterfaceSupport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceSupport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Ais) GetInterfaceSupport() bool {
	if t == nil || t.InterfaceSupport == nil {
		return false
	}
	return *t.InterfaceSupport
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Ais
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Ais) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 1
	}
	return *t.Interval
}

// GetLowPriorityDefect retrieves the value of the leaf LowPriorityDefect from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Ais
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowPriorityDefect is set, it can
// safely use t.GetLowPriorityDefect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowPriorityDefect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Ais) GetLowPriorityDefect() E_NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Ais_LowPriorityDefect {
	if t == nil || t.LowPriorityDefect == 0 {
		return NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Ais_LowPriorityDefect_all_def
	}
	return t.LowPriorityDefect
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Ais
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Ais) GetPriority() uint8 {
	if t == nil || t.Priority == nil {
		return 7
	}
	return *t.Priority
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Ais
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Ais) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InterfaceSupport == nil {
		var v bool = false
		t.InterfaceSupport = &v
	}
	if t.Interval == nil {
		var v uint32 = 1
		t.Interval = &v
	}
	if t.LowPriorityDefect == 0 {
		t.LowPriorityDefect = NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Ais_LowPriorityDefect_all_def
	}
	if t.Priority == nil {
		var v uint8 = 7
		t.Priority = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Ais) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Ais"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Ais) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Ais) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Ais.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Ais) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_AlarmNotification represents the /nokia-conf/configure/groups/group/service/epipe/sap/eth-cfm/mep/alarm-notification YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_AlarmNotification struct {
	FngAlarmTime *int32 `path:"fng-alarm-time" module:"nokia-conf"`
	FngResetTime *int32 `path:"fng-reset-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_AlarmNotification implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_AlarmNotification) IsYANGGoStruct() {
}

// GetFngAlarmTime retrieves the value of the leaf FngAlarmTime from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_AlarmNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FngAlarmTime is set, it can
// safely use t.GetFngAlarmTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FngAlarmTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_AlarmNotification) GetFngAlarmTime() int32 {
	if t == nil || t.FngAlarmTime == nil {
		return 0
	}
	return *t.FngAlarmTime
}

// GetFngResetTime retrieves the value of the leaf FngResetTime from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_AlarmNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FngResetTime is set, it can
// safely use t.GetFngResetTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FngResetTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_AlarmNotification) GetFngResetTime() int32 {
	if t == nil || t.FngResetTime == nil {
		return 0
	}
	return *t.FngResetTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_AlarmNotification
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_AlarmNotification) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_AlarmNotification) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_AlarmNotification"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_AlarmNotification) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_AlarmNotification) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_AlarmNotification.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_AlarmNotification) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Csf represents the /nokia-conf/configure/groups/group/service/epipe/sap/eth-cfm/mep/csf YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Csf struct {
	Multiplier *float64 `path:"multiplier" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Csf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Csf) IsYANGGoStruct() {}

// GetMultiplier retrieves the value of the leaf Multiplier from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Csf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multiplier is set, it can
// safely use t.GetMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Csf) GetMultiplier() float64 {
	if t == nil || t.Multiplier == nil {
		return 3.5
	}
	return *t.Multiplier
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Csf
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Csf) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Multiplier == nil {
		var v float64 = 3.5
		t.Multiplier = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Csf) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Csf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Csf) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Csf) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Csf.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Csf) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_EthTest represents the /nokia-conf/configure/groups/group/service/epipe/sap/eth-cfm/mep/eth-test YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_EthTest struct {
	BitErrorThreshold *uint32                                                                            `path:"bit-error-threshold" module:"nokia-conf"`
	TestPattern       *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_EthTest_TestPattern `path:"test-pattern" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_EthTest implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_EthTest) IsYANGGoStruct() {}

// GetOrCreateTestPattern retrieves the value of the TestPattern field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_EthTest) GetOrCreateTestPattern() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_EthTest_TestPattern {
	if t.TestPattern != nil {
		return t.TestPattern
	}
	t.TestPattern = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_EthTest_TestPattern{}
	return t.TestPattern
}

// GetTestPattern returns the value of the TestPattern struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_EthTest. If the receiver or the field TestPattern is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_EthTest) GetTestPattern() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_EthTest_TestPattern {
	if t != nil && t.TestPattern != nil {
		return t.TestPattern
	}
	return nil
}

// GetBitErrorThreshold retrieves the value of the leaf BitErrorThreshold from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_EthTest
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BitErrorThreshold is set, it can
// safely use t.GetBitErrorThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BitErrorThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_EthTest) GetBitErrorThreshold() uint32 {
	if t == nil || t.BitErrorThreshold == nil {
		return 1
	}
	return *t.BitErrorThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_EthTest
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_EthTest) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BitErrorThreshold == nil {
		var v uint32 = 1
		t.BitErrorThreshold = &v
	}
	t.TestPattern.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_EthTest) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_EthTest"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_EthTest) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_EthTest) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_EthTest.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_EthTest) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_EthTest_TestPattern represents the /nokia-conf/configure/groups/group/service/epipe/sap/eth-cfm/mep/eth-test/test-pattern YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_EthTest_TestPattern struct {
	CrcTlv  *bool                                                                                       `path:"crc-tlv" module:"nokia-conf"`
	Pattern E_NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_EthTest_TestPattern_Pattern `path:"pattern" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_EthTest_TestPattern implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_EthTest_TestPattern) IsYANGGoStruct() {
}

// GetCrcTlv retrieves the value of the leaf CrcTlv from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_EthTest_TestPattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CrcTlv is set, it can
// safely use t.GetCrcTlv() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CrcTlv == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_EthTest_TestPattern) GetCrcTlv() bool {
	if t == nil || t.CrcTlv == nil {
		return false
	}
	return *t.CrcTlv
}

// GetPattern retrieves the value of the leaf Pattern from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_EthTest_TestPattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pattern is set, it can
// safely use t.GetPattern() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pattern == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_EthTest_TestPattern) GetPattern() E_NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_EthTest_TestPattern_Pattern {
	if t == nil || t.Pattern == 0 {
		return NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_EthTest_TestPattern_Pattern_all_zeros
	}
	return t.Pattern
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_EthTest_TestPattern
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_EthTest_TestPattern) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CrcTlv == nil {
		var v bool = false
		t.CrcTlv = &v
	}
	if t.Pattern == 0 {
		t.Pattern = NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_EthTest_TestPattern_Pattern_all_zeros
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_EthTest_TestPattern) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_EthTest_TestPattern"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_EthTest_TestPattern) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_EthTest_TestPattern) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_EthTest_TestPattern.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_EthTest_TestPattern) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Grace represents the /nokia-conf/configure/groups/group/service/epipe/sap/eth-cfm/mep/grace YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Grace struct {
	EthEd       *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Grace_EthEd       `path:"eth-ed" module:"nokia-conf"`
	EthVsmGrace *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Grace_EthVsmGrace `path:"eth-vsm-grace" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Grace implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Grace) IsYANGGoStruct() {}

// GetOrCreateEthEd retrieves the value of the EthEd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Grace) GetOrCreateEthEd() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Grace_EthEd {
	if t.EthEd != nil {
		return t.EthEd
	}
	t.EthEd = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Grace_EthEd{}
	return t.EthEd
}

// GetOrCreateEthVsmGrace retrieves the value of the EthVsmGrace field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Grace) GetOrCreateEthVsmGrace() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Grace_EthVsmGrace {
	if t.EthVsmGrace != nil {
		return t.EthVsmGrace
	}
	t.EthVsmGrace = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Grace_EthVsmGrace{}
	return t.EthVsmGrace
}

// GetEthEd returns the value of the EthEd struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Grace. If the receiver or the field EthEd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Grace) GetEthEd() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Grace_EthEd {
	if t != nil && t.EthEd != nil {
		return t.EthEd
	}
	return nil
}

// GetEthVsmGrace returns the value of the EthVsmGrace struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Grace. If the receiver or the field EthVsmGrace is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Grace) GetEthVsmGrace() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Grace_EthVsmGrace {
	if t != nil && t.EthVsmGrace != nil {
		return t.EthVsmGrace
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Grace
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Grace) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.EthEd.PopulateDefaults()
	t.EthVsmGrace.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Grace) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Grace"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Grace) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Grace) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Grace.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Grace) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Grace_EthEd represents the /nokia-conf/configure/groups/group/service/epipe/sap/eth-cfm/mep/grace/eth-ed YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Grace_EthEd struct {
	MaxRxDefectWindow *uint32 `path:"max-rx-defect-window" module:"nokia-conf"`
	Priority          *int32  `path:"priority" module:"nokia-conf"`
	RxEthEd           *bool   `path:"rx-eth-ed" module:"nokia-conf"`
	TxEthEd           *bool   `path:"tx-eth-ed" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Grace_EthEd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Grace_EthEd) IsYANGGoStruct() {}

// GetMaxRxDefectWindow retrieves the value of the leaf MaxRxDefectWindow from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRxDefectWindow is set, it can
// safely use t.GetMaxRxDefectWindow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRxDefectWindow == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Grace_EthEd) GetMaxRxDefectWindow() uint32 {
	if t == nil || t.MaxRxDefectWindow == nil {
		return 0
	}
	return *t.MaxRxDefectWindow
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Grace_EthEd) GetPriority() int32 {
	if t == nil || t.Priority == nil {
		return 0
	}
	return *t.Priority
}

// GetRxEthEd retrieves the value of the leaf RxEthEd from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RxEthEd is set, it can
// safely use t.GetRxEthEd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RxEthEd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Grace_EthEd) GetRxEthEd() bool {
	if t == nil || t.RxEthEd == nil {
		return true
	}
	return *t.RxEthEd
}

// GetTxEthEd retrieves the value of the leaf TxEthEd from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxEthEd is set, it can
// safely use t.GetTxEthEd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxEthEd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Grace_EthEd) GetTxEthEd() bool {
	if t == nil || t.TxEthEd == nil {
		return false
	}
	return *t.TxEthEd
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Grace_EthEd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Grace_EthEd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RxEthEd == nil {
		var v bool = true
		t.RxEthEd = &v
	}
	if t.TxEthEd == nil {
		var v bool = false
		t.TxEthEd = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Grace_EthEd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Grace_EthEd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Grace_EthEd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Grace_EthEd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Grace_EthEd.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Grace_EthEd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Grace_EthVsmGrace represents the /nokia-conf/configure/groups/group/service/epipe/sap/eth-cfm/mep/grace/eth-vsm-grace YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Grace_EthVsmGrace struct {
	RxEthVsmGrace *bool `path:"rx-eth-vsm-grace" module:"nokia-conf"`
	TxEthVsmGrace *bool `path:"tx-eth-vsm-grace" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Grace_EthVsmGrace implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Grace_EthVsmGrace) IsYANGGoStruct() {
}

// GetRxEthVsmGrace retrieves the value of the leaf RxEthVsmGrace from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Grace_EthVsmGrace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RxEthVsmGrace is set, it can
// safely use t.GetRxEthVsmGrace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RxEthVsmGrace == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Grace_EthVsmGrace) GetRxEthVsmGrace() bool {
	if t == nil || t.RxEthVsmGrace == nil {
		return true
	}
	return *t.RxEthVsmGrace
}

// GetTxEthVsmGrace retrieves the value of the leaf TxEthVsmGrace from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Grace_EthVsmGrace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxEthVsmGrace is set, it can
// safely use t.GetTxEthVsmGrace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxEthVsmGrace == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Grace_EthVsmGrace) GetTxEthVsmGrace() bool {
	if t == nil || t.TxEthVsmGrace == nil {
		return true
	}
	return *t.TxEthVsmGrace
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Grace_EthVsmGrace
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Grace_EthVsmGrace) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RxEthVsmGrace == nil {
		var v bool = true
		t.RxEthVsmGrace = &v
	}
	if t.TxEthVsmGrace == nil {
		var v bool = true
		t.TxEthVsmGrace = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Grace_EthVsmGrace) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Grace_EthVsmGrace"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Grace_EthVsmGrace) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Grace_EthVsmGrace) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Grace_EthVsmGrace.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mep_Grace_EthVsmGrace) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mip represents the /nokia-conf/configure/groups/group/service/epipe/sap/eth-cfm/mip YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mip struct {
	CfmVlanTag  *string                                                                         `path:"cfm-vlan-tag" module:"nokia-conf"`
	MacAddress  *string                                                                         `path:"mac-address" module:"nokia-conf"`
	PrimaryVlan NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mip_PrimaryVlan_Union `path:"primary-vlan" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mip implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mip) IsYANGGoStruct() {}

// GetCfmVlanTag retrieves the value of the leaf CfmVlanTag from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CfmVlanTag is set, it can
// safely use t.GetCfmVlanTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CfmVlanTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mip) GetCfmVlanTag() string {
	if t == nil || t.CfmVlanTag == nil {
		return ""
	}
	return *t.CfmVlanTag
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mip) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return ""
	}
	return *t.MacAddress
}

// GetPrimaryVlan retrieves the value of the leaf PrimaryVlan from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrimaryVlan is set, it can
// safely use t.GetPrimaryVlan() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrimaryVlan == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mip) GetPrimaryVlan() NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mip_PrimaryVlan_Union {
	if t == nil || t.PrimaryVlan == nil {
		return nil
	}
	return t.PrimaryVlan
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mip
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mip) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mip struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mip) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"primary-vlan": t.PrimaryVlan,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mip) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mip"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mip) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mip) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mip.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_EthCfm_Mip) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ethernet represents the /nokia-conf/configure/groups/group/service/epipe/sap/ethernet YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ethernet struct {
	Llf *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ethernet_Llf `path:"llf" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ethernet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ethernet) IsYANGGoStruct() {}

// GetOrCreateLlf retrieves the value of the Llf field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ethernet) GetOrCreateLlf() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ethernet_Llf {
	if t.Llf != nil {
		return t.Llf
	}
	t.Llf = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ethernet_Llf{}
	return t.Llf
}

// GetLlf returns the value of the Llf struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ethernet. If the receiver or the field Llf is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ethernet) GetLlf() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ethernet_Llf {
	if t != nil && t.Llf != nil {
		return t.Llf
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ethernet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ethernet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Llf.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ethernet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ethernet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ethernet) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ethernet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ethernet.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ethernet) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ethernet_Llf represents the /nokia-conf/configure/groups/group/service/epipe/sap/ethernet/llf YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ethernet_Llf struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ethernet_Llf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ethernet_Llf) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ethernet_Llf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ethernet_Llf) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ethernet_Llf
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ethernet_Llf) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ethernet_Llf) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ethernet_Llf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ethernet_Llf) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ethernet_Llf) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ethernet_Llf.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ethernet_Llf) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress represents the /nokia-conf/configure/groups/group/service/epipe/sap/ingress YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress struct {
	AggregatePolicer *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_AggregatePolicer `path:"aggregate-policer" module:"nokia-conf"`
	Filter           *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Filter           `path:"filter" module:"nokia-conf"`
	Qos              *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos              `path:"qos" module:"nokia-conf"`
	QtagManipulation *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_QtagManipulation `path:"qtag-manipulation" module:"nokia-conf"`
	VlanManipulation *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_VlanManipulation `path:"vlan-manipulation" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress) IsYANGGoStruct() {}

// GetOrCreateAggregatePolicer retrieves the value of the AggregatePolicer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress) GetOrCreateAggregatePolicer() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_AggregatePolicer {
	if t.AggregatePolicer != nil {
		return t.AggregatePolicer
	}
	t.AggregatePolicer = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_AggregatePolicer{}
	return t.AggregatePolicer
}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress) GetOrCreateFilter() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Filter{}
	return t.Filter
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress) GetOrCreateQos() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos{}
	return t.Qos
}

// GetOrCreateQtagManipulation retrieves the value of the QtagManipulation field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress) GetOrCreateQtagManipulation() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_QtagManipulation {
	if t.QtagManipulation != nil {
		return t.QtagManipulation
	}
	t.QtagManipulation = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_QtagManipulation{}
	return t.QtagManipulation
}

// GetOrCreateVlanManipulation retrieves the value of the VlanManipulation field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress) GetOrCreateVlanManipulation() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_VlanManipulation {
	if t.VlanManipulation != nil {
		return t.VlanManipulation
	}
	t.VlanManipulation = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_VlanManipulation{}
	return t.VlanManipulation
}

// GetAggregatePolicer returns the value of the AggregatePolicer struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress. If the receiver or the field AggregatePolicer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress) GetAggregatePolicer() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_AggregatePolicer {
	if t != nil && t.AggregatePolicer != nil {
		return t.AggregatePolicer
	}
	return nil
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress) GetFilter() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress) GetQos() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// GetQtagManipulation returns the value of the QtagManipulation struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress. If the receiver or the field QtagManipulation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress) GetQtagManipulation() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_QtagManipulation {
	if t != nil && t.QtagManipulation != nil {
		return t.QtagManipulation
	}
	return nil
}

// GetVlanManipulation returns the value of the VlanManipulation struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress. If the receiver or the field VlanManipulation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress) GetVlanManipulation() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_VlanManipulation {
	if t != nil && t.VlanManipulation != nil {
		return t.VlanManipulation
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AggregatePolicer.PopulateDefaults()
	t.Filter.PopulateDefaults()
	t.Qos.PopulateDefaults()
	t.QtagManipulation.PopulateDefaults()
	t.VlanManipulation.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_AggregatePolicer represents the /nokia-conf/configure/groups/group/service/epipe/sap/ingress/aggregate-policer YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_AggregatePolicer struct {
	Burst NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_AggregatePolicer_Burst_Union `path:"burst" module:"nokia-conf"`
	Cbs   NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_AggregatePolicer_Cbs_Union   `path:"cbs" module:"nokia-conf"`
	Cir   NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_AggregatePolicer_Cir_Union   `path:"cir" module:"nokia-conf"`
	Rate  NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_AggregatePolicer_Rate_Union  `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_AggregatePolicer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_AggregatePolicer) IsYANGGoStruct() {
}

// GetBurst retrieves the value of the leaf Burst from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_AggregatePolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Burst is set, it can
// safely use t.GetBurst() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Burst == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_AggregatePolicer) GetBurst() NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_AggregatePolicer_Burst_Union {
	if t == nil || t.Burst == nil {
		return NokiaTypesQos_AggrPolicerBurst_Enum_default
	}
	return t.Burst
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_AggregatePolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_AggregatePolicer) GetCbs() NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_AggregatePolicer_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return nil
	}
	return t.Cbs
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_AggregatePolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_AggregatePolicer) GetCir() NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_AggregatePolicer_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_AggregatePolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_AggregatePolicer) GetRate() NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_AggregatePolicer_Rate_Union {
	if t == nil || t.Rate == nil {
		return NokiaTypesQos_AggrPolicerRate_Enum_max
	}
	return t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_AggregatePolicer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_AggregatePolicer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Burst == nil {
		t.Burst = NokiaTypesQos_AggrPolicerBurst_Enum_default
	}
	if t.Rate == nil {
		t.Rate = NokiaTypesQos_AggrPolicerRate_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_AggregatePolicer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_AggregatePolicer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_AggregatePolicer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_AggregatePolicer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_AggregatePolicer.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_AggregatePolicer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Filter represents the /nokia-conf/configure/groups/group/service/epipe/sap/ingress/filter YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Filter struct {
	Ip   *string `path:"ip" module:"nokia-conf"`
	Ipv6 *string `path:"ipv6" module:"nokia-conf"`
	Mac  *string `path:"mac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Filter) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Filter) GetIpv6() string {
	if t == nil || t.Ipv6 == nil {
		return ""
	}
	return *t.Ipv6
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Filter) GetMac() string {
	if t == nil || t.Mac == nil {
		return ""
	}
	return *t.Mac
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Filter.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos represents the /nokia-conf/configure/groups/group/service/epipe/sap/ingress/qos YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos struct {
	MatchQinqDot1P       E_NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_MatchQinqDot1P      `path:"match-qinq-dot1p" module:"nokia-conf"`
	PolicerControlPolicy *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy `path:"policer-control-policy" module:"nokia-conf"`
	SapIngress           *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress           `path:"sap-ingress" module:"nokia-conf"`
	SchedulerPolicy      *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy      `path:"scheduler-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos) IsYANGGoStruct() {}

// GetOrCreatePolicerControlPolicy retrieves the value of the PolicerControlPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos) GetOrCreatePolicerControlPolicy() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy {
	if t.PolicerControlPolicy != nil {
		return t.PolicerControlPolicy
	}
	t.PolicerControlPolicy = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy{}
	return t.PolicerControlPolicy
}

// GetOrCreateSapIngress retrieves the value of the SapIngress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos) GetOrCreateSapIngress() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress {
	if t.SapIngress != nil {
		return t.SapIngress
	}
	t.SapIngress = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress{}
	return t.SapIngress
}

// GetOrCreateSchedulerPolicy retrieves the value of the SchedulerPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos) GetOrCreateSchedulerPolicy() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy {
	if t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	t.SchedulerPolicy = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy{}
	return t.SchedulerPolicy
}

// GetPolicerControlPolicy returns the value of the PolicerControlPolicy struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos. If the receiver or the field PolicerControlPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos) GetPolicerControlPolicy() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy {
	if t != nil && t.PolicerControlPolicy != nil {
		return t.PolicerControlPolicy
	}
	return nil
}

// GetSapIngress returns the value of the SapIngress struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos. If the receiver or the field SapIngress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos) GetSapIngress() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress {
	if t != nil && t.SapIngress != nil {
		return t.SapIngress
	}
	return nil
}

// GetSchedulerPolicy returns the value of the SchedulerPolicy struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos. If the receiver or the field SchedulerPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos) GetSchedulerPolicy() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy {
	if t != nil && t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	return nil
}

// GetMatchQinqDot1P retrieves the value of the leaf MatchQinqDot1P from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchQinqDot1P is set, it can
// safely use t.GetMatchQinqDot1P() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchQinqDot1P == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos) GetMatchQinqDot1P() E_NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_MatchQinqDot1P {
	if t == nil || t.MatchQinqDot1P == 0 {
		return 0
	}
	return t.MatchQinqDot1P
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PolicerControlPolicy.PopulateDefaults()
	t.SapIngress.PopulateDefaults()
	t.SchedulerPolicy.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy represents the /nokia-conf/configure/groups/group/service/epipe/sap/ingress/qos/policer-control-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy struct {
	Overrides  *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides `path:"overrides" module:"nokia-conf" yangPresence:"true"`
	PolicyName *string                                                                                        `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy) IsYANGGoStruct() {
}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy) GetOrCreateOverrides() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy) GetOverrides() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides represents the /nokia-conf/configure/groups/group/service/epipe/sap/ingress/qos/policer-control-policy/overrides YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides struct {
	Root *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root `path:"root" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) IsYANGGoStruct() {
}

// GetOrCreateRoot retrieves the value of the Root field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) GetOrCreateRoot() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root {
	if t.Root != nil {
		return t.Root
	}
	t.Root = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root{}
	return t.Root
}

// GetRoot returns the value of the Root struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides. If the receiver or the field Root is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) GetRoot() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root {
	if t != nil && t.Root != nil {
		return t.Root
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Root.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root represents the /nokia-conf/configure/groups/group/service/epipe/sap/ingress/qos/policer-control-policy/overrides/root YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root struct {
	MaxRate               NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_MaxRate_Union          `path:"max-rate" module:"nokia-conf"`
	PriorityMbsThresholds *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds `path:"priority-mbs-thresholds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) IsYANGGoStruct() {
}

// GetOrCreatePriorityMbsThresholds retrieves the value of the PriorityMbsThresholds field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) GetOrCreatePriorityMbsThresholds() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds {
	if t.PriorityMbsThresholds != nil {
		return t.PriorityMbsThresholds
	}
	t.PriorityMbsThresholds = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds{}
	return t.PriorityMbsThresholds
}

// GetPriorityMbsThresholds returns the value of the PriorityMbsThresholds struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root. If the receiver or the field PriorityMbsThresholds is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) GetPriorityMbsThresholds() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds {
	if t != nil && t.PriorityMbsThresholds != nil {
		return t.PriorityMbsThresholds
	}
	return nil
}

// GetMaxRate retrieves the value of the leaf MaxRate from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRate is set, it can
// safely use t.GetMaxRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) GetMaxRate() NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_MaxRate_Union {
	if t == nil || t.MaxRate == nil {
		return nil
	}
	return t.MaxRate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PriorityMbsThresholds.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds represents the /nokia-conf/configure/groups/group/service/epipe/sap/ingress/qos/policer-control-policy/overrides/root/priority-mbs-thresholds YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds struct {
	MinThreshSeparation NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_MinThreshSeparation_Union                                                                                                                                           `path:"min-thresh-separation" module:"nokia-conf"`
	Priority            map[NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union]*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) IsYANGGoStruct() {
}

// NewPriority creates a new entry in the Priority list of the
// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) NewPriority(PriorityLevel NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union) (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Priority == nil {
		t.Priority = make(map[NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union]*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority)
	}

	key := PriorityLevel

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Priority[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Priority", key)
	}

	t.Priority[key] = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority{
		PriorityLevel: PriorityLevel,
	}

	return t.Priority[key], nil
}

// RenamePriority renames an entry in the list Priority within
// the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) RenamePriority(oldK, newK NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union) error {
	if _, ok := t.Priority[newK]; ok {
		return fmt.Errorf("key %v already exists in Priority", newK)
	}

	e, ok := t.Priority[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Priority", oldK)
	}
	e.PriorityLevel = newK

	t.Priority[newK] = e
	delete(t.Priority, oldK)
	return nil
}

// GetOrCreatePriority retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) GetOrCreatePriority(PriorityLevel NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union) *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority {

	key := PriorityLevel

	if v, ok := t.Priority[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPriority(PriorityLevel)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePriority got unexpected error: %v", err))
	}
	return v
}

// GetPriority retrieves the value with the specified key from
// the Priority map field of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) GetPriority(PriorityLevel NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union) *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority {

	if t == nil {
		return nil
	}

	key := PriorityLevel

	if lm, ok := t.Priority[key]; ok {
		return lm
	}
	return nil
}

// DeletePriority deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) DeletePriority(PriorityLevel NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union) {
	key := PriorityLevel

	delete(t.Priority, key)
}

// AppendPriority appends the supplied NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority struct to the
// list Priority of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) AppendPriority(v *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) error {
	key := v.PriorityLevel

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Priority == nil {
		t.Priority = make(map[NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union]*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority)
	}

	if _, ok := t.Priority[key]; ok {
		return fmt.Errorf("duplicate key for list Priority %v", key)
	}

	t.Priority[key] = v
	return nil
}

// GetMinThreshSeparation retrieves the value of the leaf MinThreshSeparation from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinThreshSeparation is set, it can
// safely use t.GetMinThreshSeparation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinThreshSeparation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) GetMinThreshSeparation() NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_MinThreshSeparation_Union {
	if t == nil || t.MinThreshSeparation == nil {
		return nil
	}
	return t.MinThreshSeparation
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Priority {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority represents the /nokia-conf/configure/groups/group/service/epipe/sap/ingress/qos/policer-control-policy/overrides/root/priority-mbs-thresholds/priority YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority struct {
	MbsContribution NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_MbsContribution_Union `path:"mbs-contribution" module:"nokia-conf"`
	PriorityLevel   NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union   `path:"priority-level" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) IsYANGGoStruct() {
}

// GetMbsContribution retrieves the value of the leaf MbsContribution from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MbsContribution is set, it can
// safely use t.GetMbsContribution() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MbsContribution == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) GetMbsContribution() NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_MbsContribution_Union {
	if t == nil || t.MbsContribution == nil {
		return nil
	}
	return t.MbsContribution
}

// GetPriorityLevel retrieves the value of the leaf PriorityLevel from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PriorityLevel is set, it can
// safely use t.GetPriorityLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PriorityLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) GetPriorityLevel() NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_PriorityLevel_Union {
	if t == nil || t.PriorityLevel == nil {
		return nil
	}
	return t.PriorityLevel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"priority-level": t.PriorityLevel,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress represents the /nokia-conf/configure/groups/group/service/epipe/sap/ingress/qos/sap-ingress YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress struct {
	FpRedirectGroup *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup `path:"fp-redirect-group" module:"nokia-conf"`
	Overrides       *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides       `path:"overrides" module:"nokia-conf"`
	PolicyName      *string                                                                                    `path:"policy-name" module:"nokia-conf"`
	QueuingType     E_NokiaTypesServices_ServicesSapQueuingType                                                `path:"queuing-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress) IsYANGGoStruct() {}

// GetOrCreateFpRedirectGroup retrieves the value of the FpRedirectGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress) GetOrCreateFpRedirectGroup() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup {
	if t.FpRedirectGroup != nil {
		return t.FpRedirectGroup
	}
	t.FpRedirectGroup = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup{}
	return t.FpRedirectGroup
}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress) GetOrCreateOverrides() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides{}
	return t.Overrides
}

// GetFpRedirectGroup returns the value of the FpRedirectGroup struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress. If the receiver or the field FpRedirectGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress) GetFpRedirectGroup() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup {
	if t != nil && t.FpRedirectGroup != nil {
		return t.FpRedirectGroup
	}
	return nil
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress) GetOverrides() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// GetQueuingType retrieves the value of the leaf QueuingType from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueuingType is set, it can
// safely use t.GetQueuingType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueuingType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress) GetQueuingType() E_NokiaTypesServices_ServicesSapQueuingType {
	if t == nil || t.QueuingType == 0 {
		return 0
	}
	return t.QueuingType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.FpRedirectGroup.PopulateDefaults()
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup represents the /nokia-conf/configure/groups/group/service/epipe/sap/ingress/qos/sap-ingress/fp-redirect-group YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup struct {
	GroupName *string `path:"group-name" module:"nokia-conf"`
	Instance  *uint32 `path:"instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup) IsYANGGoStruct() {
}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// GetInstance retrieves the value of the leaf Instance from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instance is set, it can
// safely use t.GetInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup) GetInstance() uint32 {
	if t == nil || t.Instance == nil {
		return 0
	}
	return *t.Instance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_FpRedirectGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides represents the /nokia-conf/configure/groups/group/service/epipe/sap/ingress/qos/sap-ingress/overrides YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides struct {
	IpCriteria   *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria                                                                                                              `path:"ip-criteria" module:"nokia-conf"`
	Ipv6Criteria *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria                                                                                                            `path:"ipv6-criteria" module:"nokia-conf"`
	Policer      map[NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PolicerId_Union]*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer `path:"policer" module:"nokia-conf"`
	Queue        map[NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue       `path:"queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides) IsYANGGoStruct() {
}

// NewPolicer creates a new entry in the Policer list of the
// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides) NewPolicer(PolicerId NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PolicerId_Union) (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PolicerId_Union]*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer)
	}

	key := PolicerId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Policer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Policer", key)
	}

	t.Policer[key] = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer{
		PolicerId: PolicerId,
	}

	return t.Policer[key], nil
}

// RenamePolicer renames an entry in the list Policer within
// the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides) RenamePolicer(oldK, newK NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PolicerId_Union) error {
	if _, ok := t.Policer[newK]; ok {
		return fmt.Errorf("key %v already exists in Policer", newK)
	}

	e, ok := t.Policer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Policer", oldK)
	}
	e.PolicerId = newK

	t.Policer[newK] = e
	delete(t.Policer, oldK)
	return nil
}

// GetOrCreatePolicer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides) GetOrCreatePolicer(PolicerId NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PolicerId_Union) *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer {

	key := PolicerId

	if v, ok := t.Policer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicer(PolicerId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicer got unexpected error: %v", err))
	}
	return v
}

// GetPolicer retrieves the value with the specified key from
// the Policer map field of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides) GetPolicer(PolicerId NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PolicerId_Union) *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer {

	if t == nil {
		return nil
	}

	key := PolicerId

	if lm, ok := t.Policer[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides) DeletePolicer(PolicerId NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PolicerId_Union) {
	key := PolicerId

	delete(t.Policer, key)
}

// AppendPolicer appends the supplied NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer struct to the
// list Policer of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides) AppendPolicer(v *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) error {
	key := v.PolicerId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PolicerId_Union]*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer)
	}

	if _, ok := t.Policer[key]; ok {
		return fmt.Errorf("duplicate key for list Policer %v", key)
	}

	t.Policer[key] = v
	return nil
}

// NewQueue creates a new entry in the Queue list of the
// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides) NewQueue(QueueId NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_QueueId_Union) (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue)
	}

	key := QueueId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue{
		QueueId: QueueId,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides) RenameQueue(oldK, newK NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_QueueId_Union) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.QueueId = newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides) GetOrCreateQueue(QueueId NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_QueueId_Union) *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue {

	key := QueueId

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(QueueId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides) GetQueue(QueueId NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_QueueId_Union) *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue {

	if t == nil {
		return nil
	}

	key := QueueId

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides) DeleteQueue(QueueId NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_QueueId_Union) {
	key := QueueId

	delete(t.Queue, key)
}

// AppendQueue appends the supplied NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue struct to the
// list Queue of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides) AppendQueue(v *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) error {
	key := v.QueueId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// GetOrCreateIpCriteria retrieves the value of the IpCriteria field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides) GetOrCreateIpCriteria() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria {
	if t.IpCriteria != nil {
		return t.IpCriteria
	}
	t.IpCriteria = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria{}
	return t.IpCriteria
}

// GetOrCreateIpv6Criteria retrieves the value of the Ipv6Criteria field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides) GetOrCreateIpv6Criteria() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria {
	if t.Ipv6Criteria != nil {
		return t.Ipv6Criteria
	}
	t.Ipv6Criteria = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria{}
	return t.Ipv6Criteria
}

// GetIpCriteria returns the value of the IpCriteria struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides. If the receiver or the field IpCriteria is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides) GetIpCriteria() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria {
	if t != nil && t.IpCriteria != nil {
		return t.IpCriteria
	}
	return nil
}

// GetIpv6Criteria returns the value of the Ipv6Criteria struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides. If the receiver or the field Ipv6Criteria is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides) GetIpv6Criteria() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria {
	if t != nil && t.Ipv6Criteria != nil {
		return t.Ipv6Criteria
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.IpCriteria.PopulateDefaults()
	t.Ipv6Criteria.PopulateDefaults()
	for _, e := range t.Policer {
		e.PopulateDefaults()
	}
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria represents the /nokia-conf/configure/groups/group/service/epipe/sap/ingress/qos/sap-ingress/overrides/ip-criteria YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria struct {
	ActivateEntryTag *int32 `path:"activate-entry-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria) IsYANGGoStruct() {
}

// GetActivateEntryTag retrieves the value of the leaf ActivateEntryTag from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActivateEntryTag is set, it can
// safely use t.GetActivateEntryTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActivateEntryTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria) GetActivateEntryTag() int32 {
	if t == nil || t.ActivateEntryTag == nil {
		return 0
	}
	return *t.ActivateEntryTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_IpCriteria) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria represents the /nokia-conf/configure/groups/group/service/epipe/sap/ingress/qos/sap-ingress/overrides/ipv6-criteria YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria struct {
	ActivateEntryTag *int32 `path:"activate-entry-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria) IsYANGGoStruct() {
}

// GetActivateEntryTag retrieves the value of the leaf ActivateEntryTag from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActivateEntryTag is set, it can
// safely use t.GetActivateEntryTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActivateEntryTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria) GetActivateEntryTag() int32 {
	if t == nil || t.ActivateEntryTag == nil {
		return 0
	}
	return *t.ActivateEntryTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Ipv6Criteria) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer represents the /nokia-conf/configure/groups/group/service/epipe/sap/ingress/qos/sap-ingress/overrides/policer YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer struct {
	Cbs              NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Cbs_Union       `path:"cbs" module:"nokia-conf"`
	Mbs              NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Mbs_Union       `path:"mbs" module:"nokia-conf"`
	PacketByteOffset *int32                                                                                                      `path:"packet-byte-offset" module:"nokia-conf"`
	PercentRate      *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate    `path:"percent-rate" module:"nokia-conf"`
	PolicerId        NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PolicerId_Union `path:"policer-id" module:"nokia-conf"`
	Rate             *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate           `path:"rate" module:"nokia-conf"`
	StatMode         E_NokiaTypesQos_IngressPolicerStatMode                                                                      `path:"stat-mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) IsYANGGoStruct() {
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetOrCreatePercentRate() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate{}
	return t.PercentRate
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetOrCreateRate() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate{}
	return t.Rate
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetPercentRate() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetRate() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetCbs() NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return nil
	}
	return t.Cbs
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetMbs() NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return nil
	}
	return t.Mbs
}

// GetPacketByteOffset retrieves the value of the leaf PacketByteOffset from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketByteOffset is set, it can
// safely use t.GetPacketByteOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketByteOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetPacketByteOffset() int32 {
	if t == nil || t.PacketByteOffset == nil {
		return 0
	}
	return *t.PacketByteOffset
}

// GetPolicerId retrieves the value of the leaf PolicerId from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerId is set, it can
// safely use t.GetPolicerId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetPolicerId() NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PolicerId_Union {
	if t == nil || t.PolicerId == nil {
		return nil
	}
	return t.PolicerId
}

// GetStatMode retrieves the value of the leaf StatMode from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StatMode is set, it can
// safely use t.GetStatMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StatMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) GetStatMode() E_NokiaTypesQos_IngressPolicerStatMode {
	if t == nil || t.StatMode == 0 {
		return 0
	}
	return t.StatMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PercentRate.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"policer-id": t.PolicerId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate represents the /nokia-conf/configure/groups/group/service/epipe/sap/ingress/qos/sap-ingress/overrides/policer/percent-rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate struct {
	Cir *float64 `path:"cir" module:"nokia-conf"`
	Pir *float64 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 0.0
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 0.0
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate represents the /nokia-conf/configure/groups/group/service/epipe/sap/ingress/qos/sap-ingress/overrides/policer/rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate struct {
	Cir NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) GetCir() NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) GetPir() NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Policer_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue represents the /nokia-conf/configure/groups/group/service/epipe/sap/ingress/qos/sap-ingress/overrides/queue YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue struct {
	AdaptationRule    *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule    `path:"adaptation-rule" module:"nokia-conf"`
	Cbs               NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Cbs_Union          `path:"cbs" module:"nokia-conf"`
	DropTail          *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail          `path:"drop-tail" module:"nokia-conf"`
	Mbs               NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Mbs_Union          `path:"mbs" module:"nokia-conf"`
	MonitorDepth      *bool                                                                                                        `path:"monitor-depth" module:"nokia-conf"`
	MonitorQueueDepth *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth `path:"monitor-queue-depth" module:"nokia-conf" yangPresence:"true"`
	Parent            *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent            `path:"parent" module:"nokia-conf"`
	PercentRate       *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate       `path:"percent-rate" module:"nokia-conf"`
	QueueId           NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_QueueId_Union      `path:"queue-id" module:"nokia-conf"`
	Rate              *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate              `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) IsYANGGoStruct() {
}

// GetOrCreateAdaptationRule retrieves the value of the AdaptationRule field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetOrCreateAdaptationRule() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule {
	if t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	t.AdaptationRule = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule{}
	return t.AdaptationRule
}

// GetOrCreateDropTail retrieves the value of the DropTail field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetOrCreateDropTail() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail {
	if t.DropTail != nil {
		return t.DropTail
	}
	t.DropTail = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail{}
	return t.DropTail
}

// GetOrCreateMonitorQueueDepth retrieves the value of the MonitorQueueDepth field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetOrCreateMonitorQueueDepth() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth {
	if t.MonitorQueueDepth != nil {
		return t.MonitorQueueDepth
	}
	t.MonitorQueueDepth = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth{}
	return t.MonitorQueueDepth
}

// GetOrCreateParent retrieves the value of the Parent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetOrCreateParent() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent {
	if t.Parent != nil {
		return t.Parent
	}
	t.Parent = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent{}
	return t.Parent
}

// GetOrCreatePercentRate retrieves the value of the PercentRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetOrCreatePercentRate() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate {
	if t.PercentRate != nil {
		return t.PercentRate
	}
	t.PercentRate = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate{}
	return t.PercentRate
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetOrCreateRate() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate{}
	return t.Rate
}

// GetAdaptationRule returns the value of the AdaptationRule struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue. If the receiver or the field AdaptationRule is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetAdaptationRule() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule {
	if t != nil && t.AdaptationRule != nil {
		return t.AdaptationRule
	}
	return nil
}

// GetDropTail returns the value of the DropTail struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue. If the receiver or the field DropTail is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetDropTail() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail {
	if t != nil && t.DropTail != nil {
		return t.DropTail
	}
	return nil
}

// GetMonitorQueueDepth returns the value of the MonitorQueueDepth struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue. If the receiver or the field MonitorQueueDepth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetMonitorQueueDepth() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth {
	if t != nil && t.MonitorQueueDepth != nil {
		return t.MonitorQueueDepth
	}
	return nil
}

// GetParent returns the value of the Parent struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue. If the receiver or the field Parent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetParent() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent {
	if t != nil && t.Parent != nil {
		return t.Parent
	}
	return nil
}

// GetPercentRate returns the value of the PercentRate struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue. If the receiver or the field PercentRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetPercentRate() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate {
	if t != nil && t.PercentRate != nil {
		return t.PercentRate
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetRate() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetCbs() NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return nil
	}
	return t.Cbs
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetMbs() NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return nil
	}
	return t.Mbs
}

// GetMonitorDepth retrieves the value of the leaf MonitorDepth from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorDepth is set, it can
// safely use t.GetMonitorDepth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorDepth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetMonitorDepth() bool {
	if t == nil || t.MonitorDepth == nil {
		return false
	}
	return *t.MonitorDepth
}

// GetQueueId retrieves the value of the leaf QueueId from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueId is set, it can
// safely use t.GetQueueId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) GetQueueId() NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_QueueId_Union {
	if t == nil || t.QueueId == nil {
		return nil
	}
	return t.QueueId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MonitorDepth == nil {
		var v bool = false
		t.MonitorDepth = &v
	}
	t.AdaptationRule.PopulateDefaults()
	t.DropTail.PopulateDefaults()
	t.MonitorQueueDepth.PopulateDefaults()
	t.Parent.PopulateDefaults()
	t.PercentRate.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"queue-id": t.QueueId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule represents the /nokia-conf/configure/groups/group/service/epipe/sap/ingress/qos/sap-ingress/overrides/queue/adaptation-rule YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule struct {
	Cir E_NokiaTypesQos_AdaptationRuleOverride `path:"cir" module:"nokia-conf"`
	Pir E_NokiaTypesQos_AdaptationRuleOverride `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) GetCir() E_NokiaTypesQos_AdaptationRuleOverride {
	if t == nil || t.Cir == 0 {
		return 0
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) GetPir() E_NokiaTypesQos_AdaptationRuleOverride {
	if t == nil || t.Pir == 0 {
		return 0
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_AdaptationRule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail represents the /nokia-conf/configure/groups/group/service/epipe/sap/ingress/qos/sap-ingress/overrides/queue/drop-tail YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail struct {
	Low *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low `path:"low" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) IsYANGGoStruct() {
}

// GetOrCreateLow retrieves the value of the Low field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) GetOrCreateLow() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low {
	if t.Low != nil {
		return t.Low
	}
	t.Low = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low{}
	return t.Low
}

// GetLow returns the value of the Low struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail. If the receiver or the field Low is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) GetLow() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low {
	if t != nil && t.Low != nil {
		return t.Low
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Low.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low represents the /nokia-conf/configure/groups/group/service/epipe/sap/ingress/qos/sap-ingress/overrides/queue/drop-tail/low YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low struct {
	PercentReductionFromMbs NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low_PercentReductionFromMbs_Union `path:"percent-reduction-from-mbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low) IsYANGGoStruct() {
}

// GetPercentReductionFromMbs retrieves the value of the leaf PercentReductionFromMbs from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PercentReductionFromMbs is set, it can
// safely use t.GetPercentReductionFromMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PercentReductionFromMbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low) GetPercentReductionFromMbs() NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low_PercentReductionFromMbs_Union {
	if t == nil || t.PercentReductionFromMbs == nil {
		return nil
	}
	return t.PercentReductionFromMbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_DropTail_Low) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth represents the /nokia-conf/configure/groups/group/service/epipe/sap/ingress/qos/sap-ingress/overrides/queue/monitor-queue-depth YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth struct {
	FastPolling *bool `path:"fast-polling" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth) IsYANGGoStruct() {
}

// GetFastPolling retrieves the value of the leaf FastPolling from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FastPolling is set, it can
// safely use t.GetFastPolling() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FastPolling == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth) GetFastPolling() bool {
	if t == nil || t.FastPolling == nil {
		return false
	}
	return *t.FastPolling
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FastPolling == nil {
		var v bool = false
		t.FastPolling = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_MonitorQueueDepth) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent represents the /nokia-conf/configure/groups/group/service/epipe/sap/ingress/qos/sap-ingress/overrides/queue/parent YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent struct {
	CirWeight *int32 `path:"cir-weight" module:"nokia-conf"`
	Weight    *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) IsYANGGoStruct() {
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 0
	}
	return *t.CirWeight
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Parent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate represents the /nokia-conf/configure/groups/group/service/epipe/sap/ingress/qos/sap-ingress/overrides/queue/percent-rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate struct {
	Cir *float64 `path:"cir" module:"nokia-conf"`
	Pir *float64 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) GetCir() float64 {
	if t == nil || t.Cir == nil {
		return 0.0
	}
	return *t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) GetPir() float64 {
	if t == nil || t.Pir == nil {
		return 0.0
	}
	return *t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_PercentRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate represents the /nokia-conf/configure/groups/group/service/epipe/sap/ingress/qos/sap-ingress/overrides/queue/rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate struct {
	Cir NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) GetCir() NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) GetPir() NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SapIngress_Overrides_Queue_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy represents the /nokia-conf/configure/groups/group/service/epipe/sap/ingress/qos/scheduler-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy struct {
	Overrides  *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides `path:"overrides" module:"nokia-conf"`
	PolicyName *string                                                                                   `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy) IsYANGGoStruct() {
}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy) GetOrCreateOverrides() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy) GetOverrides() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides represents the /nokia-conf/configure/groups/group/service/epipe/sap/ingress/qos/scheduler-policy/overrides YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides struct {
	Scheduler map[string]*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler `path:"scheduler" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides) IsYANGGoStruct() {
}

// NewScheduler creates a new entry in the Scheduler list of the
// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides) NewScheduler(SchedulerName string) (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler)
	}

	key := SchedulerName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Scheduler[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Scheduler", key)
	}

	t.Scheduler[key] = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler{
		SchedulerName: &SchedulerName,
	}

	return t.Scheduler[key], nil
}

// RenameScheduler renames an entry in the list Scheduler within
// the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides) RenameScheduler(oldK, newK string) error {
	if _, ok := t.Scheduler[newK]; ok {
		return fmt.Errorf("key %v already exists in Scheduler", newK)
	}

	e, ok := t.Scheduler[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Scheduler", oldK)
	}
	e.SchedulerName = &newK

	t.Scheduler[newK] = e
	delete(t.Scheduler, oldK)
	return nil
}

// GetOrCreateScheduler retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides) GetOrCreateScheduler(SchedulerName string) *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler {

	key := SchedulerName

	if v, ok := t.Scheduler[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewScheduler(SchedulerName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateScheduler got unexpected error: %v", err))
	}
	return v
}

// GetScheduler retrieves the value with the specified key from
// the Scheduler map field of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides) GetScheduler(SchedulerName string) *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler {

	if t == nil {
		return nil
	}

	key := SchedulerName

	if lm, ok := t.Scheduler[key]; ok {
		return lm
	}
	return nil
}

// DeleteScheduler deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides) DeleteScheduler(SchedulerName string) {
	key := SchedulerName

	delete(t.Scheduler, key)
}

// AppendScheduler appends the supplied NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler struct to the
// list Scheduler of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides) AppendScheduler(v *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) error {
	if v.SchedulerName == nil {
		return fmt.Errorf("invalid nil key received for SchedulerName")
	}

	key := *v.SchedulerName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler)
	}

	if _, ok := t.Scheduler[key]; ok {
		return fmt.Errorf("duplicate key for list Scheduler %v", key)
	}

	t.Scheduler[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Scheduler {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler represents the /nokia-conf/configure/groups/group/service/epipe/sap/ingress/qos/scheduler-policy/overrides/scheduler YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler struct {
	Parent        *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent `path:"parent" module:"nokia-conf"`
	Rate          *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate   `path:"rate" module:"nokia-conf"`
	SchedulerName *string                                                                                                    `path:"scheduler-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) IsYANGGoStruct() {
}

// GetOrCreateParent retrieves the value of the Parent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) GetOrCreateParent() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent {
	if t.Parent != nil {
		return t.Parent
	}
	t.Parent = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent{}
	return t.Parent
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) GetOrCreateRate() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate{}
	return t.Rate
}

// GetParent returns the value of the Parent struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler. If the receiver or the field Parent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) GetParent() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent {
	if t != nil && t.Parent != nil {
		return t.Parent
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) GetRate() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetSchedulerName retrieves the value of the leaf SchedulerName from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SchedulerName is set, it can
// safely use t.GetSchedulerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SchedulerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) GetSchedulerName() string {
	if t == nil || t.SchedulerName == nil {
		return ""
	}
	return *t.SchedulerName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Parent.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SchedulerName == nil {
		return nil, fmt.Errorf("nil value for key SchedulerName")
	}

	return map[string]interface{}{
		"scheduler-name": *t.SchedulerName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent represents the /nokia-conf/configure/groups/group/service/epipe/sap/ingress/qos/scheduler-policy/overrides/scheduler/parent YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent struct {
	CirWeight *int32 `path:"cir-weight" module:"nokia-conf"`
	Weight    *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) IsYANGGoStruct() {
}

// GetCirWeight retrieves the value of the leaf CirWeight from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirWeight is set, it can
// safely use t.GetCirWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) GetCirWeight() int32 {
	if t == nil || t.CirWeight == nil {
		return 0
	}
	return *t.CirWeight
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Parent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate represents the /nokia-conf/configure/groups/group/service/epipe/sap/ingress/qos/scheduler-policy/overrides/scheduler/rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate struct {
	Cir NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) GetCir() NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) GetPir() NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_QtagManipulation represents the /nokia-conf/configure/groups/group/service/epipe/sap/ingress/qtag-manipulation YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_QtagManipulation struct {
	CTag          *int32                                                                                          `path:"c-tag" module:"nokia-conf"`
	PushDot1QVlan NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_QtagManipulation_PushDot1QVlan_Union `path:"push-dot1q-vlan" module:"nokia-conf"`
	STag          *int32                                                                                          `path:"s-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_QtagManipulation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_QtagManipulation) IsYANGGoStruct() {
}

// GetCTag retrieves the value of the leaf CTag from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_QtagManipulation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CTag is set, it can
// safely use t.GetCTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_QtagManipulation) GetCTag() int32 {
	if t == nil || t.CTag == nil {
		return 0
	}
	return *t.CTag
}

// GetPushDot1QVlan retrieves the value of the leaf PushDot1QVlan from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_QtagManipulation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PushDot1QVlan is set, it can
// safely use t.GetPushDot1QVlan() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PushDot1QVlan == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_QtagManipulation) GetPushDot1QVlan() NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_QtagManipulation_PushDot1QVlan_Union {
	if t == nil || t.PushDot1QVlan == nil {
		return nil
	}
	return t.PushDot1QVlan
}

// GetSTag retrieves the value of the leaf STag from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_QtagManipulation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if STag is set, it can
// safely use t.GetSTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.STag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_QtagManipulation) GetSTag() int32 {
	if t == nil || t.STag == nil {
		return 0
	}
	return *t.STag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_QtagManipulation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_QtagManipulation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_QtagManipulation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_QtagManipulation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_QtagManipulation) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_QtagManipulation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_QtagManipulation.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_QtagManipulation) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_VlanManipulation represents the /nokia-conf/configure/groups/group/service/epipe/sap/ingress/vlan-manipulation YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_VlanManipulation struct {
	Action   E_NokiaTypesServices_VlanManipulationIngressActionType                                     `path:"action" module:"nokia-conf"`
	InnerTag NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_VlanManipulation_InnerTag_Union `path:"inner-tag" module:"nokia-conf"`
	OuterTag NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_VlanManipulation_OuterTag_Union `path:"outer-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_VlanManipulation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_VlanManipulation) IsYANGGoStruct() {
}

// GetAction retrieves the value of the leaf Action from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_VlanManipulation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Action is set, it can
// safely use t.GetAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Action == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_VlanManipulation) GetAction() E_NokiaTypesServices_VlanManipulationIngressActionType {
	if t == nil || t.Action == 0 {
		return 0
	}
	return t.Action
}

// GetInnerTag retrieves the value of the leaf InnerTag from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_VlanManipulation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InnerTag is set, it can
// safely use t.GetInnerTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InnerTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_VlanManipulation) GetInnerTag() NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_VlanManipulation_InnerTag_Union {
	if t == nil || t.InnerTag == nil {
		return NokiaTypesServices_VlanManipulateIngressVlanType_Enum_null
	}
	return t.InnerTag
}

// GetOuterTag retrieves the value of the leaf OuterTag from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_VlanManipulation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OuterTag is set, it can
// safely use t.GetOuterTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OuterTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_VlanManipulation) GetOuterTag() NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_VlanManipulation_OuterTag_Union {
	if t == nil || t.OuterTag == nil {
		return NokiaTypesServices_VlanManipulateIngressVlanType_Enum_null
	}
	return t.OuterTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_VlanManipulation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_VlanManipulation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InnerTag == nil {
		t.InnerTag = NokiaTypesServices_VlanManipulateIngressVlanType_Enum_null
	}
	if t.OuterTag == nil {
		t.OuterTag = NokiaTypesServices_VlanManipulateIngressVlanType_Enum_null
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_VlanManipulation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_VlanManipulation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_VlanManipulation) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_VlanManipulation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_VlanManipulation.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Ingress_VlanManipulation) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_L2Tpv3Session represents the /nokia-conf/configure/groups/group/service/epipe/sap/l2tpv3-session YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_L2Tpv3Session struct {
	AdminState E_NokiaTypesSros_AdminState                                                  `path:"admin-state" module:"nokia-conf"`
	PseudoWire *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_L2Tpv3Session_PseudoWire `path:"pseudo-wire" module:"nokia-conf"`
	Router     *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_L2Tpv3Session_Router     `path:"router" module:"nokia-conf"`
	VcId       *uint32                                                                      `path:"vc-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_L2Tpv3Session implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_L2Tpv3Session) IsYANGGoStruct() {}

// GetOrCreatePseudoWire retrieves the value of the PseudoWire field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_L2Tpv3Session) GetOrCreatePseudoWire() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_L2Tpv3Session_PseudoWire {
	if t.PseudoWire != nil {
		return t.PseudoWire
	}
	t.PseudoWire = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_L2Tpv3Session_PseudoWire{}
	return t.PseudoWire
}

// GetOrCreateRouter retrieves the value of the Router field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_L2Tpv3Session) GetOrCreateRouter() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_L2Tpv3Session_Router {
	if t.Router != nil {
		return t.Router
	}
	t.Router = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_L2Tpv3Session_Router{}
	return t.Router
}

// GetPseudoWire returns the value of the PseudoWire struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_L2Tpv3Session. If the receiver or the field PseudoWire is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_L2Tpv3Session) GetPseudoWire() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_L2Tpv3Session_PseudoWire {
	if t != nil && t.PseudoWire != nil {
		return t.PseudoWire
	}
	return nil
}

// GetRouter returns the value of the Router struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_L2Tpv3Session. If the receiver or the field Router is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_L2Tpv3Session) GetRouter() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_L2Tpv3Session_Router {
	if t != nil && t.Router != nil {
		return t.Router
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_L2Tpv3Session
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_L2Tpv3Session) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetVcId retrieves the value of the leaf VcId from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_L2Tpv3Session
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VcId is set, it can
// safely use t.GetVcId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VcId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_L2Tpv3Session) GetVcId() uint32 {
	if t == nil || t.VcId == nil {
		return 0
	}
	return *t.VcId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_L2Tpv3Session
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_L2Tpv3Session) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.PseudoWire.PopulateDefaults()
	t.Router.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_L2Tpv3Session) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_L2Tpv3Session"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_L2Tpv3Session) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_L2Tpv3Session) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_L2Tpv3Session.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_L2Tpv3Session) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_L2Tpv3Session_PseudoWire represents the /nokia-conf/configure/groups/group/service/epipe/sap/l2tpv3-session/pseudo-wire YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_L2Tpv3Session_PseudoWire struct {
	Ethernet       YANGEmpty `path:"ethernet" module:"nokia-conf"`
	EthernetVlanId *int32    `path:"ethernet-vlan-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_L2Tpv3Session_PseudoWire implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_L2Tpv3Session_PseudoWire) IsYANGGoStruct() {
}

// GetEthernet retrieves the value of the leaf Ethernet from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_L2Tpv3Session_PseudoWire
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ethernet is set, it can
// safely use t.GetEthernet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ethernet == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_L2Tpv3Session_PseudoWire) GetEthernet() YANGEmpty {
	if t == nil || t.Ethernet == false {
		return false
	}
	return t.Ethernet
}

// GetEthernetVlanId retrieves the value of the leaf EthernetVlanId from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_L2Tpv3Session_PseudoWire
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EthernetVlanId is set, it can
// safely use t.GetEthernetVlanId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EthernetVlanId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_L2Tpv3Session_PseudoWire) GetEthernetVlanId() int32 {
	if t == nil || t.EthernetVlanId == nil {
		return 0
	}
	return *t.EthernetVlanId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_L2Tpv3Session_PseudoWire
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_L2Tpv3Session_PseudoWire) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_L2Tpv3Session_PseudoWire) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_L2Tpv3Session_PseudoWire"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_L2Tpv3Session_PseudoWire) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_L2Tpv3Session_PseudoWire) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_L2Tpv3Session_PseudoWire.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_L2Tpv3Session_PseudoWire) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_L2Tpv3Session_Router represents the /nokia-conf/configure/groups/group/service/epipe/sap/l2tpv3-session/router YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_L2Tpv3Session_Router struct {
	Group          *string `path:"group" module:"nokia-conf"`
	RouterInstance *string `path:"router-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_L2Tpv3Session_Router implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_L2Tpv3Session_Router) IsYANGGoStruct() {}

// GetGroup retrieves the value of the leaf Group from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_L2Tpv3Session_Router
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Group is set, it can
// safely use t.GetGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Group == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_L2Tpv3Session_Router) GetGroup() string {
	if t == nil || t.Group == nil {
		return ""
	}
	return *t.Group
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_L2Tpv3Session_Router
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_L2Tpv3Session_Router) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_L2Tpv3Session_Router
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_L2Tpv3Session_Router) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_L2Tpv3Session_Router) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_L2Tpv3Session_Router"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_L2Tpv3Session_Router) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_L2Tpv3Session_Router) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_L2Tpv3Session_Router.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_L2Tpv3Session_Router) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Lag represents the /nokia-conf/configure/groups/group/service/epipe/sap/lag YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Lag struct {
	LinkMapProfile *int32                                                              `path:"link-map-profile" module:"nokia-conf"`
	PerLinkHash    *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Lag_PerLinkHash `path:"per-link-hash" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Lag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Lag) IsYANGGoStruct() {}

// GetOrCreatePerLinkHash retrieves the value of the PerLinkHash field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Lag) GetOrCreatePerLinkHash() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Lag_PerLinkHash {
	if t.PerLinkHash != nil {
		return t.PerLinkHash
	}
	t.PerLinkHash = &NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Lag_PerLinkHash{}
	return t.PerLinkHash
}

// GetPerLinkHash returns the value of the PerLinkHash struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Lag. If the receiver or the field PerLinkHash is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Lag) GetPerLinkHash() *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Lag_PerLinkHash {
	if t != nil && t.PerLinkHash != nil {
		return t.PerLinkHash
	}
	return nil
}

// GetLinkMapProfile retrieves the value of the leaf LinkMapProfile from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Lag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkMapProfile is set, it can
// safely use t.GetLinkMapProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkMapProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Lag) GetLinkMapProfile() int32 {
	if t == nil || t.LinkMapProfile == nil {
		return 0
	}
	return *t.LinkMapProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Lag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Lag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PerLinkHash.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Lag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Lag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Lag) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Lag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Lag.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Lag) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Lag_PerLinkHash represents the /nokia-conf/configure/groups/group/service/epipe/sap/lag/per-link-hash YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Lag_PerLinkHash struct {
	Class  *int32 `path:"class" module:"nokia-conf"`
	Weight *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Lag_PerLinkHash implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Lag_PerLinkHash) IsYANGGoStruct() {}

// GetClass retrieves the value of the leaf Class from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Lag_PerLinkHash
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Class is set, it can
// safely use t.GetClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Class == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Lag_PerLinkHash) GetClass() int32 {
	if t == nil || t.Class == nil {
		return 1
	}
	return *t.Class
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Lag_PerLinkHash
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Lag_PerLinkHash) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 1
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Lag_PerLinkHash
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Lag_PerLinkHash) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Class == nil {
		var v int32 = 1
		t.Class = &v
	}
	if t.Weight == nil {
		var v int32 = 1
		t.Weight = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Lag_PerLinkHash) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Lag_PerLinkHash"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Lag_PerLinkHash) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Lag_PerLinkHash) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Lag_PerLinkHash.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_Lag_PerLinkHash) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_McRing represents the /nokia-conf/configure/groups/group/service/epipe/sap/mc-ring YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_McRing struct {
	RingNode *string `path:"ring-node" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_McRing implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_McRing) IsYANGGoStruct() {}

// GetRingNode retrieves the value of the leaf RingNode from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_McRing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RingNode is set, it can
// safely use t.GetRingNode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RingNode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_McRing) GetRingNode() string {
	if t == nil || t.RingNode == nil {
		return ""
	}
	return *t.RingNode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_McRing
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_McRing) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_McRing) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_McRing"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_McRing) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_McRing) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_McRing.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_McRing) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_TransitPolicy represents the /nokia-conf/configure/groups/group/service/epipe/sap/transit-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_TransitPolicy struct {
	Ip     *uint32 `path:"ip" module:"nokia-conf"`
	Prefix *uint32 `path:"prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_TransitPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_TransitPolicy) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_TransitPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_TransitPolicy) GetIp() uint32 {
	if t == nil || t.Ip == nil {
		return 0
	}
	return *t.Ip
}

// GetPrefix retrieves the value of the leaf Prefix from the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_TransitPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_TransitPolicy) GetPrefix() uint32 {
	if t == nil || t.Prefix == nil {
		return 0
	}
	return *t.Prefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_TransitPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_TransitPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_TransitPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_TransitPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_TransitPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_TransitPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_TransitPolicy.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Sap_TransitPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6 represents the /nokia-conf/configure/groups/group/service/epipe/segment-routing-v6 YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6 struct {
	Instance NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Instance_Union      `path:"instance" module:"nokia-conf"`
	Locator  map[string]*NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Locator `path:"locator" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6) IsYANGGoStruct() {}

// NewLocator creates a new entry in the Locator list of the
// NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6) NewLocator(LocatorName string) (*NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Locator, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Locator == nil {
		t.Locator = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Locator)
	}

	key := LocatorName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Locator[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Locator", key)
	}

	t.Locator[key] = &NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Locator{
		LocatorName: &LocatorName,
	}

	return t.Locator[key], nil
}

// RenameLocator renames an entry in the list Locator within
// the NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6) RenameLocator(oldK, newK string) error {
	if _, ok := t.Locator[newK]; ok {
		return fmt.Errorf("key %v already exists in Locator", newK)
	}

	e, ok := t.Locator[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Locator", oldK)
	}
	e.LocatorName = &newK

	t.Locator[newK] = e
	delete(t.Locator, oldK)
	return nil
}

// GetOrCreateLocator retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6) GetOrCreateLocator(LocatorName string) *NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Locator {

	key := LocatorName

	if v, ok := t.Locator[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLocator(LocatorName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLocator got unexpected error: %v", err))
	}
	return v
}

// GetLocator retrieves the value with the specified key from
// the Locator map field of NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6) GetLocator(LocatorName string) *NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Locator {

	if t == nil {
		return nil
	}

	key := LocatorName

	if lm, ok := t.Locator[key]; ok {
		return lm
	}
	return nil
}

// DeleteLocator deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6) DeleteLocator(LocatorName string) {
	key := LocatorName

	delete(t.Locator, key)
}

// AppendLocator appends the supplied NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Locator struct to the
// list Locator of NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Locator already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6) AppendLocator(v *NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Locator) error {
	if v.LocatorName == nil {
		return fmt.Errorf("invalid nil key received for LocatorName")
	}

	key := *v.LocatorName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Locator == nil {
		t.Locator = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Locator)
	}

	if _, ok := t.Locator[key]; ok {
		return fmt.Errorf("duplicate key for list Locator %v", key)
	}

	t.Locator[key] = v
	return nil
}

// GetInstance retrieves the value of the leaf Instance from the NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instance is set, it can
// safely use t.GetInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6) GetInstance() NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Instance_Union {
	if t == nil || t.Instance == nil {
		return nil
	}
	return t.Instance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Locator {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6 struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"instance": t.Instance,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Locator represents the /nokia-conf/configure/groups/group/service/epipe/segment-routing-v6/locator YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Locator struct {
	Function    *NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Locator_Function `path:"function" module:"nokia-conf"`
	LocatorName *string                                                                           `path:"locator-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Locator implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Locator) IsYANGGoStruct() {}

// GetOrCreateFunction retrieves the value of the Function field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Locator) GetOrCreateFunction() *NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Locator_Function {
	if t.Function != nil {
		return t.Function
	}
	t.Function = &NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Locator_Function{}
	return t.Function
}

// GetFunction returns the value of the Function struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Locator. If the receiver or the field Function is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Locator) GetFunction() *NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Locator_Function {
	if t != nil && t.Function != nil {
		return t.Function
	}
	return nil
}

// GetLocatorName retrieves the value of the leaf LocatorName from the NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Locator
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocatorName is set, it can
// safely use t.GetLocatorName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocatorName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Locator) GetLocatorName() string {
	if t == nil || t.LocatorName == nil {
		return ""
	}
	return *t.LocatorName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Locator
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Locator) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Function.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Locator struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Locator) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LocatorName == nil {
		return nil, fmt.Errorf("nil value for key LocatorName")
	}

	return map[string]interface{}{
		"locator-name": *t.LocatorName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Locator) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Locator"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Locator) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Locator) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Locator.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Locator) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Locator_Function represents the /nokia-conf/configure/groups/group/service/epipe/segment-routing-v6/locator/function YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Locator_Function struct {
	EndDx2 *NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Locator_Function_EndDx2 `path:"end-dx2" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Locator_Function implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Locator_Function) IsYANGGoStruct() {
}

// GetOrCreateEndDx2 retrieves the value of the EndDx2 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Locator_Function) GetOrCreateEndDx2() *NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Locator_Function_EndDx2 {
	if t.EndDx2 != nil {
		return t.EndDx2
	}
	t.EndDx2 = &NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Locator_Function_EndDx2{}
	return t.EndDx2
}

// GetEndDx2 returns the value of the EndDx2 struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Locator_Function. If the receiver or the field EndDx2 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Locator_Function) GetEndDx2() *NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Locator_Function_EndDx2 {
	if t != nil && t.EndDx2 != nil {
		return t.EndDx2
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Locator_Function
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Locator_Function) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.EndDx2.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Locator_Function) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Locator_Function"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Locator_Function) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Locator_Function) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Locator_Function.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Locator_Function) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Locator_Function_EndDx2 represents the /nokia-conf/configure/groups/group/service/epipe/segment-routing-v6/locator/function/end-dx2 YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Locator_Function_EndDx2 struct {
	Value *uint32 `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Locator_Function_EndDx2 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Locator_Function_EndDx2) IsYANGGoStruct() {
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Locator_Function_EndDx2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Locator_Function_EndDx2) GetValue() uint32 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Locator_Function_EndDx2
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Locator_Function_EndDx2) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Locator_Function_EndDx2) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Locator_Function_EndDx2"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Locator_Function_EndDx2) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Locator_Function_EndDx2) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Locator_Function_EndDx2.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SegmentRoutingV6_Locator_Function_EndDx2) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp represents the /nokia-conf/configure/groups/group/service/epipe/spoke-sdp YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp struct {
	Aarp              *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Aarp               `path:"aarp" module:"nokia-conf" yangPresence:"true"`
	AccountingPolicy  *uint32                                                                     `path:"accounting-policy" module:"nokia-conf"`
	AdminState        E_NokiaTypesSros_AdminState                                                 `path:"admin-state" module:"nokia-conf"`
	AdvServiceMtu     *int32                                                                      `path:"adv-service-mtu" module:"nokia-conf"`
	AppProfile        *string                                                                     `path:"app-profile" module:"nokia-conf"`
	Bandwidth         NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Bandwidth_Union     `path:"bandwidth" module:"nokia-conf"`
	Bfd               *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Bfd                `path:"bfd" module:"nokia-conf"`
	BfdLiveness       *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_BfdLiveness        `path:"bfd-liveness" module:"nokia-conf" yangPresence:"true"`
	BfdTemplate       *string                                                                     `path:"bfd-template" module:"nokia-conf"`
	CollectStats      *bool                                                                       `path:"collect-stats" module:"nokia-conf"`
	ControlWord       *bool                                                                       `path:"control-word" module:"nokia-conf"`
	CpuProtection     *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_CpuProtection      `path:"cpu-protection" module:"nokia-conf"`
	Description       *string                                                                     `path:"description" module:"nokia-conf"`
	Egress            *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress             `path:"egress" module:"nokia-conf"`
	Endpoint          *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Endpoint           `path:"endpoint" module:"nokia-conf"`
	EntropyLabel      YANGEmpty                                                                   `path:"entropy-label" module:"nokia-conf"`
	EthCfm            *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm             `path:"eth-cfm" module:"nokia-conf" yangPresence:"true"`
	ForceVcForwarding E_NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_ForceVcForwarding `path:"force-vc-forwarding" module:"nokia-conf"`
	HashLabel         *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_HashLabel          `path:"hash-label" module:"nokia-conf" yangPresence:"true"`
	Ingress           *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress            `path:"ingress" module:"nokia-conf"`
	MonitorOperGroup  *string                                                                     `path:"monitor-oper-group" module:"nokia-conf"`
	OperGroup         *string                                                                     `path:"oper-group" module:"nokia-conf"`
	PwStatus          *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_PwStatus           `path:"pw-status" module:"nokia-conf"`
	SdpBindId         *string                                                                     `path:"sdp-bind-id" module:"nokia-conf"`
	SourceBmac        *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_SourceBmac         `path:"source-bmac" module:"nokia-conf"`
	TransitPolicy     *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_TransitPolicy      `path:"transit-policy" module:"nokia-conf" yangPresence:"true"`
	VcType            E_NokiaTypesServices_EpipeSdpBindVcType                                     `path:"vc-type" module:"nokia-conf"`
	VlanVcTag         *uint32                                                                     `path:"vlan-vc-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp) IsYANGGoStruct() {}

// GetOrCreateAarp retrieves the value of the Aarp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp) GetOrCreateAarp() *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Aarp {
	if t.Aarp != nil {
		return t.Aarp
	}
	t.Aarp = &NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Aarp{}
	return t.Aarp
}

// GetOrCreateBfd retrieves the value of the Bfd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp) GetOrCreateBfd() *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Bfd {
	if t.Bfd != nil {
		return t.Bfd
	}
	t.Bfd = &NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Bfd{}
	return t.Bfd
}

// GetOrCreateBfdLiveness retrieves the value of the BfdLiveness field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp) GetOrCreateBfdLiveness() *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_BfdLiveness {
	if t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	t.BfdLiveness = &NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_BfdLiveness{}
	return t.BfdLiveness
}

// GetOrCreateCpuProtection retrieves the value of the CpuProtection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp) GetOrCreateCpuProtection() *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_CpuProtection {
	if t.CpuProtection != nil {
		return t.CpuProtection
	}
	t.CpuProtection = &NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_CpuProtection{}
	return t.CpuProtection
}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp) GetOrCreateEgress() *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress{}
	return t.Egress
}

// GetOrCreateEndpoint retrieves the value of the Endpoint field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp) GetOrCreateEndpoint() *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Endpoint {
	if t.Endpoint != nil {
		return t.Endpoint
	}
	t.Endpoint = &NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Endpoint{}
	return t.Endpoint
}

// GetOrCreateEthCfm retrieves the value of the EthCfm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp) GetOrCreateEthCfm() *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm {
	if t.EthCfm != nil {
		return t.EthCfm
	}
	t.EthCfm = &NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm{}
	return t.EthCfm
}

// GetOrCreateHashLabel retrieves the value of the HashLabel field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp) GetOrCreateHashLabel() *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_HashLabel {
	if t.HashLabel != nil {
		return t.HashLabel
	}
	t.HashLabel = &NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_HashLabel{}
	return t.HashLabel
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp) GetOrCreateIngress() *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress{}
	return t.Ingress
}

// GetOrCreatePwStatus retrieves the value of the PwStatus field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp) GetOrCreatePwStatus() *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_PwStatus {
	if t.PwStatus != nil {
		return t.PwStatus
	}
	t.PwStatus = &NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_PwStatus{}
	return t.PwStatus
}

// GetOrCreateSourceBmac retrieves the value of the SourceBmac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp) GetOrCreateSourceBmac() *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_SourceBmac {
	if t.SourceBmac != nil {
		return t.SourceBmac
	}
	t.SourceBmac = &NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_SourceBmac{}
	return t.SourceBmac
}

// GetOrCreateTransitPolicy retrieves the value of the TransitPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp) GetOrCreateTransitPolicy() *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_TransitPolicy {
	if t.TransitPolicy != nil {
		return t.TransitPolicy
	}
	t.TransitPolicy = &NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_TransitPolicy{}
	return t.TransitPolicy
}

// GetAarp returns the value of the Aarp struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp. If the receiver or the field Aarp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp) GetAarp() *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Aarp {
	if t != nil && t.Aarp != nil {
		return t.Aarp
	}
	return nil
}

// GetBfd returns the value of the Bfd struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp. If the receiver or the field Bfd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp) GetBfd() *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Bfd {
	if t != nil && t.Bfd != nil {
		return t.Bfd
	}
	return nil
}

// GetBfdLiveness returns the value of the BfdLiveness struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp. If the receiver or the field BfdLiveness is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp) GetBfdLiveness() *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_BfdLiveness {
	if t != nil && t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	return nil
}

// GetCpuProtection returns the value of the CpuProtection struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp. If the receiver or the field CpuProtection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp) GetCpuProtection() *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_CpuProtection {
	if t != nil && t.CpuProtection != nil {
		return t.CpuProtection
	}
	return nil
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp) GetEgress() *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetEndpoint returns the value of the Endpoint struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp. If the receiver or the field Endpoint is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp) GetEndpoint() *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Endpoint {
	if t != nil && t.Endpoint != nil {
		return t.Endpoint
	}
	return nil
}

// GetEthCfm returns the value of the EthCfm struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp. If the receiver or the field EthCfm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp) GetEthCfm() *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm {
	if t != nil && t.EthCfm != nil {
		return t.EthCfm
	}
	return nil
}

// GetHashLabel returns the value of the HashLabel struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp. If the receiver or the field HashLabel is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp) GetHashLabel() *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_HashLabel {
	if t != nil && t.HashLabel != nil {
		return t.HashLabel
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp) GetIngress() *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetPwStatus returns the value of the PwStatus struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp. If the receiver or the field PwStatus is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp) GetPwStatus() *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_PwStatus {
	if t != nil && t.PwStatus != nil {
		return t.PwStatus
	}
	return nil
}

// GetSourceBmac returns the value of the SourceBmac struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp. If the receiver or the field SourceBmac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp) GetSourceBmac() *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_SourceBmac {
	if t != nil && t.SourceBmac != nil {
		return t.SourceBmac
	}
	return nil
}

// GetTransitPolicy returns the value of the TransitPolicy struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp. If the receiver or the field TransitPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp) GetTransitPolicy() *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_TransitPolicy {
	if t != nil && t.TransitPolicy != nil {
		return t.TransitPolicy
	}
	return nil
}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetAdvServiceMtu retrieves the value of the leaf AdvServiceMtu from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvServiceMtu is set, it can
// safely use t.GetAdvServiceMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvServiceMtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp) GetAdvServiceMtu() int32 {
	if t == nil || t.AdvServiceMtu == nil {
		return 0
	}
	return *t.AdvServiceMtu
}

// GetAppProfile retrieves the value of the leaf AppProfile from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AppProfile is set, it can
// safely use t.GetAppProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AppProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp) GetAppProfile() string {
	if t == nil || t.AppProfile == nil {
		return ""
	}
	return *t.AppProfile
}

// GetBandwidth retrieves the value of the leaf Bandwidth from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bandwidth is set, it can
// safely use t.GetBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp) GetBandwidth() NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Bandwidth_Union {
	if t == nil || t.Bandwidth == nil {
		return UnionUint32(0)
	}
	return t.Bandwidth
}

// GetBfdTemplate retrieves the value of the leaf BfdTemplate from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdTemplate is set, it can
// safely use t.GetBfdTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp) GetBfdTemplate() string {
	if t == nil || t.BfdTemplate == nil {
		return ""
	}
	return *t.BfdTemplate
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// GetControlWord retrieves the value of the leaf ControlWord from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ControlWord is set, it can
// safely use t.GetControlWord() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ControlWord == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp) GetControlWord() bool {
	if t == nil || t.ControlWord == nil {
		return false
	}
	return *t.ControlWord
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEntropyLabel retrieves the value of the leaf EntropyLabel from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntropyLabel is set, it can
// safely use t.GetEntropyLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntropyLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp) GetEntropyLabel() YANGEmpty {
	if t == nil || t.EntropyLabel == false {
		return false
	}
	return t.EntropyLabel
}

// GetForceVcForwarding retrieves the value of the leaf ForceVcForwarding from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForceVcForwarding is set, it can
// safely use t.GetForceVcForwarding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForceVcForwarding == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp) GetForceVcForwarding() E_NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_ForceVcForwarding {
	if t == nil || t.ForceVcForwarding == 0 {
		return 0
	}
	return t.ForceVcForwarding
}

// GetMonitorOperGroup retrieves the value of the leaf MonitorOperGroup from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorOperGroup is set, it can
// safely use t.GetMonitorOperGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorOperGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp) GetMonitorOperGroup() string {
	if t == nil || t.MonitorOperGroup == nil {
		return ""
	}
	return *t.MonitorOperGroup
}

// GetOperGroup retrieves the value of the leaf OperGroup from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OperGroup is set, it can
// safely use t.GetOperGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OperGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp) GetOperGroup() string {
	if t == nil || t.OperGroup == nil {
		return ""
	}
	return *t.OperGroup
}

// GetSdpBindId retrieves the value of the leaf SdpBindId from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SdpBindId is set, it can
// safely use t.GetSdpBindId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SdpBindId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp) GetSdpBindId() string {
	if t == nil || t.SdpBindId == nil {
		return ""
	}
	return *t.SdpBindId
}

// GetVcType retrieves the value of the leaf VcType from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VcType is set, it can
// safely use t.GetVcType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VcType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp) GetVcType() E_NokiaTypesServices_EpipeSdpBindVcType {
	if t == nil || t.VcType == 0 {
		return NokiaTypesServices_EpipeSdpBindVcType_ether
	}
	return t.VcType
}

// GetVlanVcTag retrieves the value of the leaf VlanVcTag from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VlanVcTag is set, it can
// safely use t.GetVlanVcTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VlanVcTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp) GetVlanVcTag() uint32 {
	if t == nil || t.VlanVcTag == nil {
		return 0
	}
	return *t.VlanVcTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Bandwidth == nil {
		t.Bandwidth = UnionUint32(0)
	}
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
	if t.ControlWord == nil {
		var v bool = false
		t.ControlWord = &v
	}
	if t.VcType == 0 {
		t.VcType = NokiaTypesServices_EpipeSdpBindVcType_ether
	}
	t.Aarp.PopulateDefaults()
	t.Bfd.PopulateDefaults()
	t.BfdLiveness.PopulateDefaults()
	t.CpuProtection.PopulateDefaults()
	t.Egress.PopulateDefaults()
	t.Endpoint.PopulateDefaults()
	t.EthCfm.PopulateDefaults()
	t.HashLabel.PopulateDefaults()
	t.Ingress.PopulateDefaults()
	t.PwStatus.PopulateDefaults()
	t.SourceBmac.PopulateDefaults()
	t.TransitPolicy.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SdpBindId == nil {
		return nil, fmt.Errorf("nil value for key SdpBindId")
	}

	return map[string]interface{}{
		"sdp-bind-id": *t.SdpBindId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Aarp represents the /nokia-conf/configure/groups/group/service/epipe/spoke-sdp/aarp YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Aarp struct {
	Id   *uint32                                              `path:"id" module:"nokia-conf"`
	Type E_NokiaTypesServices_DualHomingBsxAarpServiceRefType `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Aarp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Aarp) IsYANGGoStruct() {}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Aarp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Aarp) GetId() uint32 {
	if t == nil || t.Id == nil {
		return 0
	}
	return *t.Id
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Aarp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Aarp) GetType() E_NokiaTypesServices_DualHomingBsxAarpServiceRefType {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Aarp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Aarp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Aarp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Aarp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Aarp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Aarp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Aarp.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Aarp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Bfd represents the /nokia-conf/configure/groups/group/service/epipe/spoke-sdp/bfd YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Bfd struct {
	BfdLiveness    *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Bfd_BfdLiveness `path:"bfd-liveness" module:"nokia-conf" yangPresence:"true"`
	BfdTemplate    *string                                                                  `path:"bfd-template" module:"nokia-conf"`
	FailureAction  E_NokiaTypesServices_SbindBfdFailAction                                  `path:"failure-action" module:"nokia-conf"`
	WaitForUpTimer *uint32                                                                  `path:"wait-for-up-timer" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Bfd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Bfd) IsYANGGoStruct() {}

// GetOrCreateBfdLiveness retrieves the value of the BfdLiveness field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Bfd) GetOrCreateBfdLiveness() *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Bfd_BfdLiveness {
	if t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	t.BfdLiveness = &NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Bfd_BfdLiveness{}
	return t.BfdLiveness
}

// GetBfdLiveness returns the value of the BfdLiveness struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Bfd. If the receiver or the field BfdLiveness is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Bfd) GetBfdLiveness() *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Bfd_BfdLiveness {
	if t != nil && t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	return nil
}

// GetBfdTemplate retrieves the value of the leaf BfdTemplate from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdTemplate is set, it can
// safely use t.GetBfdTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Bfd) GetBfdTemplate() string {
	if t == nil || t.BfdTemplate == nil {
		return ""
	}
	return *t.BfdTemplate
}

// GetFailureAction retrieves the value of the leaf FailureAction from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FailureAction is set, it can
// safely use t.GetFailureAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FailureAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Bfd) GetFailureAction() E_NokiaTypesServices_SbindBfdFailAction {
	if t == nil || t.FailureAction == 0 {
		return NokiaTypesServices_SbindBfdFailAction_none
	}
	return t.FailureAction
}

// GetWaitForUpTimer retrieves the value of the leaf WaitForUpTimer from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WaitForUpTimer is set, it can
// safely use t.GetWaitForUpTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WaitForUpTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Bfd) GetWaitForUpTimer() uint32 {
	if t == nil || t.WaitForUpTimer == nil {
		return 0
	}
	return *t.WaitForUpTimer
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Bfd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Bfd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FailureAction == 0 {
		t.FailureAction = NokiaTypesServices_SbindBfdFailAction_none
	}
	t.BfdLiveness.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Bfd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Bfd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Bfd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Bfd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Bfd.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Bfd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_BfdLiveness represents the /nokia-conf/configure/groups/group/service/epipe/spoke-sdp/bfd-liveness YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_BfdLiveness struct {
	Encap E_NokiaTypesServices_BfdEncap `path:"encap" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_BfdLiveness implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_BfdLiveness) IsYANGGoStruct() {}

// GetEncap retrieves the value of the leaf Encap from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Encap is set, it can
// safely use t.GetEncap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Encap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_BfdLiveness) GetEncap() E_NokiaTypesServices_BfdEncap {
	if t == nil || t.Encap == 0 {
		return NokiaTypesServices_BfdEncap_ipv4
	}
	return t.Encap
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_BfdLiveness
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_BfdLiveness) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Encap == 0 {
		t.Encap = NokiaTypesServices_BfdEncap_ipv4
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_BfdLiveness) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_BfdLiveness"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_BfdLiveness) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_BfdLiveness) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_BfdLiveness.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_BfdLiveness) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Bfd_BfdLiveness represents the /nokia-conf/configure/groups/group/service/epipe/spoke-sdp/bfd/bfd-liveness YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Bfd_BfdLiveness struct {
	Encap E_NokiaTypesServices_BfdEncap `path:"encap" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Bfd_BfdLiveness implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Bfd_BfdLiveness) IsYANGGoStruct() {}

// GetEncap retrieves the value of the leaf Encap from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Bfd_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Encap is set, it can
// safely use t.GetEncap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Encap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Bfd_BfdLiveness) GetEncap() E_NokiaTypesServices_BfdEncap {
	if t == nil || t.Encap == 0 {
		return NokiaTypesServices_BfdEncap_ipv4
	}
	return t.Encap
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Bfd_BfdLiveness
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Bfd_BfdLiveness) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Encap == 0 {
		t.Encap = NokiaTypesServices_BfdEncap_ipv4
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Bfd_BfdLiveness) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Bfd_BfdLiveness"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Bfd_BfdLiveness) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Bfd_BfdLiveness) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Bfd_BfdLiveness.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Bfd_BfdLiveness) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_CpuProtection represents the /nokia-conf/configure/groups/group/service/epipe/spoke-sdp/cpu-protection YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_CpuProtection struct {
	EthCfmMonitoring *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_CpuProtection_EthCfmMonitoring `path:"eth-cfm-monitoring" module:"nokia-conf" yangPresence:"true"`
	MacMonitoring    YANGEmpty                                                                               `path:"mac-monitoring" module:"nokia-conf"`
	PolicyId         *uint32                                                                                 `path:"policy-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_CpuProtection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_CpuProtection) IsYANGGoStruct() {}

// GetOrCreateEthCfmMonitoring retrieves the value of the EthCfmMonitoring field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_CpuProtection) GetOrCreateEthCfmMonitoring() *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_CpuProtection_EthCfmMonitoring {
	if t.EthCfmMonitoring != nil {
		return t.EthCfmMonitoring
	}
	t.EthCfmMonitoring = &NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_CpuProtection_EthCfmMonitoring{}
	return t.EthCfmMonitoring
}

// GetEthCfmMonitoring returns the value of the EthCfmMonitoring struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_CpuProtection. If the receiver or the field EthCfmMonitoring is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_CpuProtection) GetEthCfmMonitoring() *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_CpuProtection_EthCfmMonitoring {
	if t != nil && t.EthCfmMonitoring != nil {
		return t.EthCfmMonitoring
	}
	return nil
}

// GetMacMonitoring retrieves the value of the leaf MacMonitoring from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_CpuProtection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacMonitoring is set, it can
// safely use t.GetMacMonitoring() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacMonitoring == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_CpuProtection) GetMacMonitoring() YANGEmpty {
	if t == nil || t.MacMonitoring == false {
		return false
	}
	return t.MacMonitoring
}

// GetPolicyId retrieves the value of the leaf PolicyId from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_CpuProtection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyId is set, it can
// safely use t.GetPolicyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_CpuProtection) GetPolicyId() uint32 {
	if t == nil || t.PolicyId == nil {
		return 0
	}
	return *t.PolicyId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_CpuProtection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_CpuProtection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.EthCfmMonitoring.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_CpuProtection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_CpuProtection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_CpuProtection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_CpuProtection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_CpuProtection.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_CpuProtection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_CpuProtection_EthCfmMonitoring represents the /nokia-conf/configure/groups/group/service/epipe/spoke-sdp/cpu-protection/eth-cfm-monitoring YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_CpuProtection_EthCfmMonitoring struct {
	Aggregate YANGEmpty `path:"aggregate" module:"nokia-conf"`
	Car       YANGEmpty `path:"car" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_CpuProtection_EthCfmMonitoring implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_CpuProtection_EthCfmMonitoring) IsYANGGoStruct() {
}

// GetAggregate retrieves the value of the leaf Aggregate from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_CpuProtection_EthCfmMonitoring
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Aggregate is set, it can
// safely use t.GetAggregate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Aggregate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_CpuProtection_EthCfmMonitoring) GetAggregate() YANGEmpty {
	if t == nil || t.Aggregate == false {
		return false
	}
	return t.Aggregate
}

// GetCar retrieves the value of the leaf Car from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_CpuProtection_EthCfmMonitoring
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Car is set, it can
// safely use t.GetCar() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Car == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_CpuProtection_EthCfmMonitoring) GetCar() YANGEmpty {
	if t == nil || t.Car == false {
		return false
	}
	return t.Car
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_CpuProtection_EthCfmMonitoring
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_CpuProtection_EthCfmMonitoring) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_CpuProtection_EthCfmMonitoring) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_CpuProtection_EthCfmMonitoring"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_CpuProtection_EthCfmMonitoring) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_CpuProtection_EthCfmMonitoring) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_CpuProtection_EthCfmMonitoring.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_CpuProtection_EthCfmMonitoring) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress represents the /nokia-conf/configure/groups/group/service/epipe/spoke-sdp/egress YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress struct {
	Filter  *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Filter `path:"filter" module:"nokia-conf"`
	L2Tpv3  *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_L2Tpv3 `path:"l2tpv3" module:"nokia-conf"`
	Qos     *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Qos    `path:"qos" module:"nokia-conf"`
	VcLabel *uint32                                                                `path:"vc-label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress) IsYANGGoStruct() {}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress) GetOrCreateFilter() *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Filter{}
	return t.Filter
}

// GetOrCreateL2Tpv3 retrieves the value of the L2Tpv3 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress) GetOrCreateL2Tpv3() *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_L2Tpv3 {
	if t.L2Tpv3 != nil {
		return t.L2Tpv3
	}
	t.L2Tpv3 = &NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_L2Tpv3{}
	return t.L2Tpv3
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress) GetOrCreateQos() *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Qos{}
	return t.Qos
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress) GetFilter() *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetL2Tpv3 returns the value of the L2Tpv3 struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress. If the receiver or the field L2Tpv3 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress) GetL2Tpv3() *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_L2Tpv3 {
	if t != nil && t.L2Tpv3 != nil {
		return t.L2Tpv3
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress) GetQos() *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// GetVcLabel retrieves the value of the leaf VcLabel from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VcLabel is set, it can
// safely use t.GetVcLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VcLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress) GetVcLabel() uint32 {
	if t == nil || t.VcLabel == nil {
		return 0
	}
	return *t.VcLabel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Filter.PopulateDefaults()
	t.L2Tpv3.PopulateDefaults()
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Filter represents the /nokia-conf/configure/groups/group/service/epipe/spoke-sdp/egress/filter YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Filter struct {
	Ip   *string `path:"ip" module:"nokia-conf"`
	Ipv6 *string `path:"ipv6" module:"nokia-conf"`
	Mac  *string `path:"mac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Filter) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Filter) GetIpv6() string {
	if t == nil || t.Ipv6 == nil {
		return ""
	}
	return *t.Ipv6
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Filter) GetMac() string {
	if t == nil || t.Mac == nil {
		return ""
	}
	return *t.Mac
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Filter.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_L2Tpv3 represents the /nokia-conf/configure/groups/group/service/epipe/spoke-sdp/egress/l2tpv3 YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_L2Tpv3 struct {
	Cookie *string `path:"cookie" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_L2Tpv3 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_L2Tpv3) IsYANGGoStruct() {}

// GetCookie retrieves the value of the leaf Cookie from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_L2Tpv3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cookie is set, it can
// safely use t.GetCookie() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cookie == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_L2Tpv3) GetCookie() string {
	if t == nil || t.Cookie == nil {
		return ""
	}
	return *t.Cookie
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_L2Tpv3
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_L2Tpv3) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_L2Tpv3) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_L2Tpv3"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_L2Tpv3) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_L2Tpv3) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_L2Tpv3.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_L2Tpv3) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Qos represents the /nokia-conf/configure/groups/group/service/epipe/spoke-sdp/egress/qos YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Qos struct {
	Network *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Qos_Network `path:"network" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Qos) IsYANGGoStruct() {}

// GetOrCreateNetwork retrieves the value of the Network field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Qos) GetOrCreateNetwork() *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Qos_Network {
	if t.Network != nil {
		return t.Network
	}
	t.Network = &NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Qos_Network{}
	return t.Network
}

// GetNetwork returns the value of the Network struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Qos. If the receiver or the field Network is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Qos) GetNetwork() *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Qos_Network {
	if t != nil && t.Network != nil {
		return t.Network
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Network.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Qos.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Qos_Network represents the /nokia-conf/configure/groups/group/service/epipe/spoke-sdp/egress/qos/network YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Qos_Network struct {
	PolicyName        *string                                                                                       `path:"policy-name" module:"nokia-conf"`
	PortRedirectGroup *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup `path:"port-redirect-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Qos_Network implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Qos_Network) IsYANGGoStruct() {}

// GetOrCreatePortRedirectGroup retrieves the value of the PortRedirectGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Qos_Network) GetOrCreatePortRedirectGroup() *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup {
	if t.PortRedirectGroup != nil {
		return t.PortRedirectGroup
	}
	t.PortRedirectGroup = &NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup{}
	return t.PortRedirectGroup
}

// GetPortRedirectGroup returns the value of the PortRedirectGroup struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Qos_Network. If the receiver or the field PortRedirectGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Qos_Network) GetPortRedirectGroup() *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup {
	if t != nil && t.PortRedirectGroup != nil {
		return t.PortRedirectGroup
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Qos_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Qos_Network) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Qos_Network
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Qos_Network) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PortRedirectGroup.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Qos_Network) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Qos_Network"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Qos_Network) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Qos_Network) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Qos_Network.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Qos_Network) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup represents the /nokia-conf/configure/groups/group/service/epipe/spoke-sdp/egress/qos/network/port-redirect-group YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup struct {
	GroupName *string `path:"group-name" module:"nokia-conf"`
	Instance  *uint32 `path:"instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) IsYANGGoStruct() {
}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// GetInstance retrieves the value of the leaf Instance from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instance is set, it can
// safely use t.GetInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) GetInstance() uint32 {
	if t == nil || t.Instance == nil {
		return 0
	}
	return *t.Instance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Egress_Qos_Network_PortRedirectGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Endpoint represents the /nokia-conf/configure/groups/group/service/epipe/spoke-sdp/endpoint YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Endpoint struct {
	Icb        *bool                                                                             `path:"icb" module:"nokia-conf"`
	Name       *string                                                                           `path:"name" module:"nokia-conf"`
	Precedence NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Endpoint_Precedence_Union `path:"precedence" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Endpoint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Endpoint) IsYANGGoStruct() {}

// GetIcb retrieves the value of the leaf Icb from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Icb is set, it can
// safely use t.GetIcb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Icb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Endpoint) GetIcb() bool {
	if t == nil || t.Icb == nil {
		return false
	}
	return *t.Icb
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Endpoint) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPrecedence retrieves the value of the leaf Precedence from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Precedence is set, it can
// safely use t.GetPrecedence() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Precedence == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Endpoint) GetPrecedence() NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Endpoint_Precedence_Union {
	if t == nil || t.Precedence == nil {
		return UnionUint32(4)
	}
	return t.Precedence
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Endpoint
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Endpoint) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Icb == nil {
		var v bool = false
		t.Icb = &v
	}
	if t.Precedence == nil {
		t.Precedence = UnionUint32(4)
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Endpoint) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Endpoint"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Endpoint) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Endpoint) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Endpoint.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Endpoint) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm represents the /nokia-conf/configure/groups/group/service/epipe/spoke-sdp/eth-cfm YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm struct {
	CollectLmmFcStats        *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_CollectLmmFcStats                                                                            `path:"collect-lmm-fc-stats" module:"nokia-conf"`
	CollectLmmStats          *bool                                                                                                                                                        `path:"collect-lmm-stats" module:"nokia-conf"`
	Mep                      map[NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Key]*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep               `path:"mep" module:"nokia-conf"`
	Mip                      map[NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mip_PrimaryVlan_Union]*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mip `path:"mip" module:"nokia-conf"`
	SquelchIngressCtagLevels []uint32                                                                                                                                                     `path:"squelch-ingress-ctag-levels" module:"nokia-conf"`
	SquelchIngressLevels     []uint32                                                                                                                                                     `path:"squelch-ingress-levels" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm) IsYANGGoStruct() {}

// NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Key represents the key for list Mep of element /nokia-conf/configure/groups/group/service/epipe/spoke-sdp/eth-cfm.
type NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Key struct {
	MdAdminName string                                                                         `path:"md-admin-name"`
	MaAdminName string                                                                         `path:"ma-admin-name"`
	MepId       NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_MepId_Union `path:"mep-id"`
}

// NewMep creates a new entry in the Mep list of the
// NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm) NewMep(MdAdminName string, MaAdminName string, MepId NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_MepId_Union) (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mep == nil {
		t.Mep = make(map[NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Key]*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep)
	}

	key := NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mep[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mep", key)
	}

	t.Mep[key] = &NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep{
		MdAdminName: &MdAdminName,
		MaAdminName: &MaAdminName,
		MepId:       MepId,
	}

	return t.Mep[key], nil
}

// RenameMep renames an entry in the list Mep within
// the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm) RenameMep(oldK, newK NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Key) error {
	if _, ok := t.Mep[newK]; ok {
		return fmt.Errorf("key %v already exists in Mep", newK)
	}

	e, ok := t.Mep[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mep", oldK)
	}
	e.MdAdminName = &newK.MdAdminName
	e.MaAdminName = &newK.MaAdminName
	e.MepId = newK.MepId

	t.Mep[newK] = e
	delete(t.Mep, oldK)
	return nil
}

// GetOrCreateMep retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm) GetOrCreateMep(MdAdminName string, MaAdminName string, MepId NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_MepId_Union) *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep {

	key := NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	if v, ok := t.Mep[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMep(MdAdminName, MaAdminName, MepId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMep got unexpected error: %v", err))
	}
	return v
}

// GetMep retrieves the value with the specified key from
// the Mep map field of NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm) GetMep(MdAdminName string, MaAdminName string, MepId NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_MepId_Union) *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	if lm, ok := t.Mep[key]; ok {
		return lm
	}
	return nil
}

// DeleteMep deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm) DeleteMep(MdAdminName string, MaAdminName string, MepId NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_MepId_Union) {
	key := NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	delete(t.Mep, key)
}

// AppendMep appends the supplied NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep struct to the
// list Mep of NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm) AppendMep(v *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep) error {
	if v.MdAdminName == nil {
		return fmt.Errorf("invalid nil key for MdAdminName")
	}

	if v.MaAdminName == nil {
		return fmt.Errorf("invalid nil key for MaAdminName")
	}

	key := NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Key{
		MdAdminName: *v.MdAdminName,
		MaAdminName: *v.MaAdminName,
		MepId:       v.MepId,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mep == nil {
		t.Mep = make(map[NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Key]*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep)
	}

	if _, ok := t.Mep[key]; ok {
		return fmt.Errorf("duplicate key for list Mep %v", key)
	}

	t.Mep[key] = v
	return nil
}

// NewMip creates a new entry in the Mip list of the
// NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm) NewMip(PrimaryVlan NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mip_PrimaryVlan_Union) (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mip, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mip == nil {
		t.Mip = make(map[NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mip_PrimaryVlan_Union]*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mip)
	}

	key := PrimaryVlan

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mip[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mip", key)
	}

	t.Mip[key] = &NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mip{
		PrimaryVlan: PrimaryVlan,
	}

	return t.Mip[key], nil
}

// RenameMip renames an entry in the list Mip within
// the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm) RenameMip(oldK, newK NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mip_PrimaryVlan_Union) error {
	if _, ok := t.Mip[newK]; ok {
		return fmt.Errorf("key %v already exists in Mip", newK)
	}

	e, ok := t.Mip[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mip", oldK)
	}
	e.PrimaryVlan = newK

	t.Mip[newK] = e
	delete(t.Mip, oldK)
	return nil
}

// GetOrCreateMip retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm) GetOrCreateMip(PrimaryVlan NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mip_PrimaryVlan_Union) *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mip {

	key := PrimaryVlan

	if v, ok := t.Mip[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMip(PrimaryVlan)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMip got unexpected error: %v", err))
	}
	return v
}

// GetMip retrieves the value with the specified key from
// the Mip map field of NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm) GetMip(PrimaryVlan NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mip_PrimaryVlan_Union) *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mip {

	if t == nil {
		return nil
	}

	key := PrimaryVlan

	if lm, ok := t.Mip[key]; ok {
		return lm
	}
	return nil
}

// DeleteMip deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm) DeleteMip(PrimaryVlan NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mip_PrimaryVlan_Union) {
	key := PrimaryVlan

	delete(t.Mip, key)
}

// AppendMip appends the supplied NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mip struct to the
// list Mip of NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mip already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm) AppendMip(v *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mip) error {
	key := v.PrimaryVlan

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mip == nil {
		t.Mip = make(map[NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mip_PrimaryVlan_Union]*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mip)
	}

	if _, ok := t.Mip[key]; ok {
		return fmt.Errorf("duplicate key for list Mip %v", key)
	}

	t.Mip[key] = v
	return nil
}

// GetOrCreateCollectLmmFcStats retrieves the value of the CollectLmmFcStats field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm) GetOrCreateCollectLmmFcStats() *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_CollectLmmFcStats {
	if t.CollectLmmFcStats != nil {
		return t.CollectLmmFcStats
	}
	t.CollectLmmFcStats = &NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_CollectLmmFcStats{}
	return t.CollectLmmFcStats
}

// GetCollectLmmFcStats returns the value of the CollectLmmFcStats struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm. If the receiver or the field CollectLmmFcStats is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm) GetCollectLmmFcStats() *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_CollectLmmFcStats {
	if t != nil && t.CollectLmmFcStats != nil {
		return t.CollectLmmFcStats
	}
	return nil
}

// GetCollectLmmStats retrieves the value of the leaf CollectLmmStats from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectLmmStats is set, it can
// safely use t.GetCollectLmmStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectLmmStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm) GetCollectLmmStats() bool {
	if t == nil || t.CollectLmmStats == nil {
		return false
	}
	return *t.CollectLmmStats
}

// GetSquelchIngressCtagLevels retrieves the value of the leaf SquelchIngressCtagLevels from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SquelchIngressCtagLevels is set, it can
// safely use t.GetSquelchIngressCtagLevels() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SquelchIngressCtagLevels == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm) GetSquelchIngressCtagLevels() []uint32 {
	if t == nil || t.SquelchIngressCtagLevels == nil {
		return nil
	}
	return t.SquelchIngressCtagLevels
}

// GetSquelchIngressLevels retrieves the value of the leaf SquelchIngressLevels from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SquelchIngressLevels is set, it can
// safely use t.GetSquelchIngressLevels() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SquelchIngressLevels == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm) GetSquelchIngressLevels() []uint32 {
	if t == nil || t.SquelchIngressLevels == nil {
		return nil
	}
	return t.SquelchIngressLevels
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CollectLmmStats == nil {
		var v bool = false
		t.CollectLmmStats = &v
	}
	t.CollectLmmFcStats.PopulateDefaults()
	for _, e := range t.Mep {
		e.PopulateDefaults()
	}
	for _, e := range t.Mip {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_CollectLmmFcStats represents the /nokia-conf/configure/groups/group/service/epipe/spoke-sdp/eth-cfm/collect-lmm-fc-stats YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_CollectLmmFcStats struct {
	Fc          []E_NokiaTypesEthCfm_FcType `path:"fc" module:"nokia-conf"`
	FcInProfile []E_NokiaTypesEthCfm_FcType `path:"fc-in-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_CollectLmmFcStats implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_CollectLmmFcStats) IsYANGGoStruct() {
}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_CollectLmmFcStats
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_CollectLmmFcStats) GetFc() []E_NokiaTypesEthCfm_FcType {
	if t == nil || t.Fc == nil {
		return nil
	}
	return t.Fc
}

// GetFcInProfile retrieves the value of the leaf FcInProfile from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_CollectLmmFcStats
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FcInProfile is set, it can
// safely use t.GetFcInProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FcInProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_CollectLmmFcStats) GetFcInProfile() []E_NokiaTypesEthCfm_FcType {
	if t == nil || t.FcInProfile == nil {
		return nil
	}
	return t.FcInProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_CollectLmmFcStats
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_CollectLmmFcStats) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_CollectLmmFcStats) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_CollectLmmFcStats"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_CollectLmmFcStats) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_CollectLmmFcStats) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_CollectLmmFcStats.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_CollectLmmFcStats) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep represents the /nokia-conf/configure/groups/group/service/epipe/spoke-sdp/eth-cfm/mep YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep struct {
	AdminState           E_NokiaTypesSros_AdminState                                                           `path:"admin-state" module:"nokia-conf"`
	Ais                  *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Ais               `path:"ais" module:"nokia-conf" yangPresence:"true"`
	AlarmNotification    *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_AlarmNotification `path:"alarm-notification" module:"nokia-conf"`
	Ccm                  *bool                                                                                 `path:"ccm" module:"nokia-conf"`
	CcmLtmPriority       *uint8                                                                                `path:"ccm-ltm-priority" module:"nokia-conf"`
	CcmPaddingSize       *uint32                                                                               `path:"ccm-padding-size" module:"nokia-conf"`
	CfmVlanTag           *string                                                                               `path:"cfm-vlan-tag" module:"nokia-conf"`
	Csf                  *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Csf               `path:"csf" module:"nokia-conf" yangPresence:"true"`
	Description          *string                                                                               `path:"description" module:"nokia-conf"`
	Direction            E_NokiaTypesEthCfm_MpDirection                                                        `path:"direction" module:"nokia-conf"`
	EthTest              *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest           `path:"eth-test" module:"nokia-conf" yangPresence:"true"`
	FaultPropagation     E_NokiaTypesEthCfm_FaultPropagationType                                               `path:"fault-propagation" module:"nokia-conf"`
	Grace                *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace             `path:"grace" module:"nokia-conf"`
	InstallMep           *bool                                                                                 `path:"install-mep" module:"nokia-conf"`
	LbmSvcActResponder   *bool                                                                                 `path:"lbm-svc-act-responder" module:"nokia-conf"`
	LowPriorityDefect    E_NokiaTypesEthCfm_LowestAlarmPriority                                                `path:"low-priority-defect" module:"nokia-conf"`
	MaAdminName          *string                                                                               `path:"ma-admin-name" module:"nokia-conf"`
	MacAddress           *string                                                                               `path:"mac-address" module:"nokia-conf"`
	MdAdminName          *string                                                                               `path:"md-admin-name" module:"nokia-conf"`
	MepId                NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_MepId_Union        `path:"mep-id" module:"nokia-conf"`
	OneWayDelayThreshold *uint32                                                                               `path:"one-way-delay-threshold" module:"nokia-conf"`
	PrimaryVlan          *bool                                                                                 `path:"primary-vlan" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep) IsYANGGoStruct() {}

// GetOrCreateAis retrieves the value of the Ais field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep) GetOrCreateAis() *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Ais {
	if t.Ais != nil {
		return t.Ais
	}
	t.Ais = &NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Ais{}
	return t.Ais
}

// GetOrCreateAlarmNotification retrieves the value of the AlarmNotification field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep) GetOrCreateAlarmNotification() *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_AlarmNotification {
	if t.AlarmNotification != nil {
		return t.AlarmNotification
	}
	t.AlarmNotification = &NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_AlarmNotification{}
	return t.AlarmNotification
}

// GetOrCreateCsf retrieves the value of the Csf field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep) GetOrCreateCsf() *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Csf {
	if t.Csf != nil {
		return t.Csf
	}
	t.Csf = &NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Csf{}
	return t.Csf
}

// GetOrCreateEthTest retrieves the value of the EthTest field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep) GetOrCreateEthTest() *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest {
	if t.EthTest != nil {
		return t.EthTest
	}
	t.EthTest = &NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest{}
	return t.EthTest
}

// GetOrCreateGrace retrieves the value of the Grace field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep) GetOrCreateGrace() *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace {
	if t.Grace != nil {
		return t.Grace
	}
	t.Grace = &NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace{}
	return t.Grace
}

// GetAis returns the value of the Ais struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep. If the receiver or the field Ais is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep) GetAis() *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Ais {
	if t != nil && t.Ais != nil {
		return t.Ais
	}
	return nil
}

// GetAlarmNotification returns the value of the AlarmNotification struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep. If the receiver or the field AlarmNotification is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep) GetAlarmNotification() *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_AlarmNotification {
	if t != nil && t.AlarmNotification != nil {
		return t.AlarmNotification
	}
	return nil
}

// GetCsf returns the value of the Csf struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep. If the receiver or the field Csf is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep) GetCsf() *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Csf {
	if t != nil && t.Csf != nil {
		return t.Csf
	}
	return nil
}

// GetEthTest returns the value of the EthTest struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep. If the receiver or the field EthTest is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep) GetEthTest() *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest {
	if t != nil && t.EthTest != nil {
		return t.EthTest
	}
	return nil
}

// GetGrace returns the value of the Grace struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep. If the receiver or the field Grace is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep) GetGrace() *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace {
	if t != nil && t.Grace != nil {
		return t.Grace
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetCcm retrieves the value of the leaf Ccm from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ccm is set, it can
// safely use t.GetCcm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ccm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep) GetCcm() bool {
	if t == nil || t.Ccm == nil {
		return false
	}
	return *t.Ccm
}

// GetCcmLtmPriority retrieves the value of the leaf CcmLtmPriority from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CcmLtmPriority is set, it can
// safely use t.GetCcmLtmPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CcmLtmPriority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep) GetCcmLtmPriority() uint8 {
	if t == nil || t.CcmLtmPriority == nil {
		return 7
	}
	return *t.CcmLtmPriority
}

// GetCcmPaddingSize retrieves the value of the leaf CcmPaddingSize from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CcmPaddingSize is set, it can
// safely use t.GetCcmPaddingSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CcmPaddingSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep) GetCcmPaddingSize() uint32 {
	if t == nil || t.CcmPaddingSize == nil {
		return 0
	}
	return *t.CcmPaddingSize
}

// GetCfmVlanTag retrieves the value of the leaf CfmVlanTag from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CfmVlanTag is set, it can
// safely use t.GetCfmVlanTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CfmVlanTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep) GetCfmVlanTag() string {
	if t == nil || t.CfmVlanTag == nil {
		return ""
	}
	return *t.CfmVlanTag
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep) GetDirection() E_NokiaTypesEthCfm_MpDirection {
	if t == nil || t.Direction == 0 {
		return NokiaTypesEthCfm_MpDirection_down
	}
	return t.Direction
}

// GetFaultPropagation retrieves the value of the leaf FaultPropagation from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FaultPropagation is set, it can
// safely use t.GetFaultPropagation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FaultPropagation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep) GetFaultPropagation() E_NokiaTypesEthCfm_FaultPropagationType {
	if t == nil || t.FaultPropagation == 0 {
		return 0
	}
	return t.FaultPropagation
}

// GetInstallMep retrieves the value of the leaf InstallMep from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InstallMep is set, it can
// safely use t.GetInstallMep() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InstallMep == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep) GetInstallMep() bool {
	if t == nil || t.InstallMep == nil {
		return false
	}
	return *t.InstallMep
}

// GetLbmSvcActResponder retrieves the value of the leaf LbmSvcActResponder from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LbmSvcActResponder is set, it can
// safely use t.GetLbmSvcActResponder() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LbmSvcActResponder == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep) GetLbmSvcActResponder() bool {
	if t == nil || t.LbmSvcActResponder == nil {
		return false
	}
	return *t.LbmSvcActResponder
}

// GetLowPriorityDefect retrieves the value of the leaf LowPriorityDefect from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowPriorityDefect is set, it can
// safely use t.GetLowPriorityDefect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowPriorityDefect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep) GetLowPriorityDefect() E_NokiaTypesEthCfm_LowestAlarmPriority {
	if t == nil || t.LowPriorityDefect == 0 {
		return NokiaTypesEthCfm_LowestAlarmPriority_mac_rem_err_xcon
	}
	return t.LowPriorityDefect
}

// GetMaAdminName retrieves the value of the leaf MaAdminName from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaAdminName is set, it can
// safely use t.GetMaAdminName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaAdminName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep) GetMaAdminName() string {
	if t == nil || t.MaAdminName == nil {
		return ""
	}
	return *t.MaAdminName
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return ""
	}
	return *t.MacAddress
}

// GetMdAdminName retrieves the value of the leaf MdAdminName from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MdAdminName is set, it can
// safely use t.GetMdAdminName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MdAdminName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep) GetMdAdminName() string {
	if t == nil || t.MdAdminName == nil {
		return ""
	}
	return *t.MdAdminName
}

// GetMepId retrieves the value of the leaf MepId from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MepId is set, it can
// safely use t.GetMepId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MepId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep) GetMepId() NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_MepId_Union {
	if t == nil || t.MepId == nil {
		return nil
	}
	return t.MepId
}

// GetOneWayDelayThreshold retrieves the value of the leaf OneWayDelayThreshold from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OneWayDelayThreshold is set, it can
// safely use t.GetOneWayDelayThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OneWayDelayThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep) GetOneWayDelayThreshold() uint32 {
	if t == nil || t.OneWayDelayThreshold == nil {
		return 3
	}
	return *t.OneWayDelayThreshold
}

// GetPrimaryVlan retrieves the value of the leaf PrimaryVlan from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrimaryVlan is set, it can
// safely use t.GetPrimaryVlan() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrimaryVlan == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep) GetPrimaryVlan() bool {
	if t == nil || t.PrimaryVlan == nil {
		return false
	}
	return *t.PrimaryVlan
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Ccm == nil {
		var v bool = false
		t.Ccm = &v
	}
	if t.CcmLtmPriority == nil {
		var v uint8 = 7
		t.CcmLtmPriority = &v
	}
	if t.Direction == 0 {
		t.Direction = NokiaTypesEthCfm_MpDirection_down
	}
	if t.InstallMep == nil {
		var v bool = false
		t.InstallMep = &v
	}
	if t.LowPriorityDefect == 0 {
		t.LowPriorityDefect = NokiaTypesEthCfm_LowestAlarmPriority_mac_rem_err_xcon
	}
	if t.OneWayDelayThreshold == nil {
		var v uint32 = 3
		t.OneWayDelayThreshold = &v
	}
	if t.PrimaryVlan == nil {
		var v bool = false
		t.PrimaryVlan = &v
	}
	t.Ais.PopulateDefaults()
	t.AlarmNotification.PopulateDefaults()
	t.Csf.PopulateDefaults()
	t.EthTest.PopulateDefaults()
	t.Grace.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MaAdminName == nil {
		return nil, fmt.Errorf("nil value for key MaAdminName")
	}

	if t.MdAdminName == nil {
		return nil, fmt.Errorf("nil value for key MdAdminName")
	}

	return map[string]interface{}{
		"ma-admin-name": *t.MaAdminName,
		"md-admin-name": *t.MdAdminName,
		"mep-id":        t.MepId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Ais represents the /nokia-conf/configure/groups/group/service/epipe/spoke-sdp/eth-cfm/mep/ais YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Ais struct {
	ClientMegLevel    []uint32                                                                                   `path:"client-meg-level" module:"nokia-conf"`
	InterfaceSupport  *bool                                                                                      `path:"interface-support" module:"nokia-conf"`
	Interval          *uint32                                                                                    `path:"interval" module:"nokia-conf"`
	LowPriorityDefect E_NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Ais_LowPriorityDefect `path:"low-priority-defect" module:"nokia-conf"`
	Priority          *uint8                                                                                     `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Ais implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Ais) IsYANGGoStruct() {}

// GetClientMegLevel retrieves the value of the leaf ClientMegLevel from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Ais
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClientMegLevel is set, it can
// safely use t.GetClientMegLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClientMegLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Ais) GetClientMegLevel() []uint32 {
	if t == nil || t.ClientMegLevel == nil {
		return nil
	}
	return t.ClientMegLevel
}

// GetInterfaceSupport retrieves the value of the leaf InterfaceSupport from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Ais
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceSupport is set, it can
// safely use t.GetInterfaceSupport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceSupport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Ais) GetInterfaceSupport() bool {
	if t == nil || t.InterfaceSupport == nil {
		return false
	}
	return *t.InterfaceSupport
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Ais
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Ais) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 1
	}
	return *t.Interval
}

// GetLowPriorityDefect retrieves the value of the leaf LowPriorityDefect from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Ais
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowPriorityDefect is set, it can
// safely use t.GetLowPriorityDefect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowPriorityDefect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Ais) GetLowPriorityDefect() E_NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Ais_LowPriorityDefect {
	if t == nil || t.LowPriorityDefect == 0 {
		return NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Ais_LowPriorityDefect_all_def
	}
	return t.LowPriorityDefect
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Ais
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Ais) GetPriority() uint8 {
	if t == nil || t.Priority == nil {
		return 7
	}
	return *t.Priority
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Ais
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Ais) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InterfaceSupport == nil {
		var v bool = false
		t.InterfaceSupport = &v
	}
	if t.Interval == nil {
		var v uint32 = 1
		t.Interval = &v
	}
	if t.LowPriorityDefect == 0 {
		t.LowPriorityDefect = NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Ais_LowPriorityDefect_all_def
	}
	if t.Priority == nil {
		var v uint8 = 7
		t.Priority = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Ais) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Ais"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Ais) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Ais) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Ais.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Ais) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_AlarmNotification represents the /nokia-conf/configure/groups/group/service/epipe/spoke-sdp/eth-cfm/mep/alarm-notification YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_AlarmNotification struct {
	FngAlarmTime *int32 `path:"fng-alarm-time" module:"nokia-conf"`
	FngResetTime *int32 `path:"fng-reset-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_AlarmNotification implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_AlarmNotification) IsYANGGoStruct() {
}

// GetFngAlarmTime retrieves the value of the leaf FngAlarmTime from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_AlarmNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FngAlarmTime is set, it can
// safely use t.GetFngAlarmTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FngAlarmTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_AlarmNotification) GetFngAlarmTime() int32 {
	if t == nil || t.FngAlarmTime == nil {
		return 0
	}
	return *t.FngAlarmTime
}

// GetFngResetTime retrieves the value of the leaf FngResetTime from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_AlarmNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FngResetTime is set, it can
// safely use t.GetFngResetTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FngResetTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_AlarmNotification) GetFngResetTime() int32 {
	if t == nil || t.FngResetTime == nil {
		return 0
	}
	return *t.FngResetTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_AlarmNotification
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_AlarmNotification) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_AlarmNotification) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_AlarmNotification"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_AlarmNotification) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_AlarmNotification) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_AlarmNotification.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_AlarmNotification) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Csf represents the /nokia-conf/configure/groups/group/service/epipe/spoke-sdp/eth-cfm/mep/csf YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Csf struct {
	Multiplier *float64 `path:"multiplier" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Csf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Csf) IsYANGGoStruct() {}

// GetMultiplier retrieves the value of the leaf Multiplier from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Csf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multiplier is set, it can
// safely use t.GetMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Csf) GetMultiplier() float64 {
	if t == nil || t.Multiplier == nil {
		return 3.5
	}
	return *t.Multiplier
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Csf
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Csf) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Multiplier == nil {
		var v float64 = 3.5
		t.Multiplier = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Csf) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Csf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Csf) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Csf) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Csf.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Csf) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest represents the /nokia-conf/configure/groups/group/service/epipe/spoke-sdp/eth-cfm/mep/eth-test YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest struct {
	BitErrorThreshold *uint32                                                                                 `path:"bit-error-threshold" module:"nokia-conf"`
	TestPattern       *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest_TestPattern `path:"test-pattern" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest) IsYANGGoStruct() {}

// GetOrCreateTestPattern retrieves the value of the TestPattern field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest) GetOrCreateTestPattern() *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest_TestPattern {
	if t.TestPattern != nil {
		return t.TestPattern
	}
	t.TestPattern = &NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest_TestPattern{}
	return t.TestPattern
}

// GetTestPattern returns the value of the TestPattern struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest. If the receiver or the field TestPattern is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest) GetTestPattern() *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest_TestPattern {
	if t != nil && t.TestPattern != nil {
		return t.TestPattern
	}
	return nil
}

// GetBitErrorThreshold retrieves the value of the leaf BitErrorThreshold from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BitErrorThreshold is set, it can
// safely use t.GetBitErrorThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BitErrorThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest) GetBitErrorThreshold() uint32 {
	if t == nil || t.BitErrorThreshold == nil {
		return 1
	}
	return *t.BitErrorThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BitErrorThreshold == nil {
		var v uint32 = 1
		t.BitErrorThreshold = &v
	}
	t.TestPattern.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest_TestPattern represents the /nokia-conf/configure/groups/group/service/epipe/spoke-sdp/eth-cfm/mep/eth-test/test-pattern YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest_TestPattern struct {
	CrcTlv  *bool                                                                                            `path:"crc-tlv" module:"nokia-conf"`
	Pattern E_NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest_TestPattern_Pattern `path:"pattern" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest_TestPattern implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest_TestPattern) IsYANGGoStruct() {
}

// GetCrcTlv retrieves the value of the leaf CrcTlv from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest_TestPattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CrcTlv is set, it can
// safely use t.GetCrcTlv() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CrcTlv == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest_TestPattern) GetCrcTlv() bool {
	if t == nil || t.CrcTlv == nil {
		return false
	}
	return *t.CrcTlv
}

// GetPattern retrieves the value of the leaf Pattern from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest_TestPattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pattern is set, it can
// safely use t.GetPattern() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pattern == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest_TestPattern) GetPattern() E_NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest_TestPattern_Pattern {
	if t == nil || t.Pattern == 0 {
		return NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest_TestPattern_Pattern_all_zeros
	}
	return t.Pattern
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest_TestPattern
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest_TestPattern) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CrcTlv == nil {
		var v bool = false
		t.CrcTlv = &v
	}
	if t.Pattern == 0 {
		t.Pattern = NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest_TestPattern_Pattern_all_zeros
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest_TestPattern) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest_TestPattern"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest_TestPattern) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest_TestPattern) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest_TestPattern.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_EthTest_TestPattern) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace represents the /nokia-conf/configure/groups/group/service/epipe/spoke-sdp/eth-cfm/mep/grace YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace struct {
	EthEd       *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthEd       `path:"eth-ed" module:"nokia-conf"`
	EthVsmGrace *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace `path:"eth-vsm-grace" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace) IsYANGGoStruct() {}

// GetOrCreateEthEd retrieves the value of the EthEd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace) GetOrCreateEthEd() *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthEd {
	if t.EthEd != nil {
		return t.EthEd
	}
	t.EthEd = &NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthEd{}
	return t.EthEd
}

// GetOrCreateEthVsmGrace retrieves the value of the EthVsmGrace field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace) GetOrCreateEthVsmGrace() *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace {
	if t.EthVsmGrace != nil {
		return t.EthVsmGrace
	}
	t.EthVsmGrace = &NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace{}
	return t.EthVsmGrace
}

// GetEthEd returns the value of the EthEd struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace. If the receiver or the field EthEd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace) GetEthEd() *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthEd {
	if t != nil && t.EthEd != nil {
		return t.EthEd
	}
	return nil
}

// GetEthVsmGrace returns the value of the EthVsmGrace struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace. If the receiver or the field EthVsmGrace is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace) GetEthVsmGrace() *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace {
	if t != nil && t.EthVsmGrace != nil {
		return t.EthVsmGrace
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.EthEd.PopulateDefaults()
	t.EthVsmGrace.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthEd represents the /nokia-conf/configure/groups/group/service/epipe/spoke-sdp/eth-cfm/mep/grace/eth-ed YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthEd struct {
	MaxRxDefectWindow *uint32 `path:"max-rx-defect-window" module:"nokia-conf"`
	Priority          *int32  `path:"priority" module:"nokia-conf"`
	RxEthEd           *bool   `path:"rx-eth-ed" module:"nokia-conf"`
	TxEthEd           *bool   `path:"tx-eth-ed" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthEd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthEd) IsYANGGoStruct() {
}

// GetMaxRxDefectWindow retrieves the value of the leaf MaxRxDefectWindow from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRxDefectWindow is set, it can
// safely use t.GetMaxRxDefectWindow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRxDefectWindow == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthEd) GetMaxRxDefectWindow() uint32 {
	if t == nil || t.MaxRxDefectWindow == nil {
		return 0
	}
	return *t.MaxRxDefectWindow
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthEd) GetPriority() int32 {
	if t == nil || t.Priority == nil {
		return 0
	}
	return *t.Priority
}

// GetRxEthEd retrieves the value of the leaf RxEthEd from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RxEthEd is set, it can
// safely use t.GetRxEthEd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RxEthEd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthEd) GetRxEthEd() bool {
	if t == nil || t.RxEthEd == nil {
		return true
	}
	return *t.RxEthEd
}

// GetTxEthEd retrieves the value of the leaf TxEthEd from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxEthEd is set, it can
// safely use t.GetTxEthEd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxEthEd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthEd) GetTxEthEd() bool {
	if t == nil || t.TxEthEd == nil {
		return false
	}
	return *t.TxEthEd
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthEd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthEd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RxEthEd == nil {
		var v bool = true
		t.RxEthEd = &v
	}
	if t.TxEthEd == nil {
		var v bool = false
		t.TxEthEd = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthEd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthEd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthEd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthEd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthEd.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthEd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace represents the /nokia-conf/configure/groups/group/service/epipe/spoke-sdp/eth-cfm/mep/grace/eth-vsm-grace YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace struct {
	RxEthVsmGrace *bool `path:"rx-eth-vsm-grace" module:"nokia-conf"`
	TxEthVsmGrace *bool `path:"tx-eth-vsm-grace" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace) IsYANGGoStruct() {
}

// GetRxEthVsmGrace retrieves the value of the leaf RxEthVsmGrace from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RxEthVsmGrace is set, it can
// safely use t.GetRxEthVsmGrace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RxEthVsmGrace == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace) GetRxEthVsmGrace() bool {
	if t == nil || t.RxEthVsmGrace == nil {
		return true
	}
	return *t.RxEthVsmGrace
}

// GetTxEthVsmGrace retrieves the value of the leaf TxEthVsmGrace from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxEthVsmGrace is set, it can
// safely use t.GetTxEthVsmGrace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxEthVsmGrace == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace) GetTxEthVsmGrace() bool {
	if t == nil || t.TxEthVsmGrace == nil {
		return true
	}
	return *t.TxEthVsmGrace
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RxEthVsmGrace == nil {
		var v bool = true
		t.RxEthVsmGrace = &v
	}
	if t.TxEthVsmGrace == nil {
		var v bool = true
		t.TxEthVsmGrace = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mep_Grace_EthVsmGrace) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mip represents the /nokia-conf/configure/groups/group/service/epipe/spoke-sdp/eth-cfm/mip YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mip struct {
	CfmVlanTag  *string                                                                              `path:"cfm-vlan-tag" module:"nokia-conf"`
	MacAddress  *string                                                                              `path:"mac-address" module:"nokia-conf"`
	PrimaryVlan NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mip_PrimaryVlan_Union `path:"primary-vlan" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mip implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mip) IsYANGGoStruct() {}

// GetCfmVlanTag retrieves the value of the leaf CfmVlanTag from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CfmVlanTag is set, it can
// safely use t.GetCfmVlanTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CfmVlanTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mip) GetCfmVlanTag() string {
	if t == nil || t.CfmVlanTag == nil {
		return ""
	}
	return *t.CfmVlanTag
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mip) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return ""
	}
	return *t.MacAddress
}

// GetPrimaryVlan retrieves the value of the leaf PrimaryVlan from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrimaryVlan is set, it can
// safely use t.GetPrimaryVlan() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrimaryVlan == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mip) GetPrimaryVlan() NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mip_PrimaryVlan_Union {
	if t == nil || t.PrimaryVlan == nil {
		return nil
	}
	return t.PrimaryVlan
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mip
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mip) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mip struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mip) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"primary-vlan": t.PrimaryVlan,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mip) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mip"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mip) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mip) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mip.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_EthCfm_Mip) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_HashLabel represents the /nokia-conf/configure/groups/group/service/epipe/spoke-sdp/hash-label YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_HashLabel struct {
	SignalCapability YANGEmpty `path:"signal-capability" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_HashLabel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_HashLabel) IsYANGGoStruct() {}

// GetSignalCapability retrieves the value of the leaf SignalCapability from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_HashLabel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SignalCapability is set, it can
// safely use t.GetSignalCapability() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SignalCapability == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_HashLabel) GetSignalCapability() YANGEmpty {
	if t == nil || t.SignalCapability == false {
		return false
	}
	return t.SignalCapability
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_HashLabel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_HashLabel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_HashLabel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_HashLabel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_HashLabel) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_HashLabel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_HashLabel.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_HashLabel) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress represents the /nokia-conf/configure/groups/group/service/epipe/spoke-sdp/ingress YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress struct {
	Filter  *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Filter `path:"filter" module:"nokia-conf"`
	L2Tpv3  *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_L2Tpv3 `path:"l2tpv3" module:"nokia-conf"`
	Qos     *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Qos    `path:"qos" module:"nokia-conf"`
	VcLabel *uint32                                                                 `path:"vc-label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress) IsYANGGoStruct() {}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress) GetOrCreateFilter() *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Filter{}
	return t.Filter
}

// GetOrCreateL2Tpv3 retrieves the value of the L2Tpv3 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress) GetOrCreateL2Tpv3() *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_L2Tpv3 {
	if t.L2Tpv3 != nil {
		return t.L2Tpv3
	}
	t.L2Tpv3 = &NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_L2Tpv3{}
	return t.L2Tpv3
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress) GetOrCreateQos() *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Qos{}
	return t.Qos
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress) GetFilter() *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetL2Tpv3 returns the value of the L2Tpv3 struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress. If the receiver or the field L2Tpv3 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress) GetL2Tpv3() *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_L2Tpv3 {
	if t != nil && t.L2Tpv3 != nil {
		return t.L2Tpv3
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress) GetQos() *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// GetVcLabel retrieves the value of the leaf VcLabel from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VcLabel is set, it can
// safely use t.GetVcLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VcLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress) GetVcLabel() uint32 {
	if t == nil || t.VcLabel == nil {
		return 0
	}
	return *t.VcLabel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Filter.PopulateDefaults()
	t.L2Tpv3.PopulateDefaults()
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Filter represents the /nokia-conf/configure/groups/group/service/epipe/spoke-sdp/ingress/filter YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Filter struct {
	Ip   *string `path:"ip" module:"nokia-conf"`
	Ipv6 *string `path:"ipv6" module:"nokia-conf"`
	Mac  *string `path:"mac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Filter) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Filter) GetIpv6() string {
	if t == nil || t.Ipv6 == nil {
		return ""
	}
	return *t.Ipv6
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Filter) GetMac() string {
	if t == nil || t.Mac == nil {
		return ""
	}
	return *t.Mac
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Filter.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_L2Tpv3 represents the /nokia-conf/configure/groups/group/service/epipe/spoke-sdp/ingress/l2tpv3 YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_L2Tpv3 struct {
	Cookie *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_L2Tpv3_Cookie `path:"cookie" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_L2Tpv3 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_L2Tpv3) IsYANGGoStruct() {}

// GetOrCreateCookie retrieves the value of the Cookie field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_L2Tpv3) GetOrCreateCookie() *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_L2Tpv3_Cookie {
	if t.Cookie != nil {
		return t.Cookie
	}
	t.Cookie = &NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_L2Tpv3_Cookie{}
	return t.Cookie
}

// GetCookie returns the value of the Cookie struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_L2Tpv3. If the receiver or the field Cookie is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_L2Tpv3) GetCookie() *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_L2Tpv3_Cookie {
	if t != nil && t.Cookie != nil {
		return t.Cookie
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_L2Tpv3
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_L2Tpv3) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Cookie.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_L2Tpv3) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_L2Tpv3"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_L2Tpv3) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_L2Tpv3) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_L2Tpv3.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_L2Tpv3) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_L2Tpv3_Cookie represents the /nokia-conf/configure/groups/group/service/epipe/spoke-sdp/ingress/l2tpv3/cookie YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_L2Tpv3_Cookie struct {
	Cookie1 *string `path:"cookie1" module:"nokia-conf"`
	Cookie2 *string `path:"cookie2" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_L2Tpv3_Cookie implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_L2Tpv3_Cookie) IsYANGGoStruct() {
}

// GetCookie1 retrieves the value of the leaf Cookie1 from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_L2Tpv3_Cookie
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cookie1 is set, it can
// safely use t.GetCookie1() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cookie1 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_L2Tpv3_Cookie) GetCookie1() string {
	if t == nil || t.Cookie1 == nil {
		return ""
	}
	return *t.Cookie1
}

// GetCookie2 retrieves the value of the leaf Cookie2 from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_L2Tpv3_Cookie
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cookie2 is set, it can
// safely use t.GetCookie2() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cookie2 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_L2Tpv3_Cookie) GetCookie2() string {
	if t == nil || t.Cookie2 == nil {
		return ""
	}
	return *t.Cookie2
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_L2Tpv3_Cookie
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_L2Tpv3_Cookie) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_L2Tpv3_Cookie) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_L2Tpv3_Cookie"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_L2Tpv3_Cookie) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_L2Tpv3_Cookie) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_L2Tpv3_Cookie.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_L2Tpv3_Cookie) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Qos represents the /nokia-conf/configure/groups/group/service/epipe/spoke-sdp/ingress/qos YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Qos struct {
	Network *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Qos_Network `path:"network" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Qos) IsYANGGoStruct() {}

// GetOrCreateNetwork retrieves the value of the Network field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Qos) GetOrCreateNetwork() *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Qos_Network {
	if t.Network != nil {
		return t.Network
	}
	t.Network = &NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Qos_Network{}
	return t.Network
}

// GetNetwork returns the value of the Network struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Qos. If the receiver or the field Network is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Qos) GetNetwork() *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Qos_Network {
	if t != nil && t.Network != nil {
		return t.Network
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Network.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Qos.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Qos_Network represents the /nokia-conf/configure/groups/group/service/epipe/spoke-sdp/ingress/qos/network YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Qos_Network struct {
	FpRedirectGroup *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup `path:"fp-redirect-group" module:"nokia-conf"`
	PolicyName      *string                                                                                      `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Qos_Network implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Qos_Network) IsYANGGoStruct() {
}

// GetOrCreateFpRedirectGroup retrieves the value of the FpRedirectGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Qos_Network) GetOrCreateFpRedirectGroup() *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup {
	if t.FpRedirectGroup != nil {
		return t.FpRedirectGroup
	}
	t.FpRedirectGroup = &NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup{}
	return t.FpRedirectGroup
}

// GetFpRedirectGroup returns the value of the FpRedirectGroup struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Qos_Network. If the receiver or the field FpRedirectGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Qos_Network) GetFpRedirectGroup() *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup {
	if t != nil && t.FpRedirectGroup != nil {
		return t.FpRedirectGroup
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Qos_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Qos_Network) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Qos_Network
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Qos_Network) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.FpRedirectGroup.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Qos_Network) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Qos_Network"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Qos_Network) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Qos_Network) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Qos_Network.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Qos_Network) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup represents the /nokia-conf/configure/groups/group/service/epipe/spoke-sdp/ingress/qos/network/fp-redirect-group YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup struct {
	GroupName *string `path:"group-name" module:"nokia-conf"`
	Instance  *uint32 `path:"instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) IsYANGGoStruct() {
}

// GetGroupName retrieves the value of the leaf GroupName from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupName is set, it can
// safely use t.GetGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) GetGroupName() string {
	if t == nil || t.GroupName == nil {
		return ""
	}
	return *t.GroupName
}

// GetInstance retrieves the value of the leaf Instance from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instance is set, it can
// safely use t.GetInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) GetInstance() uint32 {
	if t == nil || t.Instance == nil {
		return 0
	}
	return *t.Instance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_Ingress_Qos_Network_FpRedirectGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_PwStatus represents the /nokia-conf/configure/groups/group/service/epipe/spoke-sdp/pw-status YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_PwStatus struct {
	BlockOnPeerFault      *bool `path:"block-on-peer-fault" module:"nokia-conf"`
	Signaling             *bool `path:"signaling" module:"nokia-conf"`
	StandbySignalingSlave *bool `path:"standby-signaling-slave" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_PwStatus implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_PwStatus) IsYANGGoStruct() {}

// GetBlockOnPeerFault retrieves the value of the leaf BlockOnPeerFault from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_PwStatus
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BlockOnPeerFault is set, it can
// safely use t.GetBlockOnPeerFault() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BlockOnPeerFault == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_PwStatus) GetBlockOnPeerFault() bool {
	if t == nil || t.BlockOnPeerFault == nil {
		return false
	}
	return *t.BlockOnPeerFault
}

// GetSignaling retrieves the value of the leaf Signaling from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_PwStatus
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Signaling is set, it can
// safely use t.GetSignaling() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Signaling == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_PwStatus) GetSignaling() bool {
	if t == nil || t.Signaling == nil {
		return true
	}
	return *t.Signaling
}

// GetStandbySignalingSlave retrieves the value of the leaf StandbySignalingSlave from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_PwStatus
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StandbySignalingSlave is set, it can
// safely use t.GetStandbySignalingSlave() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StandbySignalingSlave == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_PwStatus) GetStandbySignalingSlave() bool {
	if t == nil || t.StandbySignalingSlave == nil {
		return false
	}
	return *t.StandbySignalingSlave
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_PwStatus
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_PwStatus) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BlockOnPeerFault == nil {
		var v bool = false
		t.BlockOnPeerFault = &v
	}
	if t.Signaling == nil {
		var v bool = true
		t.Signaling = &v
	}
	if t.StandbySignalingSlave == nil {
		var v bool = false
		t.StandbySignalingSlave = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_PwStatus) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_PwStatus"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_PwStatus) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_PwStatus) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_PwStatus.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_PwStatus) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_SourceBmac represents the /nokia-conf/configure/groups/group/service/epipe/spoke-sdp/source-bmac YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_SourceBmac struct {
	UseSdpBmacLsb *bool `path:"use-sdp-bmac-lsb" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_SourceBmac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_SourceBmac) IsYANGGoStruct() {}

// GetUseSdpBmacLsb retrieves the value of the leaf UseSdpBmacLsb from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_SourceBmac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseSdpBmacLsb is set, it can
// safely use t.GetUseSdpBmacLsb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseSdpBmacLsb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_SourceBmac) GetUseSdpBmacLsb() bool {
	if t == nil || t.UseSdpBmacLsb == nil {
		return false
	}
	return *t.UseSdpBmacLsb
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_SourceBmac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_SourceBmac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.UseSdpBmacLsb == nil {
		var v bool = false
		t.UseSdpBmacLsb = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_SourceBmac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_SourceBmac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_SourceBmac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_SourceBmac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_SourceBmac.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_SourceBmac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_TransitPolicy represents the /nokia-conf/configure/groups/group/service/epipe/spoke-sdp/transit-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_TransitPolicy struct {
	Ip     *uint32 `path:"ip" module:"nokia-conf"`
	Prefix *uint32 `path:"prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_TransitPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_TransitPolicy) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_TransitPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_TransitPolicy) GetIp() uint32 {
	if t == nil || t.Ip == nil {
		return 0
	}
	return *t.Ip
}

// GetPrefix retrieves the value of the leaf Prefix from the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_TransitPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_TransitPolicy) GetPrefix() uint32 {
	if t == nil || t.Prefix == nil {
		return 0
	}
	return *t.Prefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_TransitPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_TransitPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_TransitPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_TransitPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_TransitPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_TransitPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_TransitPolicy.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_SpokeSdp_TransitPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan represents the /nokia-conf/configure/groups/group/service/epipe/vxlan YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan struct {
	Instance   map[NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan_Instance_VxlanInstance_Union]*NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan_Instance `path:"instance" module:"nokia-conf"`
	SourceVtep *string                                                                                                                                              `path:"source-vtep" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan) IsYANGGoStruct() {}

// NewInstance creates a new entry in the Instance list of the
// NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan) NewInstance(VxlanInstance NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan_Instance_VxlanInstance_Union) (*NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan_Instance, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Instance == nil {
		t.Instance = make(map[NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan_Instance_VxlanInstance_Union]*NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan_Instance)
	}

	key := VxlanInstance

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Instance[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Instance", key)
	}

	t.Instance[key] = &NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan_Instance{
		VxlanInstance: VxlanInstance,
	}

	return t.Instance[key], nil
}

// RenameInstance renames an entry in the list Instance within
// the NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan) RenameInstance(oldK, newK NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan_Instance_VxlanInstance_Union) error {
	if _, ok := t.Instance[newK]; ok {
		return fmt.Errorf("key %v already exists in Instance", newK)
	}

	e, ok := t.Instance[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Instance", oldK)
	}
	e.VxlanInstance = newK

	t.Instance[newK] = e
	delete(t.Instance, oldK)
	return nil
}

// GetOrCreateInstance retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan) GetOrCreateInstance(VxlanInstance NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan_Instance_VxlanInstance_Union) *NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan_Instance {

	key := VxlanInstance

	if v, ok := t.Instance[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInstance(VxlanInstance)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInstance got unexpected error: %v", err))
	}
	return v
}

// GetInstance retrieves the value with the specified key from
// the Instance map field of NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan) GetInstance(VxlanInstance NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan_Instance_VxlanInstance_Union) *NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan_Instance {

	if t == nil {
		return nil
	}

	key := VxlanInstance

	if lm, ok := t.Instance[key]; ok {
		return lm
	}
	return nil
}

// DeleteInstance deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan) DeleteInstance(VxlanInstance NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan_Instance_VxlanInstance_Union) {
	key := VxlanInstance

	delete(t.Instance, key)
}

// AppendInstance appends the supplied NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan_Instance struct to the
// list Instance of NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan_Instance already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan) AppendInstance(v *NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan_Instance) error {
	key := v.VxlanInstance

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Instance == nil {
		t.Instance = make(map[NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan_Instance_VxlanInstance_Union]*NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan_Instance)
	}

	if _, ok := t.Instance[key]; ok {
		return fmt.Errorf("duplicate key for list Instance %v", key)
	}

	t.Instance[key] = v
	return nil
}

// GetSourceVtep retrieves the value of the leaf SourceVtep from the NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceVtep is set, it can
// safely use t.GetSourceVtep() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceVtep == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan) GetSourceVtep() string {
	if t == nil || t.SourceVtep == nil {
		return ""
	}
	return *t.SourceVtep
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Instance {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan_Instance represents the /nokia-conf/configure/groups/group/service/epipe/vxlan/instance YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan_Instance struct {
	EgressVtep    *NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan_Instance_EgressVtep         `path:"egress-vtep" module:"nokia-conf"`
	Vni           *uint32                                                                           `path:"vni" module:"nokia-conf"`
	VxlanInstance NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan_Instance_VxlanInstance_Union `path:"vxlan-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan_Instance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan_Instance) IsYANGGoStruct() {}

// GetOrCreateEgressVtep retrieves the value of the EgressVtep field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan_Instance) GetOrCreateEgressVtep() *NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan_Instance_EgressVtep {
	if t.EgressVtep != nil {
		return t.EgressVtep
	}
	t.EgressVtep = &NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan_Instance_EgressVtep{}
	return t.EgressVtep
}

// GetEgressVtep returns the value of the EgressVtep struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan_Instance. If the receiver or the field EgressVtep is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan_Instance) GetEgressVtep() *NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan_Instance_EgressVtep {
	if t != nil && t.EgressVtep != nil {
		return t.EgressVtep
	}
	return nil
}

// GetVni retrieves the value of the leaf Vni from the NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan_Instance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vni is set, it can
// safely use t.GetVni() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vni == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan_Instance) GetVni() uint32 {
	if t == nil || t.Vni == nil {
		return 0
	}
	return *t.Vni
}

// GetVxlanInstance retrieves the value of the leaf VxlanInstance from the NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan_Instance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VxlanInstance is set, it can
// safely use t.GetVxlanInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VxlanInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan_Instance) GetVxlanInstance() NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan_Instance_VxlanInstance_Union {
	if t == nil || t.VxlanInstance == nil {
		return nil
	}
	return t.VxlanInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan_Instance
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan_Instance) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.EgressVtep.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan_Instance struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan_Instance) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"vxlan-instance": t.VxlanInstance,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan_Instance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan_Instance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan_Instance) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan_Instance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan_Instance.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan_Instance) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan_Instance_EgressVtep represents the /nokia-conf/configure/groups/group/service/epipe/vxlan/instance/egress-vtep YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan_Instance_EgressVtep struct {
	IpAddress *string `path:"ip-address" module:"nokia-conf"`
	OperGroup *string `path:"oper-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan_Instance_EgressVtep implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan_Instance_EgressVtep) IsYANGGoStruct() {}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan_Instance_EgressVtep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan_Instance_EgressVtep) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetOperGroup retrieves the value of the leaf OperGroup from the NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan_Instance_EgressVtep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OperGroup is set, it can
// safely use t.GetOperGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OperGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan_Instance_EgressVtep) GetOperGroup() string {
	if t == nil || t.OperGroup == nil {
		return ""
	}
	return *t.OperGroup
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan_Instance_EgressVtep
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan_Instance_EgressVtep) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan_Instance_EgressVtep) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan_Instance_EgressVtep"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan_Instance_EgressVtep) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan_Instance_EgressVtep) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan_Instance_EgressVtep.
func (*NokiaConf_Configure_Groups_Group_Service_Epipe_Vxlan_Instance_EgressVtep) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ies represents the /nokia-conf/configure/groups/group/service/ies YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ies struct {
	AaInterface         map[string]*NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface         `path:"aa-interface" module:"nokia-conf"`
	AarpInterface       map[string]*NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface       `path:"aarp-interface" module:"nokia-conf"`
	AdminState          E_NokiaTypesSros_AdminState                                                  `path:"admin-state" module:"nokia-conf"`
	Customer            *string                                                                      `path:"customer" module:"nokia-conf"`
	Description         *string                                                                      `path:"description" module:"nokia-conf"`
	EthCfm              *NokiaConf_Configure_Groups_Group_Service_Ies_EthCfm                         `path:"eth-cfm" module:"nokia-conf" yangPresence:"true"`
	IgmpHostTracking    *NokiaConf_Configure_Groups_Group_Service_Ies_IgmpHostTracking               `path:"igmp-host-tracking" module:"nokia-conf" yangPresence:"true"`
	Interface           map[string]*NokiaConf_Configure_Groups_Group_Service_Ies_Interface           `path:"interface" module:"nokia-conf"`
	RedundantInterface  map[string]*NokiaConf_Configure_Groups_Group_Service_Ies_RedundantInterface  `path:"redundant-interface" module:"nokia-conf"`
	ServiceId           *uint32                                                                      `path:"service-id" module:"nokia-conf"`
	ServiceName         *string                                                                      `path:"service-name" module:"nokia-conf"`
	SubscriberInterface map[string]*NokiaConf_Configure_Groups_Group_Service_Ies_SubscriberInterface `path:"subscriber-interface" module:"nokia-conf"`
	SubscriberMgmt      *NokiaConf_Configure_Groups_Group_Service_Ies_SubscriberMgmt                 `path:"subscriber-mgmt" module:"nokia-conf" yangPresence:"true"`
	VideoInterface      map[string]*NokiaConf_Configure_Groups_Group_Service_Ies_VideoInterface      `path:"video-interface" module:"nokia-conf"`
	VpnId               *uint32                                                                      `path:"vpn-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ies implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ies) IsYANGGoStruct() {}

// NewAaInterface creates a new entry in the AaInterface list of the
// NokiaConf_Configure_Groups_Group_Service_Ies struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies) NewAaInterface(InterfaceName string) (*NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AaInterface == nil {
		t.AaInterface = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AaInterface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AaInterface", key)
	}

	t.AaInterface[key] = &NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface{
		InterfaceName: &InterfaceName,
	}

	return t.AaInterface[key], nil
}

// RenameAaInterface renames an entry in the list AaInterface within
// the NokiaConf_Configure_Groups_Group_Service_Ies struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies) RenameAaInterface(oldK, newK string) error {
	if _, ok := t.AaInterface[newK]; ok {
		return fmt.Errorf("key %v already exists in AaInterface", newK)
	}

	e, ok := t.AaInterface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AaInterface", oldK)
	}
	e.InterfaceName = &newK

	t.AaInterface[newK] = e
	delete(t.AaInterface, oldK)
	return nil
}

// GetOrCreateAaInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Ies. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies) GetOrCreateAaInterface(InterfaceName string) *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface {

	key := InterfaceName

	if v, ok := t.AaInterface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAaInterface(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAaInterface got unexpected error: %v", err))
	}
	return v
}

// GetAaInterface retrieves the value with the specified key from
// the AaInterface map field of NokiaConf_Configure_Groups_Group_Service_Ies. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies) GetAaInterface(InterfaceName string) *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface {

	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.AaInterface[key]; ok {
		return lm
	}
	return nil
}

// DeleteAaInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Ies. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies) DeleteAaInterface(InterfaceName string) {
	key := InterfaceName

	delete(t.AaInterface, key)
}

// AppendAaInterface appends the supplied NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface struct to the
// list AaInterface of NokiaConf_Configure_Groups_Group_Service_Ies. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies) AppendAaInterface(v *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AaInterface == nil {
		t.AaInterface = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface)
	}

	if _, ok := t.AaInterface[key]; ok {
		return fmt.Errorf("duplicate key for list AaInterface %v", key)
	}

	t.AaInterface[key] = v
	return nil
}

// NewAarpInterface creates a new entry in the AarpInterface list of the
// NokiaConf_Configure_Groups_Group_Service_Ies struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies) NewAarpInterface(InterfaceName string) (*NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AarpInterface == nil {
		t.AarpInterface = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AarpInterface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AarpInterface", key)
	}

	t.AarpInterface[key] = &NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface{
		InterfaceName: &InterfaceName,
	}

	return t.AarpInterface[key], nil
}

// RenameAarpInterface renames an entry in the list AarpInterface within
// the NokiaConf_Configure_Groups_Group_Service_Ies struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies) RenameAarpInterface(oldK, newK string) error {
	if _, ok := t.AarpInterface[newK]; ok {
		return fmt.Errorf("key %v already exists in AarpInterface", newK)
	}

	e, ok := t.AarpInterface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AarpInterface", oldK)
	}
	e.InterfaceName = &newK

	t.AarpInterface[newK] = e
	delete(t.AarpInterface, oldK)
	return nil
}

// GetOrCreateAarpInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Ies. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies) GetOrCreateAarpInterface(InterfaceName string) *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface {

	key := InterfaceName

	if v, ok := t.AarpInterface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAarpInterface(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAarpInterface got unexpected error: %v", err))
	}
	return v
}

// GetAarpInterface retrieves the value with the specified key from
// the AarpInterface map field of NokiaConf_Configure_Groups_Group_Service_Ies. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies) GetAarpInterface(InterfaceName string) *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface {

	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.AarpInterface[key]; ok {
		return lm
	}
	return nil
}

// DeleteAarpInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Ies. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies) DeleteAarpInterface(InterfaceName string) {
	key := InterfaceName

	delete(t.AarpInterface, key)
}

// AppendAarpInterface appends the supplied NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface struct to the
// list AarpInterface of NokiaConf_Configure_Groups_Group_Service_Ies. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies) AppendAarpInterface(v *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AarpInterface == nil {
		t.AarpInterface = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface)
	}

	if _, ok := t.AarpInterface[key]; ok {
		return fmt.Errorf("duplicate key for list AarpInterface %v", key)
	}

	t.AarpInterface[key] = v
	return nil
}

// NewInterface creates a new entry in the Interface list of the
// NokiaConf_Configure_Groups_Group_Service_Ies struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies) NewInterface(InterfaceName string) (*NokiaConf_Configure_Groups_Group_Service_Ies_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Ies_Interface)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &NokiaConf_Configure_Groups_Group_Service_Ies_Interface{
		InterfaceName: &InterfaceName,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the NokiaConf_Configure_Groups_Group_Service_Ies struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.InterfaceName = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Ies. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies) GetOrCreateInterface(InterfaceName string) *NokiaConf_Configure_Groups_Group_Service_Ies_Interface {

	key := InterfaceName

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of NokiaConf_Configure_Groups_Group_Service_Ies. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies) GetInterface(InterfaceName string) *NokiaConf_Configure_Groups_Group_Service_Ies_Interface {

	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Ies. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies) DeleteInterface(InterfaceName string) {
	key := InterfaceName

	delete(t.Interface, key)
}

// AppendInterface appends the supplied NokiaConf_Configure_Groups_Group_Service_Ies_Interface struct to the
// list Interface of NokiaConf_Configure_Groups_Group_Service_Ies. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Ies_Interface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies) AppendInterface(v *NokiaConf_Configure_Groups_Group_Service_Ies_Interface) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Ies_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// NewRedundantInterface creates a new entry in the RedundantInterface list of the
// NokiaConf_Configure_Groups_Group_Service_Ies struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies) NewRedundantInterface(InterfaceName string) (*NokiaConf_Configure_Groups_Group_Service_Ies_RedundantInterface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RedundantInterface == nil {
		t.RedundantInterface = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Ies_RedundantInterface)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RedundantInterface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RedundantInterface", key)
	}

	t.RedundantInterface[key] = &NokiaConf_Configure_Groups_Group_Service_Ies_RedundantInterface{
		InterfaceName: &InterfaceName,
	}

	return t.RedundantInterface[key], nil
}

// RenameRedundantInterface renames an entry in the list RedundantInterface within
// the NokiaConf_Configure_Groups_Group_Service_Ies struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies) RenameRedundantInterface(oldK, newK string) error {
	if _, ok := t.RedundantInterface[newK]; ok {
		return fmt.Errorf("key %v already exists in RedundantInterface", newK)
	}

	e, ok := t.RedundantInterface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RedundantInterface", oldK)
	}
	e.InterfaceName = &newK

	t.RedundantInterface[newK] = e
	delete(t.RedundantInterface, oldK)
	return nil
}

// GetOrCreateRedundantInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Ies. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies) GetOrCreateRedundantInterface(InterfaceName string) *NokiaConf_Configure_Groups_Group_Service_Ies_RedundantInterface {

	key := InterfaceName

	if v, ok := t.RedundantInterface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRedundantInterface(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRedundantInterface got unexpected error: %v", err))
	}
	return v
}

// GetRedundantInterface retrieves the value with the specified key from
// the RedundantInterface map field of NokiaConf_Configure_Groups_Group_Service_Ies. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies) GetRedundantInterface(InterfaceName string) *NokiaConf_Configure_Groups_Group_Service_Ies_RedundantInterface {

	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.RedundantInterface[key]; ok {
		return lm
	}
	return nil
}

// DeleteRedundantInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Ies. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies) DeleteRedundantInterface(InterfaceName string) {
	key := InterfaceName

	delete(t.RedundantInterface, key)
}

// AppendRedundantInterface appends the supplied NokiaConf_Configure_Groups_Group_Service_Ies_RedundantInterface struct to the
// list RedundantInterface of NokiaConf_Configure_Groups_Group_Service_Ies. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Ies_RedundantInterface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies) AppendRedundantInterface(v *NokiaConf_Configure_Groups_Group_Service_Ies_RedundantInterface) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RedundantInterface == nil {
		t.RedundantInterface = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Ies_RedundantInterface)
	}

	if _, ok := t.RedundantInterface[key]; ok {
		return fmt.Errorf("duplicate key for list RedundantInterface %v", key)
	}

	t.RedundantInterface[key] = v
	return nil
}

// NewSubscriberInterface creates a new entry in the SubscriberInterface list of the
// NokiaConf_Configure_Groups_Group_Service_Ies struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies) NewSubscriberInterface(InterfaceName string) (*NokiaConf_Configure_Groups_Group_Service_Ies_SubscriberInterface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SubscriberInterface == nil {
		t.SubscriberInterface = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Ies_SubscriberInterface)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SubscriberInterface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SubscriberInterface", key)
	}

	t.SubscriberInterface[key] = &NokiaConf_Configure_Groups_Group_Service_Ies_SubscriberInterface{
		InterfaceName: &InterfaceName,
	}

	return t.SubscriberInterface[key], nil
}

// RenameSubscriberInterface renames an entry in the list SubscriberInterface within
// the NokiaConf_Configure_Groups_Group_Service_Ies struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies) RenameSubscriberInterface(oldK, newK string) error {
	if _, ok := t.SubscriberInterface[newK]; ok {
		return fmt.Errorf("key %v already exists in SubscriberInterface", newK)
	}

	e, ok := t.SubscriberInterface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SubscriberInterface", oldK)
	}
	e.InterfaceName = &newK

	t.SubscriberInterface[newK] = e
	delete(t.SubscriberInterface, oldK)
	return nil
}

// GetOrCreateSubscriberInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Ies. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies) GetOrCreateSubscriberInterface(InterfaceName string) *NokiaConf_Configure_Groups_Group_Service_Ies_SubscriberInterface {

	key := InterfaceName

	if v, ok := t.SubscriberInterface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSubscriberInterface(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSubscriberInterface got unexpected error: %v", err))
	}
	return v
}

// GetSubscriberInterface retrieves the value with the specified key from
// the SubscriberInterface map field of NokiaConf_Configure_Groups_Group_Service_Ies. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies) GetSubscriberInterface(InterfaceName string) *NokiaConf_Configure_Groups_Group_Service_Ies_SubscriberInterface {

	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.SubscriberInterface[key]; ok {
		return lm
	}
	return nil
}

// DeleteSubscriberInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Ies. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies) DeleteSubscriberInterface(InterfaceName string) {
	key := InterfaceName

	delete(t.SubscriberInterface, key)
}

// AppendSubscriberInterface appends the supplied NokiaConf_Configure_Groups_Group_Service_Ies_SubscriberInterface struct to the
// list SubscriberInterface of NokiaConf_Configure_Groups_Group_Service_Ies. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Ies_SubscriberInterface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies) AppendSubscriberInterface(v *NokiaConf_Configure_Groups_Group_Service_Ies_SubscriberInterface) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SubscriberInterface == nil {
		t.SubscriberInterface = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Ies_SubscriberInterface)
	}

	if _, ok := t.SubscriberInterface[key]; ok {
		return fmt.Errorf("duplicate key for list SubscriberInterface %v", key)
	}

	t.SubscriberInterface[key] = v
	return nil
}

// NewVideoInterface creates a new entry in the VideoInterface list of the
// NokiaConf_Configure_Groups_Group_Service_Ies struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies) NewVideoInterface(InterfaceName string) (*NokiaConf_Configure_Groups_Group_Service_Ies_VideoInterface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VideoInterface == nil {
		t.VideoInterface = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Ies_VideoInterface)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.VideoInterface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list VideoInterface", key)
	}

	t.VideoInterface[key] = &NokiaConf_Configure_Groups_Group_Service_Ies_VideoInterface{
		InterfaceName: &InterfaceName,
	}

	return t.VideoInterface[key], nil
}

// RenameVideoInterface renames an entry in the list VideoInterface within
// the NokiaConf_Configure_Groups_Group_Service_Ies struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies) RenameVideoInterface(oldK, newK string) error {
	if _, ok := t.VideoInterface[newK]; ok {
		return fmt.Errorf("key %v already exists in VideoInterface", newK)
	}

	e, ok := t.VideoInterface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in VideoInterface", oldK)
	}
	e.InterfaceName = &newK

	t.VideoInterface[newK] = e
	delete(t.VideoInterface, oldK)
	return nil
}

// GetOrCreateVideoInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Ies. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies) GetOrCreateVideoInterface(InterfaceName string) *NokiaConf_Configure_Groups_Group_Service_Ies_VideoInterface {

	key := InterfaceName

	if v, ok := t.VideoInterface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVideoInterface(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVideoInterface got unexpected error: %v", err))
	}
	return v
}

// GetVideoInterface retrieves the value with the specified key from
// the VideoInterface map field of NokiaConf_Configure_Groups_Group_Service_Ies. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies) GetVideoInterface(InterfaceName string) *NokiaConf_Configure_Groups_Group_Service_Ies_VideoInterface {

	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.VideoInterface[key]; ok {
		return lm
	}
	return nil
}

// DeleteVideoInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Ies. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies) DeleteVideoInterface(InterfaceName string) {
	key := InterfaceName

	delete(t.VideoInterface, key)
}

// AppendVideoInterface appends the supplied NokiaConf_Configure_Groups_Group_Service_Ies_VideoInterface struct to the
// list VideoInterface of NokiaConf_Configure_Groups_Group_Service_Ies. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Ies_VideoInterface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies) AppendVideoInterface(v *NokiaConf_Configure_Groups_Group_Service_Ies_VideoInterface) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VideoInterface == nil {
		t.VideoInterface = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Ies_VideoInterface)
	}

	if _, ok := t.VideoInterface[key]; ok {
		return fmt.Errorf("duplicate key for list VideoInterface %v", key)
	}

	t.VideoInterface[key] = v
	return nil
}

// GetOrCreateEthCfm retrieves the value of the EthCfm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies) GetOrCreateEthCfm() *NokiaConf_Configure_Groups_Group_Service_Ies_EthCfm {
	if t.EthCfm != nil {
		return t.EthCfm
	}
	t.EthCfm = &NokiaConf_Configure_Groups_Group_Service_Ies_EthCfm{}
	return t.EthCfm
}

// GetOrCreateIgmpHostTracking retrieves the value of the IgmpHostTracking field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies) GetOrCreateIgmpHostTracking() *NokiaConf_Configure_Groups_Group_Service_Ies_IgmpHostTracking {
	if t.IgmpHostTracking != nil {
		return t.IgmpHostTracking
	}
	t.IgmpHostTracking = &NokiaConf_Configure_Groups_Group_Service_Ies_IgmpHostTracking{}
	return t.IgmpHostTracking
}

// GetOrCreateSubscriberMgmt retrieves the value of the SubscriberMgmt field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies) GetOrCreateSubscriberMgmt() *NokiaConf_Configure_Groups_Group_Service_Ies_SubscriberMgmt {
	if t.SubscriberMgmt != nil {
		return t.SubscriberMgmt
	}
	t.SubscriberMgmt = &NokiaConf_Configure_Groups_Group_Service_Ies_SubscriberMgmt{}
	return t.SubscriberMgmt
}

// GetEthCfm returns the value of the EthCfm struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ies. If the receiver or the field EthCfm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies) GetEthCfm() *NokiaConf_Configure_Groups_Group_Service_Ies_EthCfm {
	if t != nil && t.EthCfm != nil {
		return t.EthCfm
	}
	return nil
}

// GetIgmpHostTracking returns the value of the IgmpHostTracking struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ies. If the receiver or the field IgmpHostTracking is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies) GetIgmpHostTracking() *NokiaConf_Configure_Groups_Group_Service_Ies_IgmpHostTracking {
	if t != nil && t.IgmpHostTracking != nil {
		return t.IgmpHostTracking
	}
	return nil
}

// GetSubscriberMgmt returns the value of the SubscriberMgmt struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ies. If the receiver or the field SubscriberMgmt is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies) GetSubscriberMgmt() *NokiaConf_Configure_Groups_Group_Service_Ies_SubscriberMgmt {
	if t != nil && t.SubscriberMgmt != nil {
		return t.SubscriberMgmt
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Ies
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetCustomer retrieves the value of the leaf Customer from the NokiaConf_Configure_Groups_Group_Service_Ies
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Customer is set, it can
// safely use t.GetCustomer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Customer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies) GetCustomer() string {
	if t == nil || t.Customer == nil {
		return ""
	}
	return *t.Customer
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Ies
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetServiceId retrieves the value of the leaf ServiceId from the NokiaConf_Configure_Groups_Group_Service_Ies
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceId is set, it can
// safely use t.GetServiceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies) GetServiceId() uint32 {
	if t == nil || t.ServiceId == nil {
		return 0
	}
	return *t.ServiceId
}

// GetServiceName retrieves the value of the leaf ServiceName from the NokiaConf_Configure_Groups_Group_Service_Ies
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceName is set, it can
// safely use t.GetServiceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies) GetServiceName() string {
	if t == nil || t.ServiceName == nil {
		return ""
	}
	return *t.ServiceName
}

// GetVpnId retrieves the value of the leaf VpnId from the NokiaConf_Configure_Groups_Group_Service_Ies
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VpnId is set, it can
// safely use t.GetVpnId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VpnId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies) GetVpnId() uint32 {
	if t == nil || t.VpnId == nil {
		return 0
	}
	return *t.VpnId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ies
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.EthCfm.PopulateDefaults()
	t.IgmpHostTracking.PopulateDefaults()
	t.SubscriberMgmt.PopulateDefaults()
	for _, e := range t.AaInterface {
		e.PopulateDefaults()
	}
	for _, e := range t.AarpInterface {
		e.PopulateDefaults()
	}
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
	for _, e := range t.RedundantInterface {
		e.PopulateDefaults()
	}
	for _, e := range t.SubscriberInterface {
		e.PopulateDefaults()
	}
	for _, e := range t.VideoInterface {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Ies struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ServiceName == nil {
		return nil, fmt.Errorf("nil value for key ServiceName")
	}

	return map[string]interface{}{
		"service-name": *t.ServiceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ies"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ies.
func (*NokiaConf_Configure_Groups_Group_Service_Ies) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface represents the /nokia-conf/configure/groups/group/service/ies/aa-interface YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface struct {
	AdminState    E_NokiaTypesSros_AdminState                                              `path:"admin-state" module:"nokia-conf"`
	Description   *string                                                                  `path:"description" module:"nokia-conf"`
	InterfaceName *string                                                                  `path:"interface-name" module:"nokia-conf"`
	IpMtu         *uint32                                                                  `path:"ip-mtu" module:"nokia-conf"`
	Ipv4          *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Ipv4           `path:"ipv4" module:"nokia-conf"`
	Sap           map[string]*NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap `path:"sap" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface) IsYANGGoStruct() {}

// NewSap creates a new entry in the Sap list of the
// NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface) NewSap(SapId string) (*NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sap == nil {
		t.Sap = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap)
	}

	key := SapId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Sap[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Sap", key)
	}

	t.Sap[key] = &NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap{
		SapId: &SapId,
	}

	return t.Sap[key], nil
}

// RenameSap renames an entry in the list Sap within
// the NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface) RenameSap(oldK, newK string) error {
	if _, ok := t.Sap[newK]; ok {
		return fmt.Errorf("key %v already exists in Sap", newK)
	}

	e, ok := t.Sap[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Sap", oldK)
	}
	e.SapId = &newK

	t.Sap[newK] = e
	delete(t.Sap, oldK)
	return nil
}

// GetOrCreateSap retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface) GetOrCreateSap(SapId string) *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap {

	key := SapId

	if v, ok := t.Sap[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSap(SapId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSap got unexpected error: %v", err))
	}
	return v
}

// GetSap retrieves the value with the specified key from
// the Sap map field of NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface) GetSap(SapId string) *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap {

	if t == nil {
		return nil
	}

	key := SapId

	if lm, ok := t.Sap[key]; ok {
		return lm
	}
	return nil
}

// DeleteSap deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface) DeleteSap(SapId string) {
	key := SapId

	delete(t.Sap, key)
}

// AppendSap appends the supplied NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap struct to the
// list Sap of NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface) AppendSap(v *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap) error {
	if v.SapId == nil {
		return fmt.Errorf("invalid nil key received for SapId")
	}

	key := *v.SapId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sap == nil {
		t.Sap = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap)
	}

	if _, ok := t.Sap[key]; ok {
		return fmt.Errorf("duplicate key for list Sap %v", key)
	}

	t.Sap[key] = v
	return nil
}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface) GetOrCreateIpv4() *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Ipv4{}
	return t.Ipv4
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface) GetIpv4() *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetIpMtu retrieves the value of the leaf IpMtu from the NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpMtu is set, it can
// safely use t.GetIpMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpMtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface) GetIpMtu() uint32 {
	if t == nil || t.IpMtu == nil {
		return 0
	}
	return *t.IpMtu
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	t.Ipv4.PopulateDefaults()
	for _, e := range t.Sap {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Ipv4 represents the /nokia-conf/configure/groups/group/service/ies/aa-interface/ipv4 YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Ipv4 struct {
	Primary *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Ipv4_Primary `path:"primary" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Ipv4) IsYANGGoStruct() {}

// GetOrCreatePrimary retrieves the value of the Primary field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Ipv4) GetOrCreatePrimary() *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Ipv4_Primary {
	if t.Primary != nil {
		return t.Primary
	}
	t.Primary = &NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Ipv4_Primary{}
	return t.Primary
}

// GetPrimary returns the value of the Primary struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Ipv4. If the receiver or the field Primary is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Ipv4) GetPrimary() *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Ipv4_Primary {
	if t != nil && t.Primary != nil {
		return t.Primary
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Primary.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Ipv4.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Ipv4_Primary represents the /nokia-conf/configure/groups/group/service/ies/aa-interface/ipv4/primary YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Ipv4_Primary struct {
	Address      *string `path:"address" module:"nokia-conf"`
	PrefixLength *uint32 `path:"prefix-length" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Ipv4_Primary implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Ipv4_Primary) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Ipv4_Primary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Ipv4_Primary) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetPrefixLength retrieves the value of the leaf PrefixLength from the NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Ipv4_Primary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixLength is set, it can
// safely use t.GetPrefixLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Ipv4_Primary) GetPrefixLength() uint32 {
	if t == nil || t.PrefixLength == nil {
		return 0
	}
	return *t.PrefixLength
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Ipv4_Primary
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Ipv4_Primary) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Ipv4_Primary) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Ipv4_Primary"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Ipv4_Primary) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Ipv4_Primary) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Ipv4_Primary.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Ipv4_Primary) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap represents the /nokia-conf/configure/groups/group/service/ies/aa-interface/sap YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap struct {
	AdminState   E_NokiaTypesSros_AdminState                                                `path:"admin-state" module:"nokia-conf"`
	Description  *string                                                                    `path:"description" module:"nokia-conf"`
	Egress       *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress       `path:"egress" module:"nokia-conf"`
	FwdWholesale *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_FwdWholesale `path:"fwd-wholesale" module:"nokia-conf"`
	Ingress      *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress      `path:"ingress" module:"nokia-conf"`
	Lag          *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Lag          `path:"lag" module:"nokia-conf"`
	SapId        *string                                                                    `path:"sap-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap) IsYANGGoStruct() {}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap) GetOrCreateEgress() *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress{}
	return t.Egress
}

// GetOrCreateFwdWholesale retrieves the value of the FwdWholesale field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap) GetOrCreateFwdWholesale() *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_FwdWholesale {
	if t.FwdWholesale != nil {
		return t.FwdWholesale
	}
	t.FwdWholesale = &NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_FwdWholesale{}
	return t.FwdWholesale
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap) GetOrCreateIngress() *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress{}
	return t.Ingress
}

// GetOrCreateLag retrieves the value of the Lag field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap) GetOrCreateLag() *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Lag {
	if t.Lag != nil {
		return t.Lag
	}
	t.Lag = &NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Lag{}
	return t.Lag
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap) GetEgress() *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetFwdWholesale returns the value of the FwdWholesale struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap. If the receiver or the field FwdWholesale is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap) GetFwdWholesale() *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_FwdWholesale {
	if t != nil && t.FwdWholesale != nil {
		return t.FwdWholesale
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap) GetIngress() *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetLag returns the value of the Lag struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap. If the receiver or the field Lag is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap) GetLag() *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Lag {
	if t != nil && t.Lag != nil {
		return t.Lag
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetSapId retrieves the value of the leaf SapId from the NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SapId is set, it can
// safely use t.GetSapId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SapId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap) GetSapId() string {
	if t == nil || t.SapId == nil {
		return ""
	}
	return *t.SapId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	t.Egress.PopulateDefaults()
	t.FwdWholesale.PopulateDefaults()
	t.Ingress.PopulateDefaults()
	t.Lag.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SapId == nil {
		return nil, fmt.Errorf("nil value for key SapId")
	}

	return map[string]interface{}{
		"sap-id": *t.SapId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress represents the /nokia-conf/configure/groups/group/service/ies/aa-interface/sap/egress YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress struct {
	Filter *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress_Filter `path:"filter" module:"nokia-conf"`
	Qos    *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress_Qos    `path:"qos" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress) IsYANGGoStruct() {}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress) GetOrCreateFilter() *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress_Filter{}
	return t.Filter
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress) GetOrCreateQos() *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress_Qos{}
	return t.Qos
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress) GetFilter() *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress) GetQos() *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Filter.PopulateDefaults()
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress_Filter represents the /nokia-conf/configure/groups/group/service/ies/aa-interface/sap/egress/filter YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress_Filter struct {
	Ip *string `path:"ip" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress_Filter) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress_Filter.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress_Qos represents the /nokia-conf/configure/groups/group/service/ies/aa-interface/sap/egress/qos YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress_Qos struct {
	SapEgress *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress_Qos_SapEgress `path:"sap-egress" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress_Qos) IsYANGGoStruct() {}

// GetOrCreateSapEgress retrieves the value of the SapEgress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress_Qos) GetOrCreateSapEgress() *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress_Qos_SapEgress {
	if t.SapEgress != nil {
		return t.SapEgress
	}
	t.SapEgress = &NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress_Qos_SapEgress{}
	return t.SapEgress
}

// GetSapEgress returns the value of the SapEgress struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress_Qos. If the receiver or the field SapEgress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress_Qos) GetSapEgress() *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress_Qos_SapEgress {
	if t != nil && t.SapEgress != nil {
		return t.SapEgress
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.SapEgress.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress_Qos.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress_Qos_SapEgress represents the /nokia-conf/configure/groups/group/service/ies/aa-interface/sap/egress/qos/sap-egress YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress_Qos_SapEgress struct {
	PolicyName *string `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress_Qos_SapEgress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress_Qos_SapEgress) IsYANGGoStruct() {
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress_Qos_SapEgress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress_Qos_SapEgress) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress_Qos_SapEgress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress_Qos_SapEgress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress_Qos_SapEgress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress_Qos_SapEgress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress_Qos_SapEgress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress_Qos_SapEgress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress_Qos_SapEgress.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Egress_Qos_SapEgress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_FwdWholesale represents the /nokia-conf/configure/groups/group/service/ies/aa-interface/sap/fwd-wholesale YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_FwdWholesale struct {
	PppoeService *string `path:"pppoe-service" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_FwdWholesale implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_FwdWholesale) IsYANGGoStruct() {}

// GetPppoeService retrieves the value of the leaf PppoeService from the NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_FwdWholesale
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PppoeService is set, it can
// safely use t.GetPppoeService() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PppoeService == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_FwdWholesale) GetPppoeService() string {
	if t == nil || t.PppoeService == nil {
		return ""
	}
	return *t.PppoeService
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_FwdWholesale
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_FwdWholesale) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_FwdWholesale) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_FwdWholesale"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_FwdWholesale) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_FwdWholesale) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_FwdWholesale.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_FwdWholesale) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress represents the /nokia-conf/configure/groups/group/service/ies/aa-interface/sap/ingress YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress struct {
	IpFilterPair *bool                                                                     `path:"ip-filter-pair" module:"nokia-conf"`
	Qos          *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress_Qos `path:"qos" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress) IsYANGGoStruct() {}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress) GetOrCreateQos() *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress_Qos{}
	return t.Qos
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress) GetQos() *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// GetIpFilterPair retrieves the value of the leaf IpFilterPair from the NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpFilterPair is set, it can
// safely use t.GetIpFilterPair() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpFilterPair == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress) GetIpFilterPair() bool {
	if t == nil || t.IpFilterPair == nil {
		return false
	}
	return *t.IpFilterPair
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IpFilterPair == nil {
		var v bool = false
		t.IpFilterPair = &v
	}
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress_Qos represents the /nokia-conf/configure/groups/group/service/ies/aa-interface/sap/ingress/qos YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress_Qos struct {
	SapIngress *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress `path:"sap-ingress" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress_Qos) IsYANGGoStruct() {}

// GetOrCreateSapIngress retrieves the value of the SapIngress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress_Qos) GetOrCreateSapIngress() *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress {
	if t.SapIngress != nil {
		return t.SapIngress
	}
	t.SapIngress = &NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress{}
	return t.SapIngress
}

// GetSapIngress returns the value of the SapIngress struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress_Qos. If the receiver or the field SapIngress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress_Qos) GetSapIngress() *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress {
	if t != nil && t.SapIngress != nil {
		return t.SapIngress
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.SapIngress.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress_Qos.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress represents the /nokia-conf/configure/groups/group/service/ies/aa-interface/sap/ingress/qos/sap-ingress YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress struct {
	Overrides  *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress_Overrides `path:"overrides" module:"nokia-conf"`
	PolicyName *string                                                                                        `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress) IsYANGGoStruct() {
}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress) GetOrCreateOverrides() *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress) GetOverrides() *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress_Overrides represents the /nokia-conf/configure/groups/group/service/ies/aa-interface/sap/ingress/qos/sap-ingress/overrides YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress_Overrides struct {
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress_Overrides) IsYANGGoStruct() {
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress_Overrides.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Ingress_Qos_SapIngress_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Lag represents the /nokia-conf/configure/groups/group/service/ies/aa-interface/sap/lag YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Lag struct {
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Lag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Lag) IsYANGGoStruct() {}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Lag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Lag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Lag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Lag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Lag) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Lag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Lag.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_AaInterface_Sap_Lag) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface represents the /nokia-conf/configure/groups/group/service/ies/aarp-interface YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface struct {
	AdminState    E_NokiaTypesSros_AdminState                                                     `path:"admin-state" module:"nokia-conf"`
	Description   *string                                                                         `path:"description" module:"nokia-conf"`
	InterfaceName *string                                                                         `path:"interface-name" module:"nokia-conf"`
	IpMtu         *uint32                                                                         `path:"ip-mtu" module:"nokia-conf"`
	SpokeSdp      map[string]*NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp `path:"spoke-sdp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface) IsYANGGoStruct() {}

// NewSpokeSdp creates a new entry in the SpokeSdp list of the
// NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface) NewSpokeSdp(SdpBindId string) (*NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SpokeSdp == nil {
		t.SpokeSdp = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp)
	}

	key := SdpBindId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SpokeSdp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SpokeSdp", key)
	}

	t.SpokeSdp[key] = &NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp{
		SdpBindId: &SdpBindId,
	}

	return t.SpokeSdp[key], nil
}

// RenameSpokeSdp renames an entry in the list SpokeSdp within
// the NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface) RenameSpokeSdp(oldK, newK string) error {
	if _, ok := t.SpokeSdp[newK]; ok {
		return fmt.Errorf("key %v already exists in SpokeSdp", newK)
	}

	e, ok := t.SpokeSdp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SpokeSdp", oldK)
	}
	e.SdpBindId = &newK

	t.SpokeSdp[newK] = e
	delete(t.SpokeSdp, oldK)
	return nil
}

// GetOrCreateSpokeSdp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface) GetOrCreateSpokeSdp(SdpBindId string) *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp {

	key := SdpBindId

	if v, ok := t.SpokeSdp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSpokeSdp(SdpBindId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSpokeSdp got unexpected error: %v", err))
	}
	return v
}

// GetSpokeSdp retrieves the value with the specified key from
// the SpokeSdp map field of NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface) GetSpokeSdp(SdpBindId string) *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp {

	if t == nil {
		return nil
	}

	key := SdpBindId

	if lm, ok := t.SpokeSdp[key]; ok {
		return lm
	}
	return nil
}

// DeleteSpokeSdp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface) DeleteSpokeSdp(SdpBindId string) {
	key := SdpBindId

	delete(t.SpokeSdp, key)
}

// AppendSpokeSdp appends the supplied NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp struct to the
// list SpokeSdp of NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface) AppendSpokeSdp(v *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp) error {
	if v.SdpBindId == nil {
		return fmt.Errorf("invalid nil key received for SdpBindId")
	}

	key := *v.SdpBindId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SpokeSdp == nil {
		t.SpokeSdp = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp)
	}

	if _, ok := t.SpokeSdp[key]; ok {
		return fmt.Errorf("duplicate key for list SpokeSdp %v", key)
	}

	t.SpokeSdp[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetIpMtu retrieves the value of the leaf IpMtu from the NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpMtu is set, it can
// safely use t.GetIpMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpMtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface) GetIpMtu() uint32 {
	if t == nil || t.IpMtu == nil {
		return 0
	}
	return *t.IpMtu
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	for _, e := range t.SpokeSdp {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp represents the /nokia-conf/configure/groups/group/service/ies/aarp-interface/spoke-sdp YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp struct {
	Aarp        *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Aarp    `path:"aarp" module:"nokia-conf" yangPresence:"true"`
	AdminState  E_NokiaTypesSros_AdminState                                                  `path:"admin-state" module:"nokia-conf"`
	Description *string                                                                      `path:"description" module:"nokia-conf"`
	Egress      *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Egress  `path:"egress" module:"nokia-conf"`
	Ingress     *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Ingress `path:"ingress" module:"nokia-conf"`
	SdpBindId   *string                                                                      `path:"sdp-bind-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp) IsYANGGoStruct() {}

// GetOrCreateAarp retrieves the value of the Aarp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp) GetOrCreateAarp() *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Aarp {
	if t.Aarp != nil {
		return t.Aarp
	}
	t.Aarp = &NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Aarp{}
	return t.Aarp
}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp) GetOrCreateEgress() *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Egress{}
	return t.Egress
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp) GetOrCreateIngress() *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Ingress{}
	return t.Ingress
}

// GetAarp returns the value of the Aarp struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp. If the receiver or the field Aarp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp) GetAarp() *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Aarp {
	if t != nil && t.Aarp != nil {
		return t.Aarp
	}
	return nil
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp) GetEgress() *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp) GetIngress() *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetSdpBindId retrieves the value of the leaf SdpBindId from the NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SdpBindId is set, it can
// safely use t.GetSdpBindId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SdpBindId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp) GetSdpBindId() string {
	if t == nil || t.SdpBindId == nil {
		return ""
	}
	return *t.SdpBindId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	t.Aarp.PopulateDefaults()
	t.Egress.PopulateDefaults()
	t.Ingress.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SdpBindId == nil {
		return nil, fmt.Errorf("nil value for key SdpBindId")
	}

	return map[string]interface{}{
		"sdp-bind-id": *t.SdpBindId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Aarp represents the /nokia-conf/configure/groups/group/service/ies/aarp-interface/spoke-sdp/aarp YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Aarp struct {
	Id   *uint32                                      `path:"id" module:"nokia-conf"`
	Type E_NokiaTypesServices_L3BsxAarpServiceRefType `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Aarp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Aarp) IsYANGGoStruct() {}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Aarp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Aarp) GetId() uint32 {
	if t == nil || t.Id == nil {
		return 0
	}
	return *t.Id
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Aarp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Aarp) GetType() E_NokiaTypesServices_L3BsxAarpServiceRefType {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Aarp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Aarp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Aarp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Aarp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Aarp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Aarp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Aarp.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Aarp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Egress represents the /nokia-conf/configure/groups/group/service/ies/aarp-interface/spoke-sdp/egress YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Egress struct {
	Filter  *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Egress_Filter `path:"filter" module:"nokia-conf"`
	VcLabel *uint32                                                                            `path:"vc-label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Egress) IsYANGGoStruct() {}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Egress) GetOrCreateFilter() *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Egress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Egress_Filter{}
	return t.Filter
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Egress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Egress) GetFilter() *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Egress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetVcLabel retrieves the value of the leaf VcLabel from the NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Egress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VcLabel is set, it can
// safely use t.GetVcLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VcLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Egress) GetVcLabel() uint32 {
	if t == nil || t.VcLabel == nil {
		return 0
	}
	return *t.VcLabel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Filter.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Egress.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Egress_Filter represents the /nokia-conf/configure/groups/group/service/ies/aarp-interface/spoke-sdp/egress/filter YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Egress_Filter struct {
	Ip *string `path:"ip" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Egress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Egress_Filter) IsYANGGoStruct() {
}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Egress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Egress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Egress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Egress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Egress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Egress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Egress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Egress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Egress_Filter.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Egress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Ingress represents the /nokia-conf/configure/groups/group/service/ies/aarp-interface/spoke-sdp/ingress YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Ingress struct {
	Filter  *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Ingress_Filter `path:"filter" module:"nokia-conf"`
	VcLabel *uint32                                                                             `path:"vc-label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Ingress) IsYANGGoStruct() {
}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Ingress) GetOrCreateFilter() *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Ingress_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Ingress_Filter{}
	return t.Filter
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Ingress. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Ingress) GetFilter() *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Ingress_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetVcLabel retrieves the value of the leaf VcLabel from the NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VcLabel is set, it can
// safely use t.GetVcLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VcLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Ingress) GetVcLabel() uint32 {
	if t == nil || t.VcLabel == nil {
		return 0
	}
	return *t.VcLabel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Filter.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Ingress.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Ingress_Filter represents the /nokia-conf/configure/groups/group/service/ies/aarp-interface/spoke-sdp/ingress/filter YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Ingress_Filter struct {
	Ip *string `path:"ip" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Ingress_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Ingress_Filter) IsYANGGoStruct() {
}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Ingress_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Ingress_Filter) GetIp() string {
	if t == nil || t.Ip == nil {
		return ""
	}
	return *t.Ip
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Ingress_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Ingress_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Ingress_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Ingress_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Ingress_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Ingress_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Ingress_Filter.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_AarpInterface_SpokeSdp_Ingress_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ies_EthCfm represents the /nokia-conf/configure/groups/group/service/ies/eth-cfm YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ies_EthCfm struct {
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ies_EthCfm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_EthCfm) IsYANGGoStruct() {}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ies_EthCfm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_EthCfm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_EthCfm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ies_EthCfm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_EthCfm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_EthCfm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ies_EthCfm.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_EthCfm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ies_IgmpHostTracking represents the /nokia-conf/configure/groups/group/service/ies/igmp-host-tracking YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ies_IgmpHostTracking struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ExpiryTime *uint32                     `path:"expiry-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ies_IgmpHostTracking implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_IgmpHostTracking) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Ies_IgmpHostTracking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_IgmpHostTracking) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetExpiryTime retrieves the value of the leaf ExpiryTime from the NokiaConf_Configure_Groups_Group_Service_Ies_IgmpHostTracking
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExpiryTime is set, it can
// safely use t.GetExpiryTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExpiryTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_IgmpHostTracking) GetExpiryTime() uint32 {
	if t == nil || t.ExpiryTime == nil {
		return 260
	}
	return *t.ExpiryTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ies_IgmpHostTracking
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_IgmpHostTracking) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.ExpiryTime == nil {
		var v uint32 = 260
		t.ExpiryTime = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_IgmpHostTracking) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ies_IgmpHostTracking"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_IgmpHostTracking) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_IgmpHostTracking) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ies_IgmpHostTracking.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_IgmpHostTracking) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ies_Interface represents the /nokia-conf/configure/groups/group/service/ies/interface YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ies_Interface struct {
	AdminState                    E_NokiaTypesSros_AdminState                                                 `path:"admin-state" module:"nokia-conf"`
	CflowdParameters              *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters    `path:"cflowd-parameters" module:"nokia-conf"`
	CpuProtection                 *uint32                                                                     `path:"cpu-protection" module:"nokia-conf"`
	Description                   *string                                                                     `path:"description" module:"nokia-conf"`
	DynamicTunnelRedundantNexthop *string                                                                     `path:"dynamic-tunnel-redundant-nexthop" module:"nokia-conf"`
	HoldTime                      *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime            `path:"hold-time" module:"nokia-conf"`
	IfAttribute                   *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_IfAttribute         `path:"if-attribute" module:"nokia-conf"`
	Ingress                       *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ingress             `path:"ingress" module:"nokia-conf"`
	IngressStats                  *bool                                                                       `path:"ingress-stats" module:"nokia-conf"`
	InterfaceName                 *string                                                                     `path:"interface-name" module:"nokia-conf"`
	IpMtu                         *uint32                                                                     `path:"ip-mtu" module:"nokia-conf"`
	Ipv4                          *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4                `path:"ipv4" module:"nokia-conf"`
	Ipv6                          *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv6                `path:"ipv6" module:"nokia-conf" yangPresence:"true"`
	LoadBalancing                 *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_LoadBalancing       `path:"load-balancing" module:"nokia-conf"`
	Loopback                      *bool                                                                       `path:"loopback" module:"nokia-conf"`
	Mac                           *string                                                                     `path:"mac" module:"nokia-conf"`
	MacAccounting                 *bool                                                                       `path:"mac-accounting" module:"nokia-conf"`
	MonitorOperGroup              *string                                                                     `path:"monitor-oper-group" module:"nokia-conf"`
	MulticastNetworkDomain        *string                                                                     `path:"multicast-network-domain" module:"nokia-conf"`
	PingTemplate                  *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_PingTemplate        `path:"ping-template" module:"nokia-conf" yangPresence:"true"`
	PtpHwAssist                   *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_PtpHwAssist         `path:"ptp-hw-assist" module:"nokia-conf" yangPresence:"true"`
	RadiusAuthPolicy              *string                                                                     `path:"radius-auth-policy" module:"nokia-conf"`
	Sap                           map[string]*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Sap      `path:"sap" module:"nokia-conf"`
	ShcvPolicyIpv4                *string                                                                     `path:"shcv-policy-ipv4" module:"nokia-conf"`
	SpokeSdp                      map[string]*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_SpokeSdp `path:"spoke-sdp" module:"nokia-conf"`
	StaticTunnelRedundantNexthop  *string                                                                     `path:"static-tunnel-redundant-nexthop" module:"nokia-conf"`
	TosMarkingState               E_NokiaTypesRouter_TosMarkingState                                          `path:"tos-marking-state" module:"nokia-conf"`
	Tunnel                        *bool                                                                       `path:"tunnel" module:"nokia-conf"`
	VasIfType                     E_NokiaTypesRouter_VasIfType                                                `path:"vas-if-type" module:"nokia-conf"`
	Vpls                          map[string]*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Vpls     `path:"vpls" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ies_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_Interface) IsYANGGoStruct() {}

// NewSap creates a new entry in the Sap list of the
// NokiaConf_Configure_Groups_Group_Service_Ies_Interface struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface) NewSap(SapId string) (*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Sap, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sap == nil {
		t.Sap = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Sap)
	}

	key := SapId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Sap[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Sap", key)
	}

	t.Sap[key] = &NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Sap{
		SapId: &SapId,
	}

	return t.Sap[key], nil
}

// RenameSap renames an entry in the list Sap within
// the NokiaConf_Configure_Groups_Group_Service_Ies_Interface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface) RenameSap(oldK, newK string) error {
	if _, ok := t.Sap[newK]; ok {
		return fmt.Errorf("key %v already exists in Sap", newK)
	}

	e, ok := t.Sap[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Sap", oldK)
	}
	e.SapId = &newK

	t.Sap[newK] = e
	delete(t.Sap, oldK)
	return nil
}

// GetOrCreateSap retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Ies_Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface) GetOrCreateSap(SapId string) *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Sap {

	key := SapId

	if v, ok := t.Sap[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSap(SapId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSap got unexpected error: %v", err))
	}
	return v
}

// GetSap retrieves the value with the specified key from
// the Sap map field of NokiaConf_Configure_Groups_Group_Service_Ies_Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface) GetSap(SapId string) *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Sap {

	if t == nil {
		return nil
	}

	key := SapId

	if lm, ok := t.Sap[key]; ok {
		return lm
	}
	return nil
}

// DeleteSap deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Ies_Interface. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface) DeleteSap(SapId string) {
	key := SapId

	delete(t.Sap, key)
}

// AppendSap appends the supplied NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Sap struct to the
// list Sap of NokiaConf_Configure_Groups_Group_Service_Ies_Interface. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Sap already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface) AppendSap(v *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Sap) error {
	if v.SapId == nil {
		return fmt.Errorf("invalid nil key received for SapId")
	}

	key := *v.SapId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sap == nil {
		t.Sap = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Sap)
	}

	if _, ok := t.Sap[key]; ok {
		return fmt.Errorf("duplicate key for list Sap %v", key)
	}

	t.Sap[key] = v
	return nil
}

// NewSpokeSdp creates a new entry in the SpokeSdp list of the
// NokiaConf_Configure_Groups_Group_Service_Ies_Interface struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface) NewSpokeSdp(SdpBindId string) (*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_SpokeSdp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SpokeSdp == nil {
		t.SpokeSdp = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_SpokeSdp)
	}

	key := SdpBindId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SpokeSdp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SpokeSdp", key)
	}

	t.SpokeSdp[key] = &NokiaConf_Configure_Groups_Group_Service_Ies_Interface_SpokeSdp{
		SdpBindId: &SdpBindId,
	}

	return t.SpokeSdp[key], nil
}

// RenameSpokeSdp renames an entry in the list SpokeSdp within
// the NokiaConf_Configure_Groups_Group_Service_Ies_Interface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface) RenameSpokeSdp(oldK, newK string) error {
	if _, ok := t.SpokeSdp[newK]; ok {
		return fmt.Errorf("key %v already exists in SpokeSdp", newK)
	}

	e, ok := t.SpokeSdp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SpokeSdp", oldK)
	}
	e.SdpBindId = &newK

	t.SpokeSdp[newK] = e
	delete(t.SpokeSdp, oldK)
	return nil
}

// GetOrCreateSpokeSdp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Ies_Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface) GetOrCreateSpokeSdp(SdpBindId string) *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_SpokeSdp {

	key := SdpBindId

	if v, ok := t.SpokeSdp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSpokeSdp(SdpBindId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSpokeSdp got unexpected error: %v", err))
	}
	return v
}

// GetSpokeSdp retrieves the value with the specified key from
// the SpokeSdp map field of NokiaConf_Configure_Groups_Group_Service_Ies_Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface) GetSpokeSdp(SdpBindId string) *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_SpokeSdp {

	if t == nil {
		return nil
	}

	key := SdpBindId

	if lm, ok := t.SpokeSdp[key]; ok {
		return lm
	}
	return nil
}

// DeleteSpokeSdp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Ies_Interface. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface) DeleteSpokeSdp(SdpBindId string) {
	key := SdpBindId

	delete(t.SpokeSdp, key)
}

// AppendSpokeSdp appends the supplied NokiaConf_Configure_Groups_Group_Service_Ies_Interface_SpokeSdp struct to the
// list SpokeSdp of NokiaConf_Configure_Groups_Group_Service_Ies_Interface. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Ies_Interface_SpokeSdp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface) AppendSpokeSdp(v *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_SpokeSdp) error {
	if v.SdpBindId == nil {
		return fmt.Errorf("invalid nil key received for SdpBindId")
	}

	key := *v.SdpBindId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SpokeSdp == nil {
		t.SpokeSdp = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_SpokeSdp)
	}

	if _, ok := t.SpokeSdp[key]; ok {
		return fmt.Errorf("duplicate key for list SpokeSdp %v", key)
	}

	t.SpokeSdp[key] = v
	return nil
}

// NewVpls creates a new entry in the Vpls list of the
// NokiaConf_Configure_Groups_Group_Service_Ies_Interface struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface) NewVpls(VplsName string) (*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Vpls, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vpls == nil {
		t.Vpls = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Vpls)
	}

	key := VplsName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Vpls[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Vpls", key)
	}

	t.Vpls[key] = &NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Vpls{
		VplsName: &VplsName,
	}

	return t.Vpls[key], nil
}

// RenameVpls renames an entry in the list Vpls within
// the NokiaConf_Configure_Groups_Group_Service_Ies_Interface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface) RenameVpls(oldK, newK string) error {
	if _, ok := t.Vpls[newK]; ok {
		return fmt.Errorf("key %v already exists in Vpls", newK)
	}

	e, ok := t.Vpls[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Vpls", oldK)
	}
	e.VplsName = &newK

	t.Vpls[newK] = e
	delete(t.Vpls, oldK)
	return nil
}

// GetOrCreateVpls retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Ies_Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface) GetOrCreateVpls(VplsName string) *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Vpls {

	key := VplsName

	if v, ok := t.Vpls[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVpls(VplsName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVpls got unexpected error: %v", err))
	}
	return v
}

// GetVpls retrieves the value with the specified key from
// the Vpls map field of NokiaConf_Configure_Groups_Group_Service_Ies_Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface) GetVpls(VplsName string) *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Vpls {

	if t == nil {
		return nil
	}

	key := VplsName

	if lm, ok := t.Vpls[key]; ok {
		return lm
	}
	return nil
}

// DeleteVpls deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Ies_Interface. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface) DeleteVpls(VplsName string) {
	key := VplsName

	delete(t.Vpls, key)
}

// AppendVpls appends the supplied NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Vpls struct to the
// list Vpls of NokiaConf_Configure_Groups_Group_Service_Ies_Interface. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Vpls already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface) AppendVpls(v *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Vpls) error {
	if v.VplsName == nil {
		return fmt.Errorf("invalid nil key received for VplsName")
	}

	key := *v.VplsName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vpls == nil {
		t.Vpls = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Vpls)
	}

	if _, ok := t.Vpls[key]; ok {
		return fmt.Errorf("duplicate key for list Vpls %v", key)
	}

	t.Vpls[key] = v
	return nil
}

// GetOrCreateCflowdParameters retrieves the value of the CflowdParameters field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface) GetOrCreateCflowdParameters() *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters {
	if t.CflowdParameters != nil {
		return t.CflowdParameters
	}
	t.CflowdParameters = &NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters{}
	return t.CflowdParameters
}

// GetOrCreateHoldTime retrieves the value of the HoldTime field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface) GetOrCreateHoldTime() *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime {
	if t.HoldTime != nil {
		return t.HoldTime
	}
	t.HoldTime = &NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime{}
	return t.HoldTime
}

// GetOrCreateIfAttribute retrieves the value of the IfAttribute field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface) GetOrCreateIfAttribute() *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_IfAttribute {
	if t.IfAttribute != nil {
		return t.IfAttribute
	}
	t.IfAttribute = &NokiaConf_Configure_Groups_Group_Service_Ies_Interface_IfAttribute{}
	return t.IfAttribute
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface) GetOrCreateIngress() *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ingress{}
	return t.Ingress
}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface) GetOrCreateIpv4() *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface) GetOrCreateIpv6() *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv6{}
	return t.Ipv6
}

// GetOrCreateLoadBalancing retrieves the value of the LoadBalancing field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface) GetOrCreateLoadBalancing() *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_LoadBalancing {
	if t.LoadBalancing != nil {
		return t.LoadBalancing
	}
	t.LoadBalancing = &NokiaConf_Configure_Groups_Group_Service_Ies_Interface_LoadBalancing{}
	return t.LoadBalancing
}

// GetOrCreatePingTemplate retrieves the value of the PingTemplate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface) GetOrCreatePingTemplate() *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_PingTemplate {
	if t.PingTemplate != nil {
		return t.PingTemplate
	}
	t.PingTemplate = &NokiaConf_Configure_Groups_Group_Service_Ies_Interface_PingTemplate{}
	return t.PingTemplate
}

// GetOrCreatePtpHwAssist retrieves the value of the PtpHwAssist field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface) GetOrCreatePtpHwAssist() *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_PtpHwAssist {
	if t.PtpHwAssist != nil {
		return t.PtpHwAssist
	}
	t.PtpHwAssist = &NokiaConf_Configure_Groups_Group_Service_Ies_Interface_PtpHwAssist{}
	return t.PtpHwAssist
}

// GetCflowdParameters returns the value of the CflowdParameters struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ies_Interface. If the receiver or the field CflowdParameters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface) GetCflowdParameters() *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters {
	if t != nil && t.CflowdParameters != nil {
		return t.CflowdParameters
	}
	return nil
}

// GetHoldTime returns the value of the HoldTime struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ies_Interface. If the receiver or the field HoldTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface) GetHoldTime() *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime {
	if t != nil && t.HoldTime != nil {
		return t.HoldTime
	}
	return nil
}

// GetIfAttribute returns the value of the IfAttribute struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ies_Interface. If the receiver or the field IfAttribute is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface) GetIfAttribute() *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_IfAttribute {
	if t != nil && t.IfAttribute != nil {
		return t.IfAttribute
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ies_Interface. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface) GetIngress() *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ies_Interface. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface) GetIpv4() *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ies_Interface. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface) GetIpv6() *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// GetLoadBalancing returns the value of the LoadBalancing struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ies_Interface. If the receiver or the field LoadBalancing is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface) GetLoadBalancing() *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_LoadBalancing {
	if t != nil && t.LoadBalancing != nil {
		return t.LoadBalancing
	}
	return nil
}

// GetPingTemplate returns the value of the PingTemplate struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ies_Interface. If the receiver or the field PingTemplate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface) GetPingTemplate() *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_PingTemplate {
	if t != nil && t.PingTemplate != nil {
		return t.PingTemplate
	}
	return nil
}

// GetPtpHwAssist returns the value of the PtpHwAssist struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ies_Interface. If the receiver or the field PtpHwAssist is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface) GetPtpHwAssist() *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_PtpHwAssist {
	if t != nil && t.PtpHwAssist != nil {
		return t.PtpHwAssist
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Ies_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetCpuProtection retrieves the value of the leaf CpuProtection from the NokiaConf_Configure_Groups_Group_Service_Ies_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CpuProtection is set, it can
// safely use t.GetCpuProtection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CpuProtection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface) GetCpuProtection() uint32 {
	if t == nil || t.CpuProtection == nil {
		return 0
	}
	return *t.CpuProtection
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Ies_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDynamicTunnelRedundantNexthop retrieves the value of the leaf DynamicTunnelRedundantNexthop from the NokiaConf_Configure_Groups_Group_Service_Ies_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DynamicTunnelRedundantNexthop is set, it can
// safely use t.GetDynamicTunnelRedundantNexthop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DynamicTunnelRedundantNexthop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface) GetDynamicTunnelRedundantNexthop() string {
	if t == nil || t.DynamicTunnelRedundantNexthop == nil {
		return ""
	}
	return *t.DynamicTunnelRedundantNexthop
}

// GetIngressStats retrieves the value of the leaf IngressStats from the NokiaConf_Configure_Groups_Group_Service_Ies_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IngressStats is set, it can
// safely use t.GetIngressStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IngressStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface) GetIngressStats() bool {
	if t == nil || t.IngressStats == nil {
		return false
	}
	return *t.IngressStats
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Groups_Group_Service_Ies_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetIpMtu retrieves the value of the leaf IpMtu from the NokiaConf_Configure_Groups_Group_Service_Ies_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpMtu is set, it can
// safely use t.GetIpMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpMtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface) GetIpMtu() uint32 {
	if t == nil || t.IpMtu == nil {
		return 0
	}
	return *t.IpMtu
}

// GetLoopback retrieves the value of the leaf Loopback from the NokiaConf_Configure_Groups_Group_Service_Ies_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Loopback is set, it can
// safely use t.GetLoopback() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Loopback == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface) GetLoopback() bool {
	if t == nil || t.Loopback == nil {
		return false
	}
	return *t.Loopback
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Groups_Group_Service_Ies_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface) GetMac() string {
	if t == nil || t.Mac == nil {
		return ""
	}
	return *t.Mac
}

// GetMacAccounting retrieves the value of the leaf MacAccounting from the NokiaConf_Configure_Groups_Group_Service_Ies_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAccounting is set, it can
// safely use t.GetMacAccounting() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAccounting == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface) GetMacAccounting() bool {
	if t == nil || t.MacAccounting == nil {
		return false
	}
	return *t.MacAccounting
}

// GetMonitorOperGroup retrieves the value of the leaf MonitorOperGroup from the NokiaConf_Configure_Groups_Group_Service_Ies_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorOperGroup is set, it can
// safely use t.GetMonitorOperGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorOperGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface) GetMonitorOperGroup() string {
	if t == nil || t.MonitorOperGroup == nil {
		return ""
	}
	return *t.MonitorOperGroup
}

// GetMulticastNetworkDomain retrieves the value of the leaf MulticastNetworkDomain from the NokiaConf_Configure_Groups_Group_Service_Ies_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MulticastNetworkDomain is set, it can
// safely use t.GetMulticastNetworkDomain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MulticastNetworkDomain == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface) GetMulticastNetworkDomain() string {
	if t == nil || t.MulticastNetworkDomain == nil {
		return ""
	}
	return *t.MulticastNetworkDomain
}

// GetRadiusAuthPolicy retrieves the value of the leaf RadiusAuthPolicy from the NokiaConf_Configure_Groups_Group_Service_Ies_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RadiusAuthPolicy is set, it can
// safely use t.GetRadiusAuthPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RadiusAuthPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface) GetRadiusAuthPolicy() string {
	if t == nil || t.RadiusAuthPolicy == nil {
		return ""
	}
	return *t.RadiusAuthPolicy
}

// GetShcvPolicyIpv4 retrieves the value of the leaf ShcvPolicyIpv4 from the NokiaConf_Configure_Groups_Group_Service_Ies_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ShcvPolicyIpv4 is set, it can
// safely use t.GetShcvPolicyIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ShcvPolicyIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface) GetShcvPolicyIpv4() string {
	if t == nil || t.ShcvPolicyIpv4 == nil {
		return ""
	}
	return *t.ShcvPolicyIpv4
}

// GetStaticTunnelRedundantNexthop retrieves the value of the leaf StaticTunnelRedundantNexthop from the NokiaConf_Configure_Groups_Group_Service_Ies_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StaticTunnelRedundantNexthop is set, it can
// safely use t.GetStaticTunnelRedundantNexthop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StaticTunnelRedundantNexthop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface) GetStaticTunnelRedundantNexthop() string {
	if t == nil || t.StaticTunnelRedundantNexthop == nil {
		return ""
	}
	return *t.StaticTunnelRedundantNexthop
}

// GetTosMarkingState retrieves the value of the leaf TosMarkingState from the NokiaConf_Configure_Groups_Group_Service_Ies_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TosMarkingState is set, it can
// safely use t.GetTosMarkingState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TosMarkingState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface) GetTosMarkingState() E_NokiaTypesRouter_TosMarkingState {
	if t == nil || t.TosMarkingState == 0 {
		return NokiaTypesRouter_TosMarkingState_untrusted
	}
	return t.TosMarkingState
}

// GetTunnel retrieves the value of the leaf Tunnel from the NokiaConf_Configure_Groups_Group_Service_Ies_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tunnel is set, it can
// safely use t.GetTunnel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tunnel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface) GetTunnel() bool {
	if t == nil || t.Tunnel == nil {
		return false
	}
	return *t.Tunnel
}

// GetVasIfType retrieves the value of the leaf VasIfType from the NokiaConf_Configure_Groups_Group_Service_Ies_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VasIfType is set, it can
// safely use t.GetVasIfType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VasIfType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface) GetVasIfType() E_NokiaTypesRouter_VasIfType {
	if t == nil || t.VasIfType == 0 {
		return 0
	}
	return t.VasIfType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ies_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.IngressStats == nil {
		var v bool = false
		t.IngressStats = &v
	}
	if t.Loopback == nil {
		var v bool = false
		t.Loopback = &v
	}
	if t.MacAccounting == nil {
		var v bool = false
		t.MacAccounting = &v
	}
	if t.TosMarkingState == 0 {
		t.TosMarkingState = NokiaTypesRouter_TosMarkingState_untrusted
	}
	if t.Tunnel == nil {
		var v bool = false
		t.Tunnel = &v
	}
	t.CflowdParameters.PopulateDefaults()
	t.HoldTime.PopulateDefaults()
	t.IfAttribute.PopulateDefaults()
	t.Ingress.PopulateDefaults()
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
	t.LoadBalancing.PopulateDefaults()
	t.PingTemplate.PopulateDefaults()
	t.PtpHwAssist.PopulateDefaults()
	for _, e := range t.Sap {
		e.PopulateDefaults()
	}
	for _, e := range t.SpokeSdp {
		e.PopulateDefaults()
	}
	for _, e := range t.Vpls {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Ies_Interface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ies_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ies_Interface.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_Interface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters represents the /nokia-conf/configure/groups/group/service/ies/interface/cflowd-parameters YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters struct {
	Sampling map[NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters_Sampling_SamplingType_Union]*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters_Sampling `path:"sampling" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters) IsYANGGoStruct() {}

// NewSampling creates a new entry in the Sampling list of the
// NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters) NewSampling(SamplingType NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters_Sampling_SamplingType_Union) (*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters_Sampling, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sampling == nil {
		t.Sampling = make(map[NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters_Sampling_SamplingType_Union]*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters_Sampling)
	}

	key := SamplingType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Sampling[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Sampling", key)
	}

	t.Sampling[key] = &NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters_Sampling{
		SamplingType: SamplingType,
	}

	return t.Sampling[key], nil
}

// RenameSampling renames an entry in the list Sampling within
// the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters) RenameSampling(oldK, newK NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters_Sampling_SamplingType_Union) error {
	if _, ok := t.Sampling[newK]; ok {
		return fmt.Errorf("key %v already exists in Sampling", newK)
	}

	e, ok := t.Sampling[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Sampling", oldK)
	}
	e.SamplingType = newK

	t.Sampling[newK] = e
	delete(t.Sampling, oldK)
	return nil
}

// GetOrCreateSampling retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters) GetOrCreateSampling(SamplingType NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters_Sampling_SamplingType_Union) *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters_Sampling {

	key := SamplingType

	if v, ok := t.Sampling[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSampling(SamplingType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSampling got unexpected error: %v", err))
	}
	return v
}

// GetSampling retrieves the value with the specified key from
// the Sampling map field of NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters) GetSampling(SamplingType NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters_Sampling_SamplingType_Union) *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters_Sampling {

	if t == nil {
		return nil
	}

	key := SamplingType

	if lm, ok := t.Sampling[key]; ok {
		return lm
	}
	return nil
}

// DeleteSampling deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters) DeleteSampling(SamplingType NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters_Sampling_SamplingType_Union) {
	key := SamplingType

	delete(t.Sampling, key)
}

// AppendSampling appends the supplied NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters_Sampling struct to the
// list Sampling of NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters_Sampling already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters) AppendSampling(v *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters_Sampling) error {
	key := v.SamplingType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sampling == nil {
		t.Sampling = make(map[NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters_Sampling_SamplingType_Union]*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters_Sampling)
	}

	if _, ok := t.Sampling[key]; ok {
		return fmt.Errorf("duplicate key for list Sampling %v", key)
	}

	t.Sampling[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Sampling {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters_Sampling represents the /nokia-conf/configure/groups/group/service/ies/interface/cflowd-parameters/sampling YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters_Sampling struct {
	Direction     E_NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters_Sampling_Direction         `path:"direction" module:"nokia-conf"`
	SampleProfile NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters_Sampling_SampleProfile_Union `path:"sample-profile" module:"nokia-conf"`
	SamplingType  NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters_Sampling_SamplingType_Union  `path:"sampling-type" module:"nokia-conf"`
	Type          E_NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters_Sampling_Type              `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters_Sampling implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters_Sampling) IsYANGGoStruct() {
}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters_Sampling
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters_Sampling) GetDirection() E_NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters_Sampling_Direction {
	if t == nil || t.Direction == 0 {
		return NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters_Sampling_Direction_ingress_only
	}
	return t.Direction
}

// GetSampleProfile retrieves the value of the leaf SampleProfile from the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters_Sampling
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SampleProfile is set, it can
// safely use t.GetSampleProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SampleProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters_Sampling) GetSampleProfile() NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters_Sampling_SampleProfile_Union {
	if t == nil || t.SampleProfile == nil {
		return nil
	}
	return t.SampleProfile
}

// GetSamplingType retrieves the value of the leaf SamplingType from the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters_Sampling
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SamplingType is set, it can
// safely use t.GetSamplingType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SamplingType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters_Sampling) GetSamplingType() NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters_Sampling_SamplingType_Union {
	if t == nil || t.SamplingType == nil {
		return nil
	}
	return t.SamplingType
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters_Sampling
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters_Sampling) GetType() E_NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters_Sampling_Type {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters_Sampling
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters_Sampling) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Direction == 0 {
		t.Direction = NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters_Sampling_Direction_ingress_only
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters_Sampling struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters_Sampling) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"sampling-type": t.SamplingType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters_Sampling) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters_Sampling"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters_Sampling) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters_Sampling) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters_Sampling.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_CflowdParameters_Sampling) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime represents the /nokia-conf/configure/groups/group/service/ies/interface/hold-time YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime struct {
	Ipv4 *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv4 `path:"ipv4" module:"nokia-conf"`
	Ipv6 *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv6 `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime) IsYANGGoStruct() {}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime) GetOrCreateIpv4() *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime) GetOrCreateIpv6() *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv6{}
	return t.Ipv6
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime) GetIpv4() *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime) GetIpv6() *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv4 represents the /nokia-conf/configure/groups/group/service/ies/interface/hold-time/ipv4 YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv4 struct {
	Down *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv4_Down `path:"down" module:"nokia-conf"`
	Up   *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv4_Up   `path:"up" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv4) IsYANGGoStruct() {}

// GetOrCreateDown retrieves the value of the Down field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv4) GetOrCreateDown() *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv4_Down {
	if t.Down != nil {
		return t.Down
	}
	t.Down = &NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv4_Down{}
	return t.Down
}

// GetOrCreateUp retrieves the value of the Up field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv4) GetOrCreateUp() *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv4_Up {
	if t.Up != nil {
		return t.Up
	}
	t.Up = &NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv4_Up{}
	return t.Up
}

// GetDown returns the value of the Down struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv4. If the receiver or the field Down is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv4) GetDown() *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv4_Down {
	if t != nil && t.Down != nil {
		return t.Down
	}
	return nil
}

// GetUp returns the value of the Up struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv4. If the receiver or the field Up is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv4) GetUp() *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv4_Up {
	if t != nil && t.Up != nil {
		return t.Up
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Down.PopulateDefaults()
	t.Up.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv4.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv4_Down represents the /nokia-conf/configure/groups/group/service/ies/interface/hold-time/ipv4/down YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv4_Down struct {
	InitOnly *bool   `path:"init-only" module:"nokia-conf"`
	Seconds  *uint32 `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv4_Down implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv4_Down) IsYANGGoStruct() {}

// GetInitOnly retrieves the value of the leaf InitOnly from the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv4_Down
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitOnly is set, it can
// safely use t.GetInitOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv4_Down) GetInitOnly() bool {
	if t == nil || t.InitOnly == nil {
		return false
	}
	return *t.InitOnly
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv4_Down
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv4_Down) GetSeconds() uint32 {
	if t == nil || t.Seconds == nil {
		return 0
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv4_Down
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv4_Down) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InitOnly == nil {
		var v bool = false
		t.InitOnly = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv4_Down) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv4_Down"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv4_Down) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv4_Down) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv4_Down.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv4_Down) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv4_Up represents the /nokia-conf/configure/groups/group/service/ies/interface/hold-time/ipv4/up YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv4_Up struct {
	Seconds *uint32 `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv4_Up implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv4_Up) IsYANGGoStruct() {}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv4_Up
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv4_Up) GetSeconds() uint32 {
	if t == nil || t.Seconds == nil {
		return 0
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv4_Up
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv4_Up) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv4_Up) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv4_Up"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv4_Up) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv4_Up) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv4_Up.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv4_Up) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv6 represents the /nokia-conf/configure/groups/group/service/ies/interface/hold-time/ipv6 YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv6 struct {
	Down *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv6_Down `path:"down" module:"nokia-conf"`
	Up   *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv6_Up   `path:"up" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv6) IsYANGGoStruct() {}

// GetOrCreateDown retrieves the value of the Down field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv6) GetOrCreateDown() *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv6_Down {
	if t.Down != nil {
		return t.Down
	}
	t.Down = &NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv6_Down{}
	return t.Down
}

// GetOrCreateUp retrieves the value of the Up field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv6) GetOrCreateUp() *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv6_Up {
	if t.Up != nil {
		return t.Up
	}
	t.Up = &NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv6_Up{}
	return t.Up
}

// GetDown returns the value of the Down struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv6. If the receiver or the field Down is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv6) GetDown() *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv6_Down {
	if t != nil && t.Down != nil {
		return t.Down
	}
	return nil
}

// GetUp returns the value of the Up struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv6. If the receiver or the field Up is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv6) GetUp() *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv6_Up {
	if t != nil && t.Up != nil {
		return t.Up
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Down.PopulateDefaults()
	t.Up.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv6.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv6_Down represents the /nokia-conf/configure/groups/group/service/ies/interface/hold-time/ipv6/down YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv6_Down struct {
	InitOnly *bool   `path:"init-only" module:"nokia-conf"`
	Seconds  *uint32 `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv6_Down implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv6_Down) IsYANGGoStruct() {}

// GetInitOnly retrieves the value of the leaf InitOnly from the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv6_Down
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitOnly is set, it can
// safely use t.GetInitOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv6_Down) GetInitOnly() bool {
	if t == nil || t.InitOnly == nil {
		return false
	}
	return *t.InitOnly
}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv6_Down
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv6_Down) GetSeconds() uint32 {
	if t == nil || t.Seconds == nil {
		return 0
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv6_Down
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv6_Down) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InitOnly == nil {
		var v bool = false
		t.InitOnly = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv6_Down) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv6_Down"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv6_Down) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv6_Down) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv6_Down.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv6_Down) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv6_Up represents the /nokia-conf/configure/groups/group/service/ies/interface/hold-time/ipv6/up YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv6_Up struct {
	Seconds *uint32 `path:"seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv6_Up implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv6_Up) IsYANGGoStruct() {}

// GetSeconds retrieves the value of the leaf Seconds from the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv6_Up
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Seconds is set, it can
// safely use t.GetSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Seconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv6_Up) GetSeconds() uint32 {
	if t == nil || t.Seconds == nil {
		return 0
	}
	return *t.Seconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv6_Up
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv6_Up) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv6_Up) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv6_Up"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv6_Up) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv6_Up) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv6_Up.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_HoldTime_Ipv6_Up) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ies_Interface_IfAttribute represents the /nokia-conf/configure/groups/group/service/ies/interface/if-attribute YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ies_Interface_IfAttribute struct {
	AdminGroup []string                                                                                 `path:"admin-group" module:"nokia-conf"`
	SrlgGroup  map[string]*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_IfAttribute_SrlgGroup `path:"srlg-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ies_Interface_IfAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_IfAttribute) IsYANGGoStruct() {}

// NewSrlgGroup creates a new entry in the SrlgGroup list of the
// NokiaConf_Configure_Groups_Group_Service_Ies_Interface_IfAttribute struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_IfAttribute) NewSrlgGroup(Name string) (*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_IfAttribute_SrlgGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SrlgGroup == nil {
		t.SrlgGroup = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_IfAttribute_SrlgGroup)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SrlgGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SrlgGroup", key)
	}

	t.SrlgGroup[key] = &NokiaConf_Configure_Groups_Group_Service_Ies_Interface_IfAttribute_SrlgGroup{
		Name: &Name,
	}

	return t.SrlgGroup[key], nil
}

// RenameSrlgGroup renames an entry in the list SrlgGroup within
// the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_IfAttribute struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_IfAttribute) RenameSrlgGroup(oldK, newK string) error {
	if _, ok := t.SrlgGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in SrlgGroup", newK)
	}

	e, ok := t.SrlgGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SrlgGroup", oldK)
	}
	e.Name = &newK

	t.SrlgGroup[newK] = e
	delete(t.SrlgGroup, oldK)
	return nil
}

// GetOrCreateSrlgGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Ies_Interface_IfAttribute. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_IfAttribute) GetOrCreateSrlgGroup(Name string) *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_IfAttribute_SrlgGroup {

	key := Name

	if v, ok := t.SrlgGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSrlgGroup(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSrlgGroup got unexpected error: %v", err))
	}
	return v
}

// GetSrlgGroup retrieves the value with the specified key from
// the SrlgGroup map field of NokiaConf_Configure_Groups_Group_Service_Ies_Interface_IfAttribute. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_IfAttribute) GetSrlgGroup(Name string) *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_IfAttribute_SrlgGroup {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.SrlgGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteSrlgGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Ies_Interface_IfAttribute. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_IfAttribute) DeleteSrlgGroup(Name string) {
	key := Name

	delete(t.SrlgGroup, key)
}

// AppendSrlgGroup appends the supplied NokiaConf_Configure_Groups_Group_Service_Ies_Interface_IfAttribute_SrlgGroup struct to the
// list SrlgGroup of NokiaConf_Configure_Groups_Group_Service_Ies_Interface_IfAttribute. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Ies_Interface_IfAttribute_SrlgGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_IfAttribute) AppendSrlgGroup(v *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_IfAttribute_SrlgGroup) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SrlgGroup == nil {
		t.SrlgGroup = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_IfAttribute_SrlgGroup)
	}

	if _, ok := t.SrlgGroup[key]; ok {
		return fmt.Errorf("duplicate key for list SrlgGroup %v", key)
	}

	t.SrlgGroup[key] = v
	return nil
}

// GetAdminGroup retrieves the value of the leaf AdminGroup from the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_IfAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminGroup is set, it can
// safely use t.GetAdminGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_IfAttribute) GetAdminGroup() []string {
	if t == nil || t.AdminGroup == nil {
		return nil
	}
	return t.AdminGroup
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_IfAttribute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_IfAttribute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.SrlgGroup {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_IfAttribute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ies_Interface_IfAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_IfAttribute) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_IfAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ies_Interface_IfAttribute.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_IfAttribute) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ies_Interface_IfAttribute_SrlgGroup represents the /nokia-conf/configure/groups/group/service/ies/interface/if-attribute/srlg-group YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ies_Interface_IfAttribute_SrlgGroup struct {
	Name *string `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ies_Interface_IfAttribute_SrlgGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_IfAttribute_SrlgGroup) IsYANGGoStruct() {
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_IfAttribute_SrlgGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_IfAttribute_SrlgGroup) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_IfAttribute_SrlgGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_IfAttribute_SrlgGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_IfAttribute_SrlgGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_IfAttribute_SrlgGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_IfAttribute_SrlgGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ies_Interface_IfAttribute_SrlgGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_IfAttribute_SrlgGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_IfAttribute_SrlgGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ies_Interface_IfAttribute_SrlgGroup.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_IfAttribute_SrlgGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ingress represents the /nokia-conf/configure/groups/group/service/ies/interface/ingress YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ingress struct {
	DestinationClassLookup *bool   `path:"destination-class-lookup" module:"nokia-conf"`
	PolicyAccounting       *string `path:"policy-accounting" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ingress) IsYANGGoStruct() {}

// GetDestinationClassLookup retrieves the value of the leaf DestinationClassLookup from the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationClassLookup is set, it can
// safely use t.GetDestinationClassLookup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationClassLookup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ingress) GetDestinationClassLookup() bool {
	if t == nil || t.DestinationClassLookup == nil {
		return false
	}
	return *t.DestinationClassLookup
}

// GetPolicyAccounting retrieves the value of the leaf PolicyAccounting from the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyAccounting is set, it can
// safely use t.GetPolicyAccounting() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyAccounting == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ingress) GetPolicyAccounting() string {
	if t == nil || t.PolicyAccounting == nil {
		return ""
	}
	return *t.PolicyAccounting
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DestinationClassLookup == nil {
		var v bool = false
		t.DestinationClassLookup = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ingress.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4 represents the /nokia-conf/configure/groups/group/service/ies/interface/ipv4 YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4 struct {
	Addresses               *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Addresses                                                                                       `path:"addresses" module:"nokia-conf"`
	AllowDirectedBroadcasts *bool                                                                                                                                                        `path:"allow-directed-broadcasts" module:"nokia-conf"`
	Bfd                     *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Bfd                                                                                             `path:"bfd" module:"nokia-conf"`
	Dhcp                    *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp                                                                                            `path:"dhcp" module:"nokia-conf" yangPresence:"true"`
	Icmp                    *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Icmp                                                                                            `path:"icmp" module:"nokia-conf"`
	IpHelperAddress         *string                                                                                                                                                      `path:"ip-helper-address" module:"nokia-conf"`
	LocalDhcpServer         *string                                                                                                                                                      `path:"local-dhcp-server" module:"nokia-conf"`
	NeighborDiscovery       *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_NeighborDiscovery                                                                               `path:"neighbor-discovery" module:"nokia-conf"`
	Primary                 *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Primary                                                                                         `path:"primary" module:"nokia-conf" yangPresence:"true"`
	QosRouteLookup          E_NokiaTypesRouter_QosRouteLookup                                                                                                                            `path:"qos-route-lookup" module:"nokia-conf"`
	Secondary               map[string]*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Secondary                                                                            `path:"secondary" module:"nokia-conf"`
	TcpMss                  *uint32                                                                                                                                                      `path:"tcp-mss" module:"nokia-conf"`
	Unnumbered              *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Unnumbered                                                                                      `path:"unnumbered" module:"nokia-conf"`
	UrpfCheck               *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_UrpfCheck                                                                                       `path:"urpf-check" module:"nokia-conf" yangPresence:"true"`
	Vrrp                    map[NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Vrrp_VirtualRouterId_Union]*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Vrrp `path:"vrrp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4) IsYANGGoStruct() {}

// NewSecondary creates a new entry in the Secondary list of the
// NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4) NewSecondary(Address string) (*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Secondary, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Secondary == nil {
		t.Secondary = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Secondary)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Secondary[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Secondary", key)
	}

	t.Secondary[key] = &NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Secondary{
		Address: &Address,
	}

	return t.Secondary[key], nil
}

// RenameSecondary renames an entry in the list Secondary within
// the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4) RenameSecondary(oldK, newK string) error {
	if _, ok := t.Secondary[newK]; ok {
		return fmt.Errorf("key %v already exists in Secondary", newK)
	}

	e, ok := t.Secondary[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Secondary", oldK)
	}
	e.Address = &newK

	t.Secondary[newK] = e
	delete(t.Secondary, oldK)
	return nil
}

// GetOrCreateSecondary retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4) GetOrCreateSecondary(Address string) *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Secondary {

	key := Address

	if v, ok := t.Secondary[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSecondary(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSecondary got unexpected error: %v", err))
	}
	return v
}

// GetSecondary retrieves the value with the specified key from
// the Secondary map field of NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4) GetSecondary(Address string) *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Secondary {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.Secondary[key]; ok {
		return lm
	}
	return nil
}

// DeleteSecondary deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4) DeleteSecondary(Address string) {
	key := Address

	delete(t.Secondary, key)
}

// AppendSecondary appends the supplied NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Secondary struct to the
// list Secondary of NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Secondary already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4) AppendSecondary(v *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Secondary) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Secondary == nil {
		t.Secondary = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Secondary)
	}

	if _, ok := t.Secondary[key]; ok {
		return fmt.Errorf("duplicate key for list Secondary %v", key)
	}

	t.Secondary[key] = v
	return nil
}

// NewVrrp creates a new entry in the Vrrp list of the
// NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4) NewVrrp(VirtualRouterId NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Vrrp_VirtualRouterId_Union) (*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Vrrp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vrrp == nil {
		t.Vrrp = make(map[NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Vrrp_VirtualRouterId_Union]*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Vrrp)
	}

	key := VirtualRouterId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Vrrp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Vrrp", key)
	}

	t.Vrrp[key] = &NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Vrrp{
		VirtualRouterId: VirtualRouterId,
	}

	return t.Vrrp[key], nil
}

// RenameVrrp renames an entry in the list Vrrp within
// the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4) RenameVrrp(oldK, newK NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Vrrp_VirtualRouterId_Union) error {
	if _, ok := t.Vrrp[newK]; ok {
		return fmt.Errorf("key %v already exists in Vrrp", newK)
	}

	e, ok := t.Vrrp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Vrrp", oldK)
	}
	e.VirtualRouterId = newK

	t.Vrrp[newK] = e
	delete(t.Vrrp, oldK)
	return nil
}

// GetOrCreateVrrp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4) GetOrCreateVrrp(VirtualRouterId NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Vrrp_VirtualRouterId_Union) *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Vrrp {

	key := VirtualRouterId

	if v, ok := t.Vrrp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVrrp(VirtualRouterId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVrrp got unexpected error: %v", err))
	}
	return v
}

// GetVrrp retrieves the value with the specified key from
// the Vrrp map field of NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4) GetVrrp(VirtualRouterId NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Vrrp_VirtualRouterId_Union) *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Vrrp {

	if t == nil {
		return nil
	}

	key := VirtualRouterId

	if lm, ok := t.Vrrp[key]; ok {
		return lm
	}
	return nil
}

// DeleteVrrp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4) DeleteVrrp(VirtualRouterId NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Vrrp_VirtualRouterId_Union) {
	key := VirtualRouterId

	delete(t.Vrrp, key)
}

// AppendVrrp appends the supplied NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Vrrp struct to the
// list Vrrp of NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Vrrp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4) AppendVrrp(v *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Vrrp) error {
	key := v.VirtualRouterId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vrrp == nil {
		t.Vrrp = make(map[NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Vrrp_VirtualRouterId_Union]*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Vrrp)
	}

	if _, ok := t.Vrrp[key]; ok {
		return fmt.Errorf("duplicate key for list Vrrp %v", key)
	}

	t.Vrrp[key] = v
	return nil
}

// GetOrCreateAddresses retrieves the value of the Addresses field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4) GetOrCreateAddresses() *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Addresses {
	if t.Addresses != nil {
		return t.Addresses
	}
	t.Addresses = &NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Addresses{}
	return t.Addresses
}

// GetOrCreateBfd retrieves the value of the Bfd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4) GetOrCreateBfd() *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Bfd {
	if t.Bfd != nil {
		return t.Bfd
	}
	t.Bfd = &NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Bfd{}
	return t.Bfd
}

// GetOrCreateDhcp retrieves the value of the Dhcp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4) GetOrCreateDhcp() *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp {
	if t.Dhcp != nil {
		return t.Dhcp
	}
	t.Dhcp = &NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp{}
	return t.Dhcp
}

// GetOrCreateIcmp retrieves the value of the Icmp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4) GetOrCreateIcmp() *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Icmp {
	if t.Icmp != nil {
		return t.Icmp
	}
	t.Icmp = &NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Icmp{}
	return t.Icmp
}

// GetOrCreateNeighborDiscovery retrieves the value of the NeighborDiscovery field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4) GetOrCreateNeighborDiscovery() *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_NeighborDiscovery {
	if t.NeighborDiscovery != nil {
		return t.NeighborDiscovery
	}
	t.NeighborDiscovery = &NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_NeighborDiscovery{}
	return t.NeighborDiscovery
}

// GetOrCreatePrimary retrieves the value of the Primary field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4) GetOrCreatePrimary() *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Primary {
	if t.Primary != nil {
		return t.Primary
	}
	t.Primary = &NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Primary{}
	return t.Primary
}

// GetOrCreateUnnumbered retrieves the value of the Unnumbered field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4) GetOrCreateUnnumbered() *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Unnumbered {
	if t.Unnumbered != nil {
		return t.Unnumbered
	}
	t.Unnumbered = &NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Unnumbered{}
	return t.Unnumbered
}

// GetOrCreateUrpfCheck retrieves the value of the UrpfCheck field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4) GetOrCreateUrpfCheck() *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_UrpfCheck {
	if t.UrpfCheck != nil {
		return t.UrpfCheck
	}
	t.UrpfCheck = &NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_UrpfCheck{}
	return t.UrpfCheck
}

// GetAddresses returns the value of the Addresses struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4. If the receiver or the field Addresses is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4) GetAddresses() *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Addresses {
	if t != nil && t.Addresses != nil {
		return t.Addresses
	}
	return nil
}

// GetBfd returns the value of the Bfd struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4. If the receiver or the field Bfd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4) GetBfd() *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Bfd {
	if t != nil && t.Bfd != nil {
		return t.Bfd
	}
	return nil
}

// GetDhcp returns the value of the Dhcp struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4. If the receiver or the field Dhcp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4) GetDhcp() *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp {
	if t != nil && t.Dhcp != nil {
		return t.Dhcp
	}
	return nil
}

// GetIcmp returns the value of the Icmp struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4. If the receiver or the field Icmp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4) GetIcmp() *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Icmp {
	if t != nil && t.Icmp != nil {
		return t.Icmp
	}
	return nil
}

// GetNeighborDiscovery returns the value of the NeighborDiscovery struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4. If the receiver or the field NeighborDiscovery is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4) GetNeighborDiscovery() *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_NeighborDiscovery {
	if t != nil && t.NeighborDiscovery != nil {
		return t.NeighborDiscovery
	}
	return nil
}

// GetPrimary returns the value of the Primary struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4. If the receiver or the field Primary is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4) GetPrimary() *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Primary {
	if t != nil && t.Primary != nil {
		return t.Primary
	}
	return nil
}

// GetUnnumbered returns the value of the Unnumbered struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4. If the receiver or the field Unnumbered is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4) GetUnnumbered() *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Unnumbered {
	if t != nil && t.Unnumbered != nil {
		return t.Unnumbered
	}
	return nil
}

// GetUrpfCheck returns the value of the UrpfCheck struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4. If the receiver or the field UrpfCheck is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4) GetUrpfCheck() *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_UrpfCheck {
	if t != nil && t.UrpfCheck != nil {
		return t.UrpfCheck
	}
	return nil
}

// GetAllowDirectedBroadcasts retrieves the value of the leaf AllowDirectedBroadcasts from the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowDirectedBroadcasts is set, it can
// safely use t.GetAllowDirectedBroadcasts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowDirectedBroadcasts == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4) GetAllowDirectedBroadcasts() bool {
	if t == nil || t.AllowDirectedBroadcasts == nil {
		return false
	}
	return *t.AllowDirectedBroadcasts
}

// GetIpHelperAddress retrieves the value of the leaf IpHelperAddress from the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpHelperAddress is set, it can
// safely use t.GetIpHelperAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpHelperAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4) GetIpHelperAddress() string {
	if t == nil || t.IpHelperAddress == nil {
		return ""
	}
	return *t.IpHelperAddress
}

// GetLocalDhcpServer retrieves the value of the leaf LocalDhcpServer from the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalDhcpServer is set, it can
// safely use t.GetLocalDhcpServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalDhcpServer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4) GetLocalDhcpServer() string {
	if t == nil || t.LocalDhcpServer == nil {
		return ""
	}
	return *t.LocalDhcpServer
}

// GetQosRouteLookup retrieves the value of the leaf QosRouteLookup from the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QosRouteLookup is set, it can
// safely use t.GetQosRouteLookup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QosRouteLookup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4) GetQosRouteLookup() E_NokiaTypesRouter_QosRouteLookup {
	if t == nil || t.QosRouteLookup == 0 {
		return 0
	}
	return t.QosRouteLookup
}

// GetTcpMss retrieves the value of the leaf TcpMss from the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TcpMss is set, it can
// safely use t.GetTcpMss() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TcpMss == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4) GetTcpMss() uint32 {
	if t == nil || t.TcpMss == nil {
		return 0
	}
	return *t.TcpMss
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowDirectedBroadcasts == nil {
		var v bool = false
		t.AllowDirectedBroadcasts = &v
	}
	t.Addresses.PopulateDefaults()
	t.Bfd.PopulateDefaults()
	t.Dhcp.PopulateDefaults()
	t.Icmp.PopulateDefaults()
	t.NeighborDiscovery.PopulateDefaults()
	t.Primary.PopulateDefaults()
	t.Unnumbered.PopulateDefaults()
	t.UrpfCheck.PopulateDefaults()
	for _, e := range t.Secondary {
		e.PopulateDefaults()
	}
	for _, e := range t.Vrrp {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Addresses represents the /nokia-conf/configure/groups/group/service/ies/interface/ipv4/addresses YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Addresses struct {
	Address map[string]*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Addresses_Address `path:"address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Addresses implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Addresses) IsYANGGoStruct() {}

// NewAddress creates a new entry in the Address list of the
// NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Addresses struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Addresses) NewAddress(Ipv4Address string) (*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Addresses_Address, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Addresses_Address)
	}

	key := Ipv4Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Address[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Address", key)
	}

	t.Address[key] = &NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Addresses_Address{
		Ipv4Address: &Ipv4Address,
	}

	return t.Address[key], nil
}

// RenameAddress renames an entry in the list Address within
// the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Addresses struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Addresses) RenameAddress(oldK, newK string) error {
	if _, ok := t.Address[newK]; ok {
		return fmt.Errorf("key %v already exists in Address", newK)
	}

	e, ok := t.Address[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Address", oldK)
	}
	e.Ipv4Address = &newK

	t.Address[newK] = e
	delete(t.Address, oldK)
	return nil
}

// GetOrCreateAddress retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Addresses. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Addresses) GetOrCreateAddress(Ipv4Address string) *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Addresses_Address {

	key := Ipv4Address

	if v, ok := t.Address[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAddress(Ipv4Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAddress got unexpected error: %v", err))
	}
	return v
}

// GetAddress retrieves the value with the specified key from
// the Address map field of NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Addresses. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Addresses) GetAddress(Ipv4Address string) *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Addresses_Address {

	if t == nil {
		return nil
	}

	key := Ipv4Address

	if lm, ok := t.Address[key]; ok {
		return lm
	}
	return nil
}

// DeleteAddress deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Addresses. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Addresses) DeleteAddress(Ipv4Address string) {
	key := Ipv4Address

	delete(t.Address, key)
}

// AppendAddress appends the supplied NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Addresses_Address struct to the
// list Address of NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Addresses. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Addresses_Address already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Addresses) AppendAddress(v *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Addresses_Address) error {
	if v.Ipv4Address == nil {
		return fmt.Errorf("invalid nil key received for Ipv4Address")
	}

	key := *v.Ipv4Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Addresses_Address)
	}

	if _, ok := t.Address[key]; ok {
		return fmt.Errorf("duplicate key for list Address %v", key)
	}

	t.Address[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Addresses
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Addresses) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Address {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Addresses) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Addresses"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Addresses) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Addresses) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Addresses.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Addresses) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Addresses_Address represents the /nokia-conf/configure/groups/group/service/ies/interface/ipv4/addresses/address YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Addresses_Address struct {
	Ipv4Address  *string `path:"ipv4-address" module:"nokia-conf"`
	PrefixLength *uint32 `path:"prefix-length" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Addresses_Address implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Addresses_Address) IsYANGGoStruct() {
}

// GetIpv4Address retrieves the value of the leaf Ipv4Address from the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Addresses_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Address is set, it can
// safely use t.GetIpv4Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Addresses_Address) GetIpv4Address() string {
	if t == nil || t.Ipv4Address == nil {
		return ""
	}
	return *t.Ipv4Address
}

// GetPrefixLength retrieves the value of the leaf PrefixLength from the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Addresses_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixLength is set, it can
// safely use t.GetPrefixLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Addresses_Address) GetPrefixLength() uint32 {
	if t == nil || t.PrefixLength == nil {
		return 0
	}
	return *t.PrefixLength
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Addresses_Address
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Addresses_Address) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Addresses_Address struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Addresses_Address) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Ipv4Address == nil {
		return nil, fmt.Errorf("nil value for key Ipv4Address")
	}

	return map[string]interface{}{
		"ipv4-address": *t.Ipv4Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Addresses_Address) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Addresses_Address"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Addresses_Address) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Addresses_Address) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Addresses_Address.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Addresses_Address) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Bfd represents the /nokia-conf/configure/groups/group/service/ies/interface/ipv4/bfd YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Bfd struct {
	AdminState       E_NokiaTypesSros_AdminState                                            `path:"admin-state" module:"nokia-conf"`
	EchoReceive      *uint32                                                                `path:"echo-receive" module:"nokia-conf"`
	Multiplier       *uint32                                                                `path:"multiplier" module:"nokia-conf"`
	Receive          *uint32                                                                `path:"receive" module:"nokia-conf"`
	TransmitInterval *uint32                                                                `path:"transmit-interval" module:"nokia-conf"`
	Type             E_NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Bfd_Type `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Bfd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Bfd) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Bfd) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetEchoReceive retrieves the value of the leaf EchoReceive from the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EchoReceive is set, it can
// safely use t.GetEchoReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EchoReceive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Bfd) GetEchoReceive() uint32 {
	if t == nil || t.EchoReceive == nil {
		return 0
	}
	return *t.EchoReceive
}

// GetMultiplier retrieves the value of the leaf Multiplier from the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multiplier is set, it can
// safely use t.GetMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Bfd) GetMultiplier() uint32 {
	if t == nil || t.Multiplier == nil {
		return 3
	}
	return *t.Multiplier
}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Bfd) GetReceive() uint32 {
	if t == nil || t.Receive == nil {
		return 100
	}
	return *t.Receive
}

// GetTransmitInterval retrieves the value of the leaf TransmitInterval from the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransmitInterval is set, it can
// safely use t.GetTransmitInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransmitInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Bfd) GetTransmitInterval() uint32 {
	if t == nil || t.TransmitInterval == nil {
		return 100
	}
	return *t.TransmitInterval
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Bfd) GetType() E_NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Bfd_Type {
	if t == nil || t.Type == 0 {
		return NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Bfd_Type_auto
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Bfd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Bfd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Multiplier == nil {
		var v uint32 = 3
		t.Multiplier = &v
	}
	if t.Receive == nil {
		var v uint32 = 100
		t.Receive = &v
	}
	if t.TransmitInterval == nil {
		var v uint32 = 100
		t.TransmitInterval = &v
	}
	if t.Type == 0 {
		t.Type = NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Bfd_Type_auto
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Bfd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Bfd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Bfd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Bfd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Bfd.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Bfd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp represents the /nokia-conf/configure/groups/group/service/ies/interface/ipv4/dhcp YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp struct {
	AdminState              E_NokiaTypesSros_AdminState                                                     `path:"admin-state" module:"nokia-conf"`
	Description             *string                                                                         `path:"description" module:"nokia-conf"`
	GiAddress               *string                                                                         `path:"gi-address" module:"nokia-conf"`
	LeasePopulate           *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_LeasePopulate `path:"lease-populate" module:"nokia-conf"`
	Option_82               *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82     `path:"option-82" module:"nokia-conf"`
	ProxyServer             *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_ProxyServer   `path:"proxy-server" module:"nokia-conf"`
	PythonPolicy            *string                                                                         `path:"python-policy" module:"nokia-conf"`
	RelayPlainBootp         *bool                                                                           `path:"relay-plain-bootp" module:"nokia-conf"`
	RelayProxy              *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_RelayProxy    `path:"relay-proxy" module:"nokia-conf" yangPresence:"true"`
	ReleaseIncludeGiAddress *bool                                                                           `path:"release-include-gi-address" module:"nokia-conf"`
	Server                  []string                                                                        `path:"server" module:"nokia-conf"`
	SrcIpAddr               E_NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_SrcIpAddr    `path:"src-ip-addr" module:"nokia-conf"`
	Trusted                 *bool                                                                           `path:"trusted" module:"nokia-conf"`
	UseArp                  *bool                                                                           `path:"use-arp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp) IsYANGGoStruct() {}

// GetOrCreateLeasePopulate retrieves the value of the LeasePopulate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp) GetOrCreateLeasePopulate() *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_LeasePopulate {
	if t.LeasePopulate != nil {
		return t.LeasePopulate
	}
	t.LeasePopulate = &NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_LeasePopulate{}
	return t.LeasePopulate
}

// GetOrCreateOption_82 retrieves the value of the Option_82 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp) GetOrCreateOption_82() *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82 {
	if t.Option_82 != nil {
		return t.Option_82
	}
	t.Option_82 = &NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82{}
	return t.Option_82
}

// GetOrCreateProxyServer retrieves the value of the ProxyServer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp) GetOrCreateProxyServer() *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_ProxyServer {
	if t.ProxyServer != nil {
		return t.ProxyServer
	}
	t.ProxyServer = &NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_ProxyServer{}
	return t.ProxyServer
}

// GetOrCreateRelayProxy retrieves the value of the RelayProxy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp) GetOrCreateRelayProxy() *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_RelayProxy {
	if t.RelayProxy != nil {
		return t.RelayProxy
	}
	t.RelayProxy = &NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_RelayProxy{}
	return t.RelayProxy
}

// GetLeasePopulate returns the value of the LeasePopulate struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp. If the receiver or the field LeasePopulate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp) GetLeasePopulate() *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_LeasePopulate {
	if t != nil && t.LeasePopulate != nil {
		return t.LeasePopulate
	}
	return nil
}

// GetOption_82 returns the value of the Option_82 struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp. If the receiver or the field Option_82 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp) GetOption_82() *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82 {
	if t != nil && t.Option_82 != nil {
		return t.Option_82
	}
	return nil
}

// GetProxyServer returns the value of the ProxyServer struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp. If the receiver or the field ProxyServer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp) GetProxyServer() *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_ProxyServer {
	if t != nil && t.ProxyServer != nil {
		return t.ProxyServer
	}
	return nil
}

// GetRelayProxy returns the value of the RelayProxy struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp. If the receiver or the field RelayProxy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp) GetRelayProxy() *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_RelayProxy {
	if t != nil && t.RelayProxy != nil {
		return t.RelayProxy
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetGiAddress retrieves the value of the leaf GiAddress from the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GiAddress is set, it can
// safely use t.GetGiAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GiAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp) GetGiAddress() string {
	if t == nil || t.GiAddress == nil {
		return ""
	}
	return *t.GiAddress
}

// GetPythonPolicy retrieves the value of the leaf PythonPolicy from the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PythonPolicy is set, it can
// safely use t.GetPythonPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PythonPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp) GetPythonPolicy() string {
	if t == nil || t.PythonPolicy == nil {
		return ""
	}
	return *t.PythonPolicy
}

// GetRelayPlainBootp retrieves the value of the leaf RelayPlainBootp from the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RelayPlainBootp is set, it can
// safely use t.GetRelayPlainBootp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RelayPlainBootp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp) GetRelayPlainBootp() bool {
	if t == nil || t.RelayPlainBootp == nil {
		return false
	}
	return *t.RelayPlainBootp
}

// GetReleaseIncludeGiAddress retrieves the value of the leaf ReleaseIncludeGiAddress from the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReleaseIncludeGiAddress is set, it can
// safely use t.GetReleaseIncludeGiAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReleaseIncludeGiAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp) GetReleaseIncludeGiAddress() bool {
	if t == nil || t.ReleaseIncludeGiAddress == nil {
		return false
	}
	return *t.ReleaseIncludeGiAddress
}

// GetServer retrieves the value of the leaf Server from the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Server is set, it can
// safely use t.GetServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Server == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp) GetServer() []string {
	if t == nil || t.Server == nil {
		return nil
	}
	return t.Server
}

// GetSrcIpAddr retrieves the value of the leaf SrcIpAddr from the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrcIpAddr is set, it can
// safely use t.GetSrcIpAddr() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrcIpAddr == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp) GetSrcIpAddr() E_NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_SrcIpAddr {
	if t == nil || t.SrcIpAddr == 0 {
		return NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_SrcIpAddr_auto
	}
	return t.SrcIpAddr
}

// GetTrusted retrieves the value of the leaf Trusted from the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Trusted is set, it can
// safely use t.GetTrusted() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Trusted == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp) GetTrusted() bool {
	if t == nil || t.Trusted == nil {
		return false
	}
	return *t.Trusted
}

// GetUseArp retrieves the value of the leaf UseArp from the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseArp is set, it can
// safely use t.GetUseArp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseArp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp) GetUseArp() bool {
	if t == nil || t.UseArp == nil {
		return false
	}
	return *t.UseArp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RelayPlainBootp == nil {
		var v bool = false
		t.RelayPlainBootp = &v
	}
	if t.ReleaseIncludeGiAddress == nil {
		var v bool = false
		t.ReleaseIncludeGiAddress = &v
	}
	if t.SrcIpAddr == 0 {
		t.SrcIpAddr = NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_SrcIpAddr_auto
	}
	if t.Trusted == nil {
		var v bool = false
		t.Trusted = &v
	}
	if t.UseArp == nil {
		var v bool = false
		t.UseArp = &v
	}
	t.LeasePopulate.PopulateDefaults()
	t.Option_82.PopulateDefaults()
	t.ProxyServer.PopulateDefaults()
	t.RelayProxy.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_LeasePopulate represents the /nokia-conf/configure/groups/group/service/ies/interface/ipv4/dhcp/lease-populate YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_LeasePopulate struct {
	MaxLeases *uint32 `path:"max-leases" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_LeasePopulate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_LeasePopulate) IsYANGGoStruct() {
}

// GetMaxLeases retrieves the value of the leaf MaxLeases from the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_LeasePopulate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxLeases is set, it can
// safely use t.GetMaxLeases() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxLeases == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_LeasePopulate) GetMaxLeases() uint32 {
	if t == nil || t.MaxLeases == nil {
		return 0
	}
	return *t.MaxLeases
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_LeasePopulate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_LeasePopulate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_LeasePopulate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_LeasePopulate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_LeasePopulate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_LeasePopulate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_LeasePopulate.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_LeasePopulate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82 represents the /nokia-conf/configure/groups/group/service/ies/interface/ipv4/dhcp/option-82 YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82 struct {
	Action               E_NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82_Action              `path:"action" module:"nokia-conf"`
	CircuitId            *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82_CircuitId            `path:"circuit-id" module:"nokia-conf"`
	RemoteId             *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82_RemoteId             `path:"remote-id" module:"nokia-conf"`
	VendorSpecificOption *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption `path:"vendor-specific-option" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82) IsYANGGoStruct() {}

// GetOrCreateCircuitId retrieves the value of the CircuitId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82) GetOrCreateCircuitId() *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82_CircuitId {
	if t.CircuitId != nil {
		return t.CircuitId
	}
	t.CircuitId = &NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82_CircuitId{}
	return t.CircuitId
}

// GetOrCreateRemoteId retrieves the value of the RemoteId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82) GetOrCreateRemoteId() *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82_RemoteId {
	if t.RemoteId != nil {
		return t.RemoteId
	}
	t.RemoteId = &NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82_RemoteId{}
	return t.RemoteId
}

// GetOrCreateVendorSpecificOption retrieves the value of the VendorSpecificOption field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82) GetOrCreateVendorSpecificOption() *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption {
	if t.VendorSpecificOption != nil {
		return t.VendorSpecificOption
	}
	t.VendorSpecificOption = &NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption{}
	return t.VendorSpecificOption
}

// GetCircuitId returns the value of the CircuitId struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82. If the receiver or the field CircuitId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82) GetCircuitId() *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82_CircuitId {
	if t != nil && t.CircuitId != nil {
		return t.CircuitId
	}
	return nil
}

// GetRemoteId returns the value of the RemoteId struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82. If the receiver or the field RemoteId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82) GetRemoteId() *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82_RemoteId {
	if t != nil && t.RemoteId != nil {
		return t.RemoteId
	}
	return nil
}

// GetVendorSpecificOption returns the value of the VendorSpecificOption struct pointer
// from NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82. If the receiver or the field VendorSpecificOption is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82) GetVendorSpecificOption() *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82_VendorSpecificOption {
	if t != nil && t.VendorSpecificOption != nil {
		return t.VendorSpecificOption
	}
	return nil
}

// GetAction retrieves the value of the leaf Action from the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Action is set, it can
// safely use t.GetAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Action == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82) GetAction() E_NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82_Action {
	if t == nil || t.Action == 0 {
		return NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82_Action_keep
	}
	return t.Action
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Action == 0 {
		t.Action = NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82_Action_keep
	}
	t.CircuitId.PopulateDefaults()
	t.RemoteId.PopulateDefaults()
	t.VendorSpecificOption.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82_CircuitId represents the /nokia-conf/configure/groups/group/service/ies/interface/ipv4/dhcp/option-82/circuit-id YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82_CircuitId struct {
	AsciiTuple     YANGEmpty `path:"ascii-tuple" module:"nokia-conf"`
	Ifindex        YANGEmpty `path:"ifindex" module:"nokia-conf"`
	None           YANGEmpty `path:"none" module:"nokia-conf"`
	SapId          YANGEmpty `path:"sap-id" module:"nokia-conf"`
	VlanAsciiTuple YANGEmpty `path:"vlan-ascii-tuple" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82_CircuitId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82_CircuitId) IsYANGGoStruct() {
}

// GetAsciiTuple retrieves the value of the leaf AsciiTuple from the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82_CircuitId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsciiTuple is set, it can
// safely use t.GetAsciiTuple() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsciiTuple == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82_CircuitId) GetAsciiTuple() YANGEmpty {
	if t == nil || t.AsciiTuple == false {
		return false
	}
	return t.AsciiTuple
}

// GetIfindex retrieves the value of the leaf Ifindex from the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82_CircuitId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ifindex is set, it can
// safely use t.GetIfindex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ifindex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82_CircuitId) GetIfindex() YANGEmpty {
	if t == nil || t.Ifindex == false {
		return false
	}
	return t.Ifindex
}

// GetNone retrieves the value of the leaf None from the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82_CircuitId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if None is set, it can
// safely use t.GetNone() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.None == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82_CircuitId) GetNone() YANGEmpty {
	if t == nil || t.None == false {
		return false
	}
	return t.None
}

// GetSapId retrieves the value of the leaf SapId from the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82_CircuitId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SapId is set, it can
// safely use t.GetSapId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SapId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82_CircuitId) GetSapId() YANGEmpty {
	if t == nil || t.SapId == false {
		return false
	}
	return t.SapId
}

// GetVlanAsciiTuple retrieves the value of the leaf VlanAsciiTuple from the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82_CircuitId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VlanAsciiTuple is set, it can
// safely use t.GetVlanAsciiTuple() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VlanAsciiTuple == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82_CircuitId) GetVlanAsciiTuple() YANGEmpty {
	if t == nil || t.VlanAsciiTuple == false {
		return false
	}
	return t.VlanAsciiTuple
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82_CircuitId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82_CircuitId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82_CircuitId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82_CircuitId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82_CircuitId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82_CircuitId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82_CircuitId.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82_CircuitId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82_RemoteId represents the /nokia-conf/configure/groups/group/service/ies/interface/ipv4/dhcp/option-82/remote-id YANG schema element.
type NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82_RemoteId struct {
	AsciiString *string   `path:"ascii-string" module:"nokia-conf"`
	Mac         YANGEmpty `path:"mac" module:"nokia-conf"`
	None        YANGEmpty `path:"none" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82_RemoteId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82_RemoteId) IsYANGGoStruct() {
}

// GetAsciiString retrieves the value of the leaf AsciiString from the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82_RemoteId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsciiString is set, it can
// safely use t.GetAsciiString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsciiString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82_RemoteId) GetAsciiString() string {
	if t == nil || t.AsciiString == nil {
		return ""
	}
	return *t.AsciiString
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82_RemoteId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82_RemoteId) GetMac() YANGEmpty {
	if t == nil || t.Mac == false {
		return false
	}
	return t.Mac
}

// GetNone retrieves the value of the leaf None from the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82_RemoteId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if None is set, it can
// safely use t.GetNone() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.None == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82_RemoteId) GetNone() YANGEmpty {
	if t == nil || t.None == false {
		return false
	}
	return t.None
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82_RemoteId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82_RemoteId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82_RemoteId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82_RemoteId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82_RemoteId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82_RemoteId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82_RemoteId.
func (*NokiaConf_Configure_Groups_Group_Service_Ies_Interface_Ipv4_Dhcp_Option_82_RemoteId) ΛBelongingModule() string {
	return "nokia-conf"
}
