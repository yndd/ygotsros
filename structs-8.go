/*
Package ygotsros is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /home/hans/go/pkg/mod/github.com/openconfig/ygot@v0.20.0/genutil/names.go
using the following YANG input files:
	- nokia/YANG/nokia-combined/nokia-conf.yang
Imported modules were sourced from:
	- nokia/YANG/...
*/
package ygotsros

import (
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Mlppp represents the /nokia-conf/configure/groups/group/router/l2tp/group/lns/mlppp YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Mlppp struct {
	AdminState           E_NokiaTypesSros_AdminState                                                         `path:"admin-state" module:"nokia-conf"`
	Endpoint             *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Mlppp_Endpoint              `path:"endpoint" module:"nokia-conf"`
	Interleave           *bool                                                                               `path:"interleave" module:"nokia-conf"`
	MaxFragmentDelay     NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Mlppp_MaxFragmentDelay_Union `path:"max-fragment-delay" module:"nokia-conf"`
	MaxLinks             *uint32                                                                             `path:"max-links" module:"nokia-conf"`
	ReassemblyTimeout    *uint32                                                                             `path:"reassembly-timeout" module:"nokia-conf"`
	ShortSequenceNumbers *bool                                                                               `path:"short-sequence-numbers" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Mlppp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Mlppp) IsYANGGoStruct() {}

// GetOrCreateEndpoint retrieves the value of the Endpoint field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Mlppp) GetOrCreateEndpoint() *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Mlppp_Endpoint {
	if t.Endpoint != nil {
		return t.Endpoint
	}
	t.Endpoint = &NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Mlppp_Endpoint{}
	return t.Endpoint
}

// GetEndpoint returns the value of the Endpoint struct pointer
// from NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Mlppp. If the receiver or the field Endpoint is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Mlppp) GetEndpoint() *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Mlppp_Endpoint {
	if t != nil && t.Endpoint != nil {
		return t.Endpoint
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Mlppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Mlppp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetInterleave retrieves the value of the leaf Interleave from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Mlppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interleave is set, it can
// safely use t.GetInterleave() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interleave == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Mlppp) GetInterleave() bool {
	if t == nil || t.Interleave == nil {
		return false
	}
	return *t.Interleave
}

// GetMaxFragmentDelay retrieves the value of the leaf MaxFragmentDelay from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Mlppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxFragmentDelay is set, it can
// safely use t.GetMaxFragmentDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxFragmentDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Mlppp) GetMaxFragmentDelay() NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Mlppp_MaxFragmentDelay_Union {
	if t == nil || t.MaxFragmentDelay == nil {
		return NokiaTypesL2Tp_BaseMlpppMaxFragDelay_Enum_no_fragmentation
	}
	return t.MaxFragmentDelay
}

// GetMaxLinks retrieves the value of the leaf MaxLinks from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Mlppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxLinks is set, it can
// safely use t.GetMaxLinks() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxLinks == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Mlppp) GetMaxLinks() uint32 {
	if t == nil || t.MaxLinks == nil {
		return 1
	}
	return *t.MaxLinks
}

// GetReassemblyTimeout retrieves the value of the leaf ReassemblyTimeout from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Mlppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReassemblyTimeout is set, it can
// safely use t.GetReassemblyTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReassemblyTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Mlppp) GetReassemblyTimeout() uint32 {
	if t == nil || t.ReassemblyTimeout == nil {
		return 1000
	}
	return *t.ReassemblyTimeout
}

// GetShortSequenceNumbers retrieves the value of the leaf ShortSequenceNumbers from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Mlppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ShortSequenceNumbers is set, it can
// safely use t.GetShortSequenceNumbers() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ShortSequenceNumbers == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Mlppp) GetShortSequenceNumbers() bool {
	if t == nil || t.ShortSequenceNumbers == nil {
		return false
	}
	return *t.ShortSequenceNumbers
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Mlppp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Mlppp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Interleave == nil {
		var v bool = false
		t.Interleave = &v
	}
	if t.MaxFragmentDelay == nil {
		t.MaxFragmentDelay = NokiaTypesL2Tp_BaseMlpppMaxFragDelay_Enum_no_fragmentation
	}
	if t.MaxLinks == nil {
		var v uint32 = 1
		t.MaxLinks = &v
	}
	if t.ReassemblyTimeout == nil {
		var v uint32 = 1000
		t.ReassemblyTimeout = &v
	}
	if t.ShortSequenceNumbers == nil {
		var v bool = false
		t.ShortSequenceNumbers = &v
	}
	t.Endpoint.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Mlppp) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Mlppp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Mlppp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Mlppp) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Mlppp.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Mlppp) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Mlppp_Endpoint represents the /nokia-conf/configure/groups/group/router/l2tp/group/lns/mlppp/endpoint YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Mlppp_Endpoint struct {
	Ip  NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Mlppp_Endpoint_Ip_Union  `path:"ip" module:"nokia-conf"`
	Mac NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Mlppp_Endpoint_Mac_Union `path:"mac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Mlppp_Endpoint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Mlppp_Endpoint) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Mlppp_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Mlppp_Endpoint) GetIp() NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Mlppp_Endpoint_Ip_Union {
	if t == nil || t.Ip == nil {
		return nil
	}
	return t.Ip
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Mlppp_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Mlppp_Endpoint) GetMac() NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Mlppp_Endpoint_Mac_Union {
	if t == nil || t.Mac == nil {
		return nil
	}
	return t.Mac
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Mlppp_Endpoint
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Mlppp_Endpoint) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Mlppp_Endpoint) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Mlppp_Endpoint"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Mlppp_Endpoint) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Mlppp_Endpoint) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Mlppp_Endpoint.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Mlppp_Endpoint) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp represents the /nokia-conf/configure/groups/group/router/l2tp/group/lns/ppp YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp struct {
	Authentication        E_NokiaTypesL2Tp_BasePppAuthProtocol                                              `path:"authentication" module:"nokia-conf"`
	AuthenticationPolicy  *string                                                                           `path:"authentication-policy" module:"nokia-conf"`
	ChapChallengeLength   *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp_ChapChallengeLength   `path:"chap-challenge-length" module:"nokia-conf"`
	DefaultGroupInterface *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp_DefaultGroupInterface `path:"default-group-interface" module:"nokia-conf"`
	IpcpSubnetNegotiation *bool                                                                             `path:"ipcp-subnet-negotiation" module:"nokia-conf"`
	Keepalive             *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp_Keepalive             `path:"keepalive" module:"nokia-conf"`
	LcpForceAckAccm       *bool                                                                             `path:"lcp-force-ack-accm" module:"nokia-conf"`
	LcpIgnoreMagicNumbers *bool                                                                             `path:"lcp-ignore-magic-numbers" module:"nokia-conf"`
	Mtu                   *uint32                                                                           `path:"mtu" module:"nokia-conf"`
	ProxyAuthentication   *bool                                                                             `path:"proxy-authentication" module:"nokia-conf"`
	ProxyLcp              *bool                                                                             `path:"proxy-lcp" module:"nokia-conf"`
	RejectDisabledNcp     *bool                                                                             `path:"reject-disabled-ncp" module:"nokia-conf"`
	UserDb                *string                                                                           `path:"user-db" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp) IsYANGGoStruct() {}

// GetOrCreateChapChallengeLength retrieves the value of the ChapChallengeLength field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp) GetOrCreateChapChallengeLength() *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp_ChapChallengeLength {
	if t.ChapChallengeLength != nil {
		return t.ChapChallengeLength
	}
	t.ChapChallengeLength = &NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp_ChapChallengeLength{}
	return t.ChapChallengeLength
}

// GetOrCreateDefaultGroupInterface retrieves the value of the DefaultGroupInterface field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp) GetOrCreateDefaultGroupInterface() *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp_DefaultGroupInterface {
	if t.DefaultGroupInterface != nil {
		return t.DefaultGroupInterface
	}
	t.DefaultGroupInterface = &NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp_DefaultGroupInterface{}
	return t.DefaultGroupInterface
}

// GetOrCreateKeepalive retrieves the value of the Keepalive field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp) GetOrCreateKeepalive() *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp_Keepalive {
	if t.Keepalive != nil {
		return t.Keepalive
	}
	t.Keepalive = &NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp_Keepalive{}
	return t.Keepalive
}

// GetChapChallengeLength returns the value of the ChapChallengeLength struct pointer
// from NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp. If the receiver or the field ChapChallengeLength is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp) GetChapChallengeLength() *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp_ChapChallengeLength {
	if t != nil && t.ChapChallengeLength != nil {
		return t.ChapChallengeLength
	}
	return nil
}

// GetDefaultGroupInterface returns the value of the DefaultGroupInterface struct pointer
// from NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp. If the receiver or the field DefaultGroupInterface is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp) GetDefaultGroupInterface() *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp_DefaultGroupInterface {
	if t != nil && t.DefaultGroupInterface != nil {
		return t.DefaultGroupInterface
	}
	return nil
}

// GetKeepalive returns the value of the Keepalive struct pointer
// from NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp. If the receiver or the field Keepalive is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp) GetKeepalive() *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp_Keepalive {
	if t != nil && t.Keepalive != nil {
		return t.Keepalive
	}
	return nil
}

// GetAuthentication retrieves the value of the leaf Authentication from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Authentication is set, it can
// safely use t.GetAuthentication() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Authentication == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp) GetAuthentication() E_NokiaTypesL2Tp_BasePppAuthProtocol {
	if t == nil || t.Authentication == 0 {
		return NokiaTypesL2Tp_BasePppAuthProtocol_pref_chap
	}
	return t.Authentication
}

// GetAuthenticationPolicy retrieves the value of the leaf AuthenticationPolicy from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationPolicy is set, it can
// safely use t.GetAuthenticationPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp) GetAuthenticationPolicy() string {
	if t == nil || t.AuthenticationPolicy == nil {
		return ""
	}
	return *t.AuthenticationPolicy
}

// GetIpcpSubnetNegotiation retrieves the value of the leaf IpcpSubnetNegotiation from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpcpSubnetNegotiation is set, it can
// safely use t.GetIpcpSubnetNegotiation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpcpSubnetNegotiation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp) GetIpcpSubnetNegotiation() bool {
	if t == nil || t.IpcpSubnetNegotiation == nil {
		return false
	}
	return *t.IpcpSubnetNegotiation
}

// GetLcpForceAckAccm retrieves the value of the leaf LcpForceAckAccm from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LcpForceAckAccm is set, it can
// safely use t.GetLcpForceAckAccm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LcpForceAckAccm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp) GetLcpForceAckAccm() bool {
	if t == nil || t.LcpForceAckAccm == nil {
		return false
	}
	return *t.LcpForceAckAccm
}

// GetLcpIgnoreMagicNumbers retrieves the value of the leaf LcpIgnoreMagicNumbers from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LcpIgnoreMagicNumbers is set, it can
// safely use t.GetLcpIgnoreMagicNumbers() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LcpIgnoreMagicNumbers == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp) GetLcpIgnoreMagicNumbers() bool {
	if t == nil || t.LcpIgnoreMagicNumbers == nil {
		return false
	}
	return *t.LcpIgnoreMagicNumbers
}

// GetMtu retrieves the value of the leaf Mtu from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mtu is set, it can
// safely use t.GetMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp) GetMtu() uint32 {
	if t == nil || t.Mtu == nil {
		return 1500
	}
	return *t.Mtu
}

// GetProxyAuthentication retrieves the value of the leaf ProxyAuthentication from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProxyAuthentication is set, it can
// safely use t.GetProxyAuthentication() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProxyAuthentication == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp) GetProxyAuthentication() bool {
	if t == nil || t.ProxyAuthentication == nil {
		return false
	}
	return *t.ProxyAuthentication
}

// GetProxyLcp retrieves the value of the leaf ProxyLcp from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProxyLcp is set, it can
// safely use t.GetProxyLcp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProxyLcp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp) GetProxyLcp() bool {
	if t == nil || t.ProxyLcp == nil {
		return false
	}
	return *t.ProxyLcp
}

// GetRejectDisabledNcp retrieves the value of the leaf RejectDisabledNcp from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RejectDisabledNcp is set, it can
// safely use t.GetRejectDisabledNcp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RejectDisabledNcp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp) GetRejectDisabledNcp() bool {
	if t == nil || t.RejectDisabledNcp == nil {
		return false
	}
	return *t.RejectDisabledNcp
}

// GetUserDb retrieves the value of the leaf UserDb from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UserDb is set, it can
// safely use t.GetUserDb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UserDb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp) GetUserDb() string {
	if t == nil || t.UserDb == nil {
		return ""
	}
	return *t.UserDb
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Authentication == 0 {
		t.Authentication = NokiaTypesL2Tp_BasePppAuthProtocol_pref_chap
	}
	if t.IpcpSubnetNegotiation == nil {
		var v bool = false
		t.IpcpSubnetNegotiation = &v
	}
	if t.LcpForceAckAccm == nil {
		var v bool = false
		t.LcpForceAckAccm = &v
	}
	if t.LcpIgnoreMagicNumbers == nil {
		var v bool = false
		t.LcpIgnoreMagicNumbers = &v
	}
	if t.Mtu == nil {
		var v uint32 = 1500
		t.Mtu = &v
	}
	if t.ProxyAuthentication == nil {
		var v bool = false
		t.ProxyAuthentication = &v
	}
	if t.ProxyLcp == nil {
		var v bool = false
		t.ProxyLcp = &v
	}
	if t.RejectDisabledNcp == nil {
		var v bool = false
		t.RejectDisabledNcp = &v
	}
	t.ChapChallengeLength.PopulateDefaults()
	t.DefaultGroupInterface.PopulateDefaults()
	t.Keepalive.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp_ChapChallengeLength represents the /nokia-conf/configure/groups/group/router/l2tp/group/lns/ppp/chap-challenge-length YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp_ChapChallengeLength struct {
	End   *uint32 `path:"end" module:"nokia-conf"`
	Start *uint32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp_ChapChallengeLength implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp_ChapChallengeLength) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp_ChapChallengeLength
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp_ChapChallengeLength) GetEnd() uint32 {
	if t == nil || t.End == nil {
		return 64
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp_ChapChallengeLength
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp_ChapChallengeLength) GetStart() uint32 {
	if t == nil || t.Start == nil {
		return 32
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp_ChapChallengeLength
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp_ChapChallengeLength) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.End == nil {
		var v uint32 = 64
		t.End = &v
	}
	if t.Start == nil {
		var v uint32 = 32
		t.Start = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp_ChapChallengeLength) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp_ChapChallengeLength"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp_ChapChallengeLength) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp_ChapChallengeLength) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp_ChapChallengeLength.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp_ChapChallengeLength) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp_DefaultGroupInterface represents the /nokia-conf/configure/groups/group/router/l2tp/group/lns/ppp/default-group-interface YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp_DefaultGroupInterface struct {
	Interface   *string `path:"interface" module:"nokia-conf"`
	ServiceName *string `path:"service-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp_DefaultGroupInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp_DefaultGroupInterface) IsYANGGoStruct() {
}

// GetInterface retrieves the value of the leaf Interface from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp_DefaultGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp_DefaultGroupInterface) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetServiceName retrieves the value of the leaf ServiceName from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp_DefaultGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceName is set, it can
// safely use t.GetServiceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp_DefaultGroupInterface) GetServiceName() string {
	if t == nil || t.ServiceName == nil {
		return ""
	}
	return *t.ServiceName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp_DefaultGroupInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp_DefaultGroupInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp_DefaultGroupInterface) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp_DefaultGroupInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp_DefaultGroupInterface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp_DefaultGroupInterface) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp_DefaultGroupInterface.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp_DefaultGroupInterface) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp_Keepalive represents the /nokia-conf/configure/groups/group/router/l2tp/group/lns/ppp/keepalive YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp_Keepalive struct {
	Interval   *uint32 `path:"interval" module:"nokia-conf"`
	Multiplier *uint32 `path:"multiplier" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp_Keepalive implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp_Keepalive) IsYANGGoStruct() {}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp_Keepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp_Keepalive) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 30
	}
	return *t.Interval
}

// GetMultiplier retrieves the value of the leaf Multiplier from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp_Keepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multiplier is set, it can
// safely use t.GetMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp_Keepalive) GetMultiplier() uint32 {
	if t == nil || t.Multiplier == nil {
		return 3
	}
	return *t.Multiplier
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp_Keepalive
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp_Keepalive) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Interval == nil {
		var v uint32 = 30
		t.Interval = &v
	}
	if t.Multiplier == nil {
		var v uint32 = 3
		t.Multiplier = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp_Keepalive) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp_Keepalive"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp_Keepalive) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp_Keepalive) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp_Keepalive.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Lns_Ppp_Keepalive) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel represents the /nokia-conf/configure/groups/group/router/l2tp/group/tunnel YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel struct {
	AdminState             E_NokiaTypesSros_AdminState                                                   `path:"admin-state" module:"nokia-conf"`
	AutoEstablish          *bool                                                                         `path:"auto-establish" module:"nokia-conf"`
	AvpHiding              E_NokiaTypesL2Tp_ChildAvpHiding                                               `path:"avp-hiding" module:"nokia-conf"`
	Challenge              E_NokiaTypesSros_BoolWithInherit                                              `path:"challenge" module:"nokia-conf"`
	Description            *string                                                                       `path:"description" module:"nokia-conf"`
	DestructTimeout        *uint32                                                                       `path:"destruct-timeout" module:"nokia-conf"`
	Failover               *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Failover           `path:"failover" module:"nokia-conf"`
	HelloInterval          NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_HelloInterval_Union `path:"hello-interval" module:"nokia-conf"`
	IdleTimeout            NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_IdleTimeout_Union   `path:"idle-timeout" module:"nokia-conf"`
	L2Tpv3                 *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_L2Tpv3             `path:"l2tpv3" module:"nokia-conf"`
	Lac                    *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lac                `path:"lac" module:"nokia-conf"`
	Lns                    *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns                `path:"lns" module:"nokia-conf"`
	LocalAddress           *string                                                                       `path:"local-address" module:"nokia-conf"`
	LocalName              *string                                                                       `path:"local-name" module:"nokia-conf"`
	MaxRetriesEstab        *int32                                                                        `path:"max-retries-estab" module:"nokia-conf"`
	MaxRetriesNotEstab     *int32                                                                        `path:"max-retries-not-estab" module:"nokia-conf"`
	Password               *string                                                                       `path:"password" module:"nokia-conf"`
	Peer                   *string                                                                       `path:"peer" module:"nokia-conf"`
	Preference             *uint32                                                                       `path:"preference" module:"nokia-conf"`
	RadiusAccountingPolicy *string                                                                       `path:"radius-accounting-policy" module:"nokia-conf"`
	ReceiveWindowSize      *uint32                                                                       `path:"receive-window-size" module:"nokia-conf"`
	RemoteName             *string                                                                       `path:"remote-name" module:"nokia-conf"`
	SessionLimit           NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_SessionLimit_Union  `path:"session-limit" module:"nokia-conf"`
	TunnelName             *string                                                                       `path:"tunnel-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel) IsYANGGoStruct() {}

// GetOrCreateFailover retrieves the value of the Failover field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel) GetOrCreateFailover() *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Failover {
	if t.Failover != nil {
		return t.Failover
	}
	t.Failover = &NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Failover{}
	return t.Failover
}

// GetOrCreateL2Tpv3 retrieves the value of the L2Tpv3 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel) GetOrCreateL2Tpv3() *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_L2Tpv3 {
	if t.L2Tpv3 != nil {
		return t.L2Tpv3
	}
	t.L2Tpv3 = &NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_L2Tpv3{}
	return t.L2Tpv3
}

// GetOrCreateLac retrieves the value of the Lac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel) GetOrCreateLac() *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lac {
	if t.Lac != nil {
		return t.Lac
	}
	t.Lac = &NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lac{}
	return t.Lac
}

// GetOrCreateLns retrieves the value of the Lns field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel) GetOrCreateLns() *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns {
	if t.Lns != nil {
		return t.Lns
	}
	t.Lns = &NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns{}
	return t.Lns
}

// GetFailover returns the value of the Failover struct pointer
// from NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel. If the receiver or the field Failover is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel) GetFailover() *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Failover {
	if t != nil && t.Failover != nil {
		return t.Failover
	}
	return nil
}

// GetL2Tpv3 returns the value of the L2Tpv3 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel. If the receiver or the field L2Tpv3 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel) GetL2Tpv3() *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_L2Tpv3 {
	if t != nil && t.L2Tpv3 != nil {
		return t.L2Tpv3
	}
	return nil
}

// GetLac returns the value of the Lac struct pointer
// from NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel. If the receiver or the field Lac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel) GetLac() *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lac {
	if t != nil && t.Lac != nil {
		return t.Lac
	}
	return nil
}

// GetLns returns the value of the Lns struct pointer
// from NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel. If the receiver or the field Lns is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel) GetLns() *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns {
	if t != nil && t.Lns != nil {
		return t.Lns
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAutoEstablish retrieves the value of the leaf AutoEstablish from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoEstablish is set, it can
// safely use t.GetAutoEstablish() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoEstablish == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel) GetAutoEstablish() bool {
	if t == nil || t.AutoEstablish == nil {
		return false
	}
	return *t.AutoEstablish
}

// GetAvpHiding retrieves the value of the leaf AvpHiding from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AvpHiding is set, it can
// safely use t.GetAvpHiding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AvpHiding == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel) GetAvpHiding() E_NokiaTypesL2Tp_ChildAvpHiding {
	if t == nil || t.AvpHiding == 0 {
		return 0
	}
	return t.AvpHiding
}

// GetChallenge retrieves the value of the leaf Challenge from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Challenge is set, it can
// safely use t.GetChallenge() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Challenge == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel) GetChallenge() E_NokiaTypesSros_BoolWithInherit {
	if t == nil || t.Challenge == 0 {
		return 0
	}
	return t.Challenge
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDestructTimeout retrieves the value of the leaf DestructTimeout from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestructTimeout is set, it can
// safely use t.GetDestructTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestructTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel) GetDestructTimeout() uint32 {
	if t == nil || t.DestructTimeout == nil {
		return 0
	}
	return *t.DestructTimeout
}

// GetHelloInterval retrieves the value of the leaf HelloInterval from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloInterval is set, it can
// safely use t.GetHelloInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel) GetHelloInterval() NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_HelloInterval_Union {
	if t == nil || t.HelloInterval == nil {
		return nil
	}
	return t.HelloInterval
}

// GetIdleTimeout retrieves the value of the leaf IdleTimeout from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IdleTimeout is set, it can
// safely use t.GetIdleTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IdleTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel) GetIdleTimeout() NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_IdleTimeout_Union {
	if t == nil || t.IdleTimeout == nil {
		return nil
	}
	return t.IdleTimeout
}

// GetLocalAddress retrieves the value of the leaf LocalAddress from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalAddress is set, it can
// safely use t.GetLocalAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel) GetLocalAddress() string {
	if t == nil || t.LocalAddress == nil {
		return ""
	}
	return *t.LocalAddress
}

// GetLocalName retrieves the value of the leaf LocalName from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalName is set, it can
// safely use t.GetLocalName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel) GetLocalName() string {
	if t == nil || t.LocalName == nil {
		return ""
	}
	return *t.LocalName
}

// GetMaxRetriesEstab retrieves the value of the leaf MaxRetriesEstab from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRetriesEstab is set, it can
// safely use t.GetMaxRetriesEstab() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRetriesEstab == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel) GetMaxRetriesEstab() int32 {
	if t == nil || t.MaxRetriesEstab == nil {
		return 0
	}
	return *t.MaxRetriesEstab
}

// GetMaxRetriesNotEstab retrieves the value of the leaf MaxRetriesNotEstab from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRetriesNotEstab is set, it can
// safely use t.GetMaxRetriesNotEstab() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRetriesNotEstab == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel) GetMaxRetriesNotEstab() int32 {
	if t == nil || t.MaxRetriesNotEstab == nil {
		return 0
	}
	return *t.MaxRetriesNotEstab
}

// GetPassword retrieves the value of the leaf Password from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Password is set, it can
// safely use t.GetPassword() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Password == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel) GetPassword() string {
	if t == nil || t.Password == nil {
		return ""
	}
	return *t.Password
}

// GetPeer retrieves the value of the leaf Peer from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Peer is set, it can
// safely use t.GetPeer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Peer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel) GetPeer() string {
	if t == nil || t.Peer == nil {
		return ""
	}
	return *t.Peer
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 50
	}
	return *t.Preference
}

// GetRadiusAccountingPolicy retrieves the value of the leaf RadiusAccountingPolicy from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RadiusAccountingPolicy is set, it can
// safely use t.GetRadiusAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RadiusAccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel) GetRadiusAccountingPolicy() string {
	if t == nil || t.RadiusAccountingPolicy == nil {
		return ""
	}
	return *t.RadiusAccountingPolicy
}

// GetReceiveWindowSize retrieves the value of the leaf ReceiveWindowSize from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReceiveWindowSize is set, it can
// safely use t.GetReceiveWindowSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReceiveWindowSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel) GetReceiveWindowSize() uint32 {
	if t == nil || t.ReceiveWindowSize == nil {
		return 0
	}
	return *t.ReceiveWindowSize
}

// GetRemoteName retrieves the value of the leaf RemoteName from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteName is set, it can
// safely use t.GetRemoteName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel) GetRemoteName() string {
	if t == nil || t.RemoteName == nil {
		return ""
	}
	return *t.RemoteName
}

// GetSessionLimit retrieves the value of the leaf SessionLimit from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionLimit is set, it can
// safely use t.GetSessionLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel) GetSessionLimit() NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_SessionLimit_Union {
	if t == nil || t.SessionLimit == nil {
		return nil
	}
	return t.SessionLimit
}

// GetTunnelName retrieves the value of the leaf TunnelName from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TunnelName is set, it can
// safely use t.GetTunnelName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TunnelName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel) GetTunnelName() string {
	if t == nil || t.TunnelName == nil {
		return ""
	}
	return *t.TunnelName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.AutoEstablish == nil {
		var v bool = false
		t.AutoEstablish = &v
	}
	if t.Preference == nil {
		var v uint32 = 50
		t.Preference = &v
	}
	t.Failover.PopulateDefaults()
	t.L2Tpv3.PopulateDefaults()
	t.Lac.PopulateDefaults()
	t.Lns.PopulateDefaults()
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.TunnelName == nil {
		return nil, fmt.Errorf("nil value for key TunnelName")
	}

	return map[string]interface{}{
		"tunnel-name": *t.TunnelName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Failover represents the /nokia-conf/configure/groups/group/router/l2tp/group/tunnel/failover YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Failover struct {
	RecoveryMethod E_NokiaTypesL2Tp_ChildFailoverRecoveryMethod `path:"recovery-method" module:"nokia-conf"`
	RecoveryTime   *int32                                       `path:"recovery-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Failover implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Failover) IsYANGGoStruct() {}

// GetRecoveryMethod retrieves the value of the leaf RecoveryMethod from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RecoveryMethod is set, it can
// safely use t.GetRecoveryMethod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RecoveryMethod == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Failover) GetRecoveryMethod() E_NokiaTypesL2Tp_ChildFailoverRecoveryMethod {
	if t == nil || t.RecoveryMethod == 0 {
		return 0
	}
	return t.RecoveryMethod
}

// GetRecoveryTime retrieves the value of the leaf RecoveryTime from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Failover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RecoveryTime is set, it can
// safely use t.GetRecoveryTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RecoveryTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Failover) GetRecoveryTime() int32 {
	if t == nil || t.RecoveryTime == nil {
		return 0
	}
	return *t.RecoveryTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Failover
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Failover) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Failover) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Failover"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Failover) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Failover) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Failover.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Failover) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_L2Tpv3 represents the /nokia-conf/configure/groups/group/router/l2tp/group/tunnel/l2tpv3 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_L2Tpv3 struct {
	PrivateTcpMssAdjust NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_L2Tpv3_PrivateTcpMssAdjust_Union `path:"private-tcp-mss-adjust" module:"nokia-conf"`
	PublicTcpMssAdjust  NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_L2Tpv3_PublicTcpMssAdjust_Union  `path:"public-tcp-mss-adjust" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_L2Tpv3 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_L2Tpv3) IsYANGGoStruct() {}

// GetPrivateTcpMssAdjust retrieves the value of the leaf PrivateTcpMssAdjust from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_L2Tpv3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrivateTcpMssAdjust is set, it can
// safely use t.GetPrivateTcpMssAdjust() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrivateTcpMssAdjust == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_L2Tpv3) GetPrivateTcpMssAdjust() NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_L2Tpv3_PrivateTcpMssAdjust_Union {
	if t == nil || t.PrivateTcpMssAdjust == nil {
		return nil
	}
	return t.PrivateTcpMssAdjust
}

// GetPublicTcpMssAdjust retrieves the value of the leaf PublicTcpMssAdjust from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_L2Tpv3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PublicTcpMssAdjust is set, it can
// safely use t.GetPublicTcpMssAdjust() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PublicTcpMssAdjust == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_L2Tpv3) GetPublicTcpMssAdjust() NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_L2Tpv3_PublicTcpMssAdjust_Union {
	if t == nil || t.PublicTcpMssAdjust == nil {
		return nil
	}
	return t.PublicTcpMssAdjust
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_L2Tpv3
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_L2Tpv3) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_L2Tpv3) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_L2Tpv3"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_L2Tpv3) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_L2Tpv3) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_L2Tpv3.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_L2Tpv3) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lac represents the /nokia-conf/configure/groups/group/router/l2tp/group/tunnel/lac YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lac struct {
	DfBit E_NokiaTypesSros_BoolWithInherit `path:"df-bit" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lac) IsYANGGoStruct() {}

// GetDfBit retrieves the value of the leaf DfBit from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DfBit is set, it can
// safely use t.GetDfBit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DfBit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lac) GetDfBit() E_NokiaTypesSros_BoolWithInherit {
	if t == nil || t.DfBit == 0 {
		return 0
	}
	return t.DfBit
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lac) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lac) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lac.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lac) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns represents the /nokia-conf/configure/groups/group/router/l2tp/group/tunnel/lns YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns struct {
	LnsGroup          *uint32                                                              `path:"lns-group" module:"nokia-conf"`
	LoadBalanceMethod E_NokiaTypesL2Tp_ChildLoadBalanceMethod                              `path:"load-balance-method" module:"nokia-conf"`
	Mlppp             *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Mlppp `path:"mlppp" module:"nokia-conf" yangPresence:"true"`
	Ppp               *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp   `path:"ppp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns) IsYANGGoStruct() {}

// GetOrCreateMlppp retrieves the value of the Mlppp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns) GetOrCreateMlppp() *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Mlppp {
	if t.Mlppp != nil {
		return t.Mlppp
	}
	t.Mlppp = &NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Mlppp{}
	return t.Mlppp
}

// GetOrCreatePpp retrieves the value of the Ppp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns) GetOrCreatePpp() *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp {
	if t.Ppp != nil {
		return t.Ppp
	}
	t.Ppp = &NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp{}
	return t.Ppp
}

// GetMlppp returns the value of the Mlppp struct pointer
// from NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns. If the receiver or the field Mlppp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns) GetMlppp() *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Mlppp {
	if t != nil && t.Mlppp != nil {
		return t.Mlppp
	}
	return nil
}

// GetPpp returns the value of the Ppp struct pointer
// from NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns. If the receiver or the field Ppp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns) GetPpp() *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp {
	if t != nil && t.Ppp != nil {
		return t.Ppp
	}
	return nil
}

// GetLnsGroup retrieves the value of the leaf LnsGroup from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LnsGroup is set, it can
// safely use t.GetLnsGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LnsGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns) GetLnsGroup() uint32 {
	if t == nil || t.LnsGroup == nil {
		return 0
	}
	return *t.LnsGroup
}

// GetLoadBalanceMethod retrieves the value of the leaf LoadBalanceMethod from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoadBalanceMethod is set, it can
// safely use t.GetLoadBalanceMethod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoadBalanceMethod == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns) GetLoadBalanceMethod() E_NokiaTypesL2Tp_ChildLoadBalanceMethod {
	if t == nil || t.LoadBalanceMethod == 0 {
		return 0
	}
	return t.LoadBalanceMethod
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Mlppp.PopulateDefaults()
	t.Ppp.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Mlppp represents the /nokia-conf/configure/groups/group/router/l2tp/group/tunnel/lns/mlppp YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Mlppp struct {
	AdminState           E_NokiaTypesSros_AdminStateWithInherit                                        `path:"admin-state" module:"nokia-conf"`
	Endpoint             *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Mlppp_Endpoint `path:"endpoint" module:"nokia-conf"`
	Interleave           E_NokiaTypesSros_BoolWithInherit                                              `path:"interleave" module:"nokia-conf"`
	MaxFragmentDelay     *uint32                                                                       `path:"max-fragment-delay" module:"nokia-conf"`
	MaxLinks             *uint32                                                                       `path:"max-links" module:"nokia-conf"`
	ReassemblyTimeout    *uint32                                                                       `path:"reassembly-timeout" module:"nokia-conf"`
	ShortSequenceNumbers E_NokiaTypesSros_BoolWithInherit                                              `path:"short-sequence-numbers" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Mlppp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Mlppp) IsYANGGoStruct() {}

// GetOrCreateEndpoint retrieves the value of the Endpoint field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Mlppp) GetOrCreateEndpoint() *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Mlppp_Endpoint {
	if t.Endpoint != nil {
		return t.Endpoint
	}
	t.Endpoint = &NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Mlppp_Endpoint{}
	return t.Endpoint
}

// GetEndpoint returns the value of the Endpoint struct pointer
// from NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Mlppp. If the receiver or the field Endpoint is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Mlppp) GetEndpoint() *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Mlppp_Endpoint {
	if t != nil && t.Endpoint != nil {
		return t.Endpoint
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Mlppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Mlppp) GetAdminState() E_NokiaTypesSros_AdminStateWithInherit {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetInterleave retrieves the value of the leaf Interleave from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Mlppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interleave is set, it can
// safely use t.GetInterleave() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interleave == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Mlppp) GetInterleave() E_NokiaTypesSros_BoolWithInherit {
	if t == nil || t.Interleave == 0 {
		return 0
	}
	return t.Interleave
}

// GetMaxFragmentDelay retrieves the value of the leaf MaxFragmentDelay from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Mlppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxFragmentDelay is set, it can
// safely use t.GetMaxFragmentDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxFragmentDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Mlppp) GetMaxFragmentDelay() uint32 {
	if t == nil || t.MaxFragmentDelay == nil {
		return 0
	}
	return *t.MaxFragmentDelay
}

// GetMaxLinks retrieves the value of the leaf MaxLinks from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Mlppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxLinks is set, it can
// safely use t.GetMaxLinks() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxLinks == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Mlppp) GetMaxLinks() uint32 {
	if t == nil || t.MaxLinks == nil {
		return 0
	}
	return *t.MaxLinks
}

// GetReassemblyTimeout retrieves the value of the leaf ReassemblyTimeout from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Mlppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReassemblyTimeout is set, it can
// safely use t.GetReassemblyTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReassemblyTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Mlppp) GetReassemblyTimeout() uint32 {
	if t == nil || t.ReassemblyTimeout == nil {
		return 0
	}
	return *t.ReassemblyTimeout
}

// GetShortSequenceNumbers retrieves the value of the leaf ShortSequenceNumbers from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Mlppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ShortSequenceNumbers is set, it can
// safely use t.GetShortSequenceNumbers() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ShortSequenceNumbers == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Mlppp) GetShortSequenceNumbers() E_NokiaTypesSros_BoolWithInherit {
	if t == nil || t.ShortSequenceNumbers == 0 {
		return 0
	}
	return t.ShortSequenceNumbers
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Mlppp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Mlppp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Endpoint.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Mlppp) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Mlppp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Mlppp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Mlppp) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Mlppp.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Mlppp) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Mlppp_Endpoint represents the /nokia-conf/configure/groups/group/router/l2tp/group/tunnel/lns/mlppp/endpoint YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Mlppp_Endpoint struct {
	Ip  NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Mlppp_Endpoint_Ip_Union  `path:"ip" module:"nokia-conf"`
	Mac NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Mlppp_Endpoint_Mac_Union `path:"mac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Mlppp_Endpoint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Mlppp_Endpoint) IsYANGGoStruct() {
}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Mlppp_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Mlppp_Endpoint) GetIp() NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Mlppp_Endpoint_Ip_Union {
	if t == nil || t.Ip == nil {
		return nil
	}
	return t.Ip
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Mlppp_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Mlppp_Endpoint) GetMac() NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Mlppp_Endpoint_Mac_Union {
	if t == nil || t.Mac == nil {
		return nil
	}
	return t.Mac
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Mlppp_Endpoint
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Mlppp_Endpoint) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Mlppp_Endpoint) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Mlppp_Endpoint"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Mlppp_Endpoint) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Mlppp_Endpoint) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Mlppp_Endpoint.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Mlppp_Endpoint) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp represents the /nokia-conf/configure/groups/group/router/l2tp/group/tunnel/lns/ppp YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp struct {
	Authentication        E_NokiaTypesL2Tp_ChildPppAuthProtocol                                                    `path:"authentication" module:"nokia-conf"`
	AuthenticationPolicy  *string                                                                                  `path:"authentication-policy" module:"nokia-conf"`
	ChapChallengeLength   *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp_ChapChallengeLength   `path:"chap-challenge-length" module:"nokia-conf"`
	DefaultGroupInterface *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp_DefaultGroupInterface `path:"default-group-interface" module:"nokia-conf"`
	IpcpSubnetNegotiation E_NokiaTypesSros_BoolWithInherit                                                         `path:"ipcp-subnet-negotiation" module:"nokia-conf"`
	Keepalive             *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp_Keepalive             `path:"keepalive" module:"nokia-conf"`
	LcpForceAckAccm       E_NokiaTypesSros_BoolWithInherit                                                         `path:"lcp-force-ack-accm" module:"nokia-conf"`
	LcpIgnoreMagicNumbers E_NokiaTypesSros_BoolWithInherit                                                         `path:"lcp-ignore-magic-numbers" module:"nokia-conf"`
	Mtu                   *uint32                                                                                  `path:"mtu" module:"nokia-conf"`
	ProxyAuthentication   E_NokiaTypesSros_BoolWithInherit                                                         `path:"proxy-authentication" module:"nokia-conf"`
	ProxyLcp              E_NokiaTypesSros_BoolWithInherit                                                         `path:"proxy-lcp" module:"nokia-conf"`
	RejectDisabledNcp     E_NokiaTypesSros_BoolWithInherit                                                         `path:"reject-disabled-ncp" module:"nokia-conf"`
	UserDb                *string                                                                                  `path:"user-db" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp) IsYANGGoStruct() {}

// GetOrCreateChapChallengeLength retrieves the value of the ChapChallengeLength field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp) GetOrCreateChapChallengeLength() *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp_ChapChallengeLength {
	if t.ChapChallengeLength != nil {
		return t.ChapChallengeLength
	}
	t.ChapChallengeLength = &NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp_ChapChallengeLength{}
	return t.ChapChallengeLength
}

// GetOrCreateDefaultGroupInterface retrieves the value of the DefaultGroupInterface field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp) GetOrCreateDefaultGroupInterface() *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp_DefaultGroupInterface {
	if t.DefaultGroupInterface != nil {
		return t.DefaultGroupInterface
	}
	t.DefaultGroupInterface = &NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp_DefaultGroupInterface{}
	return t.DefaultGroupInterface
}

// GetOrCreateKeepalive retrieves the value of the Keepalive field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp) GetOrCreateKeepalive() *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp_Keepalive {
	if t.Keepalive != nil {
		return t.Keepalive
	}
	t.Keepalive = &NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp_Keepalive{}
	return t.Keepalive
}

// GetChapChallengeLength returns the value of the ChapChallengeLength struct pointer
// from NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp. If the receiver or the field ChapChallengeLength is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp) GetChapChallengeLength() *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp_ChapChallengeLength {
	if t != nil && t.ChapChallengeLength != nil {
		return t.ChapChallengeLength
	}
	return nil
}

// GetDefaultGroupInterface returns the value of the DefaultGroupInterface struct pointer
// from NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp. If the receiver or the field DefaultGroupInterface is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp) GetDefaultGroupInterface() *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp_DefaultGroupInterface {
	if t != nil && t.DefaultGroupInterface != nil {
		return t.DefaultGroupInterface
	}
	return nil
}

// GetKeepalive returns the value of the Keepalive struct pointer
// from NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp. If the receiver or the field Keepalive is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp) GetKeepalive() *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp_Keepalive {
	if t != nil && t.Keepalive != nil {
		return t.Keepalive
	}
	return nil
}

// GetAuthentication retrieves the value of the leaf Authentication from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Authentication is set, it can
// safely use t.GetAuthentication() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Authentication == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp) GetAuthentication() E_NokiaTypesL2Tp_ChildPppAuthProtocol {
	if t == nil || t.Authentication == 0 {
		return 0
	}
	return t.Authentication
}

// GetAuthenticationPolicy retrieves the value of the leaf AuthenticationPolicy from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationPolicy is set, it can
// safely use t.GetAuthenticationPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp) GetAuthenticationPolicy() string {
	if t == nil || t.AuthenticationPolicy == nil {
		return ""
	}
	return *t.AuthenticationPolicy
}

// GetIpcpSubnetNegotiation retrieves the value of the leaf IpcpSubnetNegotiation from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpcpSubnetNegotiation is set, it can
// safely use t.GetIpcpSubnetNegotiation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpcpSubnetNegotiation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp) GetIpcpSubnetNegotiation() E_NokiaTypesSros_BoolWithInherit {
	if t == nil || t.IpcpSubnetNegotiation == 0 {
		return 0
	}
	return t.IpcpSubnetNegotiation
}

// GetLcpForceAckAccm retrieves the value of the leaf LcpForceAckAccm from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LcpForceAckAccm is set, it can
// safely use t.GetLcpForceAckAccm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LcpForceAckAccm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp) GetLcpForceAckAccm() E_NokiaTypesSros_BoolWithInherit {
	if t == nil || t.LcpForceAckAccm == 0 {
		return 0
	}
	return t.LcpForceAckAccm
}

// GetLcpIgnoreMagicNumbers retrieves the value of the leaf LcpIgnoreMagicNumbers from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LcpIgnoreMagicNumbers is set, it can
// safely use t.GetLcpIgnoreMagicNumbers() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LcpIgnoreMagicNumbers == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp) GetLcpIgnoreMagicNumbers() E_NokiaTypesSros_BoolWithInherit {
	if t == nil || t.LcpIgnoreMagicNumbers == 0 {
		return 0
	}
	return t.LcpIgnoreMagicNumbers
}

// GetMtu retrieves the value of the leaf Mtu from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mtu is set, it can
// safely use t.GetMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp) GetMtu() uint32 {
	if t == nil || t.Mtu == nil {
		return 0
	}
	return *t.Mtu
}

// GetProxyAuthentication retrieves the value of the leaf ProxyAuthentication from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProxyAuthentication is set, it can
// safely use t.GetProxyAuthentication() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProxyAuthentication == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp) GetProxyAuthentication() E_NokiaTypesSros_BoolWithInherit {
	if t == nil || t.ProxyAuthentication == 0 {
		return 0
	}
	return t.ProxyAuthentication
}

// GetProxyLcp retrieves the value of the leaf ProxyLcp from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProxyLcp is set, it can
// safely use t.GetProxyLcp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProxyLcp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp) GetProxyLcp() E_NokiaTypesSros_BoolWithInherit {
	if t == nil || t.ProxyLcp == 0 {
		return 0
	}
	return t.ProxyLcp
}

// GetRejectDisabledNcp retrieves the value of the leaf RejectDisabledNcp from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RejectDisabledNcp is set, it can
// safely use t.GetRejectDisabledNcp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RejectDisabledNcp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp) GetRejectDisabledNcp() E_NokiaTypesSros_BoolWithInherit {
	if t == nil || t.RejectDisabledNcp == 0 {
		return 0
	}
	return t.RejectDisabledNcp
}

// GetUserDb retrieves the value of the leaf UserDb from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UserDb is set, it can
// safely use t.GetUserDb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UserDb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp) GetUserDb() string {
	if t == nil || t.UserDb == nil {
		return ""
	}
	return *t.UserDb
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.ChapChallengeLength.PopulateDefaults()
	t.DefaultGroupInterface.PopulateDefaults()
	t.Keepalive.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp_ChapChallengeLength represents the /nokia-conf/configure/groups/group/router/l2tp/group/tunnel/lns/ppp/chap-challenge-length YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp_ChapChallengeLength struct {
	End   *uint32 `path:"end" module:"nokia-conf"`
	Start *uint32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp_ChapChallengeLength implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp_ChapChallengeLength) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp_ChapChallengeLength
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp_ChapChallengeLength) GetEnd() uint32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp_ChapChallengeLength
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp_ChapChallengeLength) GetStart() uint32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp_ChapChallengeLength
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp_ChapChallengeLength) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp_ChapChallengeLength) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp_ChapChallengeLength"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp_ChapChallengeLength) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp_ChapChallengeLength) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp_ChapChallengeLength.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp_ChapChallengeLength) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp_DefaultGroupInterface represents the /nokia-conf/configure/groups/group/router/l2tp/group/tunnel/lns/ppp/default-group-interface YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp_DefaultGroupInterface struct {
	Interface   *string `path:"interface" module:"nokia-conf"`
	ServiceName *string `path:"service-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp_DefaultGroupInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp_DefaultGroupInterface) IsYANGGoStruct() {
}

// GetInterface retrieves the value of the leaf Interface from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp_DefaultGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp_DefaultGroupInterface) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetServiceName retrieves the value of the leaf ServiceName from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp_DefaultGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceName is set, it can
// safely use t.GetServiceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp_DefaultGroupInterface) GetServiceName() string {
	if t == nil || t.ServiceName == nil {
		return ""
	}
	return *t.ServiceName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp_DefaultGroupInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp_DefaultGroupInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp_DefaultGroupInterface) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp_DefaultGroupInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp_DefaultGroupInterface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp_DefaultGroupInterface) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp_DefaultGroupInterface.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp_DefaultGroupInterface) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp_Keepalive represents the /nokia-conf/configure/groups/group/router/l2tp/group/tunnel/lns/ppp/keepalive YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp_Keepalive struct {
	Interval   *uint32 `path:"interval" module:"nokia-conf"`
	Multiplier *uint32 `path:"multiplier" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp_Keepalive implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp_Keepalive) IsYANGGoStruct() {
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp_Keepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp_Keepalive) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMultiplier retrieves the value of the leaf Multiplier from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp_Keepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multiplier is set, it can
// safely use t.GetMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp_Keepalive) GetMultiplier() uint32 {
	if t == nil || t.Multiplier == nil {
		return 0
	}
	return *t.Multiplier
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp_Keepalive
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp_Keepalive) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp_Keepalive) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp_Keepalive"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp_Keepalive) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp_Keepalive) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp_Keepalive.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp_Group_Tunnel_Lns_Ppp_Keepalive) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_L2Tp_IgnoreAvps represents the /nokia-conf/configure/groups/group/router/l2tp/ignore-avps YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_L2Tp_IgnoreAvps struct {
	SequencingRequired *bool `path:"sequencing-required" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_L2Tp_IgnoreAvps implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp_IgnoreAvps) IsYANGGoStruct() {}

// GetSequencingRequired retrieves the value of the leaf SequencingRequired from the NokiaConf_Configure_Groups_Group_Router_L2Tp_IgnoreAvps
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SequencingRequired is set, it can
// safely use t.GetSequencingRequired() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SequencingRequired == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_IgnoreAvps) GetSequencingRequired() bool {
	if t == nil || t.SequencingRequired == nil {
		return false
	}
	return *t.SequencingRequired
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_L2Tp_IgnoreAvps
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_IgnoreAvps) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SequencingRequired == nil {
		var v bool = false
		t.SequencingRequired = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_IgnoreAvps) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_L2Tp_IgnoreAvps"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_IgnoreAvps) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_IgnoreAvps) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_L2Tp_IgnoreAvps.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp_IgnoreAvps) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_L2Tp_L2Tpv3 represents the /nokia-conf/configure/groups/group/router/l2tp/l2tpv3 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_L2Tp_L2Tpv3 struct {
	CookieLength        *int32                                                             `path:"cookie-length" module:"nokia-conf"`
	DigestType          E_NokiaTypesL2Tp_BaseV3DigestType                                  `path:"digest-type" module:"nokia-conf"`
	NonceLength         *int32                                                             `path:"nonce-length" module:"nokia-conf"`
	Password            *string                                                            `path:"password" module:"nokia-conf"`
	PrivateTcpMssAdjust *int32                                                             `path:"private-tcp-mss-adjust" module:"nokia-conf"`
	PublicTcpMssAdjust  *int32                                                             `path:"public-tcp-mss-adjust" module:"nokia-conf"`
	TransportType       *NokiaConf_Configure_Groups_Group_Router_L2Tp_L2Tpv3_TransportType `path:"transport-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_L2Tp_L2Tpv3 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp_L2Tpv3) IsYANGGoStruct() {}

// GetOrCreateTransportType retrieves the value of the TransportType field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_L2Tpv3) GetOrCreateTransportType() *NokiaConf_Configure_Groups_Group_Router_L2Tp_L2Tpv3_TransportType {
	if t.TransportType != nil {
		return t.TransportType
	}
	t.TransportType = &NokiaConf_Configure_Groups_Group_Router_L2Tp_L2Tpv3_TransportType{}
	return t.TransportType
}

// GetTransportType returns the value of the TransportType struct pointer
// from NokiaConf_Configure_Groups_Group_Router_L2Tp_L2Tpv3. If the receiver or the field TransportType is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_L2Tpv3) GetTransportType() *NokiaConf_Configure_Groups_Group_Router_L2Tp_L2Tpv3_TransportType {
	if t != nil && t.TransportType != nil {
		return t.TransportType
	}
	return nil
}

// GetCookieLength retrieves the value of the leaf CookieLength from the NokiaConf_Configure_Groups_Group_Router_L2Tp_L2Tpv3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CookieLength is set, it can
// safely use t.GetCookieLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CookieLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_L2Tpv3) GetCookieLength() int32 {
	if t == nil || t.CookieLength == nil {
		return 0
	}
	return *t.CookieLength
}

// GetDigestType retrieves the value of the leaf DigestType from the NokiaConf_Configure_Groups_Group_Router_L2Tp_L2Tpv3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DigestType is set, it can
// safely use t.GetDigestType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DigestType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_L2Tpv3) GetDigestType() E_NokiaTypesL2Tp_BaseV3DigestType {
	if t == nil || t.DigestType == 0 {
		return 0
	}
	return t.DigestType
}

// GetNonceLength retrieves the value of the leaf NonceLength from the NokiaConf_Configure_Groups_Group_Router_L2Tp_L2Tpv3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NonceLength is set, it can
// safely use t.GetNonceLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NonceLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_L2Tpv3) GetNonceLength() int32 {
	if t == nil || t.NonceLength == nil {
		return 0
	}
	return *t.NonceLength
}

// GetPassword retrieves the value of the leaf Password from the NokiaConf_Configure_Groups_Group_Router_L2Tp_L2Tpv3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Password is set, it can
// safely use t.GetPassword() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Password == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_L2Tpv3) GetPassword() string {
	if t == nil || t.Password == nil {
		return ""
	}
	return *t.Password
}

// GetPrivateTcpMssAdjust retrieves the value of the leaf PrivateTcpMssAdjust from the NokiaConf_Configure_Groups_Group_Router_L2Tp_L2Tpv3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrivateTcpMssAdjust is set, it can
// safely use t.GetPrivateTcpMssAdjust() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrivateTcpMssAdjust == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_L2Tpv3) GetPrivateTcpMssAdjust() int32 {
	if t == nil || t.PrivateTcpMssAdjust == nil {
		return 0
	}
	return *t.PrivateTcpMssAdjust
}

// GetPublicTcpMssAdjust retrieves the value of the leaf PublicTcpMssAdjust from the NokiaConf_Configure_Groups_Group_Router_L2Tp_L2Tpv3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PublicTcpMssAdjust is set, it can
// safely use t.GetPublicTcpMssAdjust() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PublicTcpMssAdjust == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_L2Tpv3) GetPublicTcpMssAdjust() int32 {
	if t == nil || t.PublicTcpMssAdjust == nil {
		return 0
	}
	return *t.PublicTcpMssAdjust
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_L2Tp_L2Tpv3
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_L2Tpv3) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.NonceLength == nil {
		var v int32 = 0
		t.NonceLength = &v
	}
	t.TransportType.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_L2Tpv3) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_L2Tp_L2Tpv3"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_L2Tpv3) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_L2Tpv3) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_L2Tp_L2Tpv3.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp_L2Tpv3) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_L2Tp_L2Tpv3_TransportType represents the /nokia-conf/configure/groups/group/router/l2tp/l2tpv3/transport-type YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_L2Tp_L2Tpv3_TransportType struct {
	Ip *bool `path:"ip" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_L2Tp_L2Tpv3_TransportType implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp_L2Tpv3_TransportType) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Groups_Group_Router_L2Tp_L2Tpv3_TransportType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_L2Tpv3_TransportType) GetIp() bool {
	if t == nil || t.Ip == nil {
		return false
	}
	return *t.Ip
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_L2Tp_L2Tpv3_TransportType
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_L2Tpv3_TransportType) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ip == nil {
		var v bool = false
		t.Ip = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_L2Tpv3_TransportType) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_L2Tp_L2Tpv3_TransportType"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_L2Tpv3_TransportType) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_L2Tpv3_TransportType) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_L2Tp_L2Tpv3_TransportType.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp_L2Tpv3_TransportType) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_L2Tp_Lac represents the /nokia-conf/configure/groups/group/router/l2tp/lac YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_L2Tp_Lac struct {
	CallingNumberFormat *string                                                        `path:"calling-number-format" module:"nokia-conf"`
	CiscoNasPort        *NokiaConf_Configure_Groups_Group_Router_L2Tp_Lac_CiscoNasPort `path:"cisco-nas-port" module:"nokia-conf"`
	DfBit               *bool                                                          `path:"df-bit" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_L2Tp_Lac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp_Lac) IsYANGGoStruct() {}

// GetOrCreateCiscoNasPort retrieves the value of the CiscoNasPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Lac) GetOrCreateCiscoNasPort() *NokiaConf_Configure_Groups_Group_Router_L2Tp_Lac_CiscoNasPort {
	if t.CiscoNasPort != nil {
		return t.CiscoNasPort
	}
	t.CiscoNasPort = &NokiaConf_Configure_Groups_Group_Router_L2Tp_Lac_CiscoNasPort{}
	return t.CiscoNasPort
}

// GetCiscoNasPort returns the value of the CiscoNasPort struct pointer
// from NokiaConf_Configure_Groups_Group_Router_L2Tp_Lac. If the receiver or the field CiscoNasPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Lac) GetCiscoNasPort() *NokiaConf_Configure_Groups_Group_Router_L2Tp_Lac_CiscoNasPort {
	if t != nil && t.CiscoNasPort != nil {
		return t.CiscoNasPort
	}
	return nil
}

// GetCallingNumberFormat retrieves the value of the leaf CallingNumberFormat from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Lac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CallingNumberFormat is set, it can
// safely use t.GetCallingNumberFormat() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CallingNumberFormat == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Lac) GetCallingNumberFormat() string {
	if t == nil || t.CallingNumberFormat == nil {
		return "%S %s"
	}
	return *t.CallingNumberFormat
}

// GetDfBit retrieves the value of the leaf DfBit from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Lac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DfBit is set, it can
// safely use t.GetDfBit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DfBit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Lac) GetDfBit() bool {
	if t == nil || t.DfBit == nil {
		return true
	}
	return *t.DfBit
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_L2Tp_Lac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Lac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CallingNumberFormat == nil {
		var v string = "%S %s"
		t.CallingNumberFormat = &v
	}
	if t.DfBit == nil {
		var v bool = true
		t.DfBit = &v
	}
	t.CiscoNasPort.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Lac) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_L2Tp_Lac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Lac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Lac) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_L2Tp_Lac.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp_Lac) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_L2Tp_Lac_CiscoNasPort represents the /nokia-conf/configure/groups/group/router/l2tp/lac/cisco-nas-port YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_L2Tp_Lac_CiscoNasPort struct {
	Ethernet *string `path:"ethernet" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_L2Tp_Lac_CiscoNasPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp_Lac_CiscoNasPort) IsYANGGoStruct() {}

// GetEthernet retrieves the value of the leaf Ethernet from the NokiaConf_Configure_Groups_Group_Router_L2Tp_Lac_CiscoNasPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ethernet is set, it can
// safely use t.GetEthernet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ethernet == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Lac_CiscoNasPort) GetEthernet() string {
	if t == nil || t.Ethernet == nil {
		return ""
	}
	return *t.Ethernet
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_L2Tp_Lac_CiscoNasPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Lac_CiscoNasPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Lac_CiscoNasPort) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_L2Tp_Lac_CiscoNasPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Lac_CiscoNasPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_Lac_CiscoNasPort) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_L2Tp_Lac_CiscoNasPort.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp_Lac_CiscoNasPort) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_L2Tp_ReplaceResultCode represents the /nokia-conf/configure/groups/group/router/l2tp/replace-result-code YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_L2Tp_ReplaceResultCode struct {
	CdnInvalidDst            *bool `path:"cdn-invalid-dst" module:"nokia-conf"`
	CdnPermanentNoFacilities *bool `path:"cdn-permanent-no-facilities" module:"nokia-conf"`
	CdnTemporaryNoFacilities *bool `path:"cdn-temporary-no-facilities" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_L2Tp_ReplaceResultCode implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp_ReplaceResultCode) IsYANGGoStruct() {}

// GetCdnInvalidDst retrieves the value of the leaf CdnInvalidDst from the NokiaConf_Configure_Groups_Group_Router_L2Tp_ReplaceResultCode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CdnInvalidDst is set, it can
// safely use t.GetCdnInvalidDst() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CdnInvalidDst == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_ReplaceResultCode) GetCdnInvalidDst() bool {
	if t == nil || t.CdnInvalidDst == nil {
		return false
	}
	return *t.CdnInvalidDst
}

// GetCdnPermanentNoFacilities retrieves the value of the leaf CdnPermanentNoFacilities from the NokiaConf_Configure_Groups_Group_Router_L2Tp_ReplaceResultCode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CdnPermanentNoFacilities is set, it can
// safely use t.GetCdnPermanentNoFacilities() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CdnPermanentNoFacilities == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_ReplaceResultCode) GetCdnPermanentNoFacilities() bool {
	if t == nil || t.CdnPermanentNoFacilities == nil {
		return false
	}
	return *t.CdnPermanentNoFacilities
}

// GetCdnTemporaryNoFacilities retrieves the value of the leaf CdnTemporaryNoFacilities from the NokiaConf_Configure_Groups_Group_Router_L2Tp_ReplaceResultCode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CdnTemporaryNoFacilities is set, it can
// safely use t.GetCdnTemporaryNoFacilities() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CdnTemporaryNoFacilities == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_ReplaceResultCode) GetCdnTemporaryNoFacilities() bool {
	if t == nil || t.CdnTemporaryNoFacilities == nil {
		return false
	}
	return *t.CdnTemporaryNoFacilities
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_L2Tp_ReplaceResultCode
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_ReplaceResultCode) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CdnInvalidDst == nil {
		var v bool = false
		t.CdnInvalidDst = &v
	}
	if t.CdnPermanentNoFacilities == nil {
		var v bool = false
		t.CdnPermanentNoFacilities = &v
	}
	if t.CdnTemporaryNoFacilities == nil {
		var v bool = false
		t.CdnTemporaryNoFacilities = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_ReplaceResultCode) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_L2Tp_ReplaceResultCode"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_ReplaceResultCode) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_ReplaceResultCode) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_L2Tp_ReplaceResultCode.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp_ReplaceResultCode) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_L2Tp_TunnelSelectionBlacklist represents the /nokia-conf/configure/groups/group/router/l2tp/tunnel-selection-blacklist YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_L2Tp_TunnelSelectionBlacklist struct {
	AddTunnelOn   *NokiaConf_Configure_Groups_Group_Router_L2Tp_TunnelSelectionBlacklist_AddTunnelOn        `path:"add-tunnel-on" module:"nokia-conf"`
	MaxListLength NokiaConf_Configure_Groups_Group_Router_L2Tp_TunnelSelectionBlacklist_MaxListLength_Union `path:"max-list-length" module:"nokia-conf"`
	MaxTime       *int32                                                                                    `path:"max-time" module:"nokia-conf"`
	TimeoutAction E_NokiaConf_Configure_Groups_Group_Router_L2Tp_TunnelSelectionBlacklist_TimeoutAction     `path:"timeout-action" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_L2Tp_TunnelSelectionBlacklist implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp_TunnelSelectionBlacklist) IsYANGGoStruct() {}

// GetOrCreateAddTunnelOn retrieves the value of the AddTunnelOn field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_TunnelSelectionBlacklist) GetOrCreateAddTunnelOn() *NokiaConf_Configure_Groups_Group_Router_L2Tp_TunnelSelectionBlacklist_AddTunnelOn {
	if t.AddTunnelOn != nil {
		return t.AddTunnelOn
	}
	t.AddTunnelOn = &NokiaConf_Configure_Groups_Group_Router_L2Tp_TunnelSelectionBlacklist_AddTunnelOn{}
	return t.AddTunnelOn
}

// GetAddTunnelOn returns the value of the AddTunnelOn struct pointer
// from NokiaConf_Configure_Groups_Group_Router_L2Tp_TunnelSelectionBlacklist. If the receiver or the field AddTunnelOn is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_TunnelSelectionBlacklist) GetAddTunnelOn() *NokiaConf_Configure_Groups_Group_Router_L2Tp_TunnelSelectionBlacklist_AddTunnelOn {
	if t != nil && t.AddTunnelOn != nil {
		return t.AddTunnelOn
	}
	return nil
}

// GetMaxListLength retrieves the value of the leaf MaxListLength from the NokiaConf_Configure_Groups_Group_Router_L2Tp_TunnelSelectionBlacklist
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxListLength is set, it can
// safely use t.GetMaxListLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxListLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_TunnelSelectionBlacklist) GetMaxListLength() NokiaConf_Configure_Groups_Group_Router_L2Tp_TunnelSelectionBlacklist_MaxListLength_Union {
	if t == nil || t.MaxListLength == nil {
		return NokiaConf_Configure_Groups_Group_Router_L2Tp_TunnelSelectionBlacklist_MaxListLength_Enum_infinite
	}
	return t.MaxListLength
}

// GetMaxTime retrieves the value of the leaf MaxTime from the NokiaConf_Configure_Groups_Group_Router_L2Tp_TunnelSelectionBlacklist
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_TunnelSelectionBlacklist) GetMaxTime() int32 {
	if t == nil || t.MaxTime == nil {
		return 5
	}
	return *t.MaxTime
}

// GetTimeoutAction retrieves the value of the leaf TimeoutAction from the NokiaConf_Configure_Groups_Group_Router_L2Tp_TunnelSelectionBlacklist
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TimeoutAction is set, it can
// safely use t.GetTimeoutAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TimeoutAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_TunnelSelectionBlacklist) GetTimeoutAction() E_NokiaConf_Configure_Groups_Group_Router_L2Tp_TunnelSelectionBlacklist_TimeoutAction {
	if t == nil || t.TimeoutAction == 0 {
		return NokiaConf_Configure_Groups_Group_Router_L2Tp_TunnelSelectionBlacklist_TimeoutAction_remove_from_blacklist
	}
	return t.TimeoutAction
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_L2Tp_TunnelSelectionBlacklist
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_TunnelSelectionBlacklist) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxListLength == nil {
		t.MaxListLength = NokiaConf_Configure_Groups_Group_Router_L2Tp_TunnelSelectionBlacklist_MaxListLength_Enum_infinite
	}
	if t.MaxTime == nil {
		var v int32 = 5
		t.MaxTime = &v
	}
	if t.TimeoutAction == 0 {
		t.TimeoutAction = NokiaConf_Configure_Groups_Group_Router_L2Tp_TunnelSelectionBlacklist_TimeoutAction_remove_from_blacklist
	}
	t.AddTunnelOn.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_TunnelSelectionBlacklist) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_L2Tp_TunnelSelectionBlacklist"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_TunnelSelectionBlacklist) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_TunnelSelectionBlacklist) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_L2Tp_TunnelSelectionBlacklist.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp_TunnelSelectionBlacklist) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_L2Tp_TunnelSelectionBlacklist_AddTunnelOn represents the /nokia-conf/configure/groups/group/router/l2tp/tunnel-selection-blacklist/add-tunnel-on YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_L2Tp_TunnelSelectionBlacklist_AddTunnelOn struct {
	AddressChangeTimeout      *bool `path:"address-change-timeout" module:"nokia-conf"`
	CdnErrCode                *bool `path:"cdn-err-code" module:"nokia-conf"`
	CdnInvalidDst             *bool `path:"cdn-invalid-dst" module:"nokia-conf"`
	CdnPermanentNoFacilities  *bool `path:"cdn-permanent-no-facilities" module:"nokia-conf"`
	CdnTemporaryNoFacilities  *bool `path:"cdn-temporary-no-facilities" module:"nokia-conf"`
	StopCcnErrCode            *bool `path:"stop-ccn-err-code" module:"nokia-conf"`
	StopCcnOther              *bool `path:"stop-ccn-other" module:"nokia-conf"`
	TxCdnNotEstablishedInTime *bool `path:"tx-cdn-not-established-in-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_L2Tp_TunnelSelectionBlacklist_AddTunnelOn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp_TunnelSelectionBlacklist_AddTunnelOn) IsYANGGoStruct() {
}

// GetAddressChangeTimeout retrieves the value of the leaf AddressChangeTimeout from the NokiaConf_Configure_Groups_Group_Router_L2Tp_TunnelSelectionBlacklist_AddTunnelOn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AddressChangeTimeout is set, it can
// safely use t.GetAddressChangeTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AddressChangeTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_TunnelSelectionBlacklist_AddTunnelOn) GetAddressChangeTimeout() bool {
	if t == nil || t.AddressChangeTimeout == nil {
		return false
	}
	return *t.AddressChangeTimeout
}

// GetCdnErrCode retrieves the value of the leaf CdnErrCode from the NokiaConf_Configure_Groups_Group_Router_L2Tp_TunnelSelectionBlacklist_AddTunnelOn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CdnErrCode is set, it can
// safely use t.GetCdnErrCode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CdnErrCode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_TunnelSelectionBlacklist_AddTunnelOn) GetCdnErrCode() bool {
	if t == nil || t.CdnErrCode == nil {
		return false
	}
	return *t.CdnErrCode
}

// GetCdnInvalidDst retrieves the value of the leaf CdnInvalidDst from the NokiaConf_Configure_Groups_Group_Router_L2Tp_TunnelSelectionBlacklist_AddTunnelOn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CdnInvalidDst is set, it can
// safely use t.GetCdnInvalidDst() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CdnInvalidDst == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_TunnelSelectionBlacklist_AddTunnelOn) GetCdnInvalidDst() bool {
	if t == nil || t.CdnInvalidDst == nil {
		return false
	}
	return *t.CdnInvalidDst
}

// GetCdnPermanentNoFacilities retrieves the value of the leaf CdnPermanentNoFacilities from the NokiaConf_Configure_Groups_Group_Router_L2Tp_TunnelSelectionBlacklist_AddTunnelOn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CdnPermanentNoFacilities is set, it can
// safely use t.GetCdnPermanentNoFacilities() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CdnPermanentNoFacilities == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_TunnelSelectionBlacklist_AddTunnelOn) GetCdnPermanentNoFacilities() bool {
	if t == nil || t.CdnPermanentNoFacilities == nil {
		return false
	}
	return *t.CdnPermanentNoFacilities
}

// GetCdnTemporaryNoFacilities retrieves the value of the leaf CdnTemporaryNoFacilities from the NokiaConf_Configure_Groups_Group_Router_L2Tp_TunnelSelectionBlacklist_AddTunnelOn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CdnTemporaryNoFacilities is set, it can
// safely use t.GetCdnTemporaryNoFacilities() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CdnTemporaryNoFacilities == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_TunnelSelectionBlacklist_AddTunnelOn) GetCdnTemporaryNoFacilities() bool {
	if t == nil || t.CdnTemporaryNoFacilities == nil {
		return false
	}
	return *t.CdnTemporaryNoFacilities
}

// GetStopCcnErrCode retrieves the value of the leaf StopCcnErrCode from the NokiaConf_Configure_Groups_Group_Router_L2Tp_TunnelSelectionBlacklist_AddTunnelOn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StopCcnErrCode is set, it can
// safely use t.GetStopCcnErrCode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StopCcnErrCode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_TunnelSelectionBlacklist_AddTunnelOn) GetStopCcnErrCode() bool {
	if t == nil || t.StopCcnErrCode == nil {
		return false
	}
	return *t.StopCcnErrCode
}

// GetStopCcnOther retrieves the value of the leaf StopCcnOther from the NokiaConf_Configure_Groups_Group_Router_L2Tp_TunnelSelectionBlacklist_AddTunnelOn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StopCcnOther is set, it can
// safely use t.GetStopCcnOther() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StopCcnOther == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_TunnelSelectionBlacklist_AddTunnelOn) GetStopCcnOther() bool {
	if t == nil || t.StopCcnOther == nil {
		return false
	}
	return *t.StopCcnOther
}

// GetTxCdnNotEstablishedInTime retrieves the value of the leaf TxCdnNotEstablishedInTime from the NokiaConf_Configure_Groups_Group_Router_L2Tp_TunnelSelectionBlacklist_AddTunnelOn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxCdnNotEstablishedInTime is set, it can
// safely use t.GetTxCdnNotEstablishedInTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxCdnNotEstablishedInTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_TunnelSelectionBlacklist_AddTunnelOn) GetTxCdnNotEstablishedInTime() bool {
	if t == nil || t.TxCdnNotEstablishedInTime == nil {
		return false
	}
	return *t.TxCdnNotEstablishedInTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_L2Tp_TunnelSelectionBlacklist_AddTunnelOn
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_TunnelSelectionBlacklist_AddTunnelOn) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AddressChangeTimeout == nil {
		var v bool = false
		t.AddressChangeTimeout = &v
	}
	if t.CdnErrCode == nil {
		var v bool = false
		t.CdnErrCode = &v
	}
	if t.CdnInvalidDst == nil {
		var v bool = false
		t.CdnInvalidDst = &v
	}
	if t.CdnPermanentNoFacilities == nil {
		var v bool = false
		t.CdnPermanentNoFacilities = &v
	}
	if t.CdnTemporaryNoFacilities == nil {
		var v bool = false
		t.CdnTemporaryNoFacilities = &v
	}
	if t.StopCcnErrCode == nil {
		var v bool = false
		t.StopCcnErrCode = &v
	}
	if t.StopCcnOther == nil {
		var v bool = false
		t.StopCcnOther = &v
	}
	if t.TxCdnNotEstablishedInTime == nil {
		var v bool = false
		t.TxCdnNotEstablishedInTime = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_TunnelSelectionBlacklist_AddTunnelOn) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_L2Tp_TunnelSelectionBlacklist_AddTunnelOn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_TunnelSelectionBlacklist_AddTunnelOn) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_L2Tp_TunnelSelectionBlacklist_AddTunnelOn) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_L2Tp_TunnelSelectionBlacklist_AddTunnelOn.
func (*NokiaConf_Configure_Groups_Group_Router_L2Tp_TunnelSelectionBlacklist_AddTunnelOn) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ldp represents the /nokia-conf/configure/groups/group/router/ldp YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ldp struct {
	AdminState                  E_NokiaTypesSros_AdminState                                          `path:"admin-state" module:"nokia-conf"`
	AggregatePrefixMatch        *NokiaConf_Configure_Groups_Group_Router_Ldp_AggregatePrefixMatch    `path:"aggregate-prefix-match" module:"nokia-conf" yangPresence:"true"`
	ClassForwarding             E_NokiaConf_Configure_Groups_Group_Router_Ldp_ClassForwarding        `path:"class-forwarding" module:"nokia-conf"`
	ConsiderSystemIpInGep       *bool                                                                `path:"consider-system-ip-in-gep" module:"nokia-conf"`
	EgressStatistics            *NokiaConf_Configure_Groups_Group_Router_Ldp_EgressStatistics        `path:"egress-statistics" module:"nokia-conf"`
	EntropyLabelCapability      *bool                                                                `path:"entropy-label-capability" module:"nokia-conf"`
	ExportPolicy                []string                                                             `path:"export-policy" module:"nokia-conf"`
	ExportTunnelTable           []string                                                             `path:"export-tunnel-table" module:"nokia-conf"`
	FastReroute                 *NokiaConf_Configure_Groups_Group_Router_Ldp_FastReroute             `path:"fast-reroute" module:"nokia-conf" yangPresence:"true"`
	FecOriginate                map[string]*NokiaConf_Configure_Groups_Group_Router_Ldp_FecOriginate `path:"fec-originate" module:"nokia-conf"`
	GenerateBasicFecOnly        *bool                                                                `path:"generate-basic-fec-only" module:"nokia-conf"`
	GracefulRestart             *NokiaConf_Configure_Groups_Group_Router_Ldp_GracefulRestart         `path:"graceful-restart" module:"nokia-conf"`
	ImplicitNullLabel           *bool                                                                `path:"implicit-null-label" module:"nokia-conf"`
	ImportMcastPolicy           []string                                                             `path:"import-mcast-policy" module:"nokia-conf"`
	ImportPmsiRoutes            *NokiaConf_Configure_Groups_Group_Router_Ldp_ImportPmsiRoutes        `path:"import-pmsi-routes" module:"nokia-conf"`
	ImportPolicy                []string                                                             `path:"import-policy" module:"nokia-conf"`
	ImportTunnelTable           []string                                                             `path:"import-tunnel-table" module:"nokia-conf"`
	InterfaceParameters         *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters     `path:"interface-parameters" module:"nokia-conf"`
	LabelWithdrawalDelay        *uint32                                                              `path:"label-withdrawal-delay" module:"nokia-conf"`
	LdpShortcut                 *NokiaConf_Configure_Groups_Group_Router_Ldp_LdpShortcut             `path:"ldp-shortcut" module:"nokia-conf"`
	LegacyIpv4LsrInterop        *bool                                                                `path:"legacy-ipv4-lsr-interop" module:"nokia-conf"`
	LspBfd                      map[string]*NokiaConf_Configure_Groups_Group_Router_Ldp_LspBfd       `path:"lsp-bfd" module:"nokia-conf"`
	MaxEcmpRoutes               *uint32                                                              `path:"max-ecmp-routes" module:"nokia-conf"`
	McastUpstreamAsbrFrr        *bool                                                                `path:"mcast-upstream-asbr-frr" module:"nokia-conf"`
	McastUpstreamFrr            *bool                                                                `path:"mcast-upstream-frr" module:"nokia-conf"`
	MpMbbTime                   *uint32                                                              `path:"mp-mbb-time" module:"nokia-conf"`
	PreferMcastTunnelInTunnel   *bool                                                                `path:"prefer-mcast-tunnel-in-tunnel" module:"nokia-conf"`
	PreferProtocolStitching     *bool                                                                `path:"prefer-protocol-stitching" module:"nokia-conf"`
	PreferTransportFrr          *bool                                                                `path:"prefer-transport-frr" module:"nokia-conf"`
	PreferTunnelInTunnel        *bool                                                                `path:"prefer-tunnel-in-tunnel" module:"nokia-conf"`
	ResolveRootUsing            E_NokiaConf_Configure_Groups_Group_Router_Ldp_ResolveRootUsing       `path:"resolve-root-using" module:"nokia-conf"`
	SessionParameters           *NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters       `path:"session-parameters" module:"nokia-conf"`
	ShortcutLocalTtlPropagate   *bool                                                                `path:"shortcut-local-ttl-propagate" module:"nokia-conf"`
	ShortcutTransitTtlPropagate *bool                                                                `path:"shortcut-transit-ttl-propagate" module:"nokia-conf"`
	TargetedSession             *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession         `path:"targeted-session" module:"nokia-conf"`
	TcpSessionParameters        *NokiaConf_Configure_Groups_Group_Router_Ldp_TcpSessionParameters    `path:"tcp-session-parameters" module:"nokia-conf"`
	TunnelDownDampTime          *uint32                                                              `path:"tunnel-down-damp-time" module:"nokia-conf"`
	TunnelTablePref             *uint32                                                              `path:"tunnel-table-pref" module:"nokia-conf"`
	WeightedEcmp                *bool                                                                `path:"weighted-ecmp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ldp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp) IsYANGGoStruct() {}

// NewFecOriginate creates a new entry in the FecOriginate list of the
// NokiaConf_Configure_Groups_Group_Router_Ldp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp) NewFecOriginate(FecPrefix string) (*NokiaConf_Configure_Groups_Group_Router_Ldp_FecOriginate, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FecOriginate == nil {
		t.FecOriginate = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Ldp_FecOriginate)
	}

	key := FecPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.FecOriginate[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list FecOriginate", key)
	}

	t.FecOriginate[key] = &NokiaConf_Configure_Groups_Group_Router_Ldp_FecOriginate{
		FecPrefix: &FecPrefix,
	}

	return t.FecOriginate[key], nil
}

// RenameFecOriginate renames an entry in the list FecOriginate within
// the NokiaConf_Configure_Groups_Group_Router_Ldp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp) RenameFecOriginate(oldK, newK string) error {
	if _, ok := t.FecOriginate[newK]; ok {
		return fmt.Errorf("key %v already exists in FecOriginate", newK)
	}

	e, ok := t.FecOriginate[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in FecOriginate", oldK)
	}
	e.FecPrefix = &newK

	t.FecOriginate[newK] = e
	delete(t.FecOriginate, oldK)
	return nil
}

// GetOrCreateFecOriginate retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ldp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp) GetOrCreateFecOriginate(FecPrefix string) *NokiaConf_Configure_Groups_Group_Router_Ldp_FecOriginate {

	key := FecPrefix

	if v, ok := t.FecOriginate[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFecOriginate(FecPrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFecOriginate got unexpected error: %v", err))
	}
	return v
}

// GetFecOriginate retrieves the value with the specified key from
// the FecOriginate map field of NokiaConf_Configure_Groups_Group_Router_Ldp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp) GetFecOriginate(FecPrefix string) *NokiaConf_Configure_Groups_Group_Router_Ldp_FecOriginate {

	if t == nil {
		return nil
	}

	key := FecPrefix

	if lm, ok := t.FecOriginate[key]; ok {
		return lm
	}
	return nil
}

// DeleteFecOriginate deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ldp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp) DeleteFecOriginate(FecPrefix string) {
	key := FecPrefix

	delete(t.FecOriginate, key)
}

// AppendFecOriginate appends the supplied NokiaConf_Configure_Groups_Group_Router_Ldp_FecOriginate struct to the
// list FecOriginate of NokiaConf_Configure_Groups_Group_Router_Ldp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Ldp_FecOriginate already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp) AppendFecOriginate(v *NokiaConf_Configure_Groups_Group_Router_Ldp_FecOriginate) error {
	if v.FecPrefix == nil {
		return fmt.Errorf("invalid nil key received for FecPrefix")
	}

	key := *v.FecPrefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FecOriginate == nil {
		t.FecOriginate = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Ldp_FecOriginate)
	}

	if _, ok := t.FecOriginate[key]; ok {
		return fmt.Errorf("duplicate key for list FecOriginate %v", key)
	}

	t.FecOriginate[key] = v
	return nil
}

// NewLspBfd creates a new entry in the LspBfd list of the
// NokiaConf_Configure_Groups_Group_Router_Ldp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp) NewLspBfd(PrefixList string) (*NokiaConf_Configure_Groups_Group_Router_Ldp_LspBfd, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LspBfd == nil {
		t.LspBfd = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Ldp_LspBfd)
	}

	key := PrefixList

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.LspBfd[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list LspBfd", key)
	}

	t.LspBfd[key] = &NokiaConf_Configure_Groups_Group_Router_Ldp_LspBfd{
		PrefixList: &PrefixList,
	}

	return t.LspBfd[key], nil
}

// RenameLspBfd renames an entry in the list LspBfd within
// the NokiaConf_Configure_Groups_Group_Router_Ldp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp) RenameLspBfd(oldK, newK string) error {
	if _, ok := t.LspBfd[newK]; ok {
		return fmt.Errorf("key %v already exists in LspBfd", newK)
	}

	e, ok := t.LspBfd[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in LspBfd", oldK)
	}
	e.PrefixList = &newK

	t.LspBfd[newK] = e
	delete(t.LspBfd, oldK)
	return nil
}

// GetOrCreateLspBfd retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ldp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp) GetOrCreateLspBfd(PrefixList string) *NokiaConf_Configure_Groups_Group_Router_Ldp_LspBfd {

	key := PrefixList

	if v, ok := t.LspBfd[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLspBfd(PrefixList)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLspBfd got unexpected error: %v", err))
	}
	return v
}

// GetLspBfd retrieves the value with the specified key from
// the LspBfd map field of NokiaConf_Configure_Groups_Group_Router_Ldp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp) GetLspBfd(PrefixList string) *NokiaConf_Configure_Groups_Group_Router_Ldp_LspBfd {

	if t == nil {
		return nil
	}

	key := PrefixList

	if lm, ok := t.LspBfd[key]; ok {
		return lm
	}
	return nil
}

// DeleteLspBfd deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ldp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp) DeleteLspBfd(PrefixList string) {
	key := PrefixList

	delete(t.LspBfd, key)
}

// AppendLspBfd appends the supplied NokiaConf_Configure_Groups_Group_Router_Ldp_LspBfd struct to the
// list LspBfd of NokiaConf_Configure_Groups_Group_Router_Ldp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Ldp_LspBfd already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp) AppendLspBfd(v *NokiaConf_Configure_Groups_Group_Router_Ldp_LspBfd) error {
	if v.PrefixList == nil {
		return fmt.Errorf("invalid nil key received for PrefixList")
	}

	key := *v.PrefixList

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LspBfd == nil {
		t.LspBfd = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Ldp_LspBfd)
	}

	if _, ok := t.LspBfd[key]; ok {
		return fmt.Errorf("duplicate key for list LspBfd %v", key)
	}

	t.LspBfd[key] = v
	return nil
}

// GetOrCreateAggregatePrefixMatch retrieves the value of the AggregatePrefixMatch field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp) GetOrCreateAggregatePrefixMatch() *NokiaConf_Configure_Groups_Group_Router_Ldp_AggregatePrefixMatch {
	if t.AggregatePrefixMatch != nil {
		return t.AggregatePrefixMatch
	}
	t.AggregatePrefixMatch = &NokiaConf_Configure_Groups_Group_Router_Ldp_AggregatePrefixMatch{}
	return t.AggregatePrefixMatch
}

// GetOrCreateEgressStatistics retrieves the value of the EgressStatistics field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp) GetOrCreateEgressStatistics() *NokiaConf_Configure_Groups_Group_Router_Ldp_EgressStatistics {
	if t.EgressStatistics != nil {
		return t.EgressStatistics
	}
	t.EgressStatistics = &NokiaConf_Configure_Groups_Group_Router_Ldp_EgressStatistics{}
	return t.EgressStatistics
}

// GetOrCreateFastReroute retrieves the value of the FastReroute field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp) GetOrCreateFastReroute() *NokiaConf_Configure_Groups_Group_Router_Ldp_FastReroute {
	if t.FastReroute != nil {
		return t.FastReroute
	}
	t.FastReroute = &NokiaConf_Configure_Groups_Group_Router_Ldp_FastReroute{}
	return t.FastReroute
}

// GetOrCreateGracefulRestart retrieves the value of the GracefulRestart field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp) GetOrCreateGracefulRestart() *NokiaConf_Configure_Groups_Group_Router_Ldp_GracefulRestart {
	if t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	t.GracefulRestart = &NokiaConf_Configure_Groups_Group_Router_Ldp_GracefulRestart{}
	return t.GracefulRestart
}

// GetOrCreateImportPmsiRoutes retrieves the value of the ImportPmsiRoutes field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp) GetOrCreateImportPmsiRoutes() *NokiaConf_Configure_Groups_Group_Router_Ldp_ImportPmsiRoutes {
	if t.ImportPmsiRoutes != nil {
		return t.ImportPmsiRoutes
	}
	t.ImportPmsiRoutes = &NokiaConf_Configure_Groups_Group_Router_Ldp_ImportPmsiRoutes{}
	return t.ImportPmsiRoutes
}

// GetOrCreateInterfaceParameters retrieves the value of the InterfaceParameters field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp) GetOrCreateInterfaceParameters() *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters {
	if t.InterfaceParameters != nil {
		return t.InterfaceParameters
	}
	t.InterfaceParameters = &NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters{}
	return t.InterfaceParameters
}

// GetOrCreateLdpShortcut retrieves the value of the LdpShortcut field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp) GetOrCreateLdpShortcut() *NokiaConf_Configure_Groups_Group_Router_Ldp_LdpShortcut {
	if t.LdpShortcut != nil {
		return t.LdpShortcut
	}
	t.LdpShortcut = &NokiaConf_Configure_Groups_Group_Router_Ldp_LdpShortcut{}
	return t.LdpShortcut
}

// GetOrCreateSessionParameters retrieves the value of the SessionParameters field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp) GetOrCreateSessionParameters() *NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters {
	if t.SessionParameters != nil {
		return t.SessionParameters
	}
	t.SessionParameters = &NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters{}
	return t.SessionParameters
}

// GetOrCreateTargetedSession retrieves the value of the TargetedSession field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp) GetOrCreateTargetedSession() *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession {
	if t.TargetedSession != nil {
		return t.TargetedSession
	}
	t.TargetedSession = &NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession{}
	return t.TargetedSession
}

// GetOrCreateTcpSessionParameters retrieves the value of the TcpSessionParameters field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp) GetOrCreateTcpSessionParameters() *NokiaConf_Configure_Groups_Group_Router_Ldp_TcpSessionParameters {
	if t.TcpSessionParameters != nil {
		return t.TcpSessionParameters
	}
	t.TcpSessionParameters = &NokiaConf_Configure_Groups_Group_Router_Ldp_TcpSessionParameters{}
	return t.TcpSessionParameters
}

// GetAggregatePrefixMatch returns the value of the AggregatePrefixMatch struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ldp. If the receiver or the field AggregatePrefixMatch is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp) GetAggregatePrefixMatch() *NokiaConf_Configure_Groups_Group_Router_Ldp_AggregatePrefixMatch {
	if t != nil && t.AggregatePrefixMatch != nil {
		return t.AggregatePrefixMatch
	}
	return nil
}

// GetEgressStatistics returns the value of the EgressStatistics struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ldp. If the receiver or the field EgressStatistics is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp) GetEgressStatistics() *NokiaConf_Configure_Groups_Group_Router_Ldp_EgressStatistics {
	if t != nil && t.EgressStatistics != nil {
		return t.EgressStatistics
	}
	return nil
}

// GetFastReroute returns the value of the FastReroute struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ldp. If the receiver or the field FastReroute is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp) GetFastReroute() *NokiaConf_Configure_Groups_Group_Router_Ldp_FastReroute {
	if t != nil && t.FastReroute != nil {
		return t.FastReroute
	}
	return nil
}

// GetGracefulRestart returns the value of the GracefulRestart struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ldp. If the receiver or the field GracefulRestart is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp) GetGracefulRestart() *NokiaConf_Configure_Groups_Group_Router_Ldp_GracefulRestart {
	if t != nil && t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	return nil
}

// GetImportPmsiRoutes returns the value of the ImportPmsiRoutes struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ldp. If the receiver or the field ImportPmsiRoutes is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp) GetImportPmsiRoutes() *NokiaConf_Configure_Groups_Group_Router_Ldp_ImportPmsiRoutes {
	if t != nil && t.ImportPmsiRoutes != nil {
		return t.ImportPmsiRoutes
	}
	return nil
}

// GetInterfaceParameters returns the value of the InterfaceParameters struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ldp. If the receiver or the field InterfaceParameters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp) GetInterfaceParameters() *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters {
	if t != nil && t.InterfaceParameters != nil {
		return t.InterfaceParameters
	}
	return nil
}

// GetLdpShortcut returns the value of the LdpShortcut struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ldp. If the receiver or the field LdpShortcut is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp) GetLdpShortcut() *NokiaConf_Configure_Groups_Group_Router_Ldp_LdpShortcut {
	if t != nil && t.LdpShortcut != nil {
		return t.LdpShortcut
	}
	return nil
}

// GetSessionParameters returns the value of the SessionParameters struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ldp. If the receiver or the field SessionParameters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp) GetSessionParameters() *NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters {
	if t != nil && t.SessionParameters != nil {
		return t.SessionParameters
	}
	return nil
}

// GetTargetedSession returns the value of the TargetedSession struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ldp. If the receiver or the field TargetedSession is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp) GetTargetedSession() *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession {
	if t != nil && t.TargetedSession != nil {
		return t.TargetedSession
	}
	return nil
}

// GetTcpSessionParameters returns the value of the TcpSessionParameters struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ldp. If the receiver or the field TcpSessionParameters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp) GetTcpSessionParameters() *NokiaConf_Configure_Groups_Group_Router_Ldp_TcpSessionParameters {
	if t != nil && t.TcpSessionParameters != nil {
		return t.TcpSessionParameters
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Ldp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetClassForwarding retrieves the value of the leaf ClassForwarding from the NokiaConf_Configure_Groups_Group_Router_Ldp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClassForwarding is set, it can
// safely use t.GetClassForwarding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClassForwarding == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp) GetClassForwarding() E_NokiaConf_Configure_Groups_Group_Router_Ldp_ClassForwarding {
	if t == nil || t.ClassForwarding == 0 {
		return 0
	}
	return t.ClassForwarding
}

// GetConsiderSystemIpInGep retrieves the value of the leaf ConsiderSystemIpInGep from the NokiaConf_Configure_Groups_Group_Router_Ldp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConsiderSystemIpInGep is set, it can
// safely use t.GetConsiderSystemIpInGep() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConsiderSystemIpInGep == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp) GetConsiderSystemIpInGep() bool {
	if t == nil || t.ConsiderSystemIpInGep == nil {
		return false
	}
	return *t.ConsiderSystemIpInGep
}

// GetEntropyLabelCapability retrieves the value of the leaf EntropyLabelCapability from the NokiaConf_Configure_Groups_Group_Router_Ldp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntropyLabelCapability is set, it can
// safely use t.GetEntropyLabelCapability() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntropyLabelCapability == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp) GetEntropyLabelCapability() bool {
	if t == nil || t.EntropyLabelCapability == nil {
		return false
	}
	return *t.EntropyLabelCapability
}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the NokiaConf_Configure_Groups_Group_Router_Ldp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPolicy is set, it can
// safely use t.GetExportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp) GetExportPolicy() []string {
	if t == nil || t.ExportPolicy == nil {
		return nil
	}
	return t.ExportPolicy
}

// GetExportTunnelTable retrieves the value of the leaf ExportTunnelTable from the NokiaConf_Configure_Groups_Group_Router_Ldp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportTunnelTable is set, it can
// safely use t.GetExportTunnelTable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportTunnelTable == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp) GetExportTunnelTable() []string {
	if t == nil || t.ExportTunnelTable == nil {
		return nil
	}
	return t.ExportTunnelTable
}

// GetGenerateBasicFecOnly retrieves the value of the leaf GenerateBasicFecOnly from the NokiaConf_Configure_Groups_Group_Router_Ldp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GenerateBasicFecOnly is set, it can
// safely use t.GetGenerateBasicFecOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GenerateBasicFecOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp) GetGenerateBasicFecOnly() bool {
	if t == nil || t.GenerateBasicFecOnly == nil {
		return false
	}
	return *t.GenerateBasicFecOnly
}

// GetImplicitNullLabel retrieves the value of the leaf ImplicitNullLabel from the NokiaConf_Configure_Groups_Group_Router_Ldp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImplicitNullLabel is set, it can
// safely use t.GetImplicitNullLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImplicitNullLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp) GetImplicitNullLabel() bool {
	if t == nil || t.ImplicitNullLabel == nil {
		return false
	}
	return *t.ImplicitNullLabel
}

// GetImportMcastPolicy retrieves the value of the leaf ImportMcastPolicy from the NokiaConf_Configure_Groups_Group_Router_Ldp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportMcastPolicy is set, it can
// safely use t.GetImportMcastPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportMcastPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp) GetImportMcastPolicy() []string {
	if t == nil || t.ImportMcastPolicy == nil {
		return nil
	}
	return t.ImportMcastPolicy
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Groups_Group_Router_Ldp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp) GetImportPolicy() []string {
	if t == nil || t.ImportPolicy == nil {
		return nil
	}
	return t.ImportPolicy
}

// GetImportTunnelTable retrieves the value of the leaf ImportTunnelTable from the NokiaConf_Configure_Groups_Group_Router_Ldp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportTunnelTable is set, it can
// safely use t.GetImportTunnelTable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportTunnelTable == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp) GetImportTunnelTable() []string {
	if t == nil || t.ImportTunnelTable == nil {
		return nil
	}
	return t.ImportTunnelTable
}

// GetLabelWithdrawalDelay retrieves the value of the leaf LabelWithdrawalDelay from the NokiaConf_Configure_Groups_Group_Router_Ldp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelWithdrawalDelay is set, it can
// safely use t.GetLabelWithdrawalDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelWithdrawalDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp) GetLabelWithdrawalDelay() uint32 {
	if t == nil || t.LabelWithdrawalDelay == nil {
		return 0
	}
	return *t.LabelWithdrawalDelay
}

// GetLegacyIpv4LsrInterop retrieves the value of the leaf LegacyIpv4LsrInterop from the NokiaConf_Configure_Groups_Group_Router_Ldp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LegacyIpv4LsrInterop is set, it can
// safely use t.GetLegacyIpv4LsrInterop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LegacyIpv4LsrInterop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp) GetLegacyIpv4LsrInterop() bool {
	if t == nil || t.LegacyIpv4LsrInterop == nil {
		return false
	}
	return *t.LegacyIpv4LsrInterop
}

// GetMaxEcmpRoutes retrieves the value of the leaf MaxEcmpRoutes from the NokiaConf_Configure_Groups_Group_Router_Ldp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxEcmpRoutes is set, it can
// safely use t.GetMaxEcmpRoutes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxEcmpRoutes == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp) GetMaxEcmpRoutes() uint32 {
	if t == nil || t.MaxEcmpRoutes == nil {
		return 32
	}
	return *t.MaxEcmpRoutes
}

// GetMcastUpstreamAsbrFrr retrieves the value of the leaf McastUpstreamAsbrFrr from the NokiaConf_Configure_Groups_Group_Router_Ldp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McastUpstreamAsbrFrr is set, it can
// safely use t.GetMcastUpstreamAsbrFrr() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McastUpstreamAsbrFrr == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp) GetMcastUpstreamAsbrFrr() bool {
	if t == nil || t.McastUpstreamAsbrFrr == nil {
		return false
	}
	return *t.McastUpstreamAsbrFrr
}

// GetMcastUpstreamFrr retrieves the value of the leaf McastUpstreamFrr from the NokiaConf_Configure_Groups_Group_Router_Ldp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McastUpstreamFrr is set, it can
// safely use t.GetMcastUpstreamFrr() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McastUpstreamFrr == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp) GetMcastUpstreamFrr() bool {
	if t == nil || t.McastUpstreamFrr == nil {
		return false
	}
	return *t.McastUpstreamFrr
}

// GetMpMbbTime retrieves the value of the leaf MpMbbTime from the NokiaConf_Configure_Groups_Group_Router_Ldp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MpMbbTime is set, it can
// safely use t.GetMpMbbTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MpMbbTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp) GetMpMbbTime() uint32 {
	if t == nil || t.MpMbbTime == nil {
		return 3
	}
	return *t.MpMbbTime
}

// GetPreferMcastTunnelInTunnel retrieves the value of the leaf PreferMcastTunnelInTunnel from the NokiaConf_Configure_Groups_Group_Router_Ldp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreferMcastTunnelInTunnel is set, it can
// safely use t.GetPreferMcastTunnelInTunnel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreferMcastTunnelInTunnel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp) GetPreferMcastTunnelInTunnel() bool {
	if t == nil || t.PreferMcastTunnelInTunnel == nil {
		return true
	}
	return *t.PreferMcastTunnelInTunnel
}

// GetPreferProtocolStitching retrieves the value of the leaf PreferProtocolStitching from the NokiaConf_Configure_Groups_Group_Router_Ldp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreferProtocolStitching is set, it can
// safely use t.GetPreferProtocolStitching() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreferProtocolStitching == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp) GetPreferProtocolStitching() bool {
	if t == nil || t.PreferProtocolStitching == nil {
		return false
	}
	return *t.PreferProtocolStitching
}

// GetPreferTransportFrr retrieves the value of the leaf PreferTransportFrr from the NokiaConf_Configure_Groups_Group_Router_Ldp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreferTransportFrr is set, it can
// safely use t.GetPreferTransportFrr() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreferTransportFrr == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp) GetPreferTransportFrr() bool {
	if t == nil || t.PreferTransportFrr == nil {
		return false
	}
	return *t.PreferTransportFrr
}

// GetPreferTunnelInTunnel retrieves the value of the leaf PreferTunnelInTunnel from the NokiaConf_Configure_Groups_Group_Router_Ldp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreferTunnelInTunnel is set, it can
// safely use t.GetPreferTunnelInTunnel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreferTunnelInTunnel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp) GetPreferTunnelInTunnel() bool {
	if t == nil || t.PreferTunnelInTunnel == nil {
		return true
	}
	return *t.PreferTunnelInTunnel
}

// GetResolveRootUsing retrieves the value of the leaf ResolveRootUsing from the NokiaConf_Configure_Groups_Group_Router_Ldp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ResolveRootUsing is set, it can
// safely use t.GetResolveRootUsing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ResolveRootUsing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp) GetResolveRootUsing() E_NokiaConf_Configure_Groups_Group_Router_Ldp_ResolveRootUsing {
	if t == nil || t.ResolveRootUsing == 0 {
		return NokiaConf_Configure_Groups_Group_Router_Ldp_ResolveRootUsing_ucast_rtm
	}
	return t.ResolveRootUsing
}

// GetShortcutLocalTtlPropagate retrieves the value of the leaf ShortcutLocalTtlPropagate from the NokiaConf_Configure_Groups_Group_Router_Ldp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ShortcutLocalTtlPropagate is set, it can
// safely use t.GetShortcutLocalTtlPropagate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ShortcutLocalTtlPropagate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp) GetShortcutLocalTtlPropagate() bool {
	if t == nil || t.ShortcutLocalTtlPropagate == nil {
		return true
	}
	return *t.ShortcutLocalTtlPropagate
}

// GetShortcutTransitTtlPropagate retrieves the value of the leaf ShortcutTransitTtlPropagate from the NokiaConf_Configure_Groups_Group_Router_Ldp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ShortcutTransitTtlPropagate is set, it can
// safely use t.GetShortcutTransitTtlPropagate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ShortcutTransitTtlPropagate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp) GetShortcutTransitTtlPropagate() bool {
	if t == nil || t.ShortcutTransitTtlPropagate == nil {
		return true
	}
	return *t.ShortcutTransitTtlPropagate
}

// GetTunnelDownDampTime retrieves the value of the leaf TunnelDownDampTime from the NokiaConf_Configure_Groups_Group_Router_Ldp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TunnelDownDampTime is set, it can
// safely use t.GetTunnelDownDampTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TunnelDownDampTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp) GetTunnelDownDampTime() uint32 {
	if t == nil || t.TunnelDownDampTime == nil {
		return 3
	}
	return *t.TunnelDownDampTime
}

// GetTunnelTablePref retrieves the value of the leaf TunnelTablePref from the NokiaConf_Configure_Groups_Group_Router_Ldp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TunnelTablePref is set, it can
// safely use t.GetTunnelTablePref() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TunnelTablePref == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp) GetTunnelTablePref() uint32 {
	if t == nil || t.TunnelTablePref == nil {
		return 9
	}
	return *t.TunnelTablePref
}

// GetWeightedEcmp retrieves the value of the leaf WeightedEcmp from the NokiaConf_Configure_Groups_Group_Router_Ldp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WeightedEcmp is set, it can
// safely use t.GetWeightedEcmp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WeightedEcmp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp) GetWeightedEcmp() bool {
	if t == nil || t.WeightedEcmp == nil {
		return false
	}
	return *t.WeightedEcmp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ldp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.ConsiderSystemIpInGep == nil {
		var v bool = false
		t.ConsiderSystemIpInGep = &v
	}
	if t.EntropyLabelCapability == nil {
		var v bool = false
		t.EntropyLabelCapability = &v
	}
	if t.GenerateBasicFecOnly == nil {
		var v bool = false
		t.GenerateBasicFecOnly = &v
	}
	if t.ImplicitNullLabel == nil {
		var v bool = false
		t.ImplicitNullLabel = &v
	}
	if t.LegacyIpv4LsrInterop == nil {
		var v bool = false
		t.LegacyIpv4LsrInterop = &v
	}
	if t.MaxEcmpRoutes == nil {
		var v uint32 = 32
		t.MaxEcmpRoutes = &v
	}
	if t.McastUpstreamAsbrFrr == nil {
		var v bool = false
		t.McastUpstreamAsbrFrr = &v
	}
	if t.McastUpstreamFrr == nil {
		var v bool = false
		t.McastUpstreamFrr = &v
	}
	if t.MpMbbTime == nil {
		var v uint32 = 3
		t.MpMbbTime = &v
	}
	if t.PreferMcastTunnelInTunnel == nil {
		var v bool = true
		t.PreferMcastTunnelInTunnel = &v
	}
	if t.PreferProtocolStitching == nil {
		var v bool = false
		t.PreferProtocolStitching = &v
	}
	if t.PreferTransportFrr == nil {
		var v bool = false
		t.PreferTransportFrr = &v
	}
	if t.PreferTunnelInTunnel == nil {
		var v bool = true
		t.PreferTunnelInTunnel = &v
	}
	if t.ResolveRootUsing == 0 {
		t.ResolveRootUsing = NokiaConf_Configure_Groups_Group_Router_Ldp_ResolveRootUsing_ucast_rtm
	}
	if t.ShortcutLocalTtlPropagate == nil {
		var v bool = true
		t.ShortcutLocalTtlPropagate = &v
	}
	if t.ShortcutTransitTtlPropagate == nil {
		var v bool = true
		t.ShortcutTransitTtlPropagate = &v
	}
	if t.TunnelDownDampTime == nil {
		var v uint32 = 3
		t.TunnelDownDampTime = &v
	}
	if t.TunnelTablePref == nil {
		var v uint32 = 9
		t.TunnelTablePref = &v
	}
	if t.WeightedEcmp == nil {
		var v bool = false
		t.WeightedEcmp = &v
	}
	t.AggregatePrefixMatch.PopulateDefaults()
	t.EgressStatistics.PopulateDefaults()
	t.FastReroute.PopulateDefaults()
	t.GracefulRestart.PopulateDefaults()
	t.ImportPmsiRoutes.PopulateDefaults()
	t.InterfaceParameters.PopulateDefaults()
	t.LdpShortcut.PopulateDefaults()
	t.SessionParameters.PopulateDefaults()
	t.TargetedSession.PopulateDefaults()
	t.TcpSessionParameters.PopulateDefaults()
	for _, e := range t.FecOriginate {
		e.PopulateDefaults()
	}
	for _, e := range t.LspBfd {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ldp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ldp.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ldp_AggregatePrefixMatch represents the /nokia-conf/configure/groups/group/router/ldp/aggregate-prefix-match YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ldp_AggregatePrefixMatch struct {
	AdminState    E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	PrefixExclude []string                    `path:"prefix-exclude" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ldp_AggregatePrefixMatch implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_AggregatePrefixMatch) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Ldp_AggregatePrefixMatch
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_AggregatePrefixMatch) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetPrefixExclude retrieves the value of the leaf PrefixExclude from the NokiaConf_Configure_Groups_Group_Router_Ldp_AggregatePrefixMatch
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixExclude is set, it can
// safely use t.GetPrefixExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_AggregatePrefixMatch) GetPrefixExclude() []string {
	if t == nil || t.PrefixExclude == nil {
		return nil
	}
	return t.PrefixExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ldp_AggregatePrefixMatch
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_AggregatePrefixMatch) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_AggregatePrefixMatch) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ldp_AggregatePrefixMatch"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_AggregatePrefixMatch) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_AggregatePrefixMatch) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ldp_AggregatePrefixMatch.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_AggregatePrefixMatch) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ldp_EgressStatistics represents the /nokia-conf/configure/groups/group/router/ldp/egress-statistics YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ldp_EgressStatistics struct {
	FecPrefix map[string]*NokiaConf_Configure_Groups_Group_Router_Ldp_EgressStatistics_FecPrefix `path:"fec-prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ldp_EgressStatistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_EgressStatistics) IsYANGGoStruct() {}

// NewFecPrefix creates a new entry in the FecPrefix list of the
// NokiaConf_Configure_Groups_Group_Router_Ldp_EgressStatistics struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_EgressStatistics) NewFecPrefix(IpPrefix string) (*NokiaConf_Configure_Groups_Group_Router_Ldp_EgressStatistics_FecPrefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FecPrefix == nil {
		t.FecPrefix = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Ldp_EgressStatistics_FecPrefix)
	}

	key := IpPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.FecPrefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list FecPrefix", key)
	}

	t.FecPrefix[key] = &NokiaConf_Configure_Groups_Group_Router_Ldp_EgressStatistics_FecPrefix{
		IpPrefix: &IpPrefix,
	}

	return t.FecPrefix[key], nil
}

// RenameFecPrefix renames an entry in the list FecPrefix within
// the NokiaConf_Configure_Groups_Group_Router_Ldp_EgressStatistics struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_EgressStatistics) RenameFecPrefix(oldK, newK string) error {
	if _, ok := t.FecPrefix[newK]; ok {
		return fmt.Errorf("key %v already exists in FecPrefix", newK)
	}

	e, ok := t.FecPrefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in FecPrefix", oldK)
	}
	e.IpPrefix = &newK

	t.FecPrefix[newK] = e
	delete(t.FecPrefix, oldK)
	return nil
}

// GetOrCreateFecPrefix retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ldp_EgressStatistics. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_EgressStatistics) GetOrCreateFecPrefix(IpPrefix string) *NokiaConf_Configure_Groups_Group_Router_Ldp_EgressStatistics_FecPrefix {

	key := IpPrefix

	if v, ok := t.FecPrefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFecPrefix(IpPrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFecPrefix got unexpected error: %v", err))
	}
	return v
}

// GetFecPrefix retrieves the value with the specified key from
// the FecPrefix map field of NokiaConf_Configure_Groups_Group_Router_Ldp_EgressStatistics. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_EgressStatistics) GetFecPrefix(IpPrefix string) *NokiaConf_Configure_Groups_Group_Router_Ldp_EgressStatistics_FecPrefix {

	if t == nil {
		return nil
	}

	key := IpPrefix

	if lm, ok := t.FecPrefix[key]; ok {
		return lm
	}
	return nil
}

// DeleteFecPrefix deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ldp_EgressStatistics. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_EgressStatistics) DeleteFecPrefix(IpPrefix string) {
	key := IpPrefix

	delete(t.FecPrefix, key)
}

// AppendFecPrefix appends the supplied NokiaConf_Configure_Groups_Group_Router_Ldp_EgressStatistics_FecPrefix struct to the
// list FecPrefix of NokiaConf_Configure_Groups_Group_Router_Ldp_EgressStatistics. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Ldp_EgressStatistics_FecPrefix already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_EgressStatistics) AppendFecPrefix(v *NokiaConf_Configure_Groups_Group_Router_Ldp_EgressStatistics_FecPrefix) error {
	if v.IpPrefix == nil {
		return fmt.Errorf("invalid nil key received for IpPrefix")
	}

	key := *v.IpPrefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FecPrefix == nil {
		t.FecPrefix = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Ldp_EgressStatistics_FecPrefix)
	}

	if _, ok := t.FecPrefix[key]; ok {
		return fmt.Errorf("duplicate key for list FecPrefix %v", key)
	}

	t.FecPrefix[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ldp_EgressStatistics
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_EgressStatistics) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.FecPrefix {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_EgressStatistics) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ldp_EgressStatistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_EgressStatistics) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_EgressStatistics) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ldp_EgressStatistics.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_EgressStatistics) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ldp_EgressStatistics_FecPrefix represents the /nokia-conf/configure/groups/group/router/ldp/egress-statistics/fec-prefix YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ldp_EgressStatistics_FecPrefix struct {
	AccountingPolicy *uint32                     `path:"accounting-policy" module:"nokia-conf"`
	AdminState       E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	CollectStats     *bool                       `path:"collect-stats" module:"nokia-conf"`
	IpPrefix         *string                     `path:"ip-prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ldp_EgressStatistics_FecPrefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_EgressStatistics_FecPrefix) IsYANGGoStruct() {}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Groups_Group_Router_Ldp_EgressStatistics_FecPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_EgressStatistics_FecPrefix) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Ldp_EgressStatistics_FecPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_EgressStatistics_FecPrefix) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_Groups_Group_Router_Ldp_EgressStatistics_FecPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_EgressStatistics_FecPrefix) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_Groups_Group_Router_Ldp_EgressStatistics_FecPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_EgressStatistics_FecPrefix) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ldp_EgressStatistics_FecPrefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_EgressStatistics_FecPrefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Ldp_EgressStatistics_FecPrefix struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_EgressStatistics_FecPrefix) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	return map[string]interface{}{
		"ip-prefix": *t.IpPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_EgressStatistics_FecPrefix) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ldp_EgressStatistics_FecPrefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_EgressStatistics_FecPrefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_EgressStatistics_FecPrefix) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ldp_EgressStatistics_FecPrefix.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_EgressStatistics_FecPrefix) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ldp_FastReroute represents the /nokia-conf/configure/groups/group/router/ldp/fast-reroute YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ldp_FastReroute struct {
	BackupSrTunnel *bool `path:"backup-sr-tunnel" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ldp_FastReroute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_FastReroute) IsYANGGoStruct() {}

// GetBackupSrTunnel retrieves the value of the leaf BackupSrTunnel from the NokiaConf_Configure_Groups_Group_Router_Ldp_FastReroute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BackupSrTunnel is set, it can
// safely use t.GetBackupSrTunnel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BackupSrTunnel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_FastReroute) GetBackupSrTunnel() bool {
	if t == nil || t.BackupSrTunnel == nil {
		return false
	}
	return *t.BackupSrTunnel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ldp_FastReroute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_FastReroute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BackupSrTunnel == nil {
		var v bool = false
		t.BackupSrTunnel = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_FastReroute) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ldp_FastReroute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_FastReroute) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_FastReroute) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ldp_FastReroute.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_FastReroute) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ldp_FecOriginate represents the /nokia-conf/configure/groups/group/router/ldp/fec-originate YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ldp_FecOriginate struct {
	AdvertisedLabel *uint32 `path:"advertised-label" module:"nokia-conf"`
	FecPrefix       *string `path:"fec-prefix" module:"nokia-conf"`
	Interface       *string `path:"interface" module:"nokia-conf"`
	NextHop         *string `path:"next-hop" module:"nokia-conf"`
	Pop             *bool   `path:"pop" module:"nokia-conf"`
	SwapLabel       *uint32 `path:"swap-label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ldp_FecOriginate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_FecOriginate) IsYANGGoStruct() {}

// GetAdvertisedLabel retrieves the value of the leaf AdvertisedLabel from the NokiaConf_Configure_Groups_Group_Router_Ldp_FecOriginate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertisedLabel is set, it can
// safely use t.GetAdvertisedLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertisedLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_FecOriginate) GetAdvertisedLabel() uint32 {
	if t == nil || t.AdvertisedLabel == nil {
		return 0
	}
	return *t.AdvertisedLabel
}

// GetFecPrefix retrieves the value of the leaf FecPrefix from the NokiaConf_Configure_Groups_Group_Router_Ldp_FecOriginate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FecPrefix is set, it can
// safely use t.GetFecPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FecPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_FecOriginate) GetFecPrefix() string {
	if t == nil || t.FecPrefix == nil {
		return ""
	}
	return *t.FecPrefix
}

// GetInterface retrieves the value of the leaf Interface from the NokiaConf_Configure_Groups_Group_Router_Ldp_FecOriginate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_FecOriginate) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetNextHop retrieves the value of the leaf NextHop from the NokiaConf_Configure_Groups_Group_Router_Ldp_FecOriginate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHop is set, it can
// safely use t.GetNextHop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_FecOriginate) GetNextHop() string {
	if t == nil || t.NextHop == nil {
		return ""
	}
	return *t.NextHop
}

// GetPop retrieves the value of the leaf Pop from the NokiaConf_Configure_Groups_Group_Router_Ldp_FecOriginate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pop is set, it can
// safely use t.GetPop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_FecOriginate) GetPop() bool {
	if t == nil || t.Pop == nil {
		return false
	}
	return *t.Pop
}

// GetSwapLabel retrieves the value of the leaf SwapLabel from the NokiaConf_Configure_Groups_Group_Router_Ldp_FecOriginate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SwapLabel is set, it can
// safely use t.GetSwapLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SwapLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_FecOriginate) GetSwapLabel() uint32 {
	if t == nil || t.SwapLabel == nil {
		return 0
	}
	return *t.SwapLabel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ldp_FecOriginate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_FecOriginate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Ldp_FecOriginate struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_FecOriginate) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.FecPrefix == nil {
		return nil, fmt.Errorf("nil value for key FecPrefix")
	}

	return map[string]interface{}{
		"fec-prefix": *t.FecPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_FecOriginate) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ldp_FecOriginate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_FecOriginate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_FecOriginate) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ldp_FecOriginate.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_FecOriginate) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ldp_GracefulRestart represents the /nokia-conf/configure/groups/group/router/ldp/graceful-restart YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ldp_GracefulRestart struct {
	HelperMode           *bool   `path:"helper-mode" module:"nokia-conf"`
	MaximumRecoveryTime  *uint32 `path:"maximum-recovery-time" module:"nokia-conf"`
	NeighborLivenessTime *uint32 `path:"neighbor-liveness-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ldp_GracefulRestart implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_GracefulRestart) IsYANGGoStruct() {}

// GetHelperMode retrieves the value of the leaf HelperMode from the NokiaConf_Configure_Groups_Group_Router_Ldp_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelperMode is set, it can
// safely use t.GetHelperMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelperMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_GracefulRestart) GetHelperMode() bool {
	if t == nil || t.HelperMode == nil {
		return false
	}
	return *t.HelperMode
}

// GetMaximumRecoveryTime retrieves the value of the leaf MaximumRecoveryTime from the NokiaConf_Configure_Groups_Group_Router_Ldp_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumRecoveryTime is set, it can
// safely use t.GetMaximumRecoveryTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumRecoveryTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_GracefulRestart) GetMaximumRecoveryTime() uint32 {
	if t == nil || t.MaximumRecoveryTime == nil {
		return 120
	}
	return *t.MaximumRecoveryTime
}

// GetNeighborLivenessTime retrieves the value of the leaf NeighborLivenessTime from the NokiaConf_Configure_Groups_Group_Router_Ldp_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NeighborLivenessTime is set, it can
// safely use t.GetNeighborLivenessTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NeighborLivenessTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_GracefulRestart) GetNeighborLivenessTime() uint32 {
	if t == nil || t.NeighborLivenessTime == nil {
		return 120
	}
	return *t.NeighborLivenessTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ldp_GracefulRestart
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_GracefulRestart) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HelperMode == nil {
		var v bool = false
		t.HelperMode = &v
	}
	if t.MaximumRecoveryTime == nil {
		var v uint32 = 120
		t.MaximumRecoveryTime = &v
	}
	if t.NeighborLivenessTime == nil {
		var v uint32 = 120
		t.NeighborLivenessTime = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_GracefulRestart) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ldp_GracefulRestart"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_GracefulRestart) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_GracefulRestart) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ldp_GracefulRestart.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_GracefulRestart) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ldp_ImportPmsiRoutes represents the /nokia-conf/configure/groups/group/router/ldp/import-pmsi-routes YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ldp_ImportPmsiRoutes struct {
	Mvpn                  *bool `path:"mvpn" module:"nokia-conf"`
	MvpnNoExportCommunity *bool `path:"mvpn-no-export-community" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ldp_ImportPmsiRoutes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_ImportPmsiRoutes) IsYANGGoStruct() {}

// GetMvpn retrieves the value of the leaf Mvpn from the NokiaConf_Configure_Groups_Group_Router_Ldp_ImportPmsiRoutes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mvpn is set, it can
// safely use t.GetMvpn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mvpn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_ImportPmsiRoutes) GetMvpn() bool {
	if t == nil || t.Mvpn == nil {
		return false
	}
	return *t.Mvpn
}

// GetMvpnNoExportCommunity retrieves the value of the leaf MvpnNoExportCommunity from the NokiaConf_Configure_Groups_Group_Router_Ldp_ImportPmsiRoutes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MvpnNoExportCommunity is set, it can
// safely use t.GetMvpnNoExportCommunity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MvpnNoExportCommunity == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_ImportPmsiRoutes) GetMvpnNoExportCommunity() bool {
	if t == nil || t.MvpnNoExportCommunity == nil {
		return false
	}
	return *t.MvpnNoExportCommunity
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ldp_ImportPmsiRoutes
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_ImportPmsiRoutes) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mvpn == nil {
		var v bool = false
		t.Mvpn = &v
	}
	if t.MvpnNoExportCommunity == nil {
		var v bool = false
		t.MvpnNoExportCommunity = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_ImportPmsiRoutes) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ldp_ImportPmsiRoutes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_ImportPmsiRoutes) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_ImportPmsiRoutes) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ldp_ImportPmsiRoutes.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_ImportPmsiRoutes) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters represents the /nokia-conf/configure/groups/group/router/ldp/interface-parameters YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters struct {
	Interface map[string]*NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface `path:"interface" module:"nokia-conf"`
	Ipv4      *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv4                 `path:"ipv4" module:"nokia-conf"`
	Ipv6      *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv6                 `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters) NewInterface(IpIntName string) (*NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface)
	}

	key := IpIntName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface{
		IpIntName: &IpIntName,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.IpIntName = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters) GetOrCreateInterface(IpIntName string) *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface {

	key := IpIntName

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(IpIntName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters) GetInterface(IpIntName string) *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface {

	if t == nil {
		return nil
	}

	key := IpIntName

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters) DeleteInterface(IpIntName string) {
	key := IpIntName

	delete(t.Interface, key)
}

// AppendInterface appends the supplied NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface struct to the
// list Interface of NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters) AppendInterface(v *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface) error {
	if v.IpIntName == nil {
		return fmt.Errorf("invalid nil key received for IpIntName")
	}

	key := *v.IpIntName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters) GetOrCreateIpv4() *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters) GetOrCreateIpv6() *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv6{}
	return t.Ipv6
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters) GetIpv4() *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters) GetIpv6() *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface represents the /nokia-conf/configure/groups/group/router/ldp/interface-parameters/interface YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface struct {
	AdminState          E_NokiaTypesSros_AdminState                                                            `path:"admin-state" module:"nokia-conf"`
	BfdLiveness         *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_BfdLiveness `path:"bfd-liveness" module:"nokia-conf"`
	IpIntName           *string                                                                                `path:"ip-int-name" module:"nokia-conf"`
	Ipv4                *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4        `path:"ipv4" module:"nokia-conf" yangPresence:"true"`
	Ipv6                *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6        `path:"ipv6" module:"nokia-conf" yangPresence:"true"`
	LoadBalancingWeight *uint32                                                                                `path:"load-balancing-weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface) IsYANGGoStruct() {}

// GetOrCreateBfdLiveness retrieves the value of the BfdLiveness field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface) GetOrCreateBfdLiveness() *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_BfdLiveness {
	if t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	t.BfdLiveness = &NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_BfdLiveness{}
	return t.BfdLiveness
}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface) GetOrCreateIpv4() *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface) GetOrCreateIpv6() *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6{}
	return t.Ipv6
}

// GetBfdLiveness returns the value of the BfdLiveness struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface. If the receiver or the field BfdLiveness is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface) GetBfdLiveness() *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_BfdLiveness {
	if t != nil && t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	return nil
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface) GetIpv4() *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface) GetIpv6() *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetIpIntName retrieves the value of the leaf IpIntName from the NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpIntName is set, it can
// safely use t.GetIpIntName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpIntName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface) GetIpIntName() string {
	if t == nil || t.IpIntName == nil {
		return ""
	}
	return *t.IpIntName
}

// GetLoadBalancingWeight retrieves the value of the leaf LoadBalancingWeight from the NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoadBalancingWeight is set, it can
// safely use t.GetLoadBalancingWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoadBalancingWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface) GetLoadBalancingWeight() uint32 {
	if t == nil || t.LoadBalancingWeight == nil {
		return 0
	}
	return *t.LoadBalancingWeight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	t.BfdLiveness.PopulateDefaults()
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.IpIntName == nil {
		return nil, fmt.Errorf("nil value for key IpIntName")
	}

	return map[string]interface{}{
		"ip-int-name": *t.IpIntName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_BfdLiveness represents the /nokia-conf/configure/groups/group/router/ldp/interface-parameters/interface/bfd-liveness YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_BfdLiveness struct {
	Ipv4 *bool `path:"ipv4" module:"nokia-conf"`
	Ipv6 *bool `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_BfdLiveness implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_BfdLiveness) IsYANGGoStruct() {
}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_BfdLiveness) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_BfdLiveness) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_BfdLiveness
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_BfdLiveness) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_BfdLiveness) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_BfdLiveness"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_BfdLiveness) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_BfdLiveness) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_BfdLiveness.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_BfdLiveness) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4 represents the /nokia-conf/configure/groups/group/router/ldp/interface-parameters/interface/ipv4 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4 struct {
	AdminState        E_NokiaTypesSros_AdminState                                                                       `path:"admin-state" module:"nokia-conf"`
	FecTypeCapability *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_FecTypeCapability `path:"fec-type-capability" module:"nokia-conf"`
	Hello             *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_Hello             `path:"hello" module:"nokia-conf" yangPresence:"true"`
	Keepalive         *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_Keepalive         `path:"keepalive" module:"nokia-conf" yangPresence:"true"`
	LocalLsrId        *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_LocalLsrId        `path:"local-lsr-id" module:"nokia-conf"`
	TransportAddress  E_NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_TransportAddress `path:"transport-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4) IsYANGGoStruct() {
}

// GetOrCreateFecTypeCapability retrieves the value of the FecTypeCapability field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4) GetOrCreateFecTypeCapability() *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_FecTypeCapability {
	if t.FecTypeCapability != nil {
		return t.FecTypeCapability
	}
	t.FecTypeCapability = &NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_FecTypeCapability{}
	return t.FecTypeCapability
}

// GetOrCreateHello retrieves the value of the Hello field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4) GetOrCreateHello() *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_Hello {
	if t.Hello != nil {
		return t.Hello
	}
	t.Hello = &NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_Hello{}
	return t.Hello
}

// GetOrCreateKeepalive retrieves the value of the Keepalive field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4) GetOrCreateKeepalive() *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_Keepalive {
	if t.Keepalive != nil {
		return t.Keepalive
	}
	t.Keepalive = &NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_Keepalive{}
	return t.Keepalive
}

// GetOrCreateLocalLsrId retrieves the value of the LocalLsrId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4) GetOrCreateLocalLsrId() *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_LocalLsrId {
	if t.LocalLsrId != nil {
		return t.LocalLsrId
	}
	t.LocalLsrId = &NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_LocalLsrId{}
	return t.LocalLsrId
}

// GetFecTypeCapability returns the value of the FecTypeCapability struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4. If the receiver or the field FecTypeCapability is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4) GetFecTypeCapability() *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_FecTypeCapability {
	if t != nil && t.FecTypeCapability != nil {
		return t.FecTypeCapability
	}
	return nil
}

// GetHello returns the value of the Hello struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4. If the receiver or the field Hello is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4) GetHello() *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_Hello {
	if t != nil && t.Hello != nil {
		return t.Hello
	}
	return nil
}

// GetKeepalive returns the value of the Keepalive struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4. If the receiver or the field Keepalive is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4) GetKeepalive() *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_Keepalive {
	if t != nil && t.Keepalive != nil {
		return t.Keepalive
	}
	return nil
}

// GetLocalLsrId returns the value of the LocalLsrId struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4. If the receiver or the field LocalLsrId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4) GetLocalLsrId() *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_LocalLsrId {
	if t != nil && t.LocalLsrId != nil {
		return t.LocalLsrId
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetTransportAddress retrieves the value of the leaf TransportAddress from the NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransportAddress is set, it can
// safely use t.GetTransportAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransportAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4) GetTransportAddress() E_NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_TransportAddress {
	if t == nil || t.TransportAddress == 0 {
		return 0
	}
	return t.TransportAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	t.FecTypeCapability.PopulateDefaults()
	t.Hello.PopulateDefaults()
	t.Keepalive.PopulateDefaults()
	t.LocalLsrId.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_FecTypeCapability represents the /nokia-conf/configure/groups/group/router/ldp/interface-parameters/interface/ipv4/fec-type-capability YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_FecTypeCapability struct {
	P2MpIpv4   *bool `path:"p2mp-ipv4" module:"nokia-conf"`
	P2MpIpv6   *bool `path:"p2mp-ipv6" module:"nokia-conf"`
	PrefixIpv4 *bool `path:"prefix-ipv4" module:"nokia-conf"`
	PrefixIpv6 *bool `path:"prefix-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_FecTypeCapability implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_FecTypeCapability) IsYANGGoStruct() {
}

// GetP2MpIpv4 retrieves the value of the leaf P2MpIpv4 from the NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_FecTypeCapability
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if P2MpIpv4 is set, it can
// safely use t.GetP2MpIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.P2MpIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_FecTypeCapability) GetP2MpIpv4() bool {
	if t == nil || t.P2MpIpv4 == nil {
		return true
	}
	return *t.P2MpIpv4
}

// GetP2MpIpv6 retrieves the value of the leaf P2MpIpv6 from the NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_FecTypeCapability
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if P2MpIpv6 is set, it can
// safely use t.GetP2MpIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.P2MpIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_FecTypeCapability) GetP2MpIpv6() bool {
	if t == nil || t.P2MpIpv6 == nil {
		return true
	}
	return *t.P2MpIpv6
}

// GetPrefixIpv4 retrieves the value of the leaf PrefixIpv4 from the NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_FecTypeCapability
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixIpv4 is set, it can
// safely use t.GetPrefixIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_FecTypeCapability) GetPrefixIpv4() bool {
	if t == nil || t.PrefixIpv4 == nil {
		return true
	}
	return *t.PrefixIpv4
}

// GetPrefixIpv6 retrieves the value of the leaf PrefixIpv6 from the NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_FecTypeCapability
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixIpv6 is set, it can
// safely use t.GetPrefixIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_FecTypeCapability) GetPrefixIpv6() bool {
	if t == nil || t.PrefixIpv6 == nil {
		return true
	}
	return *t.PrefixIpv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_FecTypeCapability
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_FecTypeCapability) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.P2MpIpv4 == nil {
		var v bool = true
		t.P2MpIpv4 = &v
	}
	if t.P2MpIpv6 == nil {
		var v bool = true
		t.P2MpIpv6 = &v
	}
	if t.PrefixIpv4 == nil {
		var v bool = true
		t.PrefixIpv4 = &v
	}
	if t.PrefixIpv6 == nil {
		var v bool = true
		t.PrefixIpv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_FecTypeCapability) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_FecTypeCapability"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_FecTypeCapability) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_FecTypeCapability) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_FecTypeCapability.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_FecTypeCapability) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_Hello represents the /nokia-conf/configure/groups/group/router/ldp/interface-parameters/interface/ipv4/hello YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_Hello struct {
	Factor  *uint32 `path:"factor" module:"nokia-conf"`
	Timeout *uint32 `path:"timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_Hello implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_Hello) IsYANGGoStruct() {
}

// GetFactor retrieves the value of the leaf Factor from the NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_Hello
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Factor is set, it can
// safely use t.GetFactor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Factor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_Hello) GetFactor() uint32 {
	if t == nil || t.Factor == nil {
		return 0
	}
	return *t.Factor
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_Hello
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_Hello) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 0
	}
	return *t.Timeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_Hello
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_Hello) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_Hello) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_Hello"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_Hello) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_Hello) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_Hello.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_Hello) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_Keepalive represents the /nokia-conf/configure/groups/group/router/ldp/interface-parameters/interface/ipv4/keepalive YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_Keepalive struct {
	Factor  *uint32 `path:"factor" module:"nokia-conf"`
	Timeout *uint32 `path:"timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_Keepalive implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_Keepalive) IsYANGGoStruct() {
}

// GetFactor retrieves the value of the leaf Factor from the NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_Keepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Factor is set, it can
// safely use t.GetFactor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Factor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_Keepalive) GetFactor() uint32 {
	if t == nil || t.Factor == nil {
		return 0
	}
	return *t.Factor
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_Keepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_Keepalive) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 0
	}
	return *t.Timeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_Keepalive
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_Keepalive) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_Keepalive) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_Keepalive"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_Keepalive) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_Keepalive) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_Keepalive.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_Keepalive) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_LocalLsrId represents the /nokia-conf/configure/groups/group/router/ldp/interface-parameters/interface/ipv4/local-lsr-id YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_LocalLsrId struct {
	InterfaceName *string `path:"interface-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_LocalLsrId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_LocalLsrId) IsYANGGoStruct() {
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_LocalLsrId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_LocalLsrId) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_LocalLsrId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_LocalLsrId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_LocalLsrId) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_LocalLsrId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_LocalLsrId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_LocalLsrId) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_LocalLsrId.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv4_LocalLsrId) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6 represents the /nokia-conf/configure/groups/group/router/ldp/interface-parameters/interface/ipv6 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6 struct {
	AdminState        E_NokiaTypesSros_AdminState                                                                       `path:"admin-state" module:"nokia-conf"`
	FecTypeCapability *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_FecTypeCapability `path:"fec-type-capability" module:"nokia-conf"`
	Hello             *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_Hello             `path:"hello" module:"nokia-conf" yangPresence:"true"`
	Keepalive         *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_Keepalive         `path:"keepalive" module:"nokia-conf" yangPresence:"true"`
	LocalLsrId        *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_LocalLsrId        `path:"local-lsr-id" module:"nokia-conf"`
	TransportAddress  E_NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_TransportAddress `path:"transport-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6) IsYANGGoStruct() {
}

// GetOrCreateFecTypeCapability retrieves the value of the FecTypeCapability field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6) GetOrCreateFecTypeCapability() *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_FecTypeCapability {
	if t.FecTypeCapability != nil {
		return t.FecTypeCapability
	}
	t.FecTypeCapability = &NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_FecTypeCapability{}
	return t.FecTypeCapability
}

// GetOrCreateHello retrieves the value of the Hello field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6) GetOrCreateHello() *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_Hello {
	if t.Hello != nil {
		return t.Hello
	}
	t.Hello = &NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_Hello{}
	return t.Hello
}

// GetOrCreateKeepalive retrieves the value of the Keepalive field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6) GetOrCreateKeepalive() *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_Keepalive {
	if t.Keepalive != nil {
		return t.Keepalive
	}
	t.Keepalive = &NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_Keepalive{}
	return t.Keepalive
}

// GetOrCreateLocalLsrId retrieves the value of the LocalLsrId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6) GetOrCreateLocalLsrId() *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_LocalLsrId {
	if t.LocalLsrId != nil {
		return t.LocalLsrId
	}
	t.LocalLsrId = &NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_LocalLsrId{}
	return t.LocalLsrId
}

// GetFecTypeCapability returns the value of the FecTypeCapability struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6. If the receiver or the field FecTypeCapability is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6) GetFecTypeCapability() *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_FecTypeCapability {
	if t != nil && t.FecTypeCapability != nil {
		return t.FecTypeCapability
	}
	return nil
}

// GetHello returns the value of the Hello struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6. If the receiver or the field Hello is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6) GetHello() *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_Hello {
	if t != nil && t.Hello != nil {
		return t.Hello
	}
	return nil
}

// GetKeepalive returns the value of the Keepalive struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6. If the receiver or the field Keepalive is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6) GetKeepalive() *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_Keepalive {
	if t != nil && t.Keepalive != nil {
		return t.Keepalive
	}
	return nil
}

// GetLocalLsrId returns the value of the LocalLsrId struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6. If the receiver or the field LocalLsrId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6) GetLocalLsrId() *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_LocalLsrId {
	if t != nil && t.LocalLsrId != nil {
		return t.LocalLsrId
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetTransportAddress retrieves the value of the leaf TransportAddress from the NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransportAddress is set, it can
// safely use t.GetTransportAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransportAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6) GetTransportAddress() E_NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_TransportAddress {
	if t == nil || t.TransportAddress == 0 {
		return 0
	}
	return t.TransportAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	t.FecTypeCapability.PopulateDefaults()
	t.Hello.PopulateDefaults()
	t.Keepalive.PopulateDefaults()
	t.LocalLsrId.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_FecTypeCapability represents the /nokia-conf/configure/groups/group/router/ldp/interface-parameters/interface/ipv6/fec-type-capability YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_FecTypeCapability struct {
	P2MpIpv4   *bool `path:"p2mp-ipv4" module:"nokia-conf"`
	P2MpIpv6   *bool `path:"p2mp-ipv6" module:"nokia-conf"`
	PrefixIpv4 *bool `path:"prefix-ipv4" module:"nokia-conf"`
	PrefixIpv6 *bool `path:"prefix-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_FecTypeCapability implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_FecTypeCapability) IsYANGGoStruct() {
}

// GetP2MpIpv4 retrieves the value of the leaf P2MpIpv4 from the NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_FecTypeCapability
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if P2MpIpv4 is set, it can
// safely use t.GetP2MpIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.P2MpIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_FecTypeCapability) GetP2MpIpv4() bool {
	if t == nil || t.P2MpIpv4 == nil {
		return true
	}
	return *t.P2MpIpv4
}

// GetP2MpIpv6 retrieves the value of the leaf P2MpIpv6 from the NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_FecTypeCapability
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if P2MpIpv6 is set, it can
// safely use t.GetP2MpIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.P2MpIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_FecTypeCapability) GetP2MpIpv6() bool {
	if t == nil || t.P2MpIpv6 == nil {
		return true
	}
	return *t.P2MpIpv6
}

// GetPrefixIpv4 retrieves the value of the leaf PrefixIpv4 from the NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_FecTypeCapability
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixIpv4 is set, it can
// safely use t.GetPrefixIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_FecTypeCapability) GetPrefixIpv4() bool {
	if t == nil || t.PrefixIpv4 == nil {
		return true
	}
	return *t.PrefixIpv4
}

// GetPrefixIpv6 retrieves the value of the leaf PrefixIpv6 from the NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_FecTypeCapability
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixIpv6 is set, it can
// safely use t.GetPrefixIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_FecTypeCapability) GetPrefixIpv6() bool {
	if t == nil || t.PrefixIpv6 == nil {
		return true
	}
	return *t.PrefixIpv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_FecTypeCapability
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_FecTypeCapability) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.P2MpIpv4 == nil {
		var v bool = true
		t.P2MpIpv4 = &v
	}
	if t.P2MpIpv6 == nil {
		var v bool = true
		t.P2MpIpv6 = &v
	}
	if t.PrefixIpv4 == nil {
		var v bool = true
		t.PrefixIpv4 = &v
	}
	if t.PrefixIpv6 == nil {
		var v bool = true
		t.PrefixIpv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_FecTypeCapability) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_FecTypeCapability"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_FecTypeCapability) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_FecTypeCapability) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_FecTypeCapability.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_FecTypeCapability) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_Hello represents the /nokia-conf/configure/groups/group/router/ldp/interface-parameters/interface/ipv6/hello YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_Hello struct {
	Factor  *uint32 `path:"factor" module:"nokia-conf"`
	Timeout *uint32 `path:"timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_Hello implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_Hello) IsYANGGoStruct() {
}

// GetFactor retrieves the value of the leaf Factor from the NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_Hello
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Factor is set, it can
// safely use t.GetFactor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Factor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_Hello) GetFactor() uint32 {
	if t == nil || t.Factor == nil {
		return 0
	}
	return *t.Factor
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_Hello
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_Hello) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 0
	}
	return *t.Timeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_Hello
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_Hello) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_Hello) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_Hello"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_Hello) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_Hello) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_Hello.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_Hello) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_Keepalive represents the /nokia-conf/configure/groups/group/router/ldp/interface-parameters/interface/ipv6/keepalive YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_Keepalive struct {
	Factor  *uint32 `path:"factor" module:"nokia-conf"`
	Timeout *uint32 `path:"timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_Keepalive implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_Keepalive) IsYANGGoStruct() {
}

// GetFactor retrieves the value of the leaf Factor from the NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_Keepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Factor is set, it can
// safely use t.GetFactor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Factor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_Keepalive) GetFactor() uint32 {
	if t == nil || t.Factor == nil {
		return 0
	}
	return *t.Factor
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_Keepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_Keepalive) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 0
	}
	return *t.Timeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_Keepalive
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_Keepalive) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_Keepalive) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_Keepalive"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_Keepalive) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_Keepalive) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_Keepalive.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_Keepalive) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_LocalLsrId represents the /nokia-conf/configure/groups/group/router/ldp/interface-parameters/interface/ipv6/local-lsr-id YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_LocalLsrId struct {
	Format_32Bit  *bool   `path:"format-32bit" module:"nokia-conf"`
	InterfaceName *string `path:"interface-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_LocalLsrId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_LocalLsrId) IsYANGGoStruct() {
}

// GetFormat_32Bit retrieves the value of the leaf Format_32Bit from the NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_LocalLsrId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Format_32Bit is set, it can
// safely use t.GetFormat_32Bit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Format_32Bit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_LocalLsrId) GetFormat_32Bit() bool {
	if t == nil || t.Format_32Bit == nil {
		return false
	}
	return *t.Format_32Bit
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_LocalLsrId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_LocalLsrId) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_LocalLsrId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_LocalLsrId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Format_32Bit == nil {
		var v bool = false
		t.Format_32Bit = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_LocalLsrId) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_LocalLsrId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_LocalLsrId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_LocalLsrId) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_LocalLsrId.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Interface_Ipv6_LocalLsrId) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv4 represents the /nokia-conf/configure/groups/group/router/ldp/interface-parameters/ipv4 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv4 struct {
	Hello            *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv4_Hello             `path:"hello" module:"nokia-conf"`
	Keepalive        *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv4_Keepalive         `path:"keepalive" module:"nokia-conf"`
	TransportAddress E_NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv4_TransportAddress `path:"transport-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv4) IsYANGGoStruct() {}

// GetOrCreateHello retrieves the value of the Hello field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv4) GetOrCreateHello() *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv4_Hello {
	if t.Hello != nil {
		return t.Hello
	}
	t.Hello = &NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv4_Hello{}
	return t.Hello
}

// GetOrCreateKeepalive retrieves the value of the Keepalive field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv4) GetOrCreateKeepalive() *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv4_Keepalive {
	if t.Keepalive != nil {
		return t.Keepalive
	}
	t.Keepalive = &NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv4_Keepalive{}
	return t.Keepalive
}

// GetHello returns the value of the Hello struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv4. If the receiver or the field Hello is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv4) GetHello() *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv4_Hello {
	if t != nil && t.Hello != nil {
		return t.Hello
	}
	return nil
}

// GetKeepalive returns the value of the Keepalive struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv4. If the receiver or the field Keepalive is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv4) GetKeepalive() *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv4_Keepalive {
	if t != nil && t.Keepalive != nil {
		return t.Keepalive
	}
	return nil
}

// GetTransportAddress retrieves the value of the leaf TransportAddress from the NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransportAddress is set, it can
// safely use t.GetTransportAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransportAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv4) GetTransportAddress() E_NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv4_TransportAddress {
	if t == nil || t.TransportAddress == 0 {
		return NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv4_TransportAddress_system
	}
	return t.TransportAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.TransportAddress == 0 {
		t.TransportAddress = NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv4_TransportAddress_system
	}
	t.Hello.PopulateDefaults()
	t.Keepalive.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv4) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv4) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv4.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv4) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv4_Hello represents the /nokia-conf/configure/groups/group/router/ldp/interface-parameters/ipv4/hello YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv4_Hello struct {
	Factor  *uint32 `path:"factor" module:"nokia-conf"`
	Timeout *uint32 `path:"timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv4_Hello implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv4_Hello) IsYANGGoStruct() {}

// GetFactor retrieves the value of the leaf Factor from the NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv4_Hello
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Factor is set, it can
// safely use t.GetFactor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Factor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv4_Hello) GetFactor() uint32 {
	if t == nil || t.Factor == nil {
		return 3
	}
	return *t.Factor
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv4_Hello
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv4_Hello) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 15
	}
	return *t.Timeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv4_Hello
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv4_Hello) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Factor == nil {
		var v uint32 = 3
		t.Factor = &v
	}
	if t.Timeout == nil {
		var v uint32 = 15
		t.Timeout = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv4_Hello) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv4_Hello"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv4_Hello) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv4_Hello) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv4_Hello.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv4_Hello) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv4_Keepalive represents the /nokia-conf/configure/groups/group/router/ldp/interface-parameters/ipv4/keepalive YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv4_Keepalive struct {
	Factor  *uint32 `path:"factor" module:"nokia-conf"`
	Timeout *uint32 `path:"timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv4_Keepalive implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv4_Keepalive) IsYANGGoStruct() {
}

// GetFactor retrieves the value of the leaf Factor from the NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv4_Keepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Factor is set, it can
// safely use t.GetFactor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Factor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv4_Keepalive) GetFactor() uint32 {
	if t == nil || t.Factor == nil {
		return 3
	}
	return *t.Factor
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv4_Keepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv4_Keepalive) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 30
	}
	return *t.Timeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv4_Keepalive
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv4_Keepalive) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Factor == nil {
		var v uint32 = 3
		t.Factor = &v
	}
	if t.Timeout == nil {
		var v uint32 = 30
		t.Timeout = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv4_Keepalive) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv4_Keepalive"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv4_Keepalive) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv4_Keepalive) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv4_Keepalive.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv4_Keepalive) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv6 represents the /nokia-conf/configure/groups/group/router/ldp/interface-parameters/ipv6 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv6 struct {
	Hello            *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv6_Hello             `path:"hello" module:"nokia-conf"`
	Keepalive        *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv6_Keepalive         `path:"keepalive" module:"nokia-conf"`
	TransportAddress E_NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv6_TransportAddress `path:"transport-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv6) IsYANGGoStruct() {}

// GetOrCreateHello retrieves the value of the Hello field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv6) GetOrCreateHello() *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv6_Hello {
	if t.Hello != nil {
		return t.Hello
	}
	t.Hello = &NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv6_Hello{}
	return t.Hello
}

// GetOrCreateKeepalive retrieves the value of the Keepalive field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv6) GetOrCreateKeepalive() *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv6_Keepalive {
	if t.Keepalive != nil {
		return t.Keepalive
	}
	t.Keepalive = &NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv6_Keepalive{}
	return t.Keepalive
}

// GetHello returns the value of the Hello struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv6. If the receiver or the field Hello is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv6) GetHello() *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv6_Hello {
	if t != nil && t.Hello != nil {
		return t.Hello
	}
	return nil
}

// GetKeepalive returns the value of the Keepalive struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv6. If the receiver or the field Keepalive is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv6) GetKeepalive() *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv6_Keepalive {
	if t != nil && t.Keepalive != nil {
		return t.Keepalive
	}
	return nil
}

// GetTransportAddress retrieves the value of the leaf TransportAddress from the NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransportAddress is set, it can
// safely use t.GetTransportAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransportAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv6) GetTransportAddress() E_NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv6_TransportAddress {
	if t == nil || t.TransportAddress == 0 {
		return NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv6_TransportAddress_system
	}
	return t.TransportAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.TransportAddress == 0 {
		t.TransportAddress = NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv6_TransportAddress_system
	}
	t.Hello.PopulateDefaults()
	t.Keepalive.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv6) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv6) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv6.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv6) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv6_Hello represents the /nokia-conf/configure/groups/group/router/ldp/interface-parameters/ipv6/hello YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv6_Hello struct {
	Factor  *uint32 `path:"factor" module:"nokia-conf"`
	Timeout *uint32 `path:"timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv6_Hello implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv6_Hello) IsYANGGoStruct() {}

// GetFactor retrieves the value of the leaf Factor from the NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv6_Hello
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Factor is set, it can
// safely use t.GetFactor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Factor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv6_Hello) GetFactor() uint32 {
	if t == nil || t.Factor == nil {
		return 3
	}
	return *t.Factor
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv6_Hello
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv6_Hello) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 15
	}
	return *t.Timeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv6_Hello
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv6_Hello) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Factor == nil {
		var v uint32 = 3
		t.Factor = &v
	}
	if t.Timeout == nil {
		var v uint32 = 15
		t.Timeout = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv6_Hello) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv6_Hello"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv6_Hello) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv6_Hello) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv6_Hello.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv6_Hello) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv6_Keepalive represents the /nokia-conf/configure/groups/group/router/ldp/interface-parameters/ipv6/keepalive YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv6_Keepalive struct {
	Factor  *uint32 `path:"factor" module:"nokia-conf"`
	Timeout *uint32 `path:"timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv6_Keepalive implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv6_Keepalive) IsYANGGoStruct() {
}

// GetFactor retrieves the value of the leaf Factor from the NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv6_Keepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Factor is set, it can
// safely use t.GetFactor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Factor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv6_Keepalive) GetFactor() uint32 {
	if t == nil || t.Factor == nil {
		return 3
	}
	return *t.Factor
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv6_Keepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv6_Keepalive) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 30
	}
	return *t.Timeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv6_Keepalive
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv6_Keepalive) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Factor == nil {
		var v uint32 = 3
		t.Factor = &v
	}
	if t.Timeout == nil {
		var v uint32 = 30
		t.Timeout = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv6_Keepalive) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv6_Keepalive"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv6_Keepalive) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv6_Keepalive) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv6_Keepalive.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_InterfaceParameters_Ipv6_Keepalive) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ldp_LdpShortcut represents the /nokia-conf/configure/groups/group/router/ldp/ldp-shortcut YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ldp_LdpShortcut struct {
	Ipv4 *bool `path:"ipv4" module:"nokia-conf"`
	Ipv6 *bool `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ldp_LdpShortcut implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_LdpShortcut) IsYANGGoStruct() {}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Groups_Group_Router_Ldp_LdpShortcut
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_LdpShortcut) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Groups_Group_Router_Ldp_LdpShortcut
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_LdpShortcut) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ldp_LdpShortcut
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_LdpShortcut) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_LdpShortcut) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ldp_LdpShortcut"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_LdpShortcut) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_LdpShortcut) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ldp_LdpShortcut.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_LdpShortcut) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ldp_LspBfd represents the /nokia-conf/configure/groups/group/router/ldp/lsp-bfd YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ldp_LspBfd struct {
	BfdLiveness     *bool                                                                    `path:"bfd-liveness" module:"nokia-conf"`
	BfdTemplate     *string                                                                  `path:"bfd-template" module:"nokia-conf"`
	FailureAction   E_NokiaConf_Configure_Groups_Group_Router_Ldp_LspBfd_FailureAction       `path:"failure-action" module:"nokia-conf"`
	LspPingInterval NokiaConf_Configure_Groups_Group_Router_Ldp_LspBfd_LspPingInterval_Union `path:"lsp-ping-interval" module:"nokia-conf"`
	PrefixList      *string                                                                  `path:"prefix-list" module:"nokia-conf"`
	Priority        *uint32                                                                  `path:"priority" module:"nokia-conf"`
	SourceAddress   *string                                                                  `path:"source-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ldp_LspBfd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_LspBfd) IsYANGGoStruct() {}

// GetBfdLiveness retrieves the value of the leaf BfdLiveness from the NokiaConf_Configure_Groups_Group_Router_Ldp_LspBfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdLiveness is set, it can
// safely use t.GetBfdLiveness() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdLiveness == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_LspBfd) GetBfdLiveness() bool {
	if t == nil || t.BfdLiveness == nil {
		return false
	}
	return *t.BfdLiveness
}

// GetBfdTemplate retrieves the value of the leaf BfdTemplate from the NokiaConf_Configure_Groups_Group_Router_Ldp_LspBfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdTemplate is set, it can
// safely use t.GetBfdTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_LspBfd) GetBfdTemplate() string {
	if t == nil || t.BfdTemplate == nil {
		return ""
	}
	return *t.BfdTemplate
}

// GetFailureAction retrieves the value of the leaf FailureAction from the NokiaConf_Configure_Groups_Group_Router_Ldp_LspBfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FailureAction is set, it can
// safely use t.GetFailureAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FailureAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_LspBfd) GetFailureAction() E_NokiaConf_Configure_Groups_Group_Router_Ldp_LspBfd_FailureAction {
	if t == nil || t.FailureAction == 0 {
		return 0
	}
	return t.FailureAction
}

// GetLspPingInterval retrieves the value of the leaf LspPingInterval from the NokiaConf_Configure_Groups_Group_Router_Ldp_LspBfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspPingInterval is set, it can
// safely use t.GetLspPingInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspPingInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_LspBfd) GetLspPingInterval() NokiaConf_Configure_Groups_Group_Router_Ldp_LspBfd_LspPingInterval_Union {
	if t == nil || t.LspPingInterval == nil {
		return UnionUint32(60)
	}
	return t.LspPingInterval
}

// GetPrefixList retrieves the value of the leaf PrefixList from the NokiaConf_Configure_Groups_Group_Router_Ldp_LspBfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixList is set, it can
// safely use t.GetPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_LspBfd) GetPrefixList() string {
	if t == nil || t.PrefixList == nil {
		return ""
	}
	return *t.PrefixList
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Groups_Group_Router_Ldp_LspBfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_LspBfd) GetPriority() uint32 {
	if t == nil || t.Priority == nil {
		return 1
	}
	return *t.Priority
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_Groups_Group_Router_Ldp_LspBfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_LspBfd) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ldp_LspBfd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_LspBfd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BfdLiveness == nil {
		var v bool = false
		t.BfdLiveness = &v
	}
	if t.LspPingInterval == nil {
		t.LspPingInterval = UnionUint32(60)
	}
	if t.Priority == nil {
		var v uint32 = 1
		t.Priority = &v
	}
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Ldp_LspBfd struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_LspBfd) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.PrefixList == nil {
		return nil, fmt.Errorf("nil value for key PrefixList")
	}

	return map[string]interface{}{
		"prefix-list": *t.PrefixList,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_LspBfd) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ldp_LspBfd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_LspBfd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_LspBfd) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ldp_LspBfd.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_LspBfd) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters represents the /nokia-conf/configure/groups/group/router/ldp/session-parameters YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters struct {
	Peer map[string]*NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer `path:"peer" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters) IsYANGGoStruct() {}

// NewPeer creates a new entry in the Peer list of the
// NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters) NewPeer(IpAddress string) (*NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer)
	}

	key := IpAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Peer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Peer", key)
	}

	t.Peer[key] = &NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer{
		IpAddress: &IpAddress,
	}

	return t.Peer[key], nil
}

// RenamePeer renames an entry in the list Peer within
// the NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters) RenamePeer(oldK, newK string) error {
	if _, ok := t.Peer[newK]; ok {
		return fmt.Errorf("key %v already exists in Peer", newK)
	}

	e, ok := t.Peer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Peer", oldK)
	}
	e.IpAddress = &newK

	t.Peer[newK] = e
	delete(t.Peer, oldK)
	return nil
}

// GetOrCreatePeer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters) GetOrCreatePeer(IpAddress string) *NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer {

	key := IpAddress

	if v, ok := t.Peer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPeer(IpAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePeer got unexpected error: %v", err))
	}
	return v
}

// GetPeer retrieves the value with the specified key from
// the Peer map field of NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters) GetPeer(IpAddress string) *NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer {

	if t == nil {
		return nil
	}

	key := IpAddress

	if lm, ok := t.Peer[key]; ok {
		return lm
	}
	return nil
}

// DeletePeer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters) DeletePeer(IpAddress string) {
	key := IpAddress

	delete(t.Peer, key)
}

// AppendPeer appends the supplied NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer struct to the
// list Peer of NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters) AppendPeer(v *NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer) error {
	if v.IpAddress == nil {
		return fmt.Errorf("invalid nil key received for IpAddress")
	}

	key := *v.IpAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer)
	}

	if _, ok := t.Peer[key]; ok {
		return fmt.Errorf("duplicate key for list Peer %v", key)
	}

	t.Peer[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Peer {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer represents the /nokia-conf/configure/groups/group/router/ldp/session-parameters/peer YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer struct {
	AdvAdjAddrOnly       *bool                                                                                 `path:"adv-adj-addr-only" module:"nokia-conf"`
	AdvLocalLsrId        *bool                                                                                 `path:"adv-local-lsr-id" module:"nokia-conf"`
	Community            *string                                                                               `path:"community" module:"nokia-conf"`
	DodLabelDistribution *bool                                                                                 `path:"dod-label-distribution" module:"nokia-conf"`
	ExportAddresses      []string                                                                              `path:"export-addresses" module:"nokia-conf"`
	ExportPrefixes       []string                                                                              `path:"export-prefixes" module:"nokia-conf"`
	FecLimit             *NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer_FecLimit          `path:"fec-limit" module:"nokia-conf"`
	FecTypeCapability    *NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer_FecTypeCapability `path:"fec-type-capability" module:"nokia-conf"`
	Fec129CiscoInterop   *bool                                                                                 `path:"fec129-cisco-interop" module:"nokia-conf"`
	ImportPrefixes       []string                                                                              `path:"import-prefixes" module:"nokia-conf"`
	IpAddress            *string                                                                               `path:"ip-address" module:"nokia-conf"`
	PeIdMacFlushInterop  *bool                                                                                 `path:"pe-id-mac-flush-interop" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer) IsYANGGoStruct() {}

// GetOrCreateFecLimit retrieves the value of the FecLimit field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer) GetOrCreateFecLimit() *NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer_FecLimit {
	if t.FecLimit != nil {
		return t.FecLimit
	}
	t.FecLimit = &NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer_FecLimit{}
	return t.FecLimit
}

// GetOrCreateFecTypeCapability retrieves the value of the FecTypeCapability field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer) GetOrCreateFecTypeCapability() *NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer_FecTypeCapability {
	if t.FecTypeCapability != nil {
		return t.FecTypeCapability
	}
	t.FecTypeCapability = &NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer_FecTypeCapability{}
	return t.FecTypeCapability
}

// GetFecLimit returns the value of the FecLimit struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer. If the receiver or the field FecLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer) GetFecLimit() *NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer_FecLimit {
	if t != nil && t.FecLimit != nil {
		return t.FecLimit
	}
	return nil
}

// GetFecTypeCapability returns the value of the FecTypeCapability struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer. If the receiver or the field FecTypeCapability is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer) GetFecTypeCapability() *NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer_FecTypeCapability {
	if t != nil && t.FecTypeCapability != nil {
		return t.FecTypeCapability
	}
	return nil
}

// GetAdvAdjAddrOnly retrieves the value of the leaf AdvAdjAddrOnly from the NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvAdjAddrOnly is set, it can
// safely use t.GetAdvAdjAddrOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvAdjAddrOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer) GetAdvAdjAddrOnly() bool {
	if t == nil || t.AdvAdjAddrOnly == nil {
		return false
	}
	return *t.AdvAdjAddrOnly
}

// GetAdvLocalLsrId retrieves the value of the leaf AdvLocalLsrId from the NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvLocalLsrId is set, it can
// safely use t.GetAdvLocalLsrId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvLocalLsrId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer) GetAdvLocalLsrId() bool {
	if t == nil || t.AdvLocalLsrId == nil {
		return false
	}
	return *t.AdvLocalLsrId
}

// GetCommunity retrieves the value of the leaf Community from the NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Community is set, it can
// safely use t.GetCommunity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Community == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer) GetCommunity() string {
	if t == nil || t.Community == nil {
		return ""
	}
	return *t.Community
}

// GetDodLabelDistribution retrieves the value of the leaf DodLabelDistribution from the NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DodLabelDistribution is set, it can
// safely use t.GetDodLabelDistribution() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DodLabelDistribution == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer) GetDodLabelDistribution() bool {
	if t == nil || t.DodLabelDistribution == nil {
		return false
	}
	return *t.DodLabelDistribution
}

// GetExportAddresses retrieves the value of the leaf ExportAddresses from the NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportAddresses is set, it can
// safely use t.GetExportAddresses() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportAddresses == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer) GetExportAddresses() []string {
	if t == nil || t.ExportAddresses == nil {
		return nil
	}
	return t.ExportAddresses
}

// GetExportPrefixes retrieves the value of the leaf ExportPrefixes from the NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPrefixes is set, it can
// safely use t.GetExportPrefixes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPrefixes == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer) GetExportPrefixes() []string {
	if t == nil || t.ExportPrefixes == nil {
		return nil
	}
	return t.ExportPrefixes
}

// GetFec129CiscoInterop retrieves the value of the leaf Fec129CiscoInterop from the NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fec129CiscoInterop is set, it can
// safely use t.GetFec129CiscoInterop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fec129CiscoInterop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer) GetFec129CiscoInterop() bool {
	if t == nil || t.Fec129CiscoInterop == nil {
		return false
	}
	return *t.Fec129CiscoInterop
}

// GetImportPrefixes retrieves the value of the leaf ImportPrefixes from the NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPrefixes is set, it can
// safely use t.GetImportPrefixes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPrefixes == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer) GetImportPrefixes() []string {
	if t == nil || t.ImportPrefixes == nil {
		return nil
	}
	return t.ImportPrefixes
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetPeIdMacFlushInterop retrieves the value of the leaf PeIdMacFlushInterop from the NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeIdMacFlushInterop is set, it can
// safely use t.GetPeIdMacFlushInterop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeIdMacFlushInterop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer) GetPeIdMacFlushInterop() bool {
	if t == nil || t.PeIdMacFlushInterop == nil {
		return false
	}
	return *t.PeIdMacFlushInterop
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdvAdjAddrOnly == nil {
		var v bool = false
		t.AdvAdjAddrOnly = &v
	}
	if t.AdvLocalLsrId == nil {
		var v bool = false
		t.AdvLocalLsrId = &v
	}
	if t.DodLabelDistribution == nil {
		var v bool = false
		t.DodLabelDistribution = &v
	}
	if t.Fec129CiscoInterop == nil {
		var v bool = false
		t.Fec129CiscoInterop = &v
	}
	if t.PeIdMacFlushInterop == nil {
		var v bool = false
		t.PeIdMacFlushInterop = &v
	}
	t.FecLimit.PopulateDefaults()
	t.FecTypeCapability.PopulateDefaults()
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.IpAddress == nil {
		return nil, fmt.Errorf("nil value for key IpAddress")
	}

	return map[string]interface{}{
		"ip-address": *t.IpAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer_FecLimit represents the /nokia-conf/configure/groups/group/router/ldp/session-parameters/peer/fec-limit YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer_FecLimit struct {
	Limit     *uint32 `path:"limit" module:"nokia-conf"`
	LogOnly   *bool   `path:"log-only" module:"nokia-conf"`
	Threshold *uint32 `path:"threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer_FecLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer_FecLimit) IsYANGGoStruct() {
}

// GetLimit retrieves the value of the leaf Limit from the NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer_FecLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Limit is set, it can
// safely use t.GetLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Limit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer_FecLimit) GetLimit() uint32 {
	if t == nil || t.Limit == nil {
		return 0
	}
	return *t.Limit
}

// GetLogOnly retrieves the value of the leaf LogOnly from the NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer_FecLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogOnly is set, it can
// safely use t.GetLogOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer_FecLimit) GetLogOnly() bool {
	if t == nil || t.LogOnly == nil {
		return false
	}
	return *t.LogOnly
}

// GetThreshold retrieves the value of the leaf Threshold from the NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer_FecLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Threshold is set, it can
// safely use t.GetThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Threshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer_FecLimit) GetThreshold() uint32 {
	if t == nil || t.Threshold == nil {
		return 90
	}
	return *t.Threshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer_FecLimit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer_FecLimit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Limit == nil {
		var v uint32 = 0
		t.Limit = &v
	}
	if t.LogOnly == nil {
		var v bool = false
		t.LogOnly = &v
	}
	if t.Threshold == nil {
		var v uint32 = 90
		t.Threshold = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer_FecLimit) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer_FecLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer_FecLimit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer_FecLimit) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer_FecLimit.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer_FecLimit) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer_FecTypeCapability represents the /nokia-conf/configure/groups/group/router/ldp/session-parameters/peer/fec-type-capability YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer_FecTypeCapability struct {
	P2Mp       *bool `path:"p2mp" module:"nokia-conf"`
	PrefixIpv4 *bool `path:"prefix-ipv4" module:"nokia-conf"`
	PrefixIpv6 *bool `path:"prefix-ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer_FecTypeCapability implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer_FecTypeCapability) IsYANGGoStruct() {
}

// GetP2Mp retrieves the value of the leaf P2Mp from the NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer_FecTypeCapability
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if P2Mp is set, it can
// safely use t.GetP2Mp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.P2Mp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer_FecTypeCapability) GetP2Mp() bool {
	if t == nil || t.P2Mp == nil {
		return true
	}
	return *t.P2Mp
}

// GetPrefixIpv4 retrieves the value of the leaf PrefixIpv4 from the NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer_FecTypeCapability
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixIpv4 is set, it can
// safely use t.GetPrefixIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer_FecTypeCapability) GetPrefixIpv4() bool {
	if t == nil || t.PrefixIpv4 == nil {
		return true
	}
	return *t.PrefixIpv4
}

// GetPrefixIpv6 retrieves the value of the leaf PrefixIpv6 from the NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer_FecTypeCapability
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixIpv6 is set, it can
// safely use t.GetPrefixIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer_FecTypeCapability) GetPrefixIpv6() bool {
	if t == nil || t.PrefixIpv6 == nil {
		return true
	}
	return *t.PrefixIpv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer_FecTypeCapability
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer_FecTypeCapability) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.P2Mp == nil {
		var v bool = true
		t.P2Mp = &v
	}
	if t.PrefixIpv4 == nil {
		var v bool = true
		t.PrefixIpv4 = &v
	}
	if t.PrefixIpv6 == nil {
		var v bool = true
		t.PrefixIpv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer_FecTypeCapability) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer_FecTypeCapability"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer_FecTypeCapability) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer_FecTypeCapability) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer_FecTypeCapability.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_SessionParameters_Peer_FecTypeCapability) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession represents the /nokia-conf/configure/groups/group/router/ldp/targeted-session YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession struct {
	AutoRx                 *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoRx                     `path:"auto-rx" module:"nokia-conf"`
	AutoTx                 *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoTx                     `path:"auto-tx" module:"nokia-conf"`
	ExportPrefixes         []string                                                                                `path:"export-prefixes" module:"nokia-conf"`
	ImportPrefixes         []string                                                                                `path:"import-prefixes" module:"nokia-conf"`
	Ipv4                   *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4                       `path:"ipv4" module:"nokia-conf"`
	Ipv6                   *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6                       `path:"ipv6" module:"nokia-conf"`
	Peer                   map[string]*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer            `path:"peer" module:"nokia-conf"`
	PeerTemplate           map[string]*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate    `path:"peer-template" module:"nokia-conf"`
	PeerTemplateMap        map[string]*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplateMap `path:"peer-template-map" module:"nokia-conf"`
	SdpAutoTargetedSession *bool                                                                                   `path:"sdp-auto-targeted-session" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession) IsYANGGoStruct() {}

// NewPeer creates a new entry in the Peer list of the
// NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession) NewPeer(IpAddress string) (*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer)
	}

	key := IpAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Peer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Peer", key)
	}

	t.Peer[key] = &NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer{
		IpAddress: &IpAddress,
	}

	return t.Peer[key], nil
}

// RenamePeer renames an entry in the list Peer within
// the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession) RenamePeer(oldK, newK string) error {
	if _, ok := t.Peer[newK]; ok {
		return fmt.Errorf("key %v already exists in Peer", newK)
	}

	e, ok := t.Peer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Peer", oldK)
	}
	e.IpAddress = &newK

	t.Peer[newK] = e
	delete(t.Peer, oldK)
	return nil
}

// GetOrCreatePeer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession) GetOrCreatePeer(IpAddress string) *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer {

	key := IpAddress

	if v, ok := t.Peer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPeer(IpAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePeer got unexpected error: %v", err))
	}
	return v
}

// GetPeer retrieves the value with the specified key from
// the Peer map field of NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession) GetPeer(IpAddress string) *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer {

	if t == nil {
		return nil
	}

	key := IpAddress

	if lm, ok := t.Peer[key]; ok {
		return lm
	}
	return nil
}

// DeletePeer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession) DeletePeer(IpAddress string) {
	key := IpAddress

	delete(t.Peer, key)
}

// AppendPeer appends the supplied NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer struct to the
// list Peer of NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession) AppendPeer(v *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer) error {
	if v.IpAddress == nil {
		return fmt.Errorf("invalid nil key received for IpAddress")
	}

	key := *v.IpAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer)
	}

	if _, ok := t.Peer[key]; ok {
		return fmt.Errorf("duplicate key for list Peer %v", key)
	}

	t.Peer[key] = v
	return nil
}

// NewPeerTemplate creates a new entry in the PeerTemplate list of the
// NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession) NewPeerTemplate(TemplateName string) (*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PeerTemplate == nil {
		t.PeerTemplate = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate)
	}

	key := TemplateName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PeerTemplate[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PeerTemplate", key)
	}

	t.PeerTemplate[key] = &NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate{
		TemplateName: &TemplateName,
	}

	return t.PeerTemplate[key], nil
}

// RenamePeerTemplate renames an entry in the list PeerTemplate within
// the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession) RenamePeerTemplate(oldK, newK string) error {
	if _, ok := t.PeerTemplate[newK]; ok {
		return fmt.Errorf("key %v already exists in PeerTemplate", newK)
	}

	e, ok := t.PeerTemplate[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PeerTemplate", oldK)
	}
	e.TemplateName = &newK

	t.PeerTemplate[newK] = e
	delete(t.PeerTemplate, oldK)
	return nil
}

// GetOrCreatePeerTemplate retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession) GetOrCreatePeerTemplate(TemplateName string) *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate {

	key := TemplateName

	if v, ok := t.PeerTemplate[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPeerTemplate(TemplateName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePeerTemplate got unexpected error: %v", err))
	}
	return v
}

// GetPeerTemplate retrieves the value with the specified key from
// the PeerTemplate map field of NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession) GetPeerTemplate(TemplateName string) *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate {

	if t == nil {
		return nil
	}

	key := TemplateName

	if lm, ok := t.PeerTemplate[key]; ok {
		return lm
	}
	return nil
}

// DeletePeerTemplate deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession) DeletePeerTemplate(TemplateName string) {
	key := TemplateName

	delete(t.PeerTemplate, key)
}

// AppendPeerTemplate appends the supplied NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate struct to the
// list PeerTemplate of NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession) AppendPeerTemplate(v *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate) error {
	if v.TemplateName == nil {
		return fmt.Errorf("invalid nil key received for TemplateName")
	}

	key := *v.TemplateName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PeerTemplate == nil {
		t.PeerTemplate = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate)
	}

	if _, ok := t.PeerTemplate[key]; ok {
		return fmt.Errorf("duplicate key for list PeerTemplate %v", key)
	}

	t.PeerTemplate[key] = v
	return nil
}

// NewPeerTemplateMap creates a new entry in the PeerTemplateMap list of the
// NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession) NewPeerTemplateMap(TemplateMapName string) (*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplateMap, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PeerTemplateMap == nil {
		t.PeerTemplateMap = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplateMap)
	}

	key := TemplateMapName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PeerTemplateMap[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PeerTemplateMap", key)
	}

	t.PeerTemplateMap[key] = &NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplateMap{
		TemplateMapName: &TemplateMapName,
	}

	return t.PeerTemplateMap[key], nil
}

// RenamePeerTemplateMap renames an entry in the list PeerTemplateMap within
// the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession) RenamePeerTemplateMap(oldK, newK string) error {
	if _, ok := t.PeerTemplateMap[newK]; ok {
		return fmt.Errorf("key %v already exists in PeerTemplateMap", newK)
	}

	e, ok := t.PeerTemplateMap[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PeerTemplateMap", oldK)
	}
	e.TemplateMapName = &newK

	t.PeerTemplateMap[newK] = e
	delete(t.PeerTemplateMap, oldK)
	return nil
}

// GetOrCreatePeerTemplateMap retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession) GetOrCreatePeerTemplateMap(TemplateMapName string) *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplateMap {

	key := TemplateMapName

	if v, ok := t.PeerTemplateMap[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPeerTemplateMap(TemplateMapName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePeerTemplateMap got unexpected error: %v", err))
	}
	return v
}

// GetPeerTemplateMap retrieves the value with the specified key from
// the PeerTemplateMap map field of NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession) GetPeerTemplateMap(TemplateMapName string) *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplateMap {

	if t == nil {
		return nil
	}

	key := TemplateMapName

	if lm, ok := t.PeerTemplateMap[key]; ok {
		return lm
	}
	return nil
}

// DeletePeerTemplateMap deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession) DeletePeerTemplateMap(TemplateMapName string) {
	key := TemplateMapName

	delete(t.PeerTemplateMap, key)
}

// AppendPeerTemplateMap appends the supplied NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplateMap struct to the
// list PeerTemplateMap of NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplateMap already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession) AppendPeerTemplateMap(v *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplateMap) error {
	if v.TemplateMapName == nil {
		return fmt.Errorf("invalid nil key received for TemplateMapName")
	}

	key := *v.TemplateMapName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PeerTemplateMap == nil {
		t.PeerTemplateMap = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplateMap)
	}

	if _, ok := t.PeerTemplateMap[key]; ok {
		return fmt.Errorf("duplicate key for list PeerTemplateMap %v", key)
	}

	t.PeerTemplateMap[key] = v
	return nil
}

// GetOrCreateAutoRx retrieves the value of the AutoRx field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession) GetOrCreateAutoRx() *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoRx {
	if t.AutoRx != nil {
		return t.AutoRx
	}
	t.AutoRx = &NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoRx{}
	return t.AutoRx
}

// GetOrCreateAutoTx retrieves the value of the AutoTx field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession) GetOrCreateAutoTx() *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoTx {
	if t.AutoTx != nil {
		return t.AutoTx
	}
	t.AutoTx = &NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoTx{}
	return t.AutoTx
}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession) GetOrCreateIpv4() *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession) GetOrCreateIpv6() *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6{}
	return t.Ipv6
}

// GetAutoRx returns the value of the AutoRx struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession. If the receiver or the field AutoRx is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession) GetAutoRx() *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoRx {
	if t != nil && t.AutoRx != nil {
		return t.AutoRx
	}
	return nil
}

// GetAutoTx returns the value of the AutoTx struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession. If the receiver or the field AutoTx is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession) GetAutoTx() *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoTx {
	if t != nil && t.AutoTx != nil {
		return t.AutoTx
	}
	return nil
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession) GetIpv4() *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession) GetIpv6() *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// GetExportPrefixes retrieves the value of the leaf ExportPrefixes from the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPrefixes is set, it can
// safely use t.GetExportPrefixes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPrefixes == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession) GetExportPrefixes() []string {
	if t == nil || t.ExportPrefixes == nil {
		return nil
	}
	return t.ExportPrefixes
}

// GetImportPrefixes retrieves the value of the leaf ImportPrefixes from the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPrefixes is set, it can
// safely use t.GetImportPrefixes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPrefixes == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession) GetImportPrefixes() []string {
	if t == nil || t.ImportPrefixes == nil {
		return nil
	}
	return t.ImportPrefixes
}

// GetSdpAutoTargetedSession retrieves the value of the leaf SdpAutoTargetedSession from the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SdpAutoTargetedSession is set, it can
// safely use t.GetSdpAutoTargetedSession() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SdpAutoTargetedSession == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession) GetSdpAutoTargetedSession() bool {
	if t == nil || t.SdpAutoTargetedSession == nil {
		return true
	}
	return *t.SdpAutoTargetedSession
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SdpAutoTargetedSession == nil {
		var v bool = true
		t.SdpAutoTargetedSession = &v
	}
	t.AutoRx.PopulateDefaults()
	t.AutoTx.PopulateDefaults()
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
	for _, e := range t.Peer {
		e.PopulateDefaults()
	}
	for _, e := range t.PeerTemplate {
		e.PopulateDefaults()
	}
	for _, e := range t.PeerTemplateMap {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoRx represents the /nokia-conf/configure/groups/group/router/ldp/targeted-session/auto-rx YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoRx struct {
	Ipv4 *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoRx_Ipv4 `path:"ipv4" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoRx implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoRx) IsYANGGoStruct() {}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoRx) GetOrCreateIpv4() *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoRx_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoRx_Ipv4{}
	return t.Ipv4
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoRx. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoRx) GetIpv4() *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoRx_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoRx
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoRx) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ipv4.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoRx) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoRx"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoRx) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoRx) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoRx.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoRx) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoRx_Ipv4 represents the /nokia-conf/configure/groups/group/router/ldp/targeted-session/auto-rx/ipv4 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoRx_Ipv4 struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Tunneling  *bool                       `path:"tunneling" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoRx_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoRx_Ipv4) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoRx_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoRx_Ipv4) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetTunneling retrieves the value of the leaf Tunneling from the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoRx_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tunneling is set, it can
// safely use t.GetTunneling() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tunneling == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoRx_Ipv4) GetTunneling() bool {
	if t == nil || t.Tunneling == nil {
		return false
	}
	return *t.Tunneling
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoRx_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoRx_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Tunneling == nil {
		var v bool = false
		t.Tunneling = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoRx_Ipv4) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoRx_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoRx_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoRx_Ipv4) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoRx_Ipv4.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoRx_Ipv4) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoTx represents the /nokia-conf/configure/groups/group/router/ldp/targeted-session/auto-tx YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoTx struct {
	Ipv4 *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoTx_Ipv4 `path:"ipv4" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoTx implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoTx) IsYANGGoStruct() {}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoTx) GetOrCreateIpv4() *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoTx_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoTx_Ipv4{}
	return t.Ipv4
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoTx. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoTx) GetIpv4() *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoTx_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoTx
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoTx) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ipv4.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoTx) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoTx"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoTx) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoTx) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoTx.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoTx) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoTx_Ipv4 represents the /nokia-conf/configure/groups/group/router/ldp/targeted-session/auto-tx/ipv4 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoTx_Ipv4 struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Tunneling  *bool                       `path:"tunneling" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoTx_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoTx_Ipv4) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoTx_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoTx_Ipv4) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetTunneling retrieves the value of the leaf Tunneling from the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoTx_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tunneling is set, it can
// safely use t.GetTunneling() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tunneling == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoTx_Ipv4) GetTunneling() bool {
	if t == nil || t.Tunneling == nil {
		return false
	}
	return *t.Tunneling
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoTx_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoTx_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Tunneling == nil {
		var v bool = false
		t.Tunneling = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoTx_Ipv4) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoTx_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoTx_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoTx_Ipv4) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoTx_Ipv4.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_AutoTx_Ipv4) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4 represents the /nokia-conf/configure/groups/group/router/ldp/targeted-session/ipv4 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4 struct {
	Hello          *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4_Hello          `path:"hello" module:"nokia-conf"`
	HelloReduction *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4_HelloReduction `path:"hello-reduction" module:"nokia-conf"`
	Keepalive      *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4_Keepalive      `path:"keepalive" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4) IsYANGGoStruct() {}

// GetOrCreateHello retrieves the value of the Hello field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4) GetOrCreateHello() *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4_Hello {
	if t.Hello != nil {
		return t.Hello
	}
	t.Hello = &NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4_Hello{}
	return t.Hello
}

// GetOrCreateHelloReduction retrieves the value of the HelloReduction field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4) GetOrCreateHelloReduction() *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4_HelloReduction {
	if t.HelloReduction != nil {
		return t.HelloReduction
	}
	t.HelloReduction = &NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4_HelloReduction{}
	return t.HelloReduction
}

// GetOrCreateKeepalive retrieves the value of the Keepalive field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4) GetOrCreateKeepalive() *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4_Keepalive {
	if t.Keepalive != nil {
		return t.Keepalive
	}
	t.Keepalive = &NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4_Keepalive{}
	return t.Keepalive
}

// GetHello returns the value of the Hello struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4. If the receiver or the field Hello is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4) GetHello() *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4_Hello {
	if t != nil && t.Hello != nil {
		return t.Hello
	}
	return nil
}

// GetHelloReduction returns the value of the HelloReduction struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4. If the receiver or the field HelloReduction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4) GetHelloReduction() *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4_HelloReduction {
	if t != nil && t.HelloReduction != nil {
		return t.HelloReduction
	}
	return nil
}

// GetKeepalive returns the value of the Keepalive struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4. If the receiver or the field Keepalive is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4) GetKeepalive() *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4_Keepalive {
	if t != nil && t.Keepalive != nil {
		return t.Keepalive
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Hello.PopulateDefaults()
	t.HelloReduction.PopulateDefaults()
	t.Keepalive.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4_Hello represents the /nokia-conf/configure/groups/group/router/ldp/targeted-session/ipv4/hello YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4_Hello struct {
	Factor  *uint32 `path:"factor" module:"nokia-conf"`
	Timeout *uint32 `path:"timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4_Hello implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4_Hello) IsYANGGoStruct() {}

// GetFactor retrieves the value of the leaf Factor from the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4_Hello
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Factor is set, it can
// safely use t.GetFactor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Factor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4_Hello) GetFactor() uint32 {
	if t == nil || t.Factor == nil {
		return 3
	}
	return *t.Factor
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4_Hello
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4_Hello) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 45
	}
	return *t.Timeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4_Hello
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4_Hello) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Factor == nil {
		var v uint32 = 3
		t.Factor = &v
	}
	if t.Timeout == nil {
		var v uint32 = 45
		t.Timeout = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4_Hello) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4_Hello"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4_Hello) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4_Hello) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4_Hello.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4_Hello) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4_HelloReduction represents the /nokia-conf/configure/groups/group/router/ldp/targeted-session/ipv4/hello-reduction YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4_HelloReduction struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Factor     *uint32                     `path:"factor" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4_HelloReduction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4_HelloReduction) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4_HelloReduction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4_HelloReduction) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetFactor retrieves the value of the leaf Factor from the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4_HelloReduction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Factor is set, it can
// safely use t.GetFactor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Factor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4_HelloReduction) GetFactor() uint32 {
	if t == nil || t.Factor == nil {
		return 3
	}
	return *t.Factor
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4_HelloReduction
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4_HelloReduction) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Factor == nil {
		var v uint32 = 3
		t.Factor = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4_HelloReduction) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4_HelloReduction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4_HelloReduction) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4_HelloReduction) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4_HelloReduction.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4_HelloReduction) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4_Keepalive represents the /nokia-conf/configure/groups/group/router/ldp/targeted-session/ipv4/keepalive YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4_Keepalive struct {
	Factor  *uint32 `path:"factor" module:"nokia-conf"`
	Timeout *uint32 `path:"timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4_Keepalive implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4_Keepalive) IsYANGGoStruct() {}

// GetFactor retrieves the value of the leaf Factor from the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4_Keepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Factor is set, it can
// safely use t.GetFactor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Factor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4_Keepalive) GetFactor() uint32 {
	if t == nil || t.Factor == nil {
		return 4
	}
	return *t.Factor
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4_Keepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4_Keepalive) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 40
	}
	return *t.Timeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4_Keepalive
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4_Keepalive) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Factor == nil {
		var v uint32 = 4
		t.Factor = &v
	}
	if t.Timeout == nil {
		var v uint32 = 40
		t.Timeout = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4_Keepalive) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4_Keepalive"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4_Keepalive) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4_Keepalive) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4_Keepalive.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv4_Keepalive) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6 represents the /nokia-conf/configure/groups/group/router/ldp/targeted-session/ipv6 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6 struct {
	Hello          *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6_Hello          `path:"hello" module:"nokia-conf"`
	HelloReduction *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6_HelloReduction `path:"hello-reduction" module:"nokia-conf"`
	Keepalive      *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6_Keepalive      `path:"keepalive" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6) IsYANGGoStruct() {}

// GetOrCreateHello retrieves the value of the Hello field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6) GetOrCreateHello() *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6_Hello {
	if t.Hello != nil {
		return t.Hello
	}
	t.Hello = &NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6_Hello{}
	return t.Hello
}

// GetOrCreateHelloReduction retrieves the value of the HelloReduction field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6) GetOrCreateHelloReduction() *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6_HelloReduction {
	if t.HelloReduction != nil {
		return t.HelloReduction
	}
	t.HelloReduction = &NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6_HelloReduction{}
	return t.HelloReduction
}

// GetOrCreateKeepalive retrieves the value of the Keepalive field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6) GetOrCreateKeepalive() *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6_Keepalive {
	if t.Keepalive != nil {
		return t.Keepalive
	}
	t.Keepalive = &NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6_Keepalive{}
	return t.Keepalive
}

// GetHello returns the value of the Hello struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6. If the receiver or the field Hello is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6) GetHello() *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6_Hello {
	if t != nil && t.Hello != nil {
		return t.Hello
	}
	return nil
}

// GetHelloReduction returns the value of the HelloReduction struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6. If the receiver or the field HelloReduction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6) GetHelloReduction() *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6_HelloReduction {
	if t != nil && t.HelloReduction != nil {
		return t.HelloReduction
	}
	return nil
}

// GetKeepalive returns the value of the Keepalive struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6. If the receiver or the field Keepalive is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6) GetKeepalive() *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6_Keepalive {
	if t != nil && t.Keepalive != nil {
		return t.Keepalive
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Hello.PopulateDefaults()
	t.HelloReduction.PopulateDefaults()
	t.Keepalive.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6_Hello represents the /nokia-conf/configure/groups/group/router/ldp/targeted-session/ipv6/hello YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6_Hello struct {
	Factor  *uint32 `path:"factor" module:"nokia-conf"`
	Timeout *uint32 `path:"timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6_Hello implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6_Hello) IsYANGGoStruct() {}

// GetFactor retrieves the value of the leaf Factor from the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6_Hello
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Factor is set, it can
// safely use t.GetFactor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Factor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6_Hello) GetFactor() uint32 {
	if t == nil || t.Factor == nil {
		return 3
	}
	return *t.Factor
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6_Hello
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6_Hello) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 45
	}
	return *t.Timeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6_Hello
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6_Hello) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Factor == nil {
		var v uint32 = 3
		t.Factor = &v
	}
	if t.Timeout == nil {
		var v uint32 = 45
		t.Timeout = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6_Hello) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6_Hello"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6_Hello) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6_Hello) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6_Hello.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6_Hello) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6_HelloReduction represents the /nokia-conf/configure/groups/group/router/ldp/targeted-session/ipv6/hello-reduction YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6_HelloReduction struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Factor     *uint32                     `path:"factor" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6_HelloReduction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6_HelloReduction) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6_HelloReduction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6_HelloReduction) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetFactor retrieves the value of the leaf Factor from the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6_HelloReduction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Factor is set, it can
// safely use t.GetFactor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Factor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6_HelloReduction) GetFactor() uint32 {
	if t == nil || t.Factor == nil {
		return 3
	}
	return *t.Factor
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6_HelloReduction
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6_HelloReduction) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Factor == nil {
		var v uint32 = 3
		t.Factor = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6_HelloReduction) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6_HelloReduction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6_HelloReduction) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6_HelloReduction) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6_HelloReduction.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6_HelloReduction) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6_Keepalive represents the /nokia-conf/configure/groups/group/router/ldp/targeted-session/ipv6/keepalive YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6_Keepalive struct {
	Factor  *uint32 `path:"factor" module:"nokia-conf"`
	Timeout *uint32 `path:"timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6_Keepalive implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6_Keepalive) IsYANGGoStruct() {}

// GetFactor retrieves the value of the leaf Factor from the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6_Keepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Factor is set, it can
// safely use t.GetFactor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Factor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6_Keepalive) GetFactor() uint32 {
	if t == nil || t.Factor == nil {
		return 4
	}
	return *t.Factor
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6_Keepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6_Keepalive) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 40
	}
	return *t.Timeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6_Keepalive
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6_Keepalive) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Factor == nil {
		var v uint32 = 4
		t.Factor = &v
	}
	if t.Timeout == nil {
		var v uint32 = 40
		t.Timeout = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6_Keepalive) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6_Keepalive"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6_Keepalive) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6_Keepalive) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6_Keepalive.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Ipv6_Keepalive) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer represents the /nokia-conf/configure/groups/group/router/ldp/targeted-session/peer YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer struct {
	AdminState     E_NokiaTypesSros_AdminState                                                      `path:"admin-state" module:"nokia-conf"`
	BfdLiveness    *bool                                                                            `path:"bfd-liveness" module:"nokia-conf"`
	Hello          *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Hello          `path:"hello" module:"nokia-conf" yangPresence:"true"`
	HelloReduction *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_HelloReduction `path:"hello-reduction" module:"nokia-conf" yangPresence:"true"`
	IpAddress      *string                                                                          `path:"ip-address" module:"nokia-conf"`
	Keepalive      *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Keepalive      `path:"keepalive" module:"nokia-conf" yangPresence:"true"`
	LocalLsrId     *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_LocalLsrId     `path:"local-lsr-id" module:"nokia-conf"`
	McastTunneling *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_McastTunneling `path:"mcast-tunneling" module:"nokia-conf" yangPresence:"true"`
	Tunneling      *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Tunneling      `path:"tunneling" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer) IsYANGGoStruct() {}

// GetOrCreateHello retrieves the value of the Hello field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer) GetOrCreateHello() *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Hello {
	if t.Hello != nil {
		return t.Hello
	}
	t.Hello = &NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Hello{}
	return t.Hello
}

// GetOrCreateHelloReduction retrieves the value of the HelloReduction field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer) GetOrCreateHelloReduction() *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_HelloReduction {
	if t.HelloReduction != nil {
		return t.HelloReduction
	}
	t.HelloReduction = &NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_HelloReduction{}
	return t.HelloReduction
}

// GetOrCreateKeepalive retrieves the value of the Keepalive field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer) GetOrCreateKeepalive() *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Keepalive {
	if t.Keepalive != nil {
		return t.Keepalive
	}
	t.Keepalive = &NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Keepalive{}
	return t.Keepalive
}

// GetOrCreateLocalLsrId retrieves the value of the LocalLsrId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer) GetOrCreateLocalLsrId() *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_LocalLsrId {
	if t.LocalLsrId != nil {
		return t.LocalLsrId
	}
	t.LocalLsrId = &NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_LocalLsrId{}
	return t.LocalLsrId
}

// GetOrCreateMcastTunneling retrieves the value of the McastTunneling field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer) GetOrCreateMcastTunneling() *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_McastTunneling {
	if t.McastTunneling != nil {
		return t.McastTunneling
	}
	t.McastTunneling = &NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_McastTunneling{}
	return t.McastTunneling
}

// GetOrCreateTunneling retrieves the value of the Tunneling field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer) GetOrCreateTunneling() *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Tunneling {
	if t.Tunneling != nil {
		return t.Tunneling
	}
	t.Tunneling = &NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Tunneling{}
	return t.Tunneling
}

// GetHello returns the value of the Hello struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer. If the receiver or the field Hello is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer) GetHello() *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Hello {
	if t != nil && t.Hello != nil {
		return t.Hello
	}
	return nil
}

// GetHelloReduction returns the value of the HelloReduction struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer. If the receiver or the field HelloReduction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer) GetHelloReduction() *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_HelloReduction {
	if t != nil && t.HelloReduction != nil {
		return t.HelloReduction
	}
	return nil
}

// GetKeepalive returns the value of the Keepalive struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer. If the receiver or the field Keepalive is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer) GetKeepalive() *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Keepalive {
	if t != nil && t.Keepalive != nil {
		return t.Keepalive
	}
	return nil
}

// GetLocalLsrId returns the value of the LocalLsrId struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer. If the receiver or the field LocalLsrId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer) GetLocalLsrId() *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_LocalLsrId {
	if t != nil && t.LocalLsrId != nil {
		return t.LocalLsrId
	}
	return nil
}

// GetMcastTunneling returns the value of the McastTunneling struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer. If the receiver or the field McastTunneling is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer) GetMcastTunneling() *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_McastTunneling {
	if t != nil && t.McastTunneling != nil {
		return t.McastTunneling
	}
	return nil
}

// GetTunneling returns the value of the Tunneling struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer. If the receiver or the field Tunneling is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer) GetTunneling() *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Tunneling {
	if t != nil && t.Tunneling != nil {
		return t.Tunneling
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetBfdLiveness retrieves the value of the leaf BfdLiveness from the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdLiveness is set, it can
// safely use t.GetBfdLiveness() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdLiveness == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer) GetBfdLiveness() bool {
	if t == nil || t.BfdLiveness == nil {
		return false
	}
	return *t.BfdLiveness
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.BfdLiveness == nil {
		var v bool = false
		t.BfdLiveness = &v
	}
	t.Hello.PopulateDefaults()
	t.HelloReduction.PopulateDefaults()
	t.Keepalive.PopulateDefaults()
	t.LocalLsrId.PopulateDefaults()
	t.McastTunneling.PopulateDefaults()
	t.Tunneling.PopulateDefaults()
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.IpAddress == nil {
		return nil, fmt.Errorf("nil value for key IpAddress")
	}

	return map[string]interface{}{
		"ip-address": *t.IpAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate represents the /nokia-conf/configure/groups/group/router/ldp/targeted-session/peer-template YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate struct {
	AdminState     E_NokiaTypesSros_AdminState                                                              `path:"admin-state" module:"nokia-conf"`
	AdvLocalLsrId  *bool                                                                                    `path:"adv-local-lsr-id" module:"nokia-conf"`
	BfdLiveness    *bool                                                                                    `path:"bfd-liveness" module:"nokia-conf"`
	Community      *string                                                                                  `path:"community" module:"nokia-conf"`
	Hello          *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_Hello          `path:"hello" module:"nokia-conf" yangPresence:"true"`
	HelloReduction *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_HelloReduction `path:"hello-reduction" module:"nokia-conf" yangPresence:"true"`
	Keepalive      *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_Keepalive      `path:"keepalive" module:"nokia-conf" yangPresence:"true"`
	LocalLsrId     *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_LocalLsrId     `path:"local-lsr-id" module:"nokia-conf"`
	McastTunneling *bool                                                                                    `path:"mcast-tunneling" module:"nokia-conf"`
	TemplateName   *string                                                                                  `path:"template-name" module:"nokia-conf"`
	Tunneling      *bool                                                                                    `path:"tunneling" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate) IsYANGGoStruct() {}

// GetOrCreateHello retrieves the value of the Hello field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate) GetOrCreateHello() *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_Hello {
	if t.Hello != nil {
		return t.Hello
	}
	t.Hello = &NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_Hello{}
	return t.Hello
}

// GetOrCreateHelloReduction retrieves the value of the HelloReduction field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate) GetOrCreateHelloReduction() *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_HelloReduction {
	if t.HelloReduction != nil {
		return t.HelloReduction
	}
	t.HelloReduction = &NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_HelloReduction{}
	return t.HelloReduction
}

// GetOrCreateKeepalive retrieves the value of the Keepalive field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate) GetOrCreateKeepalive() *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_Keepalive {
	if t.Keepalive != nil {
		return t.Keepalive
	}
	t.Keepalive = &NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_Keepalive{}
	return t.Keepalive
}

// GetOrCreateLocalLsrId retrieves the value of the LocalLsrId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate) GetOrCreateLocalLsrId() *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_LocalLsrId {
	if t.LocalLsrId != nil {
		return t.LocalLsrId
	}
	t.LocalLsrId = &NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_LocalLsrId{}
	return t.LocalLsrId
}

// GetHello returns the value of the Hello struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate. If the receiver or the field Hello is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate) GetHello() *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_Hello {
	if t != nil && t.Hello != nil {
		return t.Hello
	}
	return nil
}

// GetHelloReduction returns the value of the HelloReduction struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate. If the receiver or the field HelloReduction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate) GetHelloReduction() *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_HelloReduction {
	if t != nil && t.HelloReduction != nil {
		return t.HelloReduction
	}
	return nil
}

// GetKeepalive returns the value of the Keepalive struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate. If the receiver or the field Keepalive is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate) GetKeepalive() *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_Keepalive {
	if t != nil && t.Keepalive != nil {
		return t.Keepalive
	}
	return nil
}

// GetLocalLsrId returns the value of the LocalLsrId struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate. If the receiver or the field LocalLsrId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate) GetLocalLsrId() *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_LocalLsrId {
	if t != nil && t.LocalLsrId != nil {
		return t.LocalLsrId
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetAdvLocalLsrId retrieves the value of the leaf AdvLocalLsrId from the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvLocalLsrId is set, it can
// safely use t.GetAdvLocalLsrId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvLocalLsrId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate) GetAdvLocalLsrId() bool {
	if t == nil || t.AdvLocalLsrId == nil {
		return false
	}
	return *t.AdvLocalLsrId
}

// GetBfdLiveness retrieves the value of the leaf BfdLiveness from the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdLiveness is set, it can
// safely use t.GetBfdLiveness() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdLiveness == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate) GetBfdLiveness() bool {
	if t == nil || t.BfdLiveness == nil {
		return false
	}
	return *t.BfdLiveness
}

// GetCommunity retrieves the value of the leaf Community from the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Community is set, it can
// safely use t.GetCommunity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Community == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate) GetCommunity() string {
	if t == nil || t.Community == nil {
		return ""
	}
	return *t.Community
}

// GetMcastTunneling retrieves the value of the leaf McastTunneling from the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McastTunneling is set, it can
// safely use t.GetMcastTunneling() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McastTunneling == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate) GetMcastTunneling() bool {
	if t == nil || t.McastTunneling == nil {
		return false
	}
	return *t.McastTunneling
}

// GetTemplateName retrieves the value of the leaf TemplateName from the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TemplateName is set, it can
// safely use t.GetTemplateName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TemplateName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate) GetTemplateName() string {
	if t == nil || t.TemplateName == nil {
		return ""
	}
	return *t.TemplateName
}

// GetTunneling retrieves the value of the leaf Tunneling from the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tunneling is set, it can
// safely use t.GetTunneling() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tunneling == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate) GetTunneling() bool {
	if t == nil || t.Tunneling == nil {
		return false
	}
	return *t.Tunneling
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.AdvLocalLsrId == nil {
		var v bool = false
		t.AdvLocalLsrId = &v
	}
	if t.BfdLiveness == nil {
		var v bool = false
		t.BfdLiveness = &v
	}
	if t.McastTunneling == nil {
		var v bool = false
		t.McastTunneling = &v
	}
	if t.Tunneling == nil {
		var v bool = false
		t.Tunneling = &v
	}
	t.Hello.PopulateDefaults()
	t.HelloReduction.PopulateDefaults()
	t.Keepalive.PopulateDefaults()
	t.LocalLsrId.PopulateDefaults()
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.TemplateName == nil {
		return nil, fmt.Errorf("nil value for key TemplateName")
	}

	return map[string]interface{}{
		"template-name": *t.TemplateName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplateMap represents the /nokia-conf/configure/groups/group/router/ldp/targeted-session/peer-template-map YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplateMap struct {
	PolicyMap       []string `path:"policy-map" module:"nokia-conf"`
	TemplateMapName *string  `path:"template-map-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplateMap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplateMap) IsYANGGoStruct() {
}

// GetPolicyMap retrieves the value of the leaf PolicyMap from the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplateMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyMap is set, it can
// safely use t.GetPolicyMap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyMap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplateMap) GetPolicyMap() []string {
	if t == nil || t.PolicyMap == nil {
		return nil
	}
	return t.PolicyMap
}

// GetTemplateMapName retrieves the value of the leaf TemplateMapName from the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplateMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TemplateMapName is set, it can
// safely use t.GetTemplateMapName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TemplateMapName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplateMap) GetTemplateMapName() string {
	if t == nil || t.TemplateMapName == nil {
		return ""
	}
	return *t.TemplateMapName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplateMap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplateMap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplateMap struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplateMap) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.TemplateMapName == nil {
		return nil, fmt.Errorf("nil value for key TemplateMapName")
	}

	return map[string]interface{}{
		"template-map-name": *t.TemplateMapName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplateMap) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplateMap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplateMap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplateMap) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplateMap.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplateMap) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_Hello represents the /nokia-conf/configure/groups/group/router/ldp/targeted-session/peer-template/hello YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_Hello struct {
	Factor  *uint32 `path:"factor" module:"nokia-conf"`
	Timeout *uint32 `path:"timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_Hello implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_Hello) IsYANGGoStruct() {
}

// GetFactor retrieves the value of the leaf Factor from the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_Hello
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Factor is set, it can
// safely use t.GetFactor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Factor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_Hello) GetFactor() uint32 {
	if t == nil || t.Factor == nil {
		return 0
	}
	return *t.Factor
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_Hello
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_Hello) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 0
	}
	return *t.Timeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_Hello
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_Hello) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_Hello) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_Hello"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_Hello) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_Hello) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_Hello.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_Hello) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_HelloReduction represents the /nokia-conf/configure/groups/group/router/ldp/targeted-session/peer-template/hello-reduction YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_HelloReduction struct {
	AdminState E_NokiaTypesSros_AdminStateWithInherit `path:"admin-state" module:"nokia-conf"`
	Factor     *uint32                                `path:"factor" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_HelloReduction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_HelloReduction) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_HelloReduction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_HelloReduction) GetAdminState() E_NokiaTypesSros_AdminStateWithInherit {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetFactor retrieves the value of the leaf Factor from the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_HelloReduction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Factor is set, it can
// safely use t.GetFactor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Factor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_HelloReduction) GetFactor() uint32 {
	if t == nil || t.Factor == nil {
		return 0
	}
	return *t.Factor
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_HelloReduction
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_HelloReduction) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_HelloReduction) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_HelloReduction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_HelloReduction) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_HelloReduction) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_HelloReduction.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_HelloReduction) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_Keepalive represents the /nokia-conf/configure/groups/group/router/ldp/targeted-session/peer-template/keepalive YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_Keepalive struct {
	Factor  *uint32 `path:"factor" module:"nokia-conf"`
	Timeout *uint32 `path:"timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_Keepalive implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_Keepalive) IsYANGGoStruct() {
}

// GetFactor retrieves the value of the leaf Factor from the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_Keepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Factor is set, it can
// safely use t.GetFactor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Factor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_Keepalive) GetFactor() uint32 {
	if t == nil || t.Factor == nil {
		return 0
	}
	return *t.Factor
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_Keepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_Keepalive) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 0
	}
	return *t.Timeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_Keepalive
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_Keepalive) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_Keepalive) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_Keepalive"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_Keepalive) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_Keepalive) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_Keepalive.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_Keepalive) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_LocalLsrId represents the /nokia-conf/configure/groups/group/router/ldp/targeted-session/peer-template/local-lsr-id YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_LocalLsrId struct {
	InterfaceName *string `path:"interface-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_LocalLsrId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_LocalLsrId) IsYANGGoStruct() {
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_LocalLsrId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_LocalLsrId) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_LocalLsrId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_LocalLsrId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_LocalLsrId) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_LocalLsrId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_LocalLsrId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_LocalLsrId) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_LocalLsrId.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_PeerTemplate_LocalLsrId) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Hello represents the /nokia-conf/configure/groups/group/router/ldp/targeted-session/peer/hello YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Hello struct {
	Factor  *uint32 `path:"factor" module:"nokia-conf"`
	Timeout *uint32 `path:"timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Hello implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Hello) IsYANGGoStruct() {}

// GetFactor retrieves the value of the leaf Factor from the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Hello
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Factor is set, it can
// safely use t.GetFactor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Factor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Hello) GetFactor() uint32 {
	if t == nil || t.Factor == nil {
		return 0
	}
	return *t.Factor
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Hello
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Hello) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 0
	}
	return *t.Timeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Hello
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Hello) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Hello) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Hello"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Hello) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Hello) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Hello.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Hello) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_HelloReduction represents the /nokia-conf/configure/groups/group/router/ldp/targeted-session/peer/hello-reduction YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_HelloReduction struct {
	AdminState E_NokiaTypesSros_AdminStateWithInherit `path:"admin-state" module:"nokia-conf"`
	Factor     *uint32                                `path:"factor" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_HelloReduction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_HelloReduction) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_HelloReduction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_HelloReduction) GetAdminState() E_NokiaTypesSros_AdminStateWithInherit {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetFactor retrieves the value of the leaf Factor from the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_HelloReduction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Factor is set, it can
// safely use t.GetFactor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Factor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_HelloReduction) GetFactor() uint32 {
	if t == nil || t.Factor == nil {
		return 0
	}
	return *t.Factor
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_HelloReduction
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_HelloReduction) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_HelloReduction) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_HelloReduction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_HelloReduction) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_HelloReduction) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_HelloReduction.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_HelloReduction) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Keepalive represents the /nokia-conf/configure/groups/group/router/ldp/targeted-session/peer/keepalive YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Keepalive struct {
	Factor  *uint32 `path:"factor" module:"nokia-conf"`
	Timeout *uint32 `path:"timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Keepalive implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Keepalive) IsYANGGoStruct() {}

// GetFactor retrieves the value of the leaf Factor from the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Keepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Factor is set, it can
// safely use t.GetFactor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Factor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Keepalive) GetFactor() uint32 {
	if t == nil || t.Factor == nil {
		return 0
	}
	return *t.Factor
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Keepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Keepalive) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 0
	}
	return *t.Timeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Keepalive
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Keepalive) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Keepalive) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Keepalive"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Keepalive) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Keepalive) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Keepalive.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Keepalive) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_LocalLsrId represents the /nokia-conf/configure/groups/group/router/ldp/targeted-session/peer/local-lsr-id YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_LocalLsrId struct {
	Format_32Bit  *bool   `path:"format-32bit" module:"nokia-conf"`
	InterfaceName *string `path:"interface-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_LocalLsrId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_LocalLsrId) IsYANGGoStruct() {
}

// GetFormat_32Bit retrieves the value of the leaf Format_32Bit from the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_LocalLsrId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Format_32Bit is set, it can
// safely use t.GetFormat_32Bit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Format_32Bit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_LocalLsrId) GetFormat_32Bit() bool {
	if t == nil || t.Format_32Bit == nil {
		return false
	}
	return *t.Format_32Bit
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_LocalLsrId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_LocalLsrId) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_LocalLsrId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_LocalLsrId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Format_32Bit == nil {
		var v bool = false
		t.Format_32Bit = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_LocalLsrId) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_LocalLsrId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_LocalLsrId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_LocalLsrId) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_LocalLsrId.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_LocalLsrId) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_McastTunneling represents the /nokia-conf/configure/groups/group/router/ldp/targeted-session/peer/mcast-tunneling YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_McastTunneling struct {
	Lsp map[string]*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_McastTunneling_Lsp `path:"lsp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_McastTunneling implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_McastTunneling) IsYANGGoStruct() {
}

// NewLsp creates a new entry in the Lsp list of the
// NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_McastTunneling struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_McastTunneling) NewLsp(LspName string) (*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_McastTunneling_Lsp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Lsp == nil {
		t.Lsp = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_McastTunneling_Lsp)
	}

	key := LspName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Lsp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Lsp", key)
	}

	t.Lsp[key] = &NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_McastTunneling_Lsp{
		LspName: &LspName,
	}

	return t.Lsp[key], nil
}

// RenameLsp renames an entry in the list Lsp within
// the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_McastTunneling struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_McastTunneling) RenameLsp(oldK, newK string) error {
	if _, ok := t.Lsp[newK]; ok {
		return fmt.Errorf("key %v already exists in Lsp", newK)
	}

	e, ok := t.Lsp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Lsp", oldK)
	}
	e.LspName = &newK

	t.Lsp[newK] = e
	delete(t.Lsp, oldK)
	return nil
}

// GetOrCreateLsp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_McastTunneling. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_McastTunneling) GetOrCreateLsp(LspName string) *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_McastTunneling_Lsp {

	key := LspName

	if v, ok := t.Lsp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLsp(LspName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLsp got unexpected error: %v", err))
	}
	return v
}

// GetLsp retrieves the value with the specified key from
// the Lsp map field of NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_McastTunneling. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_McastTunneling) GetLsp(LspName string) *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_McastTunneling_Lsp {

	if t == nil {
		return nil
	}

	key := LspName

	if lm, ok := t.Lsp[key]; ok {
		return lm
	}
	return nil
}

// DeleteLsp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_McastTunneling. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_McastTunneling) DeleteLsp(LspName string) {
	key := LspName

	delete(t.Lsp, key)
}

// AppendLsp appends the supplied NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_McastTunneling_Lsp struct to the
// list Lsp of NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_McastTunneling. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_McastTunneling_Lsp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_McastTunneling) AppendLsp(v *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_McastTunneling_Lsp) error {
	if v.LspName == nil {
		return fmt.Errorf("invalid nil key received for LspName")
	}

	key := *v.LspName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Lsp == nil {
		t.Lsp = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_McastTunneling_Lsp)
	}

	if _, ok := t.Lsp[key]; ok {
		return fmt.Errorf("duplicate key for list Lsp %v", key)
	}

	t.Lsp[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_McastTunneling
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_McastTunneling) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Lsp {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_McastTunneling) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_McastTunneling"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_McastTunneling) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_McastTunneling) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_McastTunneling.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_McastTunneling) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_McastTunneling_Lsp represents the /nokia-conf/configure/groups/group/router/ldp/targeted-session/peer/mcast-tunneling/lsp YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_McastTunneling_Lsp struct {
	LspName *string `path:"lsp-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_McastTunneling_Lsp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_McastTunneling_Lsp) IsYANGGoStruct() {
}

// GetLspName retrieves the value of the leaf LspName from the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_McastTunneling_Lsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspName is set, it can
// safely use t.GetLspName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_McastTunneling_Lsp) GetLspName() string {
	if t == nil || t.LspName == nil {
		return ""
	}
	return *t.LspName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_McastTunneling_Lsp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_McastTunneling_Lsp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_McastTunneling_Lsp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_McastTunneling_Lsp) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.LspName == nil {
		return nil, fmt.Errorf("nil value for key LspName")
	}

	return map[string]interface{}{
		"lsp-name": *t.LspName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_McastTunneling_Lsp) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_McastTunneling_Lsp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_McastTunneling_Lsp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_McastTunneling_Lsp) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_McastTunneling_Lsp.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_McastTunneling_Lsp) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Tunneling represents the /nokia-conf/configure/groups/group/router/ldp/targeted-session/peer/tunneling YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Tunneling struct {
	Lsp map[string]*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Tunneling_Lsp `path:"lsp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Tunneling implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Tunneling) IsYANGGoStruct() {}

// NewLsp creates a new entry in the Lsp list of the
// NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Tunneling struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Tunneling) NewLsp(LspName string) (*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Tunneling_Lsp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Lsp == nil {
		t.Lsp = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Tunneling_Lsp)
	}

	key := LspName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Lsp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Lsp", key)
	}

	t.Lsp[key] = &NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Tunneling_Lsp{
		LspName: &LspName,
	}

	return t.Lsp[key], nil
}

// RenameLsp renames an entry in the list Lsp within
// the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Tunneling struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Tunneling) RenameLsp(oldK, newK string) error {
	if _, ok := t.Lsp[newK]; ok {
		return fmt.Errorf("key %v already exists in Lsp", newK)
	}

	e, ok := t.Lsp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Lsp", oldK)
	}
	e.LspName = &newK

	t.Lsp[newK] = e
	delete(t.Lsp, oldK)
	return nil
}

// GetOrCreateLsp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Tunneling. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Tunneling) GetOrCreateLsp(LspName string) *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Tunneling_Lsp {

	key := LspName

	if v, ok := t.Lsp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLsp(LspName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLsp got unexpected error: %v", err))
	}
	return v
}

// GetLsp retrieves the value with the specified key from
// the Lsp map field of NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Tunneling. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Tunneling) GetLsp(LspName string) *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Tunneling_Lsp {

	if t == nil {
		return nil
	}

	key := LspName

	if lm, ok := t.Lsp[key]; ok {
		return lm
	}
	return nil
}

// DeleteLsp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Tunneling. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Tunneling) DeleteLsp(LspName string) {
	key := LspName

	delete(t.Lsp, key)
}

// AppendLsp appends the supplied NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Tunneling_Lsp struct to the
// list Lsp of NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Tunneling. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Tunneling_Lsp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Tunneling) AppendLsp(v *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Tunneling_Lsp) error {
	if v.LspName == nil {
		return fmt.Errorf("invalid nil key received for LspName")
	}

	key := *v.LspName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Lsp == nil {
		t.Lsp = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Tunneling_Lsp)
	}

	if _, ok := t.Lsp[key]; ok {
		return fmt.Errorf("duplicate key for list Lsp %v", key)
	}

	t.Lsp[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Tunneling
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Tunneling) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Lsp {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Tunneling) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Tunneling"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Tunneling) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Tunneling) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Tunneling.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Tunneling) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Tunneling_Lsp represents the /nokia-conf/configure/groups/group/router/ldp/targeted-session/peer/tunneling/lsp YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Tunneling_Lsp struct {
	LspName *string `path:"lsp-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Tunneling_Lsp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Tunneling_Lsp) IsYANGGoStruct() {
}

// GetLspName retrieves the value of the leaf LspName from the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Tunneling_Lsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspName is set, it can
// safely use t.GetLspName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Tunneling_Lsp) GetLspName() string {
	if t == nil || t.LspName == nil {
		return ""
	}
	return *t.LspName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Tunneling_Lsp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Tunneling_Lsp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Tunneling_Lsp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Tunneling_Lsp) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.LspName == nil {
		return nil, fmt.Errorf("nil value for key LspName")
	}

	return map[string]interface{}{
		"lsp-name": *t.LspName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Tunneling_Lsp) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Tunneling_Lsp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Tunneling_Lsp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Tunneling_Lsp) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Tunneling_Lsp.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_TargetedSession_Peer_Tunneling_Lsp) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ldp_TcpSessionParameters represents the /nokia-conf/configure/groups/group/router/ldp/tcp-session-parameters YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ldp_TcpSessionParameters struct {
	AuthenticationKey      *string                                                                                    `path:"authentication-key" module:"nokia-conf"`
	AuthenticationKeychain *string                                                                                    `path:"authentication-keychain" module:"nokia-conf"`
	PeerTransport          map[string]*NokiaConf_Configure_Groups_Group_Router_Ldp_TcpSessionParameters_PeerTransport `path:"peer-transport" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ldp_TcpSessionParameters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_TcpSessionParameters) IsYANGGoStruct() {}

// NewPeerTransport creates a new entry in the PeerTransport list of the
// NokiaConf_Configure_Groups_Group_Router_Ldp_TcpSessionParameters struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TcpSessionParameters) NewPeerTransport(IpAddress string) (*NokiaConf_Configure_Groups_Group_Router_Ldp_TcpSessionParameters_PeerTransport, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PeerTransport == nil {
		t.PeerTransport = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Ldp_TcpSessionParameters_PeerTransport)
	}

	key := IpAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PeerTransport[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PeerTransport", key)
	}

	t.PeerTransport[key] = &NokiaConf_Configure_Groups_Group_Router_Ldp_TcpSessionParameters_PeerTransport{
		IpAddress: &IpAddress,
	}

	return t.PeerTransport[key], nil
}

// RenamePeerTransport renames an entry in the list PeerTransport within
// the NokiaConf_Configure_Groups_Group_Router_Ldp_TcpSessionParameters struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TcpSessionParameters) RenamePeerTransport(oldK, newK string) error {
	if _, ok := t.PeerTransport[newK]; ok {
		return fmt.Errorf("key %v already exists in PeerTransport", newK)
	}

	e, ok := t.PeerTransport[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PeerTransport", oldK)
	}
	e.IpAddress = &newK

	t.PeerTransport[newK] = e
	delete(t.PeerTransport, oldK)
	return nil
}

// GetOrCreatePeerTransport retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ldp_TcpSessionParameters. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TcpSessionParameters) GetOrCreatePeerTransport(IpAddress string) *NokiaConf_Configure_Groups_Group_Router_Ldp_TcpSessionParameters_PeerTransport {

	key := IpAddress

	if v, ok := t.PeerTransport[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPeerTransport(IpAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePeerTransport got unexpected error: %v", err))
	}
	return v
}

// GetPeerTransport retrieves the value with the specified key from
// the PeerTransport map field of NokiaConf_Configure_Groups_Group_Router_Ldp_TcpSessionParameters. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TcpSessionParameters) GetPeerTransport(IpAddress string) *NokiaConf_Configure_Groups_Group_Router_Ldp_TcpSessionParameters_PeerTransport {

	if t == nil {
		return nil
	}

	key := IpAddress

	if lm, ok := t.PeerTransport[key]; ok {
		return lm
	}
	return nil
}

// DeletePeerTransport deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ldp_TcpSessionParameters. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TcpSessionParameters) DeletePeerTransport(IpAddress string) {
	key := IpAddress

	delete(t.PeerTransport, key)
}

// AppendPeerTransport appends the supplied NokiaConf_Configure_Groups_Group_Router_Ldp_TcpSessionParameters_PeerTransport struct to the
// list PeerTransport of NokiaConf_Configure_Groups_Group_Router_Ldp_TcpSessionParameters. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Ldp_TcpSessionParameters_PeerTransport already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TcpSessionParameters) AppendPeerTransport(v *NokiaConf_Configure_Groups_Group_Router_Ldp_TcpSessionParameters_PeerTransport) error {
	if v.IpAddress == nil {
		return fmt.Errorf("invalid nil key received for IpAddress")
	}

	key := *v.IpAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PeerTransport == nil {
		t.PeerTransport = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Ldp_TcpSessionParameters_PeerTransport)
	}

	if _, ok := t.PeerTransport[key]; ok {
		return fmt.Errorf("duplicate key for list PeerTransport %v", key)
	}

	t.PeerTransport[key] = v
	return nil
}

// GetAuthenticationKey retrieves the value of the leaf AuthenticationKey from the NokiaConf_Configure_Groups_Group_Router_Ldp_TcpSessionParameters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKey is set, it can
// safely use t.GetAuthenticationKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TcpSessionParameters) GetAuthenticationKey() string {
	if t == nil || t.AuthenticationKey == nil {
		return ""
	}
	return *t.AuthenticationKey
}

// GetAuthenticationKeychain retrieves the value of the leaf AuthenticationKeychain from the NokiaConf_Configure_Groups_Group_Router_Ldp_TcpSessionParameters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKeychain is set, it can
// safely use t.GetAuthenticationKeychain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKeychain == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TcpSessionParameters) GetAuthenticationKeychain() string {
	if t == nil || t.AuthenticationKeychain == nil {
		return ""
	}
	return *t.AuthenticationKeychain
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ldp_TcpSessionParameters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TcpSessionParameters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.PeerTransport {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TcpSessionParameters) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ldp_TcpSessionParameters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TcpSessionParameters) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TcpSessionParameters) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ldp_TcpSessionParameters.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_TcpSessionParameters) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ldp_TcpSessionParameters_PeerTransport represents the /nokia-conf/configure/groups/group/router/ldp/tcp-session-parameters/peer-transport YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ldp_TcpSessionParameters_PeerTransport struct {
	AuthenticationKey      *string `path:"authentication-key" module:"nokia-conf"`
	AuthenticationKeychain *string `path:"authentication-keychain" module:"nokia-conf"`
	IpAddress              *string `path:"ip-address" module:"nokia-conf"`
	PathMtuDiscovery       *bool   `path:"path-mtu-discovery" module:"nokia-conf"`
	TtlSecurity            *uint32 `path:"ttl-security" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ldp_TcpSessionParameters_PeerTransport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_TcpSessionParameters_PeerTransport) IsYANGGoStruct() {
}

// GetAuthenticationKey retrieves the value of the leaf AuthenticationKey from the NokiaConf_Configure_Groups_Group_Router_Ldp_TcpSessionParameters_PeerTransport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKey is set, it can
// safely use t.GetAuthenticationKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TcpSessionParameters_PeerTransport) GetAuthenticationKey() string {
	if t == nil || t.AuthenticationKey == nil {
		return ""
	}
	return *t.AuthenticationKey
}

// GetAuthenticationKeychain retrieves the value of the leaf AuthenticationKeychain from the NokiaConf_Configure_Groups_Group_Router_Ldp_TcpSessionParameters_PeerTransport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKeychain is set, it can
// safely use t.GetAuthenticationKeychain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKeychain == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TcpSessionParameters_PeerTransport) GetAuthenticationKeychain() string {
	if t == nil || t.AuthenticationKeychain == nil {
		return ""
	}
	return *t.AuthenticationKeychain
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Groups_Group_Router_Ldp_TcpSessionParameters_PeerTransport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TcpSessionParameters_PeerTransport) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetPathMtuDiscovery retrieves the value of the leaf PathMtuDiscovery from the NokiaConf_Configure_Groups_Group_Router_Ldp_TcpSessionParameters_PeerTransport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathMtuDiscovery is set, it can
// safely use t.GetPathMtuDiscovery() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathMtuDiscovery == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TcpSessionParameters_PeerTransport) GetPathMtuDiscovery() bool {
	if t == nil || t.PathMtuDiscovery == nil {
		return false
	}
	return *t.PathMtuDiscovery
}

// GetTtlSecurity retrieves the value of the leaf TtlSecurity from the NokiaConf_Configure_Groups_Group_Router_Ldp_TcpSessionParameters_PeerTransport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TtlSecurity is set, it can
// safely use t.GetTtlSecurity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TtlSecurity == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TcpSessionParameters_PeerTransport) GetTtlSecurity() uint32 {
	if t == nil || t.TtlSecurity == nil {
		return 0
	}
	return *t.TtlSecurity
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ldp_TcpSessionParameters_PeerTransport
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TcpSessionParameters_PeerTransport) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PathMtuDiscovery == nil {
		var v bool = false
		t.PathMtuDiscovery = &v
	}
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Ldp_TcpSessionParameters_PeerTransport struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TcpSessionParameters_PeerTransport) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.IpAddress == nil {
		return nil, fmt.Errorf("nil value for key IpAddress")
	}

	return map[string]interface{}{
		"ip-address": *t.IpAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TcpSessionParameters_PeerTransport) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ldp_TcpSessionParameters_PeerTransport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TcpSessionParameters_PeerTransport) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ldp_TcpSessionParameters_PeerTransport) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ldp_TcpSessionParameters_PeerTransport.
func (*NokiaConf_Configure_Groups_Group_Router_Ldp_TcpSessionParameters_PeerTransport) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_LeakExport represents the /nokia-conf/configure/groups/group/router/leak-export YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_LeakExport struct {
	LeakExportLimit *uint32  `path:"leak-export-limit" module:"nokia-conf"`
	PolicyName      []string `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_LeakExport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_LeakExport) IsYANGGoStruct() {}

// GetLeakExportLimit retrieves the value of the leaf LeakExportLimit from the NokiaConf_Configure_Groups_Group_Router_LeakExport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LeakExportLimit is set, it can
// safely use t.GetLeakExportLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LeakExportLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_LeakExport) GetLeakExportLimit() uint32 {
	if t == nil || t.LeakExportLimit == nil {
		return 5
	}
	return *t.LeakExportLimit
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Router_LeakExport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_LeakExport) GetPolicyName() []string {
	if t == nil || t.PolicyName == nil {
		return nil
	}
	return t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_LeakExport
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_LeakExport) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LeakExportLimit == nil {
		var v uint32 = 5
		t.LeakExportLimit = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_LeakExport) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_LeakExport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_LeakExport) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_LeakExport) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_LeakExport.
func (*NokiaConf_Configure_Groups_Group_Router_LeakExport) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_LspBfd represents the /nokia-conf/configure/groups/group/router/lsp-bfd YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_LspBfd struct {
	BfdSessions *uint32                                                 `path:"bfd-sessions" module:"nokia-conf"`
	TailEnd     *NokiaConf_Configure_Groups_Group_Router_LspBfd_TailEnd `path:"tail-end" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_LspBfd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_LspBfd) IsYANGGoStruct() {}

// GetOrCreateTailEnd retrieves the value of the TailEnd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_LspBfd) GetOrCreateTailEnd() *NokiaConf_Configure_Groups_Group_Router_LspBfd_TailEnd {
	if t.TailEnd != nil {
		return t.TailEnd
	}
	t.TailEnd = &NokiaConf_Configure_Groups_Group_Router_LspBfd_TailEnd{}
	return t.TailEnd
}

// GetTailEnd returns the value of the TailEnd struct pointer
// from NokiaConf_Configure_Groups_Group_Router_LspBfd. If the receiver or the field TailEnd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_LspBfd) GetTailEnd() *NokiaConf_Configure_Groups_Group_Router_LspBfd_TailEnd {
	if t != nil && t.TailEnd != nil {
		return t.TailEnd
	}
	return nil
}

// GetBfdSessions retrieves the value of the leaf BfdSessions from the NokiaConf_Configure_Groups_Group_Router_LspBfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdSessions is set, it can
// safely use t.GetBfdSessions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdSessions == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_LspBfd) GetBfdSessions() uint32 {
	if t == nil || t.BfdSessions == nil {
		return 0
	}
	return *t.BfdSessions
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_LspBfd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_LspBfd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.TailEnd.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_LspBfd) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_LspBfd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_LspBfd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_LspBfd) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_LspBfd.
func (*NokiaConf_Configure_Groups_Group_Router_LspBfd) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_LspBfd_TailEnd represents the /nokia-conf/configure/groups/group/router/lsp-bfd/tail-end YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_LspBfd_TailEnd struct {
	Multiplier       *uint32 `path:"multiplier" module:"nokia-conf"`
	ReceiveInterval  *uint32 `path:"receive-interval" module:"nokia-conf"`
	TransmitInterval *uint32 `path:"transmit-interval" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_LspBfd_TailEnd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_LspBfd_TailEnd) IsYANGGoStruct() {}

// GetMultiplier retrieves the value of the leaf Multiplier from the NokiaConf_Configure_Groups_Group_Router_LspBfd_TailEnd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multiplier is set, it can
// safely use t.GetMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_LspBfd_TailEnd) GetMultiplier() uint32 {
	if t == nil || t.Multiplier == nil {
		return 3
	}
	return *t.Multiplier
}

// GetReceiveInterval retrieves the value of the leaf ReceiveInterval from the NokiaConf_Configure_Groups_Group_Router_LspBfd_TailEnd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReceiveInterval is set, it can
// safely use t.GetReceiveInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReceiveInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_LspBfd_TailEnd) GetReceiveInterval() uint32 {
	if t == nil || t.ReceiveInterval == nil {
		return 1000
	}
	return *t.ReceiveInterval
}

// GetTransmitInterval retrieves the value of the leaf TransmitInterval from the NokiaConf_Configure_Groups_Group_Router_LspBfd_TailEnd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransmitInterval is set, it can
// safely use t.GetTransmitInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransmitInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_LspBfd_TailEnd) GetTransmitInterval() uint32 {
	if t == nil || t.TransmitInterval == nil {
		return 1000
	}
	return *t.TransmitInterval
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_LspBfd_TailEnd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_LspBfd_TailEnd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Multiplier == nil {
		var v uint32 = 3
		t.Multiplier = &v
	}
	if t.ReceiveInterval == nil {
		var v uint32 = 1000
		t.ReceiveInterval = &v
	}
	if t.TransmitInterval == nil {
		var v uint32 = 1000
		t.TransmitInterval = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_LspBfd_TailEnd) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_LspBfd_TailEnd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_LspBfd_TailEnd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_LspBfd_TailEnd) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_LspBfd_TailEnd.
func (*NokiaConf_Configure_Groups_Group_Router_LspBfd_TailEnd) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_McMaximumRoutes represents the /nokia-conf/configure/groups/group/router/mc-maximum-routes YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_McMaximumRoutes struct {
	LogOnly   *bool   `path:"log-only" module:"nokia-conf"`
	Threshold *uint32 `path:"threshold" module:"nokia-conf"`
	Value     *int32  `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_McMaximumRoutes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_McMaximumRoutes) IsYANGGoStruct() {}

// GetLogOnly retrieves the value of the leaf LogOnly from the NokiaConf_Configure_Groups_Group_Router_McMaximumRoutes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogOnly is set, it can
// safely use t.GetLogOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_McMaximumRoutes) GetLogOnly() bool {
	if t == nil || t.LogOnly == nil {
		return false
	}
	return *t.LogOnly
}

// GetThreshold retrieves the value of the leaf Threshold from the NokiaConf_Configure_Groups_Group_Router_McMaximumRoutes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Threshold is set, it can
// safely use t.GetThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Threshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_McMaximumRoutes) GetThreshold() uint32 {
	if t == nil || t.Threshold == nil {
		return 0
	}
	return *t.Threshold
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Groups_Group_Router_McMaximumRoutes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_McMaximumRoutes) GetValue() int32 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_McMaximumRoutes
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_McMaximumRoutes) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LogOnly == nil {
		var v bool = false
		t.LogOnly = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_McMaximumRoutes) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_McMaximumRoutes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_McMaximumRoutes) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_McMaximumRoutes) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_McMaximumRoutes.
func (*NokiaConf_Configure_Groups_Group_Router_McMaximumRoutes) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mld represents the /nokia-conf/configure/groups/group/router/mld YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mld struct {
	AdminState                E_NokiaTypesSros_AdminState                                                                                                                        `path:"admin-state" module:"nokia-conf"`
	ForwardingGroupInterface  map[NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface_Key]*NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface `path:"forwarding-group-interface" module:"nokia-conf"`
	GroupIfQuerySourceAddress *string                                                                                                                                            `path:"group-if-query-source-address" module:"nokia-conf"`
	GroupInterface            map[string]*NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface                                                                             `path:"group-interface" module:"nokia-conf"`
	Interface                 map[string]*NokiaConf_Configure_Groups_Group_Router_Mld_Interface                                                                                  `path:"interface" module:"nokia-conf"`
	QueryInterval             *uint32                                                                                                                                            `path:"query-interval" module:"nokia-conf"`
	QueryLastMemberInterval   *uint32                                                                                                                                            `path:"query-last-member-interval" module:"nokia-conf"`
	QueryResponseInterval     *uint32                                                                                                                                            `path:"query-response-interval" module:"nokia-conf"`
	RobustCount               *uint32                                                                                                                                            `path:"robust-count" module:"nokia-conf"`
	SsmTranslate              *NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate                                                                                          `path:"ssm-translate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mld implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mld) IsYANGGoStruct() {}

// NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface_Key represents the key for list ForwardingGroupInterface of element /nokia-conf/configure/groups/group/router/mld.
type NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface_Key struct {
	ForwardingService  string `path:"forwarding-service"`
	GroupInterfaceName string `path:"group-interface-name"`
}

// NewForwardingGroupInterface creates a new entry in the ForwardingGroupInterface list of the
// NokiaConf_Configure_Groups_Group_Router_Mld struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld) NewForwardingGroupInterface(ForwardingService string, GroupInterfaceName string) (*NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ForwardingGroupInterface == nil {
		t.ForwardingGroupInterface = make(map[NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface_Key]*NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface)
	}

	key := NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface_Key{
		ForwardingService:  ForwardingService,
		GroupInterfaceName: GroupInterfaceName,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ForwardingGroupInterface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ForwardingGroupInterface", key)
	}

	t.ForwardingGroupInterface[key] = &NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface{
		ForwardingService:  &ForwardingService,
		GroupInterfaceName: &GroupInterfaceName,
	}

	return t.ForwardingGroupInterface[key], nil
}

// RenameForwardingGroupInterface renames an entry in the list ForwardingGroupInterface within
// the NokiaConf_Configure_Groups_Group_Router_Mld struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld) RenameForwardingGroupInterface(oldK, newK NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface_Key) error {
	if _, ok := t.ForwardingGroupInterface[newK]; ok {
		return fmt.Errorf("key %v already exists in ForwardingGroupInterface", newK)
	}

	e, ok := t.ForwardingGroupInterface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ForwardingGroupInterface", oldK)
	}
	e.ForwardingService = &newK.ForwardingService
	e.GroupInterfaceName = &newK.GroupInterfaceName

	t.ForwardingGroupInterface[newK] = e
	delete(t.ForwardingGroupInterface, oldK)
	return nil
}

// GetOrCreateForwardingGroupInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mld. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld) GetOrCreateForwardingGroupInterface(ForwardingService string, GroupInterfaceName string) *NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface {

	key := NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface_Key{
		ForwardingService:  ForwardingService,
		GroupInterfaceName: GroupInterfaceName,
	}

	if v, ok := t.ForwardingGroupInterface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewForwardingGroupInterface(ForwardingService, GroupInterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateForwardingGroupInterface got unexpected error: %v", err))
	}
	return v
}

// GetForwardingGroupInterface retrieves the value with the specified key from
// the ForwardingGroupInterface map field of NokiaConf_Configure_Groups_Group_Router_Mld. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld) GetForwardingGroupInterface(ForwardingService string, GroupInterfaceName string) *NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface_Key{
		ForwardingService:  ForwardingService,
		GroupInterfaceName: GroupInterfaceName,
	}

	if lm, ok := t.ForwardingGroupInterface[key]; ok {
		return lm
	}
	return nil
}

// DeleteForwardingGroupInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mld. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld) DeleteForwardingGroupInterface(ForwardingService string, GroupInterfaceName string) {
	key := NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface_Key{
		ForwardingService:  ForwardingService,
		GroupInterfaceName: GroupInterfaceName,
	}

	delete(t.ForwardingGroupInterface, key)
}

// AppendForwardingGroupInterface appends the supplied NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface struct to the
// list ForwardingGroupInterface of NokiaConf_Configure_Groups_Group_Router_Mld. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld) AppendForwardingGroupInterface(v *NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface) error {
	if v.ForwardingService == nil {
		return fmt.Errorf("invalid nil key for ForwardingService")
	}

	if v.GroupInterfaceName == nil {
		return fmt.Errorf("invalid nil key for GroupInterfaceName")
	}

	key := NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface_Key{
		ForwardingService:  *v.ForwardingService,
		GroupInterfaceName: *v.GroupInterfaceName,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ForwardingGroupInterface == nil {
		t.ForwardingGroupInterface = make(map[NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface_Key]*NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface)
	}

	if _, ok := t.ForwardingGroupInterface[key]; ok {
		return fmt.Errorf("duplicate key for list ForwardingGroupInterface %v", key)
	}

	t.ForwardingGroupInterface[key] = v
	return nil
}

// NewGroupInterface creates a new entry in the GroupInterface list of the
// NokiaConf_Configure_Groups_Group_Router_Mld struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld) NewGroupInterface(GroupInterfaceName string) (*NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupInterface == nil {
		t.GroupInterface = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface)
	}

	key := GroupInterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GroupInterface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GroupInterface", key)
	}

	t.GroupInterface[key] = &NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface{
		GroupInterfaceName: &GroupInterfaceName,
	}

	return t.GroupInterface[key], nil
}

// RenameGroupInterface renames an entry in the list GroupInterface within
// the NokiaConf_Configure_Groups_Group_Router_Mld struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld) RenameGroupInterface(oldK, newK string) error {
	if _, ok := t.GroupInterface[newK]; ok {
		return fmt.Errorf("key %v already exists in GroupInterface", newK)
	}

	e, ok := t.GroupInterface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GroupInterface", oldK)
	}
	e.GroupInterfaceName = &newK

	t.GroupInterface[newK] = e
	delete(t.GroupInterface, oldK)
	return nil
}

// GetOrCreateGroupInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mld. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld) GetOrCreateGroupInterface(GroupInterfaceName string) *NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface {

	key := GroupInterfaceName

	if v, ok := t.GroupInterface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroupInterface(GroupInterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroupInterface got unexpected error: %v", err))
	}
	return v
}

// GetGroupInterface retrieves the value with the specified key from
// the GroupInterface map field of NokiaConf_Configure_Groups_Group_Router_Mld. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld) GetGroupInterface(GroupInterfaceName string) *NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface {

	if t == nil {
		return nil
	}

	key := GroupInterfaceName

	if lm, ok := t.GroupInterface[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroupInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mld. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld) DeleteGroupInterface(GroupInterfaceName string) {
	key := GroupInterfaceName

	delete(t.GroupInterface, key)
}

// AppendGroupInterface appends the supplied NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface struct to the
// list GroupInterface of NokiaConf_Configure_Groups_Group_Router_Mld. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld) AppendGroupInterface(v *NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface) error {
	if v.GroupInterfaceName == nil {
		return fmt.Errorf("invalid nil key received for GroupInterfaceName")
	}

	key := *v.GroupInterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupInterface == nil {
		t.GroupInterface = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface)
	}

	if _, ok := t.GroupInterface[key]; ok {
		return fmt.Errorf("duplicate key for list GroupInterface %v", key)
	}

	t.GroupInterface[key] = v
	return nil
}

// NewInterface creates a new entry in the Interface list of the
// NokiaConf_Configure_Groups_Group_Router_Mld struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld) NewInterface(IpInterfaceName string) (*NokiaConf_Configure_Groups_Group_Router_Mld_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Mld_Interface)
	}

	key := IpInterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &NokiaConf_Configure_Groups_Group_Router_Mld_Interface{
		IpInterfaceName: &IpInterfaceName,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the NokiaConf_Configure_Groups_Group_Router_Mld struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.IpInterfaceName = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mld. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld) GetOrCreateInterface(IpInterfaceName string) *NokiaConf_Configure_Groups_Group_Router_Mld_Interface {

	key := IpInterfaceName

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(IpInterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of NokiaConf_Configure_Groups_Group_Router_Mld. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld) GetInterface(IpInterfaceName string) *NokiaConf_Configure_Groups_Group_Router_Mld_Interface {

	if t == nil {
		return nil
	}

	key := IpInterfaceName

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mld. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld) DeleteInterface(IpInterfaceName string) {
	key := IpInterfaceName

	delete(t.Interface, key)
}

// AppendInterface appends the supplied NokiaConf_Configure_Groups_Group_Router_Mld_Interface struct to the
// list Interface of NokiaConf_Configure_Groups_Group_Router_Mld. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Mld_Interface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld) AppendInterface(v *NokiaConf_Configure_Groups_Group_Router_Mld_Interface) error {
	if v.IpInterfaceName == nil {
		return fmt.Errorf("invalid nil key received for IpInterfaceName")
	}

	key := *v.IpInterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Mld_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// GetOrCreateSsmTranslate retrieves the value of the SsmTranslate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld) GetOrCreateSsmTranslate() *NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate {
	if t.SsmTranslate != nil {
		return t.SsmTranslate
	}
	t.SsmTranslate = &NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate{}
	return t.SsmTranslate
}

// GetSsmTranslate returns the value of the SsmTranslate struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Mld. If the receiver or the field SsmTranslate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld) GetSsmTranslate() *NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate {
	if t != nil && t.SsmTranslate != nil {
		return t.SsmTranslate
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Mld
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetGroupIfQuerySourceAddress retrieves the value of the leaf GroupIfQuerySourceAddress from the NokiaConf_Configure_Groups_Group_Router_Mld
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupIfQuerySourceAddress is set, it can
// safely use t.GetGroupIfQuerySourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupIfQuerySourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld) GetGroupIfQuerySourceAddress() string {
	if t == nil || t.GroupIfQuerySourceAddress == nil {
		return ""
	}
	return *t.GroupIfQuerySourceAddress
}

// GetQueryInterval retrieves the value of the leaf QueryInterval from the NokiaConf_Configure_Groups_Group_Router_Mld
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryInterval is set, it can
// safely use t.GetQueryInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld) GetQueryInterval() uint32 {
	if t == nil || t.QueryInterval == nil {
		return 125
	}
	return *t.QueryInterval
}

// GetQueryLastMemberInterval retrieves the value of the leaf QueryLastMemberInterval from the NokiaConf_Configure_Groups_Group_Router_Mld
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryLastMemberInterval is set, it can
// safely use t.GetQueryLastMemberInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryLastMemberInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld) GetQueryLastMemberInterval() uint32 {
	if t == nil || t.QueryLastMemberInterval == nil {
		return 1
	}
	return *t.QueryLastMemberInterval
}

// GetQueryResponseInterval retrieves the value of the leaf QueryResponseInterval from the NokiaConf_Configure_Groups_Group_Router_Mld
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryResponseInterval is set, it can
// safely use t.GetQueryResponseInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryResponseInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld) GetQueryResponseInterval() uint32 {
	if t == nil || t.QueryResponseInterval == nil {
		return 10
	}
	return *t.QueryResponseInterval
}

// GetRobustCount retrieves the value of the leaf RobustCount from the NokiaConf_Configure_Groups_Group_Router_Mld
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RobustCount is set, it can
// safely use t.GetRobustCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RobustCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld) GetRobustCount() uint32 {
	if t == nil || t.RobustCount == nil {
		return 2
	}
	return *t.RobustCount
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mld
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.QueryInterval == nil {
		var v uint32 = 125
		t.QueryInterval = &v
	}
	if t.QueryLastMemberInterval == nil {
		var v uint32 = 1
		t.QueryLastMemberInterval = &v
	}
	if t.QueryResponseInterval == nil {
		var v uint32 = 10
		t.QueryResponseInterval = &v
	}
	if t.RobustCount == nil {
		var v uint32 = 2
		t.RobustCount = &v
	}
	t.SsmTranslate.PopulateDefaults()
	for _, e := range t.ForwardingGroupInterface {
		e.PopulateDefaults()
	}
	for _, e := range t.GroupInterface {
		e.PopulateDefaults()
	}
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mld"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mld.
func (*NokiaConf_Configure_Groups_Group_Router_Mld) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface represents the /nokia-conf/configure/groups/group/router/mld/forwarding-group-interface YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface struct {
	AdminState                E_NokiaTypesSros_AdminState                                                `path:"admin-state" module:"nokia-conf"`
	ForwardingService         *string                                                                    `path:"forwarding-service" module:"nokia-conf"`
	GroupInterfaceName        *string                                                                    `path:"group-interface-name" module:"nokia-conf"`
	ImportPolicy              *string                                                                    `path:"import-policy" module:"nokia-conf"`
	MaximumNumberGroupSources *uint32                                                                    `path:"maximum-number-group-sources" module:"nokia-conf"`
	MaximumNumberGroups       *uint32                                                                    `path:"maximum-number-groups" module:"nokia-conf"`
	MaximumNumberSources      *uint32                                                                    `path:"maximum-number-sources" module:"nokia-conf"`
	Mcac                      *NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface_Mcac `path:"mcac" module:"nokia-conf"`
	QueryInterval             *uint32                                                                    `path:"query-interval" module:"nokia-conf"`
	QueryLastMemberInterval   *uint32                                                                    `path:"query-last-member-interval" module:"nokia-conf"`
	QueryResponseInterval     *uint32                                                                    `path:"query-response-interval" module:"nokia-conf"`
	QuerySourceAddress        *string                                                                    `path:"query-source-address" module:"nokia-conf"`
	RouterAlertCheck          *bool                                                                      `path:"router-alert-check" module:"nokia-conf"`
	SubHostsOnly              *bool                                                                      `path:"sub-hosts-only" module:"nokia-conf"`
	SubnetCheck               *bool                                                                      `path:"subnet-check" module:"nokia-conf"`
	Version                   E_NokiaTypesIgmp_MldVersion                                                `path:"version" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface) IsYANGGoStruct() {}

// GetOrCreateMcac retrieves the value of the Mcac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface) GetOrCreateMcac() *NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface_Mcac {
	if t.Mcac != nil {
		return t.Mcac
	}
	t.Mcac = &NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface_Mcac{}
	return t.Mcac
}

// GetMcac returns the value of the Mcac struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface. If the receiver or the field Mcac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface) GetMcac() *NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface_Mcac {
	if t != nil && t.Mcac != nil {
		return t.Mcac
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetForwardingService retrieves the value of the leaf ForwardingService from the NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForwardingService is set, it can
// safely use t.GetForwardingService() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForwardingService == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface) GetForwardingService() string {
	if t == nil || t.ForwardingService == nil {
		return ""
	}
	return *t.ForwardingService
}

// GetGroupInterfaceName retrieves the value of the leaf GroupInterfaceName from the NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupInterfaceName is set, it can
// safely use t.GetGroupInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupInterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface) GetGroupInterfaceName() string {
	if t == nil || t.GroupInterfaceName == nil {
		return ""
	}
	return *t.GroupInterfaceName
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface) GetImportPolicy() string {
	if t == nil || t.ImportPolicy == nil {
		return ""
	}
	return *t.ImportPolicy
}

// GetMaximumNumberGroupSources retrieves the value of the leaf MaximumNumberGroupSources from the NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroupSources is set, it can
// safely use t.GetMaximumNumberGroupSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroupSources == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface) GetMaximumNumberGroupSources() uint32 {
	if t == nil || t.MaximumNumberGroupSources == nil {
		return 0
	}
	return *t.MaximumNumberGroupSources
}

// GetMaximumNumberGroups retrieves the value of the leaf MaximumNumberGroups from the NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroups is set, it can
// safely use t.GetMaximumNumberGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface) GetMaximumNumberGroups() uint32 {
	if t == nil || t.MaximumNumberGroups == nil {
		return 0
	}
	return *t.MaximumNumberGroups
}

// GetMaximumNumberSources retrieves the value of the leaf MaximumNumberSources from the NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberSources is set, it can
// safely use t.GetMaximumNumberSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberSources == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface) GetMaximumNumberSources() uint32 {
	if t == nil || t.MaximumNumberSources == nil {
		return 0
	}
	return *t.MaximumNumberSources
}

// GetQueryInterval retrieves the value of the leaf QueryInterval from the NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryInterval is set, it can
// safely use t.GetQueryInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface) GetQueryInterval() uint32 {
	if t == nil || t.QueryInterval == nil {
		return 0
	}
	return *t.QueryInterval
}

// GetQueryLastMemberInterval retrieves the value of the leaf QueryLastMemberInterval from the NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryLastMemberInterval is set, it can
// safely use t.GetQueryLastMemberInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryLastMemberInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface) GetQueryLastMemberInterval() uint32 {
	if t == nil || t.QueryLastMemberInterval == nil {
		return 0
	}
	return *t.QueryLastMemberInterval
}

// GetQueryResponseInterval retrieves the value of the leaf QueryResponseInterval from the NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryResponseInterval is set, it can
// safely use t.GetQueryResponseInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryResponseInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface) GetQueryResponseInterval() uint32 {
	if t == nil || t.QueryResponseInterval == nil {
		return 0
	}
	return *t.QueryResponseInterval
}

// GetQuerySourceAddress retrieves the value of the leaf QuerySourceAddress from the NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QuerySourceAddress is set, it can
// safely use t.GetQuerySourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QuerySourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface) GetQuerySourceAddress() string {
	if t == nil || t.QuerySourceAddress == nil {
		return ""
	}
	return *t.QuerySourceAddress
}

// GetRouterAlertCheck retrieves the value of the leaf RouterAlertCheck from the NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterAlertCheck is set, it can
// safely use t.GetRouterAlertCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterAlertCheck == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface) GetRouterAlertCheck() bool {
	if t == nil || t.RouterAlertCheck == nil {
		return true
	}
	return *t.RouterAlertCheck
}

// GetSubHostsOnly retrieves the value of the leaf SubHostsOnly from the NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubHostsOnly is set, it can
// safely use t.GetSubHostsOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubHostsOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface) GetSubHostsOnly() bool {
	if t == nil || t.SubHostsOnly == nil {
		return true
	}
	return *t.SubHostsOnly
}

// GetSubnetCheck retrieves the value of the leaf SubnetCheck from the NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubnetCheck is set, it can
// safely use t.GetSubnetCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubnetCheck == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface) GetSubnetCheck() bool {
	if t == nil || t.SubnetCheck == nil {
		return true
	}
	return *t.SubnetCheck
}

// GetVersion retrieves the value of the leaf Version from the NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface) GetVersion() E_NokiaTypesIgmp_MldVersion {
	if t == nil || t.Version == 0 {
		return NokiaTypesIgmp_MldVersion_2
	}
	return t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.RouterAlertCheck == nil {
		var v bool = true
		t.RouterAlertCheck = &v
	}
	if t.SubHostsOnly == nil {
		var v bool = true
		t.SubHostsOnly = &v
	}
	if t.SubnetCheck == nil {
		var v bool = true
		t.SubnetCheck = &v
	}
	if t.Version == 0 {
		t.Version = NokiaTypesIgmp_MldVersion_2
	}
	t.Mcac.PopulateDefaults()
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.ForwardingService == nil {
		return nil, fmt.Errorf("nil value for key ForwardingService")
	}

	if t.GroupInterfaceName == nil {
		return nil, fmt.Errorf("nil value for key GroupInterfaceName")
	}

	return map[string]interface{}{
		"forwarding-service":   *t.ForwardingService,
		"group-interface-name": *t.GroupInterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface.
func (*NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface_Mcac represents the /nokia-conf/configure/groups/group/router/mld/forwarding-group-interface/mcac YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface_Mcac struct {
	Bandwidth       *NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface_Mcac_Bandwidth `path:"bandwidth" module:"nokia-conf"`
	InterfacePolicy *string                                                                              `path:"interface-policy" module:"nokia-conf"`
	Policy          *string                                                                              `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface_Mcac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface_Mcac) IsYANGGoStruct() {}

// GetOrCreateBandwidth retrieves the value of the Bandwidth field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface_Mcac) GetOrCreateBandwidth() *NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface_Mcac_Bandwidth {
	if t.Bandwidth != nil {
		return t.Bandwidth
	}
	t.Bandwidth = &NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface_Mcac_Bandwidth{}
	return t.Bandwidth
}

// GetBandwidth returns the value of the Bandwidth struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface_Mcac. If the receiver or the field Bandwidth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface_Mcac) GetBandwidth() *NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface_Mcac_Bandwidth {
	if t != nil && t.Bandwidth != nil {
		return t.Bandwidth
	}
	return nil
}

// GetInterfacePolicy retrieves the value of the leaf InterfacePolicy from the NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface_Mcac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfacePolicy is set, it can
// safely use t.GetInterfacePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfacePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface_Mcac) GetInterfacePolicy() string {
	if t == nil || t.InterfacePolicy == nil {
		return ""
	}
	return *t.InterfacePolicy
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface_Mcac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface_Mcac) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface_Mcac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface_Mcac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Bandwidth.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface_Mcac) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface_Mcac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface_Mcac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface_Mcac) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface_Mcac.
func (*NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface_Mcac) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface_Mcac_Bandwidth represents the /nokia-conf/configure/groups/group/router/mld/forwarding-group-interface/mcac/bandwidth YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface_Mcac_Bandwidth struct {
	Mandatory NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface_Mcac_Bandwidth_Mandatory_Union `path:"mandatory" module:"nokia-conf"`
	Total     NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface_Mcac_Bandwidth_Total_Union     `path:"total" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface_Mcac_Bandwidth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface_Mcac_Bandwidth) IsYANGGoStruct() {
}

// GetMandatory retrieves the value of the leaf Mandatory from the NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface_Mcac_Bandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mandatory is set, it can
// safely use t.GetMandatory() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mandatory == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface_Mcac_Bandwidth) GetMandatory() NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface_Mcac_Bandwidth_Mandatory_Union {
	if t == nil || t.Mandatory == nil {
		return NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	return t.Mandatory
}

// GetTotal retrieves the value of the leaf Total from the NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface_Mcac_Bandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Total is set, it can
// safely use t.GetTotal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Total == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface_Mcac_Bandwidth) GetTotal() NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface_Mcac_Bandwidth_Total_Union {
	if t == nil || t.Total == nil {
		return NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	return t.Total
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface_Mcac_Bandwidth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface_Mcac_Bandwidth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mandatory == nil {
		t.Mandatory = NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	if t.Total == nil {
		t.Total = NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface_Mcac_Bandwidth) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface_Mcac_Bandwidth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface_Mcac_Bandwidth) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface_Mcac_Bandwidth) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface_Mcac_Bandwidth.
func (*NokiaConf_Configure_Groups_Group_Router_Mld_ForwardingGroupInterface_Mcac_Bandwidth) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface represents the /nokia-conf/configure/groups/group/router/mld/group-interface YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface struct {
	AdminState                E_NokiaTypesSros_AdminState                                      `path:"admin-state" module:"nokia-conf"`
	GroupInterfaceName        *string                                                          `path:"group-interface-name" module:"nokia-conf"`
	ImportPolicy              *string                                                          `path:"import-policy" module:"nokia-conf"`
	MaximumNumberGroupSources *uint32                                                          `path:"maximum-number-group-sources" module:"nokia-conf"`
	MaximumNumberGroups       *uint32                                                          `path:"maximum-number-groups" module:"nokia-conf"`
	MaximumNumberSources      *uint32                                                          `path:"maximum-number-sources" module:"nokia-conf"`
	Mcac                      *NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface_Mcac `path:"mcac" module:"nokia-conf"`
	QueryInterval             *uint32                                                          `path:"query-interval" module:"nokia-conf"`
	QueryLastMemberInterval   *uint32                                                          `path:"query-last-member-interval" module:"nokia-conf"`
	QueryResponseInterval     *uint32                                                          `path:"query-response-interval" module:"nokia-conf"`
	QuerySourceAddress        *string                                                          `path:"query-source-address" module:"nokia-conf"`
	RouterAlertCheck          *bool                                                            `path:"router-alert-check" module:"nokia-conf"`
	SubHostsOnly              *bool                                                            `path:"sub-hosts-only" module:"nokia-conf"`
	SubnetCheck               *bool                                                            `path:"subnet-check" module:"nokia-conf"`
	Version                   E_NokiaTypesIgmp_MldVersion                                      `path:"version" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface) IsYANGGoStruct() {}

// GetOrCreateMcac retrieves the value of the Mcac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface) GetOrCreateMcac() *NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface_Mcac {
	if t.Mcac != nil {
		return t.Mcac
	}
	t.Mcac = &NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface_Mcac{}
	return t.Mcac
}

// GetMcac returns the value of the Mcac struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface. If the receiver or the field Mcac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface) GetMcac() *NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface_Mcac {
	if t != nil && t.Mcac != nil {
		return t.Mcac
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetGroupInterfaceName retrieves the value of the leaf GroupInterfaceName from the NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupInterfaceName is set, it can
// safely use t.GetGroupInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupInterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface) GetGroupInterfaceName() string {
	if t == nil || t.GroupInterfaceName == nil {
		return ""
	}
	return *t.GroupInterfaceName
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface) GetImportPolicy() string {
	if t == nil || t.ImportPolicy == nil {
		return ""
	}
	return *t.ImportPolicy
}

// GetMaximumNumberGroupSources retrieves the value of the leaf MaximumNumberGroupSources from the NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroupSources is set, it can
// safely use t.GetMaximumNumberGroupSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroupSources == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface) GetMaximumNumberGroupSources() uint32 {
	if t == nil || t.MaximumNumberGroupSources == nil {
		return 0
	}
	return *t.MaximumNumberGroupSources
}

// GetMaximumNumberGroups retrieves the value of the leaf MaximumNumberGroups from the NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroups is set, it can
// safely use t.GetMaximumNumberGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface) GetMaximumNumberGroups() uint32 {
	if t == nil || t.MaximumNumberGroups == nil {
		return 0
	}
	return *t.MaximumNumberGroups
}

// GetMaximumNumberSources retrieves the value of the leaf MaximumNumberSources from the NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberSources is set, it can
// safely use t.GetMaximumNumberSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberSources == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface) GetMaximumNumberSources() uint32 {
	if t == nil || t.MaximumNumberSources == nil {
		return 0
	}
	return *t.MaximumNumberSources
}

// GetQueryInterval retrieves the value of the leaf QueryInterval from the NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryInterval is set, it can
// safely use t.GetQueryInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface) GetQueryInterval() uint32 {
	if t == nil || t.QueryInterval == nil {
		return 0
	}
	return *t.QueryInterval
}

// GetQueryLastMemberInterval retrieves the value of the leaf QueryLastMemberInterval from the NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryLastMemberInterval is set, it can
// safely use t.GetQueryLastMemberInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryLastMemberInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface) GetQueryLastMemberInterval() uint32 {
	if t == nil || t.QueryLastMemberInterval == nil {
		return 0
	}
	return *t.QueryLastMemberInterval
}

// GetQueryResponseInterval retrieves the value of the leaf QueryResponseInterval from the NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryResponseInterval is set, it can
// safely use t.GetQueryResponseInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryResponseInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface) GetQueryResponseInterval() uint32 {
	if t == nil || t.QueryResponseInterval == nil {
		return 0
	}
	return *t.QueryResponseInterval
}

// GetQuerySourceAddress retrieves the value of the leaf QuerySourceAddress from the NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QuerySourceAddress is set, it can
// safely use t.GetQuerySourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QuerySourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface) GetQuerySourceAddress() string {
	if t == nil || t.QuerySourceAddress == nil {
		return ""
	}
	return *t.QuerySourceAddress
}

// GetRouterAlertCheck retrieves the value of the leaf RouterAlertCheck from the NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterAlertCheck is set, it can
// safely use t.GetRouterAlertCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterAlertCheck == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface) GetRouterAlertCheck() bool {
	if t == nil || t.RouterAlertCheck == nil {
		return true
	}
	return *t.RouterAlertCheck
}

// GetSubHostsOnly retrieves the value of the leaf SubHostsOnly from the NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubHostsOnly is set, it can
// safely use t.GetSubHostsOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubHostsOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface) GetSubHostsOnly() bool {
	if t == nil || t.SubHostsOnly == nil {
		return true
	}
	return *t.SubHostsOnly
}

// GetSubnetCheck retrieves the value of the leaf SubnetCheck from the NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubnetCheck is set, it can
// safely use t.GetSubnetCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubnetCheck == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface) GetSubnetCheck() bool {
	if t == nil || t.SubnetCheck == nil {
		return true
	}
	return *t.SubnetCheck
}

// GetVersion retrieves the value of the leaf Version from the NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface) GetVersion() E_NokiaTypesIgmp_MldVersion {
	if t == nil || t.Version == 0 {
		return NokiaTypesIgmp_MldVersion_2
	}
	return t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.RouterAlertCheck == nil {
		var v bool = true
		t.RouterAlertCheck = &v
	}
	if t.SubHostsOnly == nil {
		var v bool = true
		t.SubHostsOnly = &v
	}
	if t.SubnetCheck == nil {
		var v bool = true
		t.SubnetCheck = &v
	}
	if t.Version == 0 {
		t.Version = NokiaTypesIgmp_MldVersion_2
	}
	t.Mcac.PopulateDefaults()
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.GroupInterfaceName == nil {
		return nil, fmt.Errorf("nil value for key GroupInterfaceName")
	}

	return map[string]interface{}{
		"group-interface-name": *t.GroupInterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface.
func (*NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface_Mcac represents the /nokia-conf/configure/groups/group/router/mld/group-interface/mcac YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface_Mcac struct {
	Bandwidth       *NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface_Mcac_Bandwidth `path:"bandwidth" module:"nokia-conf"`
	InterfacePolicy *string                                                                    `path:"interface-policy" module:"nokia-conf"`
	Policy          *string                                                                    `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface_Mcac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface_Mcac) IsYANGGoStruct() {}

// GetOrCreateBandwidth retrieves the value of the Bandwidth field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface_Mcac) GetOrCreateBandwidth() *NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface_Mcac_Bandwidth {
	if t.Bandwidth != nil {
		return t.Bandwidth
	}
	t.Bandwidth = &NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface_Mcac_Bandwidth{}
	return t.Bandwidth
}

// GetBandwidth returns the value of the Bandwidth struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface_Mcac. If the receiver or the field Bandwidth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface_Mcac) GetBandwidth() *NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface_Mcac_Bandwidth {
	if t != nil && t.Bandwidth != nil {
		return t.Bandwidth
	}
	return nil
}

// GetInterfacePolicy retrieves the value of the leaf InterfacePolicy from the NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface_Mcac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfacePolicy is set, it can
// safely use t.GetInterfacePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfacePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface_Mcac) GetInterfacePolicy() string {
	if t == nil || t.InterfacePolicy == nil {
		return ""
	}
	return *t.InterfacePolicy
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface_Mcac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface_Mcac) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface_Mcac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface_Mcac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Bandwidth.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface_Mcac) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface_Mcac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface_Mcac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface_Mcac) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface_Mcac.
func (*NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface_Mcac) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface_Mcac_Bandwidth represents the /nokia-conf/configure/groups/group/router/mld/group-interface/mcac/bandwidth YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface_Mcac_Bandwidth struct {
	Mandatory NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface_Mcac_Bandwidth_Mandatory_Union `path:"mandatory" module:"nokia-conf"`
	Total     NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface_Mcac_Bandwidth_Total_Union     `path:"total" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface_Mcac_Bandwidth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface_Mcac_Bandwidth) IsYANGGoStruct() {}

// GetMandatory retrieves the value of the leaf Mandatory from the NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface_Mcac_Bandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mandatory is set, it can
// safely use t.GetMandatory() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mandatory == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface_Mcac_Bandwidth) GetMandatory() NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface_Mcac_Bandwidth_Mandatory_Union {
	if t == nil || t.Mandatory == nil {
		return NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	return t.Mandatory
}

// GetTotal retrieves the value of the leaf Total from the NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface_Mcac_Bandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Total is set, it can
// safely use t.GetTotal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Total == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface_Mcac_Bandwidth) GetTotal() NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface_Mcac_Bandwidth_Total_Union {
	if t == nil || t.Total == nil {
		return NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	return t.Total
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface_Mcac_Bandwidth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface_Mcac_Bandwidth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mandatory == nil {
		t.Mandatory = NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	if t.Total == nil {
		t.Total = NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface_Mcac_Bandwidth) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface_Mcac_Bandwidth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface_Mcac_Bandwidth) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface_Mcac_Bandwidth) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface_Mcac_Bandwidth.
func (*NokiaConf_Configure_Groups_Group_Router_Mld_GroupInterface_Mcac_Bandwidth) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mld_Interface represents the /nokia-conf/configure/groups/group/router/mld/interface YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mld_Interface struct {
	AdminState                E_NokiaTypesSros_AdminState                                         `path:"admin-state" module:"nokia-conf"`
	ImportPolicy              *string                                                             `path:"import-policy" module:"nokia-conf"`
	IpInterfaceName           *string                                                             `path:"ip-interface-name" module:"nokia-conf"`
	MaximumNumberGroupSources *uint32                                                             `path:"maximum-number-group-sources" module:"nokia-conf"`
	MaximumNumberGroups       *uint32                                                             `path:"maximum-number-groups" module:"nokia-conf"`
	MaximumNumberSources      *uint32                                                             `path:"maximum-number-sources" module:"nokia-conf"`
	Mcac                      *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac         `path:"mcac" module:"nokia-conf"`
	QueryInterval             *uint32                                                             `path:"query-interval" module:"nokia-conf"`
	QueryLastMemberInterval   *uint32                                                             `path:"query-last-member-interval" module:"nokia-conf"`
	QueryResponseInterval     *uint32                                                             `path:"query-response-interval" module:"nokia-conf"`
	RouterAlertCheck          *bool                                                               `path:"router-alert-check" module:"nokia-conf"`
	SsmTranslate              *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate `path:"ssm-translate" module:"nokia-conf"`
	Static                    *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static       `path:"static" module:"nokia-conf"`
	Version                   E_NokiaTypesIgmp_MldVersion                                         `path:"version" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mld_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mld_Interface) IsYANGGoStruct() {}

// GetOrCreateMcac retrieves the value of the Mcac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface) GetOrCreateMcac() *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac {
	if t.Mcac != nil {
		return t.Mcac
	}
	t.Mcac = &NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac{}
	return t.Mcac
}

// GetOrCreateSsmTranslate retrieves the value of the SsmTranslate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface) GetOrCreateSsmTranslate() *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate {
	if t.SsmTranslate != nil {
		return t.SsmTranslate
	}
	t.SsmTranslate = &NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate{}
	return t.SsmTranslate
}

// GetOrCreateStatic retrieves the value of the Static field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface) GetOrCreateStatic() *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static {
	if t.Static != nil {
		return t.Static
	}
	t.Static = &NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static{}
	return t.Static
}

// GetMcac returns the value of the Mcac struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Mld_Interface. If the receiver or the field Mcac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface) GetMcac() *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac {
	if t != nil && t.Mcac != nil {
		return t.Mcac
	}
	return nil
}

// GetSsmTranslate returns the value of the SsmTranslate struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Mld_Interface. If the receiver or the field SsmTranslate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface) GetSsmTranslate() *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate {
	if t != nil && t.SsmTranslate != nil {
		return t.SsmTranslate
	}
	return nil
}

// GetStatic returns the value of the Static struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Mld_Interface. If the receiver or the field Static is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface) GetStatic() *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static {
	if t != nil && t.Static != nil {
		return t.Static
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Mld_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Groups_Group_Router_Mld_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface) GetImportPolicy() string {
	if t == nil || t.ImportPolicy == nil {
		return ""
	}
	return *t.ImportPolicy
}

// GetIpInterfaceName retrieves the value of the leaf IpInterfaceName from the NokiaConf_Configure_Groups_Group_Router_Mld_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpInterfaceName is set, it can
// safely use t.GetIpInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpInterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface) GetIpInterfaceName() string {
	if t == nil || t.IpInterfaceName == nil {
		return ""
	}
	return *t.IpInterfaceName
}

// GetMaximumNumberGroupSources retrieves the value of the leaf MaximumNumberGroupSources from the NokiaConf_Configure_Groups_Group_Router_Mld_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroupSources is set, it can
// safely use t.GetMaximumNumberGroupSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroupSources == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface) GetMaximumNumberGroupSources() uint32 {
	if t == nil || t.MaximumNumberGroupSources == nil {
		return 0
	}
	return *t.MaximumNumberGroupSources
}

// GetMaximumNumberGroups retrieves the value of the leaf MaximumNumberGroups from the NokiaConf_Configure_Groups_Group_Router_Mld_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroups is set, it can
// safely use t.GetMaximumNumberGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface) GetMaximumNumberGroups() uint32 {
	if t == nil || t.MaximumNumberGroups == nil {
		return 0
	}
	return *t.MaximumNumberGroups
}

// GetMaximumNumberSources retrieves the value of the leaf MaximumNumberSources from the NokiaConf_Configure_Groups_Group_Router_Mld_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberSources is set, it can
// safely use t.GetMaximumNumberSources() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberSources == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface) GetMaximumNumberSources() uint32 {
	if t == nil || t.MaximumNumberSources == nil {
		return 0
	}
	return *t.MaximumNumberSources
}

// GetQueryInterval retrieves the value of the leaf QueryInterval from the NokiaConf_Configure_Groups_Group_Router_Mld_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryInterval is set, it can
// safely use t.GetQueryInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface) GetQueryInterval() uint32 {
	if t == nil || t.QueryInterval == nil {
		return 0
	}
	return *t.QueryInterval
}

// GetQueryLastMemberInterval retrieves the value of the leaf QueryLastMemberInterval from the NokiaConf_Configure_Groups_Group_Router_Mld_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryLastMemberInterval is set, it can
// safely use t.GetQueryLastMemberInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryLastMemberInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface) GetQueryLastMemberInterval() uint32 {
	if t == nil || t.QueryLastMemberInterval == nil {
		return 0
	}
	return *t.QueryLastMemberInterval
}

// GetQueryResponseInterval retrieves the value of the leaf QueryResponseInterval from the NokiaConf_Configure_Groups_Group_Router_Mld_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryResponseInterval is set, it can
// safely use t.GetQueryResponseInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryResponseInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface) GetQueryResponseInterval() uint32 {
	if t == nil || t.QueryResponseInterval == nil {
		return 0
	}
	return *t.QueryResponseInterval
}

// GetRouterAlertCheck retrieves the value of the leaf RouterAlertCheck from the NokiaConf_Configure_Groups_Group_Router_Mld_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterAlertCheck is set, it can
// safely use t.GetRouterAlertCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterAlertCheck == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface) GetRouterAlertCheck() bool {
	if t == nil || t.RouterAlertCheck == nil {
		return true
	}
	return *t.RouterAlertCheck
}

// GetVersion retrieves the value of the leaf Version from the NokiaConf_Configure_Groups_Group_Router_Mld_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface) GetVersion() E_NokiaTypesIgmp_MldVersion {
	if t == nil || t.Version == 0 {
		return NokiaTypesIgmp_MldVersion_2
	}
	return t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mld_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.RouterAlertCheck == nil {
		var v bool = true
		t.RouterAlertCheck = &v
	}
	if t.Version == 0 {
		t.Version = NokiaTypesIgmp_MldVersion_2
	}
	t.Mcac.PopulateDefaults()
	t.SsmTranslate.PopulateDefaults()
	t.Static.PopulateDefaults()
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Mld_Interface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.IpInterfaceName == nil {
		return nil, fmt.Errorf("nil value for key IpInterfaceName")
	}

	return map[string]interface{}{
		"ip-interface-name": *t.IpInterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mld_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mld_Interface.
func (*NokiaConf_Configure_Groups_Group_Router_Mld_Interface) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac represents the /nokia-conf/configure/groups/group/router/mld/interface/mcac YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac struct {
	Bandwidth       *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_Bandwidth     `path:"bandwidth" module:"nokia-conf"`
	InterfacePolicy *string                                                                   `path:"interface-policy" module:"nokia-conf"`
	McConstraints   *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints `path:"mc-constraints" module:"nokia-conf"`
	Policy          *string                                                                   `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac) IsYANGGoStruct() {}

// GetOrCreateBandwidth retrieves the value of the Bandwidth field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac) GetOrCreateBandwidth() *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_Bandwidth {
	if t.Bandwidth != nil {
		return t.Bandwidth
	}
	t.Bandwidth = &NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_Bandwidth{}
	return t.Bandwidth
}

// GetOrCreateMcConstraints retrieves the value of the McConstraints field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac) GetOrCreateMcConstraints() *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints {
	if t.McConstraints != nil {
		return t.McConstraints
	}
	t.McConstraints = &NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints{}
	return t.McConstraints
}

// GetBandwidth returns the value of the Bandwidth struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac. If the receiver or the field Bandwidth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac) GetBandwidth() *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_Bandwidth {
	if t != nil && t.Bandwidth != nil {
		return t.Bandwidth
	}
	return nil
}

// GetMcConstraints returns the value of the McConstraints struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac. If the receiver or the field McConstraints is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac) GetMcConstraints() *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints {
	if t != nil && t.McConstraints != nil {
		return t.McConstraints
	}
	return nil
}

// GetInterfacePolicy retrieves the value of the leaf InterfacePolicy from the NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfacePolicy is set, it can
// safely use t.GetInterfacePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfacePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac) GetInterfacePolicy() string {
	if t == nil || t.InterfacePolicy == nil {
		return ""
	}
	return *t.InterfacePolicy
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Bandwidth.PopulateDefaults()
	t.McConstraints.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac.
func (*NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_Bandwidth represents the /nokia-conf/configure/groups/group/router/mld/interface/mcac/bandwidth YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_Bandwidth struct {
	Mandatory NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_Bandwidth_Mandatory_Union `path:"mandatory" module:"nokia-conf"`
	Total     NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_Bandwidth_Total_Union     `path:"total" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_Bandwidth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_Bandwidth) IsYANGGoStruct() {}

// GetMandatory retrieves the value of the leaf Mandatory from the NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_Bandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mandatory is set, it can
// safely use t.GetMandatory() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mandatory == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_Bandwidth) GetMandatory() NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_Bandwidth_Mandatory_Union {
	if t == nil || t.Mandatory == nil {
		return NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	return t.Mandatory
}

// GetTotal retrieves the value of the leaf Total from the NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_Bandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Total is set, it can
// safely use t.GetTotal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Total == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_Bandwidth) GetTotal() NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_Bandwidth_Total_Union {
	if t == nil || t.Total == nil {
		return NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	return t.Total
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_Bandwidth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_Bandwidth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mandatory == nil {
		t.Mandatory = NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	if t.Total == nil {
		t.Total = NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_Bandwidth) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_Bandwidth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_Bandwidth) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_Bandwidth) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_Bandwidth.
func (*NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_Bandwidth) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints represents the /nokia-conf/configure/groups/group/router/mld/interface/mcac/mc-constraints YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints struct {
	Level            map[NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_Level_LevelId_Union]*NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_Level                     `path:"level" module:"nokia-conf"`
	NumberDown       map[NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_NumberDown_NumberLagPortDown_Union]*NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_NumberDown `path:"number-down" module:"nokia-conf"`
	UseLagPortWeight *bool                                                                                                                                                                                                `path:"use-lag-port-weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints) IsYANGGoStruct() {}

// NewLevel creates a new entry in the Level list of the
// NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints) NewLevel(LevelId NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_Level_LevelId_Union) (*NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_Level, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_Level_LevelId_Union]*NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_Level)
	}

	key := LevelId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Level[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Level", key)
	}

	t.Level[key] = &NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_Level{
		LevelId: LevelId,
	}

	return t.Level[key], nil
}

// RenameLevel renames an entry in the list Level within
// the NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints) RenameLevel(oldK, newK NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_Level_LevelId_Union) error {
	if _, ok := t.Level[newK]; ok {
		return fmt.Errorf("key %v already exists in Level", newK)
	}

	e, ok := t.Level[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Level", oldK)
	}
	e.LevelId = newK

	t.Level[newK] = e
	delete(t.Level, oldK)
	return nil
}

// GetOrCreateLevel retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints) GetOrCreateLevel(LevelId NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_Level_LevelId_Union) *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_Level {

	key := LevelId

	if v, ok := t.Level[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLevel(LevelId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLevel got unexpected error: %v", err))
	}
	return v
}

// GetLevel retrieves the value with the specified key from
// the Level map field of NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints) GetLevel(LevelId NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_Level_LevelId_Union) *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_Level {

	if t == nil {
		return nil
	}

	key := LevelId

	if lm, ok := t.Level[key]; ok {
		return lm
	}
	return nil
}

// DeleteLevel deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints) DeleteLevel(LevelId NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_Level_LevelId_Union) {
	key := LevelId

	delete(t.Level, key)
}

// AppendLevel appends the supplied NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_Level struct to the
// list Level of NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_Level already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints) AppendLevel(v *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_Level) error {
	key := v.LevelId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_Level_LevelId_Union]*NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_Level)
	}

	if _, ok := t.Level[key]; ok {
		return fmt.Errorf("duplicate key for list Level %v", key)
	}

	t.Level[key] = v
	return nil
}

// NewNumberDown creates a new entry in the NumberDown list of the
// NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints) NewNumberDown(NumberLagPortDown NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_NumberDown_NumberLagPortDown_Union) (*NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_NumberDown, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NumberDown == nil {
		t.NumberDown = make(map[NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_NumberDown_NumberLagPortDown_Union]*NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_NumberDown)
	}

	key := NumberLagPortDown

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NumberDown[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NumberDown", key)
	}

	t.NumberDown[key] = &NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_NumberDown{
		NumberLagPortDown: NumberLagPortDown,
	}

	return t.NumberDown[key], nil
}

// RenameNumberDown renames an entry in the list NumberDown within
// the NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints) RenameNumberDown(oldK, newK NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_NumberDown_NumberLagPortDown_Union) error {
	if _, ok := t.NumberDown[newK]; ok {
		return fmt.Errorf("key %v already exists in NumberDown", newK)
	}

	e, ok := t.NumberDown[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NumberDown", oldK)
	}
	e.NumberLagPortDown = newK

	t.NumberDown[newK] = e
	delete(t.NumberDown, oldK)
	return nil
}

// GetOrCreateNumberDown retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints) GetOrCreateNumberDown(NumberLagPortDown NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_NumberDown_NumberLagPortDown_Union) *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_NumberDown {

	key := NumberLagPortDown

	if v, ok := t.NumberDown[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNumberDown(NumberLagPortDown)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNumberDown got unexpected error: %v", err))
	}
	return v
}

// GetNumberDown retrieves the value with the specified key from
// the NumberDown map field of NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints) GetNumberDown(NumberLagPortDown NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_NumberDown_NumberLagPortDown_Union) *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_NumberDown {

	if t == nil {
		return nil
	}

	key := NumberLagPortDown

	if lm, ok := t.NumberDown[key]; ok {
		return lm
	}
	return nil
}

// DeleteNumberDown deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints) DeleteNumberDown(NumberLagPortDown NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_NumberDown_NumberLagPortDown_Union) {
	key := NumberLagPortDown

	delete(t.NumberDown, key)
}

// AppendNumberDown appends the supplied NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_NumberDown struct to the
// list NumberDown of NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_NumberDown already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints) AppendNumberDown(v *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_NumberDown) error {
	key := v.NumberLagPortDown

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NumberDown == nil {
		t.NumberDown = make(map[NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_NumberDown_NumberLagPortDown_Union]*NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_NumberDown)
	}

	if _, ok := t.NumberDown[key]; ok {
		return fmt.Errorf("duplicate key for list NumberDown %v", key)
	}

	t.NumberDown[key] = v
	return nil
}

// GetUseLagPortWeight retrieves the value of the leaf UseLagPortWeight from the NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseLagPortWeight is set, it can
// safely use t.GetUseLagPortWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseLagPortWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints) GetUseLagPortWeight() bool {
	if t == nil || t.UseLagPortWeight == nil {
		return false
	}
	return *t.UseLagPortWeight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.UseLagPortWeight == nil {
		var v bool = false
		t.UseLagPortWeight = &v
	}
	for _, e := range t.Level {
		e.PopulateDefaults()
	}
	for _, e := range t.NumberDown {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints.
func (*NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_Level represents the /nokia-conf/configure/groups/group/router/mld/interface/mcac/mc-constraints/level YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_Level struct {
	Bandwidth *uint32                                                                                      `path:"bandwidth" module:"nokia-conf"`
	LevelId   NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_Level_LevelId_Union `path:"level-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_Level implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_Level) IsYANGGoStruct() {
}

// GetBandwidth retrieves the value of the leaf Bandwidth from the NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bandwidth is set, it can
// safely use t.GetBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_Level) GetBandwidth() uint32 {
	if t == nil || t.Bandwidth == nil {
		return 0
	}
	return *t.Bandwidth
}

// GetLevelId retrieves the value of the leaf LevelId from the NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LevelId is set, it can
// safely use t.GetLevelId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LevelId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_Level) GetLevelId() NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_Level_LevelId_Union {
	if t == nil || t.LevelId == nil {
		return nil
	}
	return t.LevelId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_Level
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_Level) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_Level struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_Level) Î›ListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"level-id": t.LevelId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_Level) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_Level"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_Level) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_Level) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_Level.
func (*NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_Level) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_NumberDown represents the /nokia-conf/configure/groups/group/router/mld/interface/mcac/mc-constraints/number-down YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_NumberDown struct {
	Level             *uint32                                                                                                     `path:"level" module:"nokia-conf"`
	NumberLagPortDown NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_NumberDown_NumberLagPortDown_Union `path:"number-lag-port-down" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_NumberDown implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_NumberDown) IsYANGGoStruct() {
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_NumberDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_NumberDown) GetLevel() uint32 {
	if t == nil || t.Level == nil {
		return 0
	}
	return *t.Level
}

// GetNumberLagPortDown retrieves the value of the leaf NumberLagPortDown from the NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_NumberDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NumberLagPortDown is set, it can
// safely use t.GetNumberLagPortDown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NumberLagPortDown == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_NumberDown) GetNumberLagPortDown() NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_NumberDown_NumberLagPortDown_Union {
	if t == nil || t.NumberLagPortDown == nil {
		return nil
	}
	return t.NumberLagPortDown
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_NumberDown
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_NumberDown) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_NumberDown struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_NumberDown) Î›ListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"number-lag-port-down": t.NumberLagPortDown,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_NumberDown) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_NumberDown"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_NumberDown) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_NumberDown) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_NumberDown.
func (*NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Mcac_McConstraints_NumberDown) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate represents the /nokia-conf/configure/groups/group/router/mld/interface/ssm-translate YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate struct {
	GroupRange map[NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange_Key]*NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange `path:"group-range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate) IsYANGGoStruct() {}

// NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange_Key represents the key for list GroupRange of element /nokia-conf/configure/groups/group/router/mld/interface/ssm-translate.
type NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange_Key struct {
	Start string `path:"start"`
	End   string `path:"end"`
}

// NewGroupRange creates a new entry in the GroupRange list of the
// NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate) NewGroupRange(Start string, End string) (*NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange_Key]*NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange)
	}

	key := NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GroupRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GroupRange", key)
	}

	t.GroupRange[key] = &NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange{
		Start: &Start,
		End:   &End,
	}

	return t.GroupRange[key], nil
}

// RenameGroupRange renames an entry in the list GroupRange within
// the NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate) RenameGroupRange(oldK, newK NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange_Key) error {
	if _, ok := t.GroupRange[newK]; ok {
		return fmt.Errorf("key %v already exists in GroupRange", newK)
	}

	e, ok := t.GroupRange[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GroupRange", oldK)
	}
	e.Start = &newK.Start
	e.End = &newK.End

	t.GroupRange[newK] = e
	delete(t.GroupRange, oldK)
	return nil
}

// GetOrCreateGroupRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate) GetOrCreateGroupRange(Start string, End string) *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange {

	key := NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	if v, ok := t.GroupRange[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroupRange(Start, End)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroupRange got unexpected error: %v", err))
	}
	return v
}

// GetGroupRange retrieves the value with the specified key from
// the GroupRange map field of NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate) GetGroupRange(Start string, End string) *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	if lm, ok := t.GroupRange[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroupRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate) DeleteGroupRange(Start string, End string) {
	key := NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	delete(t.GroupRange, key)
}

// AppendGroupRange appends the supplied NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange struct to the
// list GroupRange of NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate) AppendGroupRange(v *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange) error {
	if v.Start == nil {
		return fmt.Errorf("invalid nil key for Start")
	}

	if v.End == nil {
		return fmt.Errorf("invalid nil key for End")
	}

	key := NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange_Key{
		Start: *v.Start,
		End:   *v.End,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange_Key]*NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange)
	}

	if _, ok := t.GroupRange[key]; ok {
		return fmt.Errorf("duplicate key for list GroupRange %v", key)
	}

	t.GroupRange[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.GroupRange {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate.
func (*NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange represents the /nokia-conf/configure/groups/group/router/mld/interface/ssm-translate/group-range YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange struct {
	End    *string                                                                                          `path:"end" module:"nokia-conf"`
	Source map[string]*NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange_Source `path:"source" module:"nokia-conf"`
	Start  *string                                                                                          `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange) IsYANGGoStruct() {
}

// NewSource creates a new entry in the Source list of the
// NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange) NewSource(SourceAddress string) (*NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange_Source, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange_Source)
	}

	key := SourceAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Source[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Source", key)
	}

	t.Source[key] = &NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange_Source{
		SourceAddress: &SourceAddress,
	}

	return t.Source[key], nil
}

// RenameSource renames an entry in the list Source within
// the NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange) RenameSource(oldK, newK string) error {
	if _, ok := t.Source[newK]; ok {
		return fmt.Errorf("key %v already exists in Source", newK)
	}

	e, ok := t.Source[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Source", oldK)
	}
	e.SourceAddress = &newK

	t.Source[newK] = e
	delete(t.Source, oldK)
	return nil
}

// GetOrCreateSource retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange) GetOrCreateSource(SourceAddress string) *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange_Source {

	key := SourceAddress

	if v, ok := t.Source[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSource(SourceAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSource got unexpected error: %v", err))
	}
	return v
}

// GetSource retrieves the value with the specified key from
// the Source map field of NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange) GetSource(SourceAddress string) *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange_Source {

	if t == nil {
		return nil
	}

	key := SourceAddress

	if lm, ok := t.Source[key]; ok {
		return lm
	}
	return nil
}

// DeleteSource deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange) DeleteSource(SourceAddress string) {
	key := SourceAddress

	delete(t.Source, key)
}

// AppendSource appends the supplied NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange_Source struct to the
// list Source of NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange_Source already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange) AppendSource(v *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange_Source) error {
	if v.SourceAddress == nil {
		return fmt.Errorf("invalid nil key received for SourceAddress")
	}

	key := *v.SourceAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange_Source)
	}

	if _, ok := t.Source[key]; ok {
		return fmt.Errorf("duplicate key for list Source %v", key)
	}

	t.Source[key] = v
	return nil
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange) GetEnd() string {
	if t == nil || t.End == nil {
		return ""
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange) GetStart() string {
	if t == nil || t.Start == nil {
		return ""
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Source {
		e.PopulateDefaults()
	}
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.End == nil {
		return nil, fmt.Errorf("nil value for key End")
	}

	if t.Start == nil {
		return nil, fmt.Errorf("nil value for key Start")
	}

	return map[string]interface{}{
		"end":   *t.End,
		"start": *t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange.
func (*NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange_Source represents the /nokia-conf/configure/groups/group/router/mld/interface/ssm-translate/group-range/source YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange_Source struct {
	SourceAddress *string `path:"source-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange_Source implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange_Source) IsYANGGoStruct() {
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange_Source) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange_Source
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange_Source) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange_Source struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange_Source) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.SourceAddress == nil {
		return nil, fmt.Errorf("nil value for key SourceAddress")
	}

	return map[string]interface{}{
		"source-address": *t.SourceAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange_Source) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange_Source"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange_Source) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange_Source) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange_Source.
func (*NokiaConf_Configure_Groups_Group_Router_Mld_Interface_SsmTranslate_GroupRange_Source) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static represents the /nokia-conf/configure/groups/group/router/mld/interface/static YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static struct {
	Group      map[string]*NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_Group                                                                           `path:"group" module:"nokia-conf"`
	GroupRange map[NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange_Key]*NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange `path:"group-range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static) IsYANGGoStruct() {}

// NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange_Key represents the key for list GroupRange of element /nokia-conf/configure/groups/group/router/mld/interface/static.
type NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange_Key struct {
	Start string `path:"start"`
	End   string `path:"end"`
	Step  string `path:"step"`
}

// NewGroup creates a new entry in the Group list of the
// NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static) NewGroup(GroupAddress string) (*NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_Group, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_Group)
	}

	key := GroupAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_Group{
		GroupAddress: &GroupAddress,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static) RenameGroup(oldK, newK string) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.GroupAddress = &newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static) GetOrCreateGroup(GroupAddress string) *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_Group {

	key := GroupAddress

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(GroupAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static) GetGroup(GroupAddress string) *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_Group {

	if t == nil {
		return nil
	}

	key := GroupAddress

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static) DeleteGroup(GroupAddress string) {
	key := GroupAddress

	delete(t.Group, key)
}

// AppendGroup appends the supplied NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_Group struct to the
// list Group of NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_Group already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static) AppendGroup(v *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_Group) error {
	if v.GroupAddress == nil {
		return fmt.Errorf("invalid nil key received for GroupAddress")
	}

	key := *v.GroupAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// NewGroupRange creates a new entry in the GroupRange list of the
// NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static) NewGroupRange(Start string, End string, Step string) (*NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange_Key]*NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange)
	}

	key := NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange_Key{
		Start: Start,
		End:   End,
		Step:  Step,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GroupRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GroupRange", key)
	}

	t.GroupRange[key] = &NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange{
		Start: &Start,
		End:   &End,
		Step:  &Step,
	}

	return t.GroupRange[key], nil
}

// RenameGroupRange renames an entry in the list GroupRange within
// the NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static) RenameGroupRange(oldK, newK NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange_Key) error {
	if _, ok := t.GroupRange[newK]; ok {
		return fmt.Errorf("key %v already exists in GroupRange", newK)
	}

	e, ok := t.GroupRange[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GroupRange", oldK)
	}
	e.Start = &newK.Start
	e.End = &newK.End
	e.Step = &newK.Step

	t.GroupRange[newK] = e
	delete(t.GroupRange, oldK)
	return nil
}

// GetOrCreateGroupRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static) GetOrCreateGroupRange(Start string, End string, Step string) *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange {

	key := NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange_Key{
		Start: Start,
		End:   End,
		Step:  Step,
	}

	if v, ok := t.GroupRange[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroupRange(Start, End, Step)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroupRange got unexpected error: %v", err))
	}
	return v
}

// GetGroupRange retrieves the value with the specified key from
// the GroupRange map field of NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static) GetGroupRange(Start string, End string, Step string) *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange_Key{
		Start: Start,
		End:   End,
		Step:  Step,
	}

	if lm, ok := t.GroupRange[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroupRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static) DeleteGroupRange(Start string, End string, Step string) {
	key := NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange_Key{
		Start: Start,
		End:   End,
		Step:  Step,
	}

	delete(t.GroupRange, key)
}

// AppendGroupRange appends the supplied NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange struct to the
// list GroupRange of NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static) AppendGroupRange(v *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange) error {
	if v.Start == nil {
		return fmt.Errorf("invalid nil key for Start")
	}

	if v.End == nil {
		return fmt.Errorf("invalid nil key for End")
	}

	if v.Step == nil {
		return fmt.Errorf("invalid nil key for Step")
	}

	key := NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange_Key{
		Start: *v.Start,
		End:   *v.End,
		Step:  *v.Step,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange_Key]*NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange)
	}

	if _, ok := t.GroupRange[key]; ok {
		return fmt.Errorf("duplicate key for list GroupRange %v", key)
	}

	t.GroupRange[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
	for _, e := range t.GroupRange {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static.
func (*NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_Group represents the /nokia-conf/configure/groups/group/router/mld/interface/static/group YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_Group struct {
	GroupAddress *string                                                                               `path:"group-address" module:"nokia-conf"`
	Source       map[string]*NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_Group_Source `path:"source" module:"nokia-conf"`
	Starg        YANGEmpty                                                                             `path:"starg" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_Group) IsYANGGoStruct() {}

// NewSource creates a new entry in the Source list of the
// NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_Group struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_Group) NewSource(SourceAddress string) (*NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_Group_Source, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_Group_Source)
	}

	key := SourceAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Source[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Source", key)
	}

	t.Source[key] = &NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_Group_Source{
		SourceAddress: &SourceAddress,
	}

	return t.Source[key], nil
}

// RenameSource renames an entry in the list Source within
// the NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_Group) RenameSource(oldK, newK string) error {
	if _, ok := t.Source[newK]; ok {
		return fmt.Errorf("key %v already exists in Source", newK)
	}

	e, ok := t.Source[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Source", oldK)
	}
	e.SourceAddress = &newK

	t.Source[newK] = e
	delete(t.Source, oldK)
	return nil
}

// GetOrCreateSource retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_Group) GetOrCreateSource(SourceAddress string) *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_Group_Source {

	key := SourceAddress

	if v, ok := t.Source[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSource(SourceAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSource got unexpected error: %v", err))
	}
	return v
}

// GetSource retrieves the value with the specified key from
// the Source map field of NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_Group) GetSource(SourceAddress string) *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_Group_Source {

	if t == nil {
		return nil
	}

	key := SourceAddress

	if lm, ok := t.Source[key]; ok {
		return lm
	}
	return nil
}

// DeleteSource deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_Group. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_Group) DeleteSource(SourceAddress string) {
	key := SourceAddress

	delete(t.Source, key)
}

// AppendSource appends the supplied NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_Group_Source struct to the
// list Source of NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_Group. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_Group_Source already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_Group) AppendSource(v *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_Group_Source) error {
	if v.SourceAddress == nil {
		return fmt.Errorf("invalid nil key received for SourceAddress")
	}

	key := *v.SourceAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_Group_Source)
	}

	if _, ok := t.Source[key]; ok {
		return fmt.Errorf("duplicate key for list Source %v", key)
	}

	t.Source[key] = v
	return nil
}

// GetGroupAddress retrieves the value of the leaf GroupAddress from the NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GroupAddress is set, it can
// safely use t.GetGroupAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GroupAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_Group) GetGroupAddress() string {
	if t == nil || t.GroupAddress == nil {
		return ""
	}
	return *t.GroupAddress
}

// GetStarg retrieves the value of the leaf Starg from the NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Starg is set, it can
// safely use t.GetStarg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Starg == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_Group) GetStarg() YANGEmpty {
	if t == nil || t.Starg == false {
		return false
	}
	return t.Starg
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Source {
		e.PopulateDefaults()
	}
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_Group struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_Group) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.GroupAddress == nil {
		return nil, fmt.Errorf("nil value for key GroupAddress")
	}

	return map[string]interface{}{
		"group-address": *t.GroupAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_Group) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_Group) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_Group) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_Group.
func (*NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_Group) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange represents the /nokia-conf/configure/groups/group/router/mld/interface/static/group-range YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange struct {
	End    *string                                                                                    `path:"end" module:"nokia-conf"`
	Source map[string]*NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange_Source `path:"source" module:"nokia-conf"`
	Starg  YANGEmpty                                                                                  `path:"starg" module:"nokia-conf"`
	Start  *string                                                                                    `path:"start" module:"nokia-conf"`
	Step   *string                                                                                    `path:"step" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange) IsYANGGoStruct() {}

// NewSource creates a new entry in the Source list of the
// NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange) NewSource(SourceAddress string) (*NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange_Source, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange_Source)
	}

	key := SourceAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Source[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Source", key)
	}

	t.Source[key] = &NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange_Source{
		SourceAddress: &SourceAddress,
	}

	return t.Source[key], nil
}

// RenameSource renames an entry in the list Source within
// the NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange) RenameSource(oldK, newK string) error {
	if _, ok := t.Source[newK]; ok {
		return fmt.Errorf("key %v already exists in Source", newK)
	}

	e, ok := t.Source[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Source", oldK)
	}
	e.SourceAddress = &newK

	t.Source[newK] = e
	delete(t.Source, oldK)
	return nil
}

// GetOrCreateSource retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange) GetOrCreateSource(SourceAddress string) *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange_Source {

	key := SourceAddress

	if v, ok := t.Source[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSource(SourceAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSource got unexpected error: %v", err))
	}
	return v
}

// GetSource retrieves the value with the specified key from
// the Source map field of NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange) GetSource(SourceAddress string) *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange_Source {

	if t == nil {
		return nil
	}

	key := SourceAddress

	if lm, ok := t.Source[key]; ok {
		return lm
	}
	return nil
}

// DeleteSource deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange) DeleteSource(SourceAddress string) {
	key := SourceAddress

	delete(t.Source, key)
}

// AppendSource appends the supplied NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange_Source struct to the
// list Source of NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange_Source already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange) AppendSource(v *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange_Source) error {
	if v.SourceAddress == nil {
		return fmt.Errorf("invalid nil key received for SourceAddress")
	}

	key := *v.SourceAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange_Source)
	}

	if _, ok := t.Source[key]; ok {
		return fmt.Errorf("duplicate key for list Source %v", key)
	}

	t.Source[key] = v
	return nil
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange) GetEnd() string {
	if t == nil || t.End == nil {
		return ""
	}
	return *t.End
}

// GetStarg retrieves the value of the leaf Starg from the NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Starg is set, it can
// safely use t.GetStarg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Starg == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange) GetStarg() YANGEmpty {
	if t == nil || t.Starg == false {
		return false
	}
	return t.Starg
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange) GetStart() string {
	if t == nil || t.Start == nil {
		return ""
	}
	return *t.Start
}

// GetStep retrieves the value of the leaf Step from the NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Step is set, it can
// safely use t.GetStep() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Step == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange) GetStep() string {
	if t == nil || t.Step == nil {
		return ""
	}
	return *t.Step
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Source {
		e.PopulateDefaults()
	}
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.End == nil {
		return nil, fmt.Errorf("nil value for key End")
	}

	if t.Start == nil {
		return nil, fmt.Errorf("nil value for key Start")
	}

	if t.Step == nil {
		return nil, fmt.Errorf("nil value for key Step")
	}

	return map[string]interface{}{
		"end":   *t.End,
		"start": *t.Start,
		"step":  *t.Step,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange.
func (*NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange_Source represents the /nokia-conf/configure/groups/group/router/mld/interface/static/group-range/source YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange_Source struct {
	SourceAddress *string `path:"source-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange_Source implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange_Source) IsYANGGoStruct() {
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange_Source) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange_Source
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange_Source) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange_Source struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange_Source) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.SourceAddress == nil {
		return nil, fmt.Errorf("nil value for key SourceAddress")
	}

	return map[string]interface{}{
		"source-address": *t.SourceAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange_Source) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange_Source"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange_Source) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange_Source) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange_Source.
func (*NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_GroupRange_Source) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_Group_Source represents the /nokia-conf/configure/groups/group/router/mld/interface/static/group/source YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_Group_Source struct {
	SourceAddress *string `path:"source-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_Group_Source implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_Group_Source) IsYANGGoStruct() {}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_Group_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_Group_Source) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_Group_Source
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_Group_Source) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_Group_Source struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_Group_Source) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.SourceAddress == nil {
		return nil, fmt.Errorf("nil value for key SourceAddress")
	}

	return map[string]interface{}{
		"source-address": *t.SourceAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_Group_Source) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_Group_Source"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_Group_Source) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_Group_Source) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_Group_Source.
func (*NokiaConf_Configure_Groups_Group_Router_Mld_Interface_Static_Group_Source) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate represents the /nokia-conf/configure/groups/group/router/mld/ssm-translate YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate struct {
	GroupRange map[NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange_Key]*NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange `path:"group-range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate) IsYANGGoStruct() {}

// NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange_Key represents the key for list GroupRange of element /nokia-conf/configure/groups/group/router/mld/ssm-translate.
type NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange_Key struct {
	Start string `path:"start"`
	End   string `path:"end"`
}

// NewGroupRange creates a new entry in the GroupRange list of the
// NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate) NewGroupRange(Start string, End string) (*NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange_Key]*NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange)
	}

	key := NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GroupRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GroupRange", key)
	}

	t.GroupRange[key] = &NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange{
		Start: &Start,
		End:   &End,
	}

	return t.GroupRange[key], nil
}

// RenameGroupRange renames an entry in the list GroupRange within
// the NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate) RenameGroupRange(oldK, newK NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange_Key) error {
	if _, ok := t.GroupRange[newK]; ok {
		return fmt.Errorf("key %v already exists in GroupRange", newK)
	}

	e, ok := t.GroupRange[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GroupRange", oldK)
	}
	e.Start = &newK.Start
	e.End = &newK.End

	t.GroupRange[newK] = e
	delete(t.GroupRange, oldK)
	return nil
}

// GetOrCreateGroupRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate) GetOrCreateGroupRange(Start string, End string) *NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange {

	key := NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	if v, ok := t.GroupRange[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroupRange(Start, End)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroupRange got unexpected error: %v", err))
	}
	return v
}

// GetGroupRange retrieves the value with the specified key from
// the GroupRange map field of NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate) GetGroupRange(Start string, End string) *NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	if lm, ok := t.GroupRange[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroupRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate) DeleteGroupRange(Start string, End string) {
	key := NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange_Key{
		Start: Start,
		End:   End,
	}

	delete(t.GroupRange, key)
}

// AppendGroupRange appends the supplied NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange struct to the
// list GroupRange of NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate) AppendGroupRange(v *NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange) error {
	if v.Start == nil {
		return fmt.Errorf("invalid nil key for Start")
	}

	if v.End == nil {
		return fmt.Errorf("invalid nil key for End")
	}

	key := NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange_Key{
		Start: *v.Start,
		End:   *v.End,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange_Key]*NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange)
	}

	if _, ok := t.GroupRange[key]; ok {
		return fmt.Errorf("duplicate key for list GroupRange %v", key)
	}

	t.GroupRange[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.GroupRange {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate.
func (*NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange represents the /nokia-conf/configure/groups/group/router/mld/ssm-translate/group-range YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange struct {
	End    *string                                                                                `path:"end" module:"nokia-conf"`
	Source map[string]*NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange_Source `path:"source" module:"nokia-conf"`
	Start  *string                                                                                `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange) IsYANGGoStruct() {}

// NewSource creates a new entry in the Source list of the
// NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange) NewSource(SourceAddress string) (*NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange_Source, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange_Source)
	}

	key := SourceAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Source[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Source", key)
	}

	t.Source[key] = &NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange_Source{
		SourceAddress: &SourceAddress,
	}

	return t.Source[key], nil
}

// RenameSource renames an entry in the list Source within
// the NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange) RenameSource(oldK, newK string) error {
	if _, ok := t.Source[newK]; ok {
		return fmt.Errorf("key %v already exists in Source", newK)
	}

	e, ok := t.Source[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Source", oldK)
	}
	e.SourceAddress = &newK

	t.Source[newK] = e
	delete(t.Source, oldK)
	return nil
}

// GetOrCreateSource retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange) GetOrCreateSource(SourceAddress string) *NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange_Source {

	key := SourceAddress

	if v, ok := t.Source[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSource(SourceAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSource got unexpected error: %v", err))
	}
	return v
}

// GetSource retrieves the value with the specified key from
// the Source map field of NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange) GetSource(SourceAddress string) *NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange_Source {

	if t == nil {
		return nil
	}

	key := SourceAddress

	if lm, ok := t.Source[key]; ok {
		return lm
	}
	return nil
}

// DeleteSource deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange) DeleteSource(SourceAddress string) {
	key := SourceAddress

	delete(t.Source, key)
}

// AppendSource appends the supplied NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange_Source struct to the
// list Source of NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange_Source already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange) AppendSource(v *NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange_Source) error {
	if v.SourceAddress == nil {
		return fmt.Errorf("invalid nil key received for SourceAddress")
	}

	key := *v.SourceAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange_Source)
	}

	if _, ok := t.Source[key]; ok {
		return fmt.Errorf("duplicate key for list Source %v", key)
	}

	t.Source[key] = v
	return nil
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange) GetEnd() string {
	if t == nil || t.End == nil {
		return ""
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange) GetStart() string {
	if t == nil || t.Start == nil {
		return ""
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Source {
		e.PopulateDefaults()
	}
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.End == nil {
		return nil, fmt.Errorf("nil value for key End")
	}

	if t.Start == nil {
		return nil, fmt.Errorf("nil value for key Start")
	}

	return map[string]interface{}{
		"end":   *t.End,
		"start": *t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange.
func (*NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange_Source represents the /nokia-conf/configure/groups/group/router/mld/ssm-translate/group-range/source YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange_Source struct {
	SourceAddress *string `path:"source-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange_Source implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange_Source) IsYANGGoStruct() {}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange_Source) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange_Source
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange_Source) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange_Source struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange_Source) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.SourceAddress == nil {
		return nil, fmt.Errorf("nil value for key SourceAddress")
	}

	return map[string]interface{}{
		"source-address": *t.SourceAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange_Source) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange_Source"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange_Source) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange_Source) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange_Source.
func (*NokiaConf_Configure_Groups_Group_Router_Mld_SsmTranslate_GroupRange_Source) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls represents the /nokia-conf/configure/groups/group/router/mpls YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls struct {
	AdminGroupFrr               *bool                                                                          `path:"admin-group-frr" module:"nokia-conf"`
	AdminState                  E_NokiaTypesSros_AdminState                                                    `path:"admin-state" module:"nokia-conf"`
	AutoBandwidthMultipliers    *NokiaConf_Configure_Groups_Group_Router_Mpls_AutoBandwidthMultipliers         `path:"auto-bandwidth-multipliers" module:"nokia-conf"`
	AutoLsp                     map[string]*NokiaConf_Configure_Groups_Group_Router_Mpls_AutoLsp               `path:"auto-lsp" module:"nokia-conf"`
	AuxStats                    *NokiaConf_Configure_Groups_Group_Router_Mpls_AuxStats                         `path:"aux-stats" module:"nokia-conf" yangPresence:"true"`
	BypassResignalTimer         *uint32                                                                        `path:"bypass-resignal-timer" module:"nokia-conf"`
	ClassForwardingPolicy       map[string]*NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy `path:"class-forwarding-policy" module:"nokia-conf"`
	CspfOnLooseHop              *bool                                                                          `path:"cspf-on-loose-hop" module:"nokia-conf"`
	DynamicBypass               *bool                                                                          `path:"dynamic-bypass" module:"nokia-conf"`
	EntropyLabel                *NokiaConf_Configure_Groups_Group_Router_Mpls_EntropyLabel                     `path:"entropy-label" module:"nokia-conf"`
	ExponentialBackoffRetry     *bool                                                                          `path:"exponential-backoff-retry" module:"nokia-conf"`
	ForwardingPolicies          *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies               `path:"forwarding-policies" module:"nokia-conf" yangPresence:"true"`
	FrrObject                   *bool                                                                          `path:"frr-object" module:"nokia-conf"`
	HoldTimer                   *uint32                                                                        `path:"hold-timer" module:"nokia-conf"`
	IngressStatistics           *NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics                `path:"ingress-statistics" module:"nokia-conf"`
	Interface                   map[string]*NokiaConf_Configure_Groups_Group_Router_Mpls_Interface             `path:"interface" module:"nokia-conf"`
	LeastFillMinThd             *uint32                                                                        `path:"least-fill-min-thd" module:"nokia-conf"`
	LeastFillReoptimThd         *uint32                                                                        `path:"least-fill-reoptim-thd" module:"nokia-conf"`
	LoggerEventBundling         *bool                                                                          `path:"logger-event-bundling" module:"nokia-conf"`
	Lsp                         map[string]*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp                   `path:"lsp" module:"nokia-conf"`
	LspInitRetryTimeout         *uint32                                                                        `path:"lsp-init-retry-timeout" module:"nokia-conf"`
	LspSelfPing                 *NokiaConf_Configure_Groups_Group_Router_Mpls_LspSelfPing                      `path:"lsp-self-ping" module:"nokia-conf"`
	LspTemplate                 map[string]*NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate           `path:"lsp-template" module:"nokia-conf"`
	MaxBypassAssociations       *uint32                                                                        `path:"max-bypass-associations" module:"nokia-conf"`
	MaxBypassPlrAssociations    *uint32                                                                        `path:"max-bypass-plr-associations" module:"nokia-conf"`
	MbbPreferCurrentHops        *bool                                                                          `path:"mbb-prefer-current-hops" module:"nokia-conf"`
	P2MpResignalTimer           *uint32                                                                        `path:"p2mp-resignal-timer" module:"nokia-conf"`
	P2MpS2LFastRetry            *uint32                                                                        `path:"p2mp-s2l-fast-retry" module:"nokia-conf"`
	P2PActivePathFastRetry      *uint32                                                                        `path:"p2p-active-path-fast-retry" module:"nokia-conf"`
	Path                        map[string]*NokiaConf_Configure_Groups_Group_Router_Mpls_Path                  `path:"path" module:"nokia-conf"`
	PceInitLsp                  *NokiaConf_Configure_Groups_Group_Router_Mpls_PceInitLsp                       `path:"pce-init-lsp" module:"nokia-conf" yangPresence:"true"`
	PceReport                   *NokiaConf_Configure_Groups_Group_Router_Mpls_PceReport                        `path:"pce-report" module:"nokia-conf"`
	ResignalOnIgpOverload       *bool                                                                          `path:"resignal-on-igp-overload" module:"nokia-conf"`
	ResignalTimer               *uint32                                                                        `path:"resignal-timer" module:"nokia-conf"`
	RetryOnIgpOverload          *bool                                                                          `path:"retry-on-igp-overload" module:"nokia-conf"`
	SecondaryFastRetryTimer     *uint32                                                                        `path:"secondary-fast-retry-timer" module:"nokia-conf"`
	ShortcutLocalTtlPropagate   *bool                                                                          `path:"shortcut-local-ttl-propagate" module:"nokia-conf"`
	ShortcutTransitTtlPropagate *bool                                                                          `path:"shortcut-transit-ttl-propagate" module:"nokia-conf"`
	SrTeResignal                *NokiaConf_Configure_Groups_Group_Router_Mpls_SrTeResignal                     `path:"sr-te-resignal" module:"nokia-conf"`
	SrlgDatabase                *NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase                     `path:"srlg-database" module:"nokia-conf"`
	SrlgFrr                     E_NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgFrr                         `path:"srlg-frr" module:"nokia-conf"`
	StaticLsp                   map[string]*NokiaConf_Configure_Groups_Group_Router_Mpls_StaticLsp             `path:"static-lsp" module:"nokia-conf"`
	StaticLspFastRetry          *uint32                                                                        `path:"static-lsp-fast-retry" module:"nokia-conf"`
	TunnelTablePref             *NokiaConf_Configure_Groups_Group_Router_Mpls_TunnelTablePref                  `path:"tunnel-table-pref" module:"nokia-conf"`
	UserSrlgDb                  *bool                                                                          `path:"user-srlg-db" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls) IsYANGGoStruct() {}

// NewAutoLsp creates a new entry in the AutoLsp list of the
// NokiaConf_Configure_Groups_Group_Router_Mpls struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) NewAutoLsp(TemplateName string) (*NokiaConf_Configure_Groups_Group_Router_Mpls_AutoLsp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AutoLsp == nil {
		t.AutoLsp = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Mpls_AutoLsp)
	}

	key := TemplateName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AutoLsp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AutoLsp", key)
	}

	t.AutoLsp[key] = &NokiaConf_Configure_Groups_Group_Router_Mpls_AutoLsp{
		TemplateName: &TemplateName,
	}

	return t.AutoLsp[key], nil
}

// RenameAutoLsp renames an entry in the list AutoLsp within
// the NokiaConf_Configure_Groups_Group_Router_Mpls struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) RenameAutoLsp(oldK, newK string) error {
	if _, ok := t.AutoLsp[newK]; ok {
		return fmt.Errorf("key %v already exists in AutoLsp", newK)
	}

	e, ok := t.AutoLsp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AutoLsp", oldK)
	}
	e.TemplateName = &newK

	t.AutoLsp[newK] = e
	delete(t.AutoLsp, oldK)
	return nil
}

// GetOrCreateAutoLsp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mpls. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) GetOrCreateAutoLsp(TemplateName string) *NokiaConf_Configure_Groups_Group_Router_Mpls_AutoLsp {

	key := TemplateName

	if v, ok := t.AutoLsp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAutoLsp(TemplateName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAutoLsp got unexpected error: %v", err))
	}
	return v
}

// GetAutoLsp retrieves the value with the specified key from
// the AutoLsp map field of NokiaConf_Configure_Groups_Group_Router_Mpls. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) GetAutoLsp(TemplateName string) *NokiaConf_Configure_Groups_Group_Router_Mpls_AutoLsp {

	if t == nil {
		return nil
	}

	key := TemplateName

	if lm, ok := t.AutoLsp[key]; ok {
		return lm
	}
	return nil
}

// DeleteAutoLsp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mpls. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) DeleteAutoLsp(TemplateName string) {
	key := TemplateName

	delete(t.AutoLsp, key)
}

// AppendAutoLsp appends the supplied NokiaConf_Configure_Groups_Group_Router_Mpls_AutoLsp struct to the
// list AutoLsp of NokiaConf_Configure_Groups_Group_Router_Mpls. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Mpls_AutoLsp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) AppendAutoLsp(v *NokiaConf_Configure_Groups_Group_Router_Mpls_AutoLsp) error {
	if v.TemplateName == nil {
		return fmt.Errorf("invalid nil key received for TemplateName")
	}

	key := *v.TemplateName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AutoLsp == nil {
		t.AutoLsp = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Mpls_AutoLsp)
	}

	if _, ok := t.AutoLsp[key]; ok {
		return fmt.Errorf("duplicate key for list AutoLsp %v", key)
	}

	t.AutoLsp[key] = v
	return nil
}

// NewClassForwardingPolicy creates a new entry in the ClassForwardingPolicy list of the
// NokiaConf_Configure_Groups_Group_Router_Mpls struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) NewClassForwardingPolicy(PolicyName string) (*NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ClassForwardingPolicy == nil {
		t.ClassForwardingPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy)
	}

	key := PolicyName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ClassForwardingPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ClassForwardingPolicy", key)
	}

	t.ClassForwardingPolicy[key] = &NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy{
		PolicyName: &PolicyName,
	}

	return t.ClassForwardingPolicy[key], nil
}

// RenameClassForwardingPolicy renames an entry in the list ClassForwardingPolicy within
// the NokiaConf_Configure_Groups_Group_Router_Mpls struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) RenameClassForwardingPolicy(oldK, newK string) error {
	if _, ok := t.ClassForwardingPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in ClassForwardingPolicy", newK)
	}

	e, ok := t.ClassForwardingPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ClassForwardingPolicy", oldK)
	}
	e.PolicyName = &newK

	t.ClassForwardingPolicy[newK] = e
	delete(t.ClassForwardingPolicy, oldK)
	return nil
}

// GetOrCreateClassForwardingPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mpls. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) GetOrCreateClassForwardingPolicy(PolicyName string) *NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy {

	key := PolicyName

	if v, ok := t.ClassForwardingPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewClassForwardingPolicy(PolicyName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateClassForwardingPolicy got unexpected error: %v", err))
	}
	return v
}

// GetClassForwardingPolicy retrieves the value with the specified key from
// the ClassForwardingPolicy map field of NokiaConf_Configure_Groups_Group_Router_Mpls. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) GetClassForwardingPolicy(PolicyName string) *NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy {

	if t == nil {
		return nil
	}

	key := PolicyName

	if lm, ok := t.ClassForwardingPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteClassForwardingPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mpls. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) DeleteClassForwardingPolicy(PolicyName string) {
	key := PolicyName

	delete(t.ClassForwardingPolicy, key)
}

// AppendClassForwardingPolicy appends the supplied NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy struct to the
// list ClassForwardingPolicy of NokiaConf_Configure_Groups_Group_Router_Mpls. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) AppendClassForwardingPolicy(v *NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy) error {
	if v.PolicyName == nil {
		return fmt.Errorf("invalid nil key received for PolicyName")
	}

	key := *v.PolicyName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ClassForwardingPolicy == nil {
		t.ClassForwardingPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy)
	}

	if _, ok := t.ClassForwardingPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list ClassForwardingPolicy %v", key)
	}

	t.ClassForwardingPolicy[key] = v
	return nil
}

// NewInterface creates a new entry in the Interface list of the
// NokiaConf_Configure_Groups_Group_Router_Mpls struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) NewInterface(InterfaceName string) (*NokiaConf_Configure_Groups_Group_Router_Mpls_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Mpls_Interface)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &NokiaConf_Configure_Groups_Group_Router_Mpls_Interface{
		InterfaceName: &InterfaceName,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the NokiaConf_Configure_Groups_Group_Router_Mpls struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.InterfaceName = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mpls. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) GetOrCreateInterface(InterfaceName string) *NokiaConf_Configure_Groups_Group_Router_Mpls_Interface {

	key := InterfaceName

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of NokiaConf_Configure_Groups_Group_Router_Mpls. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) GetInterface(InterfaceName string) *NokiaConf_Configure_Groups_Group_Router_Mpls_Interface {

	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mpls. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) DeleteInterface(InterfaceName string) {
	key := InterfaceName

	delete(t.Interface, key)
}

// AppendInterface appends the supplied NokiaConf_Configure_Groups_Group_Router_Mpls_Interface struct to the
// list Interface of NokiaConf_Configure_Groups_Group_Router_Mpls. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Mpls_Interface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) AppendInterface(v *NokiaConf_Configure_Groups_Group_Router_Mpls_Interface) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Mpls_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// NewLsp creates a new entry in the Lsp list of the
// NokiaConf_Configure_Groups_Group_Router_Mpls struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) NewLsp(LspName string) (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Lsp == nil {
		t.Lsp = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp)
	}

	key := LspName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Lsp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Lsp", key)
	}

	t.Lsp[key] = &NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp{
		LspName: &LspName,
	}

	return t.Lsp[key], nil
}

// RenameLsp renames an entry in the list Lsp within
// the NokiaConf_Configure_Groups_Group_Router_Mpls struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) RenameLsp(oldK, newK string) error {
	if _, ok := t.Lsp[newK]; ok {
		return fmt.Errorf("key %v already exists in Lsp", newK)
	}

	e, ok := t.Lsp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Lsp", oldK)
	}
	e.LspName = &newK

	t.Lsp[newK] = e
	delete(t.Lsp, oldK)
	return nil
}

// GetOrCreateLsp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mpls. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) GetOrCreateLsp(LspName string) *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp {

	key := LspName

	if v, ok := t.Lsp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLsp(LspName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLsp got unexpected error: %v", err))
	}
	return v
}

// GetLsp retrieves the value with the specified key from
// the Lsp map field of NokiaConf_Configure_Groups_Group_Router_Mpls. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) GetLsp(LspName string) *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp {

	if t == nil {
		return nil
	}

	key := LspName

	if lm, ok := t.Lsp[key]; ok {
		return lm
	}
	return nil
}

// DeleteLsp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mpls. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) DeleteLsp(LspName string) {
	key := LspName

	delete(t.Lsp, key)
}

// AppendLsp appends the supplied NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp struct to the
// list Lsp of NokiaConf_Configure_Groups_Group_Router_Mpls. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) AppendLsp(v *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) error {
	if v.LspName == nil {
		return fmt.Errorf("invalid nil key received for LspName")
	}

	key := *v.LspName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Lsp == nil {
		t.Lsp = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp)
	}

	if _, ok := t.Lsp[key]; ok {
		return fmt.Errorf("duplicate key for list Lsp %v", key)
	}

	t.Lsp[key] = v
	return nil
}

// NewLspTemplate creates a new entry in the LspTemplate list of the
// NokiaConf_Configure_Groups_Group_Router_Mpls struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) NewLspTemplate(TemplateName string) (*NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LspTemplate == nil {
		t.LspTemplate = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate)
	}

	key := TemplateName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.LspTemplate[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list LspTemplate", key)
	}

	t.LspTemplate[key] = &NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate{
		TemplateName: &TemplateName,
	}

	return t.LspTemplate[key], nil
}

// RenameLspTemplate renames an entry in the list LspTemplate within
// the NokiaConf_Configure_Groups_Group_Router_Mpls struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) RenameLspTemplate(oldK, newK string) error {
	if _, ok := t.LspTemplate[newK]; ok {
		return fmt.Errorf("key %v already exists in LspTemplate", newK)
	}

	e, ok := t.LspTemplate[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in LspTemplate", oldK)
	}
	e.TemplateName = &newK

	t.LspTemplate[newK] = e
	delete(t.LspTemplate, oldK)
	return nil
}

// GetOrCreateLspTemplate retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mpls. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) GetOrCreateLspTemplate(TemplateName string) *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate {

	key := TemplateName

	if v, ok := t.LspTemplate[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLspTemplate(TemplateName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLspTemplate got unexpected error: %v", err))
	}
	return v
}

// GetLspTemplate retrieves the value with the specified key from
// the LspTemplate map field of NokiaConf_Configure_Groups_Group_Router_Mpls. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) GetLspTemplate(TemplateName string) *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate {

	if t == nil {
		return nil
	}

	key := TemplateName

	if lm, ok := t.LspTemplate[key]; ok {
		return lm
	}
	return nil
}

// DeleteLspTemplate deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mpls. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) DeleteLspTemplate(TemplateName string) {
	key := TemplateName

	delete(t.LspTemplate, key)
}

// AppendLspTemplate appends the supplied NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate struct to the
// list LspTemplate of NokiaConf_Configure_Groups_Group_Router_Mpls. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) AppendLspTemplate(v *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) error {
	if v.TemplateName == nil {
		return fmt.Errorf("invalid nil key received for TemplateName")
	}

	key := *v.TemplateName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LspTemplate == nil {
		t.LspTemplate = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate)
	}

	if _, ok := t.LspTemplate[key]; ok {
		return fmt.Errorf("duplicate key for list LspTemplate %v", key)
	}

	t.LspTemplate[key] = v
	return nil
}

// NewPath creates a new entry in the Path list of the
// NokiaConf_Configure_Groups_Group_Router_Mpls struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) NewPath(PathName string) (*NokiaConf_Configure_Groups_Group_Router_Mpls_Path, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Path == nil {
		t.Path = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Mpls_Path)
	}

	key := PathName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Path[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Path", key)
	}

	t.Path[key] = &NokiaConf_Configure_Groups_Group_Router_Mpls_Path{
		PathName: &PathName,
	}

	return t.Path[key], nil
}

// RenamePath renames an entry in the list Path within
// the NokiaConf_Configure_Groups_Group_Router_Mpls struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) RenamePath(oldK, newK string) error {
	if _, ok := t.Path[newK]; ok {
		return fmt.Errorf("key %v already exists in Path", newK)
	}

	e, ok := t.Path[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Path", oldK)
	}
	e.PathName = &newK

	t.Path[newK] = e
	delete(t.Path, oldK)
	return nil
}

// GetOrCreatePath retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mpls. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) GetOrCreatePath(PathName string) *NokiaConf_Configure_Groups_Group_Router_Mpls_Path {

	key := PathName

	if v, ok := t.Path[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPath(PathName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePath got unexpected error: %v", err))
	}
	return v
}

// GetPath retrieves the value with the specified key from
// the Path map field of NokiaConf_Configure_Groups_Group_Router_Mpls. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) GetPath(PathName string) *NokiaConf_Configure_Groups_Group_Router_Mpls_Path {

	if t == nil {
		return nil
	}

	key := PathName

	if lm, ok := t.Path[key]; ok {
		return lm
	}
	return nil
}

// DeletePath deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mpls. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) DeletePath(PathName string) {
	key := PathName

	delete(t.Path, key)
}

// AppendPath appends the supplied NokiaConf_Configure_Groups_Group_Router_Mpls_Path struct to the
// list Path of NokiaConf_Configure_Groups_Group_Router_Mpls. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Mpls_Path already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) AppendPath(v *NokiaConf_Configure_Groups_Group_Router_Mpls_Path) error {
	if v.PathName == nil {
		return fmt.Errorf("invalid nil key received for PathName")
	}

	key := *v.PathName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Path == nil {
		t.Path = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Mpls_Path)
	}

	if _, ok := t.Path[key]; ok {
		return fmt.Errorf("duplicate key for list Path %v", key)
	}

	t.Path[key] = v
	return nil
}

// NewStaticLsp creates a new entry in the StaticLsp list of the
// NokiaConf_Configure_Groups_Group_Router_Mpls struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) NewStaticLsp(LspName string) (*NokiaConf_Configure_Groups_Group_Router_Mpls_StaticLsp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StaticLsp == nil {
		t.StaticLsp = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Mpls_StaticLsp)
	}

	key := LspName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.StaticLsp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list StaticLsp", key)
	}

	t.StaticLsp[key] = &NokiaConf_Configure_Groups_Group_Router_Mpls_StaticLsp{
		LspName: &LspName,
	}

	return t.StaticLsp[key], nil
}

// RenameStaticLsp renames an entry in the list StaticLsp within
// the NokiaConf_Configure_Groups_Group_Router_Mpls struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) RenameStaticLsp(oldK, newK string) error {
	if _, ok := t.StaticLsp[newK]; ok {
		return fmt.Errorf("key %v already exists in StaticLsp", newK)
	}

	e, ok := t.StaticLsp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in StaticLsp", oldK)
	}
	e.LspName = &newK

	t.StaticLsp[newK] = e
	delete(t.StaticLsp, oldK)
	return nil
}

// GetOrCreateStaticLsp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mpls. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) GetOrCreateStaticLsp(LspName string) *NokiaConf_Configure_Groups_Group_Router_Mpls_StaticLsp {

	key := LspName

	if v, ok := t.StaticLsp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewStaticLsp(LspName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateStaticLsp got unexpected error: %v", err))
	}
	return v
}

// GetStaticLsp retrieves the value with the specified key from
// the StaticLsp map field of NokiaConf_Configure_Groups_Group_Router_Mpls. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) GetStaticLsp(LspName string) *NokiaConf_Configure_Groups_Group_Router_Mpls_StaticLsp {

	if t == nil {
		return nil
	}

	key := LspName

	if lm, ok := t.StaticLsp[key]; ok {
		return lm
	}
	return nil
}

// DeleteStaticLsp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mpls. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) DeleteStaticLsp(LspName string) {
	key := LspName

	delete(t.StaticLsp, key)
}

// AppendStaticLsp appends the supplied NokiaConf_Configure_Groups_Group_Router_Mpls_StaticLsp struct to the
// list StaticLsp of NokiaConf_Configure_Groups_Group_Router_Mpls. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Mpls_StaticLsp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) AppendStaticLsp(v *NokiaConf_Configure_Groups_Group_Router_Mpls_StaticLsp) error {
	if v.LspName == nil {
		return fmt.Errorf("invalid nil key received for LspName")
	}

	key := *v.LspName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StaticLsp == nil {
		t.StaticLsp = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Mpls_StaticLsp)
	}

	if _, ok := t.StaticLsp[key]; ok {
		return fmt.Errorf("duplicate key for list StaticLsp %v", key)
	}

	t.StaticLsp[key] = v
	return nil
}

// GetOrCreateAutoBandwidthMultipliers retrieves the value of the AutoBandwidthMultipliers field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) GetOrCreateAutoBandwidthMultipliers() *NokiaConf_Configure_Groups_Group_Router_Mpls_AutoBandwidthMultipliers {
	if t.AutoBandwidthMultipliers != nil {
		return t.AutoBandwidthMultipliers
	}
	t.AutoBandwidthMultipliers = &NokiaConf_Configure_Groups_Group_Router_Mpls_AutoBandwidthMultipliers{}
	return t.AutoBandwidthMultipliers
}

// GetOrCreateAuxStats retrieves the value of the AuxStats field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) GetOrCreateAuxStats() *NokiaConf_Configure_Groups_Group_Router_Mpls_AuxStats {
	if t.AuxStats != nil {
		return t.AuxStats
	}
	t.AuxStats = &NokiaConf_Configure_Groups_Group_Router_Mpls_AuxStats{}
	return t.AuxStats
}

// GetOrCreateEntropyLabel retrieves the value of the EntropyLabel field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) GetOrCreateEntropyLabel() *NokiaConf_Configure_Groups_Group_Router_Mpls_EntropyLabel {
	if t.EntropyLabel != nil {
		return t.EntropyLabel
	}
	t.EntropyLabel = &NokiaConf_Configure_Groups_Group_Router_Mpls_EntropyLabel{}
	return t.EntropyLabel
}

// GetOrCreateForwardingPolicies retrieves the value of the ForwardingPolicies field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) GetOrCreateForwardingPolicies() *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies {
	if t.ForwardingPolicies != nil {
		return t.ForwardingPolicies
	}
	t.ForwardingPolicies = &NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies{}
	return t.ForwardingPolicies
}

// GetOrCreateIngressStatistics retrieves the value of the IngressStatistics field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) GetOrCreateIngressStatistics() *NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics {
	if t.IngressStatistics != nil {
		return t.IngressStatistics
	}
	t.IngressStatistics = &NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics{}
	return t.IngressStatistics
}

// GetOrCreateLspSelfPing retrieves the value of the LspSelfPing field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) GetOrCreateLspSelfPing() *NokiaConf_Configure_Groups_Group_Router_Mpls_LspSelfPing {
	if t.LspSelfPing != nil {
		return t.LspSelfPing
	}
	t.LspSelfPing = &NokiaConf_Configure_Groups_Group_Router_Mpls_LspSelfPing{}
	return t.LspSelfPing
}

// GetOrCreatePceInitLsp retrieves the value of the PceInitLsp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) GetOrCreatePceInitLsp() *NokiaConf_Configure_Groups_Group_Router_Mpls_PceInitLsp {
	if t.PceInitLsp != nil {
		return t.PceInitLsp
	}
	t.PceInitLsp = &NokiaConf_Configure_Groups_Group_Router_Mpls_PceInitLsp{}
	return t.PceInitLsp
}

// GetOrCreatePceReport retrieves the value of the PceReport field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) GetOrCreatePceReport() *NokiaConf_Configure_Groups_Group_Router_Mpls_PceReport {
	if t.PceReport != nil {
		return t.PceReport
	}
	t.PceReport = &NokiaConf_Configure_Groups_Group_Router_Mpls_PceReport{}
	return t.PceReport
}

// GetOrCreateSrTeResignal retrieves the value of the SrTeResignal field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) GetOrCreateSrTeResignal() *NokiaConf_Configure_Groups_Group_Router_Mpls_SrTeResignal {
	if t.SrTeResignal != nil {
		return t.SrTeResignal
	}
	t.SrTeResignal = &NokiaConf_Configure_Groups_Group_Router_Mpls_SrTeResignal{}
	return t.SrTeResignal
}

// GetOrCreateSrlgDatabase retrieves the value of the SrlgDatabase field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) GetOrCreateSrlgDatabase() *NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase {
	if t.SrlgDatabase != nil {
		return t.SrlgDatabase
	}
	t.SrlgDatabase = &NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase{}
	return t.SrlgDatabase
}

// GetOrCreateTunnelTablePref retrieves the value of the TunnelTablePref field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) GetOrCreateTunnelTablePref() *NokiaConf_Configure_Groups_Group_Router_Mpls_TunnelTablePref {
	if t.TunnelTablePref != nil {
		return t.TunnelTablePref
	}
	t.TunnelTablePref = &NokiaConf_Configure_Groups_Group_Router_Mpls_TunnelTablePref{}
	return t.TunnelTablePref
}

// GetAutoBandwidthMultipliers returns the value of the AutoBandwidthMultipliers struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Mpls. If the receiver or the field AutoBandwidthMultipliers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) GetAutoBandwidthMultipliers() *NokiaConf_Configure_Groups_Group_Router_Mpls_AutoBandwidthMultipliers {
	if t != nil && t.AutoBandwidthMultipliers != nil {
		return t.AutoBandwidthMultipliers
	}
	return nil
}

// GetAuxStats returns the value of the AuxStats struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Mpls. If the receiver or the field AuxStats is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) GetAuxStats() *NokiaConf_Configure_Groups_Group_Router_Mpls_AuxStats {
	if t != nil && t.AuxStats != nil {
		return t.AuxStats
	}
	return nil
}

// GetEntropyLabel returns the value of the EntropyLabel struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Mpls. If the receiver or the field EntropyLabel is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) GetEntropyLabel() *NokiaConf_Configure_Groups_Group_Router_Mpls_EntropyLabel {
	if t != nil && t.EntropyLabel != nil {
		return t.EntropyLabel
	}
	return nil
}

// GetForwardingPolicies returns the value of the ForwardingPolicies struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Mpls. If the receiver or the field ForwardingPolicies is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) GetForwardingPolicies() *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies {
	if t != nil && t.ForwardingPolicies != nil {
		return t.ForwardingPolicies
	}
	return nil
}

// GetIngressStatistics returns the value of the IngressStatistics struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Mpls. If the receiver or the field IngressStatistics is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) GetIngressStatistics() *NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics {
	if t != nil && t.IngressStatistics != nil {
		return t.IngressStatistics
	}
	return nil
}

// GetLspSelfPing returns the value of the LspSelfPing struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Mpls. If the receiver or the field LspSelfPing is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) GetLspSelfPing() *NokiaConf_Configure_Groups_Group_Router_Mpls_LspSelfPing {
	if t != nil && t.LspSelfPing != nil {
		return t.LspSelfPing
	}
	return nil
}

// GetPceInitLsp returns the value of the PceInitLsp struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Mpls. If the receiver or the field PceInitLsp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) GetPceInitLsp() *NokiaConf_Configure_Groups_Group_Router_Mpls_PceInitLsp {
	if t != nil && t.PceInitLsp != nil {
		return t.PceInitLsp
	}
	return nil
}

// GetPceReport returns the value of the PceReport struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Mpls. If the receiver or the field PceReport is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) GetPceReport() *NokiaConf_Configure_Groups_Group_Router_Mpls_PceReport {
	if t != nil && t.PceReport != nil {
		return t.PceReport
	}
	return nil
}

// GetSrTeResignal returns the value of the SrTeResignal struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Mpls. If the receiver or the field SrTeResignal is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) GetSrTeResignal() *NokiaConf_Configure_Groups_Group_Router_Mpls_SrTeResignal {
	if t != nil && t.SrTeResignal != nil {
		return t.SrTeResignal
	}
	return nil
}

// GetSrlgDatabase returns the value of the SrlgDatabase struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Mpls. If the receiver or the field SrlgDatabase is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) GetSrlgDatabase() *NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase {
	if t != nil && t.SrlgDatabase != nil {
		return t.SrlgDatabase
	}
	return nil
}

// GetTunnelTablePref returns the value of the TunnelTablePref struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Mpls. If the receiver or the field TunnelTablePref is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) GetTunnelTablePref() *NokiaConf_Configure_Groups_Group_Router_Mpls_TunnelTablePref {
	if t != nil && t.TunnelTablePref != nil {
		return t.TunnelTablePref
	}
	return nil
}

// GetAdminGroupFrr retrieves the value of the leaf AdminGroupFrr from the NokiaConf_Configure_Groups_Group_Router_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminGroupFrr is set, it can
// safely use t.GetAdminGroupFrr() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminGroupFrr == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) GetAdminGroupFrr() bool {
	if t == nil || t.AdminGroupFrr == nil {
		return false
	}
	return *t.AdminGroupFrr
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetBypassResignalTimer retrieves the value of the leaf BypassResignalTimer from the NokiaConf_Configure_Groups_Group_Router_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BypassResignalTimer is set, it can
// safely use t.GetBypassResignalTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BypassResignalTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) GetBypassResignalTimer() uint32 {
	if t == nil || t.BypassResignalTimer == nil {
		return 0
	}
	return *t.BypassResignalTimer
}

// GetCspfOnLooseHop retrieves the value of the leaf CspfOnLooseHop from the NokiaConf_Configure_Groups_Group_Router_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CspfOnLooseHop is set, it can
// safely use t.GetCspfOnLooseHop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CspfOnLooseHop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) GetCspfOnLooseHop() bool {
	if t == nil || t.CspfOnLooseHop == nil {
		return false
	}
	return *t.CspfOnLooseHop
}

// GetDynamicBypass retrieves the value of the leaf DynamicBypass from the NokiaConf_Configure_Groups_Group_Router_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DynamicBypass is set, it can
// safely use t.GetDynamicBypass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DynamicBypass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) GetDynamicBypass() bool {
	if t == nil || t.DynamicBypass == nil {
		return true
	}
	return *t.DynamicBypass
}

// GetExponentialBackoffRetry retrieves the value of the leaf ExponentialBackoffRetry from the NokiaConf_Configure_Groups_Group_Router_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExponentialBackoffRetry is set, it can
// safely use t.GetExponentialBackoffRetry() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExponentialBackoffRetry == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) GetExponentialBackoffRetry() bool {
	if t == nil || t.ExponentialBackoffRetry == nil {
		return false
	}
	return *t.ExponentialBackoffRetry
}

// GetFrrObject retrieves the value of the leaf FrrObject from the NokiaConf_Configure_Groups_Group_Router_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FrrObject is set, it can
// safely use t.GetFrrObject() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FrrObject == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) GetFrrObject() bool {
	if t == nil || t.FrrObject == nil {
		return true
	}
	return *t.FrrObject
}

// GetHoldTimer retrieves the value of the leaf HoldTimer from the NokiaConf_Configure_Groups_Group_Router_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldTimer is set, it can
// safely use t.GetHoldTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) GetHoldTimer() uint32 {
	if t == nil || t.HoldTimer == nil {
		return 1
	}
	return *t.HoldTimer
}

// GetLeastFillMinThd retrieves the value of the leaf LeastFillMinThd from the NokiaConf_Configure_Groups_Group_Router_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LeastFillMinThd is set, it can
// safely use t.GetLeastFillMinThd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LeastFillMinThd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) GetLeastFillMinThd() uint32 {
	if t == nil || t.LeastFillMinThd == nil {
		return 5
	}
	return *t.LeastFillMinThd
}

// GetLeastFillReoptimThd retrieves the value of the leaf LeastFillReoptimThd from the NokiaConf_Configure_Groups_Group_Router_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LeastFillReoptimThd is set, it can
// safely use t.GetLeastFillReoptimThd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LeastFillReoptimThd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) GetLeastFillReoptimThd() uint32 {
	if t == nil || t.LeastFillReoptimThd == nil {
		return 10
	}
	return *t.LeastFillReoptimThd
}

// GetLoggerEventBundling retrieves the value of the leaf LoggerEventBundling from the NokiaConf_Configure_Groups_Group_Router_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoggerEventBundling is set, it can
// safely use t.GetLoggerEventBundling() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoggerEventBundling == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) GetLoggerEventBundling() bool {
	if t == nil || t.LoggerEventBundling == nil {
		return false
	}
	return *t.LoggerEventBundling
}

// GetLspInitRetryTimeout retrieves the value of the leaf LspInitRetryTimeout from the NokiaConf_Configure_Groups_Group_Router_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspInitRetryTimeout is set, it can
// safely use t.GetLspInitRetryTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspInitRetryTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) GetLspInitRetryTimeout() uint32 {
	if t == nil || t.LspInitRetryTimeout == nil {
		return 30
	}
	return *t.LspInitRetryTimeout
}

// GetMaxBypassAssociations retrieves the value of the leaf MaxBypassAssociations from the NokiaConf_Configure_Groups_Group_Router_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxBypassAssociations is set, it can
// safely use t.GetMaxBypassAssociations() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxBypassAssociations == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) GetMaxBypassAssociations() uint32 {
	if t == nil || t.MaxBypassAssociations == nil {
		return 1000
	}
	return *t.MaxBypassAssociations
}

// GetMaxBypassPlrAssociations retrieves the value of the leaf MaxBypassPlrAssociations from the NokiaConf_Configure_Groups_Group_Router_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxBypassPlrAssociations is set, it can
// safely use t.GetMaxBypassPlrAssociations() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxBypassPlrAssociations == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) GetMaxBypassPlrAssociations() uint32 {
	if t == nil || t.MaxBypassPlrAssociations == nil {
		return 16
	}
	return *t.MaxBypassPlrAssociations
}

// GetMbbPreferCurrentHops retrieves the value of the leaf MbbPreferCurrentHops from the NokiaConf_Configure_Groups_Group_Router_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MbbPreferCurrentHops is set, it can
// safely use t.GetMbbPreferCurrentHops() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MbbPreferCurrentHops == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) GetMbbPreferCurrentHops() bool {
	if t == nil || t.MbbPreferCurrentHops == nil {
		return false
	}
	return *t.MbbPreferCurrentHops
}

// GetP2MpResignalTimer retrieves the value of the leaf P2MpResignalTimer from the NokiaConf_Configure_Groups_Group_Router_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if P2MpResignalTimer is set, it can
// safely use t.GetP2MpResignalTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.P2MpResignalTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) GetP2MpResignalTimer() uint32 {
	if t == nil || t.P2MpResignalTimer == nil {
		return 0
	}
	return *t.P2MpResignalTimer
}

// GetP2MpS2LFastRetry retrieves the value of the leaf P2MpS2LFastRetry from the NokiaConf_Configure_Groups_Group_Router_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if P2MpS2LFastRetry is set, it can
// safely use t.GetP2MpS2LFastRetry() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.P2MpS2LFastRetry == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) GetP2MpS2LFastRetry() uint32 {
	if t == nil || t.P2MpS2LFastRetry == nil {
		return 0
	}
	return *t.P2MpS2LFastRetry
}

// GetP2PActivePathFastRetry retrieves the value of the leaf P2PActivePathFastRetry from the NokiaConf_Configure_Groups_Group_Router_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if P2PActivePathFastRetry is set, it can
// safely use t.GetP2PActivePathFastRetry() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.P2PActivePathFastRetry == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) GetP2PActivePathFastRetry() uint32 {
	if t == nil || t.P2PActivePathFastRetry == nil {
		return 0
	}
	return *t.P2PActivePathFastRetry
}

// GetResignalOnIgpOverload retrieves the value of the leaf ResignalOnIgpOverload from the NokiaConf_Configure_Groups_Group_Router_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ResignalOnIgpOverload is set, it can
// safely use t.GetResignalOnIgpOverload() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ResignalOnIgpOverload == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) GetResignalOnIgpOverload() bool {
	if t == nil || t.ResignalOnIgpOverload == nil {
		return false
	}
	return *t.ResignalOnIgpOverload
}

// GetResignalTimer retrieves the value of the leaf ResignalTimer from the NokiaConf_Configure_Groups_Group_Router_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ResignalTimer is set, it can
// safely use t.GetResignalTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ResignalTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) GetResignalTimer() uint32 {
	if t == nil || t.ResignalTimer == nil {
		return 0
	}
	return *t.ResignalTimer
}

// GetRetryOnIgpOverload retrieves the value of the leaf RetryOnIgpOverload from the NokiaConf_Configure_Groups_Group_Router_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetryOnIgpOverload is set, it can
// safely use t.GetRetryOnIgpOverload() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetryOnIgpOverload == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) GetRetryOnIgpOverload() bool {
	if t == nil || t.RetryOnIgpOverload == nil {
		return false
	}
	return *t.RetryOnIgpOverload
}

// GetSecondaryFastRetryTimer retrieves the value of the leaf SecondaryFastRetryTimer from the NokiaConf_Configure_Groups_Group_Router_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecondaryFastRetryTimer is set, it can
// safely use t.GetSecondaryFastRetryTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecondaryFastRetryTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) GetSecondaryFastRetryTimer() uint32 {
	if t == nil || t.SecondaryFastRetryTimer == nil {
		return 0
	}
	return *t.SecondaryFastRetryTimer
}

// GetShortcutLocalTtlPropagate retrieves the value of the leaf ShortcutLocalTtlPropagate from the NokiaConf_Configure_Groups_Group_Router_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ShortcutLocalTtlPropagate is set, it can
// safely use t.GetShortcutLocalTtlPropagate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ShortcutLocalTtlPropagate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) GetShortcutLocalTtlPropagate() bool {
	if t == nil || t.ShortcutLocalTtlPropagate == nil {
		return true
	}
	return *t.ShortcutLocalTtlPropagate
}

// GetShortcutTransitTtlPropagate retrieves the value of the leaf ShortcutTransitTtlPropagate from the NokiaConf_Configure_Groups_Group_Router_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ShortcutTransitTtlPropagate is set, it can
// safely use t.GetShortcutTransitTtlPropagate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ShortcutTransitTtlPropagate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) GetShortcutTransitTtlPropagate() bool {
	if t == nil || t.ShortcutTransitTtlPropagate == nil {
		return true
	}
	return *t.ShortcutTransitTtlPropagate
}

// GetSrlgFrr retrieves the value of the leaf SrlgFrr from the NokiaConf_Configure_Groups_Group_Router_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrlgFrr is set, it can
// safely use t.GetSrlgFrr() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrlgFrr == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) GetSrlgFrr() E_NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgFrr {
	if t == nil || t.SrlgFrr == 0 {
		return 0
	}
	return t.SrlgFrr
}

// GetStaticLspFastRetry retrieves the value of the leaf StaticLspFastRetry from the NokiaConf_Configure_Groups_Group_Router_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StaticLspFastRetry is set, it can
// safely use t.GetStaticLspFastRetry() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StaticLspFastRetry == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) GetStaticLspFastRetry() uint32 {
	if t == nil || t.StaticLspFastRetry == nil {
		return 30
	}
	return *t.StaticLspFastRetry
}

// GetUserSrlgDb retrieves the value of the leaf UserSrlgDb from the NokiaConf_Configure_Groups_Group_Router_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UserSrlgDb is set, it can
// safely use t.GetUserSrlgDb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UserSrlgDb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) GetUserSrlgDb() bool {
	if t == nil || t.UserSrlgDb == nil {
		return false
	}
	return *t.UserSrlgDb
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminGroupFrr == nil {
		var v bool = false
		t.AdminGroupFrr = &v
	}
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.CspfOnLooseHop == nil {
		var v bool = false
		t.CspfOnLooseHop = &v
	}
	if t.DynamicBypass == nil {
		var v bool = true
		t.DynamicBypass = &v
	}
	if t.ExponentialBackoffRetry == nil {
		var v bool = false
		t.ExponentialBackoffRetry = &v
	}
	if t.FrrObject == nil {
		var v bool = true
		t.FrrObject = &v
	}
	if t.HoldTimer == nil {
		var v uint32 = 1
		t.HoldTimer = &v
	}
	if t.LeastFillMinThd == nil {
		var v uint32 = 5
		t.LeastFillMinThd = &v
	}
	if t.LeastFillReoptimThd == nil {
		var v uint32 = 10
		t.LeastFillReoptimThd = &v
	}
	if t.LoggerEventBundling == nil {
		var v bool = false
		t.LoggerEventBundling = &v
	}
	if t.LspInitRetryTimeout == nil {
		var v uint32 = 30
		t.LspInitRetryTimeout = &v
	}
	if t.MaxBypassAssociations == nil {
		var v uint32 = 1000
		t.MaxBypassAssociations = &v
	}
	if t.MaxBypassPlrAssociations == nil {
		var v uint32 = 16
		t.MaxBypassPlrAssociations = &v
	}
	if t.MbbPreferCurrentHops == nil {
		var v bool = false
		t.MbbPreferCurrentHops = &v
	}
	if t.ResignalOnIgpOverload == nil {
		var v bool = false
		t.ResignalOnIgpOverload = &v
	}
	if t.RetryOnIgpOverload == nil {
		var v bool = false
		t.RetryOnIgpOverload = &v
	}
	if t.ShortcutLocalTtlPropagate == nil {
		var v bool = true
		t.ShortcutLocalTtlPropagate = &v
	}
	if t.ShortcutTransitTtlPropagate == nil {
		var v bool = true
		t.ShortcutTransitTtlPropagate = &v
	}
	if t.StaticLspFastRetry == nil {
		var v uint32 = 30
		t.StaticLspFastRetry = &v
	}
	if t.UserSrlgDb == nil {
		var v bool = false
		t.UserSrlgDb = &v
	}
	t.AutoBandwidthMultipliers.PopulateDefaults()
	t.AuxStats.PopulateDefaults()
	t.EntropyLabel.PopulateDefaults()
	t.ForwardingPolicies.PopulateDefaults()
	t.IngressStatistics.PopulateDefaults()
	t.LspSelfPing.PopulateDefaults()
	t.PceInitLsp.PopulateDefaults()
	t.PceReport.PopulateDefaults()
	t.SrTeResignal.PopulateDefaults()
	t.SrlgDatabase.PopulateDefaults()
	t.TunnelTablePref.PopulateDefaults()
	for _, e := range t.AutoLsp {
		e.PopulateDefaults()
	}
	for _, e := range t.ClassForwardingPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
	for _, e := range t.Lsp {
		e.PopulateDefaults()
	}
	for _, e := range t.LspTemplate {
		e.PopulateDefaults()
	}
	for _, e := range t.Path {
		e.PopulateDefaults()
	}
	for _, e := range t.StaticLsp {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_MplsLabels represents the /nokia-conf/configure/groups/group/router/mpls-labels YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_MplsLabels struct {
	BgpLabelsHoldTimer *uint32                                                                           `path:"bgp-labels-hold-timer" module:"nokia-conf"`
	ReservedLabelBlock map[string]*NokiaConf_Configure_Groups_Group_Router_MplsLabels_ReservedLabelBlock `path:"reserved-label-block" module:"nokia-conf"`
	SrLabels           *NokiaConf_Configure_Groups_Group_Router_MplsLabels_SrLabels                      `path:"sr-labels" module:"nokia-conf"`
	StaticLabelRange   *uint32                                                                           `path:"static-label-range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_MplsLabels implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_MplsLabels) IsYANGGoStruct() {}

// NewReservedLabelBlock creates a new entry in the ReservedLabelBlock list of the
// NokiaConf_Configure_Groups_Group_Router_MplsLabels struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_MplsLabels) NewReservedLabelBlock(LabelBlockName string) (*NokiaConf_Configure_Groups_Group_Router_MplsLabels_ReservedLabelBlock, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ReservedLabelBlock == nil {
		t.ReservedLabelBlock = make(map[string]*NokiaConf_Configure_Groups_Group_Router_MplsLabels_ReservedLabelBlock)
	}

	key := LabelBlockName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ReservedLabelBlock[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ReservedLabelBlock", key)
	}

	t.ReservedLabelBlock[key] = &NokiaConf_Configure_Groups_Group_Router_MplsLabels_ReservedLabelBlock{
		LabelBlockName: &LabelBlockName,
	}

	return t.ReservedLabelBlock[key], nil
}

// RenameReservedLabelBlock renames an entry in the list ReservedLabelBlock within
// the NokiaConf_Configure_Groups_Group_Router_MplsLabels struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_MplsLabels) RenameReservedLabelBlock(oldK, newK string) error {
	if _, ok := t.ReservedLabelBlock[newK]; ok {
		return fmt.Errorf("key %v already exists in ReservedLabelBlock", newK)
	}

	e, ok := t.ReservedLabelBlock[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ReservedLabelBlock", oldK)
	}
	e.LabelBlockName = &newK

	t.ReservedLabelBlock[newK] = e
	delete(t.ReservedLabelBlock, oldK)
	return nil
}

// GetOrCreateReservedLabelBlock retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_MplsLabels. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_MplsLabels) GetOrCreateReservedLabelBlock(LabelBlockName string) *NokiaConf_Configure_Groups_Group_Router_MplsLabels_ReservedLabelBlock {

	key := LabelBlockName

	if v, ok := t.ReservedLabelBlock[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewReservedLabelBlock(LabelBlockName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateReservedLabelBlock got unexpected error: %v", err))
	}
	return v
}

// GetReservedLabelBlock retrieves the value with the specified key from
// the ReservedLabelBlock map field of NokiaConf_Configure_Groups_Group_Router_MplsLabels. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_MplsLabels) GetReservedLabelBlock(LabelBlockName string) *NokiaConf_Configure_Groups_Group_Router_MplsLabels_ReservedLabelBlock {

	if t == nil {
		return nil
	}

	key := LabelBlockName

	if lm, ok := t.ReservedLabelBlock[key]; ok {
		return lm
	}
	return nil
}

// DeleteReservedLabelBlock deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_MplsLabels. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_MplsLabels) DeleteReservedLabelBlock(LabelBlockName string) {
	key := LabelBlockName

	delete(t.ReservedLabelBlock, key)
}

// AppendReservedLabelBlock appends the supplied NokiaConf_Configure_Groups_Group_Router_MplsLabels_ReservedLabelBlock struct to the
// list ReservedLabelBlock of NokiaConf_Configure_Groups_Group_Router_MplsLabels. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_MplsLabels_ReservedLabelBlock already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_MplsLabels) AppendReservedLabelBlock(v *NokiaConf_Configure_Groups_Group_Router_MplsLabels_ReservedLabelBlock) error {
	if v.LabelBlockName == nil {
		return fmt.Errorf("invalid nil key received for LabelBlockName")
	}

	key := *v.LabelBlockName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ReservedLabelBlock == nil {
		t.ReservedLabelBlock = make(map[string]*NokiaConf_Configure_Groups_Group_Router_MplsLabels_ReservedLabelBlock)
	}

	if _, ok := t.ReservedLabelBlock[key]; ok {
		return fmt.Errorf("duplicate key for list ReservedLabelBlock %v", key)
	}

	t.ReservedLabelBlock[key] = v
	return nil
}

// GetOrCreateSrLabels retrieves the value of the SrLabels field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_MplsLabels) GetOrCreateSrLabels() *NokiaConf_Configure_Groups_Group_Router_MplsLabels_SrLabels {
	if t.SrLabels != nil {
		return t.SrLabels
	}
	t.SrLabels = &NokiaConf_Configure_Groups_Group_Router_MplsLabels_SrLabels{}
	return t.SrLabels
}

// GetSrLabels returns the value of the SrLabels struct pointer
// from NokiaConf_Configure_Groups_Group_Router_MplsLabels. If the receiver or the field SrLabels is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_MplsLabels) GetSrLabels() *NokiaConf_Configure_Groups_Group_Router_MplsLabels_SrLabels {
	if t != nil && t.SrLabels != nil {
		return t.SrLabels
	}
	return nil
}

// GetBgpLabelsHoldTimer retrieves the value of the leaf BgpLabelsHoldTimer from the NokiaConf_Configure_Groups_Group_Router_MplsLabels
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BgpLabelsHoldTimer is set, it can
// safely use t.GetBgpLabelsHoldTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BgpLabelsHoldTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_MplsLabels) GetBgpLabelsHoldTimer() uint32 {
	if t == nil || t.BgpLabelsHoldTimer == nil {
		return 0
	}
	return *t.BgpLabelsHoldTimer
}

// GetStaticLabelRange retrieves the value of the leaf StaticLabelRange from the NokiaConf_Configure_Groups_Group_Router_MplsLabels
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StaticLabelRange is set, it can
// safely use t.GetStaticLabelRange() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StaticLabelRange == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_MplsLabels) GetStaticLabelRange() uint32 {
	if t == nil || t.StaticLabelRange == nil {
		return 18400
	}
	return *t.StaticLabelRange
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_MplsLabels
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_MplsLabels) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BgpLabelsHoldTimer == nil {
		var v uint32 = 0
		t.BgpLabelsHoldTimer = &v
	}
	if t.StaticLabelRange == nil {
		var v uint32 = 18400
		t.StaticLabelRange = &v
	}
	t.SrLabels.PopulateDefaults()
	for _, e := range t.ReservedLabelBlock {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_MplsLabels) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_MplsLabels"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_MplsLabels) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_MplsLabels) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_MplsLabels.
func (*NokiaConf_Configure_Groups_Group_Router_MplsLabels) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_MplsLabels_ReservedLabelBlock represents the /nokia-conf/configure/groups/group/router/mpls-labels/reserved-label-block YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_MplsLabels_ReservedLabelBlock struct {
	EndLabel       *uint32 `path:"end-label" module:"nokia-conf"`
	LabelBlockName *string `path:"label-block-name" module:"nokia-conf"`
	StartLabel     *uint32 `path:"start-label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_MplsLabels_ReservedLabelBlock implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_MplsLabels_ReservedLabelBlock) IsYANGGoStruct() {}

// GetEndLabel retrieves the value of the leaf EndLabel from the NokiaConf_Configure_Groups_Group_Router_MplsLabels_ReservedLabelBlock
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EndLabel is set, it can
// safely use t.GetEndLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EndLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_MplsLabels_ReservedLabelBlock) GetEndLabel() uint32 {
	if t == nil || t.EndLabel == nil {
		return 0
	}
	return *t.EndLabel
}

// GetLabelBlockName retrieves the value of the leaf LabelBlockName from the NokiaConf_Configure_Groups_Group_Router_MplsLabels_ReservedLabelBlock
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelBlockName is set, it can
// safely use t.GetLabelBlockName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelBlockName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_MplsLabels_ReservedLabelBlock) GetLabelBlockName() string {
	if t == nil || t.LabelBlockName == nil {
		return ""
	}
	return *t.LabelBlockName
}

// GetStartLabel retrieves the value of the leaf StartLabel from the NokiaConf_Configure_Groups_Group_Router_MplsLabels_ReservedLabelBlock
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartLabel is set, it can
// safely use t.GetStartLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_MplsLabels_ReservedLabelBlock) GetStartLabel() uint32 {
	if t == nil || t.StartLabel == nil {
		return 0
	}
	return *t.StartLabel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_MplsLabels_ReservedLabelBlock
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_MplsLabels_ReservedLabelBlock) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_MplsLabels_ReservedLabelBlock struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_MplsLabels_ReservedLabelBlock) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.LabelBlockName == nil {
		return nil, fmt.Errorf("nil value for key LabelBlockName")
	}

	return map[string]interface{}{
		"label-block-name": *t.LabelBlockName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_MplsLabels_ReservedLabelBlock) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_MplsLabels_ReservedLabelBlock"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_MplsLabels_ReservedLabelBlock) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_MplsLabels_ReservedLabelBlock) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_MplsLabels_ReservedLabelBlock.
func (*NokiaConf_Configure_Groups_Group_Router_MplsLabels_ReservedLabelBlock) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_MplsLabels_SrLabels represents the /nokia-conf/configure/groups/group/router/mpls-labels/sr-labels YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_MplsLabels_SrLabels struct {
	End   *uint32 `path:"end" module:"nokia-conf"`
	Start *uint32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_MplsLabels_SrLabels implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_MplsLabels_SrLabels) IsYANGGoStruct() {}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Router_MplsLabels_SrLabels
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_MplsLabels_SrLabels) GetEnd() uint32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Router_MplsLabels_SrLabels
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_MplsLabels_SrLabels) GetStart() uint32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_MplsLabels_SrLabels
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_MplsLabels_SrLabels) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_MplsLabels_SrLabels) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_MplsLabels_SrLabels"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_MplsLabels_SrLabels) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_MplsLabels_SrLabels) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_MplsLabels_SrLabels.
func (*NokiaConf_Configure_Groups_Group_Router_MplsLabels_SrLabels) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_AutoBandwidthMultipliers represents the /nokia-conf/configure/groups/group/router/mpls/auto-bandwidth-multipliers YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_AutoBandwidthMultipliers struct {
	AdjustMultiplier *uint32 `path:"adjust-multiplier" module:"nokia-conf"`
	SampleMultiplier *uint32 `path:"sample-multiplier" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_AutoBandwidthMultipliers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_AutoBandwidthMultipliers) IsYANGGoStruct() {}

// GetAdjustMultiplier retrieves the value of the leaf AdjustMultiplier from the NokiaConf_Configure_Groups_Group_Router_Mpls_AutoBandwidthMultipliers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdjustMultiplier is set, it can
// safely use t.GetAdjustMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdjustMultiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_AutoBandwidthMultipliers) GetAdjustMultiplier() uint32 {
	if t == nil || t.AdjustMultiplier == nil {
		return 288
	}
	return *t.AdjustMultiplier
}

// GetSampleMultiplier retrieves the value of the leaf SampleMultiplier from the NokiaConf_Configure_Groups_Group_Router_Mpls_AutoBandwidthMultipliers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SampleMultiplier is set, it can
// safely use t.GetSampleMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SampleMultiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_AutoBandwidthMultipliers) GetSampleMultiplier() uint32 {
	if t == nil || t.SampleMultiplier == nil {
		return 1
	}
	return *t.SampleMultiplier
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_AutoBandwidthMultipliers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_AutoBandwidthMultipliers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdjustMultiplier == nil {
		var v uint32 = 288
		t.AdjustMultiplier = &v
	}
	if t.SampleMultiplier == nil {
		var v uint32 = 1
		t.SampleMultiplier = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_AutoBandwidthMultipliers) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_AutoBandwidthMultipliers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_AutoBandwidthMultipliers) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_AutoBandwidthMultipliers) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_AutoBandwidthMultipliers.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_AutoBandwidthMultipliers) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_AutoLsp represents the /nokia-conf/configure/groups/group/router/mpls/auto-lsp YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_AutoLsp struct {
	OneHop       *bool    `path:"one-hop" module:"nokia-conf"`
	Policy       []string `path:"policy" module:"nokia-conf"`
	TemplateName *string  `path:"template-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_AutoLsp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_AutoLsp) IsYANGGoStruct() {}

// GetOneHop retrieves the value of the leaf OneHop from the NokiaConf_Configure_Groups_Group_Router_Mpls_AutoLsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OneHop is set, it can
// safely use t.GetOneHop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OneHop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_AutoLsp) GetOneHop() bool {
	if t == nil || t.OneHop == nil {
		return false
	}
	return *t.OneHop
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Groups_Group_Router_Mpls_AutoLsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_AutoLsp) GetPolicy() []string {
	if t == nil || t.Policy == nil {
		return nil
	}
	return t.Policy
}

// GetTemplateName retrieves the value of the leaf TemplateName from the NokiaConf_Configure_Groups_Group_Router_Mpls_AutoLsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TemplateName is set, it can
// safely use t.GetTemplateName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TemplateName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_AutoLsp) GetTemplateName() string {
	if t == nil || t.TemplateName == nil {
		return ""
	}
	return *t.TemplateName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_AutoLsp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_AutoLsp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.OneHop == nil {
		var v bool = false
		t.OneHop = &v
	}
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Mpls_AutoLsp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_AutoLsp) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.TemplateName == nil {
		return nil, fmt.Errorf("nil value for key TemplateName")
	}

	return map[string]interface{}{
		"template-name": *t.TemplateName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_AutoLsp) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_AutoLsp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_AutoLsp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_AutoLsp) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_AutoLsp.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_AutoLsp) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_AuxStats represents the /nokia-conf/configure/groups/group/router/mpls/aux-stats YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_AuxStats struct {
	Sr *bool `path:"sr" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_AuxStats implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_AuxStats) IsYANGGoStruct() {}

// GetSr retrieves the value of the leaf Sr from the NokiaConf_Configure_Groups_Group_Router_Mpls_AuxStats
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Sr is set, it can
// safely use t.GetSr() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Sr == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_AuxStats) GetSr() bool {
	if t == nil || t.Sr == nil {
		return false
	}
	return *t.Sr
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_AuxStats
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_AuxStats) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Sr == nil {
		var v bool = false
		t.Sr = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_AuxStats) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_AuxStats"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_AuxStats) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_AuxStats) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_AuxStats.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_AuxStats) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy represents the /nokia-conf/configure/groups/group/router/mpls/class-forwarding-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy struct {
	DefaultSet *uint32                                                                                                                                                       `path:"default-set" module:"nokia-conf"`
	Fc         map[NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy_Fc_FcName_Union]*NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy_Fc `path:"fc" module:"nokia-conf"`
	PolicyName *string                                                                                                                                                       `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy) IsYANGGoStruct() {}

// NewFc creates a new entry in the Fc list of the
// NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy) NewFc(FcName NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy_Fc_FcName_Union) (*NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy_Fc, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy_Fc_FcName_Union]*NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy_Fc)
	}

	key := FcName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Fc[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Fc", key)
	}

	t.Fc[key] = &NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy_Fc{
		FcName: FcName,
	}

	return t.Fc[key], nil
}

// RenameFc renames an entry in the list Fc within
// the NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy) RenameFc(oldK, newK NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy_Fc_FcName_Union) error {
	if _, ok := t.Fc[newK]; ok {
		return fmt.Errorf("key %v already exists in Fc", newK)
	}

	e, ok := t.Fc[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Fc", oldK)
	}
	e.FcName = newK

	t.Fc[newK] = e
	delete(t.Fc, oldK)
	return nil
}

// GetOrCreateFc retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy) GetOrCreateFc(FcName NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy_Fc_FcName_Union) *NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy_Fc {

	key := FcName

	if v, ok := t.Fc[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFc(FcName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFc got unexpected error: %v", err))
	}
	return v
}

// GetFc retrieves the value with the specified key from
// the Fc map field of NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy) GetFc(FcName NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy_Fc_FcName_Union) *NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy_Fc {

	if t == nil {
		return nil
	}

	key := FcName

	if lm, ok := t.Fc[key]; ok {
		return lm
	}
	return nil
}

// DeleteFc deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy) DeleteFc(FcName NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy_Fc_FcName_Union) {
	key := FcName

	delete(t.Fc, key)
}

// AppendFc appends the supplied NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy_Fc struct to the
// list Fc of NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy_Fc already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy) AppendFc(v *NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy_Fc) error {
	key := v.FcName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy_Fc_FcName_Union]*NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy_Fc)
	}

	if _, ok := t.Fc[key]; ok {
		return fmt.Errorf("duplicate key for list Fc %v", key)
	}

	t.Fc[key] = v
	return nil
}

// GetDefaultSet retrieves the value of the leaf DefaultSet from the NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultSet is set, it can
// safely use t.GetDefaultSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultSet == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy) GetDefaultSet() uint32 {
	if t == nil || t.DefaultSet == nil {
		return 1
	}
	return *t.DefaultSet
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DefaultSet == nil {
		var v uint32 = 1
		t.DefaultSet = &v
	}
	for _, e := range t.Fc {
		e.PopulateDefaults()
	}
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.PolicyName == nil {
		return nil, fmt.Errorf("nil value for key PolicyName")
	}

	return map[string]interface{}{
		"policy-name": *t.PolicyName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy_Fc represents the /nokia-conf/configure/groups/group/router/mpls/class-forwarding-policy/fc YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy_Fc struct {
	FcName        NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy_Fc_FcName_Union `path:"fc-name" module:"nokia-conf"`
	ForwardingSet *uint32                                                                            `path:"forwarding-set" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy_Fc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy_Fc) IsYANGGoStruct() {}

// GetFcName retrieves the value of the leaf FcName from the NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FcName is set, it can
// safely use t.GetFcName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FcName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy_Fc) GetFcName() NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy_Fc_FcName_Union {
	if t == nil || t.FcName == nil {
		return nil
	}
	return t.FcName
}

// GetForwardingSet retrieves the value of the leaf ForwardingSet from the NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForwardingSet is set, it can
// safely use t.GetForwardingSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForwardingSet == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy_Fc) GetForwardingSet() uint32 {
	if t == nil || t.ForwardingSet == nil {
		return 1
	}
	return *t.ForwardingSet
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy_Fc
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy_Fc) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ForwardingSet == nil {
		var v uint32 = 1
		t.ForwardingSet = &v
	}
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy_Fc struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy_Fc) Î›ListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"fc-name": t.FcName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy_Fc) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy_Fc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy_Fc) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy_Fc) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy_Fc.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_ClassForwardingPolicy_Fc) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_EntropyLabel represents the /nokia-conf/configure/groups/group/router/mpls/entropy-label YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_EntropyLabel struct {
	RsvpTe *bool `path:"rsvp-te" module:"nokia-conf"`
	SrTe   *bool `path:"sr-te" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_EntropyLabel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_EntropyLabel) IsYANGGoStruct() {}

// GetRsvpTe retrieves the value of the leaf RsvpTe from the NokiaConf_Configure_Groups_Group_Router_Mpls_EntropyLabel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RsvpTe is set, it can
// safely use t.GetRsvpTe() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RsvpTe == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_EntropyLabel) GetRsvpTe() bool {
	if t == nil || t.RsvpTe == nil {
		return false
	}
	return *t.RsvpTe
}

// GetSrTe retrieves the value of the leaf SrTe from the NokiaConf_Configure_Groups_Group_Router_Mpls_EntropyLabel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrTe is set, it can
// safely use t.GetSrTe() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrTe == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_EntropyLabel) GetSrTe() bool {
	if t == nil || t.SrTe == nil {
		return false
	}
	return *t.SrTe
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_EntropyLabel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_EntropyLabel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_EntropyLabel) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_EntropyLabel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_EntropyLabel) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_EntropyLabel) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_EntropyLabel.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_EntropyLabel) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies represents the /nokia-conf/configure/groups/group/router/mpls/forwarding-policies YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies struct {
	AdminState         E_NokiaTypesSros_AdminState                                                                  `path:"admin-state" module:"nokia-conf"`
	ForwardingPolicy   map[string]*NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy `path:"forwarding-policy" module:"nokia-conf"`
	ReservedLabelBlock *string                                                                                      `path:"reserved-label-block" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies) IsYANGGoStruct() {}

// NewForwardingPolicy creates a new entry in the ForwardingPolicy list of the
// NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies) NewForwardingPolicy(PolicyName string) (*NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ForwardingPolicy == nil {
		t.ForwardingPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy)
	}

	key := PolicyName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ForwardingPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ForwardingPolicy", key)
	}

	t.ForwardingPolicy[key] = &NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy{
		PolicyName: &PolicyName,
	}

	return t.ForwardingPolicy[key], nil
}

// RenameForwardingPolicy renames an entry in the list ForwardingPolicy within
// the NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies) RenameForwardingPolicy(oldK, newK string) error {
	if _, ok := t.ForwardingPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in ForwardingPolicy", newK)
	}

	e, ok := t.ForwardingPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ForwardingPolicy", oldK)
	}
	e.PolicyName = &newK

	t.ForwardingPolicy[newK] = e
	delete(t.ForwardingPolicy, oldK)
	return nil
}

// GetOrCreateForwardingPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies) GetOrCreateForwardingPolicy(PolicyName string) *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy {

	key := PolicyName

	if v, ok := t.ForwardingPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewForwardingPolicy(PolicyName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateForwardingPolicy got unexpected error: %v", err))
	}
	return v
}

// GetForwardingPolicy retrieves the value with the specified key from
// the ForwardingPolicy map field of NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies) GetForwardingPolicy(PolicyName string) *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy {

	if t == nil {
		return nil
	}

	key := PolicyName

	if lm, ok := t.ForwardingPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteForwardingPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies) DeleteForwardingPolicy(PolicyName string) {
	key := PolicyName

	delete(t.ForwardingPolicy, key)
}

// AppendForwardingPolicy appends the supplied NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy struct to the
// list ForwardingPolicy of NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies) AppendForwardingPolicy(v *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy) error {
	if v.PolicyName == nil {
		return fmt.Errorf("invalid nil key received for PolicyName")
	}

	key := *v.PolicyName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ForwardingPolicy == nil {
		t.ForwardingPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy)
	}

	if _, ok := t.ForwardingPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list ForwardingPolicy %v", key)
	}

	t.ForwardingPolicy[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetReservedLabelBlock retrieves the value of the leaf ReservedLabelBlock from the NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReservedLabelBlock is set, it can
// safely use t.GetReservedLabelBlock() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReservedLabelBlock == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies) GetReservedLabelBlock() string {
	if t == nil || t.ReservedLabelBlock == nil {
		return ""
	}
	return *t.ReservedLabelBlock
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.ForwardingPolicy {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy represents the /nokia-conf/configure/groups/group/router/mpls/forwarding-policies/forwarding-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy struct {
	AdminState        E_NokiaTypesSros_AdminState                                                                                                                                                                                  `path:"admin-state" module:"nokia-conf"`
	BindingLabel      *uint32                                                                                                                                                                                                      `path:"binding-label" module:"nokia-conf"`
	EgressStatistics  *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_EgressStatistics                                                                                                           `path:"egress-statistics" module:"nokia-conf" yangPresence:"true"`
	Endpoint          *string                                                                                                                                                                                                      `path:"endpoint" module:"nokia-conf"`
	IngressStatistics *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_IngressStatistics                                                                                                          `path:"ingress-statistics" module:"nokia-conf" yangPresence:"true"`
	Metric            *uint32                                                                                                                                                                                                      `path:"metric" module:"nokia-conf"`
	NextHopGroup      map[NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_Index_Union]*NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup `path:"next-hop-group" module:"nokia-conf"`
	PolicyName        *string                                                                                                                                                                                                      `path:"policy-name" module:"nokia-conf"`
	Preference        *uint32                                                                                                                                                                                                      `path:"preference" module:"nokia-conf"`
	RevertTimer       *uint32                                                                                                                                                                                                      `path:"revert-timer" module:"nokia-conf"`
	TunnelTablePref   *uint32                                                                                                                                                                                                      `path:"tunnel-table-pref" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy) IsYANGGoStruct() {
}

// NewNextHopGroup creates a new entry in the NextHopGroup list of the
// NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy) NewNextHopGroup(Index NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_Index_Union) (*NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NextHopGroup == nil {
		t.NextHopGroup = make(map[NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_Index_Union]*NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NextHopGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NextHopGroup", key)
	}

	t.NextHopGroup[key] = &NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup{
		Index: Index,
	}

	return t.NextHopGroup[key], nil
}

// RenameNextHopGroup renames an entry in the list NextHopGroup within
// the NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy) RenameNextHopGroup(oldK, newK NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_Index_Union) error {
	if _, ok := t.NextHopGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in NextHopGroup", newK)
	}

	e, ok := t.NextHopGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NextHopGroup", oldK)
	}
	e.Index = newK

	t.NextHopGroup[newK] = e
	delete(t.NextHopGroup, oldK)
	return nil
}

// GetOrCreateNextHopGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy) GetOrCreateNextHopGroup(Index NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_Index_Union) *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup {

	key := Index

	if v, ok := t.NextHopGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNextHopGroup(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNextHopGroup got unexpected error: %v", err))
	}
	return v
}

// GetNextHopGroup retrieves the value with the specified key from
// the NextHopGroup map field of NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy) GetNextHopGroup(Index NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_Index_Union) *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.NextHopGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteNextHopGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy) DeleteNextHopGroup(Index NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_Index_Union) {
	key := Index

	delete(t.NextHopGroup, key)
}

// AppendNextHopGroup appends the supplied NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup struct to the
// list NextHopGroup of NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy) AppendNextHopGroup(v *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup) error {
	key := v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NextHopGroup == nil {
		t.NextHopGroup = make(map[NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_Index_Union]*NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup)
	}

	if _, ok := t.NextHopGroup[key]; ok {
		return fmt.Errorf("duplicate key for list NextHopGroup %v", key)
	}

	t.NextHopGroup[key] = v
	return nil
}

// GetOrCreateEgressStatistics retrieves the value of the EgressStatistics field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy) GetOrCreateEgressStatistics() *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_EgressStatistics {
	if t.EgressStatistics != nil {
		return t.EgressStatistics
	}
	t.EgressStatistics = &NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_EgressStatistics{}
	return t.EgressStatistics
}

// GetOrCreateIngressStatistics retrieves the value of the IngressStatistics field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy) GetOrCreateIngressStatistics() *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_IngressStatistics {
	if t.IngressStatistics != nil {
		return t.IngressStatistics
	}
	t.IngressStatistics = &NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_IngressStatistics{}
	return t.IngressStatistics
}

// GetEgressStatistics returns the value of the EgressStatistics struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy. If the receiver or the field EgressStatistics is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy) GetEgressStatistics() *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_EgressStatistics {
	if t != nil && t.EgressStatistics != nil {
		return t.EgressStatistics
	}
	return nil
}

// GetIngressStatistics returns the value of the IngressStatistics struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy. If the receiver or the field IngressStatistics is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy) GetIngressStatistics() *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_IngressStatistics {
	if t != nil && t.IngressStatistics != nil {
		return t.IngressStatistics
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetBindingLabel retrieves the value of the leaf BindingLabel from the NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BindingLabel is set, it can
// safely use t.GetBindingLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BindingLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy) GetBindingLabel() uint32 {
	if t == nil || t.BindingLabel == nil {
		return 0
	}
	return *t.BindingLabel
}

// GetEndpoint retrieves the value of the leaf Endpoint from the NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Endpoint is set, it can
// safely use t.GetEndpoint() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Endpoint == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy) GetEndpoint() string {
	if t == nil || t.Endpoint == nil {
		return ""
	}
	return *t.Endpoint
}

// GetMetric retrieves the value of the leaf Metric from the NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Metric is set, it can
// safely use t.GetMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Metric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy) GetMetric() uint32 {
	if t == nil || t.Metric == nil {
		return 0
	}
	return *t.Metric
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 255
	}
	return *t.Preference
}

// GetRevertTimer retrieves the value of the leaf RevertTimer from the NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RevertTimer is set, it can
// safely use t.GetRevertTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RevertTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy) GetRevertTimer() uint32 {
	if t == nil || t.RevertTimer == nil {
		return 0
	}
	return *t.RevertTimer
}

// GetTunnelTablePref retrieves the value of the leaf TunnelTablePref from the NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TunnelTablePref is set, it can
// safely use t.GetTunnelTablePref() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TunnelTablePref == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy) GetTunnelTablePref() uint32 {
	if t == nil || t.TunnelTablePref == nil {
		return 255
	}
	return *t.TunnelTablePref
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Preference == nil {
		var v uint32 = 255
		t.Preference = &v
	}
	if t.TunnelTablePref == nil {
		var v uint32 = 255
		t.TunnelTablePref = &v
	}
	t.EgressStatistics.PopulateDefaults()
	t.IngressStatistics.PopulateDefaults()
	for _, e := range t.NextHopGroup {
		e.PopulateDefaults()
	}
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.PolicyName == nil {
		return nil, fmt.Errorf("nil value for key PolicyName")
	}

	return map[string]interface{}{
		"policy-name": *t.PolicyName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_EgressStatistics represents the /nokia-conf/configure/groups/group/router/mpls/forwarding-policies/forwarding-policy/egress-statistics YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_EgressStatistics struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_EgressStatistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_EgressStatistics) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_EgressStatistics
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_EgressStatistics) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_EgressStatistics
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_EgressStatistics) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_EgressStatistics) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_EgressStatistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_EgressStatistics) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_EgressStatistics) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_EgressStatistics.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_EgressStatistics) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_IngressStatistics represents the /nokia-conf/configure/groups/group/router/mpls/forwarding-policies/forwarding-policy/ingress-statistics YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_IngressStatistics struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_IngressStatistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_IngressStatistics) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_IngressStatistics
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_IngressStatistics) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_IngressStatistics
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_IngressStatistics) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_IngressStatistics) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_IngressStatistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_IngressStatistics) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_IngressStatistics) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_IngressStatistics.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_IngressStatistics) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup represents the /nokia-conf/configure/groups/group/router/mpls/forwarding-policies/forwarding-policy/next-hop-group YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup struct {
	AdminState          E_NokiaTypesSros_AdminState                                                                                    `path:"admin-state" module:"nokia-conf"`
	BackupNextHop       *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_BackupNextHop   `path:"backup-next-hop" module:"nokia-conf" yangPresence:"true"`
	Index               NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_Index_Union      `path:"index" module:"nokia-conf"`
	LoadBalancingWeight *uint32                                                                                                        `path:"load-balancing-weight" module:"nokia-conf"`
	PrimaryNextHop      *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_PrimaryNextHop  `path:"primary-next-hop" module:"nokia-conf" yangPresence:"true"`
	ResolutionType      E_NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_ResolutionType `path:"resolution-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup) IsYANGGoStruct() {
}

// GetOrCreateBackupNextHop retrieves the value of the BackupNextHop field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup) GetOrCreateBackupNextHop() *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_BackupNextHop {
	if t.BackupNextHop != nil {
		return t.BackupNextHop
	}
	t.BackupNextHop = &NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_BackupNextHop{}
	return t.BackupNextHop
}

// GetOrCreatePrimaryNextHop retrieves the value of the PrimaryNextHop field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup) GetOrCreatePrimaryNextHop() *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_PrimaryNextHop {
	if t.PrimaryNextHop != nil {
		return t.PrimaryNextHop
	}
	t.PrimaryNextHop = &NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_PrimaryNextHop{}
	return t.PrimaryNextHop
}

// GetBackupNextHop returns the value of the BackupNextHop struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup. If the receiver or the field BackupNextHop is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup) GetBackupNextHop() *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_BackupNextHop {
	if t != nil && t.BackupNextHop != nil {
		return t.BackupNextHop
	}
	return nil
}

// GetPrimaryNextHop returns the value of the PrimaryNextHop struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup. If the receiver or the field PrimaryNextHop is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup) GetPrimaryNextHop() *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_PrimaryNextHop {
	if t != nil && t.PrimaryNextHop != nil {
		return t.PrimaryNextHop
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetIndex retrieves the value of the leaf Index from the NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup) GetIndex() NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_Index_Union {
	if t == nil || t.Index == nil {
		return nil
	}
	return t.Index
}

// GetLoadBalancingWeight retrieves the value of the leaf LoadBalancingWeight from the NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoadBalancingWeight is set, it can
// safely use t.GetLoadBalancingWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoadBalancingWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup) GetLoadBalancingWeight() uint32 {
	if t == nil || t.LoadBalancingWeight == nil {
		return 0
	}
	return *t.LoadBalancingWeight
}

// GetResolutionType retrieves the value of the leaf ResolutionType from the NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ResolutionType is set, it can
// safely use t.GetResolutionType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ResolutionType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup) GetResolutionType() E_NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_ResolutionType {
	if t == nil || t.ResolutionType == 0 {
		return 0
	}
	return t.ResolutionType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.BackupNextHop.PopulateDefaults()
	t.PrimaryNextHop.PopulateDefaults()
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup) Î›ListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"index": t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_BackupNextHop represents the /nokia-conf/configure/groups/group/router/mpls/forwarding-policies/forwarding-policy/next-hop-group/backup-next-hop YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_BackupNextHop struct {
	NextHop      *string                                                                                                                                                                                                                                                            `path:"next-hop" module:"nokia-conf"`
	PushedLabels map[NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_BackupNextHop_PushedLabels_Index_Union]*NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_BackupNextHop_PushedLabels `path:"pushed-labels" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_BackupNextHop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_BackupNextHop) IsYANGGoStruct() {
}

// NewPushedLabels creates a new entry in the PushedLabels list of the
// NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_BackupNextHop struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_BackupNextHop) NewPushedLabels(Index NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_BackupNextHop_PushedLabels_Index_Union) (*NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_BackupNextHop_PushedLabels, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PushedLabels == nil {
		t.PushedLabels = make(map[NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_BackupNextHop_PushedLabels_Index_Union]*NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_BackupNextHop_PushedLabels)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PushedLabels[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PushedLabels", key)
	}

	t.PushedLabels[key] = &NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_BackupNextHop_PushedLabels{
		Index: Index,
	}

	return t.PushedLabels[key], nil
}

// RenamePushedLabels renames an entry in the list PushedLabels within
// the NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_BackupNextHop struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_BackupNextHop) RenamePushedLabels(oldK, newK NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_BackupNextHop_PushedLabels_Index_Union) error {
	if _, ok := t.PushedLabels[newK]; ok {
		return fmt.Errorf("key %v already exists in PushedLabels", newK)
	}

	e, ok := t.PushedLabels[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PushedLabels", oldK)
	}
	e.Index = newK

	t.PushedLabels[newK] = e
	delete(t.PushedLabels, oldK)
	return nil
}

// GetOrCreatePushedLabels retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_BackupNextHop. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_BackupNextHop) GetOrCreatePushedLabels(Index NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_BackupNextHop_PushedLabels_Index_Union) *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_BackupNextHop_PushedLabels {

	key := Index

	if v, ok := t.PushedLabels[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPushedLabels(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePushedLabels got unexpected error: %v", err))
	}
	return v
}

// GetPushedLabels retrieves the value with the specified key from
// the PushedLabels map field of NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_BackupNextHop. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_BackupNextHop) GetPushedLabels(Index NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_BackupNextHop_PushedLabels_Index_Union) *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_BackupNextHop_PushedLabels {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.PushedLabels[key]; ok {
		return lm
	}
	return nil
}

// DeletePushedLabels deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_BackupNextHop. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_BackupNextHop) DeletePushedLabels(Index NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_BackupNextHop_PushedLabels_Index_Union) {
	key := Index

	delete(t.PushedLabels, key)
}

// AppendPushedLabels appends the supplied NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_BackupNextHop_PushedLabels struct to the
// list PushedLabels of NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_BackupNextHop. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_BackupNextHop_PushedLabels already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_BackupNextHop) AppendPushedLabels(v *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_BackupNextHop_PushedLabels) error {
	key := v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PushedLabels == nil {
		t.PushedLabels = make(map[NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_BackupNextHop_PushedLabels_Index_Union]*NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_BackupNextHop_PushedLabels)
	}

	if _, ok := t.PushedLabels[key]; ok {
		return fmt.Errorf("duplicate key for list PushedLabels %v", key)
	}

	t.PushedLabels[key] = v
	return nil
}

// GetNextHop retrieves the value of the leaf NextHop from the NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_BackupNextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHop is set, it can
// safely use t.GetNextHop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_BackupNextHop) GetNextHop() string {
	if t == nil || t.NextHop == nil {
		return ""
	}
	return *t.NextHop
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_BackupNextHop
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_BackupNextHop) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.PushedLabels {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_BackupNextHop) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_BackupNextHop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_BackupNextHop) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_BackupNextHop) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_BackupNextHop.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_BackupNextHop) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_BackupNextHop_PushedLabels represents the /nokia-conf/configure/groups/group/router/mpls/forwarding-policies/forwarding-policy/next-hop-group/backup-next-hop/pushed-labels YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_BackupNextHop_PushedLabels struct {
	Index NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_BackupNextHop_PushedLabels_Index_Union `path:"index" module:"nokia-conf"`
	Label *uint32                                                                                                                              `path:"label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_BackupNextHop_PushedLabels implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_BackupNextHop_PushedLabels) IsYANGGoStruct() {
}

// GetIndex retrieves the value of the leaf Index from the NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_BackupNextHop_PushedLabels
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_BackupNextHop_PushedLabels) GetIndex() NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_BackupNextHop_PushedLabels_Index_Union {
	if t == nil || t.Index == nil {
		return nil
	}
	return t.Index
}

// GetLabel retrieves the value of the leaf Label from the NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_BackupNextHop_PushedLabels
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Label is set, it can
// safely use t.GetLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Label == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_BackupNextHop_PushedLabels) GetLabel() uint32 {
	if t == nil || t.Label == nil {
		return 0
	}
	return *t.Label
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_BackupNextHop_PushedLabels
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_BackupNextHop_PushedLabels) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_BackupNextHop_PushedLabels struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_BackupNextHop_PushedLabels) Î›ListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"index": t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_BackupNextHop_PushedLabels) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_BackupNextHop_PushedLabels"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_BackupNextHop_PushedLabels) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_BackupNextHop_PushedLabels) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_BackupNextHop_PushedLabels.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_BackupNextHop_PushedLabels) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_PrimaryNextHop represents the /nokia-conf/configure/groups/group/router/mpls/forwarding-policies/forwarding-policy/next-hop-group/primary-next-hop YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_PrimaryNextHop struct {
	NextHop      *string                                                                                                                                                                                                                                                              `path:"next-hop" module:"nokia-conf"`
	PushedLabels map[NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_PrimaryNextHop_PushedLabels_Index_Union]*NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_PrimaryNextHop_PushedLabels `path:"pushed-labels" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_PrimaryNextHop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_PrimaryNextHop) IsYANGGoStruct() {
}

// NewPushedLabels creates a new entry in the PushedLabels list of the
// NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_PrimaryNextHop struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_PrimaryNextHop) NewPushedLabels(Index NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_PrimaryNextHop_PushedLabels_Index_Union) (*NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_PrimaryNextHop_PushedLabels, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PushedLabels == nil {
		t.PushedLabels = make(map[NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_PrimaryNextHop_PushedLabels_Index_Union]*NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_PrimaryNextHop_PushedLabels)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PushedLabels[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PushedLabels", key)
	}

	t.PushedLabels[key] = &NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_PrimaryNextHop_PushedLabels{
		Index: Index,
	}

	return t.PushedLabels[key], nil
}

// RenamePushedLabels renames an entry in the list PushedLabels within
// the NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_PrimaryNextHop struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_PrimaryNextHop) RenamePushedLabels(oldK, newK NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_PrimaryNextHop_PushedLabels_Index_Union) error {
	if _, ok := t.PushedLabels[newK]; ok {
		return fmt.Errorf("key %v already exists in PushedLabels", newK)
	}

	e, ok := t.PushedLabels[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PushedLabels", oldK)
	}
	e.Index = newK

	t.PushedLabels[newK] = e
	delete(t.PushedLabels, oldK)
	return nil
}

// GetOrCreatePushedLabels retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_PrimaryNextHop. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_PrimaryNextHop) GetOrCreatePushedLabels(Index NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_PrimaryNextHop_PushedLabels_Index_Union) *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_PrimaryNextHop_PushedLabels {

	key := Index

	if v, ok := t.PushedLabels[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPushedLabels(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePushedLabels got unexpected error: %v", err))
	}
	return v
}

// GetPushedLabels retrieves the value with the specified key from
// the PushedLabels map field of NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_PrimaryNextHop. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_PrimaryNextHop) GetPushedLabels(Index NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_PrimaryNextHop_PushedLabels_Index_Union) *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_PrimaryNextHop_PushedLabels {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.PushedLabels[key]; ok {
		return lm
	}
	return nil
}

// DeletePushedLabels deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_PrimaryNextHop. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_PrimaryNextHop) DeletePushedLabels(Index NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_PrimaryNextHop_PushedLabels_Index_Union) {
	key := Index

	delete(t.PushedLabels, key)
}

// AppendPushedLabels appends the supplied NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_PrimaryNextHop_PushedLabels struct to the
// list PushedLabels of NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_PrimaryNextHop. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_PrimaryNextHop_PushedLabels already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_PrimaryNextHop) AppendPushedLabels(v *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_PrimaryNextHop_PushedLabels) error {
	key := v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PushedLabels == nil {
		t.PushedLabels = make(map[NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_PrimaryNextHop_PushedLabels_Index_Union]*NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_PrimaryNextHop_PushedLabels)
	}

	if _, ok := t.PushedLabels[key]; ok {
		return fmt.Errorf("duplicate key for list PushedLabels %v", key)
	}

	t.PushedLabels[key] = v
	return nil
}

// GetNextHop retrieves the value of the leaf NextHop from the NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_PrimaryNextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHop is set, it can
// safely use t.GetNextHop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_PrimaryNextHop) GetNextHop() string {
	if t == nil || t.NextHop == nil {
		return ""
	}
	return *t.NextHop
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_PrimaryNextHop
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_PrimaryNextHop) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.PushedLabels {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_PrimaryNextHop) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_PrimaryNextHop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_PrimaryNextHop) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_PrimaryNextHop) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_PrimaryNextHop.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_PrimaryNextHop) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_PrimaryNextHop_PushedLabels represents the /nokia-conf/configure/groups/group/router/mpls/forwarding-policies/forwarding-policy/next-hop-group/primary-next-hop/pushed-labels YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_PrimaryNextHop_PushedLabels struct {
	Index NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_PrimaryNextHop_PushedLabels_Index_Union `path:"index" module:"nokia-conf"`
	Label *uint32                                                                                                                               `path:"label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_PrimaryNextHop_PushedLabels implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_PrimaryNextHop_PushedLabels) IsYANGGoStruct() {
}

// GetIndex retrieves the value of the leaf Index from the NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_PrimaryNextHop_PushedLabels
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_PrimaryNextHop_PushedLabels) GetIndex() NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_PrimaryNextHop_PushedLabels_Index_Union {
	if t == nil || t.Index == nil {
		return nil
	}
	return t.Index
}

// GetLabel retrieves the value of the leaf Label from the NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_PrimaryNextHop_PushedLabels
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Label is set, it can
// safely use t.GetLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Label == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_PrimaryNextHop_PushedLabels) GetLabel() uint32 {
	if t == nil || t.Label == nil {
		return 0
	}
	return *t.Label
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_PrimaryNextHop_PushedLabels
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_PrimaryNextHop_PushedLabels) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_PrimaryNextHop_PushedLabels struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_PrimaryNextHop_PushedLabels) Î›ListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"index": t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_PrimaryNextHop_PushedLabels) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_PrimaryNextHop_PushedLabels"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_PrimaryNextHop_PushedLabels) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_PrimaryNextHop_PushedLabels) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_PrimaryNextHop_PushedLabels.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_ForwardingPolicies_ForwardingPolicy_NextHopGroup_PrimaryNextHop_PushedLabels) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics represents the /nokia-conf/configure/groups/group/router/mpls/ingress-statistics YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics struct {
	Lsp             map[NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_Lsp_Key]*NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_Lsp                         `path:"lsp" module:"nokia-conf"`
	P2MpTemplateLsp map[NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2MpTemplateLsp_Key]*NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2MpTemplateLsp `path:"p2mp-template-lsp" module:"nokia-conf"`
	P2PTemplateLsp  map[NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2PTemplateLsp_Key]*NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2PTemplateLsp   `path:"p2p-template-lsp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics) IsYANGGoStruct() {}

// NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_Lsp_Key represents the key for list Lsp of element /nokia-conf/configure/groups/group/router/mpls/ingress-statistics.
type NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_Lsp_Key struct {
	Sender  string `path:"sender"`
	LspName string `path:"lsp-name"`
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2MpTemplateLsp_Key represents the key for list P2MpTemplateLsp of element /nokia-conf/configure/groups/group/router/mpls/ingress-statistics.
type NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2MpTemplateLsp_Key struct {
	Sender          string `path:"sender"`
	RsvpSessionName string `path:"rsvp-session-name"`
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2PTemplateLsp_Key represents the key for list P2PTemplateLsp of element /nokia-conf/configure/groups/group/router/mpls/ingress-statistics.
type NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2PTemplateLsp_Key struct {
	Sender          string `path:"sender"`
	RsvpSessionName string `path:"rsvp-session-name"`
}

// NewLsp creates a new entry in the Lsp list of the
// NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics) NewLsp(Sender string, LspName string) (*NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_Lsp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Lsp == nil {
		t.Lsp = make(map[NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_Lsp_Key]*NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_Lsp)
	}

	key := NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_Lsp_Key{
		Sender:  Sender,
		LspName: LspName,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Lsp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Lsp", key)
	}

	t.Lsp[key] = &NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_Lsp{
		Sender:  &Sender,
		LspName: &LspName,
	}

	return t.Lsp[key], nil
}

// RenameLsp renames an entry in the list Lsp within
// the NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics) RenameLsp(oldK, newK NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_Lsp_Key) error {
	if _, ok := t.Lsp[newK]; ok {
		return fmt.Errorf("key %v already exists in Lsp", newK)
	}

	e, ok := t.Lsp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Lsp", oldK)
	}
	e.Sender = &newK.Sender
	e.LspName = &newK.LspName

	t.Lsp[newK] = e
	delete(t.Lsp, oldK)
	return nil
}

// GetOrCreateLsp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics) GetOrCreateLsp(Sender string, LspName string) *NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_Lsp {

	key := NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_Lsp_Key{
		Sender:  Sender,
		LspName: LspName,
	}

	if v, ok := t.Lsp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLsp(Sender, LspName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLsp got unexpected error: %v", err))
	}
	return v
}

// GetLsp retrieves the value with the specified key from
// the Lsp map field of NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics) GetLsp(Sender string, LspName string) *NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_Lsp {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_Lsp_Key{
		Sender:  Sender,
		LspName: LspName,
	}

	if lm, ok := t.Lsp[key]; ok {
		return lm
	}
	return nil
}

// DeleteLsp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics) DeleteLsp(Sender string, LspName string) {
	key := NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_Lsp_Key{
		Sender:  Sender,
		LspName: LspName,
	}

	delete(t.Lsp, key)
}

// AppendLsp appends the supplied NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_Lsp struct to the
// list Lsp of NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_Lsp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics) AppendLsp(v *NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_Lsp) error {
	if v.Sender == nil {
		return fmt.Errorf("invalid nil key for Sender")
	}

	if v.LspName == nil {
		return fmt.Errorf("invalid nil key for LspName")
	}

	key := NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_Lsp_Key{
		Sender:  *v.Sender,
		LspName: *v.LspName,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Lsp == nil {
		t.Lsp = make(map[NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_Lsp_Key]*NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_Lsp)
	}

	if _, ok := t.Lsp[key]; ok {
		return fmt.Errorf("duplicate key for list Lsp %v", key)
	}

	t.Lsp[key] = v
	return nil
}

// NewP2MpTemplateLsp creates a new entry in the P2MpTemplateLsp list of the
// NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics) NewP2MpTemplateLsp(Sender string, RsvpSessionName string) (*NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2MpTemplateLsp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.P2MpTemplateLsp == nil {
		t.P2MpTemplateLsp = make(map[NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2MpTemplateLsp_Key]*NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2MpTemplateLsp)
	}

	key := NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2MpTemplateLsp_Key{
		Sender:          Sender,
		RsvpSessionName: RsvpSessionName,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.P2MpTemplateLsp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list P2MpTemplateLsp", key)
	}

	t.P2MpTemplateLsp[key] = &NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2MpTemplateLsp{
		Sender:          &Sender,
		RsvpSessionName: &RsvpSessionName,
	}

	return t.P2MpTemplateLsp[key], nil
}

// RenameP2MpTemplateLsp renames an entry in the list P2MpTemplateLsp within
// the NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics) RenameP2MpTemplateLsp(oldK, newK NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2MpTemplateLsp_Key) error {
	if _, ok := t.P2MpTemplateLsp[newK]; ok {
		return fmt.Errorf("key %v already exists in P2MpTemplateLsp", newK)
	}

	e, ok := t.P2MpTemplateLsp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in P2MpTemplateLsp", oldK)
	}
	e.Sender = &newK.Sender
	e.RsvpSessionName = &newK.RsvpSessionName

	t.P2MpTemplateLsp[newK] = e
	delete(t.P2MpTemplateLsp, oldK)
	return nil
}

// GetOrCreateP2MpTemplateLsp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics) GetOrCreateP2MpTemplateLsp(Sender string, RsvpSessionName string) *NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2MpTemplateLsp {

	key := NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2MpTemplateLsp_Key{
		Sender:          Sender,
		RsvpSessionName: RsvpSessionName,
	}

	if v, ok := t.P2MpTemplateLsp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewP2MpTemplateLsp(Sender, RsvpSessionName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateP2MpTemplateLsp got unexpected error: %v", err))
	}
	return v
}

// GetP2MpTemplateLsp retrieves the value with the specified key from
// the P2MpTemplateLsp map field of NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics) GetP2MpTemplateLsp(Sender string, RsvpSessionName string) *NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2MpTemplateLsp {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2MpTemplateLsp_Key{
		Sender:          Sender,
		RsvpSessionName: RsvpSessionName,
	}

	if lm, ok := t.P2MpTemplateLsp[key]; ok {
		return lm
	}
	return nil
}

// DeleteP2MpTemplateLsp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics) DeleteP2MpTemplateLsp(Sender string, RsvpSessionName string) {
	key := NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2MpTemplateLsp_Key{
		Sender:          Sender,
		RsvpSessionName: RsvpSessionName,
	}

	delete(t.P2MpTemplateLsp, key)
}

// AppendP2MpTemplateLsp appends the supplied NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2MpTemplateLsp struct to the
// list P2MpTemplateLsp of NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2MpTemplateLsp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics) AppendP2MpTemplateLsp(v *NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2MpTemplateLsp) error {
	if v.Sender == nil {
		return fmt.Errorf("invalid nil key for Sender")
	}

	if v.RsvpSessionName == nil {
		return fmt.Errorf("invalid nil key for RsvpSessionName")
	}

	key := NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2MpTemplateLsp_Key{
		Sender:          *v.Sender,
		RsvpSessionName: *v.RsvpSessionName,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.P2MpTemplateLsp == nil {
		t.P2MpTemplateLsp = make(map[NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2MpTemplateLsp_Key]*NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2MpTemplateLsp)
	}

	if _, ok := t.P2MpTemplateLsp[key]; ok {
		return fmt.Errorf("duplicate key for list P2MpTemplateLsp %v", key)
	}

	t.P2MpTemplateLsp[key] = v
	return nil
}

// NewP2PTemplateLsp creates a new entry in the P2PTemplateLsp list of the
// NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics) NewP2PTemplateLsp(Sender string, RsvpSessionName string) (*NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2PTemplateLsp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.P2PTemplateLsp == nil {
		t.P2PTemplateLsp = make(map[NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2PTemplateLsp_Key]*NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2PTemplateLsp)
	}

	key := NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2PTemplateLsp_Key{
		Sender:          Sender,
		RsvpSessionName: RsvpSessionName,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.P2PTemplateLsp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list P2PTemplateLsp", key)
	}

	t.P2PTemplateLsp[key] = &NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2PTemplateLsp{
		Sender:          &Sender,
		RsvpSessionName: &RsvpSessionName,
	}

	return t.P2PTemplateLsp[key], nil
}

// RenameP2PTemplateLsp renames an entry in the list P2PTemplateLsp within
// the NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics) RenameP2PTemplateLsp(oldK, newK NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2PTemplateLsp_Key) error {
	if _, ok := t.P2PTemplateLsp[newK]; ok {
		return fmt.Errorf("key %v already exists in P2PTemplateLsp", newK)
	}

	e, ok := t.P2PTemplateLsp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in P2PTemplateLsp", oldK)
	}
	e.Sender = &newK.Sender
	e.RsvpSessionName = &newK.RsvpSessionName

	t.P2PTemplateLsp[newK] = e
	delete(t.P2PTemplateLsp, oldK)
	return nil
}

// GetOrCreateP2PTemplateLsp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics) GetOrCreateP2PTemplateLsp(Sender string, RsvpSessionName string) *NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2PTemplateLsp {

	key := NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2PTemplateLsp_Key{
		Sender:          Sender,
		RsvpSessionName: RsvpSessionName,
	}

	if v, ok := t.P2PTemplateLsp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewP2PTemplateLsp(Sender, RsvpSessionName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateP2PTemplateLsp got unexpected error: %v", err))
	}
	return v
}

// GetP2PTemplateLsp retrieves the value with the specified key from
// the P2PTemplateLsp map field of NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics) GetP2PTemplateLsp(Sender string, RsvpSessionName string) *NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2PTemplateLsp {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2PTemplateLsp_Key{
		Sender:          Sender,
		RsvpSessionName: RsvpSessionName,
	}

	if lm, ok := t.P2PTemplateLsp[key]; ok {
		return lm
	}
	return nil
}

// DeleteP2PTemplateLsp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics) DeleteP2PTemplateLsp(Sender string, RsvpSessionName string) {
	key := NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2PTemplateLsp_Key{
		Sender:          Sender,
		RsvpSessionName: RsvpSessionName,
	}

	delete(t.P2PTemplateLsp, key)
}

// AppendP2PTemplateLsp appends the supplied NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2PTemplateLsp struct to the
// list P2PTemplateLsp of NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2PTemplateLsp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics) AppendP2PTemplateLsp(v *NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2PTemplateLsp) error {
	if v.Sender == nil {
		return fmt.Errorf("invalid nil key for Sender")
	}

	if v.RsvpSessionName == nil {
		return fmt.Errorf("invalid nil key for RsvpSessionName")
	}

	key := NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2PTemplateLsp_Key{
		Sender:          *v.Sender,
		RsvpSessionName: *v.RsvpSessionName,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.P2PTemplateLsp == nil {
		t.P2PTemplateLsp = make(map[NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2PTemplateLsp_Key]*NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2PTemplateLsp)
	}

	if _, ok := t.P2PTemplateLsp[key]; ok {
		return fmt.Errorf("duplicate key for list P2PTemplateLsp %v", key)
	}

	t.P2PTemplateLsp[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Lsp {
		e.PopulateDefaults()
	}
	for _, e := range t.P2MpTemplateLsp {
		e.PopulateDefaults()
	}
	for _, e := range t.P2PTemplateLsp {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_Lsp represents the /nokia-conf/configure/groups/group/router/mpls/ingress-statistics/lsp YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_Lsp struct {
	AccountingPolicy *uint32                                                                       `path:"accounting-policy" module:"nokia-conf"`
	AdminState       E_NokiaTypesSros_AdminState                                                   `path:"admin-state" module:"nokia-conf"`
	CollectStats     *bool                                                                         `path:"collect-stats" module:"nokia-conf"`
	LspName          *string                                                                       `path:"lsp-name" module:"nokia-conf"`
	Sender           *string                                                                       `path:"sender" module:"nokia-conf"`
	StatMode         E_NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_Lsp_StatMode `path:"stat-mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_Lsp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_Lsp) IsYANGGoStruct() {}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_Lsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_Lsp) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_Lsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_Lsp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_Lsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_Lsp) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// GetLspName retrieves the value of the leaf LspName from the NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_Lsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspName is set, it can
// safely use t.GetLspName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_Lsp) GetLspName() string {
	if t == nil || t.LspName == nil {
		return ""
	}
	return *t.LspName
}

// GetSender retrieves the value of the leaf Sender from the NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_Lsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Sender is set, it can
// safely use t.GetSender() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Sender == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_Lsp) GetSender() string {
	if t == nil || t.Sender == nil {
		return ""
	}
	return *t.Sender
}

// GetStatMode retrieves the value of the leaf StatMode from the NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_Lsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StatMode is set, it can
// safely use t.GetStatMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StatMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_Lsp) GetStatMode() E_NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_Lsp_StatMode {
	if t == nil || t.StatMode == 0 {
		return 0
	}
	return t.StatMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_Lsp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_Lsp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_Lsp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_Lsp) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.LspName == nil {
		return nil, fmt.Errorf("nil value for key LspName")
	}

	if t.Sender == nil {
		return nil, fmt.Errorf("nil value for key Sender")
	}

	return map[string]interface{}{
		"lsp-name": *t.LspName,
		"sender":   *t.Sender,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_Lsp) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_Lsp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_Lsp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_Lsp) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_Lsp.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_Lsp) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2MpTemplateLsp represents the /nokia-conf/configure/groups/group/router/mpls/ingress-statistics/p2mp-template-lsp YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2MpTemplateLsp struct {
	AccountingPolicy *uint32                                                                                   `path:"accounting-policy" module:"nokia-conf"`
	AdminState       E_NokiaTypesSros_AdminState                                                               `path:"admin-state" module:"nokia-conf"`
	CollectStats     *bool                                                                                     `path:"collect-stats" module:"nokia-conf"`
	MaxStats         *uint32                                                                                   `path:"max-stats" module:"nokia-conf"`
	RsvpSessionName  *string                                                                                   `path:"rsvp-session-name" module:"nokia-conf"`
	Sender           *string                                                                                   `path:"sender" module:"nokia-conf"`
	StatMode         E_NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2MpTemplateLsp_StatMode `path:"stat-mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2MpTemplateLsp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2MpTemplateLsp) IsYANGGoStruct() {
}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2MpTemplateLsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2MpTemplateLsp) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2MpTemplateLsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2MpTemplateLsp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2MpTemplateLsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2MpTemplateLsp) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// GetMaxStats retrieves the value of the leaf MaxStats from the NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2MpTemplateLsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxStats is set, it can
// safely use t.GetMaxStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2MpTemplateLsp) GetMaxStats() uint32 {
	if t == nil || t.MaxStats == nil {
		return 8191
	}
	return *t.MaxStats
}

// GetRsvpSessionName retrieves the value of the leaf RsvpSessionName from the NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2MpTemplateLsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RsvpSessionName is set, it can
// safely use t.GetRsvpSessionName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RsvpSessionName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2MpTemplateLsp) GetRsvpSessionName() string {
	if t == nil || t.RsvpSessionName == nil {
		return ""
	}
	return *t.RsvpSessionName
}

// GetSender retrieves the value of the leaf Sender from the NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2MpTemplateLsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Sender is set, it can
// safely use t.GetSender() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Sender == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2MpTemplateLsp) GetSender() string {
	if t == nil || t.Sender == nil {
		return ""
	}
	return *t.Sender
}

// GetStatMode retrieves the value of the leaf StatMode from the NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2MpTemplateLsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StatMode is set, it can
// safely use t.GetStatMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StatMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2MpTemplateLsp) GetStatMode() E_NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2MpTemplateLsp_StatMode {
	if t == nil || t.StatMode == 0 {
		return 0
	}
	return t.StatMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2MpTemplateLsp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2MpTemplateLsp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
	if t.MaxStats == nil {
		var v uint32 = 8191
		t.MaxStats = &v
	}
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2MpTemplateLsp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2MpTemplateLsp) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.RsvpSessionName == nil {
		return nil, fmt.Errorf("nil value for key RsvpSessionName")
	}

	if t.Sender == nil {
		return nil, fmt.Errorf("nil value for key Sender")
	}

	return map[string]interface{}{
		"rsvp-session-name": *t.RsvpSessionName,
		"sender":            *t.Sender,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2MpTemplateLsp) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2MpTemplateLsp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2MpTemplateLsp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2MpTemplateLsp) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2MpTemplateLsp.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2MpTemplateLsp) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2PTemplateLsp represents the /nokia-conf/configure/groups/group/router/mpls/ingress-statistics/p2p-template-lsp YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2PTemplateLsp struct {
	AccountingPolicy *uint32                                                                                  `path:"accounting-policy" module:"nokia-conf"`
	AdminState       E_NokiaTypesSros_AdminState                                                              `path:"admin-state" module:"nokia-conf"`
	CollectStats     *bool                                                                                    `path:"collect-stats" module:"nokia-conf"`
	MaxStats         *uint32                                                                                  `path:"max-stats" module:"nokia-conf"`
	RsvpSessionName  *string                                                                                  `path:"rsvp-session-name" module:"nokia-conf"`
	Sender           *string                                                                                  `path:"sender" module:"nokia-conf"`
	StatMode         E_NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2PTemplateLsp_StatMode `path:"stat-mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2PTemplateLsp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2PTemplateLsp) IsYANGGoStruct() {
}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2PTemplateLsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2PTemplateLsp) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2PTemplateLsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2PTemplateLsp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2PTemplateLsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2PTemplateLsp) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// GetMaxStats retrieves the value of the leaf MaxStats from the NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2PTemplateLsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxStats is set, it can
// safely use t.GetMaxStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2PTemplateLsp) GetMaxStats() uint32 {
	if t == nil || t.MaxStats == nil {
		return 8191
	}
	return *t.MaxStats
}

// GetRsvpSessionName retrieves the value of the leaf RsvpSessionName from the NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2PTemplateLsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RsvpSessionName is set, it can
// safely use t.GetRsvpSessionName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RsvpSessionName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2PTemplateLsp) GetRsvpSessionName() string {
	if t == nil || t.RsvpSessionName == nil {
		return ""
	}
	return *t.RsvpSessionName
}

// GetSender retrieves the value of the leaf Sender from the NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2PTemplateLsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Sender is set, it can
// safely use t.GetSender() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Sender == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2PTemplateLsp) GetSender() string {
	if t == nil || t.Sender == nil {
		return ""
	}
	return *t.Sender
}

// GetStatMode retrieves the value of the leaf StatMode from the NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2PTemplateLsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StatMode is set, it can
// safely use t.GetStatMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StatMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2PTemplateLsp) GetStatMode() E_NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2PTemplateLsp_StatMode {
	if t == nil || t.StatMode == 0 {
		return 0
	}
	return t.StatMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2PTemplateLsp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2PTemplateLsp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
	if t.MaxStats == nil {
		var v uint32 = 8191
		t.MaxStats = &v
	}
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2PTemplateLsp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2PTemplateLsp) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.RsvpSessionName == nil {
		return nil, fmt.Errorf("nil value for key RsvpSessionName")
	}

	if t.Sender == nil {
		return nil, fmt.Errorf("nil value for key Sender")
	}

	return map[string]interface{}{
		"rsvp-session-name": *t.RsvpSessionName,
		"sender":            *t.Sender,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2PTemplateLsp) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2PTemplateLsp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2PTemplateLsp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2PTemplateLsp) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2PTemplateLsp.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_IngressStatistics_P2PTemplateLsp) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_Interface represents the /nokia-conf/configure/groups/group/router/mpls/interface YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_Interface struct {
	AdminGroup    []string                                                                                                                                           `path:"admin-group" module:"nokia-conf"`
	AdminState    E_NokiaTypesSros_AdminState                                                                                                                        `path:"admin-state" module:"nokia-conf"`
	InterfaceName *string                                                                                                                                            `path:"interface-name" module:"nokia-conf"`
	LabelMap      map[NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_LabelMap_InLabel_Union]*NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_LabelMap `path:"label-map" module:"nokia-conf"`
	SrlgGroup     map[string]*NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_SrlgGroup                                                                       `path:"srlg-group" module:"nokia-conf"`
	TeMetric      *uint32                                                                                                                                            `path:"te-metric" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Interface) IsYANGGoStruct() {}

// NewLabelMap creates a new entry in the LabelMap list of the
// NokiaConf_Configure_Groups_Group_Router_Mpls_Interface struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Interface) NewLabelMap(InLabel NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_LabelMap_InLabel_Union) (*NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_LabelMap, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LabelMap == nil {
		t.LabelMap = make(map[NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_LabelMap_InLabel_Union]*NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_LabelMap)
	}

	key := InLabel

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.LabelMap[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list LabelMap", key)
	}

	t.LabelMap[key] = &NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_LabelMap{
		InLabel: InLabel,
	}

	return t.LabelMap[key], nil
}

// RenameLabelMap renames an entry in the list LabelMap within
// the NokiaConf_Configure_Groups_Group_Router_Mpls_Interface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Interface) RenameLabelMap(oldK, newK NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_LabelMap_InLabel_Union) error {
	if _, ok := t.LabelMap[newK]; ok {
		return fmt.Errorf("key %v already exists in LabelMap", newK)
	}

	e, ok := t.LabelMap[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in LabelMap", oldK)
	}
	e.InLabel = newK

	t.LabelMap[newK] = e
	delete(t.LabelMap, oldK)
	return nil
}

// GetOrCreateLabelMap retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mpls_Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Interface) GetOrCreateLabelMap(InLabel NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_LabelMap_InLabel_Union) *NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_LabelMap {

	key := InLabel

	if v, ok := t.LabelMap[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLabelMap(InLabel)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLabelMap got unexpected error: %v", err))
	}
	return v
}

// GetLabelMap retrieves the value with the specified key from
// the LabelMap map field of NokiaConf_Configure_Groups_Group_Router_Mpls_Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Interface) GetLabelMap(InLabel NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_LabelMap_InLabel_Union) *NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_LabelMap {

	if t == nil {
		return nil
	}

	key := InLabel

	if lm, ok := t.LabelMap[key]; ok {
		return lm
	}
	return nil
}

// DeleteLabelMap deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mpls_Interface. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Interface) DeleteLabelMap(InLabel NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_LabelMap_InLabel_Union) {
	key := InLabel

	delete(t.LabelMap, key)
}

// AppendLabelMap appends the supplied NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_LabelMap struct to the
// list LabelMap of NokiaConf_Configure_Groups_Group_Router_Mpls_Interface. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_LabelMap already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Interface) AppendLabelMap(v *NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_LabelMap) error {
	key := v.InLabel

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LabelMap == nil {
		t.LabelMap = make(map[NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_LabelMap_InLabel_Union]*NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_LabelMap)
	}

	if _, ok := t.LabelMap[key]; ok {
		return fmt.Errorf("duplicate key for list LabelMap %v", key)
	}

	t.LabelMap[key] = v
	return nil
}

// NewSrlgGroup creates a new entry in the SrlgGroup list of the
// NokiaConf_Configure_Groups_Group_Router_Mpls_Interface struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Interface) NewSrlgGroup(Name string) (*NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_SrlgGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SrlgGroup == nil {
		t.SrlgGroup = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_SrlgGroup)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SrlgGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SrlgGroup", key)
	}

	t.SrlgGroup[key] = &NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_SrlgGroup{
		Name: &Name,
	}

	return t.SrlgGroup[key], nil
}

// RenameSrlgGroup renames an entry in the list SrlgGroup within
// the NokiaConf_Configure_Groups_Group_Router_Mpls_Interface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Interface) RenameSrlgGroup(oldK, newK string) error {
	if _, ok := t.SrlgGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in SrlgGroup", newK)
	}

	e, ok := t.SrlgGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SrlgGroup", oldK)
	}
	e.Name = &newK

	t.SrlgGroup[newK] = e
	delete(t.SrlgGroup, oldK)
	return nil
}

// GetOrCreateSrlgGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mpls_Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Interface) GetOrCreateSrlgGroup(Name string) *NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_SrlgGroup {

	key := Name

	if v, ok := t.SrlgGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSrlgGroup(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSrlgGroup got unexpected error: %v", err))
	}
	return v
}

// GetSrlgGroup retrieves the value with the specified key from
// the SrlgGroup map field of NokiaConf_Configure_Groups_Group_Router_Mpls_Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Interface) GetSrlgGroup(Name string) *NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_SrlgGroup {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.SrlgGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteSrlgGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mpls_Interface. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Interface) DeleteSrlgGroup(Name string) {
	key := Name

	delete(t.SrlgGroup, key)
}

// AppendSrlgGroup appends the supplied NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_SrlgGroup struct to the
// list SrlgGroup of NokiaConf_Configure_Groups_Group_Router_Mpls_Interface. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_SrlgGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Interface) AppendSrlgGroup(v *NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_SrlgGroup) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SrlgGroup == nil {
		t.SrlgGroup = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_SrlgGroup)
	}

	if _, ok := t.SrlgGroup[key]; ok {
		return fmt.Errorf("duplicate key for list SrlgGroup %v", key)
	}

	t.SrlgGroup[key] = v
	return nil
}

// GetAdminGroup retrieves the value of the leaf AdminGroup from the NokiaConf_Configure_Groups_Group_Router_Mpls_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminGroup is set, it can
// safely use t.GetAdminGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Interface) GetAdminGroup() []string {
	if t == nil || t.AdminGroup == nil {
		return nil
	}
	return t.AdminGroup
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Mpls_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Interface) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Groups_Group_Router_Mpls_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Interface) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetTeMetric retrieves the value of the leaf TeMetric from the NokiaConf_Configure_Groups_Group_Router_Mpls_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TeMetric is set, it can
// safely use t.GetTeMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TeMetric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Interface) GetTeMetric() uint32 {
	if t == nil || t.TeMetric == nil {
		return 0
	}
	return *t.TeMetric
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	for _, e := range t.LabelMap {
		e.PopulateDefaults()
	}
	for _, e := range t.SrlgGroup {
		e.PopulateDefaults()
	}
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Mpls_Interface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Interface) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Interface) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Interface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Interface) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_Interface.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Interface) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_LabelMap represents the /nokia-conf/configure/groups/group/router/mpls/interface/label-map YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_LabelMap struct {
	AdminState E_NokiaTypesSros_AdminState                                                   `path:"admin-state" module:"nokia-conf"`
	InLabel    NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_LabelMap_InLabel_Union `path:"in-label" module:"nokia-conf"`
	Pop        YANGEmpty                                                                     `path:"pop" module:"nokia-conf"`
	Swap       *NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_LabelMap_Swap         `path:"swap" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_LabelMap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_LabelMap) IsYANGGoStruct() {}

// GetOrCreateSwap retrieves the value of the Swap field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_LabelMap) GetOrCreateSwap() *NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_LabelMap_Swap {
	if t.Swap != nil {
		return t.Swap
	}
	t.Swap = &NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_LabelMap_Swap{}
	return t.Swap
}

// GetSwap returns the value of the Swap struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_LabelMap. If the receiver or the field Swap is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_LabelMap) GetSwap() *NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_LabelMap_Swap {
	if t != nil && t.Swap != nil {
		return t.Swap
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_LabelMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_LabelMap) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetInLabel retrieves the value of the leaf InLabel from the NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_LabelMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InLabel is set, it can
// safely use t.GetInLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_LabelMap) GetInLabel() NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_LabelMap_InLabel_Union {
	if t == nil || t.InLabel == nil {
		return nil
	}
	return t.InLabel
}

// GetPop retrieves the value of the leaf Pop from the NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_LabelMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pop is set, it can
// safely use t.GetPop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_LabelMap) GetPop() YANGEmpty {
	if t == nil || t.Pop == false {
		return false
	}
	return t.Pop
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_LabelMap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_LabelMap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.Swap.PopulateDefaults()
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_LabelMap struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_LabelMap) Î›ListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"in-label": t.InLabel,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_LabelMap) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_LabelMap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_LabelMap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_LabelMap) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_LabelMap.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_LabelMap) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_LabelMap_Swap represents the /nokia-conf/configure/groups/group/router/mpls/interface/label-map/swap YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_LabelMap_Swap struct {
	NextHop  *string                                                                             `path:"next-hop" module:"nokia-conf"`
	OutLabel NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_LabelMap_Swap_OutLabel_Union `path:"out-label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_LabelMap_Swap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_LabelMap_Swap) IsYANGGoStruct() {}

// GetNextHop retrieves the value of the leaf NextHop from the NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_LabelMap_Swap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHop is set, it can
// safely use t.GetNextHop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_LabelMap_Swap) GetNextHop() string {
	if t == nil || t.NextHop == nil {
		return ""
	}
	return *t.NextHop
}

// GetOutLabel retrieves the value of the leaf OutLabel from the NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_LabelMap_Swap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutLabel is set, it can
// safely use t.GetOutLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_LabelMap_Swap) GetOutLabel() NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_LabelMap_Swap_OutLabel_Union {
	if t == nil || t.OutLabel == nil {
		return nil
	}
	return t.OutLabel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_LabelMap_Swap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_LabelMap_Swap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_LabelMap_Swap) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_LabelMap_Swap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_LabelMap_Swap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_LabelMap_Swap) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_LabelMap_Swap.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_LabelMap_Swap) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_SrlgGroup represents the /nokia-conf/configure/groups/group/router/mpls/interface/srlg-group YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_SrlgGroup struct {
	Name *string `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_SrlgGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_SrlgGroup) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_SrlgGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_SrlgGroup) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_SrlgGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_SrlgGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_SrlgGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_SrlgGroup) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_SrlgGroup) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_SrlgGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_SrlgGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_SrlgGroup) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_SrlgGroup.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Interface_SrlgGroup) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp represents the /nokia-conf/configure/groups/group/router/mpls/lsp YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp struct {
	Adaptive                      *bool                                                                                                                                          `path:"adaptive" module:"nokia-conf"`
	AdminState                    E_NokiaTypesSros_AdminState                                                                                                                    `path:"admin-state" module:"nokia-conf"`
	AdminTag                      map[string]*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AdminTag                                                                          `path:"admin-tag" module:"nokia-conf"`
	Adspec                        *bool                                                                                                                                          `path:"adspec" module:"nokia-conf"`
	AutoBandwidth                 *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth                                                                                `path:"auto-bandwidth" module:"nokia-conf" yangPresence:"true"`
	Bfd                           *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Bfd                                                                                          `path:"bfd" module:"nokia-conf"`
	BgpShortcut                   *bool                                                                                                                                          `path:"bgp-shortcut" module:"nokia-conf"`
	BgpTransportTunnel            *bool                                                                                                                                          `path:"bgp-transport-tunnel" module:"nokia-conf"`
	ClassForwarding               *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_ClassForwarding                                                                              `path:"class-forwarding" module:"nokia-conf" yangPresence:"true"`
	ClassType                     *int32                                                                                                                                         `path:"class-type" module:"nokia-conf"`
	Cspf                          *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Cspf                                                                                         `path:"cspf" module:"nokia-conf" yangPresence:"true"`
	EgressStatistics              *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_EgressStatistics                                                                             `path:"egress-statistics" module:"nokia-conf" yangPresence:"true"`
	EntropyLabel                  E_NokiaTypesSros_BoolWithInherit                                                                                                               `path:"entropy-label" module:"nokia-conf"`
	ExcludeAdminGroup             []string                                                                                                                                       `path:"exclude-admin-group" module:"nokia-conf"`
	ExcludeNode                   *string                                                                                                                                        `path:"exclude-node" module:"nokia-conf"`
	FallbackPathComputationMethod E_NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_FallbackPathComputationMethod                                                               `path:"fallback-path-computation-method" module:"nokia-conf"`
	FastReroute                   *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_FastReroute                                                                                  `path:"fast-reroute" module:"nokia-conf" yangPresence:"true"`
	From                          *string                                                                                                                                        `path:"from" module:"nokia-conf"`
	HopLimit                      *uint32                                                                                                                                        `path:"hop-limit" module:"nokia-conf"`
	IgpShortcut                   *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_IgpShortcut                                                                                  `path:"igp-shortcut" module:"nokia-conf"`
	IncludeAdminGroup             []string                                                                                                                                       `path:"include-admin-group" module:"nokia-conf"`
	LabelStackReduction           *bool                                                                                                                                          `path:"label-stack-reduction" module:"nokia-conf"`
	LdpOverRsvp                   *bool                                                                                                                                          `path:"ldp-over-rsvp" module:"nokia-conf"`
	LeastFill                     *bool                                                                                                                                          `path:"least-fill" module:"nokia-conf"`
	LoadBalancingWeight           *uint32                                                                                                                                        `path:"load-balancing-weight" module:"nokia-conf"`
	LocalSrProtection             E_NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_LocalSrProtection                                                                           `path:"local-sr-protection" module:"nokia-conf"`
	LspName                       *string                                                                                                                                        `path:"lsp-name" module:"nokia-conf"`
	LspSelfPing                   E_NokiaTypesSros_BoolWithInherit                                                                                                               `path:"lsp-self-ping" module:"nokia-conf"`
	MainCtRetryLimit              *uint32                                                                                                                                        `path:"main-ct-retry-limit" module:"nokia-conf"`
	MaxSrLabels                   *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_MaxSrLabels                                                                                  `path:"max-sr-labels" module:"nokia-conf"`
	Metric                        *uint32                                                                                                                                        `path:"metric" module:"nokia-conf"`
	MetricType                    E_NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_MetricType                                                                                  `path:"metric-type" module:"nokia-conf"`
	OverrideTunnelElc             *bool                                                                                                                                          `path:"override-tunnel-elc" module:"nokia-conf"`
	P2MpId                        *uint32                                                                                                                                        `path:"p2mp-id" module:"nokia-conf"`
	PathComputationMethod         E_NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PathComputationMethod                                                                       `path:"path-computation-method" module:"nokia-conf"`
	PathProfile                   map[NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PathProfile_ProfileId_Union]*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PathProfile `path:"path-profile" module:"nokia-conf"`
	PceComputation                *bool                                                                                                                                          `path:"pce-computation" module:"nokia-conf"`
	PceControl                    *bool                                                                                                                                          `path:"pce-control" module:"nokia-conf"`
	PceReport                     E_NokiaTypesSros_BoolWithInherit                                                                                                               `path:"pce-report" module:"nokia-conf"`
	PreferTransportFrr            *bool                                                                                                                                          `path:"prefer-transport-frr" module:"nokia-conf"`
	Primary                       map[string]*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary                                                                           `path:"primary" module:"nokia-conf"`
	PrimaryP2MpInstance           map[string]*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance                                                               `path:"primary-p2mp-instance" module:"nokia-conf"`
	PropagateAdminGroup           *bool                                                                                                                                          `path:"propagate-admin-group" module:"nokia-conf"`
	RetryLimit                    *uint32                                                                                                                                        `path:"retry-limit" module:"nokia-conf"`
	RetryTimer                    *uint32                                                                                                                                        `path:"retry-timer" module:"nokia-conf"`
	RevertTimer                   *uint32                                                                                                                                        `path:"revert-timer" module:"nokia-conf"`
	RsvpResvStyle                 E_NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_RsvpResvStyle                                                                               `path:"rsvp-resv-style" module:"nokia-conf"`
	Secondary                     map[string]*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary                                                                         `path:"secondary" module:"nokia-conf"`
	SoftPreemption                *bool                                                                                                                                          `path:"soft-preemption" module:"nokia-conf"`
	To                            *string                                                                                                                                        `path:"to" module:"nokia-conf"`
	Type                          E_NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Type                                                                                        `path:"type" module:"nokia-conf"`
	VprnAutoBind                  *bool                                                                                                                                          `path:"vprn-auto-bind" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) IsYANGGoStruct() {}

// NewAdminTag creates a new entry in the AdminTag list of the
// NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) NewAdminTag(Name string) (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AdminTag, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AdminTag == nil {
		t.AdminTag = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AdminTag)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AdminTag[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AdminTag", key)
	}

	t.AdminTag[key] = &NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AdminTag{
		Name: &Name,
	}

	return t.AdminTag[key], nil
}

// RenameAdminTag renames an entry in the list AdminTag within
// the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) RenameAdminTag(oldK, newK string) error {
	if _, ok := t.AdminTag[newK]; ok {
		return fmt.Errorf("key %v already exists in AdminTag", newK)
	}

	e, ok := t.AdminTag[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AdminTag", oldK)
	}
	e.Name = &newK

	t.AdminTag[newK] = e
	delete(t.AdminTag, oldK)
	return nil
}

// GetOrCreateAdminTag retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) GetOrCreateAdminTag(Name string) *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AdminTag {

	key := Name

	if v, ok := t.AdminTag[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAdminTag(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAdminTag got unexpected error: %v", err))
	}
	return v
}

// GetAdminTag retrieves the value with the specified key from
// the AdminTag map field of NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) GetAdminTag(Name string) *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AdminTag {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.AdminTag[key]; ok {
		return lm
	}
	return nil
}

// DeleteAdminTag deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) DeleteAdminTag(Name string) {
	key := Name

	delete(t.AdminTag, key)
}

// AppendAdminTag appends the supplied NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AdminTag struct to the
// list AdminTag of NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AdminTag already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) AppendAdminTag(v *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AdminTag) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AdminTag == nil {
		t.AdminTag = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AdminTag)
	}

	if _, ok := t.AdminTag[key]; ok {
		return fmt.Errorf("duplicate key for list AdminTag %v", key)
	}

	t.AdminTag[key] = v
	return nil
}

// NewPathProfile creates a new entry in the PathProfile list of the
// NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) NewPathProfile(ProfileId NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PathProfile_ProfileId_Union) (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PathProfile, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PathProfile == nil {
		t.PathProfile = make(map[NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PathProfile_ProfileId_Union]*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PathProfile)
	}

	key := ProfileId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PathProfile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PathProfile", key)
	}

	t.PathProfile[key] = &NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PathProfile{
		ProfileId: ProfileId,
	}

	return t.PathProfile[key], nil
}

// RenamePathProfile renames an entry in the list PathProfile within
// the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) RenamePathProfile(oldK, newK NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PathProfile_ProfileId_Union) error {
	if _, ok := t.PathProfile[newK]; ok {
		return fmt.Errorf("key %v already exists in PathProfile", newK)
	}

	e, ok := t.PathProfile[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PathProfile", oldK)
	}
	e.ProfileId = newK

	t.PathProfile[newK] = e
	delete(t.PathProfile, oldK)
	return nil
}

// GetOrCreatePathProfile retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) GetOrCreatePathProfile(ProfileId NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PathProfile_ProfileId_Union) *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PathProfile {

	key := ProfileId

	if v, ok := t.PathProfile[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPathProfile(ProfileId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePathProfile got unexpected error: %v", err))
	}
	return v
}

// GetPathProfile retrieves the value with the specified key from
// the PathProfile map field of NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) GetPathProfile(ProfileId NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PathProfile_ProfileId_Union) *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PathProfile {

	if t == nil {
		return nil
	}

	key := ProfileId

	if lm, ok := t.PathProfile[key]; ok {
		return lm
	}
	return nil
}

// DeletePathProfile deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) DeletePathProfile(ProfileId NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PathProfile_ProfileId_Union) {
	key := ProfileId

	delete(t.PathProfile, key)
}

// AppendPathProfile appends the supplied NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PathProfile struct to the
// list PathProfile of NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PathProfile already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) AppendPathProfile(v *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PathProfile) error {
	key := v.ProfileId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PathProfile == nil {
		t.PathProfile = make(map[NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PathProfile_ProfileId_Union]*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PathProfile)
	}

	if _, ok := t.PathProfile[key]; ok {
		return fmt.Errorf("duplicate key for list PathProfile %v", key)
	}

	t.PathProfile[key] = v
	return nil
}

// NewPrimary creates a new entry in the Primary list of the
// NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) NewPrimary(PathName string) (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Primary == nil {
		t.Primary = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary)
	}

	key := PathName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Primary[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Primary", key)
	}

	t.Primary[key] = &NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary{
		PathName: &PathName,
	}

	return t.Primary[key], nil
}

// RenamePrimary renames an entry in the list Primary within
// the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) RenamePrimary(oldK, newK string) error {
	if _, ok := t.Primary[newK]; ok {
		return fmt.Errorf("key %v already exists in Primary", newK)
	}

	e, ok := t.Primary[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Primary", oldK)
	}
	e.PathName = &newK

	t.Primary[newK] = e
	delete(t.Primary, oldK)
	return nil
}

// GetOrCreatePrimary retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) GetOrCreatePrimary(PathName string) *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary {

	key := PathName

	if v, ok := t.Primary[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrimary(PathName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrimary got unexpected error: %v", err))
	}
	return v
}

// GetPrimary retrieves the value with the specified key from
// the Primary map field of NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) GetPrimary(PathName string) *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary {

	if t == nil {
		return nil
	}

	key := PathName

	if lm, ok := t.Primary[key]; ok {
		return lm
	}
	return nil
}

// DeletePrimary deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) DeletePrimary(PathName string) {
	key := PathName

	delete(t.Primary, key)
}

// AppendPrimary appends the supplied NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary struct to the
// list Primary of NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) AppendPrimary(v *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary) error {
	if v.PathName == nil {
		return fmt.Errorf("invalid nil key received for PathName")
	}

	key := *v.PathName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Primary == nil {
		t.Primary = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary)
	}

	if _, ok := t.Primary[key]; ok {
		return fmt.Errorf("duplicate key for list Primary %v", key)
	}

	t.Primary[key] = v
	return nil
}

// NewPrimaryP2MpInstance creates a new entry in the PrimaryP2MpInstance list of the
// NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) NewPrimaryP2MpInstance(InstanceName string) (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrimaryP2MpInstance == nil {
		t.PrimaryP2MpInstance = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance)
	}

	key := InstanceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PrimaryP2MpInstance[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PrimaryP2MpInstance", key)
	}

	t.PrimaryP2MpInstance[key] = &NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance{
		InstanceName: &InstanceName,
	}

	return t.PrimaryP2MpInstance[key], nil
}

// RenamePrimaryP2MpInstance renames an entry in the list PrimaryP2MpInstance within
// the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) RenamePrimaryP2MpInstance(oldK, newK string) error {
	if _, ok := t.PrimaryP2MpInstance[newK]; ok {
		return fmt.Errorf("key %v already exists in PrimaryP2MpInstance", newK)
	}

	e, ok := t.PrimaryP2MpInstance[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PrimaryP2MpInstance", oldK)
	}
	e.InstanceName = &newK

	t.PrimaryP2MpInstance[newK] = e
	delete(t.PrimaryP2MpInstance, oldK)
	return nil
}

// GetOrCreatePrimaryP2MpInstance retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) GetOrCreatePrimaryP2MpInstance(InstanceName string) *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance {

	key := InstanceName

	if v, ok := t.PrimaryP2MpInstance[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrimaryP2MpInstance(InstanceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrimaryP2MpInstance got unexpected error: %v", err))
	}
	return v
}

// GetPrimaryP2MpInstance retrieves the value with the specified key from
// the PrimaryP2MpInstance map field of NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) GetPrimaryP2MpInstance(InstanceName string) *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance {

	if t == nil {
		return nil
	}

	key := InstanceName

	if lm, ok := t.PrimaryP2MpInstance[key]; ok {
		return lm
	}
	return nil
}

// DeletePrimaryP2MpInstance deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) DeletePrimaryP2MpInstance(InstanceName string) {
	key := InstanceName

	delete(t.PrimaryP2MpInstance, key)
}

// AppendPrimaryP2MpInstance appends the supplied NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance struct to the
// list PrimaryP2MpInstance of NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) AppendPrimaryP2MpInstance(v *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance) error {
	if v.InstanceName == nil {
		return fmt.Errorf("invalid nil key received for InstanceName")
	}

	key := *v.InstanceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrimaryP2MpInstance == nil {
		t.PrimaryP2MpInstance = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance)
	}

	if _, ok := t.PrimaryP2MpInstance[key]; ok {
		return fmt.Errorf("duplicate key for list PrimaryP2MpInstance %v", key)
	}

	t.PrimaryP2MpInstance[key] = v
	return nil
}

// NewSecondary creates a new entry in the Secondary list of the
// NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) NewSecondary(PathName string) (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Secondary == nil {
		t.Secondary = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary)
	}

	key := PathName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Secondary[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Secondary", key)
	}

	t.Secondary[key] = &NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary{
		PathName: &PathName,
	}

	return t.Secondary[key], nil
}

// RenameSecondary renames an entry in the list Secondary within
// the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) RenameSecondary(oldK, newK string) error {
	if _, ok := t.Secondary[newK]; ok {
		return fmt.Errorf("key %v already exists in Secondary", newK)
	}

	e, ok := t.Secondary[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Secondary", oldK)
	}
	e.PathName = &newK

	t.Secondary[newK] = e
	delete(t.Secondary, oldK)
	return nil
}

// GetOrCreateSecondary retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) GetOrCreateSecondary(PathName string) *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary {

	key := PathName

	if v, ok := t.Secondary[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSecondary(PathName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSecondary got unexpected error: %v", err))
	}
	return v
}

// GetSecondary retrieves the value with the specified key from
// the Secondary map field of NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) GetSecondary(PathName string) *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary {

	if t == nil {
		return nil
	}

	key := PathName

	if lm, ok := t.Secondary[key]; ok {
		return lm
	}
	return nil
}

// DeleteSecondary deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) DeleteSecondary(PathName string) {
	key := PathName

	delete(t.Secondary, key)
}

// AppendSecondary appends the supplied NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary struct to the
// list Secondary of NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) AppendSecondary(v *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary) error {
	if v.PathName == nil {
		return fmt.Errorf("invalid nil key received for PathName")
	}

	key := *v.PathName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Secondary == nil {
		t.Secondary = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary)
	}

	if _, ok := t.Secondary[key]; ok {
		return fmt.Errorf("duplicate key for list Secondary %v", key)
	}

	t.Secondary[key] = v
	return nil
}

// GetOrCreateAutoBandwidth retrieves the value of the AutoBandwidth field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) GetOrCreateAutoBandwidth() *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth {
	if t.AutoBandwidth != nil {
		return t.AutoBandwidth
	}
	t.AutoBandwidth = &NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth{}
	return t.AutoBandwidth
}

// GetOrCreateBfd retrieves the value of the Bfd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) GetOrCreateBfd() *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Bfd {
	if t.Bfd != nil {
		return t.Bfd
	}
	t.Bfd = &NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Bfd{}
	return t.Bfd
}

// GetOrCreateClassForwarding retrieves the value of the ClassForwarding field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) GetOrCreateClassForwarding() *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_ClassForwarding {
	if t.ClassForwarding != nil {
		return t.ClassForwarding
	}
	t.ClassForwarding = &NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_ClassForwarding{}
	return t.ClassForwarding
}

// GetOrCreateCspf retrieves the value of the Cspf field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) GetOrCreateCspf() *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Cspf {
	if t.Cspf != nil {
		return t.Cspf
	}
	t.Cspf = &NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Cspf{}
	return t.Cspf
}

// GetOrCreateEgressStatistics retrieves the value of the EgressStatistics field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) GetOrCreateEgressStatistics() *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_EgressStatistics {
	if t.EgressStatistics != nil {
		return t.EgressStatistics
	}
	t.EgressStatistics = &NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_EgressStatistics{}
	return t.EgressStatistics
}

// GetOrCreateFastReroute retrieves the value of the FastReroute field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) GetOrCreateFastReroute() *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_FastReroute {
	if t.FastReroute != nil {
		return t.FastReroute
	}
	t.FastReroute = &NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_FastReroute{}
	return t.FastReroute
}

// GetOrCreateIgpShortcut retrieves the value of the IgpShortcut field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) GetOrCreateIgpShortcut() *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_IgpShortcut {
	if t.IgpShortcut != nil {
		return t.IgpShortcut
	}
	t.IgpShortcut = &NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_IgpShortcut{}
	return t.IgpShortcut
}

// GetOrCreateMaxSrLabels retrieves the value of the MaxSrLabels field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) GetOrCreateMaxSrLabels() *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_MaxSrLabels {
	if t.MaxSrLabels != nil {
		return t.MaxSrLabels
	}
	t.MaxSrLabels = &NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_MaxSrLabels{}
	return t.MaxSrLabels
}

// GetAutoBandwidth returns the value of the AutoBandwidth struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp. If the receiver or the field AutoBandwidth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) GetAutoBandwidth() *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth {
	if t != nil && t.AutoBandwidth != nil {
		return t.AutoBandwidth
	}
	return nil
}

// GetBfd returns the value of the Bfd struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp. If the receiver or the field Bfd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) GetBfd() *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Bfd {
	if t != nil && t.Bfd != nil {
		return t.Bfd
	}
	return nil
}

// GetClassForwarding returns the value of the ClassForwarding struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp. If the receiver or the field ClassForwarding is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) GetClassForwarding() *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_ClassForwarding {
	if t != nil && t.ClassForwarding != nil {
		return t.ClassForwarding
	}
	return nil
}

// GetCspf returns the value of the Cspf struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp. If the receiver or the field Cspf is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) GetCspf() *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Cspf {
	if t != nil && t.Cspf != nil {
		return t.Cspf
	}
	return nil
}

// GetEgressStatistics returns the value of the EgressStatistics struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp. If the receiver or the field EgressStatistics is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) GetEgressStatistics() *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_EgressStatistics {
	if t != nil && t.EgressStatistics != nil {
		return t.EgressStatistics
	}
	return nil
}

// GetFastReroute returns the value of the FastReroute struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp. If the receiver or the field FastReroute is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) GetFastReroute() *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_FastReroute {
	if t != nil && t.FastReroute != nil {
		return t.FastReroute
	}
	return nil
}

// GetIgpShortcut returns the value of the IgpShortcut struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp. If the receiver or the field IgpShortcut is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) GetIgpShortcut() *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_IgpShortcut {
	if t != nil && t.IgpShortcut != nil {
		return t.IgpShortcut
	}
	return nil
}

// GetMaxSrLabels returns the value of the MaxSrLabels struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp. If the receiver or the field MaxSrLabels is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) GetMaxSrLabels() *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_MaxSrLabels {
	if t != nil && t.MaxSrLabels != nil {
		return t.MaxSrLabels
	}
	return nil
}

// GetAdaptive retrieves the value of the leaf Adaptive from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Adaptive is set, it can
// safely use t.GetAdaptive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Adaptive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) GetAdaptive() bool {
	if t == nil || t.Adaptive == nil {
		return true
	}
	return *t.Adaptive
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAdspec retrieves the value of the leaf Adspec from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Adspec is set, it can
// safely use t.GetAdspec() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Adspec == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) GetAdspec() bool {
	if t == nil || t.Adspec == nil {
		return false
	}
	return *t.Adspec
}

// GetBgpShortcut retrieves the value of the leaf BgpShortcut from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BgpShortcut is set, it can
// safely use t.GetBgpShortcut() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BgpShortcut == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) GetBgpShortcut() bool {
	if t == nil || t.BgpShortcut == nil {
		return false
	}
	return *t.BgpShortcut
}

// GetBgpTransportTunnel retrieves the value of the leaf BgpTransportTunnel from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BgpTransportTunnel is set, it can
// safely use t.GetBgpTransportTunnel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BgpTransportTunnel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) GetBgpTransportTunnel() bool {
	if t == nil || t.BgpTransportTunnel == nil {
		return false
	}
	return *t.BgpTransportTunnel
}

// GetClassType retrieves the value of the leaf ClassType from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClassType is set, it can
// safely use t.GetClassType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClassType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) GetClassType() int32 {
	if t == nil || t.ClassType == nil {
		return 0
	}
	return *t.ClassType
}

// GetEntropyLabel retrieves the value of the leaf EntropyLabel from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntropyLabel is set, it can
// safely use t.GetEntropyLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntropyLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) GetEntropyLabel() E_NokiaTypesSros_BoolWithInherit {
	if t == nil || t.EntropyLabel == 0 {
		return 0
	}
	return t.EntropyLabel
}

// GetExcludeAdminGroup retrieves the value of the leaf ExcludeAdminGroup from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExcludeAdminGroup is set, it can
// safely use t.GetExcludeAdminGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExcludeAdminGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) GetExcludeAdminGroup() []string {
	if t == nil || t.ExcludeAdminGroup == nil {
		return nil
	}
	return t.ExcludeAdminGroup
}

// GetExcludeNode retrieves the value of the leaf ExcludeNode from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExcludeNode is set, it can
// safely use t.GetExcludeNode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExcludeNode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) GetExcludeNode() string {
	if t == nil || t.ExcludeNode == nil {
		return ""
	}
	return *t.ExcludeNode
}

// GetFallbackPathComputationMethod retrieves the value of the leaf FallbackPathComputationMethod from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FallbackPathComputationMethod is set, it can
// safely use t.GetFallbackPathComputationMethod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FallbackPathComputationMethod == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) GetFallbackPathComputationMethod() E_NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_FallbackPathComputationMethod {
	if t == nil || t.FallbackPathComputationMethod == 0 {
		return 0
	}
	return t.FallbackPathComputationMethod
}

// GetFrom retrieves the value of the leaf From from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if From is set, it can
// safely use t.GetFrom() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.From == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) GetFrom() string {
	if t == nil || t.From == nil {
		return ""
	}
	return *t.From
}

// GetHopLimit retrieves the value of the leaf HopLimit from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HopLimit is set, it can
// safely use t.GetHopLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HopLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) GetHopLimit() uint32 {
	if t == nil || t.HopLimit == nil {
		return 255
	}
	return *t.HopLimit
}

// GetIncludeAdminGroup retrieves the value of the leaf IncludeAdminGroup from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IncludeAdminGroup is set, it can
// safely use t.GetIncludeAdminGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IncludeAdminGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) GetIncludeAdminGroup() []string {
	if t == nil || t.IncludeAdminGroup == nil {
		return nil
	}
	return t.IncludeAdminGroup
}

// GetLabelStackReduction retrieves the value of the leaf LabelStackReduction from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelStackReduction is set, it can
// safely use t.GetLabelStackReduction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelStackReduction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) GetLabelStackReduction() bool {
	if t == nil || t.LabelStackReduction == nil {
		return false
	}
	return *t.LabelStackReduction
}

// GetLdpOverRsvp retrieves the value of the leaf LdpOverRsvp from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LdpOverRsvp is set, it can
// safely use t.GetLdpOverRsvp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LdpOverRsvp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) GetLdpOverRsvp() bool {
	if t == nil || t.LdpOverRsvp == nil {
		return false
	}
	return *t.LdpOverRsvp
}

// GetLeastFill retrieves the value of the leaf LeastFill from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LeastFill is set, it can
// safely use t.GetLeastFill() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LeastFill == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) GetLeastFill() bool {
	if t == nil || t.LeastFill == nil {
		return false
	}
	return *t.LeastFill
}

// GetLoadBalancingWeight retrieves the value of the leaf LoadBalancingWeight from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoadBalancingWeight is set, it can
// safely use t.GetLoadBalancingWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoadBalancingWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) GetLoadBalancingWeight() uint32 {
	if t == nil || t.LoadBalancingWeight == nil {
		return 0
	}
	return *t.LoadBalancingWeight
}

// GetLocalSrProtection retrieves the value of the leaf LocalSrProtection from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalSrProtection is set, it can
// safely use t.GetLocalSrProtection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalSrProtection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) GetLocalSrProtection() E_NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_LocalSrProtection {
	if t == nil || t.LocalSrProtection == 0 {
		return NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_LocalSrProtection_preferred
	}
	return t.LocalSrProtection
}

// GetLspName retrieves the value of the leaf LspName from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspName is set, it can
// safely use t.GetLspName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) GetLspName() string {
	if t == nil || t.LspName == nil {
		return ""
	}
	return *t.LspName
}

// GetLspSelfPing retrieves the value of the leaf LspSelfPing from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspSelfPing is set, it can
// safely use t.GetLspSelfPing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspSelfPing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) GetLspSelfPing() E_NokiaTypesSros_BoolWithInherit {
	if t == nil || t.LspSelfPing == 0 {
		return 0
	}
	return t.LspSelfPing
}

// GetMainCtRetryLimit retrieves the value of the leaf MainCtRetryLimit from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MainCtRetryLimit is set, it can
// safely use t.GetMainCtRetryLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MainCtRetryLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) GetMainCtRetryLimit() uint32 {
	if t == nil || t.MainCtRetryLimit == nil {
		return 0
	}
	return *t.MainCtRetryLimit
}

// GetMetric retrieves the value of the leaf Metric from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Metric is set, it can
// safely use t.GetMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Metric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) GetMetric() uint32 {
	if t == nil || t.Metric == nil {
		return 0
	}
	return *t.Metric
}

// GetMetricType retrieves the value of the leaf MetricType from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MetricType is set, it can
// safely use t.GetMetricType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MetricType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) GetMetricType() E_NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_MetricType {
	if t == nil || t.MetricType == 0 {
		return NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_MetricType_igp
	}
	return t.MetricType
}

// GetOverrideTunnelElc retrieves the value of the leaf OverrideTunnelElc from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OverrideTunnelElc is set, it can
// safely use t.GetOverrideTunnelElc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OverrideTunnelElc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) GetOverrideTunnelElc() bool {
	if t == nil || t.OverrideTunnelElc == nil {
		return false
	}
	return *t.OverrideTunnelElc
}

// GetP2MpId retrieves the value of the leaf P2MpId from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if P2MpId is set, it can
// safely use t.GetP2MpId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.P2MpId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) GetP2MpId() uint32 {
	if t == nil || t.P2MpId == nil {
		return 0
	}
	return *t.P2MpId
}

// GetPathComputationMethod retrieves the value of the leaf PathComputationMethod from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathComputationMethod is set, it can
// safely use t.GetPathComputationMethod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathComputationMethod == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) GetPathComputationMethod() E_NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PathComputationMethod {
	if t == nil || t.PathComputationMethod == 0 {
		return 0
	}
	return t.PathComputationMethod
}

// GetPceComputation retrieves the value of the leaf PceComputation from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PceComputation is set, it can
// safely use t.GetPceComputation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PceComputation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) GetPceComputation() bool {
	if t == nil || t.PceComputation == nil {
		return false
	}
	return *t.PceComputation
}

// GetPceControl retrieves the value of the leaf PceControl from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PceControl is set, it can
// safely use t.GetPceControl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PceControl == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) GetPceControl() bool {
	if t == nil || t.PceControl == nil {
		return false
	}
	return *t.PceControl
}

// GetPceReport retrieves the value of the leaf PceReport from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PceReport is set, it can
// safely use t.GetPceReport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PceReport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) GetPceReport() E_NokiaTypesSros_BoolWithInherit {
	if t == nil || t.PceReport == 0 {
		return 0
	}
	return t.PceReport
}

// GetPreferTransportFrr retrieves the value of the leaf PreferTransportFrr from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreferTransportFrr is set, it can
// safely use t.GetPreferTransportFrr() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreferTransportFrr == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) GetPreferTransportFrr() bool {
	if t == nil || t.PreferTransportFrr == nil {
		return false
	}
	return *t.PreferTransportFrr
}

// GetPropagateAdminGroup retrieves the value of the leaf PropagateAdminGroup from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PropagateAdminGroup is set, it can
// safely use t.GetPropagateAdminGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PropagateAdminGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) GetPropagateAdminGroup() bool {
	if t == nil || t.PropagateAdminGroup == nil {
		return false
	}
	return *t.PropagateAdminGroup
}

// GetRetryLimit retrieves the value of the leaf RetryLimit from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetryLimit is set, it can
// safely use t.GetRetryLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetryLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) GetRetryLimit() uint32 {
	if t == nil || t.RetryLimit == nil {
		return 0
	}
	return *t.RetryLimit
}

// GetRetryTimer retrieves the value of the leaf RetryTimer from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetryTimer is set, it can
// safely use t.GetRetryTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetryTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) GetRetryTimer() uint32 {
	if t == nil || t.RetryTimer == nil {
		return 30
	}
	return *t.RetryTimer
}

// GetRevertTimer retrieves the value of the leaf RevertTimer from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RevertTimer is set, it can
// safely use t.GetRevertTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RevertTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) GetRevertTimer() uint32 {
	if t == nil || t.RevertTimer == nil {
		return 0
	}
	return *t.RevertTimer
}

// GetRsvpResvStyle retrieves the value of the leaf RsvpResvStyle from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RsvpResvStyle is set, it can
// safely use t.GetRsvpResvStyle() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RsvpResvStyle == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) GetRsvpResvStyle() E_NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_RsvpResvStyle {
	if t == nil || t.RsvpResvStyle == 0 {
		return NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_RsvpResvStyle_se
	}
	return t.RsvpResvStyle
}

// GetSoftPreemption retrieves the value of the leaf SoftPreemption from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SoftPreemption is set, it can
// safely use t.GetSoftPreemption() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SoftPreemption == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) GetSoftPreemption() bool {
	if t == nil || t.SoftPreemption == nil {
		return false
	}
	return *t.SoftPreemption
}

// GetTo retrieves the value of the leaf To from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if To is set, it can
// safely use t.GetTo() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.To == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) GetTo() string {
	if t == nil || t.To == nil {
		return ""
	}
	return *t.To
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) GetType() E_NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Type {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// GetVprnAutoBind retrieves the value of the leaf VprnAutoBind from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VprnAutoBind is set, it can
// safely use t.GetVprnAutoBind() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VprnAutoBind == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) GetVprnAutoBind() bool {
	if t == nil || t.VprnAutoBind == nil {
		return false
	}
	return *t.VprnAutoBind
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Adaptive == nil {
		var v bool = true
		t.Adaptive = &v
	}
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Adspec == nil {
		var v bool = false
		t.Adspec = &v
	}
	if t.ClassType == nil {
		var v int32 = 0
		t.ClassType = &v
	}
	if t.HopLimit == nil {
		var v uint32 = 255
		t.HopLimit = &v
	}
	if t.LabelStackReduction == nil {
		var v bool = false
		t.LabelStackReduction = &v
	}
	if t.LeastFill == nil {
		var v bool = false
		t.LeastFill = &v
	}
	if t.LocalSrProtection == 0 {
		t.LocalSrProtection = NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_LocalSrProtection_preferred
	}
	if t.MetricType == 0 {
		t.MetricType = NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_MetricType_igp
	}
	if t.OverrideTunnelElc == nil {
		var v bool = false
		t.OverrideTunnelElc = &v
	}
	if t.PceComputation == nil {
		var v bool = false
		t.PceComputation = &v
	}
	if t.PceControl == nil {
		var v bool = false
		t.PceControl = &v
	}
	if t.PreferTransportFrr == nil {
		var v bool = false
		t.PreferTransportFrr = &v
	}
	if t.PropagateAdminGroup == nil {
		var v bool = false
		t.PropagateAdminGroup = &v
	}
	if t.RetryTimer == nil {
		var v uint32 = 30
		t.RetryTimer = &v
	}
	if t.RsvpResvStyle == 0 {
		t.RsvpResvStyle = NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_RsvpResvStyle_se
	}
	t.AutoBandwidth.PopulateDefaults()
	t.Bfd.PopulateDefaults()
	t.ClassForwarding.PopulateDefaults()
	t.Cspf.PopulateDefaults()
	t.EgressStatistics.PopulateDefaults()
	t.FastReroute.PopulateDefaults()
	t.IgpShortcut.PopulateDefaults()
	t.MaxSrLabels.PopulateDefaults()
	for _, e := range t.AdminTag {
		e.PopulateDefaults()
	}
	for _, e := range t.PathProfile {
		e.PopulateDefaults()
	}
	for _, e := range t.Primary {
		e.PopulateDefaults()
	}
	for _, e := range t.PrimaryP2MpInstance {
		e.PopulateDefaults()
	}
	for _, e := range t.Secondary {
		e.PopulateDefaults()
	}
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.LspName == nil {
		return nil, fmt.Errorf("nil value for key LspName")
	}

	return map[string]interface{}{
		"lsp-name": *t.LspName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_LspSelfPing represents the /nokia-conf/configure/groups/group/router/mpls/lsp-self-ping YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_LspSelfPing struct {
	Interval      *uint32                                                                  `path:"interval" module:"nokia-conf"`
	RsvpTe        *bool                                                                    `path:"rsvp-te" module:"nokia-conf"`
	Timeout       *uint32                                                                  `path:"timeout" module:"nokia-conf"`
	TimeoutAction E_NokiaConf_Configure_Groups_Group_Router_Mpls_LspSelfPing_TimeoutAction `path:"timeout-action" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_LspSelfPing implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_LspSelfPing) IsYANGGoStruct() {}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspSelfPing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspSelfPing) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 1
	}
	return *t.Interval
}

// GetRsvpTe retrieves the value of the leaf RsvpTe from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspSelfPing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RsvpTe is set, it can
// safely use t.GetRsvpTe() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RsvpTe == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspSelfPing) GetRsvpTe() bool {
	if t == nil || t.RsvpTe == nil {
		return false
	}
	return *t.RsvpTe
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspSelfPing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspSelfPing) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 300
	}
	return *t.Timeout
}

// GetTimeoutAction retrieves the value of the leaf TimeoutAction from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspSelfPing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TimeoutAction is set, it can
// safely use t.GetTimeoutAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TimeoutAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspSelfPing) GetTimeoutAction() E_NokiaConf_Configure_Groups_Group_Router_Mpls_LspSelfPing_TimeoutAction {
	if t == nil || t.TimeoutAction == 0 {
		return NokiaConf_Configure_Groups_Group_Router_Mpls_LspSelfPing_TimeoutAction_retry
	}
	return t.TimeoutAction
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_LspSelfPing
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspSelfPing) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Interval == nil {
		var v uint32 = 1
		t.Interval = &v
	}
	if t.RsvpTe == nil {
		var v bool = false
		t.RsvpTe = &v
	}
	if t.Timeout == nil {
		var v uint32 = 300
		t.Timeout = &v
	}
	if t.TimeoutAction == 0 {
		t.TimeoutAction = NokiaConf_Configure_Groups_Group_Router_Mpls_LspSelfPing_TimeoutAction_retry
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspSelfPing) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_LspSelfPing"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspSelfPing) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspSelfPing) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_LspSelfPing.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_LspSelfPing) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate represents the /nokia-conf/configure/groups/group/router/mpls/lsp-template YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate struct {
	Adaptive                      *bool                                                                                                                                                          `path:"adaptive" module:"nokia-conf"`
	AdminState                    E_NokiaTypesSros_AdminState                                                                                                                                    `path:"admin-state" module:"nokia-conf"`
	AdminTag                      map[string]*NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AdminTag                                                                                  `path:"admin-tag" module:"nokia-conf"`
	Adspec                        *bool                                                                                                                                                          `path:"adspec" module:"nokia-conf"`
	AutoBandwidth                 *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth                                                                                        `path:"auto-bandwidth" module:"nokia-conf" yangPresence:"true"`
	BackupClassType               *int32                                                                                                                                                         `path:"backup-class-type" module:"nokia-conf"`
	Bandwidth                     *uint32                                                                                                                                                        `path:"bandwidth" module:"nokia-conf"`
	Bfd                           *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Bfd                                                                                                  `path:"bfd" module:"nokia-conf"`
	BgpShortcut                   *bool                                                                                                                                                          `path:"bgp-shortcut" module:"nokia-conf"`
	BgpTransportTunnel            *bool                                                                                                                                                          `path:"bgp-transport-tunnel" module:"nokia-conf"`
	ClassForwarding               *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_ClassForwarding                                                                                      `path:"class-forwarding" module:"nokia-conf" yangPresence:"true"`
	ClassType                     *int32                                                                                                                                                         `path:"class-type" module:"nokia-conf"`
	Cspf                          *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Cspf                                                                                                 `path:"cspf" module:"nokia-conf"`
	DefaultPath                   *string                                                                                                                                                        `path:"default-path" module:"nokia-conf"`
	EgressStatistics              *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_EgressStatistics                                                                                     `path:"egress-statistics" module:"nokia-conf" yangPresence:"true"`
	EntropyLabel                  E_NokiaTypesSros_BoolWithInherit                                                                                                                               `path:"entropy-label" module:"nokia-conf"`
	ExcludeAdminGroup             []string                                                                                                                                                       `path:"exclude-admin-group" module:"nokia-conf"`
	FallbackPathComputationMethod E_NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_FallbackPathComputationMethod                                                                       `path:"fallback-path-computation-method" module:"nokia-conf"`
	Family                        E_NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Family                                                                                              `path:"family" module:"nokia-conf"`
	FastReroute                   *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_FastReroute                                                                                          `path:"fast-reroute" module:"nokia-conf" yangPresence:"true"`
	From                          *string                                                                                                                                                        `path:"from" module:"nokia-conf"`
	HopLimit                      *uint16                                                                                                                                                        `path:"hop-limit" module:"nokia-conf"`
	IgpShortcut                   *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_IgpShortcut                                                                                          `path:"igp-shortcut" module:"nokia-conf"`
	IncludeAdminGroup             []string                                                                                                                                                       `path:"include-admin-group" module:"nokia-conf"`
	LabelStackReduction           *bool                                                                                                                                                          `path:"label-stack-reduction" module:"nokia-conf"`
	LdpOverRsvp                   *bool                                                                                                                                                          `path:"ldp-over-rsvp" module:"nokia-conf"`
	LeastFill                     *bool                                                                                                                                                          `path:"least-fill" module:"nokia-conf"`
	LoadBalancingWeight           *uint32                                                                                                                                                        `path:"load-balancing-weight" module:"nokia-conf"`
	LocalSrProtection             E_NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_LocalSrProtection                                                                                   `path:"local-sr-protection" module:"nokia-conf"`
	LspSelfPing                   E_NokiaTypesSros_BoolWithInherit                                                                                                                               `path:"lsp-self-ping" module:"nokia-conf"`
	MainCtRetryLimit              *uint32                                                                                                                                                        `path:"main-ct-retry-limit" module:"nokia-conf"`
	MaxSrLabels                   *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_MaxSrLabels                                                                                          `path:"max-sr-labels" module:"nokia-conf"`
	Metric                        *uint32                                                                                                                                                        `path:"metric" module:"nokia-conf"`
	MetricType                    E_NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_MetricType                                                                                          `path:"metric-type" module:"nokia-conf"`
	OverrideTunnelElc             *bool                                                                                                                                                          `path:"override-tunnel-elc" module:"nokia-conf"`
	PathComputationMethod         E_NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_PathComputationMethod                                                                               `path:"path-computation-method" module:"nokia-conf"`
	PathProfile                   map[NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_PathProfile_ProfileId_Union]*NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_PathProfile `path:"path-profile" module:"nokia-conf"`
	PceControl                    *bool                                                                                                                                                          `path:"pce-control" module:"nokia-conf"`
	PceReport                     E_NokiaTypesSros_BoolWithInherit                                                                                                                               `path:"pce-report" module:"nokia-conf"`
	PreferTransportFrr            *bool                                                                                                                                                          `path:"prefer-transport-frr" module:"nokia-conf"`
	Priority                      *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Priority                                                                                             `path:"priority" module:"nokia-conf"`
	PropagateAdminGroup           *bool                                                                                                                                                          `path:"propagate-admin-group" module:"nokia-conf"`
	Record                        *bool                                                                                                                                                          `path:"record" module:"nokia-conf"`
	RecordLabel                   *bool                                                                                                                                                          `path:"record-label" module:"nokia-conf"`
	RetryLimit                    *uint32                                                                                                                                                        `path:"retry-limit" module:"nokia-conf"`
	RetryTimer                    *uint32                                                                                                                                                        `path:"retry-timer" module:"nokia-conf"`
	SoftPreemption                *bool                                                                                                                                                          `path:"soft-preemption" module:"nokia-conf"`
	TemplateId                    NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_TemplateId_Union                                                                                      `path:"template-id" module:"nokia-conf"`
	TemplateName                  *string                                                                                                                                                        `path:"template-name" module:"nokia-conf"`
	Type                          E_NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Type                                                                                                `path:"type" module:"nokia-conf"`
	VprnAutoBind                  *bool                                                                                                                                                          `path:"vprn-auto-bind" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) IsYANGGoStruct() {}

// NewAdminTag creates a new entry in the AdminTag list of the
// NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) NewAdminTag(Name string) (*NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AdminTag, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AdminTag == nil {
		t.AdminTag = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AdminTag)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AdminTag[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AdminTag", key)
	}

	t.AdminTag[key] = &NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AdminTag{
		Name: &Name,
	}

	return t.AdminTag[key], nil
}

// RenameAdminTag renames an entry in the list AdminTag within
// the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) RenameAdminTag(oldK, newK string) error {
	if _, ok := t.AdminTag[newK]; ok {
		return fmt.Errorf("key %v already exists in AdminTag", newK)
	}

	e, ok := t.AdminTag[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AdminTag", oldK)
	}
	e.Name = &newK

	t.AdminTag[newK] = e
	delete(t.AdminTag, oldK)
	return nil
}

// GetOrCreateAdminTag retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) GetOrCreateAdminTag(Name string) *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AdminTag {

	key := Name

	if v, ok := t.AdminTag[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAdminTag(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAdminTag got unexpected error: %v", err))
	}
	return v
}

// GetAdminTag retrieves the value with the specified key from
// the AdminTag map field of NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) GetAdminTag(Name string) *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AdminTag {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.AdminTag[key]; ok {
		return lm
	}
	return nil
}

// DeleteAdminTag deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) DeleteAdminTag(Name string) {
	key := Name

	delete(t.AdminTag, key)
}

// AppendAdminTag appends the supplied NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AdminTag struct to the
// list AdminTag of NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AdminTag already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) AppendAdminTag(v *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AdminTag) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AdminTag == nil {
		t.AdminTag = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AdminTag)
	}

	if _, ok := t.AdminTag[key]; ok {
		return fmt.Errorf("duplicate key for list AdminTag %v", key)
	}

	t.AdminTag[key] = v
	return nil
}

// NewPathProfile creates a new entry in the PathProfile list of the
// NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) NewPathProfile(ProfileId NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_PathProfile_ProfileId_Union) (*NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_PathProfile, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PathProfile == nil {
		t.PathProfile = make(map[NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_PathProfile_ProfileId_Union]*NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_PathProfile)
	}

	key := ProfileId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PathProfile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PathProfile", key)
	}

	t.PathProfile[key] = &NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_PathProfile{
		ProfileId: ProfileId,
	}

	return t.PathProfile[key], nil
}

// RenamePathProfile renames an entry in the list PathProfile within
// the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) RenamePathProfile(oldK, newK NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_PathProfile_ProfileId_Union) error {
	if _, ok := t.PathProfile[newK]; ok {
		return fmt.Errorf("key %v already exists in PathProfile", newK)
	}

	e, ok := t.PathProfile[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PathProfile", oldK)
	}
	e.ProfileId = newK

	t.PathProfile[newK] = e
	delete(t.PathProfile, oldK)
	return nil
}

// GetOrCreatePathProfile retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) GetOrCreatePathProfile(ProfileId NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_PathProfile_ProfileId_Union) *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_PathProfile {

	key := ProfileId

	if v, ok := t.PathProfile[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPathProfile(ProfileId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePathProfile got unexpected error: %v", err))
	}
	return v
}

// GetPathProfile retrieves the value with the specified key from
// the PathProfile map field of NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) GetPathProfile(ProfileId NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_PathProfile_ProfileId_Union) *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_PathProfile {

	if t == nil {
		return nil
	}

	key := ProfileId

	if lm, ok := t.PathProfile[key]; ok {
		return lm
	}
	return nil
}

// DeletePathProfile deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) DeletePathProfile(ProfileId NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_PathProfile_ProfileId_Union) {
	key := ProfileId

	delete(t.PathProfile, key)
}

// AppendPathProfile appends the supplied NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_PathProfile struct to the
// list PathProfile of NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_PathProfile already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) AppendPathProfile(v *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_PathProfile) error {
	key := v.ProfileId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PathProfile == nil {
		t.PathProfile = make(map[NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_PathProfile_ProfileId_Union]*NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_PathProfile)
	}

	if _, ok := t.PathProfile[key]; ok {
		return fmt.Errorf("duplicate key for list PathProfile %v", key)
	}

	t.PathProfile[key] = v
	return nil
}

// GetOrCreateAutoBandwidth retrieves the value of the AutoBandwidth field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) GetOrCreateAutoBandwidth() *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth {
	if t.AutoBandwidth != nil {
		return t.AutoBandwidth
	}
	t.AutoBandwidth = &NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth{}
	return t.AutoBandwidth
}

// GetOrCreateBfd retrieves the value of the Bfd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) GetOrCreateBfd() *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Bfd {
	if t.Bfd != nil {
		return t.Bfd
	}
	t.Bfd = &NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Bfd{}
	return t.Bfd
}

// GetOrCreateClassForwarding retrieves the value of the ClassForwarding field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) GetOrCreateClassForwarding() *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_ClassForwarding {
	if t.ClassForwarding != nil {
		return t.ClassForwarding
	}
	t.ClassForwarding = &NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_ClassForwarding{}
	return t.ClassForwarding
}

// GetOrCreateCspf retrieves the value of the Cspf field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) GetOrCreateCspf() *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Cspf {
	if t.Cspf != nil {
		return t.Cspf
	}
	t.Cspf = &NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Cspf{}
	return t.Cspf
}

// GetOrCreateEgressStatistics retrieves the value of the EgressStatistics field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) GetOrCreateEgressStatistics() *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_EgressStatistics {
	if t.EgressStatistics != nil {
		return t.EgressStatistics
	}
	t.EgressStatistics = &NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_EgressStatistics{}
	return t.EgressStatistics
}

// GetOrCreateFastReroute retrieves the value of the FastReroute field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) GetOrCreateFastReroute() *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_FastReroute {
	if t.FastReroute != nil {
		return t.FastReroute
	}
	t.FastReroute = &NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_FastReroute{}
	return t.FastReroute
}

// GetOrCreateIgpShortcut retrieves the value of the IgpShortcut field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) GetOrCreateIgpShortcut() *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_IgpShortcut {
	if t.IgpShortcut != nil {
		return t.IgpShortcut
	}
	t.IgpShortcut = &NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_IgpShortcut{}
	return t.IgpShortcut
}

// GetOrCreateMaxSrLabels retrieves the value of the MaxSrLabels field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) GetOrCreateMaxSrLabels() *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_MaxSrLabels {
	if t.MaxSrLabels != nil {
		return t.MaxSrLabels
	}
	t.MaxSrLabels = &NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_MaxSrLabels{}
	return t.MaxSrLabels
}

// GetOrCreatePriority retrieves the value of the Priority field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) GetOrCreatePriority() *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Priority {
	if t.Priority != nil {
		return t.Priority
	}
	t.Priority = &NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Priority{}
	return t.Priority
}

// GetAutoBandwidth returns the value of the AutoBandwidth struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate. If the receiver or the field AutoBandwidth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) GetAutoBandwidth() *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth {
	if t != nil && t.AutoBandwidth != nil {
		return t.AutoBandwidth
	}
	return nil
}

// GetBfd returns the value of the Bfd struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate. If the receiver or the field Bfd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) GetBfd() *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Bfd {
	if t != nil && t.Bfd != nil {
		return t.Bfd
	}
	return nil
}

// GetClassForwarding returns the value of the ClassForwarding struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate. If the receiver or the field ClassForwarding is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) GetClassForwarding() *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_ClassForwarding {
	if t != nil && t.ClassForwarding != nil {
		return t.ClassForwarding
	}
	return nil
}

// GetCspf returns the value of the Cspf struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate. If the receiver or the field Cspf is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) GetCspf() *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Cspf {
	if t != nil && t.Cspf != nil {
		return t.Cspf
	}
	return nil
}

// GetEgressStatistics returns the value of the EgressStatistics struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate. If the receiver or the field EgressStatistics is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) GetEgressStatistics() *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_EgressStatistics {
	if t != nil && t.EgressStatistics != nil {
		return t.EgressStatistics
	}
	return nil
}

// GetFastReroute returns the value of the FastReroute struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate. If the receiver or the field FastReroute is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) GetFastReroute() *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_FastReroute {
	if t != nil && t.FastReroute != nil {
		return t.FastReroute
	}
	return nil
}

// GetIgpShortcut returns the value of the IgpShortcut struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate. If the receiver or the field IgpShortcut is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) GetIgpShortcut() *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_IgpShortcut {
	if t != nil && t.IgpShortcut != nil {
		return t.IgpShortcut
	}
	return nil
}

// GetMaxSrLabels returns the value of the MaxSrLabels struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate. If the receiver or the field MaxSrLabels is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) GetMaxSrLabels() *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_MaxSrLabels {
	if t != nil && t.MaxSrLabels != nil {
		return t.MaxSrLabels
	}
	return nil
}

// GetPriority returns the value of the Priority struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate. If the receiver or the field Priority is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) GetPriority() *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Priority {
	if t != nil && t.Priority != nil {
		return t.Priority
	}
	return nil
}

// GetAdaptive retrieves the value of the leaf Adaptive from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Adaptive is set, it can
// safely use t.GetAdaptive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Adaptive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) GetAdaptive() bool {
	if t == nil || t.Adaptive == nil {
		return true
	}
	return *t.Adaptive
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAdspec retrieves the value of the leaf Adspec from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Adspec is set, it can
// safely use t.GetAdspec() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Adspec == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) GetAdspec() bool {
	if t == nil || t.Adspec == nil {
		return false
	}
	return *t.Adspec
}

// GetBackupClassType retrieves the value of the leaf BackupClassType from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BackupClassType is set, it can
// safely use t.GetBackupClassType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BackupClassType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) GetBackupClassType() int32 {
	if t == nil || t.BackupClassType == nil {
		return 0
	}
	return *t.BackupClassType
}

// GetBandwidth retrieves the value of the leaf Bandwidth from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bandwidth is set, it can
// safely use t.GetBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) GetBandwidth() uint32 {
	if t == nil || t.Bandwidth == nil {
		return 0
	}
	return *t.Bandwidth
}

// GetBgpShortcut retrieves the value of the leaf BgpShortcut from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BgpShortcut is set, it can
// safely use t.GetBgpShortcut() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BgpShortcut == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) GetBgpShortcut() bool {
	if t == nil || t.BgpShortcut == nil {
		return false
	}
	return *t.BgpShortcut
}

// GetBgpTransportTunnel retrieves the value of the leaf BgpTransportTunnel from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BgpTransportTunnel is set, it can
// safely use t.GetBgpTransportTunnel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BgpTransportTunnel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) GetBgpTransportTunnel() bool {
	if t == nil || t.BgpTransportTunnel == nil {
		return true
	}
	return *t.BgpTransportTunnel
}

// GetClassType retrieves the value of the leaf ClassType from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClassType is set, it can
// safely use t.GetClassType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClassType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) GetClassType() int32 {
	if t == nil || t.ClassType == nil {
		return 0
	}
	return *t.ClassType
}

// GetDefaultPath retrieves the value of the leaf DefaultPath from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultPath is set, it can
// safely use t.GetDefaultPath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultPath == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) GetDefaultPath() string {
	if t == nil || t.DefaultPath == nil {
		return ""
	}
	return *t.DefaultPath
}

// GetEntropyLabel retrieves the value of the leaf EntropyLabel from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntropyLabel is set, it can
// safely use t.GetEntropyLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntropyLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) GetEntropyLabel() E_NokiaTypesSros_BoolWithInherit {
	if t == nil || t.EntropyLabel == 0 {
		return 0
	}
	return t.EntropyLabel
}

// GetExcludeAdminGroup retrieves the value of the leaf ExcludeAdminGroup from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExcludeAdminGroup is set, it can
// safely use t.GetExcludeAdminGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExcludeAdminGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) GetExcludeAdminGroup() []string {
	if t == nil || t.ExcludeAdminGroup == nil {
		return nil
	}
	return t.ExcludeAdminGroup
}

// GetFallbackPathComputationMethod retrieves the value of the leaf FallbackPathComputationMethod from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FallbackPathComputationMethod is set, it can
// safely use t.GetFallbackPathComputationMethod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FallbackPathComputationMethod == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) GetFallbackPathComputationMethod() E_NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_FallbackPathComputationMethod {
	if t == nil || t.FallbackPathComputationMethod == 0 {
		return 0
	}
	return t.FallbackPathComputationMethod
}

// GetFamily retrieves the value of the leaf Family from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Family is set, it can
// safely use t.GetFamily() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Family == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) GetFamily() E_NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Family {
	if t == nil || t.Family == 0 {
		return NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Family_ipv4
	}
	return t.Family
}

// GetFrom retrieves the value of the leaf From from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if From is set, it can
// safely use t.GetFrom() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.From == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) GetFrom() string {
	if t == nil || t.From == nil {
		return ""
	}
	return *t.From
}

// GetHopLimit retrieves the value of the leaf HopLimit from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HopLimit is set, it can
// safely use t.GetHopLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HopLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) GetHopLimit() uint16 {
	if t == nil || t.HopLimit == nil {
		return 0
	}
	return *t.HopLimit
}

// GetIncludeAdminGroup retrieves the value of the leaf IncludeAdminGroup from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IncludeAdminGroup is set, it can
// safely use t.GetIncludeAdminGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IncludeAdminGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) GetIncludeAdminGroup() []string {
	if t == nil || t.IncludeAdminGroup == nil {
		return nil
	}
	return t.IncludeAdminGroup
}

// GetLabelStackReduction retrieves the value of the leaf LabelStackReduction from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelStackReduction is set, it can
// safely use t.GetLabelStackReduction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelStackReduction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) GetLabelStackReduction() bool {
	if t == nil || t.LabelStackReduction == nil {
		return false
	}
	return *t.LabelStackReduction
}

// GetLdpOverRsvp retrieves the value of the leaf LdpOverRsvp from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LdpOverRsvp is set, it can
// safely use t.GetLdpOverRsvp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LdpOverRsvp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) GetLdpOverRsvp() bool {
	if t == nil || t.LdpOverRsvp == nil {
		return true
	}
	return *t.LdpOverRsvp
}

// GetLeastFill retrieves the value of the leaf LeastFill from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LeastFill is set, it can
// safely use t.GetLeastFill() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LeastFill == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) GetLeastFill() bool {
	if t == nil || t.LeastFill == nil {
		return false
	}
	return *t.LeastFill
}

// GetLoadBalancingWeight retrieves the value of the leaf LoadBalancingWeight from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoadBalancingWeight is set, it can
// safely use t.GetLoadBalancingWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoadBalancingWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) GetLoadBalancingWeight() uint32 {
	if t == nil || t.LoadBalancingWeight == nil {
		return 0
	}
	return *t.LoadBalancingWeight
}

// GetLocalSrProtection retrieves the value of the leaf LocalSrProtection from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalSrProtection is set, it can
// safely use t.GetLocalSrProtection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalSrProtection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) GetLocalSrProtection() E_NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_LocalSrProtection {
	if t == nil || t.LocalSrProtection == 0 {
		return NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_LocalSrProtection_preferred
	}
	return t.LocalSrProtection
}

// GetLspSelfPing retrieves the value of the leaf LspSelfPing from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspSelfPing is set, it can
// safely use t.GetLspSelfPing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspSelfPing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) GetLspSelfPing() E_NokiaTypesSros_BoolWithInherit {
	if t == nil || t.LspSelfPing == 0 {
		return 0
	}
	return t.LspSelfPing
}

// GetMainCtRetryLimit retrieves the value of the leaf MainCtRetryLimit from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MainCtRetryLimit is set, it can
// safely use t.GetMainCtRetryLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MainCtRetryLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) GetMainCtRetryLimit() uint32 {
	if t == nil || t.MainCtRetryLimit == nil {
		return 0
	}
	return *t.MainCtRetryLimit
}

// GetMetric retrieves the value of the leaf Metric from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Metric is set, it can
// safely use t.GetMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Metric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) GetMetric() uint32 {
	if t == nil || t.Metric == nil {
		return 0
	}
	return *t.Metric
}

// GetMetricType retrieves the value of the leaf MetricType from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MetricType is set, it can
// safely use t.GetMetricType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MetricType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) GetMetricType() E_NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_MetricType {
	if t == nil || t.MetricType == 0 {
		return NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_MetricType_igp
	}
	return t.MetricType
}

// GetOverrideTunnelElc retrieves the value of the leaf OverrideTunnelElc from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OverrideTunnelElc is set, it can
// safely use t.GetOverrideTunnelElc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OverrideTunnelElc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) GetOverrideTunnelElc() bool {
	if t == nil || t.OverrideTunnelElc == nil {
		return false
	}
	return *t.OverrideTunnelElc
}

// GetPathComputationMethod retrieves the value of the leaf PathComputationMethod from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathComputationMethod is set, it can
// safely use t.GetPathComputationMethod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathComputationMethod == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) GetPathComputationMethod() E_NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_PathComputationMethod {
	if t == nil || t.PathComputationMethod == 0 {
		return 0
	}
	return t.PathComputationMethod
}

// GetPceControl retrieves the value of the leaf PceControl from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PceControl is set, it can
// safely use t.GetPceControl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PceControl == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) GetPceControl() bool {
	if t == nil || t.PceControl == nil {
		return false
	}
	return *t.PceControl
}

// GetPceReport retrieves the value of the leaf PceReport from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PceReport is set, it can
// safely use t.GetPceReport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PceReport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) GetPceReport() E_NokiaTypesSros_BoolWithInherit {
	if t == nil || t.PceReport == 0 {
		return 0
	}
	return t.PceReport
}

// GetPreferTransportFrr retrieves the value of the leaf PreferTransportFrr from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreferTransportFrr is set, it can
// safely use t.GetPreferTransportFrr() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreferTransportFrr == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) GetPreferTransportFrr() bool {
	if t == nil || t.PreferTransportFrr == nil {
		return false
	}
	return *t.PreferTransportFrr
}

// GetPropagateAdminGroup retrieves the value of the leaf PropagateAdminGroup from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PropagateAdminGroup is set, it can
// safely use t.GetPropagateAdminGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PropagateAdminGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) GetPropagateAdminGroup() bool {
	if t == nil || t.PropagateAdminGroup == nil {
		return false
	}
	return *t.PropagateAdminGroup
}

// GetRecord retrieves the value of the leaf Record from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Record is set, it can
// safely use t.GetRecord() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Record == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) GetRecord() bool {
	if t == nil || t.Record == nil {
		return true
	}
	return *t.Record
}

// GetRecordLabel retrieves the value of the leaf RecordLabel from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RecordLabel is set, it can
// safely use t.GetRecordLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RecordLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) GetRecordLabel() bool {
	if t == nil || t.RecordLabel == nil {
		return true
	}
	return *t.RecordLabel
}

// GetRetryLimit retrieves the value of the leaf RetryLimit from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetryLimit is set, it can
// safely use t.GetRetryLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetryLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) GetRetryLimit() uint32 {
	if t == nil || t.RetryLimit == nil {
		return 0
	}
	return *t.RetryLimit
}

// GetRetryTimer retrieves the value of the leaf RetryTimer from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetryTimer is set, it can
// safely use t.GetRetryTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetryTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) GetRetryTimer() uint32 {
	if t == nil || t.RetryTimer == nil {
		return 30
	}
	return *t.RetryTimer
}

// GetSoftPreemption retrieves the value of the leaf SoftPreemption from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SoftPreemption is set, it can
// safely use t.GetSoftPreemption() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SoftPreemption == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) GetSoftPreemption() bool {
	if t == nil || t.SoftPreemption == nil {
		return false
	}
	return *t.SoftPreemption
}

// GetTemplateId retrieves the value of the leaf TemplateId from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TemplateId is set, it can
// safely use t.GetTemplateId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TemplateId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) GetTemplateId() NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_TemplateId_Union {
	if t == nil || t.TemplateId == nil {
		return nil
	}
	return t.TemplateId
}

// GetTemplateName retrieves the value of the leaf TemplateName from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TemplateName is set, it can
// safely use t.GetTemplateName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TemplateName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) GetTemplateName() string {
	if t == nil || t.TemplateName == nil {
		return ""
	}
	return *t.TemplateName
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) GetType() E_NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Type {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// GetVprnAutoBind retrieves the value of the leaf VprnAutoBind from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VprnAutoBind is set, it can
// safely use t.GetVprnAutoBind() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VprnAutoBind == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) GetVprnAutoBind() bool {
	if t == nil || t.VprnAutoBind == nil {
		return true
	}
	return *t.VprnAutoBind
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Adaptive == nil {
		var v bool = true
		t.Adaptive = &v
	}
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Adspec == nil {
		var v bool = false
		t.Adspec = &v
	}
	if t.BackupClassType == nil {
		var v int32 = 0
		t.BackupClassType = &v
	}
	if t.Bandwidth == nil {
		var v uint32 = 0
		t.Bandwidth = &v
	}
	if t.BgpTransportTunnel == nil {
		var v bool = true
		t.BgpTransportTunnel = &v
	}
	if t.ClassType == nil {
		var v int32 = 0
		t.ClassType = &v
	}
	if t.Family == 0 {
		t.Family = NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Family_ipv4
	}
	if t.LabelStackReduction == nil {
		var v bool = false
		t.LabelStackReduction = &v
	}
	if t.LdpOverRsvp == nil {
		var v bool = true
		t.LdpOverRsvp = &v
	}
	if t.LeastFill == nil {
		var v bool = false
		t.LeastFill = &v
	}
	if t.LocalSrProtection == 0 {
		t.LocalSrProtection = NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_LocalSrProtection_preferred
	}
	if t.Metric == nil {
		var v uint32 = 0
		t.Metric = &v
	}
	if t.MetricType == 0 {
		t.MetricType = NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_MetricType_igp
	}
	if t.OverrideTunnelElc == nil {
		var v bool = false
		t.OverrideTunnelElc = &v
	}
	if t.PceControl == nil {
		var v bool = false
		t.PceControl = &v
	}
	if t.PreferTransportFrr == nil {
		var v bool = false
		t.PreferTransportFrr = &v
	}
	if t.PropagateAdminGroup == nil {
		var v bool = false
		t.PropagateAdminGroup = &v
	}
	if t.Record == nil {
		var v bool = true
		t.Record = &v
	}
	if t.RecordLabel == nil {
		var v bool = true
		t.RecordLabel = &v
	}
	if t.RetryTimer == nil {
		var v uint32 = 30
		t.RetryTimer = &v
	}
	if t.VprnAutoBind == nil {
		var v bool = true
		t.VprnAutoBind = &v
	}
	t.AutoBandwidth.PopulateDefaults()
	t.Bfd.PopulateDefaults()
	t.ClassForwarding.PopulateDefaults()
	t.Cspf.PopulateDefaults()
	t.EgressStatistics.PopulateDefaults()
	t.FastReroute.PopulateDefaults()
	t.IgpShortcut.PopulateDefaults()
	t.MaxSrLabels.PopulateDefaults()
	t.Priority.PopulateDefaults()
	for _, e := range t.AdminTag {
		e.PopulateDefaults()
	}
	for _, e := range t.PathProfile {
		e.PopulateDefaults()
	}
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.TemplateName == nil {
		return nil, fmt.Errorf("nil value for key TemplateName")
	}

	return map[string]interface{}{
		"template-name": *t.TemplateName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AdminTag represents the /nokia-conf/configure/groups/group/router/mpls/lsp-template/admin-tag YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AdminTag struct {
	Name *string `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AdminTag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AdminTag) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AdminTag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AdminTag) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AdminTag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AdminTag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AdminTag struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AdminTag) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AdminTag) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AdminTag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AdminTag) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AdminTag) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AdminTag.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AdminTag) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth represents the /nokia-conf/configure/groups/group/router/mpls/lsp-template/auto-bandwidth YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth struct {
	AdjustDown       *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_AdjustDown                                                                                    `path:"adjust-down" module:"nokia-conf"`
	AdjustUp         *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_AdjustUp                                                                                      `path:"adjust-up" module:"nokia-conf"`
	Fc               map[NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_Fc_FcName_Union]*NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_Fc `path:"fc" module:"nokia-conf"`
	MaxBandwidth     *uint32                                                                                                                                                               `path:"max-bandwidth" module:"nokia-conf"`
	MinBandwidth     *uint32                                                                                                                                                               `path:"min-bandwidth" module:"nokia-conf"`
	MonitorBandwidth *bool                                                                                                                                                                 `path:"monitor-bandwidth" module:"nokia-conf"`
	Multipliers      *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_Multipliers                                                                                   `path:"multipliers" module:"nokia-conf"`
	OverflowLimit    *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_OverflowLimit                                                                                 `path:"overflow-limit" module:"nokia-conf" yangPresence:"true"`
	UnderflowLimit   *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_UnderflowLimit                                                                                `path:"underflow-limit" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth) IsYANGGoStruct() {}

// NewFc creates a new entry in the Fc list of the
// NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth) NewFc(FcName NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_Fc_FcName_Union) (*NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_Fc, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_Fc_FcName_Union]*NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_Fc)
	}

	key := FcName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Fc[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Fc", key)
	}

	t.Fc[key] = &NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_Fc{
		FcName: FcName,
	}

	return t.Fc[key], nil
}

// RenameFc renames an entry in the list Fc within
// the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth) RenameFc(oldK, newK NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_Fc_FcName_Union) error {
	if _, ok := t.Fc[newK]; ok {
		return fmt.Errorf("key %v already exists in Fc", newK)
	}

	e, ok := t.Fc[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Fc", oldK)
	}
	e.FcName = newK

	t.Fc[newK] = e
	delete(t.Fc, oldK)
	return nil
}

// GetOrCreateFc retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth) GetOrCreateFc(FcName NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_Fc_FcName_Union) *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_Fc {

	key := FcName

	if v, ok := t.Fc[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFc(FcName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFc got unexpected error: %v", err))
	}
	return v
}

// GetFc retrieves the value with the specified key from
// the Fc map field of NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth) GetFc(FcName NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_Fc_FcName_Union) *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_Fc {

	if t == nil {
		return nil
	}

	key := FcName

	if lm, ok := t.Fc[key]; ok {
		return lm
	}
	return nil
}

// DeleteFc deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth) DeleteFc(FcName NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_Fc_FcName_Union) {
	key := FcName

	delete(t.Fc, key)
}

// AppendFc appends the supplied NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_Fc struct to the
// list Fc of NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_Fc already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth) AppendFc(v *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_Fc) error {
	key := v.FcName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_Fc_FcName_Union]*NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_Fc)
	}

	if _, ok := t.Fc[key]; ok {
		return fmt.Errorf("duplicate key for list Fc %v", key)
	}

	t.Fc[key] = v
	return nil
}

// GetOrCreateAdjustDown retrieves the value of the AdjustDown field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth) GetOrCreateAdjustDown() *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_AdjustDown {
	if t.AdjustDown != nil {
		return t.AdjustDown
	}
	t.AdjustDown = &NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_AdjustDown{}
	return t.AdjustDown
}

// GetOrCreateAdjustUp retrieves the value of the AdjustUp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth) GetOrCreateAdjustUp() *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_AdjustUp {
	if t.AdjustUp != nil {
		return t.AdjustUp
	}
	t.AdjustUp = &NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_AdjustUp{}
	return t.AdjustUp
}

// GetOrCreateMultipliers retrieves the value of the Multipliers field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth) GetOrCreateMultipliers() *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_Multipliers {
	if t.Multipliers != nil {
		return t.Multipliers
	}
	t.Multipliers = &NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_Multipliers{}
	return t.Multipliers
}

// GetOrCreateOverflowLimit retrieves the value of the OverflowLimit field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth) GetOrCreateOverflowLimit() *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_OverflowLimit {
	if t.OverflowLimit != nil {
		return t.OverflowLimit
	}
	t.OverflowLimit = &NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_OverflowLimit{}
	return t.OverflowLimit
}

// GetOrCreateUnderflowLimit retrieves the value of the UnderflowLimit field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth) GetOrCreateUnderflowLimit() *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_UnderflowLimit {
	if t.UnderflowLimit != nil {
		return t.UnderflowLimit
	}
	t.UnderflowLimit = &NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_UnderflowLimit{}
	return t.UnderflowLimit
}

// GetAdjustDown returns the value of the AdjustDown struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth. If the receiver or the field AdjustDown is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth) GetAdjustDown() *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_AdjustDown {
	if t != nil && t.AdjustDown != nil {
		return t.AdjustDown
	}
	return nil
}

// GetAdjustUp returns the value of the AdjustUp struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth. If the receiver or the field AdjustUp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth) GetAdjustUp() *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_AdjustUp {
	if t != nil && t.AdjustUp != nil {
		return t.AdjustUp
	}
	return nil
}

// GetMultipliers returns the value of the Multipliers struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth. If the receiver or the field Multipliers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth) GetMultipliers() *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_Multipliers {
	if t != nil && t.Multipliers != nil {
		return t.Multipliers
	}
	return nil
}

// GetOverflowLimit returns the value of the OverflowLimit struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth. If the receiver or the field OverflowLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth) GetOverflowLimit() *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_OverflowLimit {
	if t != nil && t.OverflowLimit != nil {
		return t.OverflowLimit
	}
	return nil
}

// GetUnderflowLimit returns the value of the UnderflowLimit struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth. If the receiver or the field UnderflowLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth) GetUnderflowLimit() *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_UnderflowLimit {
	if t != nil && t.UnderflowLimit != nil {
		return t.UnderflowLimit
	}
	return nil
}

// GetMaxBandwidth retrieves the value of the leaf MaxBandwidth from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxBandwidth is set, it can
// safely use t.GetMaxBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxBandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth) GetMaxBandwidth() uint32 {
	if t == nil || t.MaxBandwidth == nil {
		return 100000
	}
	return *t.MaxBandwidth
}

// GetMinBandwidth retrieves the value of the leaf MinBandwidth from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinBandwidth is set, it can
// safely use t.GetMinBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinBandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth) GetMinBandwidth() uint32 {
	if t == nil || t.MinBandwidth == nil {
		return 0
	}
	return *t.MinBandwidth
}

// GetMonitorBandwidth retrieves the value of the leaf MonitorBandwidth from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorBandwidth is set, it can
// safely use t.GetMonitorBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorBandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth) GetMonitorBandwidth() bool {
	if t == nil || t.MonitorBandwidth == nil {
		return false
	}
	return *t.MonitorBandwidth
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxBandwidth == nil {
		var v uint32 = 100000
		t.MaxBandwidth = &v
	}
	if t.MinBandwidth == nil {
		var v uint32 = 0
		t.MinBandwidth = &v
	}
	if t.MonitorBandwidth == nil {
		var v bool = false
		t.MonitorBandwidth = &v
	}
	t.AdjustDown.PopulateDefaults()
	t.AdjustUp.PopulateDefaults()
	t.Multipliers.PopulateDefaults()
	t.OverflowLimit.PopulateDefaults()
	t.UnderflowLimit.PopulateDefaults()
	for _, e := range t.Fc {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_AdjustDown represents the /nokia-conf/configure/groups/group/router/mpls/lsp-template/auto-bandwidth/adjust-down YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_AdjustDown struct {
	Bw      *uint32 `path:"bw" module:"nokia-conf"`
	Percent *uint32 `path:"percent" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_AdjustDown implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_AdjustDown) IsYANGGoStruct() {
}

// GetBw retrieves the value of the leaf Bw from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_AdjustDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bw is set, it can
// safely use t.GetBw() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bw == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_AdjustDown) GetBw() uint32 {
	if t == nil || t.Bw == nil {
		return 0
	}
	return *t.Bw
}

// GetPercent retrieves the value of the leaf Percent from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_AdjustDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Percent is set, it can
// safely use t.GetPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Percent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_AdjustDown) GetPercent() uint32 {
	if t == nil || t.Percent == nil {
		return 5
	}
	return *t.Percent
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_AdjustDown
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_AdjustDown) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Bw == nil {
		var v uint32 = 0
		t.Bw = &v
	}
	if t.Percent == nil {
		var v uint32 = 5
		t.Percent = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_AdjustDown) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_AdjustDown"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_AdjustDown) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_AdjustDown) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_AdjustDown.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_AdjustDown) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_AdjustUp represents the /nokia-conf/configure/groups/group/router/mpls/lsp-template/auto-bandwidth/adjust-up YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_AdjustUp struct {
	Bw      *uint32 `path:"bw" module:"nokia-conf"`
	Percent *uint32 `path:"percent" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_AdjustUp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_AdjustUp) IsYANGGoStruct() {
}

// GetBw retrieves the value of the leaf Bw from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_AdjustUp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bw is set, it can
// safely use t.GetBw() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bw == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_AdjustUp) GetBw() uint32 {
	if t == nil || t.Bw == nil {
		return 0
	}
	return *t.Bw
}

// GetPercent retrieves the value of the leaf Percent from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_AdjustUp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Percent is set, it can
// safely use t.GetPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Percent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_AdjustUp) GetPercent() uint32 {
	if t == nil || t.Percent == nil {
		return 5
	}
	return *t.Percent
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_AdjustUp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_AdjustUp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Bw == nil {
		var v uint32 = 0
		t.Bw = &v
	}
	if t.Percent == nil {
		var v uint32 = 5
		t.Percent = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_AdjustUp) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_AdjustUp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_AdjustUp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_AdjustUp) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_AdjustUp.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_AdjustUp) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_Fc represents the /nokia-conf/configure/groups/group/router/mpls/lsp-template/auto-bandwidth/fc YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_Fc struct {
	FcName         NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_Fc_FcName_Union `path:"fc-name" module:"nokia-conf"`
	SamplingWeight *uint32                                                                                `path:"sampling-weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_Fc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_Fc) IsYANGGoStruct() {}

// GetFcName retrieves the value of the leaf FcName from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FcName is set, it can
// safely use t.GetFcName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FcName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_Fc) GetFcName() NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_Fc_FcName_Union {
	if t == nil || t.FcName == nil {
		return nil
	}
	return t.FcName
}

// GetSamplingWeight retrieves the value of the leaf SamplingWeight from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SamplingWeight is set, it can
// safely use t.GetSamplingWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SamplingWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_Fc) GetSamplingWeight() uint32 {
	if t == nil || t.SamplingWeight == nil {
		return 100
	}
	return *t.SamplingWeight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_Fc
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_Fc) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SamplingWeight == nil {
		var v uint32 = 100
		t.SamplingWeight = &v
	}
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_Fc struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_Fc) Î›ListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"fc-name": t.FcName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_Fc) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_Fc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_Fc) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_Fc) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_Fc.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_Fc) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_Multipliers represents the /nokia-conf/configure/groups/group/router/mpls/lsp-template/auto-bandwidth/multipliers YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_Multipliers struct {
	AdjustMultiplier *uint32 `path:"adjust-multiplier" module:"nokia-conf"`
	SampleMultiplier *uint32 `path:"sample-multiplier" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_Multipliers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_Multipliers) IsYANGGoStruct() {
}

// GetAdjustMultiplier retrieves the value of the leaf AdjustMultiplier from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_Multipliers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdjustMultiplier is set, it can
// safely use t.GetAdjustMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdjustMultiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_Multipliers) GetAdjustMultiplier() uint32 {
	if t == nil || t.AdjustMultiplier == nil {
		return 0
	}
	return *t.AdjustMultiplier
}

// GetSampleMultiplier retrieves the value of the leaf SampleMultiplier from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_Multipliers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SampleMultiplier is set, it can
// safely use t.GetSampleMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SampleMultiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_Multipliers) GetSampleMultiplier() uint32 {
	if t == nil || t.SampleMultiplier == nil {
		return 0
	}
	return *t.SampleMultiplier
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_Multipliers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_Multipliers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_Multipliers) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_Multipliers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_Multipliers) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_Multipliers) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_Multipliers.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_Multipliers) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_OverflowLimit represents the /nokia-conf/configure/groups/group/router/mpls/lsp-template/auto-bandwidth/overflow-limit YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_OverflowLimit struct {
	Bw        *uint32 `path:"bw" module:"nokia-conf"`
	Number    *uint32 `path:"number" module:"nokia-conf"`
	Threshold *uint32 `path:"threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_OverflowLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_OverflowLimit) IsYANGGoStruct() {
}

// GetBw retrieves the value of the leaf Bw from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_OverflowLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bw is set, it can
// safely use t.GetBw() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bw == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_OverflowLimit) GetBw() uint32 {
	if t == nil || t.Bw == nil {
		return 0
	}
	return *t.Bw
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_OverflowLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_OverflowLimit) GetNumber() uint32 {
	if t == nil || t.Number == nil {
		return 0
	}
	return *t.Number
}

// GetThreshold retrieves the value of the leaf Threshold from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_OverflowLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Threshold is set, it can
// safely use t.GetThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Threshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_OverflowLimit) GetThreshold() uint32 {
	if t == nil || t.Threshold == nil {
		return 0
	}
	return *t.Threshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_OverflowLimit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_OverflowLimit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Threshold == nil {
		var v uint32 = 0
		t.Threshold = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_OverflowLimit) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_OverflowLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_OverflowLimit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_OverflowLimit) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_OverflowLimit.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_OverflowLimit) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_UnderflowLimit represents the /nokia-conf/configure/groups/group/router/mpls/lsp-template/auto-bandwidth/underflow-limit YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_UnderflowLimit struct {
	Bw        *uint32 `path:"bw" module:"nokia-conf"`
	Number    *uint32 `path:"number" module:"nokia-conf"`
	Threshold *uint32 `path:"threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_UnderflowLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_UnderflowLimit) IsYANGGoStruct() {
}

// GetBw retrieves the value of the leaf Bw from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_UnderflowLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bw is set, it can
// safely use t.GetBw() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bw == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_UnderflowLimit) GetBw() uint32 {
	if t == nil || t.Bw == nil {
		return 0
	}
	return *t.Bw
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_UnderflowLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_UnderflowLimit) GetNumber() uint32 {
	if t == nil || t.Number == nil {
		return 0
	}
	return *t.Number
}

// GetThreshold retrieves the value of the leaf Threshold from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_UnderflowLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Threshold is set, it can
// safely use t.GetThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Threshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_UnderflowLimit) GetThreshold() uint32 {
	if t == nil || t.Threshold == nil {
		return 0
	}
	return *t.Threshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_UnderflowLimit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_UnderflowLimit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Threshold == nil {
		var v uint32 = 0
		t.Threshold = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_UnderflowLimit) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_UnderflowLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_UnderflowLimit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_UnderflowLimit) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_UnderflowLimit.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_AutoBandwidth_UnderflowLimit) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Bfd represents the /nokia-conf/configure/groups/group/router/mpls/lsp-template/bfd YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Bfd struct {
	BfdLiveness     *bool                                                                              `path:"bfd-liveness" module:"nokia-conf"`
	BfdTemplate     *string                                                                            `path:"bfd-template" module:"nokia-conf"`
	FailureAction   E_NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Bfd_FailureAction       `path:"failure-action" module:"nokia-conf"`
	LspPingInterval NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Bfd_LspPingInterval_Union `path:"lsp-ping-interval" module:"nokia-conf"`
	ReturnPathLabel *uint32                                                                            `path:"return-path-label" module:"nokia-conf"`
	WaitForUpTimer  *uint32                                                                            `path:"wait-for-up-timer" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Bfd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Bfd) IsYANGGoStruct() {}

// GetBfdLiveness retrieves the value of the leaf BfdLiveness from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdLiveness is set, it can
// safely use t.GetBfdLiveness() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdLiveness == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Bfd) GetBfdLiveness() bool {
	if t == nil || t.BfdLiveness == nil {
		return false
	}
	return *t.BfdLiveness
}

// GetBfdTemplate retrieves the value of the leaf BfdTemplate from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdTemplate is set, it can
// safely use t.GetBfdTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Bfd) GetBfdTemplate() string {
	if t == nil || t.BfdTemplate == nil {
		return ""
	}
	return *t.BfdTemplate
}

// GetFailureAction retrieves the value of the leaf FailureAction from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FailureAction is set, it can
// safely use t.GetFailureAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FailureAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Bfd) GetFailureAction() E_NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Bfd_FailureAction {
	if t == nil || t.FailureAction == 0 {
		return NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Bfd_FailureAction_none
	}
	return t.FailureAction
}

// GetLspPingInterval retrieves the value of the leaf LspPingInterval from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspPingInterval is set, it can
// safely use t.GetLspPingInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspPingInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Bfd) GetLspPingInterval() NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Bfd_LspPingInterval_Union {
	if t == nil || t.LspPingInterval == nil {
		return UnionUint32(60)
	}
	return t.LspPingInterval
}

// GetReturnPathLabel retrieves the value of the leaf ReturnPathLabel from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReturnPathLabel is set, it can
// safely use t.GetReturnPathLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReturnPathLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Bfd) GetReturnPathLabel() uint32 {
	if t == nil || t.ReturnPathLabel == nil {
		return 0
	}
	return *t.ReturnPathLabel
}

// GetWaitForUpTimer retrieves the value of the leaf WaitForUpTimer from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WaitForUpTimer is set, it can
// safely use t.GetWaitForUpTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WaitForUpTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Bfd) GetWaitForUpTimer() uint32 {
	if t == nil || t.WaitForUpTimer == nil {
		return 4
	}
	return *t.WaitForUpTimer
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Bfd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Bfd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BfdLiveness == nil {
		var v bool = false
		t.BfdLiveness = &v
	}
	if t.FailureAction == 0 {
		t.FailureAction = NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Bfd_FailureAction_none
	}
	if t.LspPingInterval == nil {
		t.LspPingInterval = UnionUint32(60)
	}
	if t.WaitForUpTimer == nil {
		var v uint32 = 4
		t.WaitForUpTimer = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Bfd) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Bfd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Bfd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Bfd) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Bfd.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Bfd) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_ClassForwarding represents the /nokia-conf/configure/groups/group/router/mpls/lsp-template/class-forwarding YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_ClassForwarding struct {
	DefaultLsp    *bool                                                                                   `path:"default-lsp" module:"nokia-conf"`
	Fc            []E_NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_ClassForwarding_Fc         `path:"fc" module:"nokia-conf"`
	ForwardingSet *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_ClassForwarding_ForwardingSet `path:"forwarding-set" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_ClassForwarding implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_ClassForwarding) IsYANGGoStruct() {}

// GetOrCreateForwardingSet retrieves the value of the ForwardingSet field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_ClassForwarding) GetOrCreateForwardingSet() *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_ClassForwarding_ForwardingSet {
	if t.ForwardingSet != nil {
		return t.ForwardingSet
	}
	t.ForwardingSet = &NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_ClassForwarding_ForwardingSet{}
	return t.ForwardingSet
}

// GetForwardingSet returns the value of the ForwardingSet struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_ClassForwarding. If the receiver or the field ForwardingSet is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_ClassForwarding) GetForwardingSet() *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_ClassForwarding_ForwardingSet {
	if t != nil && t.ForwardingSet != nil {
		return t.ForwardingSet
	}
	return nil
}

// GetDefaultLsp retrieves the value of the leaf DefaultLsp from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_ClassForwarding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultLsp is set, it can
// safely use t.GetDefaultLsp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultLsp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_ClassForwarding) GetDefaultLsp() bool {
	if t == nil || t.DefaultLsp == nil {
		return false
	}
	return *t.DefaultLsp
}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_ClassForwarding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_ClassForwarding) GetFc() []E_NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_ClassForwarding_Fc {
	if t == nil || t.Fc == nil {
		return nil
	}
	return t.Fc
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_ClassForwarding
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_ClassForwarding) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DefaultLsp == nil {
		var v bool = false
		t.DefaultLsp = &v
	}
	t.ForwardingSet.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_ClassForwarding) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_ClassForwarding"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_ClassForwarding) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_ClassForwarding) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_ClassForwarding.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_ClassForwarding) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_ClassForwarding_ForwardingSet represents the /nokia-conf/configure/groups/group/router/mpls/lsp-template/class-forwarding/forwarding-set YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_ClassForwarding_ForwardingSet struct {
	Policy *string `path:"policy" module:"nokia-conf"`
	Set    *uint32 `path:"set" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_ClassForwarding_ForwardingSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_ClassForwarding_ForwardingSet) IsYANGGoStruct() {
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_ClassForwarding_ForwardingSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_ClassForwarding_ForwardingSet) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// GetSet retrieves the value of the leaf Set from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_ClassForwarding_ForwardingSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Set is set, it can
// safely use t.GetSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Set == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_ClassForwarding_ForwardingSet) GetSet() uint32 {
	if t == nil || t.Set == nil {
		return 0
	}
	return *t.Set
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_ClassForwarding_ForwardingSet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_ClassForwarding_ForwardingSet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_ClassForwarding_ForwardingSet) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_ClassForwarding_ForwardingSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_ClassForwarding_ForwardingSet) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_ClassForwarding_ForwardingSet) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_ClassForwarding_ForwardingSet.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_ClassForwarding_ForwardingSet) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Cspf represents the /nokia-conf/configure/groups/group/router/mpls/lsp-template/cspf YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Cspf struct {
	AdminState  E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	UseTeMetric *bool                       `path:"use-te-metric" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Cspf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Cspf) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Cspf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Cspf) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetUseTeMetric retrieves the value of the leaf UseTeMetric from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Cspf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseTeMetric is set, it can
// safely use t.GetUseTeMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseTeMetric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Cspf) GetUseTeMetric() bool {
	if t == nil || t.UseTeMetric == nil {
		return false
	}
	return *t.UseTeMetric
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Cspf
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Cspf) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.UseTeMetric == nil {
		var v bool = false
		t.UseTeMetric = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Cspf) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Cspf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Cspf) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Cspf) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Cspf.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Cspf) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_EgressStatistics represents the /nokia-conf/configure/groups/group/router/mpls/lsp-template/egress-statistics YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_EgressStatistics struct {
	AccountingPolicy *uint32                                                                              `path:"accounting-policy" module:"nokia-conf"`
	CollectStats     *bool                                                                                `path:"collect-stats" module:"nokia-conf"`
	StatMode         E_NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_EgressStatistics_StatMode `path:"stat-mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_EgressStatistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_EgressStatistics) IsYANGGoStruct() {}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_EgressStatistics
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_EgressStatistics) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_EgressStatistics
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_EgressStatistics) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// GetStatMode retrieves the value of the leaf StatMode from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_EgressStatistics
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StatMode is set, it can
// safely use t.GetStatMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StatMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_EgressStatistics) GetStatMode() E_NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_EgressStatistics_StatMode {
	if t == nil || t.StatMode == 0 {
		return 0
	}
	return t.StatMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_EgressStatistics
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_EgressStatistics) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_EgressStatistics) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_EgressStatistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_EgressStatistics) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_EgressStatistics) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_EgressStatistics.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_EgressStatistics) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_FastReroute represents the /nokia-conf/configure/groups/group/router/mpls/lsp-template/fast-reroute YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_FastReroute struct {
	FrrMethod           E_NokiaTypesMpls_FrrMethodType `path:"frr-method" module:"nokia-conf"`
	HopLimit            *uint32                        `path:"hop-limit" module:"nokia-conf"`
	NodeProtect         *bool                          `path:"node-protect" module:"nokia-conf"`
	PropagateAdminGroup *bool                          `path:"propagate-admin-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_FastReroute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_FastReroute) IsYANGGoStruct() {}

// GetFrrMethod retrieves the value of the leaf FrrMethod from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_FastReroute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FrrMethod is set, it can
// safely use t.GetFrrMethod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FrrMethod == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_FastReroute) GetFrrMethod() E_NokiaTypesMpls_FrrMethodType {
	if t == nil || t.FrrMethod == 0 {
		return NokiaTypesMpls_FrrMethodType_facility
	}
	return t.FrrMethod
}

// GetHopLimit retrieves the value of the leaf HopLimit from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_FastReroute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HopLimit is set, it can
// safely use t.GetHopLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HopLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_FastReroute) GetHopLimit() uint32 {
	if t == nil || t.HopLimit == nil {
		return 16
	}
	return *t.HopLimit
}

// GetNodeProtect retrieves the value of the leaf NodeProtect from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_FastReroute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NodeProtect is set, it can
// safely use t.GetNodeProtect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NodeProtect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_FastReroute) GetNodeProtect() bool {
	if t == nil || t.NodeProtect == nil {
		return false
	}
	return *t.NodeProtect
}

// GetPropagateAdminGroup retrieves the value of the leaf PropagateAdminGroup from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_FastReroute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PropagateAdminGroup is set, it can
// safely use t.GetPropagateAdminGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PropagateAdminGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_FastReroute) GetPropagateAdminGroup() bool {
	if t == nil || t.PropagateAdminGroup == nil {
		return false
	}
	return *t.PropagateAdminGroup
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_FastReroute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_FastReroute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FrrMethod == 0 {
		t.FrrMethod = NokiaTypesMpls_FrrMethodType_facility
	}
	if t.HopLimit == nil {
		var v uint32 = 16
		t.HopLimit = &v
	}
	if t.NodeProtect == nil {
		var v bool = false
		t.NodeProtect = &v
	}
	if t.PropagateAdminGroup == nil {
		var v bool = false
		t.PropagateAdminGroup = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_FastReroute) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_FastReroute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_FastReroute) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_FastReroute) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_FastReroute.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_FastReroute) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_IgpShortcut represents the /nokia-conf/configure/groups/group/router/mpls/lsp-template/igp-shortcut YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_IgpShortcut struct {
	AdminState     E_NokiaTypesSros_AdminState                                                    `path:"admin-state" module:"nokia-conf"`
	LfaType        E_NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_IgpShortcut_LfaType `path:"lfa-type" module:"nokia-conf"`
	RelativeMetric *int32                                                                         `path:"relative-metric" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_IgpShortcut implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_IgpShortcut) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_IgpShortcut
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_IgpShortcut) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetLfaType retrieves the value of the leaf LfaType from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_IgpShortcut
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LfaType is set, it can
// safely use t.GetLfaType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LfaType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_IgpShortcut) GetLfaType() E_NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_IgpShortcut_LfaType {
	if t == nil || t.LfaType == 0 {
		return 0
	}
	return t.LfaType
}

// GetRelativeMetric retrieves the value of the leaf RelativeMetric from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_IgpShortcut
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RelativeMetric is set, it can
// safely use t.GetRelativeMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RelativeMetric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_IgpShortcut) GetRelativeMetric() int32 {
	if t == nil || t.RelativeMetric == nil {
		return 0
	}
	return *t.RelativeMetric
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_IgpShortcut
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_IgpShortcut) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_IgpShortcut) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_IgpShortcut"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_IgpShortcut) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_IgpShortcut) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_IgpShortcut.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_IgpShortcut) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_MaxSrLabels represents the /nokia-conf/configure/groups/group/router/mpls/lsp-template/max-sr-labels YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_MaxSrLabels struct {
	AdditionalFrrLabels *uint32 `path:"additional-frr-labels" module:"nokia-conf"`
	LabelStackSize      *uint32 `path:"label-stack-size" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_MaxSrLabels implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_MaxSrLabels) IsYANGGoStruct() {}

// GetAdditionalFrrLabels retrieves the value of the leaf AdditionalFrrLabels from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_MaxSrLabels
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdditionalFrrLabels is set, it can
// safely use t.GetAdditionalFrrLabels() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdditionalFrrLabels == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_MaxSrLabels) GetAdditionalFrrLabels() uint32 {
	if t == nil || t.AdditionalFrrLabels == nil {
		return 1
	}
	return *t.AdditionalFrrLabels
}

// GetLabelStackSize retrieves the value of the leaf LabelStackSize from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_MaxSrLabels
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelStackSize is set, it can
// safely use t.GetLabelStackSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelStackSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_MaxSrLabels) GetLabelStackSize() uint32 {
	if t == nil || t.LabelStackSize == nil {
		return 0
	}
	return *t.LabelStackSize
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_MaxSrLabels
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_MaxSrLabels) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdditionalFrrLabels == nil {
		var v uint32 = 1
		t.AdditionalFrrLabels = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_MaxSrLabels) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_MaxSrLabels"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_MaxSrLabels) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_MaxSrLabels) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_MaxSrLabels.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_MaxSrLabels) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_PathProfile represents the /nokia-conf/configure/groups/group/router/mpls/lsp-template/path-profile YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_PathProfile struct {
	PathGroup *uint32                                                                              `path:"path-group" module:"nokia-conf"`
	ProfileId NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_PathProfile_ProfileId_Union `path:"profile-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_PathProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_PathProfile) IsYANGGoStruct() {}

// GetPathGroup retrieves the value of the leaf PathGroup from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_PathProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathGroup is set, it can
// safely use t.GetPathGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_PathProfile) GetPathGroup() uint32 {
	if t == nil || t.PathGroup == nil {
		return 0
	}
	return *t.PathGroup
}

// GetProfileId retrieves the value of the leaf ProfileId from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_PathProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProfileId is set, it can
// safely use t.GetProfileId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProfileId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_PathProfile) GetProfileId() NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_PathProfile_ProfileId_Union {
	if t == nil || t.ProfileId == nil {
		return nil
	}
	return t.ProfileId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_PathProfile
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_PathProfile) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PathGroup == nil {
		var v uint32 = 0
		t.PathGroup = &v
	}
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_PathProfile struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_PathProfile) Î›ListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"profile-id": t.ProfileId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_PathProfile) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_PathProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_PathProfile) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_PathProfile) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_PathProfile.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_PathProfile) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Priority represents the /nokia-conf/configure/groups/group/router/mpls/lsp-template/priority YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Priority struct {
	HoldPriority  *int32 `path:"hold-priority" module:"nokia-conf"`
	SetupPriority *int32 `path:"setup-priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Priority implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Priority) IsYANGGoStruct() {}

// GetHoldPriority retrieves the value of the leaf HoldPriority from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldPriority is set, it can
// safely use t.GetHoldPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldPriority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Priority) GetHoldPriority() int32 {
	if t == nil || t.HoldPriority == nil {
		return 0
	}
	return *t.HoldPriority
}

// GetSetupPriority retrieves the value of the leaf SetupPriority from the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetupPriority is set, it can
// safely use t.GetSetupPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetupPriority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Priority) GetSetupPriority() int32 {
	if t == nil || t.SetupPriority == nil {
		return 7
	}
	return *t.SetupPriority
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Priority
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Priority) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HoldPriority == nil {
		var v int32 = 0
		t.HoldPriority = &v
	}
	if t.SetupPriority == nil {
		var v int32 = 7
		t.SetupPriority = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Priority) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Priority"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Priority) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Priority) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Priority.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_LspTemplate_Priority) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AdminTag represents the /nokia-conf/configure/groups/group/router/mpls/lsp/admin-tag YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AdminTag struct {
	Name *string `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AdminTag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AdminTag) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AdminTag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AdminTag) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AdminTag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AdminTag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AdminTag struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AdminTag) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AdminTag) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AdminTag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AdminTag) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AdminTag) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AdminTag.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AdminTag) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth represents the /nokia-conf/configure/groups/group/router/mpls/lsp/auto-bandwidth YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth struct {
	AdjustDown       *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_AdjustDown                                                                            `path:"adjust-down" module:"nokia-conf"`
	AdjustUp         *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_AdjustUp                                                                              `path:"adjust-up" module:"nokia-conf"`
	Fc               map[NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_Fc_FcName_Union]*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_Fc `path:"fc" module:"nokia-conf"`
	MaxBandwidth     *uint32                                                                                                                                               `path:"max-bandwidth" module:"nokia-conf"`
	MinBandwidth     *uint32                                                                                                                                               `path:"min-bandwidth" module:"nokia-conf"`
	MonitorBandwidth *bool                                                                                                                                                 `path:"monitor-bandwidth" module:"nokia-conf"`
	Multipliers      *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_Multipliers                                                                           `path:"multipliers" module:"nokia-conf"`
	OverflowLimit    *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_OverflowLimit                                                                         `path:"overflow-limit" module:"nokia-conf" yangPresence:"true"`
	UnderflowLimit   *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_UnderflowLimit                                                                        `path:"underflow-limit" module:"nokia-conf" yangPresence:"true"`
	UseLastAdjBw     *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_UseLastAdjBw                                                                          `path:"use-last-adj-bw" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth) IsYANGGoStruct() {}

// NewFc creates a new entry in the Fc list of the
// NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth) NewFc(FcName NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_Fc_FcName_Union) (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_Fc, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_Fc_FcName_Union]*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_Fc)
	}

	key := FcName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Fc[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Fc", key)
	}

	t.Fc[key] = &NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_Fc{
		FcName: FcName,
	}

	return t.Fc[key], nil
}

// RenameFc renames an entry in the list Fc within
// the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth) RenameFc(oldK, newK NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_Fc_FcName_Union) error {
	if _, ok := t.Fc[newK]; ok {
		return fmt.Errorf("key %v already exists in Fc", newK)
	}

	e, ok := t.Fc[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Fc", oldK)
	}
	e.FcName = newK

	t.Fc[newK] = e
	delete(t.Fc, oldK)
	return nil
}

// GetOrCreateFc retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth) GetOrCreateFc(FcName NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_Fc_FcName_Union) *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_Fc {

	key := FcName

	if v, ok := t.Fc[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFc(FcName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFc got unexpected error: %v", err))
	}
	return v
}

// GetFc retrieves the value with the specified key from
// the Fc map field of NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth) GetFc(FcName NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_Fc_FcName_Union) *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_Fc {

	if t == nil {
		return nil
	}

	key := FcName

	if lm, ok := t.Fc[key]; ok {
		return lm
	}
	return nil
}

// DeleteFc deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth) DeleteFc(FcName NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_Fc_FcName_Union) {
	key := FcName

	delete(t.Fc, key)
}

// AppendFc appends the supplied NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_Fc struct to the
// list Fc of NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_Fc already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth) AppendFc(v *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_Fc) error {
	key := v.FcName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Fc == nil {
		t.Fc = make(map[NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_Fc_FcName_Union]*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_Fc)
	}

	if _, ok := t.Fc[key]; ok {
		return fmt.Errorf("duplicate key for list Fc %v", key)
	}

	t.Fc[key] = v
	return nil
}

// GetOrCreateAdjustDown retrieves the value of the AdjustDown field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth) GetOrCreateAdjustDown() *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_AdjustDown {
	if t.AdjustDown != nil {
		return t.AdjustDown
	}
	t.AdjustDown = &NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_AdjustDown{}
	return t.AdjustDown
}

// GetOrCreateAdjustUp retrieves the value of the AdjustUp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth) GetOrCreateAdjustUp() *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_AdjustUp {
	if t.AdjustUp != nil {
		return t.AdjustUp
	}
	t.AdjustUp = &NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_AdjustUp{}
	return t.AdjustUp
}

// GetOrCreateMultipliers retrieves the value of the Multipliers field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth) GetOrCreateMultipliers() *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_Multipliers {
	if t.Multipliers != nil {
		return t.Multipliers
	}
	t.Multipliers = &NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_Multipliers{}
	return t.Multipliers
}

// GetOrCreateOverflowLimit retrieves the value of the OverflowLimit field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth) GetOrCreateOverflowLimit() *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_OverflowLimit {
	if t.OverflowLimit != nil {
		return t.OverflowLimit
	}
	t.OverflowLimit = &NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_OverflowLimit{}
	return t.OverflowLimit
}

// GetOrCreateUnderflowLimit retrieves the value of the UnderflowLimit field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth) GetOrCreateUnderflowLimit() *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_UnderflowLimit {
	if t.UnderflowLimit != nil {
		return t.UnderflowLimit
	}
	t.UnderflowLimit = &NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_UnderflowLimit{}
	return t.UnderflowLimit
}

// GetOrCreateUseLastAdjBw retrieves the value of the UseLastAdjBw field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth) GetOrCreateUseLastAdjBw() *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_UseLastAdjBw {
	if t.UseLastAdjBw != nil {
		return t.UseLastAdjBw
	}
	t.UseLastAdjBw = &NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_UseLastAdjBw{}
	return t.UseLastAdjBw
}

// GetAdjustDown returns the value of the AdjustDown struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth. If the receiver or the field AdjustDown is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth) GetAdjustDown() *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_AdjustDown {
	if t != nil && t.AdjustDown != nil {
		return t.AdjustDown
	}
	return nil
}

// GetAdjustUp returns the value of the AdjustUp struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth. If the receiver or the field AdjustUp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth) GetAdjustUp() *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_AdjustUp {
	if t != nil && t.AdjustUp != nil {
		return t.AdjustUp
	}
	return nil
}

// GetMultipliers returns the value of the Multipliers struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth. If the receiver or the field Multipliers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth) GetMultipliers() *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_Multipliers {
	if t != nil && t.Multipliers != nil {
		return t.Multipliers
	}
	return nil
}

// GetOverflowLimit returns the value of the OverflowLimit struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth. If the receiver or the field OverflowLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth) GetOverflowLimit() *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_OverflowLimit {
	if t != nil && t.OverflowLimit != nil {
		return t.OverflowLimit
	}
	return nil
}

// GetUnderflowLimit returns the value of the UnderflowLimit struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth. If the receiver or the field UnderflowLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth) GetUnderflowLimit() *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_UnderflowLimit {
	if t != nil && t.UnderflowLimit != nil {
		return t.UnderflowLimit
	}
	return nil
}

// GetUseLastAdjBw returns the value of the UseLastAdjBw struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth. If the receiver or the field UseLastAdjBw is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth) GetUseLastAdjBw() *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_UseLastAdjBw {
	if t != nil && t.UseLastAdjBw != nil {
		return t.UseLastAdjBw
	}
	return nil
}

// GetMaxBandwidth retrieves the value of the leaf MaxBandwidth from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxBandwidth is set, it can
// safely use t.GetMaxBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxBandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth) GetMaxBandwidth() uint32 {
	if t == nil || t.MaxBandwidth == nil {
		return 100000
	}
	return *t.MaxBandwidth
}

// GetMinBandwidth retrieves the value of the leaf MinBandwidth from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinBandwidth is set, it can
// safely use t.GetMinBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinBandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth) GetMinBandwidth() uint32 {
	if t == nil || t.MinBandwidth == nil {
		return 0
	}
	return *t.MinBandwidth
}

// GetMonitorBandwidth retrieves the value of the leaf MonitorBandwidth from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorBandwidth is set, it can
// safely use t.GetMonitorBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorBandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth) GetMonitorBandwidth() bool {
	if t == nil || t.MonitorBandwidth == nil {
		return false
	}
	return *t.MonitorBandwidth
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxBandwidth == nil {
		var v uint32 = 100000
		t.MaxBandwidth = &v
	}
	if t.MinBandwidth == nil {
		var v uint32 = 0
		t.MinBandwidth = &v
	}
	if t.MonitorBandwidth == nil {
		var v bool = false
		t.MonitorBandwidth = &v
	}
	t.AdjustDown.PopulateDefaults()
	t.AdjustUp.PopulateDefaults()
	t.Multipliers.PopulateDefaults()
	t.OverflowLimit.PopulateDefaults()
	t.UnderflowLimit.PopulateDefaults()
	t.UseLastAdjBw.PopulateDefaults()
	for _, e := range t.Fc {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_AdjustDown represents the /nokia-conf/configure/groups/group/router/mpls/lsp/auto-bandwidth/adjust-down YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_AdjustDown struct {
	Bw      *uint32 `path:"bw" module:"nokia-conf"`
	Percent *uint32 `path:"percent" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_AdjustDown implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_AdjustDown) IsYANGGoStruct() {}

// GetBw retrieves the value of the leaf Bw from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_AdjustDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bw is set, it can
// safely use t.GetBw() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bw == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_AdjustDown) GetBw() uint32 {
	if t == nil || t.Bw == nil {
		return 0
	}
	return *t.Bw
}

// GetPercent retrieves the value of the leaf Percent from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_AdjustDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Percent is set, it can
// safely use t.GetPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Percent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_AdjustDown) GetPercent() uint32 {
	if t == nil || t.Percent == nil {
		return 5
	}
	return *t.Percent
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_AdjustDown
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_AdjustDown) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Bw == nil {
		var v uint32 = 0
		t.Bw = &v
	}
	if t.Percent == nil {
		var v uint32 = 5
		t.Percent = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_AdjustDown) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_AdjustDown"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_AdjustDown) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_AdjustDown) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_AdjustDown.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_AdjustDown) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_AdjustUp represents the /nokia-conf/configure/groups/group/router/mpls/lsp/auto-bandwidth/adjust-up YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_AdjustUp struct {
	Bw      *uint32 `path:"bw" module:"nokia-conf"`
	Percent *uint32 `path:"percent" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_AdjustUp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_AdjustUp) IsYANGGoStruct() {}

// GetBw retrieves the value of the leaf Bw from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_AdjustUp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bw is set, it can
// safely use t.GetBw() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bw == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_AdjustUp) GetBw() uint32 {
	if t == nil || t.Bw == nil {
		return 0
	}
	return *t.Bw
}

// GetPercent retrieves the value of the leaf Percent from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_AdjustUp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Percent is set, it can
// safely use t.GetPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Percent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_AdjustUp) GetPercent() uint32 {
	if t == nil || t.Percent == nil {
		return 5
	}
	return *t.Percent
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_AdjustUp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_AdjustUp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Bw == nil {
		var v uint32 = 0
		t.Bw = &v
	}
	if t.Percent == nil {
		var v uint32 = 5
		t.Percent = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_AdjustUp) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_AdjustUp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_AdjustUp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_AdjustUp) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_AdjustUp.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_AdjustUp) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_Fc represents the /nokia-conf/configure/groups/group/router/mpls/lsp/auto-bandwidth/fc YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_Fc struct {
	FcName         NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_Fc_FcName_Union `path:"fc-name" module:"nokia-conf"`
	SamplingWeight *uint32                                                                        `path:"sampling-weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_Fc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_Fc) IsYANGGoStruct() {}

// GetFcName retrieves the value of the leaf FcName from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FcName is set, it can
// safely use t.GetFcName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FcName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_Fc) GetFcName() NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_Fc_FcName_Union {
	if t == nil || t.FcName == nil {
		return nil
	}
	return t.FcName
}

// GetSamplingWeight retrieves the value of the leaf SamplingWeight from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_Fc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SamplingWeight is set, it can
// safely use t.GetSamplingWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SamplingWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_Fc) GetSamplingWeight() uint32 {
	if t == nil || t.SamplingWeight == nil {
		return 100
	}
	return *t.SamplingWeight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_Fc
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_Fc) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SamplingWeight == nil {
		var v uint32 = 100
		t.SamplingWeight = &v
	}
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_Fc struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_Fc) Î›ListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"fc-name": t.FcName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_Fc) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_Fc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_Fc) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_Fc) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_Fc.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_Fc) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_Multipliers represents the /nokia-conf/configure/groups/group/router/mpls/lsp/auto-bandwidth/multipliers YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_Multipliers struct {
	AdjustMultiplier *uint32 `path:"adjust-multiplier" module:"nokia-conf"`
	SampleMultiplier *uint32 `path:"sample-multiplier" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_Multipliers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_Multipliers) IsYANGGoStruct() {}

// GetAdjustMultiplier retrieves the value of the leaf AdjustMultiplier from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_Multipliers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdjustMultiplier is set, it can
// safely use t.GetAdjustMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdjustMultiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_Multipliers) GetAdjustMultiplier() uint32 {
	if t == nil || t.AdjustMultiplier == nil {
		return 0
	}
	return *t.AdjustMultiplier
}

// GetSampleMultiplier retrieves the value of the leaf SampleMultiplier from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_Multipliers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SampleMultiplier is set, it can
// safely use t.GetSampleMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SampleMultiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_Multipliers) GetSampleMultiplier() uint32 {
	if t == nil || t.SampleMultiplier == nil {
		return 0
	}
	return *t.SampleMultiplier
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_Multipliers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_Multipliers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_Multipliers) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_Multipliers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_Multipliers) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_Multipliers) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_Multipliers.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_Multipliers) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_OverflowLimit represents the /nokia-conf/configure/groups/group/router/mpls/lsp/auto-bandwidth/overflow-limit YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_OverflowLimit struct {
	Bw        *uint32 `path:"bw" module:"nokia-conf"`
	Number    *uint32 `path:"number" module:"nokia-conf"`
	Threshold *uint32 `path:"threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_OverflowLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_OverflowLimit) IsYANGGoStruct() {
}

// GetBw retrieves the value of the leaf Bw from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_OverflowLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bw is set, it can
// safely use t.GetBw() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bw == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_OverflowLimit) GetBw() uint32 {
	if t == nil || t.Bw == nil {
		return 0
	}
	return *t.Bw
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_OverflowLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_OverflowLimit) GetNumber() uint32 {
	if t == nil || t.Number == nil {
		return 0
	}
	return *t.Number
}

// GetThreshold retrieves the value of the leaf Threshold from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_OverflowLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Threshold is set, it can
// safely use t.GetThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Threshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_OverflowLimit) GetThreshold() uint32 {
	if t == nil || t.Threshold == nil {
		return 0
	}
	return *t.Threshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_OverflowLimit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_OverflowLimit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Threshold == nil {
		var v uint32 = 0
		t.Threshold = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_OverflowLimit) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_OverflowLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_OverflowLimit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_OverflowLimit) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_OverflowLimit.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_OverflowLimit) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_UnderflowLimit represents the /nokia-conf/configure/groups/group/router/mpls/lsp/auto-bandwidth/underflow-limit YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_UnderflowLimit struct {
	Bw        *uint32 `path:"bw" module:"nokia-conf"`
	Number    *uint32 `path:"number" module:"nokia-conf"`
	Threshold *uint32 `path:"threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_UnderflowLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_UnderflowLimit) IsYANGGoStruct() {
}

// GetBw retrieves the value of the leaf Bw from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_UnderflowLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bw is set, it can
// safely use t.GetBw() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bw == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_UnderflowLimit) GetBw() uint32 {
	if t == nil || t.Bw == nil {
		return 0
	}
	return *t.Bw
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_UnderflowLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_UnderflowLimit) GetNumber() uint32 {
	if t == nil || t.Number == nil {
		return 0
	}
	return *t.Number
}

// GetThreshold retrieves the value of the leaf Threshold from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_UnderflowLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Threshold is set, it can
// safely use t.GetThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Threshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_UnderflowLimit) GetThreshold() uint32 {
	if t == nil || t.Threshold == nil {
		return 0
	}
	return *t.Threshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_UnderflowLimit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_UnderflowLimit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Threshold == nil {
		var v uint32 = 0
		t.Threshold = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_UnderflowLimit) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_UnderflowLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_UnderflowLimit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_UnderflowLimit) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_UnderflowLimit.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_UnderflowLimit) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_UseLastAdjBw represents the /nokia-conf/configure/groups/group/router/mpls/lsp/auto-bandwidth/use-last-adj-bw YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_UseLastAdjBw struct {
	SecondaryRetryLimit NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_UseLastAdjBw_SecondaryRetryLimit_Union `path:"secondary-retry-limit" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_UseLastAdjBw implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_UseLastAdjBw) IsYANGGoStruct() {
}

// GetSecondaryRetryLimit retrieves the value of the leaf SecondaryRetryLimit from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_UseLastAdjBw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecondaryRetryLimit is set, it can
// safely use t.GetSecondaryRetryLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecondaryRetryLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_UseLastAdjBw) GetSecondaryRetryLimit() NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_UseLastAdjBw_SecondaryRetryLimit_Union {
	if t == nil || t.SecondaryRetryLimit == nil {
		return UnionInt32(5)
	}
	return t.SecondaryRetryLimit
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_UseLastAdjBw
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_UseLastAdjBw) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SecondaryRetryLimit == nil {
		t.SecondaryRetryLimit = UnionInt32(5)
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_UseLastAdjBw) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_UseLastAdjBw"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_UseLastAdjBw) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_UseLastAdjBw) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_UseLastAdjBw.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_AutoBandwidth_UseLastAdjBw) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Bfd represents the /nokia-conf/configure/groups/group/router/mpls/lsp/bfd YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Bfd struct {
	BfdLiveness     *bool                                                                      `path:"bfd-liveness" module:"nokia-conf"`
	BfdTemplate     *string                                                                    `path:"bfd-template" module:"nokia-conf"`
	FailureAction   E_NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Bfd_FailureAction       `path:"failure-action" module:"nokia-conf"`
	LspPingInterval NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Bfd_LspPingInterval_Union `path:"lsp-ping-interval" module:"nokia-conf"`
	ReturnPathLabel *uint32                                                                    `path:"return-path-label" module:"nokia-conf"`
	WaitForUpTimer  *uint32                                                                    `path:"wait-for-up-timer" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Bfd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Bfd) IsYANGGoStruct() {}

// GetBfdLiveness retrieves the value of the leaf BfdLiveness from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdLiveness is set, it can
// safely use t.GetBfdLiveness() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdLiveness == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Bfd) GetBfdLiveness() bool {
	if t == nil || t.BfdLiveness == nil {
		return false
	}
	return *t.BfdLiveness
}

// GetBfdTemplate retrieves the value of the leaf BfdTemplate from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdTemplate is set, it can
// safely use t.GetBfdTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Bfd) GetBfdTemplate() string {
	if t == nil || t.BfdTemplate == nil {
		return ""
	}
	return *t.BfdTemplate
}

// GetFailureAction retrieves the value of the leaf FailureAction from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FailureAction is set, it can
// safely use t.GetFailureAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FailureAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Bfd) GetFailureAction() E_NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Bfd_FailureAction {
	if t == nil || t.FailureAction == 0 {
		return NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Bfd_FailureAction_none
	}
	return t.FailureAction
}

// GetLspPingInterval retrieves the value of the leaf LspPingInterval from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspPingInterval is set, it can
// safely use t.GetLspPingInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspPingInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Bfd) GetLspPingInterval() NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Bfd_LspPingInterval_Union {
	if t == nil || t.LspPingInterval == nil {
		return UnionUint32(60)
	}
	return t.LspPingInterval
}

// GetReturnPathLabel retrieves the value of the leaf ReturnPathLabel from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReturnPathLabel is set, it can
// safely use t.GetReturnPathLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReturnPathLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Bfd) GetReturnPathLabel() uint32 {
	if t == nil || t.ReturnPathLabel == nil {
		return 0
	}
	return *t.ReturnPathLabel
}

// GetWaitForUpTimer retrieves the value of the leaf WaitForUpTimer from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WaitForUpTimer is set, it can
// safely use t.GetWaitForUpTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WaitForUpTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Bfd) GetWaitForUpTimer() uint32 {
	if t == nil || t.WaitForUpTimer == nil {
		return 4
	}
	return *t.WaitForUpTimer
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Bfd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Bfd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BfdLiveness == nil {
		var v bool = false
		t.BfdLiveness = &v
	}
	if t.FailureAction == 0 {
		t.FailureAction = NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Bfd_FailureAction_none
	}
	if t.LspPingInterval == nil {
		t.LspPingInterval = UnionUint32(60)
	}
	if t.WaitForUpTimer == nil {
		var v uint32 = 4
		t.WaitForUpTimer = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Bfd) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Bfd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Bfd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Bfd) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Bfd.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Bfd) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_ClassForwarding represents the /nokia-conf/configure/groups/group/router/mpls/lsp/class-forwarding YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_ClassForwarding struct {
	DefaultLsp    *bool                                                                           `path:"default-lsp" module:"nokia-conf"`
	Fc            []E_NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_ClassForwarding_Fc         `path:"fc" module:"nokia-conf"`
	ForwardingSet *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_ClassForwarding_ForwardingSet `path:"forwarding-set" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_ClassForwarding implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_ClassForwarding) IsYANGGoStruct() {}

// GetOrCreateForwardingSet retrieves the value of the ForwardingSet field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_ClassForwarding) GetOrCreateForwardingSet() *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_ClassForwarding_ForwardingSet {
	if t.ForwardingSet != nil {
		return t.ForwardingSet
	}
	t.ForwardingSet = &NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_ClassForwarding_ForwardingSet{}
	return t.ForwardingSet
}

// GetForwardingSet returns the value of the ForwardingSet struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_ClassForwarding. If the receiver or the field ForwardingSet is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_ClassForwarding) GetForwardingSet() *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_ClassForwarding_ForwardingSet {
	if t != nil && t.ForwardingSet != nil {
		return t.ForwardingSet
	}
	return nil
}

// GetDefaultLsp retrieves the value of the leaf DefaultLsp from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_ClassForwarding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultLsp is set, it can
// safely use t.GetDefaultLsp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultLsp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_ClassForwarding) GetDefaultLsp() bool {
	if t == nil || t.DefaultLsp == nil {
		return false
	}
	return *t.DefaultLsp
}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_ClassForwarding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_ClassForwarding) GetFc() []E_NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_ClassForwarding_Fc {
	if t == nil || t.Fc == nil {
		return nil
	}
	return t.Fc
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_ClassForwarding
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_ClassForwarding) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DefaultLsp == nil {
		var v bool = false
		t.DefaultLsp = &v
	}
	t.ForwardingSet.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_ClassForwarding) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_ClassForwarding"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_ClassForwarding) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_ClassForwarding) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_ClassForwarding.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_ClassForwarding) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_ClassForwarding_ForwardingSet represents the /nokia-conf/configure/groups/group/router/mpls/lsp/class-forwarding/forwarding-set YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_ClassForwarding_ForwardingSet struct {
	Policy *string `path:"policy" module:"nokia-conf"`
	Set    *uint32 `path:"set" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_ClassForwarding_ForwardingSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_ClassForwarding_ForwardingSet) IsYANGGoStruct() {
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_ClassForwarding_ForwardingSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_ClassForwarding_ForwardingSet) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// GetSet retrieves the value of the leaf Set from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_ClassForwarding_ForwardingSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Set is set, it can
// safely use t.GetSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Set == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_ClassForwarding_ForwardingSet) GetSet() uint32 {
	if t == nil || t.Set == nil {
		return 0
	}
	return *t.Set
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_ClassForwarding_ForwardingSet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_ClassForwarding_ForwardingSet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_ClassForwarding_ForwardingSet) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_ClassForwarding_ForwardingSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_ClassForwarding_ForwardingSet) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_ClassForwarding_ForwardingSet) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_ClassForwarding_ForwardingSet.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_ClassForwarding_ForwardingSet) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Cspf represents the /nokia-conf/configure/groups/group/router/mpls/lsp/cspf YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Cspf struct {
	UseTeMetric *bool `path:"use-te-metric" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Cspf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Cspf) IsYANGGoStruct() {}

// GetUseTeMetric retrieves the value of the leaf UseTeMetric from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Cspf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseTeMetric is set, it can
// safely use t.GetUseTeMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseTeMetric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Cspf) GetUseTeMetric() bool {
	if t == nil || t.UseTeMetric == nil {
		return false
	}
	return *t.UseTeMetric
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Cspf
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Cspf) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.UseTeMetric == nil {
		var v bool = false
		t.UseTeMetric = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Cspf) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Cspf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Cspf) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Cspf) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Cspf.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Cspf) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_EgressStatistics represents the /nokia-conf/configure/groups/group/router/mpls/lsp/egress-statistics YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_EgressStatistics struct {
	AccountingPolicy *uint32                                                                      `path:"accounting-policy" module:"nokia-conf"`
	AdminState       E_NokiaTypesSros_AdminState                                                  `path:"admin-state" module:"nokia-conf"`
	CollectStats     *bool                                                                        `path:"collect-stats" module:"nokia-conf"`
	StatMode         E_NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_EgressStatistics_StatMode `path:"stat-mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_EgressStatistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_EgressStatistics) IsYANGGoStruct() {}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_EgressStatistics
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_EgressStatistics) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_EgressStatistics
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_EgressStatistics) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_EgressStatistics
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_EgressStatistics) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// GetStatMode retrieves the value of the leaf StatMode from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_EgressStatistics
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StatMode is set, it can
// safely use t.GetStatMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StatMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_EgressStatistics) GetStatMode() E_NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_EgressStatistics_StatMode {
	if t == nil || t.StatMode == 0 {
		return 0
	}
	return t.StatMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_EgressStatistics
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_EgressStatistics) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_EgressStatistics) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_EgressStatistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_EgressStatistics) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_EgressStatistics) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_EgressStatistics.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_EgressStatistics) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_FastReroute represents the /nokia-conf/configure/groups/group/router/mpls/lsp/fast-reroute YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_FastReroute struct {
	FrrMethod           E_NokiaTypesMpls_FrrMethodType `path:"frr-method" module:"nokia-conf"`
	HopLimit            *uint32                        `path:"hop-limit" module:"nokia-conf"`
	NodeProtect         *bool                          `path:"node-protect" module:"nokia-conf"`
	PropagateAdminGroup *bool                          `path:"propagate-admin-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_FastReroute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_FastReroute) IsYANGGoStruct() {}

// GetFrrMethod retrieves the value of the leaf FrrMethod from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_FastReroute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FrrMethod is set, it can
// safely use t.GetFrrMethod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FrrMethod == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_FastReroute) GetFrrMethod() E_NokiaTypesMpls_FrrMethodType {
	if t == nil || t.FrrMethod == 0 {
		return 0
	}
	return t.FrrMethod
}

// GetHopLimit retrieves the value of the leaf HopLimit from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_FastReroute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HopLimit is set, it can
// safely use t.GetHopLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HopLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_FastReroute) GetHopLimit() uint32 {
	if t == nil || t.HopLimit == nil {
		return 16
	}
	return *t.HopLimit
}

// GetNodeProtect retrieves the value of the leaf NodeProtect from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_FastReroute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NodeProtect is set, it can
// safely use t.GetNodeProtect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NodeProtect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_FastReroute) GetNodeProtect() bool {
	if t == nil || t.NodeProtect == nil {
		return false
	}
	return *t.NodeProtect
}

// GetPropagateAdminGroup retrieves the value of the leaf PropagateAdminGroup from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_FastReroute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PropagateAdminGroup is set, it can
// safely use t.GetPropagateAdminGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PropagateAdminGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_FastReroute) GetPropagateAdminGroup() bool {
	if t == nil || t.PropagateAdminGroup == nil {
		return false
	}
	return *t.PropagateAdminGroup
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_FastReroute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_FastReroute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HopLimit == nil {
		var v uint32 = 16
		t.HopLimit = &v
	}
	if t.PropagateAdminGroup == nil {
		var v bool = false
		t.PropagateAdminGroup = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_FastReroute) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_FastReroute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_FastReroute) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_FastReroute) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_FastReroute.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_FastReroute) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_IgpShortcut represents the /nokia-conf/configure/groups/group/router/mpls/lsp/igp-shortcut YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_IgpShortcut struct {
	AdminState     E_NokiaTypesSros_AdminState                                            `path:"admin-state" module:"nokia-conf"`
	LfaType        E_NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_IgpShortcut_LfaType `path:"lfa-type" module:"nokia-conf"`
	RelativeMetric *int32                                                                 `path:"relative-metric" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_IgpShortcut implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_IgpShortcut) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_IgpShortcut
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_IgpShortcut) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetLfaType retrieves the value of the leaf LfaType from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_IgpShortcut
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LfaType is set, it can
// safely use t.GetLfaType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LfaType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_IgpShortcut) GetLfaType() E_NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_IgpShortcut_LfaType {
	if t == nil || t.LfaType == 0 {
		return 0
	}
	return t.LfaType
}

// GetRelativeMetric retrieves the value of the leaf RelativeMetric from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_IgpShortcut
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RelativeMetric is set, it can
// safely use t.GetRelativeMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RelativeMetric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_IgpShortcut) GetRelativeMetric() int32 {
	if t == nil || t.RelativeMetric == nil {
		return 0
	}
	return *t.RelativeMetric
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_IgpShortcut
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_IgpShortcut) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_IgpShortcut) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_IgpShortcut"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_IgpShortcut) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_IgpShortcut) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_IgpShortcut.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_IgpShortcut) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_MaxSrLabels represents the /nokia-conf/configure/groups/group/router/mpls/lsp/max-sr-labels YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_MaxSrLabels struct {
	AdditionalFrrLabels *uint32 `path:"additional-frr-labels" module:"nokia-conf"`
	LabelStackSize      *uint32 `path:"label-stack-size" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_MaxSrLabels implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_MaxSrLabels) IsYANGGoStruct() {}

// GetAdditionalFrrLabels retrieves the value of the leaf AdditionalFrrLabels from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_MaxSrLabels
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdditionalFrrLabels is set, it can
// safely use t.GetAdditionalFrrLabels() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdditionalFrrLabels == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_MaxSrLabels) GetAdditionalFrrLabels() uint32 {
	if t == nil || t.AdditionalFrrLabels == nil {
		return 1
	}
	return *t.AdditionalFrrLabels
}

// GetLabelStackSize retrieves the value of the leaf LabelStackSize from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_MaxSrLabels
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelStackSize is set, it can
// safely use t.GetLabelStackSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelStackSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_MaxSrLabels) GetLabelStackSize() uint32 {
	if t == nil || t.LabelStackSize == nil {
		return 0
	}
	return *t.LabelStackSize
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_MaxSrLabels
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_MaxSrLabels) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdditionalFrrLabels == nil {
		var v uint32 = 1
		t.AdditionalFrrLabels = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_MaxSrLabels) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_MaxSrLabels"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_MaxSrLabels) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_MaxSrLabels) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_MaxSrLabels.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_MaxSrLabels) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PathProfile represents the /nokia-conf/configure/groups/group/router/mpls/lsp/path-profile YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PathProfile struct {
	PathGroup *uint32                                                                      `path:"path-group" module:"nokia-conf"`
	ProfileId NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PathProfile_ProfileId_Union `path:"profile-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PathProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PathProfile) IsYANGGoStruct() {}

// GetPathGroup retrieves the value of the leaf PathGroup from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PathProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathGroup is set, it can
// safely use t.GetPathGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PathProfile) GetPathGroup() uint32 {
	if t == nil || t.PathGroup == nil {
		return 0
	}
	return *t.PathGroup
}

// GetProfileId retrieves the value of the leaf ProfileId from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PathProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProfileId is set, it can
// safely use t.GetProfileId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProfileId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PathProfile) GetProfileId() NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PathProfile_ProfileId_Union {
	if t == nil || t.ProfileId == nil {
		return nil
	}
	return t.ProfileId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PathProfile
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PathProfile) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PathGroup == nil {
		var v uint32 = 0
		t.PathGroup = &v
	}
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PathProfile struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PathProfile) Î›ListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"profile-id": t.ProfileId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PathProfile) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PathProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PathProfile) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PathProfile) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PathProfile.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PathProfile) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary represents the /nokia-conf/configure/groups/group/router/mpls/lsp/primary YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary struct {
	Adaptive          *bool                                                                       `path:"adaptive" module:"nokia-conf"`
	AdminState        E_NokiaTypesSros_AdminState                                                 `path:"admin-state" module:"nokia-conf"`
	BackupClassType   *int32                                                                      `path:"backup-class-type" module:"nokia-conf"`
	Bandwidth         *uint32                                                                     `path:"bandwidth" module:"nokia-conf"`
	Bfd               *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_Bfd               `path:"bfd" module:"nokia-conf"`
	ClassType         *int32                                                                      `path:"class-type" module:"nokia-conf"`
	ExcludeAdminGroup *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_ExcludeAdminGroup `path:"exclude-admin-group" module:"nokia-conf" yangPresence:"true"`
	HopLimit          *uint32                                                                     `path:"hop-limit" module:"nokia-conf"`
	IncludeAdminGroup *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_IncludeAdminGroup `path:"include-admin-group" module:"nokia-conf" yangPresence:"true"`
	PathName          *string                                                                     `path:"path-name" module:"nokia-conf"`
	Priority          *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_Priority          `path:"priority" module:"nokia-conf"`
	Record            *bool                                                                       `path:"record" module:"nokia-conf"`
	RecordLabel       *bool                                                                       `path:"record-label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary) IsYANGGoStruct() {}

// GetOrCreateBfd retrieves the value of the Bfd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary) GetOrCreateBfd() *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_Bfd {
	if t.Bfd != nil {
		return t.Bfd
	}
	t.Bfd = &NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_Bfd{}
	return t.Bfd
}

// GetOrCreateExcludeAdminGroup retrieves the value of the ExcludeAdminGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary) GetOrCreateExcludeAdminGroup() *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_ExcludeAdminGroup {
	if t.ExcludeAdminGroup != nil {
		return t.ExcludeAdminGroup
	}
	t.ExcludeAdminGroup = &NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_ExcludeAdminGroup{}
	return t.ExcludeAdminGroup
}

// GetOrCreateIncludeAdminGroup retrieves the value of the IncludeAdminGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary) GetOrCreateIncludeAdminGroup() *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_IncludeAdminGroup {
	if t.IncludeAdminGroup != nil {
		return t.IncludeAdminGroup
	}
	t.IncludeAdminGroup = &NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_IncludeAdminGroup{}
	return t.IncludeAdminGroup
}

// GetOrCreatePriority retrieves the value of the Priority field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary) GetOrCreatePriority() *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_Priority {
	if t.Priority != nil {
		return t.Priority
	}
	t.Priority = &NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_Priority{}
	return t.Priority
}

// GetBfd returns the value of the Bfd struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary. If the receiver or the field Bfd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary) GetBfd() *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_Bfd {
	if t != nil && t.Bfd != nil {
		return t.Bfd
	}
	return nil
}

// GetExcludeAdminGroup returns the value of the ExcludeAdminGroup struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary. If the receiver or the field ExcludeAdminGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary) GetExcludeAdminGroup() *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_ExcludeAdminGroup {
	if t != nil && t.ExcludeAdminGroup != nil {
		return t.ExcludeAdminGroup
	}
	return nil
}

// GetIncludeAdminGroup returns the value of the IncludeAdminGroup struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary. If the receiver or the field IncludeAdminGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary) GetIncludeAdminGroup() *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_IncludeAdminGroup {
	if t != nil && t.IncludeAdminGroup != nil {
		return t.IncludeAdminGroup
	}
	return nil
}

// GetPriority returns the value of the Priority struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary. If the receiver or the field Priority is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary) GetPriority() *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_Priority {
	if t != nil && t.Priority != nil {
		return t.Priority
	}
	return nil
}

// GetAdaptive retrieves the value of the leaf Adaptive from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Adaptive is set, it can
// safely use t.GetAdaptive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Adaptive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary) GetAdaptive() bool {
	if t == nil || t.Adaptive == nil {
		return false
	}
	return *t.Adaptive
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetBackupClassType retrieves the value of the leaf BackupClassType from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BackupClassType is set, it can
// safely use t.GetBackupClassType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BackupClassType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary) GetBackupClassType() int32 {
	if t == nil || t.BackupClassType == nil {
		return 0
	}
	return *t.BackupClassType
}

// GetBandwidth retrieves the value of the leaf Bandwidth from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bandwidth is set, it can
// safely use t.GetBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary) GetBandwidth() uint32 {
	if t == nil || t.Bandwidth == nil {
		return 0
	}
	return *t.Bandwidth
}

// GetClassType retrieves the value of the leaf ClassType from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClassType is set, it can
// safely use t.GetClassType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClassType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary) GetClassType() int32 {
	if t == nil || t.ClassType == nil {
		return 0
	}
	return *t.ClassType
}

// GetHopLimit retrieves the value of the leaf HopLimit from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HopLimit is set, it can
// safely use t.GetHopLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HopLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary) GetHopLimit() uint32 {
	if t == nil || t.HopLimit == nil {
		return 0
	}
	return *t.HopLimit
}

// GetPathName retrieves the value of the leaf PathName from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathName is set, it can
// safely use t.GetPathName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary) GetPathName() string {
	if t == nil || t.PathName == nil {
		return ""
	}
	return *t.PathName
}

// GetRecord retrieves the value of the leaf Record from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Record is set, it can
// safely use t.GetRecord() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Record == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary) GetRecord() bool {
	if t == nil || t.Record == nil {
		return true
	}
	return *t.Record
}

// GetRecordLabel retrieves the value of the leaf RecordLabel from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RecordLabel is set, it can
// safely use t.GetRecordLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RecordLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary) GetRecordLabel() bool {
	if t == nil || t.RecordLabel == nil {
		return true
	}
	return *t.RecordLabel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Bandwidth == nil {
		var v uint32 = 0
		t.Bandwidth = &v
	}
	if t.Record == nil {
		var v bool = true
		t.Record = &v
	}
	if t.RecordLabel == nil {
		var v bool = true
		t.RecordLabel = &v
	}
	t.Bfd.PopulateDefaults()
	t.ExcludeAdminGroup.PopulateDefaults()
	t.IncludeAdminGroup.PopulateDefaults()
	t.Priority.PopulateDefaults()
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.PathName == nil {
		return nil, fmt.Errorf("nil value for key PathName")
	}

	return map[string]interface{}{
		"path-name": *t.PathName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance represents the /nokia-conf/configure/groups/group/router/mpls/lsp/primary-p2mp-instance YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance struct {
	Adaptive          *bool                                                                                                                                                              `path:"adaptive" module:"nokia-conf"`
	AdminState        E_NokiaTypesSros_AdminState                                                                                                                                        `path:"admin-state" module:"nokia-conf"`
	Bandwidth         *uint32                                                                                                                                                            `path:"bandwidth" module:"nokia-conf"`
	ExcludeAdminGroup *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_ExcludeAdminGroup                                                                            `path:"exclude-admin-group" module:"nokia-conf" yangPresence:"true"`
	HopLimit          *uint32                                                                                                                                                            `path:"hop-limit" module:"nokia-conf"`
	IncludeAdminGroup *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_IncludeAdminGroup                                                                            `path:"include-admin-group" module:"nokia-conf" yangPresence:"true"`
	InstanceName      *string                                                                                                                                                            `path:"instance-name" module:"nokia-conf"`
	Priority          *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_Priority                                                                                     `path:"priority" module:"nokia-conf"`
	Record            *bool                                                                                                                                                              `path:"record" module:"nokia-conf"`
	RecordLabel       *bool                                                                                                                                                              `path:"record-label" module:"nokia-conf"`
	S2LPath           map[NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_S2LPath_Key]*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_S2LPath `path:"s2l-path" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance) IsYANGGoStruct() {}

// NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_S2LPath_Key represents the key for list S2LPath of element /nokia-conf/configure/groups/group/router/mpls/lsp/primary-p2mp-instance.
type NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_S2LPath_Key struct {
	PathName string `path:"path-name"`
	To       string `path:"to"`
}

// NewS2LPath creates a new entry in the S2LPath list of the
// NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance) NewS2LPath(PathName string, To string) (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_S2LPath, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.S2LPath == nil {
		t.S2LPath = make(map[NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_S2LPath_Key]*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_S2LPath)
	}

	key := NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_S2LPath_Key{
		PathName: PathName,
		To:       To,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.S2LPath[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list S2LPath", key)
	}

	t.S2LPath[key] = &NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_S2LPath{
		PathName: &PathName,
		To:       &To,
	}

	return t.S2LPath[key], nil
}

// RenameS2LPath renames an entry in the list S2LPath within
// the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance) RenameS2LPath(oldK, newK NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_S2LPath_Key) error {
	if _, ok := t.S2LPath[newK]; ok {
		return fmt.Errorf("key %v already exists in S2LPath", newK)
	}

	e, ok := t.S2LPath[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in S2LPath", oldK)
	}
	e.PathName = &newK.PathName
	e.To = &newK.To

	t.S2LPath[newK] = e
	delete(t.S2LPath, oldK)
	return nil
}

// GetOrCreateS2LPath retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance) GetOrCreateS2LPath(PathName string, To string) *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_S2LPath {

	key := NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_S2LPath_Key{
		PathName: PathName,
		To:       To,
	}

	if v, ok := t.S2LPath[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewS2LPath(PathName, To)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateS2LPath got unexpected error: %v", err))
	}
	return v
}

// GetS2LPath retrieves the value with the specified key from
// the S2LPath map field of NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance) GetS2LPath(PathName string, To string) *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_S2LPath {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_S2LPath_Key{
		PathName: PathName,
		To:       To,
	}

	if lm, ok := t.S2LPath[key]; ok {
		return lm
	}
	return nil
}

// DeleteS2LPath deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance) DeleteS2LPath(PathName string, To string) {
	key := NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_S2LPath_Key{
		PathName: PathName,
		To:       To,
	}

	delete(t.S2LPath, key)
}

// AppendS2LPath appends the supplied NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_S2LPath struct to the
// list S2LPath of NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_S2LPath already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance) AppendS2LPath(v *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_S2LPath) error {
	if v.PathName == nil {
		return fmt.Errorf("invalid nil key for PathName")
	}

	if v.To == nil {
		return fmt.Errorf("invalid nil key for To")
	}

	key := NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_S2LPath_Key{
		PathName: *v.PathName,
		To:       *v.To,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.S2LPath == nil {
		t.S2LPath = make(map[NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_S2LPath_Key]*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_S2LPath)
	}

	if _, ok := t.S2LPath[key]; ok {
		return fmt.Errorf("duplicate key for list S2LPath %v", key)
	}

	t.S2LPath[key] = v
	return nil
}

// GetOrCreateExcludeAdminGroup retrieves the value of the ExcludeAdminGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance) GetOrCreateExcludeAdminGroup() *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_ExcludeAdminGroup {
	if t.ExcludeAdminGroup != nil {
		return t.ExcludeAdminGroup
	}
	t.ExcludeAdminGroup = &NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_ExcludeAdminGroup{}
	return t.ExcludeAdminGroup
}

// GetOrCreateIncludeAdminGroup retrieves the value of the IncludeAdminGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance) GetOrCreateIncludeAdminGroup() *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_IncludeAdminGroup {
	if t.IncludeAdminGroup != nil {
		return t.IncludeAdminGroup
	}
	t.IncludeAdminGroup = &NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_IncludeAdminGroup{}
	return t.IncludeAdminGroup
}

// GetOrCreatePriority retrieves the value of the Priority field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance) GetOrCreatePriority() *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_Priority {
	if t.Priority != nil {
		return t.Priority
	}
	t.Priority = &NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_Priority{}
	return t.Priority
}

// GetExcludeAdminGroup returns the value of the ExcludeAdminGroup struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance. If the receiver or the field ExcludeAdminGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance) GetExcludeAdminGroup() *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_ExcludeAdminGroup {
	if t != nil && t.ExcludeAdminGroup != nil {
		return t.ExcludeAdminGroup
	}
	return nil
}

// GetIncludeAdminGroup returns the value of the IncludeAdminGroup struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance. If the receiver or the field IncludeAdminGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance) GetIncludeAdminGroup() *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_IncludeAdminGroup {
	if t != nil && t.IncludeAdminGroup != nil {
		return t.IncludeAdminGroup
	}
	return nil
}

// GetPriority returns the value of the Priority struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance. If the receiver or the field Priority is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance) GetPriority() *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_Priority {
	if t != nil && t.Priority != nil {
		return t.Priority
	}
	return nil
}

// GetAdaptive retrieves the value of the leaf Adaptive from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Adaptive is set, it can
// safely use t.GetAdaptive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Adaptive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance) GetAdaptive() bool {
	if t == nil || t.Adaptive == nil {
		return false
	}
	return *t.Adaptive
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetBandwidth retrieves the value of the leaf Bandwidth from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bandwidth is set, it can
// safely use t.GetBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance) GetBandwidth() uint32 {
	if t == nil || t.Bandwidth == nil {
		return 0
	}
	return *t.Bandwidth
}

// GetHopLimit retrieves the value of the leaf HopLimit from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HopLimit is set, it can
// safely use t.GetHopLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HopLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance) GetHopLimit() uint32 {
	if t == nil || t.HopLimit == nil {
		return 0
	}
	return *t.HopLimit
}

// GetInstanceName retrieves the value of the leaf InstanceName from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InstanceName is set, it can
// safely use t.GetInstanceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InstanceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance) GetInstanceName() string {
	if t == nil || t.InstanceName == nil {
		return ""
	}
	return *t.InstanceName
}

// GetRecord retrieves the value of the leaf Record from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Record is set, it can
// safely use t.GetRecord() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Record == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance) GetRecord() bool {
	if t == nil || t.Record == nil {
		return true
	}
	return *t.Record
}

// GetRecordLabel retrieves the value of the leaf RecordLabel from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RecordLabel is set, it can
// safely use t.GetRecordLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RecordLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance) GetRecordLabel() bool {
	if t == nil || t.RecordLabel == nil {
		return true
	}
	return *t.RecordLabel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Bandwidth == nil {
		var v uint32 = 0
		t.Bandwidth = &v
	}
	if t.Record == nil {
		var v bool = true
		t.Record = &v
	}
	if t.RecordLabel == nil {
		var v bool = true
		t.RecordLabel = &v
	}
	t.ExcludeAdminGroup.PopulateDefaults()
	t.IncludeAdminGroup.PopulateDefaults()
	t.Priority.PopulateDefaults()
	for _, e := range t.S2LPath {
		e.PopulateDefaults()
	}
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.InstanceName == nil {
		return nil, fmt.Errorf("nil value for key InstanceName")
	}

	return map[string]interface{}{
		"instance-name": *t.InstanceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_ExcludeAdminGroup represents the /nokia-conf/configure/groups/group/router/mpls/lsp/primary-p2mp-instance/exclude-admin-group YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_ExcludeAdminGroup struct {
	Group []string `path:"group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_ExcludeAdminGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_ExcludeAdminGroup) IsYANGGoStruct() {
}

// GetGroup retrieves the value of the leaf Group from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_ExcludeAdminGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Group is set, it can
// safely use t.GetGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Group == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_ExcludeAdminGroup) GetGroup() []string {
	if t == nil || t.Group == nil {
		return nil
	}
	return t.Group
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_ExcludeAdminGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_ExcludeAdminGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_ExcludeAdminGroup) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_ExcludeAdminGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_ExcludeAdminGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_ExcludeAdminGroup) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_ExcludeAdminGroup.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_ExcludeAdminGroup) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_IncludeAdminGroup represents the /nokia-conf/configure/groups/group/router/mpls/lsp/primary-p2mp-instance/include-admin-group YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_IncludeAdminGroup struct {
	Group []string `path:"group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_IncludeAdminGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_IncludeAdminGroup) IsYANGGoStruct() {
}

// GetGroup retrieves the value of the leaf Group from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_IncludeAdminGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Group is set, it can
// safely use t.GetGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Group == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_IncludeAdminGroup) GetGroup() []string {
	if t == nil || t.Group == nil {
		return nil
	}
	return t.Group
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_IncludeAdminGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_IncludeAdminGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_IncludeAdminGroup) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_IncludeAdminGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_IncludeAdminGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_IncludeAdminGroup) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_IncludeAdminGroup.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_IncludeAdminGroup) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_Priority represents the /nokia-conf/configure/groups/group/router/mpls/lsp/primary-p2mp-instance/priority YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_Priority struct {
	HoldPriority  *int32 `path:"hold-priority" module:"nokia-conf"`
	SetupPriority *int32 `path:"setup-priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_Priority implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_Priority) IsYANGGoStruct() {
}

// GetHoldPriority retrieves the value of the leaf HoldPriority from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldPriority is set, it can
// safely use t.GetHoldPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldPriority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_Priority) GetHoldPriority() int32 {
	if t == nil || t.HoldPriority == nil {
		return 0
	}
	return *t.HoldPriority
}

// GetSetupPriority retrieves the value of the leaf SetupPriority from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetupPriority is set, it can
// safely use t.GetSetupPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetupPriority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_Priority) GetSetupPriority() int32 {
	if t == nil || t.SetupPriority == nil {
		return 7
	}
	return *t.SetupPriority
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_Priority
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_Priority) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HoldPriority == nil {
		var v int32 = 0
		t.HoldPriority = &v
	}
	if t.SetupPriority == nil {
		var v int32 = 7
		t.SetupPriority = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_Priority) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_Priority"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_Priority) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_Priority) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_Priority.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_Priority) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_S2LPath represents the /nokia-conf/configure/groups/group/router/mpls/lsp/primary-p2mp-instance/s2l-path YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_S2LPath struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	PathName   *string                     `path:"path-name" module:"nokia-conf"`
	To         *string                     `path:"to" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_S2LPath implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_S2LPath) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_S2LPath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_S2LPath) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetPathName retrieves the value of the leaf PathName from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_S2LPath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathName is set, it can
// safely use t.GetPathName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_S2LPath) GetPathName() string {
	if t == nil || t.PathName == nil {
		return ""
	}
	return *t.PathName
}

// GetTo retrieves the value of the leaf To from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_S2LPath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if To is set, it can
// safely use t.GetTo() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.To == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_S2LPath) GetTo() string {
	if t == nil || t.To == nil {
		return ""
	}
	return *t.To
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_S2LPath
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_S2LPath) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_S2LPath struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_S2LPath) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.PathName == nil {
		return nil, fmt.Errorf("nil value for key PathName")
	}

	if t.To == nil {
		return nil, fmt.Errorf("nil value for key To")
	}

	return map[string]interface{}{
		"path-name": *t.PathName,
		"to":        *t.To,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_S2LPath) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_S2LPath"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_S2LPath) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_S2LPath) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_S2LPath.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_PrimaryP2MpInstance_S2LPath) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_Bfd represents the /nokia-conf/configure/groups/group/router/mpls/lsp/primary/bfd YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_Bfd struct {
	BfdLiveness     *bool                                                                              `path:"bfd-liveness" module:"nokia-conf"`
	BfdTemplate     *string                                                                            `path:"bfd-template" module:"nokia-conf"`
	LspPingInterval NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_Bfd_LspPingInterval_Union `path:"lsp-ping-interval" module:"nokia-conf"`
	ReturnPathLabel *uint32                                                                            `path:"return-path-label" module:"nokia-conf"`
	WaitForUpTimer  *uint32                                                                            `path:"wait-for-up-timer" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_Bfd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_Bfd) IsYANGGoStruct() {}

// GetBfdLiveness retrieves the value of the leaf BfdLiveness from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdLiveness is set, it can
// safely use t.GetBfdLiveness() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdLiveness == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_Bfd) GetBfdLiveness() bool {
	if t == nil || t.BfdLiveness == nil {
		return false
	}
	return *t.BfdLiveness
}

// GetBfdTemplate retrieves the value of the leaf BfdTemplate from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdTemplate is set, it can
// safely use t.GetBfdTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_Bfd) GetBfdTemplate() string {
	if t == nil || t.BfdTemplate == nil {
		return ""
	}
	return *t.BfdTemplate
}

// GetLspPingInterval retrieves the value of the leaf LspPingInterval from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspPingInterval is set, it can
// safely use t.GetLspPingInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspPingInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_Bfd) GetLspPingInterval() NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_Bfd_LspPingInterval_Union {
	if t == nil || t.LspPingInterval == nil {
		return UnionUint32(60)
	}
	return t.LspPingInterval
}

// GetReturnPathLabel retrieves the value of the leaf ReturnPathLabel from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReturnPathLabel is set, it can
// safely use t.GetReturnPathLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReturnPathLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_Bfd) GetReturnPathLabel() uint32 {
	if t == nil || t.ReturnPathLabel == nil {
		return 0
	}
	return *t.ReturnPathLabel
}

// GetWaitForUpTimer retrieves the value of the leaf WaitForUpTimer from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WaitForUpTimer is set, it can
// safely use t.GetWaitForUpTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WaitForUpTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_Bfd) GetWaitForUpTimer() uint32 {
	if t == nil || t.WaitForUpTimer == nil {
		return 4
	}
	return *t.WaitForUpTimer
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_Bfd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_Bfd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BfdLiveness == nil {
		var v bool = false
		t.BfdLiveness = &v
	}
	if t.LspPingInterval == nil {
		t.LspPingInterval = UnionUint32(60)
	}
	if t.WaitForUpTimer == nil {
		var v uint32 = 4
		t.WaitForUpTimer = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_Bfd) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_Bfd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_Bfd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_Bfd) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_Bfd.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_Bfd) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_ExcludeAdminGroup represents the /nokia-conf/configure/groups/group/router/mpls/lsp/primary/exclude-admin-group YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_ExcludeAdminGroup struct {
	Group []string `path:"group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_ExcludeAdminGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_ExcludeAdminGroup) IsYANGGoStruct() {}

// GetGroup retrieves the value of the leaf Group from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_ExcludeAdminGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Group is set, it can
// safely use t.GetGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Group == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_ExcludeAdminGroup) GetGroup() []string {
	if t == nil || t.Group == nil {
		return nil
	}
	return t.Group
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_ExcludeAdminGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_ExcludeAdminGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_ExcludeAdminGroup) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_ExcludeAdminGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_ExcludeAdminGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_ExcludeAdminGroup) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_ExcludeAdminGroup.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_ExcludeAdminGroup) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_IncludeAdminGroup represents the /nokia-conf/configure/groups/group/router/mpls/lsp/primary/include-admin-group YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_IncludeAdminGroup struct {
	Group []string `path:"group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_IncludeAdminGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_IncludeAdminGroup) IsYANGGoStruct() {}

// GetGroup retrieves the value of the leaf Group from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_IncludeAdminGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Group is set, it can
// safely use t.GetGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Group == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_IncludeAdminGroup) GetGroup() []string {
	if t == nil || t.Group == nil {
		return nil
	}
	return t.Group
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_IncludeAdminGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_IncludeAdminGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_IncludeAdminGroup) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_IncludeAdminGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_IncludeAdminGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_IncludeAdminGroup) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_IncludeAdminGroup.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_IncludeAdminGroup) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_Priority represents the /nokia-conf/configure/groups/group/router/mpls/lsp/primary/priority YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_Priority struct {
	HoldPriority  *int32 `path:"hold-priority" module:"nokia-conf"`
	SetupPriority *int32 `path:"setup-priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_Priority implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_Priority) IsYANGGoStruct() {}

// GetHoldPriority retrieves the value of the leaf HoldPriority from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldPriority is set, it can
// safely use t.GetHoldPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldPriority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_Priority) GetHoldPriority() int32 {
	if t == nil || t.HoldPriority == nil {
		return 0
	}
	return *t.HoldPriority
}

// GetSetupPriority retrieves the value of the leaf SetupPriority from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetupPriority is set, it can
// safely use t.GetSetupPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetupPriority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_Priority) GetSetupPriority() int32 {
	if t == nil || t.SetupPriority == nil {
		return 7
	}
	return *t.SetupPriority
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_Priority
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_Priority) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HoldPriority == nil {
		var v int32 = 0
		t.HoldPriority = &v
	}
	if t.SetupPriority == nil {
		var v int32 = 7
		t.SetupPriority = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_Priority) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_Priority"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_Priority) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_Priority) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_Priority.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Primary_Priority) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary represents the /nokia-conf/configure/groups/group/router/mpls/lsp/secondary YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary struct {
	Adaptive          *bool                                                                         `path:"adaptive" module:"nokia-conf"`
	AdminState        E_NokiaTypesSros_AdminState                                                   `path:"admin-state" module:"nokia-conf"`
	Bandwidth         *uint32                                                                       `path:"bandwidth" module:"nokia-conf"`
	Bfd               *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_Bfd               `path:"bfd" module:"nokia-conf"`
	ClassType         *int32                                                                        `path:"class-type" module:"nokia-conf"`
	ExcludeAdminGroup *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_ExcludeAdminGroup `path:"exclude-admin-group" module:"nokia-conf" yangPresence:"true"`
	HopLimit          *uint32                                                                       `path:"hop-limit" module:"nokia-conf"`
	IncludeAdminGroup *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_IncludeAdminGroup `path:"include-admin-group" module:"nokia-conf" yangPresence:"true"`
	PathName          *string                                                                       `path:"path-name" module:"nokia-conf"`
	PathPreference    *int32                                                                        `path:"path-preference" module:"nokia-conf"`
	Priority          *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_Priority          `path:"priority" module:"nokia-conf"`
	Record            *bool                                                                         `path:"record" module:"nokia-conf"`
	RecordLabel       *bool                                                                         `path:"record-label" module:"nokia-conf"`
	Srlg              *bool                                                                         `path:"srlg" module:"nokia-conf"`
	Standby           *bool                                                                         `path:"standby" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary) IsYANGGoStruct() {}

// GetOrCreateBfd retrieves the value of the Bfd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary) GetOrCreateBfd() *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_Bfd {
	if t.Bfd != nil {
		return t.Bfd
	}
	t.Bfd = &NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_Bfd{}
	return t.Bfd
}

// GetOrCreateExcludeAdminGroup retrieves the value of the ExcludeAdminGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary) GetOrCreateExcludeAdminGroup() *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_ExcludeAdminGroup {
	if t.ExcludeAdminGroup != nil {
		return t.ExcludeAdminGroup
	}
	t.ExcludeAdminGroup = &NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_ExcludeAdminGroup{}
	return t.ExcludeAdminGroup
}

// GetOrCreateIncludeAdminGroup retrieves the value of the IncludeAdminGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary) GetOrCreateIncludeAdminGroup() *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_IncludeAdminGroup {
	if t.IncludeAdminGroup != nil {
		return t.IncludeAdminGroup
	}
	t.IncludeAdminGroup = &NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_IncludeAdminGroup{}
	return t.IncludeAdminGroup
}

// GetOrCreatePriority retrieves the value of the Priority field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary) GetOrCreatePriority() *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_Priority {
	if t.Priority != nil {
		return t.Priority
	}
	t.Priority = &NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_Priority{}
	return t.Priority
}

// GetBfd returns the value of the Bfd struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary. If the receiver or the field Bfd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary) GetBfd() *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_Bfd {
	if t != nil && t.Bfd != nil {
		return t.Bfd
	}
	return nil
}

// GetExcludeAdminGroup returns the value of the ExcludeAdminGroup struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary. If the receiver or the field ExcludeAdminGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary) GetExcludeAdminGroup() *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_ExcludeAdminGroup {
	if t != nil && t.ExcludeAdminGroup != nil {
		return t.ExcludeAdminGroup
	}
	return nil
}

// GetIncludeAdminGroup returns the value of the IncludeAdminGroup struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary. If the receiver or the field IncludeAdminGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary) GetIncludeAdminGroup() *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_IncludeAdminGroup {
	if t != nil && t.IncludeAdminGroup != nil {
		return t.IncludeAdminGroup
	}
	return nil
}

// GetPriority returns the value of the Priority struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary. If the receiver or the field Priority is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary) GetPriority() *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_Priority {
	if t != nil && t.Priority != nil {
		return t.Priority
	}
	return nil
}

// GetAdaptive retrieves the value of the leaf Adaptive from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Adaptive is set, it can
// safely use t.GetAdaptive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Adaptive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary) GetAdaptive() bool {
	if t == nil || t.Adaptive == nil {
		return false
	}
	return *t.Adaptive
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetBandwidth retrieves the value of the leaf Bandwidth from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bandwidth is set, it can
// safely use t.GetBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary) GetBandwidth() uint32 {
	if t == nil || t.Bandwidth == nil {
		return 0
	}
	return *t.Bandwidth
}

// GetClassType retrieves the value of the leaf ClassType from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClassType is set, it can
// safely use t.GetClassType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClassType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary) GetClassType() int32 {
	if t == nil || t.ClassType == nil {
		return 0
	}
	return *t.ClassType
}

// GetHopLimit retrieves the value of the leaf HopLimit from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HopLimit is set, it can
// safely use t.GetHopLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HopLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary) GetHopLimit() uint32 {
	if t == nil || t.HopLimit == nil {
		return 0
	}
	return *t.HopLimit
}

// GetPathName retrieves the value of the leaf PathName from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathName is set, it can
// safely use t.GetPathName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary) GetPathName() string {
	if t == nil || t.PathName == nil {
		return ""
	}
	return *t.PathName
}

// GetPathPreference retrieves the value of the leaf PathPreference from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathPreference is set, it can
// safely use t.GetPathPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathPreference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary) GetPathPreference() int32 {
	if t == nil || t.PathPreference == nil {
		return 255
	}
	return *t.PathPreference
}

// GetRecord retrieves the value of the leaf Record from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Record is set, it can
// safely use t.GetRecord() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Record == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary) GetRecord() bool {
	if t == nil || t.Record == nil {
		return true
	}
	return *t.Record
}

// GetRecordLabel retrieves the value of the leaf RecordLabel from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RecordLabel is set, it can
// safely use t.GetRecordLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RecordLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary) GetRecordLabel() bool {
	if t == nil || t.RecordLabel == nil {
		return true
	}
	return *t.RecordLabel
}

// GetSrlg retrieves the value of the leaf Srlg from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Srlg is set, it can
// safely use t.GetSrlg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Srlg == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary) GetSrlg() bool {
	if t == nil || t.Srlg == nil {
		return false
	}
	return *t.Srlg
}

// GetStandby retrieves the value of the leaf Standby from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Standby is set, it can
// safely use t.GetStandby() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Standby == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary) GetStandby() bool {
	if t == nil || t.Standby == nil {
		return false
	}
	return *t.Standby
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Bandwidth == nil {
		var v uint32 = 0
		t.Bandwidth = &v
	}
	if t.PathPreference == nil {
		var v int32 = 255
		t.PathPreference = &v
	}
	if t.Record == nil {
		var v bool = true
		t.Record = &v
	}
	if t.RecordLabel == nil {
		var v bool = true
		t.RecordLabel = &v
	}
	if t.Srlg == nil {
		var v bool = false
		t.Srlg = &v
	}
	if t.Standby == nil {
		var v bool = false
		t.Standby = &v
	}
	t.Bfd.PopulateDefaults()
	t.ExcludeAdminGroup.PopulateDefaults()
	t.IncludeAdminGroup.PopulateDefaults()
	t.Priority.PopulateDefaults()
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.PathName == nil {
		return nil, fmt.Errorf("nil value for key PathName")
	}

	return map[string]interface{}{
		"path-name": *t.PathName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_Bfd represents the /nokia-conf/configure/groups/group/router/mpls/lsp/secondary/bfd YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_Bfd struct {
	BfdLiveness     *bool                                                                                `path:"bfd-liveness" module:"nokia-conf"`
	BfdTemplate     *string                                                                              `path:"bfd-template" module:"nokia-conf"`
	LspPingInterval NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_Bfd_LspPingInterval_Union `path:"lsp-ping-interval" module:"nokia-conf"`
	ReturnPathLabel *uint32                                                                              `path:"return-path-label" module:"nokia-conf"`
	WaitForUpTimer  *uint32                                                                              `path:"wait-for-up-timer" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_Bfd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_Bfd) IsYANGGoStruct() {}

// GetBfdLiveness retrieves the value of the leaf BfdLiveness from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdLiveness is set, it can
// safely use t.GetBfdLiveness() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdLiveness == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_Bfd) GetBfdLiveness() bool {
	if t == nil || t.BfdLiveness == nil {
		return false
	}
	return *t.BfdLiveness
}

// GetBfdTemplate retrieves the value of the leaf BfdTemplate from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdTemplate is set, it can
// safely use t.GetBfdTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_Bfd) GetBfdTemplate() string {
	if t == nil || t.BfdTemplate == nil {
		return ""
	}
	return *t.BfdTemplate
}

// GetLspPingInterval retrieves the value of the leaf LspPingInterval from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspPingInterval is set, it can
// safely use t.GetLspPingInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspPingInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_Bfd) GetLspPingInterval() NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_Bfd_LspPingInterval_Union {
	if t == nil || t.LspPingInterval == nil {
		return UnionUint32(60)
	}
	return t.LspPingInterval
}

// GetReturnPathLabel retrieves the value of the leaf ReturnPathLabel from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReturnPathLabel is set, it can
// safely use t.GetReturnPathLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReturnPathLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_Bfd) GetReturnPathLabel() uint32 {
	if t == nil || t.ReturnPathLabel == nil {
		return 0
	}
	return *t.ReturnPathLabel
}

// GetWaitForUpTimer retrieves the value of the leaf WaitForUpTimer from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_Bfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WaitForUpTimer is set, it can
// safely use t.GetWaitForUpTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WaitForUpTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_Bfd) GetWaitForUpTimer() uint32 {
	if t == nil || t.WaitForUpTimer == nil {
		return 4
	}
	return *t.WaitForUpTimer
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_Bfd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_Bfd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BfdLiveness == nil {
		var v bool = false
		t.BfdLiveness = &v
	}
	if t.LspPingInterval == nil {
		t.LspPingInterval = UnionUint32(60)
	}
	if t.WaitForUpTimer == nil {
		var v uint32 = 4
		t.WaitForUpTimer = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_Bfd) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_Bfd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_Bfd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_Bfd) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_Bfd.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_Bfd) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_ExcludeAdminGroup represents the /nokia-conf/configure/groups/group/router/mpls/lsp/secondary/exclude-admin-group YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_ExcludeAdminGroup struct {
	Group []string `path:"group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_ExcludeAdminGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_ExcludeAdminGroup) IsYANGGoStruct() {
}

// GetGroup retrieves the value of the leaf Group from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_ExcludeAdminGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Group is set, it can
// safely use t.GetGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Group == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_ExcludeAdminGroup) GetGroup() []string {
	if t == nil || t.Group == nil {
		return nil
	}
	return t.Group
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_ExcludeAdminGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_ExcludeAdminGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_ExcludeAdminGroup) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_ExcludeAdminGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_ExcludeAdminGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_ExcludeAdminGroup) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_ExcludeAdminGroup.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_ExcludeAdminGroup) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_IncludeAdminGroup represents the /nokia-conf/configure/groups/group/router/mpls/lsp/secondary/include-admin-group YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_IncludeAdminGroup struct {
	Group []string `path:"group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_IncludeAdminGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_IncludeAdminGroup) IsYANGGoStruct() {
}

// GetGroup retrieves the value of the leaf Group from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_IncludeAdminGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Group is set, it can
// safely use t.GetGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Group == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_IncludeAdminGroup) GetGroup() []string {
	if t == nil || t.Group == nil {
		return nil
	}
	return t.Group
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_IncludeAdminGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_IncludeAdminGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_IncludeAdminGroup) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_IncludeAdminGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_IncludeAdminGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_IncludeAdminGroup) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_IncludeAdminGroup.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_IncludeAdminGroup) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_Priority represents the /nokia-conf/configure/groups/group/router/mpls/lsp/secondary/priority YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_Priority struct {
	HoldPriority  *int32 `path:"hold-priority" module:"nokia-conf"`
	SetupPriority *int32 `path:"setup-priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_Priority implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_Priority) IsYANGGoStruct() {}

// GetHoldPriority retrieves the value of the leaf HoldPriority from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldPriority is set, it can
// safely use t.GetHoldPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldPriority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_Priority) GetHoldPriority() int32 {
	if t == nil || t.HoldPriority == nil {
		return 0
	}
	return *t.HoldPriority
}

// GetSetupPriority retrieves the value of the leaf SetupPriority from the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetupPriority is set, it can
// safely use t.GetSetupPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetupPriority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_Priority) GetSetupPriority() int32 {
	if t == nil || t.SetupPriority == nil {
		return 7
	}
	return *t.SetupPriority
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_Priority
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_Priority) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HoldPriority == nil {
		var v int32 = 0
		t.HoldPriority = &v
	}
	if t.SetupPriority == nil {
		var v int32 = 7
		t.SetupPriority = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_Priority) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_Priority"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_Priority) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_Priority) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_Priority.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Lsp_Secondary_Priority) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_Path represents the /nokia-conf/configure/groups/group/router/mpls/path YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_Path struct {
	AdminState E_NokiaTypesSros_AdminState                                                                                                     `path:"admin-state" module:"nokia-conf"`
	Hop        map[NokiaConf_Configure_Groups_Group_Router_Mpls_Path_Hop_HopIndex_Union]*NokiaConf_Configure_Groups_Group_Router_Mpls_Path_Hop `path:"hop" module:"nokia-conf"`
	PathName   *string                                                                                                                         `path:"path-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_Path implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Path) IsYANGGoStruct() {}

// NewHop creates a new entry in the Hop list of the
// NokiaConf_Configure_Groups_Group_Router_Mpls_Path struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Path) NewHop(HopIndex NokiaConf_Configure_Groups_Group_Router_Mpls_Path_Hop_HopIndex_Union) (*NokiaConf_Configure_Groups_Group_Router_Mpls_Path_Hop, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Hop == nil {
		t.Hop = make(map[NokiaConf_Configure_Groups_Group_Router_Mpls_Path_Hop_HopIndex_Union]*NokiaConf_Configure_Groups_Group_Router_Mpls_Path_Hop)
	}

	key := HopIndex

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Hop[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Hop", key)
	}

	t.Hop[key] = &NokiaConf_Configure_Groups_Group_Router_Mpls_Path_Hop{
		HopIndex: HopIndex,
	}

	return t.Hop[key], nil
}

// RenameHop renames an entry in the list Hop within
// the NokiaConf_Configure_Groups_Group_Router_Mpls_Path struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Path) RenameHop(oldK, newK NokiaConf_Configure_Groups_Group_Router_Mpls_Path_Hop_HopIndex_Union) error {
	if _, ok := t.Hop[newK]; ok {
		return fmt.Errorf("key %v already exists in Hop", newK)
	}

	e, ok := t.Hop[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Hop", oldK)
	}
	e.HopIndex = newK

	t.Hop[newK] = e
	delete(t.Hop, oldK)
	return nil
}

// GetOrCreateHop retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mpls_Path. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Path) GetOrCreateHop(HopIndex NokiaConf_Configure_Groups_Group_Router_Mpls_Path_Hop_HopIndex_Union) *NokiaConf_Configure_Groups_Group_Router_Mpls_Path_Hop {

	key := HopIndex

	if v, ok := t.Hop[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHop(HopIndex)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHop got unexpected error: %v", err))
	}
	return v
}

// GetHop retrieves the value with the specified key from
// the Hop map field of NokiaConf_Configure_Groups_Group_Router_Mpls_Path. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Path) GetHop(HopIndex NokiaConf_Configure_Groups_Group_Router_Mpls_Path_Hop_HopIndex_Union) *NokiaConf_Configure_Groups_Group_Router_Mpls_Path_Hop {

	if t == nil {
		return nil
	}

	key := HopIndex

	if lm, ok := t.Hop[key]; ok {
		return lm
	}
	return nil
}

// DeleteHop deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mpls_Path. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Path) DeleteHop(HopIndex NokiaConf_Configure_Groups_Group_Router_Mpls_Path_Hop_HopIndex_Union) {
	key := HopIndex

	delete(t.Hop, key)
}

// AppendHop appends the supplied NokiaConf_Configure_Groups_Group_Router_Mpls_Path_Hop struct to the
// list Hop of NokiaConf_Configure_Groups_Group_Router_Mpls_Path. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Mpls_Path_Hop already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Path) AppendHop(v *NokiaConf_Configure_Groups_Group_Router_Mpls_Path_Hop) error {
	key := v.HopIndex

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Hop == nil {
		t.Hop = make(map[NokiaConf_Configure_Groups_Group_Router_Mpls_Path_Hop_HopIndex_Union]*NokiaConf_Configure_Groups_Group_Router_Mpls_Path_Hop)
	}

	if _, ok := t.Hop[key]; ok {
		return fmt.Errorf("duplicate key for list Hop %v", key)
	}

	t.Hop[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Mpls_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Path) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetPathName retrieves the value of the leaf PathName from the NokiaConf_Configure_Groups_Group_Router_Mpls_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathName is set, it can
// safely use t.GetPathName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Path) GetPathName() string {
	if t == nil || t.PathName == nil {
		return ""
	}
	return *t.PathName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_Path
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Path) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.Hop {
		e.PopulateDefaults()
	}
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Mpls_Path struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Path) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.PathName == nil {
		return nil, fmt.Errorf("nil value for key PathName")
	}

	return map[string]interface{}{
		"path-name": *t.PathName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Path) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_Path"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Path) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Path) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_Path.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Path) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_Path_Hop represents the /nokia-conf/configure/groups/group/router/mpls/path/hop YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_Path_Hop struct {
	HopIndex  NokiaConf_Configure_Groups_Group_Router_Mpls_Path_Hop_HopIndex_Union `path:"hop-index" module:"nokia-conf"`
	IpAddress *string                                                              `path:"ip-address" module:"nokia-conf"`
	SidLabel  *uint32                                                              `path:"sid-label" module:"nokia-conf"`
	Type      E_NokiaConf_Configure_Groups_Group_Router_Mpls_Path_Hop_Type         `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_Path_Hop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Path_Hop) IsYANGGoStruct() {}

// GetHopIndex retrieves the value of the leaf HopIndex from the NokiaConf_Configure_Groups_Group_Router_Mpls_Path_Hop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HopIndex is set, it can
// safely use t.GetHopIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HopIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Path_Hop) GetHopIndex() NokiaConf_Configure_Groups_Group_Router_Mpls_Path_Hop_HopIndex_Union {
	if t == nil || t.HopIndex == nil {
		return nil
	}
	return t.HopIndex
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Groups_Group_Router_Mpls_Path_Hop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Path_Hop) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetSidLabel retrieves the value of the leaf SidLabel from the NokiaConf_Configure_Groups_Group_Router_Mpls_Path_Hop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SidLabel is set, it can
// safely use t.GetSidLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SidLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Path_Hop) GetSidLabel() uint32 {
	if t == nil || t.SidLabel == nil {
		return 0
	}
	return *t.SidLabel
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_Router_Mpls_Path_Hop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Path_Hop) GetType() E_NokiaConf_Configure_Groups_Group_Router_Mpls_Path_Hop_Type {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_Path_Hop
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Path_Hop) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Mpls_Path_Hop struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Path_Hop) Î›ListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"hop-index": t.HopIndex,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Path_Hop) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_Path_Hop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Path_Hop) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_Path_Hop) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_Path_Hop.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_Path_Hop) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_PceInitLsp represents the /nokia-conf/configure/groups/group/router/mpls/pce-init-lsp YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_PceInitLsp struct {
	SrTe *NokiaConf_Configure_Groups_Group_Router_Mpls_PceInitLsp_SrTe `path:"sr-te" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_PceInitLsp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_PceInitLsp) IsYANGGoStruct() {}

// GetOrCreateSrTe retrieves the value of the SrTe field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_PceInitLsp) GetOrCreateSrTe() *NokiaConf_Configure_Groups_Group_Router_Mpls_PceInitLsp_SrTe {
	if t.SrTe != nil {
		return t.SrTe
	}
	t.SrTe = &NokiaConf_Configure_Groups_Group_Router_Mpls_PceInitLsp_SrTe{}
	return t.SrTe
}

// GetSrTe returns the value of the SrTe struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Mpls_PceInitLsp. If the receiver or the field SrTe is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_PceInitLsp) GetSrTe() *NokiaConf_Configure_Groups_Group_Router_Mpls_PceInitLsp_SrTe {
	if t != nil && t.SrTe != nil {
		return t.SrTe
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_PceInitLsp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_PceInitLsp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.SrTe.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_PceInitLsp) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_PceInitLsp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_PceInitLsp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_PceInitLsp) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_PceInitLsp.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_PceInitLsp) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_PceInitLsp_SrTe represents the /nokia-conf/configure/groups/group/router/mpls/pce-init-lsp/sr-te YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_PceInitLsp_SrTe struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_PceInitLsp_SrTe implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_PceInitLsp_SrTe) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Mpls_PceInitLsp_SrTe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_PceInitLsp_SrTe) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_PceInitLsp_SrTe
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_PceInitLsp_SrTe) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_PceInitLsp_SrTe) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_PceInitLsp_SrTe"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_PceInitLsp_SrTe) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_PceInitLsp_SrTe) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_PceInitLsp_SrTe.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_PceInitLsp_SrTe) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_PceReport represents the /nokia-conf/configure/groups/group/router/mpls/pce-report YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_PceReport struct {
	RsvpTe *bool `path:"rsvp-te" module:"nokia-conf"`
	SrTe   *bool `path:"sr-te" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_PceReport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_PceReport) IsYANGGoStruct() {}

// GetRsvpTe retrieves the value of the leaf RsvpTe from the NokiaConf_Configure_Groups_Group_Router_Mpls_PceReport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RsvpTe is set, it can
// safely use t.GetRsvpTe() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RsvpTe == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_PceReport) GetRsvpTe() bool {
	if t == nil || t.RsvpTe == nil {
		return false
	}
	return *t.RsvpTe
}

// GetSrTe retrieves the value of the leaf SrTe from the NokiaConf_Configure_Groups_Group_Router_Mpls_PceReport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrTe is set, it can
// safely use t.GetSrTe() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrTe == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_PceReport) GetSrTe() bool {
	if t == nil || t.SrTe == nil {
		return false
	}
	return *t.SrTe
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_PceReport
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_PceReport) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RsvpTe == nil {
		var v bool = false
		t.RsvpTe = &v
	}
	if t.SrTe == nil {
		var v bool = false
		t.SrTe = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_PceReport) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_PceReport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_PceReport) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_PceReport) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_PceReport.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_PceReport) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_SrTeResignal represents the /nokia-conf/configure/groups/group/router/mpls/sr-te-resignal YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_SrTeResignal struct {
	ResignalOnIgpEvent *bool   `path:"resignal-on-igp-event" module:"nokia-conf"`
	ResignalTimer      *uint32 `path:"resignal-timer" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_SrTeResignal implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_SrTeResignal) IsYANGGoStruct() {}

// GetResignalOnIgpEvent retrieves the value of the leaf ResignalOnIgpEvent from the NokiaConf_Configure_Groups_Group_Router_Mpls_SrTeResignal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ResignalOnIgpEvent is set, it can
// safely use t.GetResignalOnIgpEvent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ResignalOnIgpEvent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_SrTeResignal) GetResignalOnIgpEvent() bool {
	if t == nil || t.ResignalOnIgpEvent == nil {
		return false
	}
	return *t.ResignalOnIgpEvent
}

// GetResignalTimer retrieves the value of the leaf ResignalTimer from the NokiaConf_Configure_Groups_Group_Router_Mpls_SrTeResignal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ResignalTimer is set, it can
// safely use t.GetResignalTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ResignalTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_SrTeResignal) GetResignalTimer() uint32 {
	if t == nil || t.ResignalTimer == nil {
		return 0
	}
	return *t.ResignalTimer
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_SrTeResignal
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_SrTeResignal) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ResignalOnIgpEvent == nil {
		var v bool = false
		t.ResignalOnIgpEvent = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_SrTeResignal) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_SrTeResignal"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_SrTeResignal) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_SrTeResignal) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_SrTeResignal.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_SrTeResignal) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase represents the /nokia-conf/configure/groups/group/router/mpls/srlg-database YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase struct {
	RouterId map[string]*NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId `path:"router-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase) IsYANGGoStruct() {}

// NewRouterId creates a new entry in the RouterId list of the
// NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase) NewRouterId(RouterAddress string) (*NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RouterId == nil {
		t.RouterId = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId)
	}

	key := RouterAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RouterId[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RouterId", key)
	}

	t.RouterId[key] = &NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId{
		RouterAddress: &RouterAddress,
	}

	return t.RouterId[key], nil
}

// RenameRouterId renames an entry in the list RouterId within
// the NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase) RenameRouterId(oldK, newK string) error {
	if _, ok := t.RouterId[newK]; ok {
		return fmt.Errorf("key %v already exists in RouterId", newK)
	}

	e, ok := t.RouterId[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RouterId", oldK)
	}
	e.RouterAddress = &newK

	t.RouterId[newK] = e
	delete(t.RouterId, oldK)
	return nil
}

// GetOrCreateRouterId retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase) GetOrCreateRouterId(RouterAddress string) *NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId {

	key := RouterAddress

	if v, ok := t.RouterId[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRouterId(RouterAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRouterId got unexpected error: %v", err))
	}
	return v
}

// GetRouterId retrieves the value with the specified key from
// the RouterId map field of NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase) GetRouterId(RouterAddress string) *NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId {

	if t == nil {
		return nil
	}

	key := RouterAddress

	if lm, ok := t.RouterId[key]; ok {
		return lm
	}
	return nil
}

// DeleteRouterId deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase) DeleteRouterId(RouterAddress string) {
	key := RouterAddress

	delete(t.RouterId, key)
}

// AppendRouterId appends the supplied NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId struct to the
// list RouterId of NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase) AppendRouterId(v *NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId) error {
	if v.RouterAddress == nil {
		return fmt.Errorf("invalid nil key received for RouterAddress")
	}

	key := *v.RouterAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RouterId == nil {
		t.RouterId = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId)
	}

	if _, ok := t.RouterId[key]; ok {
		return fmt.Errorf("duplicate key for list RouterId %v", key)
	}

	t.RouterId[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.RouterId {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId represents the /nokia-conf/configure/groups/group/router/mpls/srlg-database/router-id YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId struct {
	AdminState    E_NokiaTypesSros_AdminState                                                                                                                                        `path:"admin-state" module:"nokia-conf"`
	Interface     map[NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId_Interface_Key]*NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId_Interface `path:"interface" module:"nokia-conf"`
	RouterAddress *string                                                                                                                                                            `path:"router-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId) IsYANGGoStruct() {}

// NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId_Interface_Key represents the key for list Interface of element /nokia-conf/configure/groups/group/router/mpls/srlg-database/router-id.
type NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId_Interface_Key struct {
	InterfaceAddress string `path:"interface-address"`
	SrlgGroup        string `path:"srlg-group"`
}

// NewInterface creates a new entry in the Interface list of the
// NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId) NewInterface(InterfaceAddress string, SrlgGroup string) (*NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId_Interface_Key]*NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId_Interface)
	}

	key := NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId_Interface_Key{
		InterfaceAddress: InterfaceAddress,
		SrlgGroup:        SrlgGroup,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId_Interface{
		InterfaceAddress: &InterfaceAddress,
		SrlgGroup:        &SrlgGroup,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId) RenameInterface(oldK, newK NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId_Interface_Key) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.InterfaceAddress = &newK.InterfaceAddress
	e.SrlgGroup = &newK.SrlgGroup

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId) GetOrCreateInterface(InterfaceAddress string, SrlgGroup string) *NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId_Interface {

	key := NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId_Interface_Key{
		InterfaceAddress: InterfaceAddress,
		SrlgGroup:        SrlgGroup,
	}

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(InterfaceAddress, SrlgGroup)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId) GetInterface(InterfaceAddress string, SrlgGroup string) *NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId_Interface {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId_Interface_Key{
		InterfaceAddress: InterfaceAddress,
		SrlgGroup:        SrlgGroup,
	}

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId) DeleteInterface(InterfaceAddress string, SrlgGroup string) {
	key := NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId_Interface_Key{
		InterfaceAddress: InterfaceAddress,
		SrlgGroup:        SrlgGroup,
	}

	delete(t.Interface, key)
}

// AppendInterface appends the supplied NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId_Interface struct to the
// list Interface of NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId_Interface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId) AppendInterface(v *NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId_Interface) error {
	if v.InterfaceAddress == nil {
		return fmt.Errorf("invalid nil key for InterfaceAddress")
	}

	if v.SrlgGroup == nil {
		return fmt.Errorf("invalid nil key for SrlgGroup")
	}

	key := NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId_Interface_Key{
		InterfaceAddress: *v.InterfaceAddress,
		SrlgGroup:        *v.SrlgGroup,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId_Interface_Key]*NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetRouterAddress retrieves the value of the leaf RouterAddress from the NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterAddress is set, it can
// safely use t.GetRouterAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId) GetRouterAddress() string {
	if t == nil || t.RouterAddress == nil {
		return ""
	}
	return *t.RouterAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.RouterAddress == nil {
		return nil, fmt.Errorf("nil value for key RouterAddress")
	}

	return map[string]interface{}{
		"router-address": *t.RouterAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId_Interface represents the /nokia-conf/configure/groups/group/router/mpls/srlg-database/router-id/interface YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId_Interface struct {
	InterfaceAddress *string `path:"interface-address" module:"nokia-conf"`
	SrlgGroup        *string `path:"srlg-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId_Interface) IsYANGGoStruct() {
}

// GetInterfaceAddress retrieves the value of the leaf InterfaceAddress from the NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceAddress is set, it can
// safely use t.GetInterfaceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId_Interface) GetInterfaceAddress() string {
	if t == nil || t.InterfaceAddress == nil {
		return ""
	}
	return *t.InterfaceAddress
}

// GetSrlgGroup retrieves the value of the leaf SrlgGroup from the NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrlgGroup is set, it can
// safely use t.GetSrlgGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrlgGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId_Interface) GetSrlgGroup() string {
	if t == nil || t.SrlgGroup == nil {
		return ""
	}
	return *t.SrlgGroup
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId_Interface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId_Interface) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceAddress == nil {
		return nil, fmt.Errorf("nil value for key InterfaceAddress")
	}

	if t.SrlgGroup == nil {
		return nil, fmt.Errorf("nil value for key SrlgGroup")
	}

	return map[string]interface{}{
		"interface-address": *t.InterfaceAddress,
		"srlg-group":        *t.SrlgGroup,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId_Interface) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId_Interface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId_Interface) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId_Interface.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_SrlgDatabase_RouterId_Interface) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_StaticLsp represents the /nokia-conf/configure/groups/group/router/mpls/static-lsp YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_StaticLsp struct {
	AdminState E_NokiaTypesSros_AdminState                                  `path:"admin-state" module:"nokia-conf"`
	LspName    *string                                                      `path:"lsp-name" module:"nokia-conf"`
	Metric     *uint32                                                      `path:"metric" module:"nokia-conf"`
	Push       *NokiaConf_Configure_Groups_Group_Router_Mpls_StaticLsp_Push `path:"push" module:"nokia-conf" yangPresence:"true"`
	To         *string                                                      `path:"to" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_StaticLsp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_StaticLsp) IsYANGGoStruct() {}

// GetOrCreatePush retrieves the value of the Push field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_StaticLsp) GetOrCreatePush() *NokiaConf_Configure_Groups_Group_Router_Mpls_StaticLsp_Push {
	if t.Push != nil {
		return t.Push
	}
	t.Push = &NokiaConf_Configure_Groups_Group_Router_Mpls_StaticLsp_Push{}
	return t.Push
}

// GetPush returns the value of the Push struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Mpls_StaticLsp. If the receiver or the field Push is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_StaticLsp) GetPush() *NokiaConf_Configure_Groups_Group_Router_Mpls_StaticLsp_Push {
	if t != nil && t.Push != nil {
		return t.Push
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Mpls_StaticLsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_StaticLsp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetLspName retrieves the value of the leaf LspName from the NokiaConf_Configure_Groups_Group_Router_Mpls_StaticLsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LspName is set, it can
// safely use t.GetLspName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LspName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_StaticLsp) GetLspName() string {
	if t == nil || t.LspName == nil {
		return ""
	}
	return *t.LspName
}

// GetMetric retrieves the value of the leaf Metric from the NokiaConf_Configure_Groups_Group_Router_Mpls_StaticLsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Metric is set, it can
// safely use t.GetMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Metric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_StaticLsp) GetMetric() uint32 {
	if t == nil || t.Metric == nil {
		return 0
	}
	return *t.Metric
}

// GetTo retrieves the value of the leaf To from the NokiaConf_Configure_Groups_Group_Router_Mpls_StaticLsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if To is set, it can
// safely use t.GetTo() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.To == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_StaticLsp) GetTo() string {
	if t == nil || t.To == nil {
		return ""
	}
	return *t.To
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_StaticLsp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_StaticLsp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.Push.PopulateDefaults()
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Mpls_StaticLsp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_StaticLsp) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.LspName == nil {
		return nil, fmt.Errorf("nil value for key LspName")
	}

	return map[string]interface{}{
		"lsp-name": *t.LspName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_StaticLsp) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_StaticLsp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_StaticLsp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_StaticLsp) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_StaticLsp.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_StaticLsp) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_StaticLsp_Push represents the /nokia-conf/configure/groups/group/router/mpls/static-lsp/push YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_StaticLsp_Push struct {
	NextHop  *string                                                                    `path:"next-hop" module:"nokia-conf"`
	OutLabel NokiaConf_Configure_Groups_Group_Router_Mpls_StaticLsp_Push_OutLabel_Union `path:"out-label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_StaticLsp_Push implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_StaticLsp_Push) IsYANGGoStruct() {}

// GetNextHop retrieves the value of the leaf NextHop from the NokiaConf_Configure_Groups_Group_Router_Mpls_StaticLsp_Push
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHop is set, it can
// safely use t.GetNextHop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_StaticLsp_Push) GetNextHop() string {
	if t == nil || t.NextHop == nil {
		return ""
	}
	return *t.NextHop
}

// GetOutLabel retrieves the value of the leaf OutLabel from the NokiaConf_Configure_Groups_Group_Router_Mpls_StaticLsp_Push
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutLabel is set, it can
// safely use t.GetOutLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_StaticLsp_Push) GetOutLabel() NokiaConf_Configure_Groups_Group_Router_Mpls_StaticLsp_Push_OutLabel_Union {
	if t == nil || t.OutLabel == nil {
		return nil
	}
	return t.OutLabel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_StaticLsp_Push
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_StaticLsp_Push) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_StaticLsp_Push) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_StaticLsp_Push"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_StaticLsp_Push) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_StaticLsp_Push) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_StaticLsp_Push.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_StaticLsp_Push) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mpls_TunnelTablePref represents the /nokia-conf/configure/groups/group/router/mpls/tunnel-table-pref YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mpls_TunnelTablePref struct {
	RsvpTe *uint32 `path:"rsvp-te" module:"nokia-conf"`
	SrTe   *uint32 `path:"sr-te" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mpls_TunnelTablePref implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_TunnelTablePref) IsYANGGoStruct() {}

// GetRsvpTe retrieves the value of the leaf RsvpTe from the NokiaConf_Configure_Groups_Group_Router_Mpls_TunnelTablePref
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RsvpTe is set, it can
// safely use t.GetRsvpTe() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RsvpTe == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_TunnelTablePref) GetRsvpTe() uint32 {
	if t == nil || t.RsvpTe == nil {
		return 7
	}
	return *t.RsvpTe
}

// GetSrTe retrieves the value of the leaf SrTe from the NokiaConf_Configure_Groups_Group_Router_Mpls_TunnelTablePref
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrTe is set, it can
// safely use t.GetSrTe() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrTe == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_TunnelTablePref) GetSrTe() uint32 {
	if t == nil || t.SrTe == nil {
		return 8
	}
	return *t.SrTe
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mpls_TunnelTablePref
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_TunnelTablePref) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RsvpTe == nil {
		var v uint32 = 7
		t.RsvpTe = &v
	}
	if t.SrTe == nil {
		var v uint32 = 8
		t.SrTe = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_TunnelTablePref) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mpls_TunnelTablePref"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_TunnelTablePref) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mpls_TunnelTablePref) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mpls_TunnelTablePref.
func (*NokiaConf_Configure_Groups_Group_Router_Mpls_TunnelTablePref) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Msdp represents the /nokia-conf/configure/groups/group/router/msdp YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Msdp struct {
	ActiveSourceLimit         *int32                                                           `path:"active-source-limit" module:"nokia-conf"`
	AdminState                E_NokiaTypesSros_AdminState                                      `path:"admin-state" module:"nokia-conf"`
	DataEncapsulation         *bool                                                            `path:"data-encapsulation" module:"nokia-conf"`
	ExportPolicy              []string                                                         `path:"export-policy" module:"nokia-conf"`
	Group                     map[string]*NokiaConf_Configure_Groups_Group_Router_Msdp_Group   `path:"group" module:"nokia-conf"`
	ImportPolicy              []string                                                         `path:"import-policy" module:"nokia-conf"`
	LocalAddress              *string                                                          `path:"local-address" module:"nokia-conf"`
	Peer                      map[string]*NokiaConf_Configure_Groups_Group_Router_Msdp_Peer    `path:"peer" module:"nokia-conf"`
	ReceiveMessageRate        *NokiaConf_Configure_Groups_Group_Router_Msdp_ReceiveMessageRate `path:"receive-message-rate" module:"nokia-conf"`
	RpfTable                  E_NokiaConf_Configure_Groups_Group_Router_Msdp_RpfTable          `path:"rpf-table" module:"nokia-conf"`
	Source                    map[string]*NokiaConf_Configure_Groups_Group_Router_Msdp_Source  `path:"source" module:"nokia-conf"`
	SourceActiveCacheLifetime *uint32                                                          `path:"source-active-cache-lifetime" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Msdp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Msdp) IsYANGGoStruct() {}

// NewGroup creates a new entry in the Group list of the
// NokiaConf_Configure_Groups_Group_Router_Msdp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp) NewGroup(Name string) (*NokiaConf_Configure_Groups_Group_Router_Msdp_Group, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Msdp_Group)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &NokiaConf_Configure_Groups_Group_Router_Msdp_Group{
		Name: &Name,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the NokiaConf_Configure_Groups_Group_Router_Msdp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp) RenameGroup(oldK, newK string) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.Name = &newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Msdp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp) GetOrCreateGroup(Name string) *NokiaConf_Configure_Groups_Group_Router_Msdp_Group {

	key := Name

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of NokiaConf_Configure_Groups_Group_Router_Msdp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp) GetGroup(Name string) *NokiaConf_Configure_Groups_Group_Router_Msdp_Group {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Msdp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp) DeleteGroup(Name string) {
	key := Name

	delete(t.Group, key)
}

// AppendGroup appends the supplied NokiaConf_Configure_Groups_Group_Router_Msdp_Group struct to the
// list Group of NokiaConf_Configure_Groups_Group_Router_Msdp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Msdp_Group already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp) AppendGroup(v *NokiaConf_Configure_Groups_Group_Router_Msdp_Group) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Msdp_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// NewPeer creates a new entry in the Peer list of the
// NokiaConf_Configure_Groups_Group_Router_Msdp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp) NewPeer(IpAddress string) (*NokiaConf_Configure_Groups_Group_Router_Msdp_Peer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Msdp_Peer)
	}

	key := IpAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Peer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Peer", key)
	}

	t.Peer[key] = &NokiaConf_Configure_Groups_Group_Router_Msdp_Peer{
		IpAddress: &IpAddress,
	}

	return t.Peer[key], nil
}

// RenamePeer renames an entry in the list Peer within
// the NokiaConf_Configure_Groups_Group_Router_Msdp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp) RenamePeer(oldK, newK string) error {
	if _, ok := t.Peer[newK]; ok {
		return fmt.Errorf("key %v already exists in Peer", newK)
	}

	e, ok := t.Peer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Peer", oldK)
	}
	e.IpAddress = &newK

	t.Peer[newK] = e
	delete(t.Peer, oldK)
	return nil
}

// GetOrCreatePeer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Msdp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp) GetOrCreatePeer(IpAddress string) *NokiaConf_Configure_Groups_Group_Router_Msdp_Peer {

	key := IpAddress

	if v, ok := t.Peer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPeer(IpAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePeer got unexpected error: %v", err))
	}
	return v
}

// GetPeer retrieves the value with the specified key from
// the Peer map field of NokiaConf_Configure_Groups_Group_Router_Msdp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp) GetPeer(IpAddress string) *NokiaConf_Configure_Groups_Group_Router_Msdp_Peer {

	if t == nil {
		return nil
	}

	key := IpAddress

	if lm, ok := t.Peer[key]; ok {
		return lm
	}
	return nil
}

// DeletePeer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Msdp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp) DeletePeer(IpAddress string) {
	key := IpAddress

	delete(t.Peer, key)
}

// AppendPeer appends the supplied NokiaConf_Configure_Groups_Group_Router_Msdp_Peer struct to the
// list Peer of NokiaConf_Configure_Groups_Group_Router_Msdp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Msdp_Peer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp) AppendPeer(v *NokiaConf_Configure_Groups_Group_Router_Msdp_Peer) error {
	if v.IpAddress == nil {
		return fmt.Errorf("invalid nil key received for IpAddress")
	}

	key := *v.IpAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Msdp_Peer)
	}

	if _, ok := t.Peer[key]; ok {
		return fmt.Errorf("duplicate key for list Peer %v", key)
	}

	t.Peer[key] = v
	return nil
}

// NewSource creates a new entry in the Source list of the
// NokiaConf_Configure_Groups_Group_Router_Msdp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp) NewSource(IpPrefix string) (*NokiaConf_Configure_Groups_Group_Router_Msdp_Source, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Msdp_Source)
	}

	key := IpPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Source[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Source", key)
	}

	t.Source[key] = &NokiaConf_Configure_Groups_Group_Router_Msdp_Source{
		IpPrefix: &IpPrefix,
	}

	return t.Source[key], nil
}

// RenameSource renames an entry in the list Source within
// the NokiaConf_Configure_Groups_Group_Router_Msdp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp) RenameSource(oldK, newK string) error {
	if _, ok := t.Source[newK]; ok {
		return fmt.Errorf("key %v already exists in Source", newK)
	}

	e, ok := t.Source[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Source", oldK)
	}
	e.IpPrefix = &newK

	t.Source[newK] = e
	delete(t.Source, oldK)
	return nil
}

// GetOrCreateSource retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Msdp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp) GetOrCreateSource(IpPrefix string) *NokiaConf_Configure_Groups_Group_Router_Msdp_Source {

	key := IpPrefix

	if v, ok := t.Source[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSource(IpPrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSource got unexpected error: %v", err))
	}
	return v
}

// GetSource retrieves the value with the specified key from
// the Source map field of NokiaConf_Configure_Groups_Group_Router_Msdp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp) GetSource(IpPrefix string) *NokiaConf_Configure_Groups_Group_Router_Msdp_Source {

	if t == nil {
		return nil
	}

	key := IpPrefix

	if lm, ok := t.Source[key]; ok {
		return lm
	}
	return nil
}

// DeleteSource deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Msdp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp) DeleteSource(IpPrefix string) {
	key := IpPrefix

	delete(t.Source, key)
}

// AppendSource appends the supplied NokiaConf_Configure_Groups_Group_Router_Msdp_Source struct to the
// list Source of NokiaConf_Configure_Groups_Group_Router_Msdp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Msdp_Source already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp) AppendSource(v *NokiaConf_Configure_Groups_Group_Router_Msdp_Source) error {
	if v.IpPrefix == nil {
		return fmt.Errorf("invalid nil key received for IpPrefix")
	}

	key := *v.IpPrefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Msdp_Source)
	}

	if _, ok := t.Source[key]; ok {
		return fmt.Errorf("duplicate key for list Source %v", key)
	}

	t.Source[key] = v
	return nil
}

// GetOrCreateReceiveMessageRate retrieves the value of the ReceiveMessageRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp) GetOrCreateReceiveMessageRate() *NokiaConf_Configure_Groups_Group_Router_Msdp_ReceiveMessageRate {
	if t.ReceiveMessageRate != nil {
		return t.ReceiveMessageRate
	}
	t.ReceiveMessageRate = &NokiaConf_Configure_Groups_Group_Router_Msdp_ReceiveMessageRate{}
	return t.ReceiveMessageRate
}

// GetReceiveMessageRate returns the value of the ReceiveMessageRate struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Msdp. If the receiver or the field ReceiveMessageRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp) GetReceiveMessageRate() *NokiaConf_Configure_Groups_Group_Router_Msdp_ReceiveMessageRate {
	if t != nil && t.ReceiveMessageRate != nil {
		return t.ReceiveMessageRate
	}
	return nil
}

// GetActiveSourceLimit retrieves the value of the leaf ActiveSourceLimit from the NokiaConf_Configure_Groups_Group_Router_Msdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActiveSourceLimit is set, it can
// safely use t.GetActiveSourceLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActiveSourceLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp) GetActiveSourceLimit() int32 {
	if t == nil || t.ActiveSourceLimit == nil {
		return 0
	}
	return *t.ActiveSourceLimit
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Msdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetDataEncapsulation retrieves the value of the leaf DataEncapsulation from the NokiaConf_Configure_Groups_Group_Router_Msdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DataEncapsulation is set, it can
// safely use t.GetDataEncapsulation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DataEncapsulation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp) GetDataEncapsulation() bool {
	if t == nil || t.DataEncapsulation == nil {
		return true
	}
	return *t.DataEncapsulation
}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the NokiaConf_Configure_Groups_Group_Router_Msdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPolicy is set, it can
// safely use t.GetExportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp) GetExportPolicy() []string {
	if t == nil || t.ExportPolicy == nil {
		return nil
	}
	return t.ExportPolicy
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Groups_Group_Router_Msdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp) GetImportPolicy() []string {
	if t == nil || t.ImportPolicy == nil {
		return nil
	}
	return t.ImportPolicy
}

// GetLocalAddress retrieves the value of the leaf LocalAddress from the NokiaConf_Configure_Groups_Group_Router_Msdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalAddress is set, it can
// safely use t.GetLocalAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp) GetLocalAddress() string {
	if t == nil || t.LocalAddress == nil {
		return ""
	}
	return *t.LocalAddress
}

// GetRpfTable retrieves the value of the leaf RpfTable from the NokiaConf_Configure_Groups_Group_Router_Msdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RpfTable is set, it can
// safely use t.GetRpfTable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RpfTable == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp) GetRpfTable() E_NokiaConf_Configure_Groups_Group_Router_Msdp_RpfTable {
	if t == nil || t.RpfTable == 0 {
		return NokiaConf_Configure_Groups_Group_Router_Msdp_RpfTable_rtable_u
	}
	return t.RpfTable
}

// GetSourceActiveCacheLifetime retrieves the value of the leaf SourceActiveCacheLifetime from the NokiaConf_Configure_Groups_Group_Router_Msdp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceActiveCacheLifetime is set, it can
// safely use t.GetSourceActiveCacheLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceActiveCacheLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp) GetSourceActiveCacheLifetime() uint32 {
	if t == nil || t.SourceActiveCacheLifetime == nil {
		return 90
	}
	return *t.SourceActiveCacheLifetime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Msdp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.DataEncapsulation == nil {
		var v bool = true
		t.DataEncapsulation = &v
	}
	if t.RpfTable == 0 {
		t.RpfTable = NokiaConf_Configure_Groups_Group_Router_Msdp_RpfTable_rtable_u
	}
	if t.SourceActiveCacheLifetime == nil {
		var v uint32 = 90
		t.SourceActiveCacheLifetime = &v
	}
	t.ReceiveMessageRate.PopulateDefaults()
	for _, e := range t.Group {
		e.PopulateDefaults()
	}
	for _, e := range t.Peer {
		e.PopulateDefaults()
	}
	for _, e := range t.Source {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Msdp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Msdp.
func (*NokiaConf_Configure_Groups_Group_Router_Msdp) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Msdp_Group represents the /nokia-conf/configure/groups/group/router/msdp/group YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Msdp_Group struct {
	ActiveSourceLimit  *int32                                                                 `path:"active-source-limit" module:"nokia-conf"`
	AdminState         E_NokiaTypesSros_AdminState                                            `path:"admin-state" module:"nokia-conf"`
	ExportPolicy       []string                                                               `path:"export-policy" module:"nokia-conf"`
	ImportPolicy       []string                                                               `path:"import-policy" module:"nokia-conf"`
	LocalAddress       *string                                                                `path:"local-address" module:"nokia-conf"`
	Mode               E_NokiaConf_Configure_Groups_Group_Router_Msdp_Group_Mode              `path:"mode" module:"nokia-conf"`
	Name               *string                                                                `path:"name" module:"nokia-conf"`
	Peer               map[string]*NokiaConf_Configure_Groups_Group_Router_Msdp_Group_Peer    `path:"peer" module:"nokia-conf"`
	ReceiveMessageRate *NokiaConf_Configure_Groups_Group_Router_Msdp_Group_ReceiveMessageRate `path:"receive-message-rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Msdp_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Msdp_Group) IsYANGGoStruct() {}

// NewPeer creates a new entry in the Peer list of the
// NokiaConf_Configure_Groups_Group_Router_Msdp_Group struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Group) NewPeer(IpAddress string) (*NokiaConf_Configure_Groups_Group_Router_Msdp_Group_Peer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Msdp_Group_Peer)
	}

	key := IpAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Peer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Peer", key)
	}

	t.Peer[key] = &NokiaConf_Configure_Groups_Group_Router_Msdp_Group_Peer{
		IpAddress: &IpAddress,
	}

	return t.Peer[key], nil
}

// RenamePeer renames an entry in the list Peer within
// the NokiaConf_Configure_Groups_Group_Router_Msdp_Group struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Group) RenamePeer(oldK, newK string) error {
	if _, ok := t.Peer[newK]; ok {
		return fmt.Errorf("key %v already exists in Peer", newK)
	}

	e, ok := t.Peer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Peer", oldK)
	}
	e.IpAddress = &newK

	t.Peer[newK] = e
	delete(t.Peer, oldK)
	return nil
}

// GetOrCreatePeer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Msdp_Group. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Group) GetOrCreatePeer(IpAddress string) *NokiaConf_Configure_Groups_Group_Router_Msdp_Group_Peer {

	key := IpAddress

	if v, ok := t.Peer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPeer(IpAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePeer got unexpected error: %v", err))
	}
	return v
}

// GetPeer retrieves the value with the specified key from
// the Peer map field of NokiaConf_Configure_Groups_Group_Router_Msdp_Group. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Group) GetPeer(IpAddress string) *NokiaConf_Configure_Groups_Group_Router_Msdp_Group_Peer {

	if t == nil {
		return nil
	}

	key := IpAddress

	if lm, ok := t.Peer[key]; ok {
		return lm
	}
	return nil
}

// DeletePeer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Msdp_Group. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Group) DeletePeer(IpAddress string) {
	key := IpAddress

	delete(t.Peer, key)
}

// AppendPeer appends the supplied NokiaConf_Configure_Groups_Group_Router_Msdp_Group_Peer struct to the
// list Peer of NokiaConf_Configure_Groups_Group_Router_Msdp_Group. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Msdp_Group_Peer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Group) AppendPeer(v *NokiaConf_Configure_Groups_Group_Router_Msdp_Group_Peer) error {
	if v.IpAddress == nil {
		return fmt.Errorf("invalid nil key received for IpAddress")
	}

	key := *v.IpAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Msdp_Group_Peer)
	}

	if _, ok := t.Peer[key]; ok {
		return fmt.Errorf("duplicate key for list Peer %v", key)
	}

	t.Peer[key] = v
	return nil
}

// GetOrCreateReceiveMessageRate retrieves the value of the ReceiveMessageRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Group) GetOrCreateReceiveMessageRate() *NokiaConf_Configure_Groups_Group_Router_Msdp_Group_ReceiveMessageRate {
	if t.ReceiveMessageRate != nil {
		return t.ReceiveMessageRate
	}
	t.ReceiveMessageRate = &NokiaConf_Configure_Groups_Group_Router_Msdp_Group_ReceiveMessageRate{}
	return t.ReceiveMessageRate
}

// GetReceiveMessageRate returns the value of the ReceiveMessageRate struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Msdp_Group. If the receiver or the field ReceiveMessageRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Group) GetReceiveMessageRate() *NokiaConf_Configure_Groups_Group_Router_Msdp_Group_ReceiveMessageRate {
	if t != nil && t.ReceiveMessageRate != nil {
		return t.ReceiveMessageRate
	}
	return nil
}

// GetActiveSourceLimit retrieves the value of the leaf ActiveSourceLimit from the NokiaConf_Configure_Groups_Group_Router_Msdp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActiveSourceLimit is set, it can
// safely use t.GetActiveSourceLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActiveSourceLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Group) GetActiveSourceLimit() int32 {
	if t == nil || t.ActiveSourceLimit == nil {
		return 0
	}
	return *t.ActiveSourceLimit
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Msdp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Group) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the NokiaConf_Configure_Groups_Group_Router_Msdp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPolicy is set, it can
// safely use t.GetExportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Group) GetExportPolicy() []string {
	if t == nil || t.ExportPolicy == nil {
		return nil
	}
	return t.ExportPolicy
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Groups_Group_Router_Msdp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Group) GetImportPolicy() []string {
	if t == nil || t.ImportPolicy == nil {
		return nil
	}
	return t.ImportPolicy
}

// GetLocalAddress retrieves the value of the leaf LocalAddress from the NokiaConf_Configure_Groups_Group_Router_Msdp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalAddress is set, it can
// safely use t.GetLocalAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Group) GetLocalAddress() string {
	if t == nil || t.LocalAddress == nil {
		return ""
	}
	return *t.LocalAddress
}

// GetMode retrieves the value of the leaf Mode from the NokiaConf_Configure_Groups_Group_Router_Msdp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Group) GetMode() E_NokiaConf_Configure_Groups_Group_Router_Msdp_Group_Mode {
	if t == nil || t.Mode == 0 {
		return NokiaConf_Configure_Groups_Group_Router_Msdp_Group_Mode_standard
	}
	return t.Mode
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Router_Msdp_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Group) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Msdp_Group
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Group) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Mode == 0 {
		t.Mode = NokiaConf_Configure_Groups_Group_Router_Msdp_Group_Mode_standard
	}
	t.ReceiveMessageRate.PopulateDefaults()
	for _, e := range t.Peer {
		e.PopulateDefaults()
	}
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Msdp_Group struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Group) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Group) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Msdp_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Group) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Group) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Msdp_Group.
func (*NokiaConf_Configure_Groups_Group_Router_Msdp_Group) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Msdp_Group_Peer represents the /nokia-conf/configure/groups/group/router/msdp/group/peer YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Msdp_Group_Peer struct {
	ActiveSourceLimit  *int32                                                                      `path:"active-source-limit" module:"nokia-conf"`
	AdminState         E_NokiaTypesSros_AdminState                                                 `path:"admin-state" module:"nokia-conf"`
	AuthenticationKey  *string                                                                     `path:"authentication-key" module:"nokia-conf"`
	DefaultPeer        *bool                                                                       `path:"default-peer" module:"nokia-conf"`
	ExportPolicy       []string                                                                    `path:"export-policy" module:"nokia-conf"`
	ImportPolicy       []string                                                                    `path:"import-policy" module:"nokia-conf"`
	IpAddress          *string                                                                     `path:"ip-address" module:"nokia-conf"`
	LocalAddress       *string                                                                     `path:"local-address" module:"nokia-conf"`
	ReceiveMessageRate *NokiaConf_Configure_Groups_Group_Router_Msdp_Group_Peer_ReceiveMessageRate `path:"receive-message-rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Msdp_Group_Peer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Msdp_Group_Peer) IsYANGGoStruct() {}

// GetOrCreateReceiveMessageRate retrieves the value of the ReceiveMessageRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Group_Peer) GetOrCreateReceiveMessageRate() *NokiaConf_Configure_Groups_Group_Router_Msdp_Group_Peer_ReceiveMessageRate {
	if t.ReceiveMessageRate != nil {
		return t.ReceiveMessageRate
	}
	t.ReceiveMessageRate = &NokiaConf_Configure_Groups_Group_Router_Msdp_Group_Peer_ReceiveMessageRate{}
	return t.ReceiveMessageRate
}

// GetReceiveMessageRate returns the value of the ReceiveMessageRate struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Msdp_Group_Peer. If the receiver or the field ReceiveMessageRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Group_Peer) GetReceiveMessageRate() *NokiaConf_Configure_Groups_Group_Router_Msdp_Group_Peer_ReceiveMessageRate {
	if t != nil && t.ReceiveMessageRate != nil {
		return t.ReceiveMessageRate
	}
	return nil
}

// GetActiveSourceLimit retrieves the value of the leaf ActiveSourceLimit from the NokiaConf_Configure_Groups_Group_Router_Msdp_Group_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActiveSourceLimit is set, it can
// safely use t.GetActiveSourceLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActiveSourceLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Group_Peer) GetActiveSourceLimit() int32 {
	if t == nil || t.ActiveSourceLimit == nil {
		return 0
	}
	return *t.ActiveSourceLimit
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Msdp_Group_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Group_Peer) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetAuthenticationKey retrieves the value of the leaf AuthenticationKey from the NokiaConf_Configure_Groups_Group_Router_Msdp_Group_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKey is set, it can
// safely use t.GetAuthenticationKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Group_Peer) GetAuthenticationKey() string {
	if t == nil || t.AuthenticationKey == nil {
		return ""
	}
	return *t.AuthenticationKey
}

// GetDefaultPeer retrieves the value of the leaf DefaultPeer from the NokiaConf_Configure_Groups_Group_Router_Msdp_Group_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultPeer is set, it can
// safely use t.GetDefaultPeer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultPeer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Group_Peer) GetDefaultPeer() bool {
	if t == nil || t.DefaultPeer == nil {
		return false
	}
	return *t.DefaultPeer
}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the NokiaConf_Configure_Groups_Group_Router_Msdp_Group_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPolicy is set, it can
// safely use t.GetExportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Group_Peer) GetExportPolicy() []string {
	if t == nil || t.ExportPolicy == nil {
		return nil
	}
	return t.ExportPolicy
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Groups_Group_Router_Msdp_Group_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Group_Peer) GetImportPolicy() []string {
	if t == nil || t.ImportPolicy == nil {
		return nil
	}
	return t.ImportPolicy
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Groups_Group_Router_Msdp_Group_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Group_Peer) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetLocalAddress retrieves the value of the leaf LocalAddress from the NokiaConf_Configure_Groups_Group_Router_Msdp_Group_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalAddress is set, it can
// safely use t.GetLocalAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Group_Peer) GetLocalAddress() string {
	if t == nil || t.LocalAddress == nil {
		return ""
	}
	return *t.LocalAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Msdp_Group_Peer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Group_Peer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.DefaultPeer == nil {
		var v bool = false
		t.DefaultPeer = &v
	}
	t.ReceiveMessageRate.PopulateDefaults()
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Msdp_Group_Peer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Group_Peer) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.IpAddress == nil {
		return nil, fmt.Errorf("nil value for key IpAddress")
	}

	return map[string]interface{}{
		"ip-address": *t.IpAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Group_Peer) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Msdp_Group_Peer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Group_Peer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Group_Peer) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Msdp_Group_Peer.
func (*NokiaConf_Configure_Groups_Group_Router_Msdp_Group_Peer) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Msdp_Group_Peer_ReceiveMessageRate represents the /nokia-conf/configure/groups/group/router/msdp/group/peer/receive-message-rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Msdp_Group_Peer_ReceiveMessageRate struct {
	Rate      *uint32 `path:"rate" module:"nokia-conf"`
	Threshold *uint32 `path:"threshold" module:"nokia-conf"`
	Time      *uint32 `path:"time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Msdp_Group_Peer_ReceiveMessageRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Msdp_Group_Peer_ReceiveMessageRate) IsYANGGoStruct() {}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Groups_Group_Router_Msdp_Group_Peer_ReceiveMessageRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Group_Peer_ReceiveMessageRate) GetRate() uint32 {
	if t == nil || t.Rate == nil {
		return 0
	}
	return *t.Rate
}

// GetThreshold retrieves the value of the leaf Threshold from the NokiaConf_Configure_Groups_Group_Router_Msdp_Group_Peer_ReceiveMessageRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Threshold is set, it can
// safely use t.GetThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Threshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Group_Peer_ReceiveMessageRate) GetThreshold() uint32 {
	if t == nil || t.Threshold == nil {
		return 0
	}
	return *t.Threshold
}

// GetTime retrieves the value of the leaf Time from the NokiaConf_Configure_Groups_Group_Router_Msdp_Group_Peer_ReceiveMessageRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Time is set, it can
// safely use t.GetTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Time == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Group_Peer_ReceiveMessageRate) GetTime() uint32 {
	if t == nil || t.Time == nil {
		return 0
	}
	return *t.Time
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Msdp_Group_Peer_ReceiveMessageRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Group_Peer_ReceiveMessageRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Group_Peer_ReceiveMessageRate) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Msdp_Group_Peer_ReceiveMessageRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Group_Peer_ReceiveMessageRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Group_Peer_ReceiveMessageRate) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Msdp_Group_Peer_ReceiveMessageRate.
func (*NokiaConf_Configure_Groups_Group_Router_Msdp_Group_Peer_ReceiveMessageRate) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Msdp_Group_ReceiveMessageRate represents the /nokia-conf/configure/groups/group/router/msdp/group/receive-message-rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Msdp_Group_ReceiveMessageRate struct {
	Rate      *uint32 `path:"rate" module:"nokia-conf"`
	Threshold *uint32 `path:"threshold" module:"nokia-conf"`
	Time      *uint32 `path:"time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Msdp_Group_ReceiveMessageRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Msdp_Group_ReceiveMessageRate) IsYANGGoStruct() {}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Groups_Group_Router_Msdp_Group_ReceiveMessageRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Group_ReceiveMessageRate) GetRate() uint32 {
	if t == nil || t.Rate == nil {
		return 0
	}
	return *t.Rate
}

// GetThreshold retrieves the value of the leaf Threshold from the NokiaConf_Configure_Groups_Group_Router_Msdp_Group_ReceiveMessageRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Threshold is set, it can
// safely use t.GetThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Threshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Group_ReceiveMessageRate) GetThreshold() uint32 {
	if t == nil || t.Threshold == nil {
		return 0
	}
	return *t.Threshold
}

// GetTime retrieves the value of the leaf Time from the NokiaConf_Configure_Groups_Group_Router_Msdp_Group_ReceiveMessageRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Time is set, it can
// safely use t.GetTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Time == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Group_ReceiveMessageRate) GetTime() uint32 {
	if t == nil || t.Time == nil {
		return 0
	}
	return *t.Time
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Msdp_Group_ReceiveMessageRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Group_ReceiveMessageRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Group_ReceiveMessageRate) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Msdp_Group_ReceiveMessageRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Group_ReceiveMessageRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Group_ReceiveMessageRate) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Msdp_Group_ReceiveMessageRate.
func (*NokiaConf_Configure_Groups_Group_Router_Msdp_Group_ReceiveMessageRate) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Msdp_Peer represents the /nokia-conf/configure/groups/group/router/msdp/peer YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Msdp_Peer struct {
	ActiveSourceLimit  *int32                                                                `path:"active-source-limit" module:"nokia-conf"`
	AdminState         E_NokiaTypesSros_AdminState                                           `path:"admin-state" module:"nokia-conf"`
	AuthenticationKey  *string                                                               `path:"authentication-key" module:"nokia-conf"`
	DefaultPeer        *bool                                                                 `path:"default-peer" module:"nokia-conf"`
	ExportPolicy       []string                                                              `path:"export-policy" module:"nokia-conf"`
	ImportPolicy       []string                                                              `path:"import-policy" module:"nokia-conf"`
	IpAddress          *string                                                               `path:"ip-address" module:"nokia-conf"`
	LocalAddress       *string                                                               `path:"local-address" module:"nokia-conf"`
	ReceiveMessageRate *NokiaConf_Configure_Groups_Group_Router_Msdp_Peer_ReceiveMessageRate `path:"receive-message-rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Msdp_Peer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Msdp_Peer) IsYANGGoStruct() {}

// GetOrCreateReceiveMessageRate retrieves the value of the ReceiveMessageRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Peer) GetOrCreateReceiveMessageRate() *NokiaConf_Configure_Groups_Group_Router_Msdp_Peer_ReceiveMessageRate {
	if t.ReceiveMessageRate != nil {
		return t.ReceiveMessageRate
	}
	t.ReceiveMessageRate = &NokiaConf_Configure_Groups_Group_Router_Msdp_Peer_ReceiveMessageRate{}
	return t.ReceiveMessageRate
}

// GetReceiveMessageRate returns the value of the ReceiveMessageRate struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Msdp_Peer. If the receiver or the field ReceiveMessageRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Peer) GetReceiveMessageRate() *NokiaConf_Configure_Groups_Group_Router_Msdp_Peer_ReceiveMessageRate {
	if t != nil && t.ReceiveMessageRate != nil {
		return t.ReceiveMessageRate
	}
	return nil
}

// GetActiveSourceLimit retrieves the value of the leaf ActiveSourceLimit from the NokiaConf_Configure_Groups_Group_Router_Msdp_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActiveSourceLimit is set, it can
// safely use t.GetActiveSourceLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActiveSourceLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Peer) GetActiveSourceLimit() int32 {
	if t == nil || t.ActiveSourceLimit == nil {
		return 0
	}
	return *t.ActiveSourceLimit
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Msdp_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Peer) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetAuthenticationKey retrieves the value of the leaf AuthenticationKey from the NokiaConf_Configure_Groups_Group_Router_Msdp_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKey is set, it can
// safely use t.GetAuthenticationKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Peer) GetAuthenticationKey() string {
	if t == nil || t.AuthenticationKey == nil {
		return ""
	}
	return *t.AuthenticationKey
}

// GetDefaultPeer retrieves the value of the leaf DefaultPeer from the NokiaConf_Configure_Groups_Group_Router_Msdp_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultPeer is set, it can
// safely use t.GetDefaultPeer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultPeer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Peer) GetDefaultPeer() bool {
	if t == nil || t.DefaultPeer == nil {
		return false
	}
	return *t.DefaultPeer
}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the NokiaConf_Configure_Groups_Group_Router_Msdp_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPolicy is set, it can
// safely use t.GetExportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Peer) GetExportPolicy() []string {
	if t == nil || t.ExportPolicy == nil {
		return nil
	}
	return t.ExportPolicy
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Groups_Group_Router_Msdp_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Peer) GetImportPolicy() []string {
	if t == nil || t.ImportPolicy == nil {
		return nil
	}
	return t.ImportPolicy
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Groups_Group_Router_Msdp_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Peer) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetLocalAddress retrieves the value of the leaf LocalAddress from the NokiaConf_Configure_Groups_Group_Router_Msdp_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalAddress is set, it can
// safely use t.GetLocalAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Peer) GetLocalAddress() string {
	if t == nil || t.LocalAddress == nil {
		return ""
	}
	return *t.LocalAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Msdp_Peer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Peer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.DefaultPeer == nil {
		var v bool = false
		t.DefaultPeer = &v
	}
	t.ReceiveMessageRate.PopulateDefaults()
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Msdp_Peer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Peer) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.IpAddress == nil {
		return nil, fmt.Errorf("nil value for key IpAddress")
	}

	return map[string]interface{}{
		"ip-address": *t.IpAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Peer) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Msdp_Peer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Peer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Peer) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Msdp_Peer.
func (*NokiaConf_Configure_Groups_Group_Router_Msdp_Peer) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Msdp_Peer_ReceiveMessageRate represents the /nokia-conf/configure/groups/group/router/msdp/peer/receive-message-rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Msdp_Peer_ReceiveMessageRate struct {
	Rate      *uint32 `path:"rate" module:"nokia-conf"`
	Threshold *uint32 `path:"threshold" module:"nokia-conf"`
	Time      *uint32 `path:"time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Msdp_Peer_ReceiveMessageRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Msdp_Peer_ReceiveMessageRate) IsYANGGoStruct() {}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Groups_Group_Router_Msdp_Peer_ReceiveMessageRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Peer_ReceiveMessageRate) GetRate() uint32 {
	if t == nil || t.Rate == nil {
		return 0
	}
	return *t.Rate
}

// GetThreshold retrieves the value of the leaf Threshold from the NokiaConf_Configure_Groups_Group_Router_Msdp_Peer_ReceiveMessageRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Threshold is set, it can
// safely use t.GetThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Threshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Peer_ReceiveMessageRate) GetThreshold() uint32 {
	if t == nil || t.Threshold == nil {
		return 0
	}
	return *t.Threshold
}

// GetTime retrieves the value of the leaf Time from the NokiaConf_Configure_Groups_Group_Router_Msdp_Peer_ReceiveMessageRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Time is set, it can
// safely use t.GetTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Time == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Peer_ReceiveMessageRate) GetTime() uint32 {
	if t == nil || t.Time == nil {
		return 0
	}
	return *t.Time
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Msdp_Peer_ReceiveMessageRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Peer_ReceiveMessageRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Peer_ReceiveMessageRate) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Msdp_Peer_ReceiveMessageRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Peer_ReceiveMessageRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Peer_ReceiveMessageRate) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Msdp_Peer_ReceiveMessageRate.
func (*NokiaConf_Configure_Groups_Group_Router_Msdp_Peer_ReceiveMessageRate) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Msdp_ReceiveMessageRate represents the /nokia-conf/configure/groups/group/router/msdp/receive-message-rate YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Msdp_ReceiveMessageRate struct {
	Rate      *uint32 `path:"rate" module:"nokia-conf"`
	Threshold *uint32 `path:"threshold" module:"nokia-conf"`
	Time      *uint32 `path:"time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Msdp_ReceiveMessageRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Msdp_ReceiveMessageRate) IsYANGGoStruct() {}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Groups_Group_Router_Msdp_ReceiveMessageRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_ReceiveMessageRate) GetRate() uint32 {
	if t == nil || t.Rate == nil {
		return 0
	}
	return *t.Rate
}

// GetThreshold retrieves the value of the leaf Threshold from the NokiaConf_Configure_Groups_Group_Router_Msdp_ReceiveMessageRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Threshold is set, it can
// safely use t.GetThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Threshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_ReceiveMessageRate) GetThreshold() uint32 {
	if t == nil || t.Threshold == nil {
		return 0
	}
	return *t.Threshold
}

// GetTime retrieves the value of the leaf Time from the NokiaConf_Configure_Groups_Group_Router_Msdp_ReceiveMessageRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Time is set, it can
// safely use t.GetTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Time == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_ReceiveMessageRate) GetTime() uint32 {
	if t == nil || t.Time == nil {
		return 0
	}
	return *t.Time
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Msdp_ReceiveMessageRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_ReceiveMessageRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_ReceiveMessageRate) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Msdp_ReceiveMessageRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_ReceiveMessageRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_ReceiveMessageRate) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Msdp_ReceiveMessageRate.
func (*NokiaConf_Configure_Groups_Group_Router_Msdp_ReceiveMessageRate) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Msdp_Source represents the /nokia-conf/configure/groups/group/router/msdp/source YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Msdp_Source struct {
	ActiveSourceLimit *int32  `path:"active-source-limit" module:"nokia-conf"`
	IpPrefix          *string `path:"ip-prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Msdp_Source implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Msdp_Source) IsYANGGoStruct() {}

// GetActiveSourceLimit retrieves the value of the leaf ActiveSourceLimit from the NokiaConf_Configure_Groups_Group_Router_Msdp_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActiveSourceLimit is set, it can
// safely use t.GetActiveSourceLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActiveSourceLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Source) GetActiveSourceLimit() int32 {
	if t == nil || t.ActiveSourceLimit == nil {
		return 0
	}
	return *t.ActiveSourceLimit
}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_Groups_Group_Router_Msdp_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Source) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Msdp_Source
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Source) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Msdp_Source struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Source) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	return map[string]interface{}{
		"ip-prefix": *t.IpPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Source) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Msdp_Source"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Source) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Msdp_Source) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Msdp_Source.
func (*NokiaConf_Configure_Groups_Group_Router_Msdp_Source) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_MssAdjust represents the /nokia-conf/configure/groups/group/router/mss-adjust YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_MssAdjust struct {
	NatGroup    *uint32 `path:"nat-group" module:"nokia-conf"`
	SegmentSize *uint32 `path:"segment-size" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_MssAdjust implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_MssAdjust) IsYANGGoStruct() {}

// GetNatGroup retrieves the value of the leaf NatGroup from the NokiaConf_Configure_Groups_Group_Router_MssAdjust
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NatGroup is set, it can
// safely use t.GetNatGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NatGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_MssAdjust) GetNatGroup() uint32 {
	if t == nil || t.NatGroup == nil {
		return 0
	}
	return *t.NatGroup
}

// GetSegmentSize retrieves the value of the leaf SegmentSize from the NokiaConf_Configure_Groups_Group_Router_MssAdjust
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SegmentSize is set, it can
// safely use t.GetSegmentSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SegmentSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_MssAdjust) GetSegmentSize() uint32 {
	if t == nil || t.SegmentSize == nil {
		return 0
	}
	return *t.SegmentSize
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_MssAdjust
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_MssAdjust) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_MssAdjust) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_MssAdjust"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_MssAdjust) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_MssAdjust) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_MssAdjust.
func (*NokiaConf_Configure_Groups_Group_Router_MssAdjust) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Mtrace2 represents the /nokia-conf/configure/groups/group/router/mtrace2 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Mtrace2 struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	UdpPort    *uint32                     `path:"udp-port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Mtrace2 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Mtrace2) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Mtrace2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mtrace2) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetUdpPort retrieves the value of the leaf UdpPort from the NokiaConf_Configure_Groups_Group_Router_Mtrace2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UdpPort is set, it can
// safely use t.GetUdpPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UdpPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Mtrace2) GetUdpPort() uint32 {
	if t == nil || t.UdpPort == nil {
		return 5000
	}
	return *t.UdpPort
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Mtrace2
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Mtrace2) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.UdpPort == nil {
		var v uint32 = 5000
		t.UdpPort = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mtrace2) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Mtrace2"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Mtrace2) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Mtrace2) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Mtrace2.
func (*NokiaConf_Configure_Groups_Group_Router_Mtrace2) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Nat represents the /nokia-conf/configure/groups/group/router/nat YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Nat struct {
	Inside  *NokiaConf_Configure_Groups_Group_Router_Nat_Inside  `path:"inside" module:"nokia-conf"`
	Map     *NokiaConf_Configure_Groups_Group_Router_Nat_Map     `path:"map" module:"nokia-conf"`
	Outside *NokiaConf_Configure_Groups_Group_Router_Nat_Outside `path:"outside" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Nat implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Nat) IsYANGGoStruct() {}

// GetOrCreateInside retrieves the value of the Inside field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat) GetOrCreateInside() *NokiaConf_Configure_Groups_Group_Router_Nat_Inside {
	if t.Inside != nil {
		return t.Inside
	}
	t.Inside = &NokiaConf_Configure_Groups_Group_Router_Nat_Inside{}
	return t.Inside
}

// GetOrCreateMap retrieves the value of the Map field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat) GetOrCreateMap() *NokiaConf_Configure_Groups_Group_Router_Nat_Map {
	if t.Map != nil {
		return t.Map
	}
	t.Map = &NokiaConf_Configure_Groups_Group_Router_Nat_Map{}
	return t.Map
}

// GetOrCreateOutside retrieves the value of the Outside field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat) GetOrCreateOutside() *NokiaConf_Configure_Groups_Group_Router_Nat_Outside {
	if t.Outside != nil {
		return t.Outside
	}
	t.Outside = &NokiaConf_Configure_Groups_Group_Router_Nat_Outside{}
	return t.Outside
}

// GetInside returns the value of the Inside struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Nat. If the receiver or the field Inside is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat) GetInside() *NokiaConf_Configure_Groups_Group_Router_Nat_Inside {
	if t != nil && t.Inside != nil {
		return t.Inside
	}
	return nil
}

// GetMap returns the value of the Map struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Nat. If the receiver or the field Map is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat) GetMap() *NokiaConf_Configure_Groups_Group_Router_Nat_Map {
	if t != nil && t.Map != nil {
		return t.Map
	}
	return nil
}

// GetOutside returns the value of the Outside struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Nat. If the receiver or the field Outside is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat) GetOutside() *NokiaConf_Configure_Groups_Group_Router_Nat_Outside {
	if t != nil && t.Outside != nil {
		return t.Outside
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Nat
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Inside.PopulateDefaults()
	t.Map.PopulateDefaults()
	t.Outside.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Nat"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Nat.
func (*NokiaConf_Configure_Groups_Group_Router_Nat) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Nat_Inside represents the /nokia-conf/configure/groups/group/router/nat/inside YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Nat_Inside struct {
	L2Aware    *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_L2Aware    `path:"l2-aware" module:"nokia-conf"`
	LargeScale *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale `path:"large-scale" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Nat_Inside implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Inside) IsYANGGoStruct() {}

// GetOrCreateL2Aware retrieves the value of the L2Aware field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside) GetOrCreateL2Aware() *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_L2Aware {
	if t.L2Aware != nil {
		return t.L2Aware
	}
	t.L2Aware = &NokiaConf_Configure_Groups_Group_Router_Nat_Inside_L2Aware{}
	return t.L2Aware
}

// GetOrCreateLargeScale retrieves the value of the LargeScale field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside) GetOrCreateLargeScale() *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale {
	if t.LargeScale != nil {
		return t.LargeScale
	}
	t.LargeScale = &NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale{}
	return t.LargeScale
}

// GetL2Aware returns the value of the L2Aware struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Nat_Inside. If the receiver or the field L2Aware is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside) GetL2Aware() *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_L2Aware {
	if t != nil && t.L2Aware != nil {
		return t.L2Aware
	}
	return nil
}

// GetLargeScale returns the value of the LargeScale struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Nat_Inside. If the receiver or the field LargeScale is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside) GetLargeScale() *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale {
	if t != nil && t.LargeScale != nil {
		return t.LargeScale
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Nat_Inside
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.L2Aware.PopulateDefaults()
	t.LargeScale.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Nat_Inside"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Nat_Inside.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Inside) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Nat_Inside_L2Aware represents the /nokia-conf/configure/groups/group/router/nat/inside/l2-aware YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Nat_Inside_L2Aware struct {
	Subscribers map[string]*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_L2Aware_Subscribers `path:"subscribers" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Nat_Inside_L2Aware implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_L2Aware) IsYANGGoStruct() {}

// NewSubscribers creates a new entry in the Subscribers list of the
// NokiaConf_Configure_Groups_Group_Router_Nat_Inside_L2Aware struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_L2Aware) NewSubscribers(Prefix string) (*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_L2Aware_Subscribers, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Subscribers == nil {
		t.Subscribers = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_L2Aware_Subscribers)
	}

	key := Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Subscribers[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Subscribers", key)
	}

	t.Subscribers[key] = &NokiaConf_Configure_Groups_Group_Router_Nat_Inside_L2Aware_Subscribers{
		Prefix: &Prefix,
	}

	return t.Subscribers[key], nil
}

// RenameSubscribers renames an entry in the list Subscribers within
// the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_L2Aware struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_L2Aware) RenameSubscribers(oldK, newK string) error {
	if _, ok := t.Subscribers[newK]; ok {
		return fmt.Errorf("key %v already exists in Subscribers", newK)
	}

	e, ok := t.Subscribers[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Subscribers", oldK)
	}
	e.Prefix = &newK

	t.Subscribers[newK] = e
	delete(t.Subscribers, oldK)
	return nil
}

// GetOrCreateSubscribers retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Nat_Inside_L2Aware. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_L2Aware) GetOrCreateSubscribers(Prefix string) *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_L2Aware_Subscribers {

	key := Prefix

	if v, ok := t.Subscribers[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSubscribers(Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSubscribers got unexpected error: %v", err))
	}
	return v
}

// GetSubscribers retrieves the value with the specified key from
// the Subscribers map field of NokiaConf_Configure_Groups_Group_Router_Nat_Inside_L2Aware. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_L2Aware) GetSubscribers(Prefix string) *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_L2Aware_Subscribers {

	if t == nil {
		return nil
	}

	key := Prefix

	if lm, ok := t.Subscribers[key]; ok {
		return lm
	}
	return nil
}

// DeleteSubscribers deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Nat_Inside_L2Aware. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_L2Aware) DeleteSubscribers(Prefix string) {
	key := Prefix

	delete(t.Subscribers, key)
}

// AppendSubscribers appends the supplied NokiaConf_Configure_Groups_Group_Router_Nat_Inside_L2Aware_Subscribers struct to the
// list Subscribers of NokiaConf_Configure_Groups_Group_Router_Nat_Inside_L2Aware. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Nat_Inside_L2Aware_Subscribers already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_L2Aware) AppendSubscribers(v *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_L2Aware_Subscribers) error {
	if v.Prefix == nil {
		return fmt.Errorf("invalid nil key received for Prefix")
	}

	key := *v.Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Subscribers == nil {
		t.Subscribers = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_L2Aware_Subscribers)
	}

	if _, ok := t.Subscribers[key]; ok {
		return fmt.Errorf("duplicate key for list Subscribers %v", key)
	}

	t.Subscribers[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_L2Aware
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_L2Aware) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Subscribers {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_L2Aware) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Nat_Inside_L2Aware"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_L2Aware) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_L2Aware) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Nat_Inside_L2Aware.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_L2Aware) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Nat_Inside_L2Aware_Subscribers represents the /nokia-conf/configure/groups/group/router/nat/inside/l2-aware/subscribers YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Nat_Inside_L2Aware_Subscribers struct {
	Prefix *string `path:"prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Nat_Inside_L2Aware_Subscribers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_L2Aware_Subscribers) IsYANGGoStruct() {}

// GetPrefix retrieves the value of the leaf Prefix from the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_L2Aware_Subscribers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_L2Aware_Subscribers) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_L2Aware_Subscribers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_L2Aware_Subscribers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_L2Aware_Subscribers struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_L2Aware_Subscribers) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.Prefix == nil {
		return nil, fmt.Errorf("nil value for key Prefix")
	}

	return map[string]interface{}{
		"prefix": *t.Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_L2Aware_Subscribers) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Nat_Inside_L2Aware_Subscribers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_L2Aware_Subscribers) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_L2Aware_Subscribers) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Nat_Inside_L2Aware_Subscribers.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_L2Aware_Subscribers) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale represents the /nokia-conf/configure/groups/group/router/nat/inside/large-scale YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale struct {
	DnatOnly                 *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DnatOnly                 `path:"dnat-only" module:"nokia-conf"`
	DualStackLite            *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite            `path:"dual-stack-lite" module:"nokia-conf"`
	NatPolicy                *string                                                                                 `path:"nat-policy" module:"nokia-conf"`
	Nat44                    *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44                    `path:"nat44" module:"nokia-conf"`
	Nat64                    *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64                    `path:"nat64" module:"nokia-conf" yangPresence:"true"`
	Redundancy               *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Redundancy               `path:"redundancy" module:"nokia-conf"`
	SubscriberIdentification *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_SubscriberIdentification `path:"subscriber-identification" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale) IsYANGGoStruct() {}

// GetOrCreateDnatOnly retrieves the value of the DnatOnly field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale) GetOrCreateDnatOnly() *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DnatOnly {
	if t.DnatOnly != nil {
		return t.DnatOnly
	}
	t.DnatOnly = &NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DnatOnly{}
	return t.DnatOnly
}

// GetOrCreateDualStackLite retrieves the value of the DualStackLite field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale) GetOrCreateDualStackLite() *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite {
	if t.DualStackLite != nil {
		return t.DualStackLite
	}
	t.DualStackLite = &NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite{}
	return t.DualStackLite
}

// GetOrCreateNat44 retrieves the value of the Nat44 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale) GetOrCreateNat44() *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44 {
	if t.Nat44 != nil {
		return t.Nat44
	}
	t.Nat44 = &NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44{}
	return t.Nat44
}

// GetOrCreateNat64 retrieves the value of the Nat64 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale) GetOrCreateNat64() *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64 {
	if t.Nat64 != nil {
		return t.Nat64
	}
	t.Nat64 = &NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64{}
	return t.Nat64
}

// GetOrCreateRedundancy retrieves the value of the Redundancy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale) GetOrCreateRedundancy() *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Redundancy {
	if t.Redundancy != nil {
		return t.Redundancy
	}
	t.Redundancy = &NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Redundancy{}
	return t.Redundancy
}

// GetOrCreateSubscriberIdentification retrieves the value of the SubscriberIdentification field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale) GetOrCreateSubscriberIdentification() *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_SubscriberIdentification {
	if t.SubscriberIdentification != nil {
		return t.SubscriberIdentification
	}
	t.SubscriberIdentification = &NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_SubscriberIdentification{}
	return t.SubscriberIdentification
}

// GetDnatOnly returns the value of the DnatOnly struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale. If the receiver or the field DnatOnly is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale) GetDnatOnly() *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DnatOnly {
	if t != nil && t.DnatOnly != nil {
		return t.DnatOnly
	}
	return nil
}

// GetDualStackLite returns the value of the DualStackLite struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale. If the receiver or the field DualStackLite is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale) GetDualStackLite() *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite {
	if t != nil && t.DualStackLite != nil {
		return t.DualStackLite
	}
	return nil
}

// GetNat44 returns the value of the Nat44 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale. If the receiver or the field Nat44 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale) GetNat44() *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44 {
	if t != nil && t.Nat44 != nil {
		return t.Nat44
	}
	return nil
}

// GetNat64 returns the value of the Nat64 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale. If the receiver or the field Nat64 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale) GetNat64() *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64 {
	if t != nil && t.Nat64 != nil {
		return t.Nat64
	}
	return nil
}

// GetRedundancy returns the value of the Redundancy struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale. If the receiver or the field Redundancy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale) GetRedundancy() *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Redundancy {
	if t != nil && t.Redundancy != nil {
		return t.Redundancy
	}
	return nil
}

// GetSubscriberIdentification returns the value of the SubscriberIdentification struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale. If the receiver or the field SubscriberIdentification is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale) GetSubscriberIdentification() *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_SubscriberIdentification {
	if t != nil && t.SubscriberIdentification != nil {
		return t.SubscriberIdentification
	}
	return nil
}

// GetNatPolicy retrieves the value of the leaf NatPolicy from the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NatPolicy is set, it can
// safely use t.GetNatPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NatPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale) GetNatPolicy() string {
	if t == nil || t.NatPolicy == nil {
		return ""
	}
	return *t.NatPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DnatOnly.PopulateDefaults()
	t.DualStackLite.PopulateDefaults()
	t.Nat44.PopulateDefaults()
	t.Nat64.PopulateDefaults()
	t.Redundancy.PopulateDefaults()
	t.SubscriberIdentification.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DnatOnly represents the /nokia-conf/configure/groups/group/router/nat/inside/large-scale/dnat-only YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DnatOnly struct {
	SourcePrefixList *string `path:"source-prefix-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DnatOnly implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DnatOnly) IsYANGGoStruct() {}

// GetSourcePrefixList retrieves the value of the leaf SourcePrefixList from the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DnatOnly
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourcePrefixList is set, it can
// safely use t.GetSourcePrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourcePrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DnatOnly) GetSourcePrefixList() string {
	if t == nil || t.SourcePrefixList == nil {
		return ""
	}
	return *t.SourcePrefixList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DnatOnly
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DnatOnly) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DnatOnly) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DnatOnly"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DnatOnly) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DnatOnly) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DnatOnly.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DnatOnly) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite represents the /nokia-conf/configure/groups/group/router/nat/inside/large-scale/dual-stack-lite YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite struct {
	AdminState             E_NokiaTypesSros_AdminState                                                                      `path:"admin-state" module:"nokia-conf"`
	Deterministic          *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic       `path:"deterministic" module:"nokia-conf"`
	Endpoint               map[string]*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Endpoint `path:"endpoint" module:"nokia-conf"`
	MaxSubscriberLimit     *uint32                                                                                          `path:"max-subscriber-limit" module:"nokia-conf"`
	SubscriberPrefixLength *uint8                                                                                           `path:"subscriber-prefix-length" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite) IsYANGGoStruct() {
}

// NewEndpoint creates a new entry in the Endpoint list of the
// NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite) NewEndpoint(Address string) (*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Endpoint, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Endpoint == nil {
		t.Endpoint = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Endpoint)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Endpoint[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Endpoint", key)
	}

	t.Endpoint[key] = &NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Endpoint{
		Address: &Address,
	}

	return t.Endpoint[key], nil
}

// RenameEndpoint renames an entry in the list Endpoint within
// the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite) RenameEndpoint(oldK, newK string) error {
	if _, ok := t.Endpoint[newK]; ok {
		return fmt.Errorf("key %v already exists in Endpoint", newK)
	}

	e, ok := t.Endpoint[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Endpoint", oldK)
	}
	e.Address = &newK

	t.Endpoint[newK] = e
	delete(t.Endpoint, oldK)
	return nil
}

// GetOrCreateEndpoint retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite) GetOrCreateEndpoint(Address string) *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Endpoint {

	key := Address

	if v, ok := t.Endpoint[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEndpoint(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEndpoint got unexpected error: %v", err))
	}
	return v
}

// GetEndpoint retrieves the value with the specified key from
// the Endpoint map field of NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite) GetEndpoint(Address string) *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Endpoint {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.Endpoint[key]; ok {
		return lm
	}
	return nil
}

// DeleteEndpoint deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite) DeleteEndpoint(Address string) {
	key := Address

	delete(t.Endpoint, key)
}

// AppendEndpoint appends the supplied NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Endpoint struct to the
// list Endpoint of NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Endpoint already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite) AppendEndpoint(v *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Endpoint) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Endpoint == nil {
		t.Endpoint = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Endpoint)
	}

	if _, ok := t.Endpoint[key]; ok {
		return fmt.Errorf("duplicate key for list Endpoint %v", key)
	}

	t.Endpoint[key] = v
	return nil
}

// GetOrCreateDeterministic retrieves the value of the Deterministic field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite) GetOrCreateDeterministic() *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic {
	if t.Deterministic != nil {
		return t.Deterministic
	}
	t.Deterministic = &NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic{}
	return t.Deterministic
}

// GetDeterministic returns the value of the Deterministic struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite. If the receiver or the field Deterministic is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite) GetDeterministic() *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic {
	if t != nil && t.Deterministic != nil {
		return t.Deterministic
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetMaxSubscriberLimit retrieves the value of the leaf MaxSubscriberLimit from the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxSubscriberLimit is set, it can
// safely use t.GetMaxSubscriberLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxSubscriberLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite) GetMaxSubscriberLimit() uint32 {
	if t == nil || t.MaxSubscriberLimit == nil {
		return 0
	}
	return *t.MaxSubscriberLimit
}

// GetSubscriberPrefixLength retrieves the value of the leaf SubscriberPrefixLength from the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubscriberPrefixLength is set, it can
// safely use t.GetSubscriberPrefixLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubscriberPrefixLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite) GetSubscriberPrefixLength() uint8 {
	if t == nil || t.SubscriberPrefixLength == nil {
		return 128
	}
	return *t.SubscriberPrefixLength
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.SubscriberPrefixLength == nil {
		var v uint8 = 128
		t.SubscriberPrefixLength = &v
	}
	t.Deterministic.PopulateDefaults()
	for _, e := range t.Endpoint {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic represents the /nokia-conf/configure/groups/group/router/nat/inside/large-scale/dual-stack-lite/deterministic YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic struct {
	PolicyMap map[string]*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap                                                                                                  `path:"policy-map" module:"nokia-conf"`
	PrefixMap map[NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Key]*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap `path:"prefix-map" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic) IsYANGGoStruct() {
}

// NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Key represents the key for list PrefixMap of element /nokia-conf/configure/groups/group/router/nat/inside/large-scale/dual-stack-lite/deterministic.
type NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Key struct {
	SourcePrefix string `path:"source-prefix"`
	NatPolicy    string `path:"nat-policy"`
}

// NewPolicyMap creates a new entry in the PolicyMap list of the
// NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic) NewPolicyMap(SourcePrefix string) (*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PolicyMap == nil {
		t.PolicyMap = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap)
	}

	key := SourcePrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PolicyMap[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PolicyMap", key)
	}

	t.PolicyMap[key] = &NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap{
		SourcePrefix: &SourcePrefix,
	}

	return t.PolicyMap[key], nil
}

// RenamePolicyMap renames an entry in the list PolicyMap within
// the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic) RenamePolicyMap(oldK, newK string) error {
	if _, ok := t.PolicyMap[newK]; ok {
		return fmt.Errorf("key %v already exists in PolicyMap", newK)
	}

	e, ok := t.PolicyMap[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PolicyMap", oldK)
	}
	e.SourcePrefix = &newK

	t.PolicyMap[newK] = e
	delete(t.PolicyMap, oldK)
	return nil
}

// GetOrCreatePolicyMap retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic) GetOrCreatePolicyMap(SourcePrefix string) *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap {

	key := SourcePrefix

	if v, ok := t.PolicyMap[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicyMap(SourcePrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicyMap got unexpected error: %v", err))
	}
	return v
}

// GetPolicyMap retrieves the value with the specified key from
// the PolicyMap map field of NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic) GetPolicyMap(SourcePrefix string) *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap {

	if t == nil {
		return nil
	}

	key := SourcePrefix

	if lm, ok := t.PolicyMap[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicyMap deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic) DeletePolicyMap(SourcePrefix string) {
	key := SourcePrefix

	delete(t.PolicyMap, key)
}

// AppendPolicyMap appends the supplied NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap struct to the
// list PolicyMap of NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic) AppendPolicyMap(v *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap) error {
	if v.SourcePrefix == nil {
		return fmt.Errorf("invalid nil key received for SourcePrefix")
	}

	key := *v.SourcePrefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PolicyMap == nil {
		t.PolicyMap = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap)
	}

	if _, ok := t.PolicyMap[key]; ok {
		return fmt.Errorf("duplicate key for list PolicyMap %v", key)
	}

	t.PolicyMap[key] = v
	return nil
}

// NewPrefixMap creates a new entry in the PrefixMap list of the
// NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic) NewPrefixMap(SourcePrefix string, NatPolicy string) (*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrefixMap == nil {
		t.PrefixMap = make(map[NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Key]*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap)
	}

	key := NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Key{
		SourcePrefix: SourcePrefix,
		NatPolicy:    NatPolicy,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PrefixMap[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PrefixMap", key)
	}

	t.PrefixMap[key] = &NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap{
		SourcePrefix: &SourcePrefix,
		NatPolicy:    &NatPolicy,
	}

	return t.PrefixMap[key], nil
}

// RenamePrefixMap renames an entry in the list PrefixMap within
// the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic) RenamePrefixMap(oldK, newK NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Key) error {
	if _, ok := t.PrefixMap[newK]; ok {
		return fmt.Errorf("key %v already exists in PrefixMap", newK)
	}

	e, ok := t.PrefixMap[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PrefixMap", oldK)
	}
	e.SourcePrefix = &newK.SourcePrefix
	e.NatPolicy = &newK.NatPolicy

	t.PrefixMap[newK] = e
	delete(t.PrefixMap, oldK)
	return nil
}

// GetOrCreatePrefixMap retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic) GetOrCreatePrefixMap(SourcePrefix string, NatPolicy string) *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap {

	key := NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Key{
		SourcePrefix: SourcePrefix,
		NatPolicy:    NatPolicy,
	}

	if v, ok := t.PrefixMap[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefixMap(SourcePrefix, NatPolicy)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefixMap got unexpected error: %v", err))
	}
	return v
}

// GetPrefixMap retrieves the value with the specified key from
// the PrefixMap map field of NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic) GetPrefixMap(SourcePrefix string, NatPolicy string) *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Key{
		SourcePrefix: SourcePrefix,
		NatPolicy:    NatPolicy,
	}

	if lm, ok := t.PrefixMap[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefixMap deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic) DeletePrefixMap(SourcePrefix string, NatPolicy string) {
	key := NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Key{
		SourcePrefix: SourcePrefix,
		NatPolicy:    NatPolicy,
	}

	delete(t.PrefixMap, key)
}

// AppendPrefixMap appends the supplied NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap struct to the
// list PrefixMap of NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic) AppendPrefixMap(v *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap) error {
	if v.SourcePrefix == nil {
		return fmt.Errorf("invalid nil key for SourcePrefix")
	}

	if v.NatPolicy == nil {
		return fmt.Errorf("invalid nil key for NatPolicy")
	}

	key := NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Key{
		SourcePrefix: *v.SourcePrefix,
		NatPolicy:    *v.NatPolicy,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrefixMap == nil {
		t.PrefixMap = make(map[NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Key]*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap)
	}

	if _, ok := t.PrefixMap[key]; ok {
		return fmt.Errorf("duplicate key for list PrefixMap %v", key)
	}

	t.PrefixMap[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.PolicyMap {
		e.PopulateDefaults()
	}
	for _, e := range t.PrefixMap {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap represents the /nokia-conf/configure/groups/group/router/nat/inside/large-scale/dual-stack-lite/deterministic/policy-map YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap struct {
	AdminState   E_NokiaTypesSros_AdminState                                                                                                                                                                                              `path:"admin-state" module:"nokia-conf"`
	Map          map[NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map_Key]*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map `path:"map" module:"nokia-conf"`
	NatPolicy    *string                                                                                                                                                                                                                  `path:"nat-policy" module:"nokia-conf"`
	SourcePrefix *string                                                                                                                                                                                                                  `path:"source-prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap) IsYANGGoStruct() {
}

// NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map_Key represents the key for list Map of element /nokia-conf/configure/groups/group/router/nat/inside/large-scale/dual-stack-lite/deterministic/policy-map.
type NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map_Key struct {
	From string `path:"from"`
	To   string `path:"to"`
}

// NewMap creates a new entry in the Map list of the
// NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap) NewMap(From string, To string) (*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Map == nil {
		t.Map = make(map[NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map_Key]*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map)
	}

	key := NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map_Key{
		From: From,
		To:   To,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Map[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Map", key)
	}

	t.Map[key] = &NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map{
		From: &From,
		To:   &To,
	}

	return t.Map[key], nil
}

// RenameMap renames an entry in the list Map within
// the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap) RenameMap(oldK, newK NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map_Key) error {
	if _, ok := t.Map[newK]; ok {
		return fmt.Errorf("key %v already exists in Map", newK)
	}

	e, ok := t.Map[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Map", oldK)
	}
	e.From = &newK.From
	e.To = &newK.To

	t.Map[newK] = e
	delete(t.Map, oldK)
	return nil
}

// GetOrCreateMap retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap) GetOrCreateMap(From string, To string) *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map {

	key := NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map_Key{
		From: From,
		To:   To,
	}

	if v, ok := t.Map[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMap(From, To)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMap got unexpected error: %v", err))
	}
	return v
}

// GetMap retrieves the value with the specified key from
// the Map map field of NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap) GetMap(From string, To string) *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map_Key{
		From: From,
		To:   To,
	}

	if lm, ok := t.Map[key]; ok {
		return lm
	}
	return nil
}

// DeleteMap deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap) DeleteMap(From string, To string) {
	key := NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map_Key{
		From: From,
		To:   To,
	}

	delete(t.Map, key)
}

// AppendMap appends the supplied NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map struct to the
// list Map of NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap) AppendMap(v *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map) error {
	if v.From == nil {
		return fmt.Errorf("invalid nil key for From")
	}

	if v.To == nil {
		return fmt.Errorf("invalid nil key for To")
	}

	key := NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map_Key{
		From: *v.From,
		To:   *v.To,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Map == nil {
		t.Map = make(map[NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map_Key]*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map)
	}

	if _, ok := t.Map[key]; ok {
		return fmt.Errorf("duplicate key for list Map %v", key)
	}

	t.Map[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetNatPolicy retrieves the value of the leaf NatPolicy from the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NatPolicy is set, it can
// safely use t.GetNatPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NatPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap) GetNatPolicy() string {
	if t == nil || t.NatPolicy == nil {
		return ""
	}
	return *t.NatPolicy
}

// GetSourcePrefix retrieves the value of the leaf SourcePrefix from the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourcePrefix is set, it can
// safely use t.GetSourcePrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourcePrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap) GetSourcePrefix() string {
	if t == nil || t.SourcePrefix == nil {
		return ""
	}
	return *t.SourcePrefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.Map {
		e.PopulateDefaults()
	}
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.SourcePrefix == nil {
		return nil, fmt.Errorf("nil value for key SourcePrefix")
	}

	return map[string]interface{}{
		"source-prefix": *t.SourcePrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map represents the /nokia-conf/configure/groups/group/router/nat/inside/large-scale/dual-stack-lite/deterministic/policy-map/map YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map struct {
	FirstOutsideAddress *string `path:"first-outside-address" module:"nokia-conf"`
	From                *string `path:"from" module:"nokia-conf"`
	To                  *string `path:"to" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map) IsYANGGoStruct() {
}

// GetFirstOutsideAddress retrieves the value of the leaf FirstOutsideAddress from the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FirstOutsideAddress is set, it can
// safely use t.GetFirstOutsideAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FirstOutsideAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map) GetFirstOutsideAddress() string {
	if t == nil || t.FirstOutsideAddress == nil {
		return ""
	}
	return *t.FirstOutsideAddress
}

// GetFrom retrieves the value of the leaf From from the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if From is set, it can
// safely use t.GetFrom() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.From == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map) GetFrom() string {
	if t == nil || t.From == nil {
		return ""
	}
	return *t.From
}

// GetTo retrieves the value of the leaf To from the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if To is set, it can
// safely use t.GetTo() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.To == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map) GetTo() string {
	if t == nil || t.To == nil {
		return ""
	}
	return *t.To
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.From == nil {
		return nil, fmt.Errorf("nil value for key From")
	}

	if t.To == nil {
		return nil, fmt.Errorf("nil value for key To")
	}

	return map[string]interface{}{
		"from": *t.From,
		"to":   *t.To,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PolicyMap_Map) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap represents the /nokia-conf/configure/groups/group/router/nat/inside/large-scale/dual-stack-lite/deterministic/prefix-map YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap struct {
	AdminState   E_NokiaTypesSros_AdminState                                                                                                                                                                                              `path:"admin-state" module:"nokia-conf"`
	Map          map[NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map_Key]*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map `path:"map" module:"nokia-conf"`
	NatPolicy    *string                                                                                                                                                                                                                  `path:"nat-policy" module:"nokia-conf"`
	SourcePrefix *string                                                                                                                                                                                                                  `path:"source-prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap) IsYANGGoStruct() {
}

// NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map_Key represents the key for list Map of element /nokia-conf/configure/groups/group/router/nat/inside/large-scale/dual-stack-lite/deterministic/prefix-map.
type NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map_Key struct {
	From string `path:"from"`
	To   string `path:"to"`
}

// NewMap creates a new entry in the Map list of the
// NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap) NewMap(From string, To string) (*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Map == nil {
		t.Map = make(map[NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map_Key]*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map)
	}

	key := NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map_Key{
		From: From,
		To:   To,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Map[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Map", key)
	}

	t.Map[key] = &NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map{
		From: &From,
		To:   &To,
	}

	return t.Map[key], nil
}

// RenameMap renames an entry in the list Map within
// the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap) RenameMap(oldK, newK NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map_Key) error {
	if _, ok := t.Map[newK]; ok {
		return fmt.Errorf("key %v already exists in Map", newK)
	}

	e, ok := t.Map[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Map", oldK)
	}
	e.From = &newK.From
	e.To = &newK.To

	t.Map[newK] = e
	delete(t.Map, oldK)
	return nil
}

// GetOrCreateMap retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap) GetOrCreateMap(From string, To string) *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map {

	key := NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map_Key{
		From: From,
		To:   To,
	}

	if v, ok := t.Map[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMap(From, To)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMap got unexpected error: %v", err))
	}
	return v
}

// GetMap retrieves the value with the specified key from
// the Map map field of NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap) GetMap(From string, To string) *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map_Key{
		From: From,
		To:   To,
	}

	if lm, ok := t.Map[key]; ok {
		return lm
	}
	return nil
}

// DeleteMap deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap) DeleteMap(From string, To string) {
	key := NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map_Key{
		From: From,
		To:   To,
	}

	delete(t.Map, key)
}

// AppendMap appends the supplied NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map struct to the
// list Map of NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap) AppendMap(v *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map) error {
	if v.From == nil {
		return fmt.Errorf("invalid nil key for From")
	}

	if v.To == nil {
		return fmt.Errorf("invalid nil key for To")
	}

	key := NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map_Key{
		From: *v.From,
		To:   *v.To,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Map == nil {
		t.Map = make(map[NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map_Key]*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map)
	}

	if _, ok := t.Map[key]; ok {
		return fmt.Errorf("duplicate key for list Map %v", key)
	}

	t.Map[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetNatPolicy retrieves the value of the leaf NatPolicy from the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NatPolicy is set, it can
// safely use t.GetNatPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NatPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap) GetNatPolicy() string {
	if t == nil || t.NatPolicy == nil {
		return ""
	}
	return *t.NatPolicy
}

// GetSourcePrefix retrieves the value of the leaf SourcePrefix from the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourcePrefix is set, it can
// safely use t.GetSourcePrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourcePrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap) GetSourcePrefix() string {
	if t == nil || t.SourcePrefix == nil {
		return ""
	}
	return *t.SourcePrefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.Map {
		e.PopulateDefaults()
	}
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.NatPolicy == nil {
		return nil, fmt.Errorf("nil value for key NatPolicy")
	}

	if t.SourcePrefix == nil {
		return nil, fmt.Errorf("nil value for key SourcePrefix")
	}

	return map[string]interface{}{
		"nat-policy":    *t.NatPolicy,
		"source-prefix": *t.SourcePrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map represents the /nokia-conf/configure/groups/group/router/nat/inside/large-scale/dual-stack-lite/deterministic/prefix-map/map YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map struct {
	FirstOutsideAddress *string `path:"first-outside-address" module:"nokia-conf"`
	From                *string `path:"from" module:"nokia-conf"`
	To                  *string `path:"to" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map) IsYANGGoStruct() {
}

// GetFirstOutsideAddress retrieves the value of the leaf FirstOutsideAddress from the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FirstOutsideAddress is set, it can
// safely use t.GetFirstOutsideAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FirstOutsideAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map) GetFirstOutsideAddress() string {
	if t == nil || t.FirstOutsideAddress == nil {
		return ""
	}
	return *t.FirstOutsideAddress
}

// GetFrom retrieves the value of the leaf From from the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if From is set, it can
// safely use t.GetFrom() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.From == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map) GetFrom() string {
	if t == nil || t.From == nil {
		return ""
	}
	return *t.From
}

// GetTo retrieves the value of the leaf To from the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if To is set, it can
// safely use t.GetTo() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.To == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map) GetTo() string {
	if t == nil || t.To == nil {
		return ""
	}
	return *t.To
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.From == nil {
		return nil, fmt.Errorf("nil value for key From")
	}

	if t.To == nil {
		return nil, fmt.Errorf("nil value for key To")
	}

	return map[string]interface{}{
		"from": *t.From,
		"to":   *t.To,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Deterministic_PrefixMap_Map) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Endpoint represents the /nokia-conf/configure/groups/group/router/nat/inside/large-scale/dual-stack-lite/endpoint YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Endpoint struct {
	Address                *string                         `path:"address" module:"nokia-conf"`
	IpFragmentation        E_NokiaTypesNat_IpFragmentation `path:"ip-fragmentation" module:"nokia-conf"`
	MinFirstFragmentSizeRx *uint32                         `path:"min-first-fragment-size-rx" module:"nokia-conf"`
	Reassembly             *bool                           `path:"reassembly" module:"nokia-conf"`
	TunnelMtu              *uint32                         `path:"tunnel-mtu" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Endpoint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Endpoint) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Endpoint) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetIpFragmentation retrieves the value of the leaf IpFragmentation from the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpFragmentation is set, it can
// safely use t.GetIpFragmentation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpFragmentation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Endpoint) GetIpFragmentation() E_NokiaTypesNat_IpFragmentation {
	if t == nil || t.IpFragmentation == 0 {
		return 0
	}
	return t.IpFragmentation
}

// GetMinFirstFragmentSizeRx retrieves the value of the leaf MinFirstFragmentSizeRx from the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinFirstFragmentSizeRx is set, it can
// safely use t.GetMinFirstFragmentSizeRx() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinFirstFragmentSizeRx == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Endpoint) GetMinFirstFragmentSizeRx() uint32 {
	if t == nil || t.MinFirstFragmentSizeRx == nil {
		return 1280
	}
	return *t.MinFirstFragmentSizeRx
}

// GetReassembly retrieves the value of the leaf Reassembly from the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Reassembly is set, it can
// safely use t.GetReassembly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Reassembly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Endpoint) GetReassembly() bool {
	if t == nil || t.Reassembly == nil {
		return false
	}
	return *t.Reassembly
}

// GetTunnelMtu retrieves the value of the leaf TunnelMtu from the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TunnelMtu is set, it can
// safely use t.GetTunnelMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TunnelMtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Endpoint) GetTunnelMtu() uint32 {
	if t == nil || t.TunnelMtu == nil {
		return 1500
	}
	return *t.TunnelMtu
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Endpoint
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Endpoint) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MinFirstFragmentSizeRx == nil {
		var v uint32 = 1280
		t.MinFirstFragmentSizeRx = &v
	}
	if t.Reassembly == nil {
		var v bool = false
		t.Reassembly = &v
	}
	if t.TunnelMtu == nil {
		var v uint32 = 1500
		t.TunnelMtu = &v
	}
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Endpoint struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Endpoint) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Endpoint) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Endpoint"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Endpoint) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Endpoint) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Endpoint.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_DualStackLite_Endpoint) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44 represents the /nokia-conf/configure/groups/group/router/nat/inside/large-scale/nat44 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44 struct {
	DestinationPrefix  map[string]*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_DestinationPrefix `path:"destination-prefix" module:"nokia-conf"`
	Deterministic      *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic                `path:"deterministic" module:"nokia-conf"`
	MaxSubscriberLimit *uint32                                                                                           `path:"max-subscriber-limit" module:"nokia-conf"`
	NatImport          []string                                                                                          `path:"nat-import" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44) IsYANGGoStruct() {}

// NewDestinationPrefix creates a new entry in the DestinationPrefix list of the
// NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44) NewDestinationPrefix(IpPrefixLength string) (*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_DestinationPrefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DestinationPrefix == nil {
		t.DestinationPrefix = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_DestinationPrefix)
	}

	key := IpPrefixLength

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DestinationPrefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DestinationPrefix", key)
	}

	t.DestinationPrefix[key] = &NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_DestinationPrefix{
		IpPrefixLength: &IpPrefixLength,
	}

	return t.DestinationPrefix[key], nil
}

// RenameDestinationPrefix renames an entry in the list DestinationPrefix within
// the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44) RenameDestinationPrefix(oldK, newK string) error {
	if _, ok := t.DestinationPrefix[newK]; ok {
		return fmt.Errorf("key %v already exists in DestinationPrefix", newK)
	}

	e, ok := t.DestinationPrefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in DestinationPrefix", oldK)
	}
	e.IpPrefixLength = &newK

	t.DestinationPrefix[newK] = e
	delete(t.DestinationPrefix, oldK)
	return nil
}

// GetOrCreateDestinationPrefix retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44) GetOrCreateDestinationPrefix(IpPrefixLength string) *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_DestinationPrefix {

	key := IpPrefixLength

	if v, ok := t.DestinationPrefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDestinationPrefix(IpPrefixLength)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDestinationPrefix got unexpected error: %v", err))
	}
	return v
}

// GetDestinationPrefix retrieves the value with the specified key from
// the DestinationPrefix map field of NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44) GetDestinationPrefix(IpPrefixLength string) *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_DestinationPrefix {

	if t == nil {
		return nil
	}

	key := IpPrefixLength

	if lm, ok := t.DestinationPrefix[key]; ok {
		return lm
	}
	return nil
}

// DeleteDestinationPrefix deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44) DeleteDestinationPrefix(IpPrefixLength string) {
	key := IpPrefixLength

	delete(t.DestinationPrefix, key)
}

// AppendDestinationPrefix appends the supplied NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_DestinationPrefix struct to the
// list DestinationPrefix of NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_DestinationPrefix already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44) AppendDestinationPrefix(v *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_DestinationPrefix) error {
	if v.IpPrefixLength == nil {
		return fmt.Errorf("invalid nil key received for IpPrefixLength")
	}

	key := *v.IpPrefixLength

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DestinationPrefix == nil {
		t.DestinationPrefix = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_DestinationPrefix)
	}

	if _, ok := t.DestinationPrefix[key]; ok {
		return fmt.Errorf("duplicate key for list DestinationPrefix %v", key)
	}

	t.DestinationPrefix[key] = v
	return nil
}

// GetOrCreateDeterministic retrieves the value of the Deterministic field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44) GetOrCreateDeterministic() *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic {
	if t.Deterministic != nil {
		return t.Deterministic
	}
	t.Deterministic = &NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic{}
	return t.Deterministic
}

// GetDeterministic returns the value of the Deterministic struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44. If the receiver or the field Deterministic is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44) GetDeterministic() *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic {
	if t != nil && t.Deterministic != nil {
		return t.Deterministic
	}
	return nil
}

// GetMaxSubscriberLimit retrieves the value of the leaf MaxSubscriberLimit from the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxSubscriberLimit is set, it can
// safely use t.GetMaxSubscriberLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxSubscriberLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44) GetMaxSubscriberLimit() uint32 {
	if t == nil || t.MaxSubscriberLimit == nil {
		return 0
	}
	return *t.MaxSubscriberLimit
}

// GetNatImport retrieves the value of the leaf NatImport from the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NatImport is set, it can
// safely use t.GetNatImport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NatImport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44) GetNatImport() []string {
	if t == nil || t.NatImport == nil {
		return nil
	}
	return t.NatImport
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Deterministic.PopulateDefaults()
	for _, e := range t.DestinationPrefix {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_DestinationPrefix represents the /nokia-conf/configure/groups/group/router/nat/inside/large-scale/nat44/destination-prefix YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_DestinationPrefix struct {
	IpPrefixLength *string `path:"ip-prefix-length" module:"nokia-conf"`
	NatPolicy      *string `path:"nat-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_DestinationPrefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_DestinationPrefix) IsYANGGoStruct() {
}

// GetIpPrefixLength retrieves the value of the leaf IpPrefixLength from the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_DestinationPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefixLength is set, it can
// safely use t.GetIpPrefixLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefixLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_DestinationPrefix) GetIpPrefixLength() string {
	if t == nil || t.IpPrefixLength == nil {
		return ""
	}
	return *t.IpPrefixLength
}

// GetNatPolicy retrieves the value of the leaf NatPolicy from the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_DestinationPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NatPolicy is set, it can
// safely use t.GetNatPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NatPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_DestinationPrefix) GetNatPolicy() string {
	if t == nil || t.NatPolicy == nil {
		return ""
	}
	return *t.NatPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_DestinationPrefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_DestinationPrefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_DestinationPrefix struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_DestinationPrefix) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefixLength == nil {
		return nil, fmt.Errorf("nil value for key IpPrefixLength")
	}

	return map[string]interface{}{
		"ip-prefix-length": *t.IpPrefixLength,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_DestinationPrefix) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_DestinationPrefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_DestinationPrefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_DestinationPrefix) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_DestinationPrefix.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_DestinationPrefix) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic represents the /nokia-conf/configure/groups/group/router/nat/inside/large-scale/nat44/deterministic YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic struct {
	PolicyMap map[string]*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap                                                                                          `path:"policy-map" module:"nokia-conf"`
	PrefixMap map[NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Key]*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap `path:"prefix-map" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic) IsYANGGoStruct() {
}

// NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Key represents the key for list PrefixMap of element /nokia-conf/configure/groups/group/router/nat/inside/large-scale/nat44/deterministic.
type NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Key struct {
	SourcePrefix string `path:"source-prefix"`
	NatPolicy    string `path:"nat-policy"`
}

// NewPolicyMap creates a new entry in the PolicyMap list of the
// NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic) NewPolicyMap(SourcePrefix string) (*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PolicyMap == nil {
		t.PolicyMap = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap)
	}

	key := SourcePrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PolicyMap[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PolicyMap", key)
	}

	t.PolicyMap[key] = &NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap{
		SourcePrefix: &SourcePrefix,
	}

	return t.PolicyMap[key], nil
}

// RenamePolicyMap renames an entry in the list PolicyMap within
// the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic) RenamePolicyMap(oldK, newK string) error {
	if _, ok := t.PolicyMap[newK]; ok {
		return fmt.Errorf("key %v already exists in PolicyMap", newK)
	}

	e, ok := t.PolicyMap[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PolicyMap", oldK)
	}
	e.SourcePrefix = &newK

	t.PolicyMap[newK] = e
	delete(t.PolicyMap, oldK)
	return nil
}

// GetOrCreatePolicyMap retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic) GetOrCreatePolicyMap(SourcePrefix string) *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap {

	key := SourcePrefix

	if v, ok := t.PolicyMap[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicyMap(SourcePrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicyMap got unexpected error: %v", err))
	}
	return v
}

// GetPolicyMap retrieves the value with the specified key from
// the PolicyMap map field of NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic) GetPolicyMap(SourcePrefix string) *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap {

	if t == nil {
		return nil
	}

	key := SourcePrefix

	if lm, ok := t.PolicyMap[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicyMap deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic) DeletePolicyMap(SourcePrefix string) {
	key := SourcePrefix

	delete(t.PolicyMap, key)
}

// AppendPolicyMap appends the supplied NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap struct to the
// list PolicyMap of NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic) AppendPolicyMap(v *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap) error {
	if v.SourcePrefix == nil {
		return fmt.Errorf("invalid nil key received for SourcePrefix")
	}

	key := *v.SourcePrefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PolicyMap == nil {
		t.PolicyMap = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap)
	}

	if _, ok := t.PolicyMap[key]; ok {
		return fmt.Errorf("duplicate key for list PolicyMap %v", key)
	}

	t.PolicyMap[key] = v
	return nil
}

// NewPrefixMap creates a new entry in the PrefixMap list of the
// NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic) NewPrefixMap(SourcePrefix string, NatPolicy string) (*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrefixMap == nil {
		t.PrefixMap = make(map[NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Key]*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap)
	}

	key := NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Key{
		SourcePrefix: SourcePrefix,
		NatPolicy:    NatPolicy,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PrefixMap[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PrefixMap", key)
	}

	t.PrefixMap[key] = &NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap{
		SourcePrefix: &SourcePrefix,
		NatPolicy:    &NatPolicy,
	}

	return t.PrefixMap[key], nil
}

// RenamePrefixMap renames an entry in the list PrefixMap within
// the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic) RenamePrefixMap(oldK, newK NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Key) error {
	if _, ok := t.PrefixMap[newK]; ok {
		return fmt.Errorf("key %v already exists in PrefixMap", newK)
	}

	e, ok := t.PrefixMap[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PrefixMap", oldK)
	}
	e.SourcePrefix = &newK.SourcePrefix
	e.NatPolicy = &newK.NatPolicy

	t.PrefixMap[newK] = e
	delete(t.PrefixMap, oldK)
	return nil
}

// GetOrCreatePrefixMap retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic) GetOrCreatePrefixMap(SourcePrefix string, NatPolicy string) *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap {

	key := NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Key{
		SourcePrefix: SourcePrefix,
		NatPolicy:    NatPolicy,
	}

	if v, ok := t.PrefixMap[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefixMap(SourcePrefix, NatPolicy)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefixMap got unexpected error: %v", err))
	}
	return v
}

// GetPrefixMap retrieves the value with the specified key from
// the PrefixMap map field of NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic) GetPrefixMap(SourcePrefix string, NatPolicy string) *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Key{
		SourcePrefix: SourcePrefix,
		NatPolicy:    NatPolicy,
	}

	if lm, ok := t.PrefixMap[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefixMap deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic) DeletePrefixMap(SourcePrefix string, NatPolicy string) {
	key := NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Key{
		SourcePrefix: SourcePrefix,
		NatPolicy:    NatPolicy,
	}

	delete(t.PrefixMap, key)
}

// AppendPrefixMap appends the supplied NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap struct to the
// list PrefixMap of NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic) AppendPrefixMap(v *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap) error {
	if v.SourcePrefix == nil {
		return fmt.Errorf("invalid nil key for SourcePrefix")
	}

	if v.NatPolicy == nil {
		return fmt.Errorf("invalid nil key for NatPolicy")
	}

	key := NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Key{
		SourcePrefix: *v.SourcePrefix,
		NatPolicy:    *v.NatPolicy,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrefixMap == nil {
		t.PrefixMap = make(map[NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Key]*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap)
	}

	if _, ok := t.PrefixMap[key]; ok {
		return fmt.Errorf("duplicate key for list PrefixMap %v", key)
	}

	t.PrefixMap[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.PolicyMap {
		e.PopulateDefaults()
	}
	for _, e := range t.PrefixMap {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap represents the /nokia-conf/configure/groups/group/router/nat/inside/large-scale/nat44/deterministic/policy-map YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap struct {
	AdminState   E_NokiaTypesSros_AdminState                                                                                                                                                                              `path:"admin-state" module:"nokia-conf"`
	Map          map[NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map_Key]*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map `path:"map" module:"nokia-conf"`
	NatPolicy    *string                                                                                                                                                                                                  `path:"nat-policy" module:"nokia-conf"`
	SourcePrefix *string                                                                                                                                                                                                  `path:"source-prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap) IsYANGGoStruct() {
}

// NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map_Key represents the key for list Map of element /nokia-conf/configure/groups/group/router/nat/inside/large-scale/nat44/deterministic/policy-map.
type NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map_Key struct {
	From string `path:"from"`
	To   string `path:"to"`
}

// NewMap creates a new entry in the Map list of the
// NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap) NewMap(From string, To string) (*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Map == nil {
		t.Map = make(map[NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map_Key]*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map)
	}

	key := NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map_Key{
		From: From,
		To:   To,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Map[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Map", key)
	}

	t.Map[key] = &NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map{
		From: &From,
		To:   &To,
	}

	return t.Map[key], nil
}

// RenameMap renames an entry in the list Map within
// the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap) RenameMap(oldK, newK NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map_Key) error {
	if _, ok := t.Map[newK]; ok {
		return fmt.Errorf("key %v already exists in Map", newK)
	}

	e, ok := t.Map[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Map", oldK)
	}
	e.From = &newK.From
	e.To = &newK.To

	t.Map[newK] = e
	delete(t.Map, oldK)
	return nil
}

// GetOrCreateMap retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap) GetOrCreateMap(From string, To string) *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map {

	key := NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map_Key{
		From: From,
		To:   To,
	}

	if v, ok := t.Map[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMap(From, To)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMap got unexpected error: %v", err))
	}
	return v
}

// GetMap retrieves the value with the specified key from
// the Map map field of NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap) GetMap(From string, To string) *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map_Key{
		From: From,
		To:   To,
	}

	if lm, ok := t.Map[key]; ok {
		return lm
	}
	return nil
}

// DeleteMap deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap) DeleteMap(From string, To string) {
	key := NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map_Key{
		From: From,
		To:   To,
	}

	delete(t.Map, key)
}

// AppendMap appends the supplied NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map struct to the
// list Map of NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap) AppendMap(v *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map) error {
	if v.From == nil {
		return fmt.Errorf("invalid nil key for From")
	}

	if v.To == nil {
		return fmt.Errorf("invalid nil key for To")
	}

	key := NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map_Key{
		From: *v.From,
		To:   *v.To,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Map == nil {
		t.Map = make(map[NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map_Key]*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map)
	}

	if _, ok := t.Map[key]; ok {
		return fmt.Errorf("duplicate key for list Map %v", key)
	}

	t.Map[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetNatPolicy retrieves the value of the leaf NatPolicy from the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NatPolicy is set, it can
// safely use t.GetNatPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NatPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap) GetNatPolicy() string {
	if t == nil || t.NatPolicy == nil {
		return ""
	}
	return *t.NatPolicy
}

// GetSourcePrefix retrieves the value of the leaf SourcePrefix from the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourcePrefix is set, it can
// safely use t.GetSourcePrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourcePrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap) GetSourcePrefix() string {
	if t == nil || t.SourcePrefix == nil {
		return ""
	}
	return *t.SourcePrefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.Map {
		e.PopulateDefaults()
	}
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.SourcePrefix == nil {
		return nil, fmt.Errorf("nil value for key SourcePrefix")
	}

	return map[string]interface{}{
		"source-prefix": *t.SourcePrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map represents the /nokia-conf/configure/groups/group/router/nat/inside/large-scale/nat44/deterministic/policy-map/map YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map struct {
	FirstOutsideAddress *string `path:"first-outside-address" module:"nokia-conf"`
	From                *string `path:"from" module:"nokia-conf"`
	To                  *string `path:"to" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map) IsYANGGoStruct() {
}

// GetFirstOutsideAddress retrieves the value of the leaf FirstOutsideAddress from the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FirstOutsideAddress is set, it can
// safely use t.GetFirstOutsideAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FirstOutsideAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map) GetFirstOutsideAddress() string {
	if t == nil || t.FirstOutsideAddress == nil {
		return ""
	}
	return *t.FirstOutsideAddress
}

// GetFrom retrieves the value of the leaf From from the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if From is set, it can
// safely use t.GetFrom() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.From == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map) GetFrom() string {
	if t == nil || t.From == nil {
		return ""
	}
	return *t.From
}

// GetTo retrieves the value of the leaf To from the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if To is set, it can
// safely use t.GetTo() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.To == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map) GetTo() string {
	if t == nil || t.To == nil {
		return ""
	}
	return *t.To
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.From == nil {
		return nil, fmt.Errorf("nil value for key From")
	}

	if t.To == nil {
		return nil, fmt.Errorf("nil value for key To")
	}

	return map[string]interface{}{
		"from": *t.From,
		"to":   *t.To,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PolicyMap_Map) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap represents the /nokia-conf/configure/groups/group/router/nat/inside/large-scale/nat44/deterministic/prefix-map YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap struct {
	AdminState   E_NokiaTypesSros_AdminState                                                                                                                                                                              `path:"admin-state" module:"nokia-conf"`
	Map          map[NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map_Key]*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map `path:"map" module:"nokia-conf"`
	NatPolicy    *string                                                                                                                                                                                                  `path:"nat-policy" module:"nokia-conf"`
	SourcePrefix *string                                                                                                                                                                                                  `path:"source-prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap) IsYANGGoStruct() {
}

// NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map_Key represents the key for list Map of element /nokia-conf/configure/groups/group/router/nat/inside/large-scale/nat44/deterministic/prefix-map.
type NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map_Key struct {
	From string `path:"from"`
	To   string `path:"to"`
}

// NewMap creates a new entry in the Map list of the
// NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap) NewMap(From string, To string) (*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Map == nil {
		t.Map = make(map[NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map_Key]*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map)
	}

	key := NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map_Key{
		From: From,
		To:   To,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Map[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Map", key)
	}

	t.Map[key] = &NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map{
		From: &From,
		To:   &To,
	}

	return t.Map[key], nil
}

// RenameMap renames an entry in the list Map within
// the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap) RenameMap(oldK, newK NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map_Key) error {
	if _, ok := t.Map[newK]; ok {
		return fmt.Errorf("key %v already exists in Map", newK)
	}

	e, ok := t.Map[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Map", oldK)
	}
	e.From = &newK.From
	e.To = &newK.To

	t.Map[newK] = e
	delete(t.Map, oldK)
	return nil
}

// GetOrCreateMap retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap) GetOrCreateMap(From string, To string) *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map {

	key := NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map_Key{
		From: From,
		To:   To,
	}

	if v, ok := t.Map[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMap(From, To)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMap got unexpected error: %v", err))
	}
	return v
}

// GetMap retrieves the value with the specified key from
// the Map map field of NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap) GetMap(From string, To string) *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map_Key{
		From: From,
		To:   To,
	}

	if lm, ok := t.Map[key]; ok {
		return lm
	}
	return nil
}

// DeleteMap deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap) DeleteMap(From string, To string) {
	key := NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map_Key{
		From: From,
		To:   To,
	}

	delete(t.Map, key)
}

// AppendMap appends the supplied NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map struct to the
// list Map of NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap) AppendMap(v *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map) error {
	if v.From == nil {
		return fmt.Errorf("invalid nil key for From")
	}

	if v.To == nil {
		return fmt.Errorf("invalid nil key for To")
	}

	key := NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map_Key{
		From: *v.From,
		To:   *v.To,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Map == nil {
		t.Map = make(map[NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map_Key]*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map)
	}

	if _, ok := t.Map[key]; ok {
		return fmt.Errorf("duplicate key for list Map %v", key)
	}

	t.Map[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetNatPolicy retrieves the value of the leaf NatPolicy from the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NatPolicy is set, it can
// safely use t.GetNatPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NatPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap) GetNatPolicy() string {
	if t == nil || t.NatPolicy == nil {
		return ""
	}
	return *t.NatPolicy
}

// GetSourcePrefix retrieves the value of the leaf SourcePrefix from the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourcePrefix is set, it can
// safely use t.GetSourcePrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourcePrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap) GetSourcePrefix() string {
	if t == nil || t.SourcePrefix == nil {
		return ""
	}
	return *t.SourcePrefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.Map {
		e.PopulateDefaults()
	}
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.NatPolicy == nil {
		return nil, fmt.Errorf("nil value for key NatPolicy")
	}

	if t.SourcePrefix == nil {
		return nil, fmt.Errorf("nil value for key SourcePrefix")
	}

	return map[string]interface{}{
		"nat-policy":    *t.NatPolicy,
		"source-prefix": *t.SourcePrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map represents the /nokia-conf/configure/groups/group/router/nat/inside/large-scale/nat44/deterministic/prefix-map/map YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map struct {
	FirstOutsideAddress *string `path:"first-outside-address" module:"nokia-conf"`
	From                *string `path:"from" module:"nokia-conf"`
	To                  *string `path:"to" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map) IsYANGGoStruct() {
}

// GetFirstOutsideAddress retrieves the value of the leaf FirstOutsideAddress from the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FirstOutsideAddress is set, it can
// safely use t.GetFirstOutsideAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FirstOutsideAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map) GetFirstOutsideAddress() string {
	if t == nil || t.FirstOutsideAddress == nil {
		return ""
	}
	return *t.FirstOutsideAddress
}

// GetFrom retrieves the value of the leaf From from the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if From is set, it can
// safely use t.GetFrom() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.From == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map) GetFrom() string {
	if t == nil || t.From == nil {
		return ""
	}
	return *t.From
}

// GetTo retrieves the value of the leaf To from the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if To is set, it can
// safely use t.GetTo() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.To == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map) GetTo() string {
	if t == nil || t.To == nil {
		return ""
	}
	return *t.To
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.From == nil {
		return nil, fmt.Errorf("nil value for key From")
	}

	if t.To == nil {
		return nil, fmt.Errorf("nil value for key To")
	}

	return map[string]interface{}{
		"from": *t.From,
		"to":   *t.To,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat44_Deterministic_PrefixMap_Map) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64 represents the /nokia-conf/configure/groups/group/router/nat/inside/large-scale/nat64 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64 struct {
	AdminState               E_NokiaTypesSros_AdminState                                              `path:"admin-state" module:"nokia-conf"`
	DropZeroIpv4Checksum     *bool                                                                    `path:"drop-zero-ipv4-checksum" module:"nokia-conf"`
	InsertIpv6FragmentHeader *bool                                                                    `path:"insert-ipv6-fragment-header" module:"nokia-conf"`
	IpFragmentation          E_NokiaTypesNat_IpFragmentation                                          `path:"ip-fragmentation" module:"nokia-conf"`
	Ipv6Mtu                  *uint32                                                                  `path:"ipv6-mtu" module:"nokia-conf"`
	Prefix                   *string                                                                  `path:"prefix" module:"nokia-conf"`
	SubscriberPrefixLength   *uint8                                                                   `path:"subscriber-prefix-length" module:"nokia-conf"`
	Tos                      *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64_Tos `path:"tos" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64) IsYANGGoStruct() {}

// GetOrCreateTos retrieves the value of the Tos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64) GetOrCreateTos() *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64_Tos {
	if t.Tos != nil {
		return t.Tos
	}
	t.Tos = &NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64_Tos{}
	return t.Tos
}

// GetTos returns the value of the Tos struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64. If the receiver or the field Tos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64) GetTos() *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64_Tos {
	if t != nil && t.Tos != nil {
		return t.Tos
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDropZeroIpv4Checksum retrieves the value of the leaf DropZeroIpv4Checksum from the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DropZeroIpv4Checksum is set, it can
// safely use t.GetDropZeroIpv4Checksum() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DropZeroIpv4Checksum == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64) GetDropZeroIpv4Checksum() bool {
	if t == nil || t.DropZeroIpv4Checksum == nil {
		return false
	}
	return *t.DropZeroIpv4Checksum
}

// GetInsertIpv6FragmentHeader retrieves the value of the leaf InsertIpv6FragmentHeader from the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InsertIpv6FragmentHeader is set, it can
// safely use t.GetInsertIpv6FragmentHeader() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InsertIpv6FragmentHeader == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64) GetInsertIpv6FragmentHeader() bool {
	if t == nil || t.InsertIpv6FragmentHeader == nil {
		return false
	}
	return *t.InsertIpv6FragmentHeader
}

// GetIpFragmentation retrieves the value of the leaf IpFragmentation from the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpFragmentation is set, it can
// safely use t.GetIpFragmentation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpFragmentation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64) GetIpFragmentation() E_NokiaTypesNat_IpFragmentation {
	if t == nil || t.IpFragmentation == 0 {
		return 0
	}
	return t.IpFragmentation
}

// GetIpv6Mtu retrieves the value of the leaf Ipv6Mtu from the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Mtu is set, it can
// safely use t.GetIpv6Mtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Mtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64) GetIpv6Mtu() uint32 {
	if t == nil || t.Ipv6Mtu == nil {
		return 1520
	}
	return *t.Ipv6Mtu
}

// GetPrefix retrieves the value of the leaf Prefix from the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return "64:ff9b::/96"
	}
	return *t.Prefix
}

// GetSubscriberPrefixLength retrieves the value of the leaf SubscriberPrefixLength from the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubscriberPrefixLength is set, it can
// safely use t.GetSubscriberPrefixLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubscriberPrefixLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64) GetSubscriberPrefixLength() uint8 {
	if t == nil || t.SubscriberPrefixLength == nil {
		return 128
	}
	return *t.SubscriberPrefixLength
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.DropZeroIpv4Checksum == nil {
		var v bool = false
		t.DropZeroIpv4Checksum = &v
	}
	if t.InsertIpv6FragmentHeader == nil {
		var v bool = false
		t.InsertIpv6FragmentHeader = &v
	}
	if t.Ipv6Mtu == nil {
		var v uint32 = 1520
		t.Ipv6Mtu = &v
	}
	if t.Prefix == nil {
		var v string = "64:ff9b::/96"
		t.Prefix = &v
	}
	if t.SubscriberPrefixLength == nil {
		var v uint8 = 128
		t.SubscriberPrefixLength = &v
	}
	t.Tos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64_Tos represents the /nokia-conf/configure/groups/group/router/nat/inside/large-scale/nat64/tos YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64_Tos struct {
	Downstream *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64_Tos_Downstream `path:"downstream" module:"nokia-conf"`
	Upstream   *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64_Tos_Upstream   `path:"upstream" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64_Tos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64_Tos) IsYANGGoStruct() {}

// GetOrCreateDownstream retrieves the value of the Downstream field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64_Tos) GetOrCreateDownstream() *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64_Tos_Downstream {
	if t.Downstream != nil {
		return t.Downstream
	}
	t.Downstream = &NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64_Tos_Downstream{}
	return t.Downstream
}

// GetOrCreateUpstream retrieves the value of the Upstream field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64_Tos) GetOrCreateUpstream() *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64_Tos_Upstream {
	if t.Upstream != nil {
		return t.Upstream
	}
	t.Upstream = &NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64_Tos_Upstream{}
	return t.Upstream
}

// GetDownstream returns the value of the Downstream struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64_Tos. If the receiver or the field Downstream is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64_Tos) GetDownstream() *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64_Tos_Downstream {
	if t != nil && t.Downstream != nil {
		return t.Downstream
	}
	return nil
}

// GetUpstream returns the value of the Upstream struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64_Tos. If the receiver or the field Upstream is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64_Tos) GetUpstream() *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64_Tos_Upstream {
	if t != nil && t.Upstream != nil {
		return t.Upstream
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64_Tos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64_Tos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Downstream.PopulateDefaults()
	t.Upstream.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64_Tos) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64_Tos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64_Tos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64_Tos) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64_Tos.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64_Tos) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64_Tos_Downstream represents the /nokia-conf/configure/groups/group/router/nat/inside/large-scale/nat64/tos/downstream YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64_Tos_Downstream struct {
	UseIpv4 *bool `path:"use-ipv4" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64_Tos_Downstream implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64_Tos_Downstream) IsYANGGoStruct() {
}

// GetUseIpv4 retrieves the value of the leaf UseIpv4 from the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64_Tos_Downstream
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseIpv4 is set, it can
// safely use t.GetUseIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseIpv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64_Tos_Downstream) GetUseIpv4() bool {
	if t == nil || t.UseIpv4 == nil {
		return false
	}
	return *t.UseIpv4
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64_Tos_Downstream
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64_Tos_Downstream) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.UseIpv4 == nil {
		var v bool = false
		t.UseIpv4 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64_Tos_Downstream) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64_Tos_Downstream"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64_Tos_Downstream) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64_Tos_Downstream) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64_Tos_Downstream.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64_Tos_Downstream) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64_Tos_Upstream represents the /nokia-conf/configure/groups/group/router/nat/inside/large-scale/nat64/tos/upstream YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64_Tos_Upstream struct {
	SetTos NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64_Tos_Upstream_SetTos_Union `path:"set-tos" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64_Tos_Upstream implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64_Tos_Upstream) IsYANGGoStruct() {
}

// GetSetTos retrieves the value of the leaf SetTos from the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64_Tos_Upstream
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetTos is set, it can
// safely use t.GetSetTos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetTos == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64_Tos_Upstream) GetSetTos() NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64_Tos_Upstream_SetTos_Union {
	if t == nil || t.SetTos == nil {
		return NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64_Tos_Upstream_SetTos_Enum_use_ipv6
	}
	return t.SetTos
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64_Tos_Upstream
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64_Tos_Upstream) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SetTos == nil {
		t.SetTos = NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64_Tos_Upstream_SetTos_Enum_use_ipv6
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64_Tos_Upstream) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64_Tos_Upstream"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64_Tos_Upstream) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64_Tos_Upstream) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64_Tos_Upstream.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Nat64_Tos_Upstream) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Redundancy represents the /nokia-conf/configure/groups/group/router/nat/inside/large-scale/redundancy YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Redundancy struct {
	Peer          *string `path:"peer" module:"nokia-conf"`
	Peer6         *string `path:"peer6" module:"nokia-conf"`
	SteeringRoute *string `path:"steering-route" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Redundancy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Redundancy) IsYANGGoStruct() {}

// GetPeer retrieves the value of the leaf Peer from the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Redundancy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Peer is set, it can
// safely use t.GetPeer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Peer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Redundancy) GetPeer() string {
	if t == nil || t.Peer == nil {
		return ""
	}
	return *t.Peer
}

// GetPeer6 retrieves the value of the leaf Peer6 from the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Redundancy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Peer6 is set, it can
// safely use t.GetPeer6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Peer6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Redundancy) GetPeer6() string {
	if t == nil || t.Peer6 == nil {
		return ""
	}
	return *t.Peer6
}

// GetSteeringRoute retrieves the value of the leaf SteeringRoute from the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Redundancy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SteeringRoute is set, it can
// safely use t.GetSteeringRoute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SteeringRoute == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Redundancy) GetSteeringRoute() string {
	if t == nil || t.SteeringRoute == nil {
		return ""
	}
	return *t.SteeringRoute
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Redundancy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Redundancy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Redundancy) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Redundancy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Redundancy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Redundancy) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Redundancy.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_Redundancy) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_SubscriberIdentification represents the /nokia-conf/configure/groups/group/router/nat/inside/large-scale/subscriber-identification YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_SubscriberIdentification struct {
	AdminState              E_NokiaTypesSros_AdminState                                                                               `path:"admin-state" module:"nokia-conf"`
	Attribute               *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_SubscriberIdentification_Attribute         `path:"attribute" module:"nokia-conf"`
	Description             *string                                                                                                   `path:"description" module:"nokia-conf"`
	DropUnidentifiedTraffic *bool                                                                                                     `path:"drop-unidentified-traffic" module:"nokia-conf"`
	RadiusProxyServer       *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_SubscriberIdentification_RadiusProxyServer `path:"radius-proxy-server" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_SubscriberIdentification implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_SubscriberIdentification) IsYANGGoStruct() {
}

// GetOrCreateAttribute retrieves the value of the Attribute field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_SubscriberIdentification) GetOrCreateAttribute() *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_SubscriberIdentification_Attribute {
	if t.Attribute != nil {
		return t.Attribute
	}
	t.Attribute = &NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_SubscriberIdentification_Attribute{}
	return t.Attribute
}

// GetOrCreateRadiusProxyServer retrieves the value of the RadiusProxyServer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_SubscriberIdentification) GetOrCreateRadiusProxyServer() *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_SubscriberIdentification_RadiusProxyServer {
	if t.RadiusProxyServer != nil {
		return t.RadiusProxyServer
	}
	t.RadiusProxyServer = &NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_SubscriberIdentification_RadiusProxyServer{}
	return t.RadiusProxyServer
}

// GetAttribute returns the value of the Attribute struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_SubscriberIdentification. If the receiver or the field Attribute is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_SubscriberIdentification) GetAttribute() *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_SubscriberIdentification_Attribute {
	if t != nil && t.Attribute != nil {
		return t.Attribute
	}
	return nil
}

// GetRadiusProxyServer returns the value of the RadiusProxyServer struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_SubscriberIdentification. If the receiver or the field RadiusProxyServer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_SubscriberIdentification) GetRadiusProxyServer() *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_SubscriberIdentification_RadiusProxyServer {
	if t != nil && t.RadiusProxyServer != nil {
		return t.RadiusProxyServer
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_SubscriberIdentification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_SubscriberIdentification) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_SubscriberIdentification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_SubscriberIdentification) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDropUnidentifiedTraffic retrieves the value of the leaf DropUnidentifiedTraffic from the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_SubscriberIdentification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DropUnidentifiedTraffic is set, it can
// safely use t.GetDropUnidentifiedTraffic() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DropUnidentifiedTraffic == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_SubscriberIdentification) GetDropUnidentifiedTraffic() bool {
	if t == nil || t.DropUnidentifiedTraffic == nil {
		return false
	}
	return *t.DropUnidentifiedTraffic
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_SubscriberIdentification
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_SubscriberIdentification) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.DropUnidentifiedTraffic == nil {
		var v bool = false
		t.DropUnidentifiedTraffic = &v
	}
	t.Attribute.PopulateDefaults()
	t.RadiusProxyServer.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_SubscriberIdentification) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_SubscriberIdentification"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_SubscriberIdentification) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_SubscriberIdentification) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_SubscriberIdentification.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_SubscriberIdentification) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_SubscriberIdentification_Attribute represents the /nokia-conf/configure/groups/group/router/nat/inside/large-scale/subscriber-identification/attribute YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_SubscriberIdentification_Attribute struct {
	Type   E_NokiaTypesNat_NatSubscriberIdentificationAttrType     `path:"type" module:"nokia-conf"`
	Vendor E_NokiaTypesNat_NatSubscriberIdentificationAttrVendorId `path:"vendor" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_SubscriberIdentification_Attribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_SubscriberIdentification_Attribute) IsYANGGoStruct() {
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_SubscriberIdentification_Attribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_SubscriberIdentification_Attribute) GetType() E_NokiaTypesNat_NatSubscriberIdentificationAttrType {
	if t == nil || t.Type == 0 {
		return NokiaTypesNat_NatSubscriberIdentificationAttrType_alc_sub_string
	}
	return t.Type
}

// GetVendor retrieves the value of the leaf Vendor from the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_SubscriberIdentification_Attribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vendor is set, it can
// safely use t.GetVendor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vendor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_SubscriberIdentification_Attribute) GetVendor() E_NokiaTypesNat_NatSubscriberIdentificationAttrVendorId {
	if t == nil || t.Vendor == 0 {
		return NokiaTypesNat_NatSubscriberIdentificationAttrVendorId_nokia
	}
	return t.Vendor
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_SubscriberIdentification_Attribute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_SubscriberIdentification_Attribute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Type == 0 {
		t.Type = NokiaTypesNat_NatSubscriberIdentificationAttrType_alc_sub_string
	}
	if t.Vendor == 0 {
		t.Vendor = NokiaTypesNat_NatSubscriberIdentificationAttrVendorId_nokia
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_SubscriberIdentification_Attribute) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_SubscriberIdentification_Attribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_SubscriberIdentification_Attribute) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_SubscriberIdentification_Attribute) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_SubscriberIdentification_Attribute.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_SubscriberIdentification_Attribute) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_SubscriberIdentification_RadiusProxyServer represents the /nokia-conf/configure/groups/group/router/nat/inside/large-scale/subscriber-identification/radius-proxy-server YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_SubscriberIdentification_RadiusProxyServer struct {
	RouterInstance *string `path:"router-instance" module:"nokia-conf"`
	Server         *string `path:"server" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_SubscriberIdentification_RadiusProxyServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_SubscriberIdentification_RadiusProxyServer) IsYANGGoStruct() {
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_SubscriberIdentification_RadiusProxyServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_SubscriberIdentification_RadiusProxyServer) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// GetServer retrieves the value of the leaf Server from the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_SubscriberIdentification_RadiusProxyServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Server is set, it can
// safely use t.GetServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Server == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_SubscriberIdentification_RadiusProxyServer) GetServer() string {
	if t == nil || t.Server == nil {
		return ""
	}
	return *t.Server
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_SubscriberIdentification_RadiusProxyServer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_SubscriberIdentification_RadiusProxyServer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_SubscriberIdentification_RadiusProxyServer) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_SubscriberIdentification_RadiusProxyServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_SubscriberIdentification_RadiusProxyServer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_SubscriberIdentification_RadiusProxyServer) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_SubscriberIdentification_RadiusProxyServer.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Inside_LargeScale_SubscriberIdentification_RadiusProxyServer) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Nat_Map represents the /nokia-conf/configure/groups/group/router/nat/map YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Nat_Map struct {
	MapDomain map[string]*NokiaConf_Configure_Groups_Group_Router_Nat_Map_MapDomain `path:"map-domain" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Nat_Map implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Map) IsYANGGoStruct() {}

// NewMapDomain creates a new entry in the MapDomain list of the
// NokiaConf_Configure_Groups_Group_Router_Nat_Map struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Map) NewMapDomain(DomainName string) (*NokiaConf_Configure_Groups_Group_Router_Nat_Map_MapDomain, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MapDomain == nil {
		t.MapDomain = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Nat_Map_MapDomain)
	}

	key := DomainName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MapDomain[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MapDomain", key)
	}

	t.MapDomain[key] = &NokiaConf_Configure_Groups_Group_Router_Nat_Map_MapDomain{
		DomainName: &DomainName,
	}

	return t.MapDomain[key], nil
}

// RenameMapDomain renames an entry in the list MapDomain within
// the NokiaConf_Configure_Groups_Group_Router_Nat_Map struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Map) RenameMapDomain(oldK, newK string) error {
	if _, ok := t.MapDomain[newK]; ok {
		return fmt.Errorf("key %v already exists in MapDomain", newK)
	}

	e, ok := t.MapDomain[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MapDomain", oldK)
	}
	e.DomainName = &newK

	t.MapDomain[newK] = e
	delete(t.MapDomain, oldK)
	return nil
}

// GetOrCreateMapDomain retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Nat_Map. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Map) GetOrCreateMapDomain(DomainName string) *NokiaConf_Configure_Groups_Group_Router_Nat_Map_MapDomain {

	key := DomainName

	if v, ok := t.MapDomain[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMapDomain(DomainName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMapDomain got unexpected error: %v", err))
	}
	return v
}

// GetMapDomain retrieves the value with the specified key from
// the MapDomain map field of NokiaConf_Configure_Groups_Group_Router_Nat_Map. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Map) GetMapDomain(DomainName string) *NokiaConf_Configure_Groups_Group_Router_Nat_Map_MapDomain {

	if t == nil {
		return nil
	}

	key := DomainName

	if lm, ok := t.MapDomain[key]; ok {
		return lm
	}
	return nil
}

// DeleteMapDomain deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Nat_Map. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Map) DeleteMapDomain(DomainName string) {
	key := DomainName

	delete(t.MapDomain, key)
}

// AppendMapDomain appends the supplied NokiaConf_Configure_Groups_Group_Router_Nat_Map_MapDomain struct to the
// list MapDomain of NokiaConf_Configure_Groups_Group_Router_Nat_Map. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Nat_Map_MapDomain already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Map) AppendMapDomain(v *NokiaConf_Configure_Groups_Group_Router_Nat_Map_MapDomain) error {
	if v.DomainName == nil {
		return fmt.Errorf("invalid nil key received for DomainName")
	}

	key := *v.DomainName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MapDomain == nil {
		t.MapDomain = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Nat_Map_MapDomain)
	}

	if _, ok := t.MapDomain[key]; ok {
		return fmt.Errorf("duplicate key for list MapDomain %v", key)
	}

	t.MapDomain[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Nat_Map
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Map) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.MapDomain {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Map) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Nat_Map"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Map) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Map) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Nat_Map.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Map) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Nat_Map_MapDomain represents the /nokia-conf/configure/groups/group/router/nat/map/map-domain YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Nat_Map_MapDomain struct {
	DomainName *string `path:"domain-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Nat_Map_MapDomain implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Map_MapDomain) IsYANGGoStruct() {}

// GetDomainName retrieves the value of the leaf DomainName from the NokiaConf_Configure_Groups_Group_Router_Nat_Map_MapDomain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DomainName is set, it can
// safely use t.GetDomainName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DomainName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Map_MapDomain) GetDomainName() string {
	if t == nil || t.DomainName == nil {
		return ""
	}
	return *t.DomainName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Nat_Map_MapDomain
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Map_MapDomain) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Nat_Map_MapDomain struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Map_MapDomain) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.DomainName == nil {
		return nil, fmt.Errorf("nil value for key DomainName")
	}

	return map[string]interface{}{
		"domain-name": *t.DomainName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Map_MapDomain) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Nat_Map_MapDomain"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Map_MapDomain) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Map_MapDomain) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Nat_Map_MapDomain.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Map_MapDomain) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Nat_Outside represents the /nokia-conf/configure/groups/group/router/nat/outside YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Nat_Outside struct {
	DnatOnly *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_DnatOnly        `path:"dnat-only" module:"nokia-conf"`
	Filters  *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Filters         `path:"filters" module:"nokia-conf"`
	Mtu      *uint32                                                              `path:"mtu" module:"nokia-conf"`
	Pool     map[string]*NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool `path:"pool" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Nat_Outside implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Outside) IsYANGGoStruct() {}

// NewPool creates a new entry in the Pool list of the
// NokiaConf_Configure_Groups_Group_Router_Nat_Outside struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside) NewPool(Name string) (*NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Pool == nil {
		t.Pool = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Pool[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Pool", key)
	}

	t.Pool[key] = &NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool{
		Name: &Name,
	}

	return t.Pool[key], nil
}

// RenamePool renames an entry in the list Pool within
// the NokiaConf_Configure_Groups_Group_Router_Nat_Outside struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside) RenamePool(oldK, newK string) error {
	if _, ok := t.Pool[newK]; ok {
		return fmt.Errorf("key %v already exists in Pool", newK)
	}

	e, ok := t.Pool[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Pool", oldK)
	}
	e.Name = &newK

	t.Pool[newK] = e
	delete(t.Pool, oldK)
	return nil
}

// GetOrCreatePool retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Nat_Outside. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside) GetOrCreatePool(Name string) *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool {

	key := Name

	if v, ok := t.Pool[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPool(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePool got unexpected error: %v", err))
	}
	return v
}

// GetPool retrieves the value with the specified key from
// the Pool map field of NokiaConf_Configure_Groups_Group_Router_Nat_Outside. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside) GetPool(Name string) *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Pool[key]; ok {
		return lm
	}
	return nil
}

// DeletePool deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Nat_Outside. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside) DeletePool(Name string) {
	key := Name

	delete(t.Pool, key)
}

// AppendPool appends the supplied NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool struct to the
// list Pool of NokiaConf_Configure_Groups_Group_Router_Nat_Outside. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside) AppendPool(v *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Pool == nil {
		t.Pool = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool)
	}

	if _, ok := t.Pool[key]; ok {
		return fmt.Errorf("duplicate key for list Pool %v", key)
	}

	t.Pool[key] = v
	return nil
}

// GetOrCreateDnatOnly retrieves the value of the DnatOnly field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside) GetOrCreateDnatOnly() *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_DnatOnly {
	if t.DnatOnly != nil {
		return t.DnatOnly
	}
	t.DnatOnly = &NokiaConf_Configure_Groups_Group_Router_Nat_Outside_DnatOnly{}
	return t.DnatOnly
}

// GetOrCreateFilters retrieves the value of the Filters field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside) GetOrCreateFilters() *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Filters {
	if t.Filters != nil {
		return t.Filters
	}
	t.Filters = &NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Filters{}
	return t.Filters
}

// GetDnatOnly returns the value of the DnatOnly struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Nat_Outside. If the receiver or the field DnatOnly is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside) GetDnatOnly() *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_DnatOnly {
	if t != nil && t.DnatOnly != nil {
		return t.DnatOnly
	}
	return nil
}

// GetFilters returns the value of the Filters struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Nat_Outside. If the receiver or the field Filters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside) GetFilters() *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Filters {
	if t != nil && t.Filters != nil {
		return t.Filters
	}
	return nil
}

// GetMtu retrieves the value of the leaf Mtu from the NokiaConf_Configure_Groups_Group_Router_Nat_Outside
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mtu is set, it can
// safely use t.GetMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside) GetMtu() uint32 {
	if t == nil || t.Mtu == nil {
		return 0
	}
	return *t.Mtu
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Nat_Outside
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DnatOnly.PopulateDefaults()
	t.Filters.PopulateDefaults()
	for _, e := range t.Pool {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Nat_Outside"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Nat_Outside.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Outside) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Nat_Outside_DnatOnly represents the /nokia-conf/configure/groups/group/router/nat/outside/dnat-only YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Nat_Outside_DnatOnly struct {
	RouteLimit *uint32 `path:"route-limit" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Nat_Outside_DnatOnly implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Outside_DnatOnly) IsYANGGoStruct() {}

// GetRouteLimit retrieves the value of the leaf RouteLimit from the NokiaConf_Configure_Groups_Group_Router_Nat_Outside_DnatOnly
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteLimit is set, it can
// safely use t.GetRouteLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_DnatOnly) GetRouteLimit() uint32 {
	if t == nil || t.RouteLimit == nil {
		return 32768
	}
	return *t.RouteLimit
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Nat_Outside_DnatOnly
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_DnatOnly) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RouteLimit == nil {
		var v uint32 = 32768
		t.RouteLimit = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_DnatOnly) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Nat_Outside_DnatOnly"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_DnatOnly) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_DnatOnly) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Nat_Outside_DnatOnly.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Outside_DnatOnly) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Filters represents the /nokia-conf/configure/groups/group/router/nat/outside/filters YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Filters struct {
	Downstream *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Filters_Downstream `path:"downstream" module:"nokia-conf"`
	Upstream   *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Filters_Upstream   `path:"upstream" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Filters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Filters) IsYANGGoStruct() {}

// GetOrCreateDownstream retrieves the value of the Downstream field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Filters) GetOrCreateDownstream() *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Filters_Downstream {
	if t.Downstream != nil {
		return t.Downstream
	}
	t.Downstream = &NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Filters_Downstream{}
	return t.Downstream
}

// GetOrCreateUpstream retrieves the value of the Upstream field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Filters) GetOrCreateUpstream() *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Filters_Upstream {
	if t.Upstream != nil {
		return t.Upstream
	}
	t.Upstream = &NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Filters_Upstream{}
	return t.Upstream
}

// GetDownstream returns the value of the Downstream struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Filters. If the receiver or the field Downstream is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Filters) GetDownstream() *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Filters_Downstream {
	if t != nil && t.Downstream != nil {
		return t.Downstream
	}
	return nil
}

// GetUpstream returns the value of the Upstream struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Filters. If the receiver or the field Upstream is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Filters) GetUpstream() *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Filters_Upstream {
	if t != nil && t.Upstream != nil {
		return t.Upstream
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Filters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Filters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Downstream.PopulateDefaults()
	t.Upstream.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Filters) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Filters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Filters) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Filters) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Filters.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Filters) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Filters_Downstream represents the /nokia-conf/configure/groups/group/router/nat/outside/filters/downstream YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Filters_Downstream struct {
	Ipv4 *string `path:"ipv4" module:"nokia-conf"`
	Ipv6 *string `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Filters_Downstream implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Filters_Downstream) IsYANGGoStruct() {}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Filters_Downstream
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Filters_Downstream) GetIpv4() string {
	if t == nil || t.Ipv4 == nil {
		return ""
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Filters_Downstream
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Filters_Downstream) GetIpv6() string {
	if t == nil || t.Ipv6 == nil {
		return ""
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Filters_Downstream
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Filters_Downstream) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Filters_Downstream) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Filters_Downstream"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Filters_Downstream) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Filters_Downstream) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Filters_Downstream.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Filters_Downstream) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Filters_Upstream represents the /nokia-conf/configure/groups/group/router/nat/outside/filters/upstream YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Filters_Upstream struct {
	Ipv4 *string `path:"ipv4" module:"nokia-conf"`
	Ipv6 *string `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Filters_Upstream implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Filters_Upstream) IsYANGGoStruct() {}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Filters_Upstream
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Filters_Upstream) GetIpv4() string {
	if t == nil || t.Ipv4 == nil {
		return ""
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Filters_Upstream
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Filters_Upstream) GetIpv6() string {
	if t == nil || t.Ipv6 == nil {
		return ""
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Filters_Upstream
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Filters_Upstream) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Filters_Upstream) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Filters_Upstream"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Filters_Upstream) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Filters_Upstream) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Filters_Upstream.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Filters_Upstream) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool represents the /nokia-conf/configure/groups/group/router/nat/outside/pool YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool struct {
	AddressRange    map[NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_AddressRange_Key]*NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_AddressRange `path:"address-range" module:"nokia-conf"`
	AdminState      E_NokiaTypesSros_AdminState                                                                                                                          `path:"admin-state" module:"nokia-conf"`
	Applications    *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_Applications                                                                               `path:"applications" module:"nokia-conf"`
	Description     *string                                                                                                                                              `path:"description" module:"nokia-conf"`
	IcmpEchoReply   *bool                                                                                                                                                `path:"icmp-echo-reply" module:"nokia-conf"`
	L2Aware         *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware                                                                                    `path:"l2-aware" module:"nokia-conf"`
	LargeScale      *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale                                                                                 `path:"large-scale" module:"nokia-conf"`
	Mode            E_NokiaTypesNat_PoolMode                                                                                                                             `path:"mode" module:"nokia-conf"`
	Name            *string                                                                                                                                              `path:"name" module:"nokia-conf"`
	NatGroup        *uint32                                                                                                                                              `path:"nat-group" module:"nokia-conf"`
	PortForwarding  *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_PortForwarding                                                                             `path:"port-forwarding" module:"nokia-conf"`
	PortReservation *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_PortReservation                                                                            `path:"port-reservation" module:"nokia-conf"`
	Type            E_NokiaTypesNat_PoolType                                                                                                                             `path:"type" module:"nokia-conf"`
	Watermarks      *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_Watermarks                                                                                 `path:"watermarks" module:"nokia-conf" yangPresence:"true"`
	WlanGwGroup     *uint32                                                                                                                                              `path:"wlan-gw-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool) IsYANGGoStruct() {}

// NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_AddressRange_Key represents the key for list AddressRange of element /nokia-conf/configure/groups/group/router/nat/outside/pool.
type NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_AddressRange_Key struct {
	Start string `path:"start"`
	End   string `path:"end"`
}

// NewAddressRange creates a new entry in the AddressRange list of the
// NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool) NewAddressRange(Start string, End string) (*NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_AddressRange, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AddressRange == nil {
		t.AddressRange = make(map[NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_AddressRange_Key]*NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_AddressRange)
	}

	key := NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_AddressRange_Key{
		Start: Start,
		End:   End,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AddressRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AddressRange", key)
	}

	t.AddressRange[key] = &NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_AddressRange{
		Start: &Start,
		End:   &End,
	}

	return t.AddressRange[key], nil
}

// RenameAddressRange renames an entry in the list AddressRange within
// the NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool) RenameAddressRange(oldK, newK NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_AddressRange_Key) error {
	if _, ok := t.AddressRange[newK]; ok {
		return fmt.Errorf("key %v already exists in AddressRange", newK)
	}

	e, ok := t.AddressRange[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AddressRange", oldK)
	}
	e.Start = &newK.Start
	e.End = &newK.End

	t.AddressRange[newK] = e
	delete(t.AddressRange, oldK)
	return nil
}

// GetOrCreateAddressRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool) GetOrCreateAddressRange(Start string, End string) *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_AddressRange {

	key := NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_AddressRange_Key{
		Start: Start,
		End:   End,
	}

	if v, ok := t.AddressRange[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAddressRange(Start, End)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAddressRange got unexpected error: %v", err))
	}
	return v
}

// GetAddressRange retrieves the value with the specified key from
// the AddressRange map field of NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool) GetAddressRange(Start string, End string) *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_AddressRange {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_AddressRange_Key{
		Start: Start,
		End:   End,
	}

	if lm, ok := t.AddressRange[key]; ok {
		return lm
	}
	return nil
}

// DeleteAddressRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool) DeleteAddressRange(Start string, End string) {
	key := NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_AddressRange_Key{
		Start: Start,
		End:   End,
	}

	delete(t.AddressRange, key)
}

// AppendAddressRange appends the supplied NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_AddressRange struct to the
// list AddressRange of NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_AddressRange already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool) AppendAddressRange(v *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_AddressRange) error {
	if v.Start == nil {
		return fmt.Errorf("invalid nil key for Start")
	}

	if v.End == nil {
		return fmt.Errorf("invalid nil key for End")
	}

	key := NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_AddressRange_Key{
		Start: *v.Start,
		End:   *v.End,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AddressRange == nil {
		t.AddressRange = make(map[NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_AddressRange_Key]*NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_AddressRange)
	}

	if _, ok := t.AddressRange[key]; ok {
		return fmt.Errorf("duplicate key for list AddressRange %v", key)
	}

	t.AddressRange[key] = v
	return nil
}

// GetOrCreateApplications retrieves the value of the Applications field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool) GetOrCreateApplications() *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_Applications {
	if t.Applications != nil {
		return t.Applications
	}
	t.Applications = &NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_Applications{}
	return t.Applications
}

// GetOrCreateL2Aware retrieves the value of the L2Aware field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool) GetOrCreateL2Aware() *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware {
	if t.L2Aware != nil {
		return t.L2Aware
	}
	t.L2Aware = &NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware{}
	return t.L2Aware
}

// GetOrCreateLargeScale retrieves the value of the LargeScale field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool) GetOrCreateLargeScale() *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale {
	if t.LargeScale != nil {
		return t.LargeScale
	}
	t.LargeScale = &NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale{}
	return t.LargeScale
}

// GetOrCreatePortForwarding retrieves the value of the PortForwarding field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool) GetOrCreatePortForwarding() *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_PortForwarding {
	if t.PortForwarding != nil {
		return t.PortForwarding
	}
	t.PortForwarding = &NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_PortForwarding{}
	return t.PortForwarding
}

// GetOrCreatePortReservation retrieves the value of the PortReservation field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool) GetOrCreatePortReservation() *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_PortReservation {
	if t.PortReservation != nil {
		return t.PortReservation
	}
	t.PortReservation = &NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_PortReservation{}
	return t.PortReservation
}

// GetOrCreateWatermarks retrieves the value of the Watermarks field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool) GetOrCreateWatermarks() *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_Watermarks {
	if t.Watermarks != nil {
		return t.Watermarks
	}
	t.Watermarks = &NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_Watermarks{}
	return t.Watermarks
}

// GetApplications returns the value of the Applications struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool. If the receiver or the field Applications is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool) GetApplications() *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_Applications {
	if t != nil && t.Applications != nil {
		return t.Applications
	}
	return nil
}

// GetL2Aware returns the value of the L2Aware struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool. If the receiver or the field L2Aware is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool) GetL2Aware() *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware {
	if t != nil && t.L2Aware != nil {
		return t.L2Aware
	}
	return nil
}

// GetLargeScale returns the value of the LargeScale struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool. If the receiver or the field LargeScale is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool) GetLargeScale() *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale {
	if t != nil && t.LargeScale != nil {
		return t.LargeScale
	}
	return nil
}

// GetPortForwarding returns the value of the PortForwarding struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool. If the receiver or the field PortForwarding is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool) GetPortForwarding() *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_PortForwarding {
	if t != nil && t.PortForwarding != nil {
		return t.PortForwarding
	}
	return nil
}

// GetPortReservation returns the value of the PortReservation struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool. If the receiver or the field PortReservation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool) GetPortReservation() *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_PortReservation {
	if t != nil && t.PortReservation != nil {
		return t.PortReservation
	}
	return nil
}

// GetWatermarks returns the value of the Watermarks struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool. If the receiver or the field Watermarks is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool) GetWatermarks() *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_Watermarks {
	if t != nil && t.Watermarks != nil {
		return t.Watermarks
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetIcmpEchoReply retrieves the value of the leaf IcmpEchoReply from the NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IcmpEchoReply is set, it can
// safely use t.GetIcmpEchoReply() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IcmpEchoReply == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool) GetIcmpEchoReply() bool {
	if t == nil || t.IcmpEchoReply == nil {
		return false
	}
	return *t.IcmpEchoReply
}

// GetMode retrieves the value of the leaf Mode from the NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool) GetMode() E_NokiaTypesNat_PoolMode {
	if t == nil || t.Mode == 0 {
		return 0
	}
	return t.Mode
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetNatGroup retrieves the value of the leaf NatGroup from the NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NatGroup is set, it can
// safely use t.GetNatGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NatGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool) GetNatGroup() uint32 {
	if t == nil || t.NatGroup == nil {
		return 0
	}
	return *t.NatGroup
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool) GetType() E_NokiaTypesNat_PoolType {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// GetWlanGwGroup retrieves the value of the leaf WlanGwGroup from the NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WlanGwGroup is set, it can
// safely use t.GetWlanGwGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WlanGwGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool) GetWlanGwGroup() uint32 {
	if t == nil || t.WlanGwGroup == nil {
		return 0
	}
	return *t.WlanGwGroup
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.IcmpEchoReply == nil {
		var v bool = false
		t.IcmpEchoReply = &v
	}
	t.Applications.PopulateDefaults()
	t.L2Aware.PopulateDefaults()
	t.LargeScale.PopulateDefaults()
	t.PortForwarding.PopulateDefaults()
	t.PortReservation.PopulateDefaults()
	t.Watermarks.PopulateDefaults()
	for _, e := range t.AddressRange {
		e.PopulateDefaults()
	}
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_AddressRange represents the /nokia-conf/configure/groups/group/router/nat/outside/pool/address-range YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_AddressRange struct {
	Description *string `path:"description" module:"nokia-conf"`
	Drain       *bool   `path:"drain" module:"nokia-conf"`
	End         *string `path:"end" module:"nokia-conf"`
	Start       *string `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_AddressRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_AddressRange) IsYANGGoStruct() {}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_AddressRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_AddressRange) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDrain retrieves the value of the leaf Drain from the NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_AddressRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Drain is set, it can
// safely use t.GetDrain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Drain == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_AddressRange) GetDrain() bool {
	if t == nil || t.Drain == nil {
		return false
	}
	return *t.Drain
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_AddressRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_AddressRange) GetEnd() string {
	if t == nil || t.End == nil {
		return ""
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_AddressRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_AddressRange) GetStart() string {
	if t == nil || t.Start == nil {
		return ""
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_AddressRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_AddressRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Drain == nil {
		var v bool = false
		t.Drain = &v
	}
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_AddressRange struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_AddressRange) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.End == nil {
		return nil, fmt.Errorf("nil value for key End")
	}

	if t.Start == nil {
		return nil, fmt.Errorf("nil value for key Start")
	}

	return map[string]interface{}{
		"end":   *t.End,
		"start": *t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_AddressRange) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_AddressRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_AddressRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_AddressRange) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_AddressRange.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_AddressRange) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_Applications represents the /nokia-conf/configure/groups/group/router/nat/outside/pool/applications YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_Applications struct {
	Agnostic *bool `path:"agnostic" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_Applications implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_Applications) IsYANGGoStruct() {}

// GetAgnostic retrieves the value of the leaf Agnostic from the NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_Applications
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Agnostic is set, it can
// safely use t.GetAgnostic() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Agnostic == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_Applications) GetAgnostic() bool {
	if t == nil || t.Agnostic == nil {
		return false
	}
	return *t.Agnostic
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_Applications
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_Applications) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Agnostic == nil {
		var v bool = false
		t.Agnostic = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_Applications) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_Applications"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_Applications) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_Applications) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_Applications.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_Applications) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware represents the /nokia-conf/configure/groups/group/router/nat/outside/pool/l2-aware YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware struct {
	ExternalAssignment *bool                                                                                `path:"external-assignment" module:"nokia-conf"`
	PortBlockExtension *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension `path:"port-block-extension" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware) IsYANGGoStruct() {}

// GetOrCreatePortBlockExtension retrieves the value of the PortBlockExtension field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware) GetOrCreatePortBlockExtension() *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension {
	if t.PortBlockExtension != nil {
		return t.PortBlockExtension
	}
	t.PortBlockExtension = &NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension{}
	return t.PortBlockExtension
}

// GetPortBlockExtension returns the value of the PortBlockExtension struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware. If the receiver or the field PortBlockExtension is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware) GetPortBlockExtension() *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension {
	if t != nil && t.PortBlockExtension != nil {
		return t.PortBlockExtension
	}
	return nil
}

// GetExternalAssignment retrieves the value of the leaf ExternalAssignment from the NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExternalAssignment is set, it can
// safely use t.GetExternalAssignment() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExternalAssignment == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware) GetExternalAssignment() bool {
	if t == nil || t.ExternalAssignment == nil {
		return false
	}
	return *t.ExternalAssignment
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ExternalAssignment == nil {
		var v bool = false
		t.ExternalAssignment = &v
	}
	t.PortBlockExtension.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension represents the /nokia-conf/configure/groups/group/router/nat/outside/pool/l2-aware/port-block-extension YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension struct {
	Ports           *uint32                                                                                         `path:"ports" module:"nokia-conf"`
	Subscriber      *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber `path:"subscriber" module:"nokia-conf"`
	SubscriberLimit *uint32                                                                                         `path:"subscriber-limit" module:"nokia-conf"`
	Watermarks      *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension_Watermarks `path:"watermarks" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension) IsYANGGoStruct() {
}

// GetOrCreateSubscriber retrieves the value of the Subscriber field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension) GetOrCreateSubscriber() *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber {
	if t.Subscriber != nil {
		return t.Subscriber
	}
	t.Subscriber = &NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber{}
	return t.Subscriber
}

// GetOrCreateWatermarks retrieves the value of the Watermarks field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension) GetOrCreateWatermarks() *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension_Watermarks {
	if t.Watermarks != nil {
		return t.Watermarks
	}
	t.Watermarks = &NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension_Watermarks{}
	return t.Watermarks
}

// GetSubscriber returns the value of the Subscriber struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension. If the receiver or the field Subscriber is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension) GetSubscriber() *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber {
	if t != nil && t.Subscriber != nil {
		return t.Subscriber
	}
	return nil
}

// GetWatermarks returns the value of the Watermarks struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension. If the receiver or the field Watermarks is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension) GetWatermarks() *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension_Watermarks {
	if t != nil && t.Watermarks != nil {
		return t.Watermarks
	}
	return nil
}

// GetPorts retrieves the value of the leaf Ports from the NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ports is set, it can
// safely use t.GetPorts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ports == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension) GetPorts() uint32 {
	if t == nil || t.Ports == nil {
		return 0
	}
	return *t.Ports
}

// GetSubscriberLimit retrieves the value of the leaf SubscriberLimit from the NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubscriberLimit is set, it can
// safely use t.GetSubscriberLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubscriberLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension) GetSubscriberLimit() uint32 {
	if t == nil || t.SubscriberLimit == nil {
		return 0
	}
	return *t.SubscriberLimit
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Subscriber.PopulateDefaults()
	t.Watermarks.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber represents the /nokia-conf/configure/groups/group/router/nat/outside/pool/l2-aware/port-block-extension/subscriber YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber struct {
	Watermarks *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber_Watermarks `path:"watermarks" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber) IsYANGGoStruct() {
}

// GetOrCreateWatermarks retrieves the value of the Watermarks field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber) GetOrCreateWatermarks() *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber_Watermarks {
	if t.Watermarks != nil {
		return t.Watermarks
	}
	t.Watermarks = &NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber_Watermarks{}
	return t.Watermarks
}

// GetWatermarks returns the value of the Watermarks struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber. If the receiver or the field Watermarks is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber) GetWatermarks() *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber_Watermarks {
	if t != nil && t.Watermarks != nil {
		return t.Watermarks
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Watermarks.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber_Watermarks represents the /nokia-conf/configure/groups/group/router/nat/outside/pool/l2-aware/port-block-extension/subscriber/watermarks YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber_Watermarks struct {
	High *uint32 `path:"high" module:"nokia-conf"`
	Low  *uint32 `path:"low" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber_Watermarks implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber_Watermarks) IsYANGGoStruct() {
}

// GetHigh retrieves the value of the leaf High from the NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber_Watermarks
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if High is set, it can
// safely use t.GetHigh() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.High == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber_Watermarks) GetHigh() uint32 {
	if t == nil || t.High == nil {
		return 0
	}
	return *t.High
}

// GetLow retrieves the value of the leaf Low from the NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber_Watermarks
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Low is set, it can
// safely use t.GetLow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Low == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber_Watermarks) GetLow() uint32 {
	if t == nil || t.Low == nil {
		return 0
	}
	return *t.Low
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber_Watermarks
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber_Watermarks) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber_Watermarks) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber_Watermarks"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber_Watermarks) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber_Watermarks) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber_Watermarks.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension_Subscriber_Watermarks) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension_Watermarks represents the /nokia-conf/configure/groups/group/router/nat/outside/pool/l2-aware/port-block-extension/watermarks YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension_Watermarks struct {
	High *uint32 `path:"high" module:"nokia-conf"`
	Low  *uint32 `path:"low" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension_Watermarks implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension_Watermarks) IsYANGGoStruct() {
}

// GetHigh retrieves the value of the leaf High from the NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension_Watermarks
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if High is set, it can
// safely use t.GetHigh() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.High == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension_Watermarks) GetHigh() uint32 {
	if t == nil || t.High == nil {
		return 0
	}
	return *t.High
}

// GetLow retrieves the value of the leaf Low from the NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension_Watermarks
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Low is set, it can
// safely use t.GetLow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Low == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension_Watermarks) GetLow() uint32 {
	if t == nil || t.Low == nil {
		return 0
	}
	return *t.Low
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension_Watermarks
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension_Watermarks) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension_Watermarks) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension_Watermarks"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension_Watermarks) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension_Watermarks) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension_Watermarks.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_L2Aware_PortBlockExtension_Watermarks) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale represents the /nokia-conf/configure/groups/group/router/nat/outside/pool/large-scale YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale struct {
	Deterministic   *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Deterministic `path:"deterministic" module:"nokia-conf"`
	Redundancy      *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Redundancy    `path:"redundancy" module:"nokia-conf"`
	SubscriberLimit *uint32                                                                            `path:"subscriber-limit" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale) IsYANGGoStruct() {}

// GetOrCreateDeterministic retrieves the value of the Deterministic field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale) GetOrCreateDeterministic() *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Deterministic {
	if t.Deterministic != nil {
		return t.Deterministic
	}
	t.Deterministic = &NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Deterministic{}
	return t.Deterministic
}

// GetOrCreateRedundancy retrieves the value of the Redundancy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale) GetOrCreateRedundancy() *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Redundancy {
	if t.Redundancy != nil {
		return t.Redundancy
	}
	t.Redundancy = &NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Redundancy{}
	return t.Redundancy
}

// GetDeterministic returns the value of the Deterministic struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale. If the receiver or the field Deterministic is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale) GetDeterministic() *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Deterministic {
	if t != nil && t.Deterministic != nil {
		return t.Deterministic
	}
	return nil
}

// GetRedundancy returns the value of the Redundancy struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale. If the receiver or the field Redundancy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale) GetRedundancy() *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Redundancy {
	if t != nil && t.Redundancy != nil {
		return t.Redundancy
	}
	return nil
}

// GetSubscriberLimit retrieves the value of the leaf SubscriberLimit from the NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubscriberLimit is set, it can
// safely use t.GetSubscriberLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubscriberLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale) GetSubscriberLimit() uint32 {
	if t == nil || t.SubscriberLimit == nil {
		return 0
	}
	return *t.SubscriberLimit
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Deterministic.PopulateDefaults()
	t.Redundancy.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Deterministic represents the /nokia-conf/configure/groups/group/router/nat/outside/pool/large-scale/deterministic YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Deterministic struct {
	PortReservation *uint32                                                                                       `path:"port-reservation" module:"nokia-conf"`
	Watermarks      *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Deterministic_Watermarks `path:"watermarks" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Deterministic implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Deterministic) IsYANGGoStruct() {
}

// GetOrCreateWatermarks retrieves the value of the Watermarks field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Deterministic) GetOrCreateWatermarks() *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Deterministic_Watermarks {
	if t.Watermarks != nil {
		return t.Watermarks
	}
	t.Watermarks = &NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Deterministic_Watermarks{}
	return t.Watermarks
}

// GetWatermarks returns the value of the Watermarks struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Deterministic. If the receiver or the field Watermarks is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Deterministic) GetWatermarks() *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Deterministic_Watermarks {
	if t != nil && t.Watermarks != nil {
		return t.Watermarks
	}
	return nil
}

// GetPortReservation retrieves the value of the leaf PortReservation from the NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Deterministic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortReservation is set, it can
// safely use t.GetPortReservation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortReservation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Deterministic) GetPortReservation() uint32 {
	if t == nil || t.PortReservation == nil {
		return 0
	}
	return *t.PortReservation
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Deterministic
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Deterministic) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Watermarks.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Deterministic) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Deterministic"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Deterministic) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Deterministic) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Deterministic.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Deterministic) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Deterministic_Watermarks represents the /nokia-conf/configure/groups/group/router/nat/outside/pool/large-scale/deterministic/watermarks YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Deterministic_Watermarks struct {
	High *uint32 `path:"high" module:"nokia-conf"`
	Low  *uint32 `path:"low" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Deterministic_Watermarks implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Deterministic_Watermarks) IsYANGGoStruct() {
}

// GetHigh retrieves the value of the leaf High from the NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Deterministic_Watermarks
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if High is set, it can
// safely use t.GetHigh() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.High == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Deterministic_Watermarks) GetHigh() uint32 {
	if t == nil || t.High == nil {
		return 0
	}
	return *t.High
}

// GetLow retrieves the value of the leaf Low from the NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Deterministic_Watermarks
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Low is set, it can
// safely use t.GetLow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Low == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Deterministic_Watermarks) GetLow() uint32 {
	if t == nil || t.Low == nil {
		return 0
	}
	return *t.Low
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Deterministic_Watermarks
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Deterministic_Watermarks) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Deterministic_Watermarks) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Deterministic_Watermarks"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Deterministic_Watermarks) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Deterministic_Watermarks) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Deterministic_Watermarks.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Deterministic_Watermarks) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Redundancy represents the /nokia-conf/configure/groups/group/router/nat/outside/pool/large-scale/redundancy YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Redundancy struct {
	AdminState   E_NokiaTypesSros_AdminState                                                            `path:"admin-state" module:"nokia-conf"`
	ExportRoute  *string                                                                                `path:"export-route" module:"nokia-conf"`
	Follow       *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Redundancy_Follow `path:"follow" module:"nokia-conf"`
	MonitorRoute *string                                                                                `path:"monitor-route" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Redundancy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Redundancy) IsYANGGoStruct() {
}

// GetOrCreateFollow retrieves the value of the Follow field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Redundancy) GetOrCreateFollow() *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Redundancy_Follow {
	if t.Follow != nil {
		return t.Follow
	}
	t.Follow = &NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Redundancy_Follow{}
	return t.Follow
}

// GetFollow returns the value of the Follow struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Redundancy. If the receiver or the field Follow is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Redundancy) GetFollow() *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Redundancy_Follow {
	if t != nil && t.Follow != nil {
		return t.Follow
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Redundancy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Redundancy) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetExportRoute retrieves the value of the leaf ExportRoute from the NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Redundancy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportRoute is set, it can
// safely use t.GetExportRoute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportRoute == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Redundancy) GetExportRoute() string {
	if t == nil || t.ExportRoute == nil {
		return ""
	}
	return *t.ExportRoute
}

// GetMonitorRoute retrieves the value of the leaf MonitorRoute from the NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Redundancy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorRoute is set, it can
// safely use t.GetMonitorRoute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorRoute == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Redundancy) GetMonitorRoute() string {
	if t == nil || t.MonitorRoute == nil {
		return ""
	}
	return *t.MonitorRoute
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Redundancy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Redundancy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.Follow.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Redundancy) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Redundancy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Redundancy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Redundancy) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Redundancy.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Redundancy) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Redundancy_Follow represents the /nokia-conf/configure/groups/group/router/nat/outside/pool/large-scale/redundancy/follow YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Redundancy_Follow struct {
	Name           *string `path:"name" module:"nokia-conf"`
	RouterInstance *string `path:"router-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Redundancy_Follow implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Redundancy_Follow) IsYANGGoStruct() {
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Redundancy_Follow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Redundancy_Follow) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Redundancy_Follow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Redundancy_Follow) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Redundancy_Follow
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Redundancy_Follow) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Redundancy_Follow) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Redundancy_Follow"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Redundancy_Follow) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Redundancy_Follow) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Redundancy_Follow.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_LargeScale_Redundancy_Follow) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_PortForwarding represents the /nokia-conf/configure/groups/group/router/nat/outside/pool/port-forwarding YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_PortForwarding struct {
	DynamicBlockReservation *bool   `path:"dynamic-block-reservation" module:"nokia-conf"`
	RangeEnd                *uint16 `path:"range-end" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_PortForwarding implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_PortForwarding) IsYANGGoStruct() {}

// GetDynamicBlockReservation retrieves the value of the leaf DynamicBlockReservation from the NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_PortForwarding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DynamicBlockReservation is set, it can
// safely use t.GetDynamicBlockReservation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DynamicBlockReservation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_PortForwarding) GetDynamicBlockReservation() bool {
	if t == nil || t.DynamicBlockReservation == nil {
		return false
	}
	return *t.DynamicBlockReservation
}

// GetRangeEnd retrieves the value of the leaf RangeEnd from the NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_PortForwarding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RangeEnd is set, it can
// safely use t.GetRangeEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RangeEnd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_PortForwarding) GetRangeEnd() uint16 {
	if t == nil || t.RangeEnd == nil {
		return 0
	}
	return *t.RangeEnd
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_PortForwarding
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_PortForwarding) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DynamicBlockReservation == nil {
		var v bool = false
		t.DynamicBlockReservation = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_PortForwarding) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_PortForwarding"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_PortForwarding) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_PortForwarding) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_PortForwarding.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_PortForwarding) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_PortReservation represents the /nokia-conf/configure/groups/group/router/nat/outside/pool/port-reservation YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_PortReservation struct {
	PortBlocks *uint16 `path:"port-blocks" module:"nokia-conf"`
	Ports      *uint16 `path:"ports" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_PortReservation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_PortReservation) IsYANGGoStruct() {}

// GetPortBlocks retrieves the value of the leaf PortBlocks from the NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_PortReservation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortBlocks is set, it can
// safely use t.GetPortBlocks() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortBlocks == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_PortReservation) GetPortBlocks() uint16 {
	if t == nil || t.PortBlocks == nil {
		return 0
	}
	return *t.PortBlocks
}

// GetPorts retrieves the value of the leaf Ports from the NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_PortReservation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ports is set, it can
// safely use t.GetPorts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ports == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_PortReservation) GetPorts() uint16 {
	if t == nil || t.Ports == nil {
		return 0
	}
	return *t.Ports
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_PortReservation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_PortReservation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_PortReservation) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_PortReservation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_PortReservation) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_PortReservation) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_PortReservation.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_PortReservation) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_Watermarks represents the /nokia-conf/configure/groups/group/router/nat/outside/pool/watermarks YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_Watermarks struct {
	High *uint32 `path:"high" module:"nokia-conf"`
	Low  *uint32 `path:"low" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_Watermarks implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_Watermarks) IsYANGGoStruct() {}

// GetHigh retrieves the value of the leaf High from the NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_Watermarks
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if High is set, it can
// safely use t.GetHigh() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.High == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_Watermarks) GetHigh() uint32 {
	if t == nil || t.High == nil {
		return 0
	}
	return *t.High
}

// GetLow retrieves the value of the leaf Low from the NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_Watermarks
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Low is set, it can
// safely use t.GetLow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Low == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_Watermarks) GetLow() uint32 {
	if t == nil || t.Low == nil {
		return 0
	}
	return *t.Low
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_Watermarks
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_Watermarks) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_Watermarks) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_Watermarks"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_Watermarks) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_Watermarks) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_Watermarks.
func (*NokiaConf_Configure_Groups_Group_Router_Nat_Outside_Pool_Watermarks) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_NetworkDomains represents the /nokia-conf/configure/groups/group/router/network-domains YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_NetworkDomains struct {
	NetworkDomain map[string]*NokiaConf_Configure_Groups_Group_Router_NetworkDomains_NetworkDomain `path:"network-domain" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_NetworkDomains implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_NetworkDomains) IsYANGGoStruct() {}

// NewNetworkDomain creates a new entry in the NetworkDomain list of the
// NokiaConf_Configure_Groups_Group_Router_NetworkDomains struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_NetworkDomains) NewNetworkDomain(DomainName string) (*NokiaConf_Configure_Groups_Group_Router_NetworkDomains_NetworkDomain, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NetworkDomain == nil {
		t.NetworkDomain = make(map[string]*NokiaConf_Configure_Groups_Group_Router_NetworkDomains_NetworkDomain)
	}

	key := DomainName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NetworkDomain[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NetworkDomain", key)
	}

	t.NetworkDomain[key] = &NokiaConf_Configure_Groups_Group_Router_NetworkDomains_NetworkDomain{
		DomainName: &DomainName,
	}

	return t.NetworkDomain[key], nil
}

// RenameNetworkDomain renames an entry in the list NetworkDomain within
// the NokiaConf_Configure_Groups_Group_Router_NetworkDomains struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_NetworkDomains) RenameNetworkDomain(oldK, newK string) error {
	if _, ok := t.NetworkDomain[newK]; ok {
		return fmt.Errorf("key %v already exists in NetworkDomain", newK)
	}

	e, ok := t.NetworkDomain[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NetworkDomain", oldK)
	}
	e.DomainName = &newK

	t.NetworkDomain[newK] = e
	delete(t.NetworkDomain, oldK)
	return nil
}

// GetOrCreateNetworkDomain retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_NetworkDomains. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_NetworkDomains) GetOrCreateNetworkDomain(DomainName string) *NokiaConf_Configure_Groups_Group_Router_NetworkDomains_NetworkDomain {

	key := DomainName

	if v, ok := t.NetworkDomain[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNetworkDomain(DomainName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNetworkDomain got unexpected error: %v", err))
	}
	return v
}

// GetNetworkDomain retrieves the value with the specified key from
// the NetworkDomain map field of NokiaConf_Configure_Groups_Group_Router_NetworkDomains. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_NetworkDomains) GetNetworkDomain(DomainName string) *NokiaConf_Configure_Groups_Group_Router_NetworkDomains_NetworkDomain {

	if t == nil {
		return nil
	}

	key := DomainName

	if lm, ok := t.NetworkDomain[key]; ok {
		return lm
	}
	return nil
}

// DeleteNetworkDomain deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_NetworkDomains. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_NetworkDomains) DeleteNetworkDomain(DomainName string) {
	key := DomainName

	delete(t.NetworkDomain, key)
}

// AppendNetworkDomain appends the supplied NokiaConf_Configure_Groups_Group_Router_NetworkDomains_NetworkDomain struct to the
// list NetworkDomain of NokiaConf_Configure_Groups_Group_Router_NetworkDomains. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_NetworkDomains_NetworkDomain already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_NetworkDomains) AppendNetworkDomain(v *NokiaConf_Configure_Groups_Group_Router_NetworkDomains_NetworkDomain) error {
	if v.DomainName == nil {
		return fmt.Errorf("invalid nil key received for DomainName")
	}

	key := *v.DomainName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NetworkDomain == nil {
		t.NetworkDomain = make(map[string]*NokiaConf_Configure_Groups_Group_Router_NetworkDomains_NetworkDomain)
	}

	if _, ok := t.NetworkDomain[key]; ok {
		return fmt.Errorf("duplicate key for list NetworkDomain %v", key)
	}

	t.NetworkDomain[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_NetworkDomains
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_NetworkDomains) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.NetworkDomain {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_NetworkDomains) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_NetworkDomains"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_NetworkDomains) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_NetworkDomains) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_NetworkDomains.
func (*NokiaConf_Configure_Groups_Group_Router_NetworkDomains) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_NetworkDomains_NetworkDomain represents the /nokia-conf/configure/groups/group/router/network-domains/network-domain YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_NetworkDomains_NetworkDomain struct {
	Description *string `path:"description" module:"nokia-conf"`
	DomainName  *string `path:"domain-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_NetworkDomains_NetworkDomain implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_NetworkDomains_NetworkDomain) IsYANGGoStruct() {}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Router_NetworkDomains_NetworkDomain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_NetworkDomains_NetworkDomain) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDomainName retrieves the value of the leaf DomainName from the NokiaConf_Configure_Groups_Group_Router_NetworkDomains_NetworkDomain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DomainName is set, it can
// safely use t.GetDomainName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DomainName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_NetworkDomains_NetworkDomain) GetDomainName() string {
	if t == nil || t.DomainName == nil {
		return ""
	}
	return *t.DomainName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_NetworkDomains_NetworkDomain
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_NetworkDomains_NetworkDomain) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_NetworkDomains_NetworkDomain struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_NetworkDomains_NetworkDomain) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.DomainName == nil {
		return nil, fmt.Errorf("nil value for key DomainName")
	}

	return map[string]interface{}{
		"domain-name": *t.DomainName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_NetworkDomains_NetworkDomain) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_NetworkDomains_NetworkDomain"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_NetworkDomains_NetworkDomain) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_NetworkDomains_NetworkDomain) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_NetworkDomains_NetworkDomain.
func (*NokiaConf_Configure_Groups_Group_Router_NetworkDomains_NetworkDomain) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_OriginValidation represents the /nokia-conf/configure/groups/group/router/origin-validation YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_OriginValidation struct {
	RpkiSession map[string]*NokiaConf_Configure_Groups_Group_Router_OriginValidation_RpkiSession                                                                   `path:"rpki-session" module:"nokia-conf"`
	StaticEntry map[NokiaConf_Configure_Groups_Group_Router_OriginValidation_StaticEntry_Key]*NokiaConf_Configure_Groups_Group_Router_OriginValidation_StaticEntry `path:"static-entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_OriginValidation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_OriginValidation) IsYANGGoStruct() {}

// NokiaConf_Configure_Groups_Group_Router_OriginValidation_StaticEntry_Key represents the key for list StaticEntry of element /nokia-conf/configure/groups/group/router/origin-validation.
type NokiaConf_Configure_Groups_Group_Router_OriginValidation_StaticEntry_Key struct {
	IpPrefix string                                                                              `path:"ip-prefix"`
	Upto     NokiaConf_Configure_Groups_Group_Router_OriginValidation_StaticEntry_Upto_Union     `path:"upto"`
	OriginAs NokiaConf_Configure_Groups_Group_Router_OriginValidation_StaticEntry_OriginAs_Union `path:"origin-as"`
}

// NewRpkiSession creates a new entry in the RpkiSession list of the
// NokiaConf_Configure_Groups_Group_Router_OriginValidation struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_OriginValidation) NewRpkiSession(IpAddress string) (*NokiaConf_Configure_Groups_Group_Router_OriginValidation_RpkiSession, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RpkiSession == nil {
		t.RpkiSession = make(map[string]*NokiaConf_Configure_Groups_Group_Router_OriginValidation_RpkiSession)
	}

	key := IpAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RpkiSession[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RpkiSession", key)
	}

	t.RpkiSession[key] = &NokiaConf_Configure_Groups_Group_Router_OriginValidation_RpkiSession{
		IpAddress: &IpAddress,
	}

	return t.RpkiSession[key], nil
}

// RenameRpkiSession renames an entry in the list RpkiSession within
// the NokiaConf_Configure_Groups_Group_Router_OriginValidation struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_OriginValidation) RenameRpkiSession(oldK, newK string) error {
	if _, ok := t.RpkiSession[newK]; ok {
		return fmt.Errorf("key %v already exists in RpkiSession", newK)
	}

	e, ok := t.RpkiSession[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RpkiSession", oldK)
	}
	e.IpAddress = &newK

	t.RpkiSession[newK] = e
	delete(t.RpkiSession, oldK)
	return nil
}

// GetOrCreateRpkiSession retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_OriginValidation. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_OriginValidation) GetOrCreateRpkiSession(IpAddress string) *NokiaConf_Configure_Groups_Group_Router_OriginValidation_RpkiSession {

	key := IpAddress

	if v, ok := t.RpkiSession[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRpkiSession(IpAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRpkiSession got unexpected error: %v", err))
	}
	return v
}

// GetRpkiSession retrieves the value with the specified key from
// the RpkiSession map field of NokiaConf_Configure_Groups_Group_Router_OriginValidation. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_OriginValidation) GetRpkiSession(IpAddress string) *NokiaConf_Configure_Groups_Group_Router_OriginValidation_RpkiSession {

	if t == nil {
		return nil
	}

	key := IpAddress

	if lm, ok := t.RpkiSession[key]; ok {
		return lm
	}
	return nil
}

// DeleteRpkiSession deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_OriginValidation. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_OriginValidation) DeleteRpkiSession(IpAddress string) {
	key := IpAddress

	delete(t.RpkiSession, key)
}

// AppendRpkiSession appends the supplied NokiaConf_Configure_Groups_Group_Router_OriginValidation_RpkiSession struct to the
// list RpkiSession of NokiaConf_Configure_Groups_Group_Router_OriginValidation. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_OriginValidation_RpkiSession already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_OriginValidation) AppendRpkiSession(v *NokiaConf_Configure_Groups_Group_Router_OriginValidation_RpkiSession) error {
	if v.IpAddress == nil {
		return fmt.Errorf("invalid nil key received for IpAddress")
	}

	key := *v.IpAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RpkiSession == nil {
		t.RpkiSession = make(map[string]*NokiaConf_Configure_Groups_Group_Router_OriginValidation_RpkiSession)
	}

	if _, ok := t.RpkiSession[key]; ok {
		return fmt.Errorf("duplicate key for list RpkiSession %v", key)
	}

	t.RpkiSession[key] = v
	return nil
}

// NewStaticEntry creates a new entry in the StaticEntry list of the
// NokiaConf_Configure_Groups_Group_Router_OriginValidation struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_OriginValidation) NewStaticEntry(IpPrefix string, Upto NokiaConf_Configure_Groups_Group_Router_OriginValidation_StaticEntry_Upto_Union, OriginAs NokiaConf_Configure_Groups_Group_Router_OriginValidation_StaticEntry_OriginAs_Union) (*NokiaConf_Configure_Groups_Group_Router_OriginValidation_StaticEntry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StaticEntry == nil {
		t.StaticEntry = make(map[NokiaConf_Configure_Groups_Group_Router_OriginValidation_StaticEntry_Key]*NokiaConf_Configure_Groups_Group_Router_OriginValidation_StaticEntry)
	}

	key := NokiaConf_Configure_Groups_Group_Router_OriginValidation_StaticEntry_Key{
		IpPrefix: IpPrefix,
		Upto:     Upto,
		OriginAs: OriginAs,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.StaticEntry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list StaticEntry", key)
	}

	t.StaticEntry[key] = &NokiaConf_Configure_Groups_Group_Router_OriginValidation_StaticEntry{
		IpPrefix: &IpPrefix,
		Upto:     Upto,
		OriginAs: OriginAs,
	}

	return t.StaticEntry[key], nil
}

// RenameStaticEntry renames an entry in the list StaticEntry within
// the NokiaConf_Configure_Groups_Group_Router_OriginValidation struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_OriginValidation) RenameStaticEntry(oldK, newK NokiaConf_Configure_Groups_Group_Router_OriginValidation_StaticEntry_Key) error {
	if _, ok := t.StaticEntry[newK]; ok {
		return fmt.Errorf("key %v already exists in StaticEntry", newK)
	}

	e, ok := t.StaticEntry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in StaticEntry", oldK)
	}
	e.IpPrefix = &newK.IpPrefix
	e.Upto = newK.Upto
	e.OriginAs = newK.OriginAs

	t.StaticEntry[newK] = e
	delete(t.StaticEntry, oldK)
	return nil
}

// GetOrCreateStaticEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_OriginValidation. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_OriginValidation) GetOrCreateStaticEntry(IpPrefix string, Upto NokiaConf_Configure_Groups_Group_Router_OriginValidation_StaticEntry_Upto_Union, OriginAs NokiaConf_Configure_Groups_Group_Router_OriginValidation_StaticEntry_OriginAs_Union) *NokiaConf_Configure_Groups_Group_Router_OriginValidation_StaticEntry {

	key := NokiaConf_Configure_Groups_Group_Router_OriginValidation_StaticEntry_Key{
		IpPrefix: IpPrefix,
		Upto:     Upto,
		OriginAs: OriginAs,
	}

	if v, ok := t.StaticEntry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewStaticEntry(IpPrefix, Upto, OriginAs)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateStaticEntry got unexpected error: %v", err))
	}
	return v
}

// GetStaticEntry retrieves the value with the specified key from
// the StaticEntry map field of NokiaConf_Configure_Groups_Group_Router_OriginValidation. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_OriginValidation) GetStaticEntry(IpPrefix string, Upto NokiaConf_Configure_Groups_Group_Router_OriginValidation_StaticEntry_Upto_Union, OriginAs NokiaConf_Configure_Groups_Group_Router_OriginValidation_StaticEntry_OriginAs_Union) *NokiaConf_Configure_Groups_Group_Router_OriginValidation_StaticEntry {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Router_OriginValidation_StaticEntry_Key{
		IpPrefix: IpPrefix,
		Upto:     Upto,
		OriginAs: OriginAs,
	}

	if lm, ok := t.StaticEntry[key]; ok {
		return lm
	}
	return nil
}

// DeleteStaticEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_OriginValidation. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_OriginValidation) DeleteStaticEntry(IpPrefix string, Upto NokiaConf_Configure_Groups_Group_Router_OriginValidation_StaticEntry_Upto_Union, OriginAs NokiaConf_Configure_Groups_Group_Router_OriginValidation_StaticEntry_OriginAs_Union) {
	key := NokiaConf_Configure_Groups_Group_Router_OriginValidation_StaticEntry_Key{
		IpPrefix: IpPrefix,
		Upto:     Upto,
		OriginAs: OriginAs,
	}

	delete(t.StaticEntry, key)
}

// AppendStaticEntry appends the supplied NokiaConf_Configure_Groups_Group_Router_OriginValidation_StaticEntry struct to the
// list StaticEntry of NokiaConf_Configure_Groups_Group_Router_OriginValidation. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_OriginValidation_StaticEntry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_OriginValidation) AppendStaticEntry(v *NokiaConf_Configure_Groups_Group_Router_OriginValidation_StaticEntry) error {
	if v.IpPrefix == nil {
		return fmt.Errorf("invalid nil key for IpPrefix")
	}

	key := NokiaConf_Configure_Groups_Group_Router_OriginValidation_StaticEntry_Key{
		IpPrefix: *v.IpPrefix,
		Upto:     v.Upto,
		OriginAs: v.OriginAs,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StaticEntry == nil {
		t.StaticEntry = make(map[NokiaConf_Configure_Groups_Group_Router_OriginValidation_StaticEntry_Key]*NokiaConf_Configure_Groups_Group_Router_OriginValidation_StaticEntry)
	}

	if _, ok := t.StaticEntry[key]; ok {
		return fmt.Errorf("duplicate key for list StaticEntry %v", key)
	}

	t.StaticEntry[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_OriginValidation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_OriginValidation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.RpkiSession {
		e.PopulateDefaults()
	}
	for _, e := range t.StaticEntry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_OriginValidation) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_OriginValidation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_OriginValidation) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_OriginValidation) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_OriginValidation.
func (*NokiaConf_Configure_Groups_Group_Router_OriginValidation) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_OriginValidation_RpkiSession represents the /nokia-conf/configure/groups/group/router/origin-validation/rpki-session YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_OriginValidation_RpkiSession struct {
	AdminState   E_NokiaTypesSros_AdminState                                                       `path:"admin-state" module:"nokia-conf"`
	ConnectRetry *uint32                                                                           `path:"connect-retry" module:"nokia-conf"`
	Description  *string                                                                           `path:"description" module:"nokia-conf"`
	IpAddress    *string                                                                           `path:"ip-address" module:"nokia-conf"`
	LocalAddress *string                                                                           `path:"local-address" module:"nokia-conf"`
	Port         *uint32                                                                           `path:"port" module:"nokia-conf"`
	RefreshTime  *NokiaConf_Configure_Groups_Group_Router_OriginValidation_RpkiSession_RefreshTime `path:"refresh-time" module:"nokia-conf"`
	StaleTime    *uint32                                                                           `path:"stale-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_OriginValidation_RpkiSession implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_OriginValidation_RpkiSession) IsYANGGoStruct() {}

// GetOrCreateRefreshTime retrieves the value of the RefreshTime field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_OriginValidation_RpkiSession) GetOrCreateRefreshTime() *NokiaConf_Configure_Groups_Group_Router_OriginValidation_RpkiSession_RefreshTime {
	if t.RefreshTime != nil {
		return t.RefreshTime
	}
	t.RefreshTime = &NokiaConf_Configure_Groups_Group_Router_OriginValidation_RpkiSession_RefreshTime{}
	return t.RefreshTime
}

// GetRefreshTime returns the value of the RefreshTime struct pointer
// from NokiaConf_Configure_Groups_Group_Router_OriginValidation_RpkiSession. If the receiver or the field RefreshTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_OriginValidation_RpkiSession) GetRefreshTime() *NokiaConf_Configure_Groups_Group_Router_OriginValidation_RpkiSession_RefreshTime {
	if t != nil && t.RefreshTime != nil {
		return t.RefreshTime
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_OriginValidation_RpkiSession
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_OriginValidation_RpkiSession) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetConnectRetry retrieves the value of the leaf ConnectRetry from the NokiaConf_Configure_Groups_Group_Router_OriginValidation_RpkiSession
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConnectRetry is set, it can
// safely use t.GetConnectRetry() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConnectRetry == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_OriginValidation_RpkiSession) GetConnectRetry() uint32 {
	if t == nil || t.ConnectRetry == nil {
		return 120
	}
	return *t.ConnectRetry
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Router_OriginValidation_RpkiSession
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_OriginValidation_RpkiSession) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Groups_Group_Router_OriginValidation_RpkiSession
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_OriginValidation_RpkiSession) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetLocalAddress retrieves the value of the leaf LocalAddress from the NokiaConf_Configure_Groups_Group_Router_OriginValidation_RpkiSession
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalAddress is set, it can
// safely use t.GetLocalAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_OriginValidation_RpkiSession) GetLocalAddress() string {
	if t == nil || t.LocalAddress == nil {
		return ""
	}
	return *t.LocalAddress
}

// GetPort retrieves the value of the leaf Port from the NokiaConf_Configure_Groups_Group_Router_OriginValidation_RpkiSession
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_OriginValidation_RpkiSession) GetPort() uint32 {
	if t == nil || t.Port == nil {
		return 323
	}
	return *t.Port
}

// GetStaleTime retrieves the value of the leaf StaleTime from the NokiaConf_Configure_Groups_Group_Router_OriginValidation_RpkiSession
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StaleTime is set, it can
// safely use t.GetStaleTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StaleTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_OriginValidation_RpkiSession) GetStaleTime() uint32 {
	if t == nil || t.StaleTime == nil {
		return 3600
	}
	return *t.StaleTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_OriginValidation_RpkiSession
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_OriginValidation_RpkiSession) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.ConnectRetry == nil {
		var v uint32 = 120
		t.ConnectRetry = &v
	}
	if t.Port == nil {
		var v uint32 = 323
		t.Port = &v
	}
	if t.StaleTime == nil {
		var v uint32 = 3600
		t.StaleTime = &v
	}
	t.RefreshTime.PopulateDefaults()
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_OriginValidation_RpkiSession struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_OriginValidation_RpkiSession) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.IpAddress == nil {
		return nil, fmt.Errorf("nil value for key IpAddress")
	}

	return map[string]interface{}{
		"ip-address": *t.IpAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_OriginValidation_RpkiSession) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_OriginValidation_RpkiSession"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_OriginValidation_RpkiSession) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_OriginValidation_RpkiSession) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_OriginValidation_RpkiSession.
func (*NokiaConf_Configure_Groups_Group_Router_OriginValidation_RpkiSession) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_OriginValidation_RpkiSession_RefreshTime represents the /nokia-conf/configure/groups/group/router/origin-validation/rpki-session/refresh-time YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_OriginValidation_RpkiSession_RefreshTime struct {
	HoldTime *uint32 `path:"hold-time" module:"nokia-conf"`
	Value    *uint32 `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_OriginValidation_RpkiSession_RefreshTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_OriginValidation_RpkiSession_RefreshTime) IsYANGGoStruct() {
}

// GetHoldTime retrieves the value of the leaf HoldTime from the NokiaConf_Configure_Groups_Group_Router_OriginValidation_RpkiSession_RefreshTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldTime is set, it can
// safely use t.GetHoldTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_OriginValidation_RpkiSession_RefreshTime) GetHoldTime() uint32 {
	if t == nil || t.HoldTime == nil {
		return 600
	}
	return *t.HoldTime
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Groups_Group_Router_OriginValidation_RpkiSession_RefreshTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_OriginValidation_RpkiSession_RefreshTime) GetValue() uint32 {
	if t == nil || t.Value == nil {
		return 300
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_OriginValidation_RpkiSession_RefreshTime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_OriginValidation_RpkiSession_RefreshTime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HoldTime == nil {
		var v uint32 = 600
		t.HoldTime = &v
	}
	if t.Value == nil {
		var v uint32 = 300
		t.Value = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_OriginValidation_RpkiSession_RefreshTime) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_OriginValidation_RpkiSession_RefreshTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_OriginValidation_RpkiSession_RefreshTime) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_OriginValidation_RpkiSession_RefreshTime) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_OriginValidation_RpkiSession_RefreshTime.
func (*NokiaConf_Configure_Groups_Group_Router_OriginValidation_RpkiSession_RefreshTime) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_OriginValidation_StaticEntry represents the /nokia-conf/configure/groups/group/router/origin-validation/static-entry YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_OriginValidation_StaticEntry struct {
	IpPrefix *string                                                                             `path:"ip-prefix" module:"nokia-conf"`
	OriginAs NokiaConf_Configure_Groups_Group_Router_OriginValidation_StaticEntry_OriginAs_Union `path:"origin-as" module:"nokia-conf"`
	Upto     NokiaConf_Configure_Groups_Group_Router_OriginValidation_StaticEntry_Upto_Union     `path:"upto" module:"nokia-conf"`
	Valid    *bool                                                                               `path:"valid" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_OriginValidation_StaticEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_OriginValidation_StaticEntry) IsYANGGoStruct() {}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_Groups_Group_Router_OriginValidation_StaticEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_OriginValidation_StaticEntry) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// GetOriginAs retrieves the value of the leaf OriginAs from the NokiaConf_Configure_Groups_Group_Router_OriginValidation_StaticEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OriginAs is set, it can
// safely use t.GetOriginAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OriginAs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_OriginValidation_StaticEntry) GetOriginAs() NokiaConf_Configure_Groups_Group_Router_OriginValidation_StaticEntry_OriginAs_Union {
	if t == nil || t.OriginAs == nil {
		return nil
	}
	return t.OriginAs
}

// GetUpto retrieves the value of the leaf Upto from the NokiaConf_Configure_Groups_Group_Router_OriginValidation_StaticEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Upto is set, it can
// safely use t.GetUpto() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Upto == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_OriginValidation_StaticEntry) GetUpto() NokiaConf_Configure_Groups_Group_Router_OriginValidation_StaticEntry_Upto_Union {
	if t == nil || t.Upto == nil {
		return nil
	}
	return t.Upto
}

// GetValid retrieves the value of the leaf Valid from the NokiaConf_Configure_Groups_Group_Router_OriginValidation_StaticEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Valid is set, it can
// safely use t.GetValid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Valid == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_OriginValidation_StaticEntry) GetValid() bool {
	if t == nil || t.Valid == nil {
		return true
	}
	return *t.Valid
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_OriginValidation_StaticEntry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_OriginValidation_StaticEntry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Valid == nil {
		var v bool = true
		t.Valid = &v
	}
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_OriginValidation_StaticEntry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_OriginValidation_StaticEntry) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	return map[string]interface{}{
		"ip-prefix": *t.IpPrefix,
		"origin-as": t.OriginAs,
		"upto":      t.Upto,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_OriginValidation_StaticEntry) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_OriginValidation_StaticEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_OriginValidation_StaticEntry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_OriginValidation_StaticEntry) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_OriginValidation_StaticEntry.
func (*NokiaConf_Configure_Groups_Group_Router_OriginValidation_StaticEntry) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf represents the /nokia-conf/configure/groups/group/router/ospf YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf struct {
	AdminState                E_NokiaTypesSros_AdminState                                             `path:"admin-state" module:"nokia-conf"`
	AdvertiseRouterCapability E_NokiaTypesOspf_AdvertiseRouterCapabilityType                          `path:"advertise-router-capability" module:"nokia-conf"`
	AdvertiseTunnelLink       *bool                                                                   `path:"advertise-tunnel-link" module:"nokia-conf"`
	Area                      map[string]*NokiaConf_Configure_Groups_Group_Router_Ospf_Area           `path:"area" module:"nokia-conf"`
	Asbr                      *NokiaConf_Configure_Groups_Group_Router_Ospf_Asbr                      `path:"asbr" module:"nokia-conf" yangPresence:"true"`
	CompatibleRfc1583         *bool                                                                   `path:"compatible-rfc1583" module:"nokia-conf"`
	DatabaseExport            *NokiaConf_Configure_Groups_Group_Router_Ospf_DatabaseExport            `path:"database-export" module:"nokia-conf" yangPresence:"true"`
	EntropyLabel              *NokiaConf_Configure_Groups_Group_Router_Ospf_EntropyLabel              `path:"entropy-label" module:"nokia-conf"`
	ExportLimit               *NokiaConf_Configure_Groups_Group_Router_Ospf_ExportLimit               `path:"export-limit" module:"nokia-conf" yangPresence:"true"`
	ExportPolicy              []string                                                                `path:"export-policy" module:"nokia-conf"`
	ExternalDbOverflow        *NokiaConf_Configure_Groups_Group_Router_Ospf_ExternalDbOverflow        `path:"external-db-overflow" module:"nokia-conf" yangPresence:"true"`
	ExternalPreference        *int32                                                                  `path:"external-preference" module:"nokia-conf"`
	FlexibleAlgorithms        *NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms        `path:"flexible-algorithms" module:"nokia-conf" yangPresence:"true"`
	GracefulRestart           *NokiaConf_Configure_Groups_Group_Router_Ospf_GracefulRestart           `path:"graceful-restart" module:"nokia-conf" yangPresence:"true"`
	IgpShortcut               *NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut               `path:"igp-shortcut" module:"nokia-conf" yangPresence:"true"`
	ImportPolicy              []string                                                                `path:"import-policy" module:"nokia-conf"`
	LdpOverRsvp               *bool                                                                   `path:"ldp-over-rsvp" module:"nokia-conf"`
	LdpSync                   *bool                                                                   `path:"ldp-sync" module:"nokia-conf"`
	LoopfreeAlternate         *NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate         `path:"loopfree-alternate" module:"nokia-conf" yangPresence:"true"`
	MultiInstance             *bool                                                                   `path:"multi-instance" module:"nokia-conf"`
	MulticastImport           *bool                                                                   `path:"multicast-import" module:"nokia-conf"`
	OspfInstance              NokiaConf_Configure_Groups_Group_Router_Ospf_OspfInstance_Union         `path:"ospf-instance" module:"nokia-conf"`
	Overload                  *bool                                                                   `path:"overload" module:"nokia-conf"`
	OverloadIncludeExt_1      *bool                                                                   `path:"overload-include-ext-1" module:"nokia-conf"`
	OverloadIncludeExt_2      *bool                                                                   `path:"overload-include-ext-2" module:"nokia-conf"`
	OverloadIncludeStub       *bool                                                                   `path:"overload-include-stub" module:"nokia-conf"`
	OverloadOnBoot            *NokiaConf_Configure_Groups_Group_Router_Ospf_OverloadOnBoot            `path:"overload-on-boot" module:"nokia-conf" yangPresence:"true"`
	Preference                *int32                                                                  `path:"preference" module:"nokia-conf"`
	ReferenceBandwidth        *uint64                                                                 `path:"reference-bandwidth" module:"nokia-conf"`
	RibPriority               *NokiaConf_Configure_Groups_Group_Router_Ospf_RibPriority               `path:"rib-priority" module:"nokia-conf"`
	RouterId                  *string                                                                 `path:"router-id" module:"nokia-conf"`
	RtrAdvLsaLimit            *NokiaConf_Configure_Groups_Group_Router_Ospf_RtrAdvLsaLimit            `path:"rtr-adv-lsa-limit" module:"nokia-conf" yangPresence:"true"`
	SegmentRouting            *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting            `path:"segment-routing" module:"nokia-conf" yangPresence:"true"`
	Timers                    *NokiaConf_Configure_Groups_Group_Router_Ospf_Timers                    `path:"timers" module:"nokia-conf"`
	TrafficEngineering        *bool                                                                   `path:"traffic-engineering" module:"nokia-conf"`
	TrafficEngineeringOptions *NokiaConf_Configure_Groups_Group_Router_Ospf_TrafficEngineeringOptions `path:"traffic-engineering-options" module:"nokia-conf"`
	UnicastImport             *bool                                                                   `path:"unicast-import" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf) IsYANGGoStruct() {}

// NewArea creates a new entry in the Area list of the
// NokiaConf_Configure_Groups_Group_Router_Ospf struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf) NewArea(AreaId string) (*NokiaConf_Configure_Groups_Group_Router_Ospf_Area, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Area == nil {
		t.Area = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Ospf_Area)
	}

	key := AreaId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Area[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Area", key)
	}

	t.Area[key] = &NokiaConf_Configure_Groups_Group_Router_Ospf_Area{
		AreaId: &AreaId,
	}

	return t.Area[key], nil
}

// RenameArea renames an entry in the list Area within
// the NokiaConf_Configure_Groups_Group_Router_Ospf struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf) RenameArea(oldK, newK string) error {
	if _, ok := t.Area[newK]; ok {
		return fmt.Errorf("key %v already exists in Area", newK)
	}

	e, ok := t.Area[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Area", oldK)
	}
	e.AreaId = &newK

	t.Area[newK] = e
	delete(t.Area, oldK)
	return nil
}

// GetOrCreateArea retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ospf. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf) GetOrCreateArea(AreaId string) *NokiaConf_Configure_Groups_Group_Router_Ospf_Area {

	key := AreaId

	if v, ok := t.Area[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewArea(AreaId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateArea got unexpected error: %v", err))
	}
	return v
}

// GetArea retrieves the value with the specified key from
// the Area map field of NokiaConf_Configure_Groups_Group_Router_Ospf. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf) GetArea(AreaId string) *NokiaConf_Configure_Groups_Group_Router_Ospf_Area {

	if t == nil {
		return nil
	}

	key := AreaId

	if lm, ok := t.Area[key]; ok {
		return lm
	}
	return nil
}

// DeleteArea deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ospf. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf) DeleteArea(AreaId string) {
	key := AreaId

	delete(t.Area, key)
}

// AppendArea appends the supplied NokiaConf_Configure_Groups_Group_Router_Ospf_Area struct to the
// list Area of NokiaConf_Configure_Groups_Group_Router_Ospf. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Ospf_Area already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf) AppendArea(v *NokiaConf_Configure_Groups_Group_Router_Ospf_Area) error {
	if v.AreaId == nil {
		return fmt.Errorf("invalid nil key received for AreaId")
	}

	key := *v.AreaId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Area == nil {
		t.Area = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Ospf_Area)
	}

	if _, ok := t.Area[key]; ok {
		return fmt.Errorf("duplicate key for list Area %v", key)
	}

	t.Area[key] = v
	return nil
}

// GetOrCreateAsbr retrieves the value of the Asbr field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf) GetOrCreateAsbr() *NokiaConf_Configure_Groups_Group_Router_Ospf_Asbr {
	if t.Asbr != nil {
		return t.Asbr
	}
	t.Asbr = &NokiaConf_Configure_Groups_Group_Router_Ospf_Asbr{}
	return t.Asbr
}

// GetOrCreateDatabaseExport retrieves the value of the DatabaseExport field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf) GetOrCreateDatabaseExport() *NokiaConf_Configure_Groups_Group_Router_Ospf_DatabaseExport {
	if t.DatabaseExport != nil {
		return t.DatabaseExport
	}
	t.DatabaseExport = &NokiaConf_Configure_Groups_Group_Router_Ospf_DatabaseExport{}
	return t.DatabaseExport
}

// GetOrCreateEntropyLabel retrieves the value of the EntropyLabel field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf) GetOrCreateEntropyLabel() *NokiaConf_Configure_Groups_Group_Router_Ospf_EntropyLabel {
	if t.EntropyLabel != nil {
		return t.EntropyLabel
	}
	t.EntropyLabel = &NokiaConf_Configure_Groups_Group_Router_Ospf_EntropyLabel{}
	return t.EntropyLabel
}

// GetOrCreateExportLimit retrieves the value of the ExportLimit field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf) GetOrCreateExportLimit() *NokiaConf_Configure_Groups_Group_Router_Ospf_ExportLimit {
	if t.ExportLimit != nil {
		return t.ExportLimit
	}
	t.ExportLimit = &NokiaConf_Configure_Groups_Group_Router_Ospf_ExportLimit{}
	return t.ExportLimit
}

// GetOrCreateExternalDbOverflow retrieves the value of the ExternalDbOverflow field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf) GetOrCreateExternalDbOverflow() *NokiaConf_Configure_Groups_Group_Router_Ospf_ExternalDbOverflow {
	if t.ExternalDbOverflow != nil {
		return t.ExternalDbOverflow
	}
	t.ExternalDbOverflow = &NokiaConf_Configure_Groups_Group_Router_Ospf_ExternalDbOverflow{}
	return t.ExternalDbOverflow
}

// GetOrCreateFlexibleAlgorithms retrieves the value of the FlexibleAlgorithms field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf) GetOrCreateFlexibleAlgorithms() *NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms {
	if t.FlexibleAlgorithms != nil {
		return t.FlexibleAlgorithms
	}
	t.FlexibleAlgorithms = &NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms{}
	return t.FlexibleAlgorithms
}

// GetOrCreateGracefulRestart retrieves the value of the GracefulRestart field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf) GetOrCreateGracefulRestart() *NokiaConf_Configure_Groups_Group_Router_Ospf_GracefulRestart {
	if t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	t.GracefulRestart = &NokiaConf_Configure_Groups_Group_Router_Ospf_GracefulRestart{}
	return t.GracefulRestart
}

// GetOrCreateIgpShortcut retrieves the value of the IgpShortcut field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf) GetOrCreateIgpShortcut() *NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut {
	if t.IgpShortcut != nil {
		return t.IgpShortcut
	}
	t.IgpShortcut = &NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut{}
	return t.IgpShortcut
}

// GetOrCreateLoopfreeAlternate retrieves the value of the LoopfreeAlternate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf) GetOrCreateLoopfreeAlternate() *NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate {
	if t.LoopfreeAlternate != nil {
		return t.LoopfreeAlternate
	}
	t.LoopfreeAlternate = &NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate{}
	return t.LoopfreeAlternate
}

// GetOrCreateOverloadOnBoot retrieves the value of the OverloadOnBoot field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf) GetOrCreateOverloadOnBoot() *NokiaConf_Configure_Groups_Group_Router_Ospf_OverloadOnBoot {
	if t.OverloadOnBoot != nil {
		return t.OverloadOnBoot
	}
	t.OverloadOnBoot = &NokiaConf_Configure_Groups_Group_Router_Ospf_OverloadOnBoot{}
	return t.OverloadOnBoot
}

// GetOrCreateRibPriority retrieves the value of the RibPriority field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf) GetOrCreateRibPriority() *NokiaConf_Configure_Groups_Group_Router_Ospf_RibPriority {
	if t.RibPriority != nil {
		return t.RibPriority
	}
	t.RibPriority = &NokiaConf_Configure_Groups_Group_Router_Ospf_RibPriority{}
	return t.RibPriority
}

// GetOrCreateRtrAdvLsaLimit retrieves the value of the RtrAdvLsaLimit field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf) GetOrCreateRtrAdvLsaLimit() *NokiaConf_Configure_Groups_Group_Router_Ospf_RtrAdvLsaLimit {
	if t.RtrAdvLsaLimit != nil {
		return t.RtrAdvLsaLimit
	}
	t.RtrAdvLsaLimit = &NokiaConf_Configure_Groups_Group_Router_Ospf_RtrAdvLsaLimit{}
	return t.RtrAdvLsaLimit
}

// GetOrCreateSegmentRouting retrieves the value of the SegmentRouting field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf) GetOrCreateSegmentRouting() *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting {
	if t.SegmentRouting != nil {
		return t.SegmentRouting
	}
	t.SegmentRouting = &NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting{}
	return t.SegmentRouting
}

// GetOrCreateTimers retrieves the value of the Timers field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf) GetOrCreateTimers() *NokiaConf_Configure_Groups_Group_Router_Ospf_Timers {
	if t.Timers != nil {
		return t.Timers
	}
	t.Timers = &NokiaConf_Configure_Groups_Group_Router_Ospf_Timers{}
	return t.Timers
}

// GetOrCreateTrafficEngineeringOptions retrieves the value of the TrafficEngineeringOptions field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf) GetOrCreateTrafficEngineeringOptions() *NokiaConf_Configure_Groups_Group_Router_Ospf_TrafficEngineeringOptions {
	if t.TrafficEngineeringOptions != nil {
		return t.TrafficEngineeringOptions
	}
	t.TrafficEngineeringOptions = &NokiaConf_Configure_Groups_Group_Router_Ospf_TrafficEngineeringOptions{}
	return t.TrafficEngineeringOptions
}

// GetAsbr returns the value of the Asbr struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf. If the receiver or the field Asbr is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf) GetAsbr() *NokiaConf_Configure_Groups_Group_Router_Ospf_Asbr {
	if t != nil && t.Asbr != nil {
		return t.Asbr
	}
	return nil
}

// GetDatabaseExport returns the value of the DatabaseExport struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf. If the receiver or the field DatabaseExport is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf) GetDatabaseExport() *NokiaConf_Configure_Groups_Group_Router_Ospf_DatabaseExport {
	if t != nil && t.DatabaseExport != nil {
		return t.DatabaseExport
	}
	return nil
}

// GetEntropyLabel returns the value of the EntropyLabel struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf. If the receiver or the field EntropyLabel is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf) GetEntropyLabel() *NokiaConf_Configure_Groups_Group_Router_Ospf_EntropyLabel {
	if t != nil && t.EntropyLabel != nil {
		return t.EntropyLabel
	}
	return nil
}

// GetExportLimit returns the value of the ExportLimit struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf. If the receiver or the field ExportLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf) GetExportLimit() *NokiaConf_Configure_Groups_Group_Router_Ospf_ExportLimit {
	if t != nil && t.ExportLimit != nil {
		return t.ExportLimit
	}
	return nil
}

// GetExternalDbOverflow returns the value of the ExternalDbOverflow struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf. If the receiver or the field ExternalDbOverflow is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf) GetExternalDbOverflow() *NokiaConf_Configure_Groups_Group_Router_Ospf_ExternalDbOverflow {
	if t != nil && t.ExternalDbOverflow != nil {
		return t.ExternalDbOverflow
	}
	return nil
}

// GetFlexibleAlgorithms returns the value of the FlexibleAlgorithms struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf. If the receiver or the field FlexibleAlgorithms is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf) GetFlexibleAlgorithms() *NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms {
	if t != nil && t.FlexibleAlgorithms != nil {
		return t.FlexibleAlgorithms
	}
	return nil
}

// GetGracefulRestart returns the value of the GracefulRestart struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf. If the receiver or the field GracefulRestart is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf) GetGracefulRestart() *NokiaConf_Configure_Groups_Group_Router_Ospf_GracefulRestart {
	if t != nil && t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	return nil
}

// GetIgpShortcut returns the value of the IgpShortcut struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf. If the receiver or the field IgpShortcut is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf) GetIgpShortcut() *NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut {
	if t != nil && t.IgpShortcut != nil {
		return t.IgpShortcut
	}
	return nil
}

// GetLoopfreeAlternate returns the value of the LoopfreeAlternate struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf. If the receiver or the field LoopfreeAlternate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf) GetLoopfreeAlternate() *NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate {
	if t != nil && t.LoopfreeAlternate != nil {
		return t.LoopfreeAlternate
	}
	return nil
}

// GetOverloadOnBoot returns the value of the OverloadOnBoot struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf. If the receiver or the field OverloadOnBoot is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf) GetOverloadOnBoot() *NokiaConf_Configure_Groups_Group_Router_Ospf_OverloadOnBoot {
	if t != nil && t.OverloadOnBoot != nil {
		return t.OverloadOnBoot
	}
	return nil
}

// GetRibPriority returns the value of the RibPriority struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf. If the receiver or the field RibPriority is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf) GetRibPriority() *NokiaConf_Configure_Groups_Group_Router_Ospf_RibPriority {
	if t != nil && t.RibPriority != nil {
		return t.RibPriority
	}
	return nil
}

// GetRtrAdvLsaLimit returns the value of the RtrAdvLsaLimit struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf. If the receiver or the field RtrAdvLsaLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf) GetRtrAdvLsaLimit() *NokiaConf_Configure_Groups_Group_Router_Ospf_RtrAdvLsaLimit {
	if t != nil && t.RtrAdvLsaLimit != nil {
		return t.RtrAdvLsaLimit
	}
	return nil
}

// GetSegmentRouting returns the value of the SegmentRouting struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf. If the receiver or the field SegmentRouting is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf) GetSegmentRouting() *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting {
	if t != nil && t.SegmentRouting != nil {
		return t.SegmentRouting
	}
	return nil
}

// GetTimers returns the value of the Timers struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf. If the receiver or the field Timers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf) GetTimers() *NokiaConf_Configure_Groups_Group_Router_Ospf_Timers {
	if t != nil && t.Timers != nil {
		return t.Timers
	}
	return nil
}

// GetTrafficEngineeringOptions returns the value of the TrafficEngineeringOptions struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf. If the receiver or the field TrafficEngineeringOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf) GetTrafficEngineeringOptions() *NokiaConf_Configure_Groups_Group_Router_Ospf_TrafficEngineeringOptions {
	if t != nil && t.TrafficEngineeringOptions != nil {
		return t.TrafficEngineeringOptions
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Ospf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAdvertiseRouterCapability retrieves the value of the leaf AdvertiseRouterCapability from the NokiaConf_Configure_Groups_Group_Router_Ospf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseRouterCapability is set, it can
// safely use t.GetAdvertiseRouterCapability() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseRouterCapability == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf) GetAdvertiseRouterCapability() E_NokiaTypesOspf_AdvertiseRouterCapabilityType {
	if t == nil || t.AdvertiseRouterCapability == 0 {
		return NokiaTypesOspf_AdvertiseRouterCapabilityType_false
	}
	return t.AdvertiseRouterCapability
}

// GetAdvertiseTunnelLink retrieves the value of the leaf AdvertiseTunnelLink from the NokiaConf_Configure_Groups_Group_Router_Ospf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseTunnelLink is set, it can
// safely use t.GetAdvertiseTunnelLink() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseTunnelLink == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf) GetAdvertiseTunnelLink() bool {
	if t == nil || t.AdvertiseTunnelLink == nil {
		return false
	}
	return *t.AdvertiseTunnelLink
}

// GetCompatibleRfc1583 retrieves the value of the leaf CompatibleRfc1583 from the NokiaConf_Configure_Groups_Group_Router_Ospf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CompatibleRfc1583 is set, it can
// safely use t.GetCompatibleRfc1583() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CompatibleRfc1583 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf) GetCompatibleRfc1583() bool {
	if t == nil || t.CompatibleRfc1583 == nil {
		return true
	}
	return *t.CompatibleRfc1583
}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the NokiaConf_Configure_Groups_Group_Router_Ospf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPolicy is set, it can
// safely use t.GetExportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf) GetExportPolicy() []string {
	if t == nil || t.ExportPolicy == nil {
		return nil
	}
	return t.ExportPolicy
}

// GetExternalPreference retrieves the value of the leaf ExternalPreference from the NokiaConf_Configure_Groups_Group_Router_Ospf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExternalPreference is set, it can
// safely use t.GetExternalPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExternalPreference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf) GetExternalPreference() int32 {
	if t == nil || t.ExternalPreference == nil {
		return 150
	}
	return *t.ExternalPreference
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Groups_Group_Router_Ospf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf) GetImportPolicy() []string {
	if t == nil || t.ImportPolicy == nil {
		return nil
	}
	return t.ImportPolicy
}

// GetLdpOverRsvp retrieves the value of the leaf LdpOverRsvp from the NokiaConf_Configure_Groups_Group_Router_Ospf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LdpOverRsvp is set, it can
// safely use t.GetLdpOverRsvp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LdpOverRsvp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf) GetLdpOverRsvp() bool {
	if t == nil || t.LdpOverRsvp == nil {
		return false
	}
	return *t.LdpOverRsvp
}

// GetLdpSync retrieves the value of the leaf LdpSync from the NokiaConf_Configure_Groups_Group_Router_Ospf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LdpSync is set, it can
// safely use t.GetLdpSync() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LdpSync == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf) GetLdpSync() bool {
	if t == nil || t.LdpSync == nil {
		return true
	}
	return *t.LdpSync
}

// GetMultiInstance retrieves the value of the leaf MultiInstance from the NokiaConf_Configure_Groups_Group_Router_Ospf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MultiInstance is set, it can
// safely use t.GetMultiInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MultiInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf) GetMultiInstance() bool {
	if t == nil || t.MultiInstance == nil {
		return false
	}
	return *t.MultiInstance
}

// GetMulticastImport retrieves the value of the leaf MulticastImport from the NokiaConf_Configure_Groups_Group_Router_Ospf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MulticastImport is set, it can
// safely use t.GetMulticastImport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MulticastImport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf) GetMulticastImport() bool {
	if t == nil || t.MulticastImport == nil {
		return false
	}
	return *t.MulticastImport
}

// GetOspfInstance retrieves the value of the leaf OspfInstance from the NokiaConf_Configure_Groups_Group_Router_Ospf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OspfInstance is set, it can
// safely use t.GetOspfInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OspfInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf) GetOspfInstance() NokiaConf_Configure_Groups_Group_Router_Ospf_OspfInstance_Union {
	if t == nil || t.OspfInstance == nil {
		return nil
	}
	return t.OspfInstance
}

// GetOverload retrieves the value of the leaf Overload from the NokiaConf_Configure_Groups_Group_Router_Ospf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Overload is set, it can
// safely use t.GetOverload() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Overload == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf) GetOverload() bool {
	if t == nil || t.Overload == nil {
		return false
	}
	return *t.Overload
}

// GetOverloadIncludeExt_1 retrieves the value of the leaf OverloadIncludeExt_1 from the NokiaConf_Configure_Groups_Group_Router_Ospf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OverloadIncludeExt_1 is set, it can
// safely use t.GetOverloadIncludeExt_1() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OverloadIncludeExt_1 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf) GetOverloadIncludeExt_1() bool {
	if t == nil || t.OverloadIncludeExt_1 == nil {
		return false
	}
	return *t.OverloadIncludeExt_1
}

// GetOverloadIncludeExt_2 retrieves the value of the leaf OverloadIncludeExt_2 from the NokiaConf_Configure_Groups_Group_Router_Ospf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OverloadIncludeExt_2 is set, it can
// safely use t.GetOverloadIncludeExt_2() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OverloadIncludeExt_2 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf) GetOverloadIncludeExt_2() bool {
	if t == nil || t.OverloadIncludeExt_2 == nil {
		return false
	}
	return *t.OverloadIncludeExt_2
}

// GetOverloadIncludeStub retrieves the value of the leaf OverloadIncludeStub from the NokiaConf_Configure_Groups_Group_Router_Ospf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OverloadIncludeStub is set, it can
// safely use t.GetOverloadIncludeStub() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OverloadIncludeStub == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf) GetOverloadIncludeStub() bool {
	if t == nil || t.OverloadIncludeStub == nil {
		return false
	}
	return *t.OverloadIncludeStub
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Groups_Group_Router_Ospf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf) GetPreference() int32 {
	if t == nil || t.Preference == nil {
		return 10
	}
	return *t.Preference
}

// GetReferenceBandwidth retrieves the value of the leaf ReferenceBandwidth from the NokiaConf_Configure_Groups_Group_Router_Ospf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReferenceBandwidth is set, it can
// safely use t.GetReferenceBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReferenceBandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf) GetReferenceBandwidth() uint64 {
	if t == nil || t.ReferenceBandwidth == nil {
		return 100000000
	}
	return *t.ReferenceBandwidth
}

// GetRouterId retrieves the value of the leaf RouterId from the NokiaConf_Configure_Groups_Group_Router_Ospf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterId is set, it can
// safely use t.GetRouterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf) GetRouterId() string {
	if t == nil || t.RouterId == nil {
		return ""
	}
	return *t.RouterId
}

// GetTrafficEngineering retrieves the value of the leaf TrafficEngineering from the NokiaConf_Configure_Groups_Group_Router_Ospf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TrafficEngineering is set, it can
// safely use t.GetTrafficEngineering() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TrafficEngineering == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf) GetTrafficEngineering() bool {
	if t == nil || t.TrafficEngineering == nil {
		return false
	}
	return *t.TrafficEngineering
}

// GetUnicastImport retrieves the value of the leaf UnicastImport from the NokiaConf_Configure_Groups_Group_Router_Ospf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnicastImport is set, it can
// safely use t.GetUnicastImport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnicastImport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf) GetUnicastImport() bool {
	if t == nil || t.UnicastImport == nil {
		return true
	}
	return *t.UnicastImport
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.AdvertiseRouterCapability == 0 {
		t.AdvertiseRouterCapability = NokiaTypesOspf_AdvertiseRouterCapabilityType_false
	}
	if t.AdvertiseTunnelLink == nil {
		var v bool = false
		t.AdvertiseTunnelLink = &v
	}
	if t.CompatibleRfc1583 == nil {
		var v bool = true
		t.CompatibleRfc1583 = &v
	}
	if t.ExternalPreference == nil {
		var v int32 = 150
		t.ExternalPreference = &v
	}
	if t.LdpOverRsvp == nil {
		var v bool = false
		t.LdpOverRsvp = &v
	}
	if t.LdpSync == nil {
		var v bool = true
		t.LdpSync = &v
	}
	if t.MultiInstance == nil {
		var v bool = false
		t.MultiInstance = &v
	}
	if t.MulticastImport == nil {
		var v bool = false
		t.MulticastImport = &v
	}
	if t.Overload == nil {
		var v bool = false
		t.Overload = &v
	}
	if t.OverloadIncludeExt_1 == nil {
		var v bool = false
		t.OverloadIncludeExt_1 = &v
	}
	if t.OverloadIncludeExt_2 == nil {
		var v bool = false
		t.OverloadIncludeExt_2 = &v
	}
	if t.OverloadIncludeStub == nil {
		var v bool = false
		t.OverloadIncludeStub = &v
	}
	if t.Preference == nil {
		var v int32 = 10
		t.Preference = &v
	}
	if t.ReferenceBandwidth == nil {
		var v uint64 = 100000000
		t.ReferenceBandwidth = &v
	}
	if t.TrafficEngineering == nil {
		var v bool = false
		t.TrafficEngineering = &v
	}
	if t.UnicastImport == nil {
		var v bool = true
		t.UnicastImport = &v
	}
	t.Asbr.PopulateDefaults()
	t.DatabaseExport.PopulateDefaults()
	t.EntropyLabel.PopulateDefaults()
	t.ExportLimit.PopulateDefaults()
	t.ExternalDbOverflow.PopulateDefaults()
	t.FlexibleAlgorithms.PopulateDefaults()
	t.GracefulRestart.PopulateDefaults()
	t.IgpShortcut.PopulateDefaults()
	t.LoopfreeAlternate.PopulateDefaults()
	t.OverloadOnBoot.PopulateDefaults()
	t.RibPriority.PopulateDefaults()
	t.RtrAdvLsaLimit.PopulateDefaults()
	t.SegmentRouting.PopulateDefaults()
	t.Timers.PopulateDefaults()
	t.TrafficEngineeringOptions.PopulateDefaults()
	for _, e := range t.Area {
		e.PopulateDefaults()
	}
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Ospf struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf) Î›ListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"ospf-instance": t.OspfInstance,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf3 represents the /nokia-conf/configure/groups/group/router/ospf3 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf3 struct {
	AdminState                E_NokiaTypesSros_AdminState                                       `path:"admin-state" module:"nokia-conf"`
	AdvertiseRouterCapability E_NokiaTypesOspf_AdvertiseRouterCapabilityType                    `path:"advertise-router-capability" module:"nokia-conf"`
	Area                      map[string]*NokiaConf_Configure_Groups_Group_Router_Ospf3_Area    `path:"area" module:"nokia-conf"`
	Asbr                      *NokiaConf_Configure_Groups_Group_Router_Ospf3_Asbr               `path:"asbr" module:"nokia-conf" yangPresence:"true"`
	DatabaseExport            *NokiaConf_Configure_Groups_Group_Router_Ospf3_DatabaseExport     `path:"database-export" module:"nokia-conf" yangPresence:"true"`
	ExportLimit               *NokiaConf_Configure_Groups_Group_Router_Ospf3_ExportLimit        `path:"export-limit" module:"nokia-conf" yangPresence:"true"`
	ExportPolicy              []string                                                          `path:"export-policy" module:"nokia-conf"`
	ExtendedLsa               E_NokiaTypesOspf_ExtendedLsaMode                                  `path:"extended-lsa" module:"nokia-conf"`
	ExternalDbOverflow        *NokiaConf_Configure_Groups_Group_Router_Ospf3_ExternalDbOverflow `path:"external-db-overflow" module:"nokia-conf" yangPresence:"true"`
	ExternalPreference        *int32                                                            `path:"external-preference" module:"nokia-conf"`
	GracefulRestart           *NokiaConf_Configure_Groups_Group_Router_Ospf3_GracefulRestart    `path:"graceful-restart" module:"nokia-conf" yangPresence:"true"`
	IgpShortcut               *NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut        `path:"igp-shortcut" module:"nokia-conf" yangPresence:"true"`
	ImportPolicy              []string                                                          `path:"import-policy" module:"nokia-conf"`
	LdpSync                   *bool                                                             `path:"ldp-sync" module:"nokia-conf"`
	LoopfreeAlternate         *NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate  `path:"loopfree-alternate" module:"nokia-conf" yangPresence:"true"`
	MulticastImport           *bool                                                             `path:"multicast-import" module:"nokia-conf"`
	OspfInstance              NokiaConf_Configure_Groups_Group_Router_Ospf3_OspfInstance_Union  `path:"ospf-instance" module:"nokia-conf"`
	Overload                  *bool                                                             `path:"overload" module:"nokia-conf"`
	OverloadIncludeExt_1      *bool                                                             `path:"overload-include-ext-1" module:"nokia-conf"`
	OverloadIncludeExt_2      *bool                                                             `path:"overload-include-ext-2" module:"nokia-conf"`
	OverloadIncludeStub       *bool                                                             `path:"overload-include-stub" module:"nokia-conf"`
	OverloadOnBoot            *NokiaConf_Configure_Groups_Group_Router_Ospf3_OverloadOnBoot     `path:"overload-on-boot" module:"nokia-conf" yangPresence:"true"`
	Preference                *int32                                                            `path:"preference" module:"nokia-conf"`
	ReferenceBandwidth        *uint64                                                           `path:"reference-bandwidth" module:"nokia-conf"`
	RibPriority               *NokiaConf_Configure_Groups_Group_Router_Ospf3_RibPriority        `path:"rib-priority" module:"nokia-conf"`
	RouterId                  *string                                                           `path:"router-id" module:"nokia-conf"`
	RtrAdvLsaLimit            *NokiaConf_Configure_Groups_Group_Router_Ospf3_RtrAdvLsaLimit     `path:"rtr-adv-lsa-limit" module:"nokia-conf" yangPresence:"true"`
	SegmentRouting            *NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting     `path:"segment-routing" module:"nokia-conf" yangPresence:"true"`
	Timers                    *NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers             `path:"timers" module:"nokia-conf"`
	UnicastImport             *bool                                                             `path:"unicast-import" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf3 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3) IsYANGGoStruct() {}

// NewArea creates a new entry in the Area list of the
// NokiaConf_Configure_Groups_Group_Router_Ospf3 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3) NewArea(AreaId string) (*NokiaConf_Configure_Groups_Group_Router_Ospf3_Area, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Area == nil {
		t.Area = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Ospf3_Area)
	}

	key := AreaId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Area[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Area", key)
	}

	t.Area[key] = &NokiaConf_Configure_Groups_Group_Router_Ospf3_Area{
		AreaId: &AreaId,
	}

	return t.Area[key], nil
}

// RenameArea renames an entry in the list Area within
// the NokiaConf_Configure_Groups_Group_Router_Ospf3 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3) RenameArea(oldK, newK string) error {
	if _, ok := t.Area[newK]; ok {
		return fmt.Errorf("key %v already exists in Area", newK)
	}

	e, ok := t.Area[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Area", oldK)
	}
	e.AreaId = &newK

	t.Area[newK] = e
	delete(t.Area, oldK)
	return nil
}

// GetOrCreateArea retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ospf3. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3) GetOrCreateArea(AreaId string) *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area {

	key := AreaId

	if v, ok := t.Area[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewArea(AreaId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateArea got unexpected error: %v", err))
	}
	return v
}

// GetArea retrieves the value with the specified key from
// the Area map field of NokiaConf_Configure_Groups_Group_Router_Ospf3. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3) GetArea(AreaId string) *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area {

	if t == nil {
		return nil
	}

	key := AreaId

	if lm, ok := t.Area[key]; ok {
		return lm
	}
	return nil
}

// DeleteArea deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ospf3. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3) DeleteArea(AreaId string) {
	key := AreaId

	delete(t.Area, key)
}

// AppendArea appends the supplied NokiaConf_Configure_Groups_Group_Router_Ospf3_Area struct to the
// list Area of NokiaConf_Configure_Groups_Group_Router_Ospf3. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Ospf3_Area already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3) AppendArea(v *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area) error {
	if v.AreaId == nil {
		return fmt.Errorf("invalid nil key received for AreaId")
	}

	key := *v.AreaId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Area == nil {
		t.Area = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Ospf3_Area)
	}

	if _, ok := t.Area[key]; ok {
		return fmt.Errorf("duplicate key for list Area %v", key)
	}

	t.Area[key] = v
	return nil
}

// GetOrCreateAsbr retrieves the value of the Asbr field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3) GetOrCreateAsbr() *NokiaConf_Configure_Groups_Group_Router_Ospf3_Asbr {
	if t.Asbr != nil {
		return t.Asbr
	}
	t.Asbr = &NokiaConf_Configure_Groups_Group_Router_Ospf3_Asbr{}
	return t.Asbr
}

// GetOrCreateDatabaseExport retrieves the value of the DatabaseExport field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3) GetOrCreateDatabaseExport() *NokiaConf_Configure_Groups_Group_Router_Ospf3_DatabaseExport {
	if t.DatabaseExport != nil {
		return t.DatabaseExport
	}
	t.DatabaseExport = &NokiaConf_Configure_Groups_Group_Router_Ospf3_DatabaseExport{}
	return t.DatabaseExport
}

// GetOrCreateExportLimit retrieves the value of the ExportLimit field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3) GetOrCreateExportLimit() *NokiaConf_Configure_Groups_Group_Router_Ospf3_ExportLimit {
	if t.ExportLimit != nil {
		return t.ExportLimit
	}
	t.ExportLimit = &NokiaConf_Configure_Groups_Group_Router_Ospf3_ExportLimit{}
	return t.ExportLimit
}

// GetOrCreateExternalDbOverflow retrieves the value of the ExternalDbOverflow field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3) GetOrCreateExternalDbOverflow() *NokiaConf_Configure_Groups_Group_Router_Ospf3_ExternalDbOverflow {
	if t.ExternalDbOverflow != nil {
		return t.ExternalDbOverflow
	}
	t.ExternalDbOverflow = &NokiaConf_Configure_Groups_Group_Router_Ospf3_ExternalDbOverflow{}
	return t.ExternalDbOverflow
}

// GetOrCreateGracefulRestart retrieves the value of the GracefulRestart field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3) GetOrCreateGracefulRestart() *NokiaConf_Configure_Groups_Group_Router_Ospf3_GracefulRestart {
	if t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	t.GracefulRestart = &NokiaConf_Configure_Groups_Group_Router_Ospf3_GracefulRestart{}
	return t.GracefulRestart
}

// GetOrCreateIgpShortcut retrieves the value of the IgpShortcut field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3) GetOrCreateIgpShortcut() *NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut {
	if t.IgpShortcut != nil {
		return t.IgpShortcut
	}
	t.IgpShortcut = &NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut{}
	return t.IgpShortcut
}

// GetOrCreateLoopfreeAlternate retrieves the value of the LoopfreeAlternate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3) GetOrCreateLoopfreeAlternate() *NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate {
	if t.LoopfreeAlternate != nil {
		return t.LoopfreeAlternate
	}
	t.LoopfreeAlternate = &NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate{}
	return t.LoopfreeAlternate
}

// GetOrCreateOverloadOnBoot retrieves the value of the OverloadOnBoot field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3) GetOrCreateOverloadOnBoot() *NokiaConf_Configure_Groups_Group_Router_Ospf3_OverloadOnBoot {
	if t.OverloadOnBoot != nil {
		return t.OverloadOnBoot
	}
	t.OverloadOnBoot = &NokiaConf_Configure_Groups_Group_Router_Ospf3_OverloadOnBoot{}
	return t.OverloadOnBoot
}

// GetOrCreateRibPriority retrieves the value of the RibPriority field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3) GetOrCreateRibPriority() *NokiaConf_Configure_Groups_Group_Router_Ospf3_RibPriority {
	if t.RibPriority != nil {
		return t.RibPriority
	}
	t.RibPriority = &NokiaConf_Configure_Groups_Group_Router_Ospf3_RibPriority{}
	return t.RibPriority
}

// GetOrCreateRtrAdvLsaLimit retrieves the value of the RtrAdvLsaLimit field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3) GetOrCreateRtrAdvLsaLimit() *NokiaConf_Configure_Groups_Group_Router_Ospf3_RtrAdvLsaLimit {
	if t.RtrAdvLsaLimit != nil {
		return t.RtrAdvLsaLimit
	}
	t.RtrAdvLsaLimit = &NokiaConf_Configure_Groups_Group_Router_Ospf3_RtrAdvLsaLimit{}
	return t.RtrAdvLsaLimit
}

// GetOrCreateSegmentRouting retrieves the value of the SegmentRouting field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3) GetOrCreateSegmentRouting() *NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting {
	if t.SegmentRouting != nil {
		return t.SegmentRouting
	}
	t.SegmentRouting = &NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting{}
	return t.SegmentRouting
}

// GetOrCreateTimers retrieves the value of the Timers field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3) GetOrCreateTimers() *NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers {
	if t.Timers != nil {
		return t.Timers
	}
	t.Timers = &NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers{}
	return t.Timers
}

// GetAsbr returns the value of the Asbr struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf3. If the receiver or the field Asbr is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3) GetAsbr() *NokiaConf_Configure_Groups_Group_Router_Ospf3_Asbr {
	if t != nil && t.Asbr != nil {
		return t.Asbr
	}
	return nil
}

// GetDatabaseExport returns the value of the DatabaseExport struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf3. If the receiver or the field DatabaseExport is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3) GetDatabaseExport() *NokiaConf_Configure_Groups_Group_Router_Ospf3_DatabaseExport {
	if t != nil && t.DatabaseExport != nil {
		return t.DatabaseExport
	}
	return nil
}

// GetExportLimit returns the value of the ExportLimit struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf3. If the receiver or the field ExportLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3) GetExportLimit() *NokiaConf_Configure_Groups_Group_Router_Ospf3_ExportLimit {
	if t != nil && t.ExportLimit != nil {
		return t.ExportLimit
	}
	return nil
}

// GetExternalDbOverflow returns the value of the ExternalDbOverflow struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf3. If the receiver or the field ExternalDbOverflow is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3) GetExternalDbOverflow() *NokiaConf_Configure_Groups_Group_Router_Ospf3_ExternalDbOverflow {
	if t != nil && t.ExternalDbOverflow != nil {
		return t.ExternalDbOverflow
	}
	return nil
}

// GetGracefulRestart returns the value of the GracefulRestart struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf3. If the receiver or the field GracefulRestart is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3) GetGracefulRestart() *NokiaConf_Configure_Groups_Group_Router_Ospf3_GracefulRestart {
	if t != nil && t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	return nil
}

// GetIgpShortcut returns the value of the IgpShortcut struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf3. If the receiver or the field IgpShortcut is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3) GetIgpShortcut() *NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut {
	if t != nil && t.IgpShortcut != nil {
		return t.IgpShortcut
	}
	return nil
}

// GetLoopfreeAlternate returns the value of the LoopfreeAlternate struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf3. If the receiver or the field LoopfreeAlternate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3) GetLoopfreeAlternate() *NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate {
	if t != nil && t.LoopfreeAlternate != nil {
		return t.LoopfreeAlternate
	}
	return nil
}

// GetOverloadOnBoot returns the value of the OverloadOnBoot struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf3. If the receiver or the field OverloadOnBoot is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3) GetOverloadOnBoot() *NokiaConf_Configure_Groups_Group_Router_Ospf3_OverloadOnBoot {
	if t != nil && t.OverloadOnBoot != nil {
		return t.OverloadOnBoot
	}
	return nil
}

// GetRibPriority returns the value of the RibPriority struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf3. If the receiver or the field RibPriority is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3) GetRibPriority() *NokiaConf_Configure_Groups_Group_Router_Ospf3_RibPriority {
	if t != nil && t.RibPriority != nil {
		return t.RibPriority
	}
	return nil
}

// GetRtrAdvLsaLimit returns the value of the RtrAdvLsaLimit struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf3. If the receiver or the field RtrAdvLsaLimit is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3) GetRtrAdvLsaLimit() *NokiaConf_Configure_Groups_Group_Router_Ospf3_RtrAdvLsaLimit {
	if t != nil && t.RtrAdvLsaLimit != nil {
		return t.RtrAdvLsaLimit
	}
	return nil
}

// GetSegmentRouting returns the value of the SegmentRouting struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf3. If the receiver or the field SegmentRouting is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3) GetSegmentRouting() *NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting {
	if t != nil && t.SegmentRouting != nil {
		return t.SegmentRouting
	}
	return nil
}

// GetTimers returns the value of the Timers struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf3. If the receiver or the field Timers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3) GetTimers() *NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers {
	if t != nil && t.Timers != nil {
		return t.Timers
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Ospf3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAdvertiseRouterCapability retrieves the value of the leaf AdvertiseRouterCapability from the NokiaConf_Configure_Groups_Group_Router_Ospf3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseRouterCapability is set, it can
// safely use t.GetAdvertiseRouterCapability() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseRouterCapability == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3) GetAdvertiseRouterCapability() E_NokiaTypesOspf_AdvertiseRouterCapabilityType {
	if t == nil || t.AdvertiseRouterCapability == 0 {
		return NokiaTypesOspf_AdvertiseRouterCapabilityType_false
	}
	return t.AdvertiseRouterCapability
}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the NokiaConf_Configure_Groups_Group_Router_Ospf3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPolicy is set, it can
// safely use t.GetExportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3) GetExportPolicy() []string {
	if t == nil || t.ExportPolicy == nil {
		return nil
	}
	return t.ExportPolicy
}

// GetExtendedLsa retrieves the value of the leaf ExtendedLsa from the NokiaConf_Configure_Groups_Group_Router_Ospf3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtendedLsa is set, it can
// safely use t.GetExtendedLsa() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtendedLsa == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3) GetExtendedLsa() E_NokiaTypesOspf_ExtendedLsaMode {
	if t == nil || t.ExtendedLsa == 0 {
		return NokiaTypesOspf_ExtendedLsaMode_sparse
	}
	return t.ExtendedLsa
}

// GetExternalPreference retrieves the value of the leaf ExternalPreference from the NokiaConf_Configure_Groups_Group_Router_Ospf3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExternalPreference is set, it can
// safely use t.GetExternalPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExternalPreference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3) GetExternalPreference() int32 {
	if t == nil || t.ExternalPreference == nil {
		return 150
	}
	return *t.ExternalPreference
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Groups_Group_Router_Ospf3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3) GetImportPolicy() []string {
	if t == nil || t.ImportPolicy == nil {
		return nil
	}
	return t.ImportPolicy
}

// GetLdpSync retrieves the value of the leaf LdpSync from the NokiaConf_Configure_Groups_Group_Router_Ospf3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LdpSync is set, it can
// safely use t.GetLdpSync() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LdpSync == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3) GetLdpSync() bool {
	if t == nil || t.LdpSync == nil {
		return true
	}
	return *t.LdpSync
}

// GetMulticastImport retrieves the value of the leaf MulticastImport from the NokiaConf_Configure_Groups_Group_Router_Ospf3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MulticastImport is set, it can
// safely use t.GetMulticastImport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MulticastImport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3) GetMulticastImport() bool {
	if t == nil || t.MulticastImport == nil {
		return false
	}
	return *t.MulticastImport
}

// GetOspfInstance retrieves the value of the leaf OspfInstance from the NokiaConf_Configure_Groups_Group_Router_Ospf3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OspfInstance is set, it can
// safely use t.GetOspfInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OspfInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3) GetOspfInstance() NokiaConf_Configure_Groups_Group_Router_Ospf3_OspfInstance_Union {
	if t == nil || t.OspfInstance == nil {
		return nil
	}
	return t.OspfInstance
}

// GetOverload retrieves the value of the leaf Overload from the NokiaConf_Configure_Groups_Group_Router_Ospf3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Overload is set, it can
// safely use t.GetOverload() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Overload == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3) GetOverload() bool {
	if t == nil || t.Overload == nil {
		return false
	}
	return *t.Overload
}

// GetOverloadIncludeExt_1 retrieves the value of the leaf OverloadIncludeExt_1 from the NokiaConf_Configure_Groups_Group_Router_Ospf3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OverloadIncludeExt_1 is set, it can
// safely use t.GetOverloadIncludeExt_1() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OverloadIncludeExt_1 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3) GetOverloadIncludeExt_1() bool {
	if t == nil || t.OverloadIncludeExt_1 == nil {
		return false
	}
	return *t.OverloadIncludeExt_1
}

// GetOverloadIncludeExt_2 retrieves the value of the leaf OverloadIncludeExt_2 from the NokiaConf_Configure_Groups_Group_Router_Ospf3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OverloadIncludeExt_2 is set, it can
// safely use t.GetOverloadIncludeExt_2() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OverloadIncludeExt_2 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3) GetOverloadIncludeExt_2() bool {
	if t == nil || t.OverloadIncludeExt_2 == nil {
		return false
	}
	return *t.OverloadIncludeExt_2
}

// GetOverloadIncludeStub retrieves the value of the leaf OverloadIncludeStub from the NokiaConf_Configure_Groups_Group_Router_Ospf3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OverloadIncludeStub is set, it can
// safely use t.GetOverloadIncludeStub() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OverloadIncludeStub == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3) GetOverloadIncludeStub() bool {
	if t == nil || t.OverloadIncludeStub == nil {
		return false
	}
	return *t.OverloadIncludeStub
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Groups_Group_Router_Ospf3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3) GetPreference() int32 {
	if t == nil || t.Preference == nil {
		return 10
	}
	return *t.Preference
}

// GetReferenceBandwidth retrieves the value of the leaf ReferenceBandwidth from the NokiaConf_Configure_Groups_Group_Router_Ospf3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReferenceBandwidth is set, it can
// safely use t.GetReferenceBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReferenceBandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3) GetReferenceBandwidth() uint64 {
	if t == nil || t.ReferenceBandwidth == nil {
		return 100000000
	}
	return *t.ReferenceBandwidth
}

// GetRouterId retrieves the value of the leaf RouterId from the NokiaConf_Configure_Groups_Group_Router_Ospf3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterId is set, it can
// safely use t.GetRouterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3) GetRouterId() string {
	if t == nil || t.RouterId == nil {
		return ""
	}
	return *t.RouterId
}

// GetUnicastImport retrieves the value of the leaf UnicastImport from the NokiaConf_Configure_Groups_Group_Router_Ospf3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnicastImport is set, it can
// safely use t.GetUnicastImport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnicastImport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3) GetUnicastImport() bool {
	if t == nil || t.UnicastImport == nil {
		return true
	}
	return *t.UnicastImport
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf3
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.AdvertiseRouterCapability == 0 {
		t.AdvertiseRouterCapability = NokiaTypesOspf_AdvertiseRouterCapabilityType_false
	}
	if t.ExtendedLsa == 0 {
		t.ExtendedLsa = NokiaTypesOspf_ExtendedLsaMode_sparse
	}
	if t.ExternalPreference == nil {
		var v int32 = 150
		t.ExternalPreference = &v
	}
	if t.LdpSync == nil {
		var v bool = true
		t.LdpSync = &v
	}
	if t.MulticastImport == nil {
		var v bool = false
		t.MulticastImport = &v
	}
	if t.Overload == nil {
		var v bool = false
		t.Overload = &v
	}
	if t.OverloadIncludeExt_1 == nil {
		var v bool = false
		t.OverloadIncludeExt_1 = &v
	}
	if t.OverloadIncludeExt_2 == nil {
		var v bool = false
		t.OverloadIncludeExt_2 = &v
	}
	if t.OverloadIncludeStub == nil {
		var v bool = false
		t.OverloadIncludeStub = &v
	}
	if t.Preference == nil {
		var v int32 = 10
		t.Preference = &v
	}
	if t.ReferenceBandwidth == nil {
		var v uint64 = 100000000
		t.ReferenceBandwidth = &v
	}
	if t.UnicastImport == nil {
		var v bool = true
		t.UnicastImport = &v
	}
	t.Asbr.PopulateDefaults()
	t.DatabaseExport.PopulateDefaults()
	t.ExportLimit.PopulateDefaults()
	t.ExternalDbOverflow.PopulateDefaults()
	t.GracefulRestart.PopulateDefaults()
	t.IgpShortcut.PopulateDefaults()
	t.LoopfreeAlternate.PopulateDefaults()
	t.OverloadOnBoot.PopulateDefaults()
	t.RibPriority.PopulateDefaults()
	t.RtrAdvLsaLimit.PopulateDefaults()
	t.SegmentRouting.PopulateDefaults()
	t.Timers.PopulateDefaults()
	for _, e := range t.Area {
		e.PopulateDefaults()
	}
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Ospf3 struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3) Î›ListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"ospf-instance": t.OspfInstance,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf3"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf3.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf3_Area represents the /nokia-conf/configure/groups/group/router/ospf3/area YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf3_Area struct {
	AdvertiseRouterCapability *bool                                                                                                                                  `path:"advertise-router-capability" module:"nokia-conf"`
	AreaId                    *string                                                                                                                                `path:"area-id" module:"nokia-conf"`
	AreaRange                 map[string]*NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_AreaRange                                                               `path:"area-range" module:"nokia-conf"`
	BlackholeAggregate        *bool                                                                                                                                  `path:"blackhole-aggregate" module:"nokia-conf"`
	DatabaseExportExclude     *bool                                                                                                                                  `path:"database-export-exclude" module:"nokia-conf"`
	ExportPolicy              []string                                                                                                                               `path:"export-policy" module:"nokia-conf"`
	ExtendedLsa               E_NokiaTypesOspf_AreaExtendedLsaMode                                                                                                   `path:"extended-lsa" module:"nokia-conf"`
	ImportPolicy              []string                                                                                                                               `path:"import-policy" module:"nokia-conf"`
	Interface                 map[string]*NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface                                                               `path:"interface" module:"nokia-conf"`
	KeyRolloverInterval       *uint32                                                                                                                                `path:"key-rollover-interval" module:"nokia-conf"`
	LoopfreeAlternateExclude  *bool                                                                                                                                  `path:"loopfree-alternate-exclude" module:"nokia-conf"`
	Nssa                      *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa                                                                               `path:"nssa" module:"nokia-conf" yangPresence:"true"`
	Stub                      *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Stub                                                                               `path:"stub" module:"nokia-conf" yangPresence:"true"`
	VirtualLink               map[NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_VirtualLink_Key]*NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_VirtualLink `path:"virtual-link" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf3_Area implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_Area) IsYANGGoStruct() {}

// NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_VirtualLink_Key represents the key for list VirtualLink of element /nokia-conf/configure/groups/group/router/ospf3/area.
type NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_VirtualLink_Key struct {
	RouterId    string `path:"router-id"`
	TransitArea string `path:"transit-area"`
}

// NewAreaRange creates a new entry in the AreaRange list of the
// NokiaConf_Configure_Groups_Group_Router_Ospf3_Area struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area) NewAreaRange(IpPrefixMask string) (*NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_AreaRange, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AreaRange == nil {
		t.AreaRange = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_AreaRange)
	}

	key := IpPrefixMask

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AreaRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AreaRange", key)
	}

	t.AreaRange[key] = &NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_AreaRange{
		IpPrefixMask: &IpPrefixMask,
	}

	return t.AreaRange[key], nil
}

// RenameAreaRange renames an entry in the list AreaRange within
// the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area) RenameAreaRange(oldK, newK string) error {
	if _, ok := t.AreaRange[newK]; ok {
		return fmt.Errorf("key %v already exists in AreaRange", newK)
	}

	e, ok := t.AreaRange[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AreaRange", oldK)
	}
	e.IpPrefixMask = &newK

	t.AreaRange[newK] = e
	delete(t.AreaRange, oldK)
	return nil
}

// GetOrCreateAreaRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ospf3_Area. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area) GetOrCreateAreaRange(IpPrefixMask string) *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_AreaRange {

	key := IpPrefixMask

	if v, ok := t.AreaRange[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAreaRange(IpPrefixMask)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAreaRange got unexpected error: %v", err))
	}
	return v
}

// GetAreaRange retrieves the value with the specified key from
// the AreaRange map field of NokiaConf_Configure_Groups_Group_Router_Ospf3_Area. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area) GetAreaRange(IpPrefixMask string) *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_AreaRange {

	if t == nil {
		return nil
	}

	key := IpPrefixMask

	if lm, ok := t.AreaRange[key]; ok {
		return lm
	}
	return nil
}

// DeleteAreaRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ospf3_Area. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area) DeleteAreaRange(IpPrefixMask string) {
	key := IpPrefixMask

	delete(t.AreaRange, key)
}

// AppendAreaRange appends the supplied NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_AreaRange struct to the
// list AreaRange of NokiaConf_Configure_Groups_Group_Router_Ospf3_Area. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_AreaRange already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area) AppendAreaRange(v *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_AreaRange) error {
	if v.IpPrefixMask == nil {
		return fmt.Errorf("invalid nil key received for IpPrefixMask")
	}

	key := *v.IpPrefixMask

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AreaRange == nil {
		t.AreaRange = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_AreaRange)
	}

	if _, ok := t.AreaRange[key]; ok {
		return fmt.Errorf("duplicate key for list AreaRange %v", key)
	}

	t.AreaRange[key] = v
	return nil
}

// NewInterface creates a new entry in the Interface list of the
// NokiaConf_Configure_Groups_Group_Router_Ospf3_Area struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area) NewInterface(InterfaceName string) (*NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface{
		InterfaceName: &InterfaceName,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.InterfaceName = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ospf3_Area. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area) GetOrCreateInterface(InterfaceName string) *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface {

	key := InterfaceName

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of NokiaConf_Configure_Groups_Group_Router_Ospf3_Area. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area) GetInterface(InterfaceName string) *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface {

	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ospf3_Area. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area) DeleteInterface(InterfaceName string) {
	key := InterfaceName

	delete(t.Interface, key)
}

// AppendInterface appends the supplied NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface struct to the
// list Interface of NokiaConf_Configure_Groups_Group_Router_Ospf3_Area. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area) AppendInterface(v *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// NewVirtualLink creates a new entry in the VirtualLink list of the
// NokiaConf_Configure_Groups_Group_Router_Ospf3_Area struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area) NewVirtualLink(RouterId string, TransitArea string) (*NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_VirtualLink, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VirtualLink == nil {
		t.VirtualLink = make(map[NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_VirtualLink_Key]*NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_VirtualLink)
	}

	key := NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_VirtualLink_Key{
		RouterId:    RouterId,
		TransitArea: TransitArea,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.VirtualLink[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list VirtualLink", key)
	}

	t.VirtualLink[key] = &NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_VirtualLink{
		RouterId:    &RouterId,
		TransitArea: &TransitArea,
	}

	return t.VirtualLink[key], nil
}

// RenameVirtualLink renames an entry in the list VirtualLink within
// the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area) RenameVirtualLink(oldK, newK NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_VirtualLink_Key) error {
	if _, ok := t.VirtualLink[newK]; ok {
		return fmt.Errorf("key %v already exists in VirtualLink", newK)
	}

	e, ok := t.VirtualLink[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in VirtualLink", oldK)
	}
	e.RouterId = &newK.RouterId
	e.TransitArea = &newK.TransitArea

	t.VirtualLink[newK] = e
	delete(t.VirtualLink, oldK)
	return nil
}

// GetOrCreateVirtualLink retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ospf3_Area. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area) GetOrCreateVirtualLink(RouterId string, TransitArea string) *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_VirtualLink {

	key := NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_VirtualLink_Key{
		RouterId:    RouterId,
		TransitArea: TransitArea,
	}

	if v, ok := t.VirtualLink[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVirtualLink(RouterId, TransitArea)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVirtualLink got unexpected error: %v", err))
	}
	return v
}

// GetVirtualLink retrieves the value with the specified key from
// the VirtualLink map field of NokiaConf_Configure_Groups_Group_Router_Ospf3_Area. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area) GetVirtualLink(RouterId string, TransitArea string) *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_VirtualLink {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_VirtualLink_Key{
		RouterId:    RouterId,
		TransitArea: TransitArea,
	}

	if lm, ok := t.VirtualLink[key]; ok {
		return lm
	}
	return nil
}

// DeleteVirtualLink deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ospf3_Area. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area) DeleteVirtualLink(RouterId string, TransitArea string) {
	key := NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_VirtualLink_Key{
		RouterId:    RouterId,
		TransitArea: TransitArea,
	}

	delete(t.VirtualLink, key)
}

// AppendVirtualLink appends the supplied NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_VirtualLink struct to the
// list VirtualLink of NokiaConf_Configure_Groups_Group_Router_Ospf3_Area. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_VirtualLink already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area) AppendVirtualLink(v *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_VirtualLink) error {
	if v.RouterId == nil {
		return fmt.Errorf("invalid nil key for RouterId")
	}

	if v.TransitArea == nil {
		return fmt.Errorf("invalid nil key for TransitArea")
	}

	key := NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_VirtualLink_Key{
		RouterId:    *v.RouterId,
		TransitArea: *v.TransitArea,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VirtualLink == nil {
		t.VirtualLink = make(map[NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_VirtualLink_Key]*NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_VirtualLink)
	}

	if _, ok := t.VirtualLink[key]; ok {
		return fmt.Errorf("duplicate key for list VirtualLink %v", key)
	}

	t.VirtualLink[key] = v
	return nil
}

// GetOrCreateNssa retrieves the value of the Nssa field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area) GetOrCreateNssa() *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa {
	if t.Nssa != nil {
		return t.Nssa
	}
	t.Nssa = &NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa{}
	return t.Nssa
}

// GetOrCreateStub retrieves the value of the Stub field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area) GetOrCreateStub() *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Stub {
	if t.Stub != nil {
		return t.Stub
	}
	t.Stub = &NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Stub{}
	return t.Stub
}

// GetNssa returns the value of the Nssa struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf3_Area. If the receiver or the field Nssa is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area) GetNssa() *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa {
	if t != nil && t.Nssa != nil {
		return t.Nssa
	}
	return nil
}

// GetStub returns the value of the Stub struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf3_Area. If the receiver or the field Stub is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area) GetStub() *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Stub {
	if t != nil && t.Stub != nil {
		return t.Stub
	}
	return nil
}

// GetAdvertiseRouterCapability retrieves the value of the leaf AdvertiseRouterCapability from the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseRouterCapability is set, it can
// safely use t.GetAdvertiseRouterCapability() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseRouterCapability == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area) GetAdvertiseRouterCapability() bool {
	if t == nil || t.AdvertiseRouterCapability == nil {
		return true
	}
	return *t.AdvertiseRouterCapability
}

// GetAreaId retrieves the value of the leaf AreaId from the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AreaId is set, it can
// safely use t.GetAreaId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AreaId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area) GetAreaId() string {
	if t == nil || t.AreaId == nil {
		return ""
	}
	return *t.AreaId
}

// GetBlackholeAggregate retrieves the value of the leaf BlackholeAggregate from the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BlackholeAggregate is set, it can
// safely use t.GetBlackholeAggregate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BlackholeAggregate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area) GetBlackholeAggregate() bool {
	if t == nil || t.BlackholeAggregate == nil {
		return true
	}
	return *t.BlackholeAggregate
}

// GetDatabaseExportExclude retrieves the value of the leaf DatabaseExportExclude from the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DatabaseExportExclude is set, it can
// safely use t.GetDatabaseExportExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DatabaseExportExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area) GetDatabaseExportExclude() bool {
	if t == nil || t.DatabaseExportExclude == nil {
		return false
	}
	return *t.DatabaseExportExclude
}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPolicy is set, it can
// safely use t.GetExportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area) GetExportPolicy() []string {
	if t == nil || t.ExportPolicy == nil {
		return nil
	}
	return t.ExportPolicy
}

// GetExtendedLsa retrieves the value of the leaf ExtendedLsa from the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtendedLsa is set, it can
// safely use t.GetExtendedLsa() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtendedLsa == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area) GetExtendedLsa() E_NokiaTypesOspf_AreaExtendedLsaMode {
	if t == nil || t.ExtendedLsa == 0 {
		return 0
	}
	return t.ExtendedLsa
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area) GetImportPolicy() []string {
	if t == nil || t.ImportPolicy == nil {
		return nil
	}
	return t.ImportPolicy
}

// GetKeyRolloverInterval retrieves the value of the leaf KeyRolloverInterval from the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeyRolloverInterval is set, it can
// safely use t.GetKeyRolloverInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeyRolloverInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area) GetKeyRolloverInterval() uint32 {
	if t == nil || t.KeyRolloverInterval == nil {
		return 10
	}
	return *t.KeyRolloverInterval
}

// GetLoopfreeAlternateExclude retrieves the value of the leaf LoopfreeAlternateExclude from the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoopfreeAlternateExclude is set, it can
// safely use t.GetLoopfreeAlternateExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoopfreeAlternateExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area) GetLoopfreeAlternateExclude() bool {
	if t == nil || t.LoopfreeAlternateExclude == nil {
		return false
	}
	return *t.LoopfreeAlternateExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdvertiseRouterCapability == nil {
		var v bool = true
		t.AdvertiseRouterCapability = &v
	}
	if t.BlackholeAggregate == nil {
		var v bool = true
		t.BlackholeAggregate = &v
	}
	if t.DatabaseExportExclude == nil {
		var v bool = false
		t.DatabaseExportExclude = &v
	}
	if t.KeyRolloverInterval == nil {
		var v uint32 = 10
		t.KeyRolloverInterval = &v
	}
	if t.LoopfreeAlternateExclude == nil {
		var v bool = false
		t.LoopfreeAlternateExclude = &v
	}
	t.Nssa.PopulateDefaults()
	t.Stub.PopulateDefaults()
	for _, e := range t.AreaRange {
		e.PopulateDefaults()
	}
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
	for _, e := range t.VirtualLink {
		e.PopulateDefaults()
	}
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.AreaId == nil {
		return nil, fmt.Errorf("nil value for key AreaId")
	}

	return map[string]interface{}{
		"area-id": *t.AreaId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf3_Area"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf3_Area.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_Area) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_AreaRange represents the /nokia-conf/configure/groups/group/router/ospf3/area/area-range YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_AreaRange struct {
	Advertise    *bool   `path:"advertise" module:"nokia-conf"`
	IpPrefixMask *string `path:"ip-prefix-mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_AreaRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_AreaRange) IsYANGGoStruct() {}

// GetAdvertise retrieves the value of the leaf Advertise from the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_AreaRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Advertise is set, it can
// safely use t.GetAdvertise() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Advertise == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_AreaRange) GetAdvertise() bool {
	if t == nil || t.Advertise == nil {
		return true
	}
	return *t.Advertise
}

// GetIpPrefixMask retrieves the value of the leaf IpPrefixMask from the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_AreaRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefixMask is set, it can
// safely use t.GetIpPrefixMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefixMask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_AreaRange) GetIpPrefixMask() string {
	if t == nil || t.IpPrefixMask == nil {
		return ""
	}
	return *t.IpPrefixMask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_AreaRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_AreaRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Advertise == nil {
		var v bool = true
		t.Advertise = &v
	}
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_AreaRange struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_AreaRange) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefixMask == nil {
		return nil, fmt.Errorf("nil value for key IpPrefixMask")
	}

	return map[string]interface{}{
		"ip-prefix-mask": *t.IpPrefixMask,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_AreaRange) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_AreaRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_AreaRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_AreaRange) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_AreaRange.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_AreaRange) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface represents the /nokia-conf/configure/groups/group/router/ospf3/area/interface YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface struct {
	AdminState                E_NokiaTypesSros_AdminState                                                       `path:"admin-state" module:"nokia-conf"`
	AdvertiseRouterCapability *bool                                                                             `path:"advertise-router-capability" module:"nokia-conf"`
	Authentication            *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_Authentication      `path:"authentication" module:"nokia-conf" yangPresence:"true"`
	BfdLiveness               *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_BfdLiveness         `path:"bfd-liveness" module:"nokia-conf" yangPresence:"true"`
	DeadInterval              *uint32                                                                           `path:"dead-interval" module:"nokia-conf"`
	HelloInterval             *uint32                                                                           `path:"hello-interval" module:"nokia-conf"`
	InterfaceName             *string                                                                           `path:"interface-name" module:"nokia-conf"`
	InterfaceType             E_NokiaTypesOspf_InterfaceType                                                    `path:"interface-type" module:"nokia-conf"`
	LoadBalancingWeight       *uint32                                                                           `path:"load-balancing-weight" module:"nokia-conf"`
	LoopfreeAlternate         *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_LoopfreeAlternate   `path:"loopfree-alternate" module:"nokia-conf"`
	LsaFilterOut              E_NokiaTypesOspf_LsaFilterOut                                                     `path:"lsa-filter-out" module:"nokia-conf"`
	Metric                    *uint32                                                                           `path:"metric" module:"nokia-conf"`
	Mtu                       *uint32                                                                           `path:"mtu" module:"nokia-conf"`
	Neighbor                  map[string]*NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_Neighbor `path:"neighbor" module:"nokia-conf"`
	NodeSid                   *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_NodeSid             `path:"node-sid" module:"nokia-conf" yangPresence:"true"`
	Passive                   *bool                                                                             `path:"passive" module:"nokia-conf"`
	PollInterval              *uint32                                                                           `path:"poll-interval" module:"nokia-conf"`
	Priority                  *uint16                                                                           `path:"priority" module:"nokia-conf"`
	RetransmitInterval        *uint32                                                                           `path:"retransmit-interval" module:"nokia-conf"`
	RibPriority               E_NokiaTypesOspf_RibPriority                                                      `path:"rib-priority" module:"nokia-conf"`
	SidProtection             *bool                                                                             `path:"sid-protection" module:"nokia-conf"`
	TransitDelay              *uint32                                                                           `path:"transit-delay" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface) IsYANGGoStruct() {}

// NewNeighbor creates a new entry in the Neighbor list of the
// NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface) NewNeighbor(Address string) (*NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_Neighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_Neighbor)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_Neighbor{
		Address: &Address,
	}

	return t.Neighbor[key], nil
}

// RenameNeighbor renames an entry in the list Neighbor within
// the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface) RenameNeighbor(oldK, newK string) error {
	if _, ok := t.Neighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in Neighbor", newK)
	}

	e, ok := t.Neighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Neighbor", oldK)
	}
	e.Address = &newK

	t.Neighbor[newK] = e
	delete(t.Neighbor, oldK)
	return nil
}

// GetOrCreateNeighbor retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface) GetOrCreateNeighbor(Address string) *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_Neighbor {

	key := Address

	if v, ok := t.Neighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNeighbor(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetNeighbor retrieves the value with the specified key from
// the Neighbor map field of NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface) GetNeighbor(Address string) *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_Neighbor {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.Neighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteNeighbor deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface) DeleteNeighbor(Address string) {
	key := Address

	delete(t.Neighbor, key)
}

// AppendNeighbor appends the supplied NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_Neighbor struct to the
// list Neighbor of NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_Neighbor already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface) AppendNeighbor(v *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_Neighbor) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_Neighbor)
	}

	if _, ok := t.Neighbor[key]; ok {
		return fmt.Errorf("duplicate key for list Neighbor %v", key)
	}

	t.Neighbor[key] = v
	return nil
}

// GetOrCreateAuthentication retrieves the value of the Authentication field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface) GetOrCreateAuthentication() *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_Authentication {
	if t.Authentication != nil {
		return t.Authentication
	}
	t.Authentication = &NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_Authentication{}
	return t.Authentication
}

// GetOrCreateBfdLiveness retrieves the value of the BfdLiveness field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface) GetOrCreateBfdLiveness() *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_BfdLiveness {
	if t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	t.BfdLiveness = &NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_BfdLiveness{}
	return t.BfdLiveness
}

// GetOrCreateLoopfreeAlternate retrieves the value of the LoopfreeAlternate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface) GetOrCreateLoopfreeAlternate() *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_LoopfreeAlternate {
	if t.LoopfreeAlternate != nil {
		return t.LoopfreeAlternate
	}
	t.LoopfreeAlternate = &NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_LoopfreeAlternate{}
	return t.LoopfreeAlternate
}

// GetOrCreateNodeSid retrieves the value of the NodeSid field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface) GetOrCreateNodeSid() *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_NodeSid {
	if t.NodeSid != nil {
		return t.NodeSid
	}
	t.NodeSid = &NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_NodeSid{}
	return t.NodeSid
}

// GetAuthentication returns the value of the Authentication struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface. If the receiver or the field Authentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface) GetAuthentication() *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_Authentication {
	if t != nil && t.Authentication != nil {
		return t.Authentication
	}
	return nil
}

// GetBfdLiveness returns the value of the BfdLiveness struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface. If the receiver or the field BfdLiveness is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface) GetBfdLiveness() *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_BfdLiveness {
	if t != nil && t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	return nil
}

// GetLoopfreeAlternate returns the value of the LoopfreeAlternate struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface. If the receiver or the field LoopfreeAlternate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface) GetLoopfreeAlternate() *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_LoopfreeAlternate {
	if t != nil && t.LoopfreeAlternate != nil {
		return t.LoopfreeAlternate
	}
	return nil
}

// GetNodeSid returns the value of the NodeSid struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface. If the receiver or the field NodeSid is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface) GetNodeSid() *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_NodeSid {
	if t != nil && t.NodeSid != nil {
		return t.NodeSid
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetAdvertiseRouterCapability retrieves the value of the leaf AdvertiseRouterCapability from the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseRouterCapability is set, it can
// safely use t.GetAdvertiseRouterCapability() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseRouterCapability == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface) GetAdvertiseRouterCapability() bool {
	if t == nil || t.AdvertiseRouterCapability == nil {
		return true
	}
	return *t.AdvertiseRouterCapability
}

// GetDeadInterval retrieves the value of the leaf DeadInterval from the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DeadInterval is set, it can
// safely use t.GetDeadInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DeadInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface) GetDeadInterval() uint32 {
	if t == nil || t.DeadInterval == nil {
		return 0
	}
	return *t.DeadInterval
}

// GetHelloInterval retrieves the value of the leaf HelloInterval from the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloInterval is set, it can
// safely use t.GetHelloInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface) GetHelloInterval() uint32 {
	if t == nil || t.HelloInterval == nil {
		return 10
	}
	return *t.HelloInterval
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetInterfaceType retrieves the value of the leaf InterfaceType from the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceType is set, it can
// safely use t.GetInterfaceType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface) GetInterfaceType() E_NokiaTypesOspf_InterfaceType {
	if t == nil || t.InterfaceType == 0 {
		return 0
	}
	return t.InterfaceType
}

// GetLoadBalancingWeight retrieves the value of the leaf LoadBalancingWeight from the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoadBalancingWeight is set, it can
// safely use t.GetLoadBalancingWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoadBalancingWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface) GetLoadBalancingWeight() uint32 {
	if t == nil || t.LoadBalancingWeight == nil {
		return 0
	}
	return *t.LoadBalancingWeight
}

// GetLsaFilterOut retrieves the value of the leaf LsaFilterOut from the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LsaFilterOut is set, it can
// safely use t.GetLsaFilterOut() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LsaFilterOut == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface) GetLsaFilterOut() E_NokiaTypesOspf_LsaFilterOut {
	if t == nil || t.LsaFilterOut == 0 {
		return NokiaTypesOspf_LsaFilterOut_none
	}
	return t.LsaFilterOut
}

// GetMetric retrieves the value of the leaf Metric from the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Metric is set, it can
// safely use t.GetMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Metric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface) GetMetric() uint32 {
	if t == nil || t.Metric == nil {
		return 0
	}
	return *t.Metric
}

// GetMtu retrieves the value of the leaf Mtu from the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mtu is set, it can
// safely use t.GetMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface) GetMtu() uint32 {
	if t == nil || t.Mtu == nil {
		return 0
	}
	return *t.Mtu
}

// GetPassive retrieves the value of the leaf Passive from the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Passive is set, it can
// safely use t.GetPassive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Passive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface) GetPassive() bool {
	if t == nil || t.Passive == nil {
		return false
	}
	return *t.Passive
}

// GetPollInterval retrieves the value of the leaf PollInterval from the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PollInterval is set, it can
// safely use t.GetPollInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PollInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface) GetPollInterval() uint32 {
	if t == nil || t.PollInterval == nil {
		return 120
	}
	return *t.PollInterval
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface) GetPriority() uint16 {
	if t == nil || t.Priority == nil {
		return 1
	}
	return *t.Priority
}

// GetRetransmitInterval retrieves the value of the leaf RetransmitInterval from the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetransmitInterval is set, it can
// safely use t.GetRetransmitInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetransmitInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface) GetRetransmitInterval() uint32 {
	if t == nil || t.RetransmitInterval == nil {
		return 5
	}
	return *t.RetransmitInterval
}

// GetRibPriority retrieves the value of the leaf RibPriority from the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RibPriority is set, it can
// safely use t.GetRibPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RibPriority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface) GetRibPriority() E_NokiaTypesOspf_RibPriority {
	if t == nil || t.RibPriority == 0 {
		return 0
	}
	return t.RibPriority
}

// GetSidProtection retrieves the value of the leaf SidProtection from the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SidProtection is set, it can
// safely use t.GetSidProtection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SidProtection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface) GetSidProtection() bool {
	if t == nil || t.SidProtection == nil {
		return true
	}
	return *t.SidProtection
}

// GetTransitDelay retrieves the value of the leaf TransitDelay from the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransitDelay is set, it can
// safely use t.GetTransitDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransitDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface) GetTransitDelay() uint32 {
	if t == nil || t.TransitDelay == nil {
		return 1
	}
	return *t.TransitDelay
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.AdvertiseRouterCapability == nil {
		var v bool = true
		t.AdvertiseRouterCapability = &v
	}
	if t.HelloInterval == nil {
		var v uint32 = 10
		t.HelloInterval = &v
	}
	if t.LsaFilterOut == 0 {
		t.LsaFilterOut = NokiaTypesOspf_LsaFilterOut_none
	}
	if t.PollInterval == nil {
		var v uint32 = 120
		t.PollInterval = &v
	}
	if t.Priority == nil {
		var v uint16 = 1
		t.Priority = &v
	}
	if t.RetransmitInterval == nil {
		var v uint32 = 5
		t.RetransmitInterval = &v
	}
	if t.SidProtection == nil {
		var v bool = true
		t.SidProtection = &v
	}
	if t.TransitDelay == nil {
		var v uint32 = 1
		t.TransitDelay = &v
	}
	t.Authentication.PopulateDefaults()
	t.BfdLiveness.PopulateDefaults()
	t.LoopfreeAlternate.PopulateDefaults()
	t.NodeSid.PopulateDefaults()
	for _, e := range t.Neighbor {
		e.PopulateDefaults()
	}
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_Authentication represents the /nokia-conf/configure/groups/group/router/ospf3/area/interface/authentication YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_Authentication struct {
	Inbound  *string `path:"inbound" module:"nokia-conf"`
	Outbound *string `path:"outbound" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_Authentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_Authentication) IsYANGGoStruct() {
}

// GetInbound retrieves the value of the leaf Inbound from the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_Authentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Inbound is set, it can
// safely use t.GetInbound() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Inbound == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_Authentication) GetInbound() string {
	if t == nil || t.Inbound == nil {
		return ""
	}
	return *t.Inbound
}

// GetOutbound retrieves the value of the leaf Outbound from the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_Authentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Outbound is set, it can
// safely use t.GetOutbound() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Outbound == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_Authentication) GetOutbound() string {
	if t == nil || t.Outbound == nil {
		return ""
	}
	return *t.Outbound
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_Authentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_Authentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_Authentication) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_Authentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_Authentication) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_Authentication) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_Authentication.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_Authentication) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_BfdLiveness represents the /nokia-conf/configure/groups/group/router/ospf3/area/interface/bfd-liveness YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_BfdLiveness struct {
	RemainDownOnFailure *bool `path:"remain-down-on-failure" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_BfdLiveness implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_BfdLiveness) IsYANGGoStruct() {}

// GetRemainDownOnFailure retrieves the value of the leaf RemainDownOnFailure from the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemainDownOnFailure is set, it can
// safely use t.GetRemainDownOnFailure() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemainDownOnFailure == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_BfdLiveness) GetRemainDownOnFailure() bool {
	if t == nil || t.RemainDownOnFailure == nil {
		return false
	}
	return *t.RemainDownOnFailure
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_BfdLiveness
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_BfdLiveness) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RemainDownOnFailure == nil {
		var v bool = false
		t.RemainDownOnFailure = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_BfdLiveness) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_BfdLiveness"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_BfdLiveness) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_BfdLiveness) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_BfdLiveness.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_BfdLiveness) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_LoopfreeAlternate represents the /nokia-conf/configure/groups/group/router/ospf3/area/interface/loopfree-alternate YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_LoopfreeAlternate struct {
	Exclude   *bool                                                                                     `path:"exclude" module:"nokia-conf"`
	PolicyMap *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_LoopfreeAlternate_PolicyMap `path:"policy-map" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_LoopfreeAlternate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_LoopfreeAlternate) IsYANGGoStruct() {
}

// GetOrCreatePolicyMap retrieves the value of the PolicyMap field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_LoopfreeAlternate) GetOrCreatePolicyMap() *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_LoopfreeAlternate_PolicyMap {
	if t.PolicyMap != nil {
		return t.PolicyMap
	}
	t.PolicyMap = &NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_LoopfreeAlternate_PolicyMap{}
	return t.PolicyMap
}

// GetPolicyMap returns the value of the PolicyMap struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_LoopfreeAlternate. If the receiver or the field PolicyMap is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_LoopfreeAlternate) GetPolicyMap() *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_LoopfreeAlternate_PolicyMap {
	if t != nil && t.PolicyMap != nil {
		return t.PolicyMap
	}
	return nil
}

// GetExclude retrieves the value of the leaf Exclude from the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_LoopfreeAlternate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Exclude is set, it can
// safely use t.GetExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Exclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_LoopfreeAlternate) GetExclude() bool {
	if t == nil || t.Exclude == nil {
		return false
	}
	return *t.Exclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_LoopfreeAlternate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_LoopfreeAlternate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Exclude == nil {
		var v bool = false
		t.Exclude = &v
	}
	t.PolicyMap.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_LoopfreeAlternate) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_LoopfreeAlternate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_LoopfreeAlternate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_LoopfreeAlternate) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_LoopfreeAlternate.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_LoopfreeAlternate) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_LoopfreeAlternate_PolicyMap represents the /nokia-conf/configure/groups/group/router/ospf3/area/interface/loopfree-alternate/policy-map YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_LoopfreeAlternate_PolicyMap struct {
	RouteNhTemplate *string `path:"route-nh-template" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_LoopfreeAlternate_PolicyMap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_LoopfreeAlternate_PolicyMap) IsYANGGoStruct() {
}

// GetRouteNhTemplate retrieves the value of the leaf RouteNhTemplate from the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_LoopfreeAlternate_PolicyMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteNhTemplate is set, it can
// safely use t.GetRouteNhTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteNhTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_LoopfreeAlternate_PolicyMap) GetRouteNhTemplate() string {
	if t == nil || t.RouteNhTemplate == nil {
		return ""
	}
	return *t.RouteNhTemplate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_LoopfreeAlternate_PolicyMap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_LoopfreeAlternate_PolicyMap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_LoopfreeAlternate_PolicyMap) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_LoopfreeAlternate_PolicyMap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_LoopfreeAlternate_PolicyMap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_LoopfreeAlternate_PolicyMap) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_LoopfreeAlternate_PolicyMap.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_LoopfreeAlternate_PolicyMap) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_Neighbor represents the /nokia-conf/configure/groups/group/router/ospf3/area/interface/neighbor YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_Neighbor struct {
	Address *string `path:"address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_Neighbor) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_Neighbor) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_Neighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_Neighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_Neighbor struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_Neighbor) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_Neighbor) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_Neighbor) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_Neighbor) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_Neighbor.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_Neighbor) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_NodeSid represents the /nokia-conf/configure/groups/group/router/ospf3/area/interface/node-sid YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_NodeSid struct {
	ClearNFlag *bool  `path:"clear-n-flag" module:"nokia-conf"`
	Index      *int64 `path:"index" module:"nokia-conf"`
	Label      *int64 `path:"label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_NodeSid implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_NodeSid) IsYANGGoStruct() {}

// GetClearNFlag retrieves the value of the leaf ClearNFlag from the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_NodeSid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClearNFlag is set, it can
// safely use t.GetClearNFlag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClearNFlag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_NodeSid) GetClearNFlag() bool {
	if t == nil || t.ClearNFlag == nil {
		return false
	}
	return *t.ClearNFlag
}

// GetIndex retrieves the value of the leaf Index from the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_NodeSid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_NodeSid) GetIndex() int64 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetLabel retrieves the value of the leaf Label from the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_NodeSid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Label is set, it can
// safely use t.GetLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Label == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_NodeSid) GetLabel() int64 {
	if t == nil || t.Label == nil {
		return 0
	}
	return *t.Label
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_NodeSid
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_NodeSid) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ClearNFlag == nil {
		var v bool = false
		t.ClearNFlag = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_NodeSid) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_NodeSid"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_NodeSid) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_NodeSid) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_NodeSid.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Interface_NodeSid) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa represents the /nokia-conf/configure/groups/group/router/ospf3/area/nssa YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa struct {
	AreaRange             map[string]*NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa_AreaRange  `path:"area-range" module:"nokia-conf"`
	OriginateDefaultRoute *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa_OriginateDefaultRoute `path:"originate-default-route" module:"nokia-conf" yangPresence:"true"`
	RedistributeExternal  *bool                                                                          `path:"redistribute-external" module:"nokia-conf"`
	Summaries             *bool                                                                          `path:"summaries" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa) IsYANGGoStruct() {}

// NewAreaRange creates a new entry in the AreaRange list of the
// NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa) NewAreaRange(IpPrefixMask string) (*NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa_AreaRange, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AreaRange == nil {
		t.AreaRange = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa_AreaRange)
	}

	key := IpPrefixMask

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AreaRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AreaRange", key)
	}

	t.AreaRange[key] = &NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa_AreaRange{
		IpPrefixMask: &IpPrefixMask,
	}

	return t.AreaRange[key], nil
}

// RenameAreaRange renames an entry in the list AreaRange within
// the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa) RenameAreaRange(oldK, newK string) error {
	if _, ok := t.AreaRange[newK]; ok {
		return fmt.Errorf("key %v already exists in AreaRange", newK)
	}

	e, ok := t.AreaRange[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AreaRange", oldK)
	}
	e.IpPrefixMask = &newK

	t.AreaRange[newK] = e
	delete(t.AreaRange, oldK)
	return nil
}

// GetOrCreateAreaRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa) GetOrCreateAreaRange(IpPrefixMask string) *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa_AreaRange {

	key := IpPrefixMask

	if v, ok := t.AreaRange[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAreaRange(IpPrefixMask)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAreaRange got unexpected error: %v", err))
	}
	return v
}

// GetAreaRange retrieves the value with the specified key from
// the AreaRange map field of NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa) GetAreaRange(IpPrefixMask string) *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa_AreaRange {

	if t == nil {
		return nil
	}

	key := IpPrefixMask

	if lm, ok := t.AreaRange[key]; ok {
		return lm
	}
	return nil
}

// DeleteAreaRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa) DeleteAreaRange(IpPrefixMask string) {
	key := IpPrefixMask

	delete(t.AreaRange, key)
}

// AppendAreaRange appends the supplied NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa_AreaRange struct to the
// list AreaRange of NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa_AreaRange already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa) AppendAreaRange(v *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa_AreaRange) error {
	if v.IpPrefixMask == nil {
		return fmt.Errorf("invalid nil key received for IpPrefixMask")
	}

	key := *v.IpPrefixMask

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AreaRange == nil {
		t.AreaRange = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa_AreaRange)
	}

	if _, ok := t.AreaRange[key]; ok {
		return fmt.Errorf("duplicate key for list AreaRange %v", key)
	}

	t.AreaRange[key] = v
	return nil
}

// GetOrCreateOriginateDefaultRoute retrieves the value of the OriginateDefaultRoute field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa) GetOrCreateOriginateDefaultRoute() *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa_OriginateDefaultRoute {
	if t.OriginateDefaultRoute != nil {
		return t.OriginateDefaultRoute
	}
	t.OriginateDefaultRoute = &NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa_OriginateDefaultRoute{}
	return t.OriginateDefaultRoute
}

// GetOriginateDefaultRoute returns the value of the OriginateDefaultRoute struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa. If the receiver or the field OriginateDefaultRoute is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa) GetOriginateDefaultRoute() *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa_OriginateDefaultRoute {
	if t != nil && t.OriginateDefaultRoute != nil {
		return t.OriginateDefaultRoute
	}
	return nil
}

// GetRedistributeExternal retrieves the value of the leaf RedistributeExternal from the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RedistributeExternal is set, it can
// safely use t.GetRedistributeExternal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RedistributeExternal == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa) GetRedistributeExternal() bool {
	if t == nil || t.RedistributeExternal == nil {
		return true
	}
	return *t.RedistributeExternal
}

// GetSummaries retrieves the value of the leaf Summaries from the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Summaries is set, it can
// safely use t.GetSummaries() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Summaries == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa) GetSummaries() bool {
	if t == nil || t.Summaries == nil {
		return true
	}
	return *t.Summaries
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RedistributeExternal == nil {
		var v bool = true
		t.RedistributeExternal = &v
	}
	if t.Summaries == nil {
		var v bool = true
		t.Summaries = &v
	}
	t.OriginateDefaultRoute.PopulateDefaults()
	for _, e := range t.AreaRange {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa_AreaRange represents the /nokia-conf/configure/groups/group/router/ospf3/area/nssa/area-range YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa_AreaRange struct {
	Advertise    *bool   `path:"advertise" module:"nokia-conf"`
	IpPrefixMask *string `path:"ip-prefix-mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa_AreaRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa_AreaRange) IsYANGGoStruct() {}

// GetAdvertise retrieves the value of the leaf Advertise from the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa_AreaRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Advertise is set, it can
// safely use t.GetAdvertise() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Advertise == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa_AreaRange) GetAdvertise() bool {
	if t == nil || t.Advertise == nil {
		return true
	}
	return *t.Advertise
}

// GetIpPrefixMask retrieves the value of the leaf IpPrefixMask from the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa_AreaRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefixMask is set, it can
// safely use t.GetIpPrefixMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefixMask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa_AreaRange) GetIpPrefixMask() string {
	if t == nil || t.IpPrefixMask == nil {
		return ""
	}
	return *t.IpPrefixMask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa_AreaRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa_AreaRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Advertise == nil {
		var v bool = true
		t.Advertise = &v
	}
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa_AreaRange struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa_AreaRange) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefixMask == nil {
		return nil, fmt.Errorf("nil value for key IpPrefixMask")
	}

	return map[string]interface{}{
		"ip-prefix-mask": *t.IpPrefixMask,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa_AreaRange) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa_AreaRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa_AreaRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa_AreaRange) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa_AreaRange.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa_AreaRange) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa_OriginateDefaultRoute represents the /nokia-conf/configure/groups/group/router/ospf3/area/nssa/originate-default-route YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa_OriginateDefaultRoute struct {
	AdjacencyCheck *bool `path:"adjacency-check" module:"nokia-conf"`
	TypeNssa       *bool `path:"type-nssa" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa_OriginateDefaultRoute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa_OriginateDefaultRoute) IsYANGGoStruct() {
}

// GetAdjacencyCheck retrieves the value of the leaf AdjacencyCheck from the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa_OriginateDefaultRoute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdjacencyCheck is set, it can
// safely use t.GetAdjacencyCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdjacencyCheck == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa_OriginateDefaultRoute) GetAdjacencyCheck() bool {
	if t == nil || t.AdjacencyCheck == nil {
		return true
	}
	return *t.AdjacencyCheck
}

// GetTypeNssa retrieves the value of the leaf TypeNssa from the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa_OriginateDefaultRoute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TypeNssa is set, it can
// safely use t.GetTypeNssa() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TypeNssa == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa_OriginateDefaultRoute) GetTypeNssa() bool {
	if t == nil || t.TypeNssa == nil {
		return false
	}
	return *t.TypeNssa
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa_OriginateDefaultRoute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa_OriginateDefaultRoute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdjacencyCheck == nil {
		var v bool = true
		t.AdjacencyCheck = &v
	}
	if t.TypeNssa == nil {
		var v bool = false
		t.TypeNssa = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa_OriginateDefaultRoute) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa_OriginateDefaultRoute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa_OriginateDefaultRoute) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa_OriginateDefaultRoute) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa_OriginateDefaultRoute.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Nssa_OriginateDefaultRoute) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Stub represents the /nokia-conf/configure/groups/group/router/ospf3/area/stub YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Stub struct {
	DefaultMetric *uint32 `path:"default-metric" module:"nokia-conf"`
	Summaries     *bool   `path:"summaries" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Stub implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Stub) IsYANGGoStruct() {}

// GetDefaultMetric retrieves the value of the leaf DefaultMetric from the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Stub
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultMetric is set, it can
// safely use t.GetDefaultMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultMetric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Stub) GetDefaultMetric() uint32 {
	if t == nil || t.DefaultMetric == nil {
		return 1
	}
	return *t.DefaultMetric
}

// GetSummaries retrieves the value of the leaf Summaries from the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Stub
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Summaries is set, it can
// safely use t.GetSummaries() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Summaries == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Stub) GetSummaries() bool {
	if t == nil || t.Summaries == nil {
		return true
	}
	return *t.Summaries
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Stub
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Stub) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DefaultMetric == nil {
		var v uint32 = 1
		t.DefaultMetric = &v
	}
	if t.Summaries == nil {
		var v bool = true
		t.Summaries = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Stub) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Stub"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Stub) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Stub) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Stub.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_Stub) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_VirtualLink represents the /nokia-conf/configure/groups/group/router/ospf3/area/virtual-link YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_VirtualLink struct {
	AdminState         E_NokiaTypesSros_AdminState                                                    `path:"admin-state" module:"nokia-conf"`
	Authentication     *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_VirtualLink_Authentication `path:"authentication" module:"nokia-conf" yangPresence:"true"`
	DeadInterval       *uint32                                                                        `path:"dead-interval" module:"nokia-conf"`
	HelloInterval      *uint32                                                                        `path:"hello-interval" module:"nokia-conf"`
	RetransmitInterval *uint32                                                                        `path:"retransmit-interval" module:"nokia-conf"`
	RouterId           *string                                                                        `path:"router-id" module:"nokia-conf"`
	TransitArea        *string                                                                        `path:"transit-area" module:"nokia-conf"`
	TransitDelay       *uint32                                                                        `path:"transit-delay" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_VirtualLink implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_VirtualLink) IsYANGGoStruct() {}

// GetOrCreateAuthentication retrieves the value of the Authentication field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_VirtualLink) GetOrCreateAuthentication() *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_VirtualLink_Authentication {
	if t.Authentication != nil {
		return t.Authentication
	}
	t.Authentication = &NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_VirtualLink_Authentication{}
	return t.Authentication
}

// GetAuthentication returns the value of the Authentication struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_VirtualLink. If the receiver or the field Authentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_VirtualLink) GetAuthentication() *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_VirtualLink_Authentication {
	if t != nil && t.Authentication != nil {
		return t.Authentication
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_VirtualLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_VirtualLink) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetDeadInterval retrieves the value of the leaf DeadInterval from the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_VirtualLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DeadInterval is set, it can
// safely use t.GetDeadInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DeadInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_VirtualLink) GetDeadInterval() uint32 {
	if t == nil || t.DeadInterval == nil {
		return 0
	}
	return *t.DeadInterval
}

// GetHelloInterval retrieves the value of the leaf HelloInterval from the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_VirtualLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloInterval is set, it can
// safely use t.GetHelloInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_VirtualLink) GetHelloInterval() uint32 {
	if t == nil || t.HelloInterval == nil {
		return 10
	}
	return *t.HelloInterval
}

// GetRetransmitInterval retrieves the value of the leaf RetransmitInterval from the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_VirtualLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetransmitInterval is set, it can
// safely use t.GetRetransmitInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetransmitInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_VirtualLink) GetRetransmitInterval() uint32 {
	if t == nil || t.RetransmitInterval == nil {
		return 5
	}
	return *t.RetransmitInterval
}

// GetRouterId retrieves the value of the leaf RouterId from the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_VirtualLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterId is set, it can
// safely use t.GetRouterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_VirtualLink) GetRouterId() string {
	if t == nil || t.RouterId == nil {
		return ""
	}
	return *t.RouterId
}

// GetTransitArea retrieves the value of the leaf TransitArea from the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_VirtualLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransitArea is set, it can
// safely use t.GetTransitArea() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransitArea == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_VirtualLink) GetTransitArea() string {
	if t == nil || t.TransitArea == nil {
		return ""
	}
	return *t.TransitArea
}

// GetTransitDelay retrieves the value of the leaf TransitDelay from the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_VirtualLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransitDelay is set, it can
// safely use t.GetTransitDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransitDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_VirtualLink) GetTransitDelay() uint32 {
	if t == nil || t.TransitDelay == nil {
		return 1
	}
	return *t.TransitDelay
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_VirtualLink
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_VirtualLink) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.HelloInterval == nil {
		var v uint32 = 10
		t.HelloInterval = &v
	}
	if t.RetransmitInterval == nil {
		var v uint32 = 5
		t.RetransmitInterval = &v
	}
	if t.TransitDelay == nil {
		var v uint32 = 1
		t.TransitDelay = &v
	}
	t.Authentication.PopulateDefaults()
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_VirtualLink struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_VirtualLink) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.RouterId == nil {
		return nil, fmt.Errorf("nil value for key RouterId")
	}

	if t.TransitArea == nil {
		return nil, fmt.Errorf("nil value for key TransitArea")
	}

	return map[string]interface{}{
		"router-id":    *t.RouterId,
		"transit-area": *t.TransitArea,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_VirtualLink) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_VirtualLink"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_VirtualLink) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_VirtualLink) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_VirtualLink.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_VirtualLink) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_VirtualLink_Authentication represents the /nokia-conf/configure/groups/group/router/ospf3/area/virtual-link/authentication YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_VirtualLink_Authentication struct {
	Inbound  *string `path:"inbound" module:"nokia-conf"`
	Outbound *string `path:"outbound" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_VirtualLink_Authentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_VirtualLink_Authentication) IsYANGGoStruct() {
}

// GetInbound retrieves the value of the leaf Inbound from the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_VirtualLink_Authentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Inbound is set, it can
// safely use t.GetInbound() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Inbound == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_VirtualLink_Authentication) GetInbound() string {
	if t == nil || t.Inbound == nil {
		return ""
	}
	return *t.Inbound
}

// GetOutbound retrieves the value of the leaf Outbound from the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_VirtualLink_Authentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Outbound is set, it can
// safely use t.GetOutbound() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Outbound == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_VirtualLink_Authentication) GetOutbound() string {
	if t == nil || t.Outbound == nil {
		return ""
	}
	return *t.Outbound
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_VirtualLink_Authentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_VirtualLink_Authentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_VirtualLink_Authentication) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_VirtualLink_Authentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_VirtualLink_Authentication) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_VirtualLink_Authentication) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_VirtualLink_Authentication.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_Area_VirtualLink_Authentication) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf3_Asbr represents the /nokia-conf/configure/groups/group/router/ospf3/asbr YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf3_Asbr struct {
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf3_Asbr implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_Asbr) IsYANGGoStruct() {}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf3_Asbr
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Asbr) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Asbr) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf3_Asbr"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Asbr) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Asbr) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf3_Asbr.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_Asbr) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf3_DatabaseExport represents the /nokia-conf/configure/groups/group/router/ospf3/database-export YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf3_DatabaseExport struct {
	BgpLsIdentifier *NokiaConf_Configure_Groups_Group_Router_Ospf3_DatabaseExport_BgpLsIdentifier `path:"bgp-ls-identifier" module:"nokia-conf" yangPresence:"true"`
	IgpIdentifier   *uint64                                                                       `path:"igp-identifier" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf3_DatabaseExport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_DatabaseExport) IsYANGGoStruct() {}

// GetOrCreateBgpLsIdentifier retrieves the value of the BgpLsIdentifier field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_DatabaseExport) GetOrCreateBgpLsIdentifier() *NokiaConf_Configure_Groups_Group_Router_Ospf3_DatabaseExport_BgpLsIdentifier {
	if t.BgpLsIdentifier != nil {
		return t.BgpLsIdentifier
	}
	t.BgpLsIdentifier = &NokiaConf_Configure_Groups_Group_Router_Ospf3_DatabaseExport_BgpLsIdentifier{}
	return t.BgpLsIdentifier
}

// GetBgpLsIdentifier returns the value of the BgpLsIdentifier struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf3_DatabaseExport. If the receiver or the field BgpLsIdentifier is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_DatabaseExport) GetBgpLsIdentifier() *NokiaConf_Configure_Groups_Group_Router_Ospf3_DatabaseExport_BgpLsIdentifier {
	if t != nil && t.BgpLsIdentifier != nil {
		return t.BgpLsIdentifier
	}
	return nil
}

// GetIgpIdentifier retrieves the value of the leaf IgpIdentifier from the NokiaConf_Configure_Groups_Group_Router_Ospf3_DatabaseExport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgpIdentifier is set, it can
// safely use t.GetIgpIdentifier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgpIdentifier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_DatabaseExport) GetIgpIdentifier() uint64 {
	if t == nil || t.IgpIdentifier == nil {
		return 0
	}
	return *t.IgpIdentifier
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf3_DatabaseExport
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_DatabaseExport) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.BgpLsIdentifier.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_DatabaseExport) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf3_DatabaseExport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_DatabaseExport) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_DatabaseExport) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf3_DatabaseExport.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_DatabaseExport) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf3_DatabaseExport_BgpLsIdentifier represents the /nokia-conf/configure/groups/group/router/ospf3/database-export/bgp-ls-identifier YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf3_DatabaseExport_BgpLsIdentifier struct {
	Value *uint32 `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf3_DatabaseExport_BgpLsIdentifier implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_DatabaseExport_BgpLsIdentifier) IsYANGGoStruct() {
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Groups_Group_Router_Ospf3_DatabaseExport_BgpLsIdentifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_DatabaseExport_BgpLsIdentifier) GetValue() uint32 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf3_DatabaseExport_BgpLsIdentifier
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_DatabaseExport_BgpLsIdentifier) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Value == nil {
		var v uint32 = 0
		t.Value = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_DatabaseExport_BgpLsIdentifier) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf3_DatabaseExport_BgpLsIdentifier"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_DatabaseExport_BgpLsIdentifier) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_DatabaseExport_BgpLsIdentifier) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf3_DatabaseExport_BgpLsIdentifier.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_DatabaseExport_BgpLsIdentifier) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf3_ExportLimit represents the /nokia-conf/configure/groups/group/router/ospf3/export-limit YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf3_ExportLimit struct {
	LogPercent *uint32 `path:"log-percent" module:"nokia-conf"`
	Number     *uint32 `path:"number" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf3_ExportLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_ExportLimit) IsYANGGoStruct() {}

// GetLogPercent retrieves the value of the leaf LogPercent from the NokiaConf_Configure_Groups_Group_Router_Ospf3_ExportLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogPercent is set, it can
// safely use t.GetLogPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogPercent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_ExportLimit) GetLogPercent() uint32 {
	if t == nil || t.LogPercent == nil {
		return 0
	}
	return *t.LogPercent
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Groups_Group_Router_Ospf3_ExportLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_ExportLimit) GetNumber() uint32 {
	if t == nil || t.Number == nil {
		return 0
	}
	return *t.Number
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf3_ExportLimit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_ExportLimit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_ExportLimit) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf3_ExportLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_ExportLimit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_ExportLimit) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf3_ExportLimit.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_ExportLimit) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf3_ExternalDbOverflow represents the /nokia-conf/configure/groups/group/router/ospf3/external-db-overflow YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf3_ExternalDbOverflow struct {
	Interval *uint32 `path:"interval" module:"nokia-conf"`
	Limit    *uint32 `path:"limit" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf3_ExternalDbOverflow implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_ExternalDbOverflow) IsYANGGoStruct() {}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Groups_Group_Router_Ospf3_ExternalDbOverflow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_ExternalDbOverflow) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetLimit retrieves the value of the leaf Limit from the NokiaConf_Configure_Groups_Group_Router_Ospf3_ExternalDbOverflow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Limit is set, it can
// safely use t.GetLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Limit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_ExternalDbOverflow) GetLimit() uint32 {
	if t == nil || t.Limit == nil {
		return 0
	}
	return *t.Limit
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf3_ExternalDbOverflow
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_ExternalDbOverflow) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Interval == nil {
		var v uint32 = 0
		t.Interval = &v
	}
	if t.Limit == nil {
		var v uint32 = 0
		t.Limit = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_ExternalDbOverflow) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf3_ExternalDbOverflow"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_ExternalDbOverflow) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_ExternalDbOverflow) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf3_ExternalDbOverflow.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_ExternalDbOverflow) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf3_GracefulRestart represents the /nokia-conf/configure/groups/group/router/ospf3/graceful-restart YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf3_GracefulRestart struct {
	HelperMode        *bool `path:"helper-mode" module:"nokia-conf"`
	StrictLsaChecking *bool `path:"strict-lsa-checking" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf3_GracefulRestart implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_GracefulRestart) IsYANGGoStruct() {}

// GetHelperMode retrieves the value of the leaf HelperMode from the NokiaConf_Configure_Groups_Group_Router_Ospf3_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelperMode is set, it can
// safely use t.GetHelperMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelperMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_GracefulRestart) GetHelperMode() bool {
	if t == nil || t.HelperMode == nil {
		return true
	}
	return *t.HelperMode
}

// GetStrictLsaChecking retrieves the value of the leaf StrictLsaChecking from the NokiaConf_Configure_Groups_Group_Router_Ospf3_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StrictLsaChecking is set, it can
// safely use t.GetStrictLsaChecking() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StrictLsaChecking == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_GracefulRestart) GetStrictLsaChecking() bool {
	if t == nil || t.StrictLsaChecking == nil {
		return true
	}
	return *t.StrictLsaChecking
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf3_GracefulRestart
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_GracefulRestart) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HelperMode == nil {
		var v bool = true
		t.HelperMode = &v
	}
	if t.StrictLsaChecking == nil {
		var v bool = true
		t.StrictLsaChecking = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_GracefulRestart) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf3_GracefulRestart"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_GracefulRestart) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_GracefulRestart) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf3_GracefulRestart.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_GracefulRestart) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut represents the /nokia-conf/configure/groups/group/router/ospf3/igp-shortcut YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut struct {
	AdminState    E_NokiaTypesSros_AdminState                                              `path:"admin-state" module:"nokia-conf"`
	TunnelNextHop *NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop `path:"tunnel-next-hop" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut) IsYANGGoStruct() {}

// GetOrCreateTunnelNextHop retrieves the value of the TunnelNextHop field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut) GetOrCreateTunnelNextHop() *NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop {
	if t.TunnelNextHop != nil {
		return t.TunnelNextHop
	}
	t.TunnelNextHop = &NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop{}
	return t.TunnelNextHop
}

// GetTunnelNextHop returns the value of the TunnelNextHop struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut. If the receiver or the field TunnelNextHop is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut) GetTunnelNextHop() *NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop {
	if t != nil && t.TunnelNextHop != nil {
		return t.TunnelNextHop
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.TunnelNextHop.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop represents the /nokia-conf/configure/groups/group/router/ospf3/igp-shortcut/tunnel-next-hop YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop struct {
	Family map[NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop_Family_FamilyType_Union]*NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop_Family `path:"family" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop) IsYANGGoStruct() {}

// NewFamily creates a new entry in the Family list of the
// NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop) NewFamily(FamilyType NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop_Family_FamilyType_Union) (*NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop_Family, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Family == nil {
		t.Family = make(map[NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop_Family_FamilyType_Union]*NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop_Family)
	}

	key := FamilyType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Family[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Family", key)
	}

	t.Family[key] = &NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop_Family{
		FamilyType: FamilyType,
	}

	return t.Family[key], nil
}

// RenameFamily renames an entry in the list Family within
// the NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop) RenameFamily(oldK, newK NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop_Family_FamilyType_Union) error {
	if _, ok := t.Family[newK]; ok {
		return fmt.Errorf("key %v already exists in Family", newK)
	}

	e, ok := t.Family[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Family", oldK)
	}
	e.FamilyType = newK

	t.Family[newK] = e
	delete(t.Family, oldK)
	return nil
}

// GetOrCreateFamily retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop) GetOrCreateFamily(FamilyType NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop_Family_FamilyType_Union) *NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop_Family {

	key := FamilyType

	if v, ok := t.Family[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFamily(FamilyType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFamily got unexpected error: %v", err))
	}
	return v
}

// GetFamily retrieves the value with the specified key from
// the Family map field of NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop) GetFamily(FamilyType NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop_Family_FamilyType_Union) *NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop_Family {

	if t == nil {
		return nil
	}

	key := FamilyType

	if lm, ok := t.Family[key]; ok {
		return lm
	}
	return nil
}

// DeleteFamily deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop) DeleteFamily(FamilyType NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop_Family_FamilyType_Union) {
	key := FamilyType

	delete(t.Family, key)
}

// AppendFamily appends the supplied NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop_Family struct to the
// list Family of NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop_Family already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop) AppendFamily(v *NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop_Family) error {
	key := v.FamilyType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Family == nil {
		t.Family = make(map[NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop_Family_FamilyType_Union]*NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop_Family)
	}

	if _, ok := t.Family[key]; ok {
		return fmt.Errorf("duplicate key for list Family %v", key)
	}

	t.Family[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Family {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop_Family represents the /nokia-conf/configure/groups/group/router/ospf3/igp-shortcut/tunnel-next-hop/family YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop_Family struct {
	FamilyType       NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop_Family_FamilyType_Union  `path:"family-type" module:"nokia-conf"`
	Resolution       E_NokiaTypesSros_ResolutionType                                                                  `path:"resolution" module:"nokia-conf"`
	ResolutionFilter *NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop_Family_ResolutionFilter `path:"resolution-filter" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop_Family implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop_Family) IsYANGGoStruct() {
}

// GetOrCreateResolutionFilter retrieves the value of the ResolutionFilter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop_Family) GetOrCreateResolutionFilter() *NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop_Family_ResolutionFilter {
	if t.ResolutionFilter != nil {
		return t.ResolutionFilter
	}
	t.ResolutionFilter = &NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop_Family_ResolutionFilter{}
	return t.ResolutionFilter
}

// GetResolutionFilter returns the value of the ResolutionFilter struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop_Family. If the receiver or the field ResolutionFilter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop_Family) GetResolutionFilter() *NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop_Family_ResolutionFilter {
	if t != nil && t.ResolutionFilter != nil {
		return t.ResolutionFilter
	}
	return nil
}

// GetFamilyType retrieves the value of the leaf FamilyType from the NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FamilyType is set, it can
// safely use t.GetFamilyType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FamilyType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop_Family) GetFamilyType() NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop_Family_FamilyType_Union {
	if t == nil || t.FamilyType == nil {
		return nil
	}
	return t.FamilyType
}

// GetResolution retrieves the value of the leaf Resolution from the NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Resolution is set, it can
// safely use t.GetResolution() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Resolution == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop_Family) GetResolution() E_NokiaTypesSros_ResolutionType {
	if t == nil || t.Resolution == 0 {
		return NokiaTypesSros_ResolutionType_none
	}
	return t.Resolution
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop_Family
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop_Family) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Resolution == 0 {
		t.Resolution = NokiaTypesSros_ResolutionType_none
	}
	t.ResolutionFilter.PopulateDefaults()
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop_Family struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop_Family) Î›ListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"family-type": t.FamilyType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop_Family) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop_Family"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop_Family) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop_Family) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop_Family.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop_Family) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop_Family_ResolutionFilter represents the /nokia-conf/configure/groups/group/router/ospf3/igp-shortcut/tunnel-next-hop/family/resolution-filter YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop_Family_ResolutionFilter struct {
	Rsvp *bool `path:"rsvp" module:"nokia-conf"`
	SrTe *bool `path:"sr-te" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop_Family_ResolutionFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop_Family_ResolutionFilter) IsYANGGoStruct() {
}

// GetRsvp retrieves the value of the leaf Rsvp from the NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop_Family_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rsvp is set, it can
// safely use t.GetRsvp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rsvp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop_Family_ResolutionFilter) GetRsvp() bool {
	if t == nil || t.Rsvp == nil {
		return false
	}
	return *t.Rsvp
}

// GetSrTe retrieves the value of the leaf SrTe from the NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop_Family_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrTe is set, it can
// safely use t.GetSrTe() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrTe == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop_Family_ResolutionFilter) GetSrTe() bool {
	if t == nil || t.SrTe == nil {
		return false
	}
	return *t.SrTe
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop_Family_ResolutionFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop_Family_ResolutionFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Rsvp == nil {
		var v bool = false
		t.Rsvp = &v
	}
	if t.SrTe == nil {
		var v bool = false
		t.SrTe = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop_Family_ResolutionFilter) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop_Family_ResolutionFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop_Family_ResolutionFilter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop_Family_ResolutionFilter) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop_Family_ResolutionFilter.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_IgpShortcut_TunnelNextHop_Family_ResolutionFilter) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate represents the /nokia-conf/configure/groups/group/router/ospf3/loopfree-alternate YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate struct {
	Exclude   *NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_Exclude   `path:"exclude" module:"nokia-conf"`
	RemoteLfa *NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_RemoteLfa `path:"remote-lfa" module:"nokia-conf" yangPresence:"true"`
	TiLfa     *NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_TiLfa     `path:"ti-lfa" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate) IsYANGGoStruct() {}

// GetOrCreateExclude retrieves the value of the Exclude field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate) GetOrCreateExclude() *NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_Exclude {
	if t.Exclude != nil {
		return t.Exclude
	}
	t.Exclude = &NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_Exclude{}
	return t.Exclude
}

// GetOrCreateRemoteLfa retrieves the value of the RemoteLfa field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate) GetOrCreateRemoteLfa() *NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_RemoteLfa {
	if t.RemoteLfa != nil {
		return t.RemoteLfa
	}
	t.RemoteLfa = &NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_RemoteLfa{}
	return t.RemoteLfa
}

// GetOrCreateTiLfa retrieves the value of the TiLfa field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate) GetOrCreateTiLfa() *NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_TiLfa {
	if t.TiLfa != nil {
		return t.TiLfa
	}
	t.TiLfa = &NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_TiLfa{}
	return t.TiLfa
}

// GetExclude returns the value of the Exclude struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate. If the receiver or the field Exclude is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate) GetExclude() *NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_Exclude {
	if t != nil && t.Exclude != nil {
		return t.Exclude
	}
	return nil
}

// GetRemoteLfa returns the value of the RemoteLfa struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate. If the receiver or the field RemoteLfa is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate) GetRemoteLfa() *NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_RemoteLfa {
	if t != nil && t.RemoteLfa != nil {
		return t.RemoteLfa
	}
	return nil
}

// GetTiLfa returns the value of the TiLfa struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate. If the receiver or the field TiLfa is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate) GetTiLfa() *NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_TiLfa {
	if t != nil && t.TiLfa != nil {
		return t.TiLfa
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Exclude.PopulateDefaults()
	t.RemoteLfa.PopulateDefaults()
	t.TiLfa.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_Exclude represents the /nokia-conf/configure/groups/group/router/ospf3/loopfree-alternate/exclude YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_Exclude struct {
	PrefixPolicy []string `path:"prefix-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_Exclude implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_Exclude) IsYANGGoStruct() {}

// GetPrefixPolicy retrieves the value of the leaf PrefixPolicy from the NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_Exclude
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixPolicy is set, it can
// safely use t.GetPrefixPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_Exclude) GetPrefixPolicy() []string {
	if t == nil || t.PrefixPolicy == nil {
		return nil
	}
	return t.PrefixPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_Exclude
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_Exclude) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_Exclude) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_Exclude"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_Exclude) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_Exclude) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_Exclude.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_Exclude) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_RemoteLfa represents the /nokia-conf/configure/groups/group/router/ospf3/loopfree-alternate/remote-lfa YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_RemoteLfa struct {
	MaxPqCost   *uint32                                                                                `path:"max-pq-cost" module:"nokia-conf"`
	NodeProtect *NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_RemoteLfa_NodeProtect `path:"node-protect" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_RemoteLfa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_RemoteLfa) IsYANGGoStruct() {}

// GetOrCreateNodeProtect retrieves the value of the NodeProtect field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_RemoteLfa) GetOrCreateNodeProtect() *NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_RemoteLfa_NodeProtect {
	if t.NodeProtect != nil {
		return t.NodeProtect
	}
	t.NodeProtect = &NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_RemoteLfa_NodeProtect{}
	return t.NodeProtect
}

// GetNodeProtect returns the value of the NodeProtect struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_RemoteLfa. If the receiver or the field NodeProtect is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_RemoteLfa) GetNodeProtect() *NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_RemoteLfa_NodeProtect {
	if t != nil && t.NodeProtect != nil {
		return t.NodeProtect
	}
	return nil
}

// GetMaxPqCost retrieves the value of the leaf MaxPqCost from the NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_RemoteLfa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxPqCost is set, it can
// safely use t.GetMaxPqCost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxPqCost == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_RemoteLfa) GetMaxPqCost() uint32 {
	if t == nil || t.MaxPqCost == nil {
		return 65535
	}
	return *t.MaxPqCost
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_RemoteLfa
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_RemoteLfa) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxPqCost == nil {
		var v uint32 = 65535
		t.MaxPqCost = &v
	}
	t.NodeProtect.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_RemoteLfa) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_RemoteLfa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_RemoteLfa) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_RemoteLfa) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_RemoteLfa.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_RemoteLfa) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_RemoteLfa_NodeProtect represents the /nokia-conf/configure/groups/group/router/ospf3/loopfree-alternate/remote-lfa/node-protect YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_RemoteLfa_NodeProtect struct {
	MaxPqNodes *uint32 `path:"max-pq-nodes" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_RemoteLfa_NodeProtect implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_RemoteLfa_NodeProtect) IsYANGGoStruct() {
}

// GetMaxPqNodes retrieves the value of the leaf MaxPqNodes from the NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_RemoteLfa_NodeProtect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxPqNodes is set, it can
// safely use t.GetMaxPqNodes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxPqNodes == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_RemoteLfa_NodeProtect) GetMaxPqNodes() uint32 {
	if t == nil || t.MaxPqNodes == nil {
		return 16
	}
	return *t.MaxPqNodes
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_RemoteLfa_NodeProtect
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_RemoteLfa_NodeProtect) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxPqNodes == nil {
		var v uint32 = 16
		t.MaxPqNodes = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_RemoteLfa_NodeProtect) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_RemoteLfa_NodeProtect"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_RemoteLfa_NodeProtect) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_RemoteLfa_NodeProtect) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_RemoteLfa_NodeProtect.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_RemoteLfa_NodeProtect) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_TiLfa represents the /nokia-conf/configure/groups/group/router/ospf3/loopfree-alternate/ti-lfa YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_TiLfa struct {
	MaxSrFrrLabels *uint32                                                                            `path:"max-sr-frr-labels" module:"nokia-conf"`
	NodeProtect    *NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_TiLfa_NodeProtect `path:"node-protect" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_TiLfa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_TiLfa) IsYANGGoStruct() {}

// GetOrCreateNodeProtect retrieves the value of the NodeProtect field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_TiLfa) GetOrCreateNodeProtect() *NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_TiLfa_NodeProtect {
	if t.NodeProtect != nil {
		return t.NodeProtect
	}
	t.NodeProtect = &NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_TiLfa_NodeProtect{}
	return t.NodeProtect
}

// GetNodeProtect returns the value of the NodeProtect struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_TiLfa. If the receiver or the field NodeProtect is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_TiLfa) GetNodeProtect() *NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_TiLfa_NodeProtect {
	if t != nil && t.NodeProtect != nil {
		return t.NodeProtect
	}
	return nil
}

// GetMaxSrFrrLabels retrieves the value of the leaf MaxSrFrrLabels from the NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_TiLfa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxSrFrrLabels is set, it can
// safely use t.GetMaxSrFrrLabels() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxSrFrrLabels == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_TiLfa) GetMaxSrFrrLabels() uint32 {
	if t == nil || t.MaxSrFrrLabels == nil {
		return 2
	}
	return *t.MaxSrFrrLabels
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_TiLfa
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_TiLfa) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxSrFrrLabels == nil {
		var v uint32 = 2
		t.MaxSrFrrLabels = &v
	}
	t.NodeProtect.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_TiLfa) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_TiLfa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_TiLfa) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_TiLfa) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_TiLfa.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_TiLfa) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_TiLfa_NodeProtect represents the /nokia-conf/configure/groups/group/router/ospf3/loopfree-alternate/ti-lfa/node-protect YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_TiLfa_NodeProtect struct {
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_TiLfa_NodeProtect implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_TiLfa_NodeProtect) IsYANGGoStruct() {
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_TiLfa_NodeProtect
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_TiLfa_NodeProtect) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_TiLfa_NodeProtect) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_TiLfa_NodeProtect"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_TiLfa_NodeProtect) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_TiLfa_NodeProtect) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_TiLfa_NodeProtect.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_LoopfreeAlternate_TiLfa_NodeProtect) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf3_OverloadOnBoot represents the /nokia-conf/configure/groups/group/router/ospf3/overload-on-boot YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf3_OverloadOnBoot struct {
	Timeout *uint32 `path:"timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf3_OverloadOnBoot implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_OverloadOnBoot) IsYANGGoStruct() {}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Groups_Group_Router_Ospf3_OverloadOnBoot
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_OverloadOnBoot) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 0
	}
	return *t.Timeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf3_OverloadOnBoot
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_OverloadOnBoot) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_OverloadOnBoot) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf3_OverloadOnBoot"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_OverloadOnBoot) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_OverloadOnBoot) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf3_OverloadOnBoot.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_OverloadOnBoot) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf3_RibPriority represents the /nokia-conf/configure/groups/group/router/ospf3/rib-priority YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf3_RibPriority struct {
	High *NokiaConf_Configure_Groups_Group_Router_Ospf3_RibPriority_High `path:"high" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf3_RibPriority implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_RibPriority) IsYANGGoStruct() {}

// GetOrCreateHigh retrieves the value of the High field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_RibPriority) GetOrCreateHigh() *NokiaConf_Configure_Groups_Group_Router_Ospf3_RibPriority_High {
	if t.High != nil {
		return t.High
	}
	t.High = &NokiaConf_Configure_Groups_Group_Router_Ospf3_RibPriority_High{}
	return t.High
}

// GetHigh returns the value of the High struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf3_RibPriority. If the receiver or the field High is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_RibPriority) GetHigh() *NokiaConf_Configure_Groups_Group_Router_Ospf3_RibPriority_High {
	if t != nil && t.High != nil {
		return t.High
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf3_RibPriority
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_RibPriority) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.High.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_RibPriority) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf3_RibPriority"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_RibPriority) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_RibPriority) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf3_RibPriority.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_RibPriority) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf3_RibPriority_High represents the /nokia-conf/configure/groups/group/router/ospf3/rib-priority/high YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf3_RibPriority_High struct {
	PrefixList *string `path:"prefix-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf3_RibPriority_High implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_RibPriority_High) IsYANGGoStruct() {}

// GetPrefixList retrieves the value of the leaf PrefixList from the NokiaConf_Configure_Groups_Group_Router_Ospf3_RibPriority_High
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixList is set, it can
// safely use t.GetPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_RibPriority_High) GetPrefixList() string {
	if t == nil || t.PrefixList == nil {
		return ""
	}
	return *t.PrefixList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf3_RibPriority_High
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_RibPriority_High) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_RibPriority_High) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf3_RibPriority_High"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_RibPriority_High) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_RibPriority_High) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf3_RibPriority_High.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_RibPriority_High) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf3_RtrAdvLsaLimit represents the /nokia-conf/configure/groups/group/router/ospf3/rtr-adv-lsa-limit YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf3_RtrAdvLsaLimit struct {
	LogOnly          *bool                                                                              `path:"log-only" module:"nokia-conf"`
	MaxLsaCount      *uint32                                                                            `path:"max-lsa-count" module:"nokia-conf"`
	OverloadTimeout  NokiaConf_Configure_Groups_Group_Router_Ospf3_RtrAdvLsaLimit_OverloadTimeout_Union `path:"overload-timeout" module:"nokia-conf"`
	WarningThreshold *uint32                                                                            `path:"warning-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf3_RtrAdvLsaLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_RtrAdvLsaLimit) IsYANGGoStruct() {}

// GetLogOnly retrieves the value of the leaf LogOnly from the NokiaConf_Configure_Groups_Group_Router_Ospf3_RtrAdvLsaLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogOnly is set, it can
// safely use t.GetLogOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_RtrAdvLsaLimit) GetLogOnly() bool {
	if t == nil || t.LogOnly == nil {
		return false
	}
	return *t.LogOnly
}

// GetMaxLsaCount retrieves the value of the leaf MaxLsaCount from the NokiaConf_Configure_Groups_Group_Router_Ospf3_RtrAdvLsaLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxLsaCount is set, it can
// safely use t.GetMaxLsaCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxLsaCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_RtrAdvLsaLimit) GetMaxLsaCount() uint32 {
	if t == nil || t.MaxLsaCount == nil {
		return 0
	}
	return *t.MaxLsaCount
}

// GetOverloadTimeout retrieves the value of the leaf OverloadTimeout from the NokiaConf_Configure_Groups_Group_Router_Ospf3_RtrAdvLsaLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OverloadTimeout is set, it can
// safely use t.GetOverloadTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OverloadTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_RtrAdvLsaLimit) GetOverloadTimeout() NokiaConf_Configure_Groups_Group_Router_Ospf3_RtrAdvLsaLimit_OverloadTimeout_Union {
	if t == nil || t.OverloadTimeout == nil {
		return NokiaTypesIgp_OverloadTimeout_Enum_forever
	}
	return t.OverloadTimeout
}

// GetWarningThreshold retrieves the value of the leaf WarningThreshold from the NokiaConf_Configure_Groups_Group_Router_Ospf3_RtrAdvLsaLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WarningThreshold is set, it can
// safely use t.GetWarningThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WarningThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_RtrAdvLsaLimit) GetWarningThreshold() uint32 {
	if t == nil || t.WarningThreshold == nil {
		return 0
	}
	return *t.WarningThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf3_RtrAdvLsaLimit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_RtrAdvLsaLimit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LogOnly == nil {
		var v bool = false
		t.LogOnly = &v
	}
	if t.OverloadTimeout == nil {
		t.OverloadTimeout = NokiaTypesIgp_OverloadTimeout_Enum_forever
	}
	if t.WarningThreshold == nil {
		var v uint32 = 0
		t.WarningThreshold = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_RtrAdvLsaLimit) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf3_RtrAdvLsaLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_RtrAdvLsaLimit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_RtrAdvLsaLimit) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf3_RtrAdvLsaLimit.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_RtrAdvLsaLimit) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting represents the /nokia-conf/configure/groups/group/router/ospf3/segment-routing YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting struct {
	AdjSidHold        NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting_AdjSidHold_Union   `path:"adj-sid-hold" module:"nokia-conf"`
	AdminState        E_NokiaTypesSros_AdminState                                                     `path:"admin-state" module:"nokia-conf"`
	EgressStatistics  *NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting_EgressStatistics  `path:"egress-statistics" module:"nokia-conf"`
	IngressStatistics *NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting_IngressStatistics `path:"ingress-statistics" module:"nokia-conf"`
	PrefixSidRange    *NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting_PrefixSidRange    `path:"prefix-sid-range" module:"nokia-conf" yangPresence:"true"`
	TunnelMtu         *uint32                                                                         `path:"tunnel-mtu" module:"nokia-conf"`
	TunnelTablePref   *uint32                                                                         `path:"tunnel-table-pref" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting) IsYANGGoStruct() {}

// GetOrCreateEgressStatistics retrieves the value of the EgressStatistics field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting) GetOrCreateEgressStatistics() *NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting_EgressStatistics {
	if t.EgressStatistics != nil {
		return t.EgressStatistics
	}
	t.EgressStatistics = &NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting_EgressStatistics{}
	return t.EgressStatistics
}

// GetOrCreateIngressStatistics retrieves the value of the IngressStatistics field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting) GetOrCreateIngressStatistics() *NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting_IngressStatistics {
	if t.IngressStatistics != nil {
		return t.IngressStatistics
	}
	t.IngressStatistics = &NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting_IngressStatistics{}
	return t.IngressStatistics
}

// GetOrCreatePrefixSidRange retrieves the value of the PrefixSidRange field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting) GetOrCreatePrefixSidRange() *NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting_PrefixSidRange {
	if t.PrefixSidRange != nil {
		return t.PrefixSidRange
	}
	t.PrefixSidRange = &NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting_PrefixSidRange{}
	return t.PrefixSidRange
}

// GetEgressStatistics returns the value of the EgressStatistics struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting. If the receiver or the field EgressStatistics is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting) GetEgressStatistics() *NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting_EgressStatistics {
	if t != nil && t.EgressStatistics != nil {
		return t.EgressStatistics
	}
	return nil
}

// GetIngressStatistics returns the value of the IngressStatistics struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting. If the receiver or the field IngressStatistics is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting) GetIngressStatistics() *NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting_IngressStatistics {
	if t != nil && t.IngressStatistics != nil {
		return t.IngressStatistics
	}
	return nil
}

// GetPrefixSidRange returns the value of the PrefixSidRange struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting. If the receiver or the field PrefixSidRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting) GetPrefixSidRange() *NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting_PrefixSidRange {
	if t != nil && t.PrefixSidRange != nil {
		return t.PrefixSidRange
	}
	return nil
}

// GetAdjSidHold retrieves the value of the leaf AdjSidHold from the NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdjSidHold is set, it can
// safely use t.GetAdjSidHold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdjSidHold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting) GetAdjSidHold() NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting_AdjSidHold_Union {
	if t == nil || t.AdjSidHold == nil {
		return UnionUint32(15)
	}
	return t.AdjSidHold
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetTunnelMtu retrieves the value of the leaf TunnelMtu from the NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TunnelMtu is set, it can
// safely use t.GetTunnelMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TunnelMtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting) GetTunnelMtu() uint32 {
	if t == nil || t.TunnelMtu == nil {
		return 0
	}
	return *t.TunnelMtu
}

// GetTunnelTablePref retrieves the value of the leaf TunnelTablePref from the NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TunnelTablePref is set, it can
// safely use t.GetTunnelTablePref() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TunnelTablePref == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting) GetTunnelTablePref() uint32 {
	if t == nil || t.TunnelTablePref == nil {
		return 10
	}
	return *t.TunnelTablePref
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdjSidHold == nil {
		t.AdjSidHold = UnionUint32(15)
	}
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.TunnelTablePref == nil {
		var v uint32 = 10
		t.TunnelTablePref = &v
	}
	t.EgressStatistics.PopulateDefaults()
	t.IngressStatistics.PopulateDefaults()
	t.PrefixSidRange.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting_EgressStatistics represents the /nokia-conf/configure/groups/group/router/ospf3/segment-routing/egress-statistics YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting_EgressStatistics struct {
	AdjSid  *bool `path:"adj-sid" module:"nokia-conf"`
	NodeSid *bool `path:"node-sid" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting_EgressStatistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting_EgressStatistics) IsYANGGoStruct() {
}

// GetAdjSid retrieves the value of the leaf AdjSid from the NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting_EgressStatistics
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdjSid is set, it can
// safely use t.GetAdjSid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdjSid == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting_EgressStatistics) GetAdjSid() bool {
	if t == nil || t.AdjSid == nil {
		return false
	}
	return *t.AdjSid
}

// GetNodeSid retrieves the value of the leaf NodeSid from the NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting_EgressStatistics
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NodeSid is set, it can
// safely use t.GetNodeSid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NodeSid == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting_EgressStatistics) GetNodeSid() bool {
	if t == nil || t.NodeSid == nil {
		return false
	}
	return *t.NodeSid
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting_EgressStatistics
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting_EgressStatistics) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdjSid == nil {
		var v bool = false
		t.AdjSid = &v
	}
	if t.NodeSid == nil {
		var v bool = false
		t.NodeSid = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting_EgressStatistics) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting_EgressStatistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting_EgressStatistics) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting_EgressStatistics) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting_EgressStatistics.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting_EgressStatistics) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting_IngressStatistics represents the /nokia-conf/configure/groups/group/router/ospf3/segment-routing/ingress-statistics YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting_IngressStatistics struct {
	AdjSid  *bool `path:"adj-sid" module:"nokia-conf"`
	NodeSid *bool `path:"node-sid" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting_IngressStatistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting_IngressStatistics) IsYANGGoStruct() {
}

// GetAdjSid retrieves the value of the leaf AdjSid from the NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting_IngressStatistics
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdjSid is set, it can
// safely use t.GetAdjSid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdjSid == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting_IngressStatistics) GetAdjSid() bool {
	if t == nil || t.AdjSid == nil {
		return false
	}
	return *t.AdjSid
}

// GetNodeSid retrieves the value of the leaf NodeSid from the NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting_IngressStatistics
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NodeSid is set, it can
// safely use t.GetNodeSid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NodeSid == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting_IngressStatistics) GetNodeSid() bool {
	if t == nil || t.NodeSid == nil {
		return false
	}
	return *t.NodeSid
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting_IngressStatistics
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting_IngressStatistics) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdjSid == nil {
		var v bool = false
		t.AdjSid = &v
	}
	if t.NodeSid == nil {
		var v bool = false
		t.NodeSid = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting_IngressStatistics) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting_IngressStatistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting_IngressStatistics) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting_IngressStatistics) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting_IngressStatistics.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting_IngressStatistics) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting_PrefixSidRange represents the /nokia-conf/configure/groups/group/router/ospf3/segment-routing/prefix-sid-range YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting_PrefixSidRange struct {
	Global     YANGEmpty `path:"global" module:"nokia-conf"`
	MaxIndex   *uint32   `path:"max-index" module:"nokia-conf"`
	StartLabel *uint32   `path:"start-label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting_PrefixSidRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting_PrefixSidRange) IsYANGGoStruct() {
}

// GetGlobal retrieves the value of the leaf Global from the NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting_PrefixSidRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Global is set, it can
// safely use t.GetGlobal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Global == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting_PrefixSidRange) GetGlobal() YANGEmpty {
	if t == nil || t.Global == false {
		return false
	}
	return t.Global
}

// GetMaxIndex retrieves the value of the leaf MaxIndex from the NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting_PrefixSidRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxIndex is set, it can
// safely use t.GetMaxIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting_PrefixSidRange) GetMaxIndex() uint32 {
	if t == nil || t.MaxIndex == nil {
		return 1
	}
	return *t.MaxIndex
}

// GetStartLabel retrieves the value of the leaf StartLabel from the NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting_PrefixSidRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartLabel is set, it can
// safely use t.GetStartLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting_PrefixSidRange) GetStartLabel() uint32 {
	if t == nil || t.StartLabel == nil {
		return 0
	}
	return *t.StartLabel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting_PrefixSidRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting_PrefixSidRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxIndex == nil {
		var v uint32 = 1
		t.MaxIndex = &v
	}
	if t.StartLabel == nil {
		var v uint32 = 0
		t.StartLabel = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting_PrefixSidRange) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting_PrefixSidRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting_PrefixSidRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting_PrefixSidRange) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting_PrefixSidRange.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_SegmentRouting_PrefixSidRange) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers represents the /nokia-conf/configure/groups/group/router/ospf3/timers YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers struct {
	IncrementalSpfWait *uint32                                                           `path:"incremental-spf-wait" module:"nokia-conf"`
	LsaAccumulate      *uint32                                                           `path:"lsa-accumulate" module:"nokia-conf"`
	LsaArrival         *uint32                                                           `path:"lsa-arrival" module:"nokia-conf"`
	LsaGenerate        *NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers_LsaGenerate `path:"lsa-generate" module:"nokia-conf"`
	RedistributeDelay  *uint32                                                           `path:"redistribute-delay" module:"nokia-conf"`
	SpfWait            *NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers_SpfWait     `path:"spf-wait" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers) IsYANGGoStruct() {}

// GetOrCreateLsaGenerate retrieves the value of the LsaGenerate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers) GetOrCreateLsaGenerate() *NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers_LsaGenerate {
	if t.LsaGenerate != nil {
		return t.LsaGenerate
	}
	t.LsaGenerate = &NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers_LsaGenerate{}
	return t.LsaGenerate
}

// GetOrCreateSpfWait retrieves the value of the SpfWait field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers) GetOrCreateSpfWait() *NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers_SpfWait {
	if t.SpfWait != nil {
		return t.SpfWait
	}
	t.SpfWait = &NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers_SpfWait{}
	return t.SpfWait
}

// GetLsaGenerate returns the value of the LsaGenerate struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers. If the receiver or the field LsaGenerate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers) GetLsaGenerate() *NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers_LsaGenerate {
	if t != nil && t.LsaGenerate != nil {
		return t.LsaGenerate
	}
	return nil
}

// GetSpfWait returns the value of the SpfWait struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers. If the receiver or the field SpfWait is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers) GetSpfWait() *NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers_SpfWait {
	if t != nil && t.SpfWait != nil {
		return t.SpfWait
	}
	return nil
}

// GetIncrementalSpfWait retrieves the value of the leaf IncrementalSpfWait from the NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IncrementalSpfWait is set, it can
// safely use t.GetIncrementalSpfWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IncrementalSpfWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers) GetIncrementalSpfWait() uint32 {
	if t == nil || t.IncrementalSpfWait == nil {
		return 1000
	}
	return *t.IncrementalSpfWait
}

// GetLsaAccumulate retrieves the value of the leaf LsaAccumulate from the NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LsaAccumulate is set, it can
// safely use t.GetLsaAccumulate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LsaAccumulate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers) GetLsaAccumulate() uint32 {
	if t == nil || t.LsaAccumulate == nil {
		return 1000
	}
	return *t.LsaAccumulate
}

// GetLsaArrival retrieves the value of the leaf LsaArrival from the NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LsaArrival is set, it can
// safely use t.GetLsaArrival() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LsaArrival == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers) GetLsaArrival() uint32 {
	if t == nil || t.LsaArrival == nil {
		return 1000
	}
	return *t.LsaArrival
}

// GetRedistributeDelay retrieves the value of the leaf RedistributeDelay from the NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RedistributeDelay is set, it can
// safely use t.GetRedistributeDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RedistributeDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers) GetRedistributeDelay() uint32 {
	if t == nil || t.RedistributeDelay == nil {
		return 1000
	}
	return *t.RedistributeDelay
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IncrementalSpfWait == nil {
		var v uint32 = 1000
		t.IncrementalSpfWait = &v
	}
	if t.LsaAccumulate == nil {
		var v uint32 = 1000
		t.LsaAccumulate = &v
	}
	if t.LsaArrival == nil {
		var v uint32 = 1000
		t.LsaArrival = &v
	}
	if t.RedistributeDelay == nil {
		var v uint32 = 1000
		t.RedistributeDelay = &v
	}
	t.LsaGenerate.PopulateDefaults()
	t.SpfWait.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers_LsaGenerate represents the /nokia-conf/configure/groups/group/router/ospf3/timers/lsa-generate YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers_LsaGenerate struct {
	LsaInitialWait *uint32 `path:"lsa-initial-wait" module:"nokia-conf"`
	LsaSecondWait  *uint32 `path:"lsa-second-wait" module:"nokia-conf"`
	MaxLsaWait     *uint32 `path:"max-lsa-wait" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers_LsaGenerate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers_LsaGenerate) IsYANGGoStruct() {}

// GetLsaInitialWait retrieves the value of the leaf LsaInitialWait from the NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers_LsaGenerate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LsaInitialWait is set, it can
// safely use t.GetLsaInitialWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LsaInitialWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers_LsaGenerate) GetLsaInitialWait() uint32 {
	if t == nil || t.LsaInitialWait == nil {
		return 5000
	}
	return *t.LsaInitialWait
}

// GetLsaSecondWait retrieves the value of the leaf LsaSecondWait from the NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers_LsaGenerate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LsaSecondWait is set, it can
// safely use t.GetLsaSecondWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LsaSecondWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers_LsaGenerate) GetLsaSecondWait() uint32 {
	if t == nil || t.LsaSecondWait == nil {
		return 5000
	}
	return *t.LsaSecondWait
}

// GetMaxLsaWait retrieves the value of the leaf MaxLsaWait from the NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers_LsaGenerate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxLsaWait is set, it can
// safely use t.GetMaxLsaWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxLsaWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers_LsaGenerate) GetMaxLsaWait() uint32 {
	if t == nil || t.MaxLsaWait == nil {
		return 5000
	}
	return *t.MaxLsaWait
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers_LsaGenerate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers_LsaGenerate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LsaInitialWait == nil {
		var v uint32 = 5000
		t.LsaInitialWait = &v
	}
	if t.LsaSecondWait == nil {
		var v uint32 = 5000
		t.LsaSecondWait = &v
	}
	if t.MaxLsaWait == nil {
		var v uint32 = 5000
		t.MaxLsaWait = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers_LsaGenerate) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers_LsaGenerate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers_LsaGenerate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers_LsaGenerate) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers_LsaGenerate.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers_LsaGenerate) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers_SpfWait represents the /nokia-conf/configure/groups/group/router/ospf3/timers/spf-wait YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers_SpfWait struct {
	SpfInitialWait *uint32 `path:"spf-initial-wait" module:"nokia-conf"`
	SpfMaxWait     *uint32 `path:"spf-max-wait" module:"nokia-conf"`
	SpfSecondWait  *uint32 `path:"spf-second-wait" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers_SpfWait implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers_SpfWait) IsYANGGoStruct() {}

// GetSpfInitialWait retrieves the value of the leaf SpfInitialWait from the NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers_SpfWait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SpfInitialWait is set, it can
// safely use t.GetSpfInitialWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SpfInitialWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers_SpfWait) GetSpfInitialWait() uint32 {
	if t == nil || t.SpfInitialWait == nil {
		return 1000
	}
	return *t.SpfInitialWait
}

// GetSpfMaxWait retrieves the value of the leaf SpfMaxWait from the NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers_SpfWait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SpfMaxWait is set, it can
// safely use t.GetSpfMaxWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SpfMaxWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers_SpfWait) GetSpfMaxWait() uint32 {
	if t == nil || t.SpfMaxWait == nil {
		return 10000
	}
	return *t.SpfMaxWait
}

// GetSpfSecondWait retrieves the value of the leaf SpfSecondWait from the NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers_SpfWait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SpfSecondWait is set, it can
// safely use t.GetSpfSecondWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SpfSecondWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers_SpfWait) GetSpfSecondWait() uint32 {
	if t == nil || t.SpfSecondWait == nil {
		return 1000
	}
	return *t.SpfSecondWait
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers_SpfWait
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers_SpfWait) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SpfInitialWait == nil {
		var v uint32 = 1000
		t.SpfInitialWait = &v
	}
	if t.SpfMaxWait == nil {
		var v uint32 = 10000
		t.SpfMaxWait = &v
	}
	if t.SpfSecondWait == nil {
		var v uint32 = 1000
		t.SpfSecondWait = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers_SpfWait) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers_SpfWait"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers_SpfWait) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers_SpfWait) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers_SpfWait.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf3_Timers_SpfWait) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf_Area represents the /nokia-conf/configure/groups/group/router/ospf/area YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf_Area struct {
	AdvertiseRouterCapability *bool                                                                                                                                `path:"advertise-router-capability" module:"nokia-conf"`
	AreaId                    *string                                                                                                                              `path:"area-id" module:"nokia-conf"`
	AreaRange                 map[string]*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_AreaRange                                                              `path:"area-range" module:"nokia-conf"`
	Bier                      *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Bier                                                                              `path:"bier" module:"nokia-conf"`
	BlackholeAggregate        *bool                                                                                                                                `path:"blackhole-aggregate" module:"nokia-conf"`
	DatabaseExportExclude     *bool                                                                                                                                `path:"database-export-exclude" module:"nokia-conf"`
	ExportPolicy              []string                                                                                                                             `path:"export-policy" module:"nokia-conf"`
	ImportPolicy              []string                                                                                                                             `path:"import-policy" module:"nokia-conf"`
	Interface                 map[string]*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface                                                              `path:"interface" module:"nokia-conf"`
	LoopfreeAlternateExclude  *bool                                                                                                                                `path:"loopfree-alternate-exclude" module:"nokia-conf"`
	Nssa                      *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa                                                                              `path:"nssa" module:"nokia-conf" yangPresence:"true"`
	Stub                      *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Stub                                                                              `path:"stub" module:"nokia-conf" yangPresence:"true"`
	VirtualLink               map[NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink_Key]*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink `path:"virtual-link" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf_Area implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_Area) IsYANGGoStruct() {}

// NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink_Key represents the key for list VirtualLink of element /nokia-conf/configure/groups/group/router/ospf/area.
type NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink_Key struct {
	RouterId    string `path:"router-id"`
	TransitArea string `path:"transit-area"`
}

// NewAreaRange creates a new entry in the AreaRange list of the
// NokiaConf_Configure_Groups_Group_Router_Ospf_Area struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area) NewAreaRange(IpPrefixMask string) (*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_AreaRange, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AreaRange == nil {
		t.AreaRange = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_AreaRange)
	}

	key := IpPrefixMask

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AreaRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AreaRange", key)
	}

	t.AreaRange[key] = &NokiaConf_Configure_Groups_Group_Router_Ospf_Area_AreaRange{
		IpPrefixMask: &IpPrefixMask,
	}

	return t.AreaRange[key], nil
}

// RenameAreaRange renames an entry in the list AreaRange within
// the NokiaConf_Configure_Groups_Group_Router_Ospf_Area struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area) RenameAreaRange(oldK, newK string) error {
	if _, ok := t.AreaRange[newK]; ok {
		return fmt.Errorf("key %v already exists in AreaRange", newK)
	}

	e, ok := t.AreaRange[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AreaRange", oldK)
	}
	e.IpPrefixMask = &newK

	t.AreaRange[newK] = e
	delete(t.AreaRange, oldK)
	return nil
}

// GetOrCreateAreaRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ospf_Area. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area) GetOrCreateAreaRange(IpPrefixMask string) *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_AreaRange {

	key := IpPrefixMask

	if v, ok := t.AreaRange[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAreaRange(IpPrefixMask)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAreaRange got unexpected error: %v", err))
	}
	return v
}

// GetAreaRange retrieves the value with the specified key from
// the AreaRange map field of NokiaConf_Configure_Groups_Group_Router_Ospf_Area. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area) GetAreaRange(IpPrefixMask string) *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_AreaRange {

	if t == nil {
		return nil
	}

	key := IpPrefixMask

	if lm, ok := t.AreaRange[key]; ok {
		return lm
	}
	return nil
}

// DeleteAreaRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ospf_Area. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area) DeleteAreaRange(IpPrefixMask string) {
	key := IpPrefixMask

	delete(t.AreaRange, key)
}

// AppendAreaRange appends the supplied NokiaConf_Configure_Groups_Group_Router_Ospf_Area_AreaRange struct to the
// list AreaRange of NokiaConf_Configure_Groups_Group_Router_Ospf_Area. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Ospf_Area_AreaRange already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area) AppendAreaRange(v *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_AreaRange) error {
	if v.IpPrefixMask == nil {
		return fmt.Errorf("invalid nil key received for IpPrefixMask")
	}

	key := *v.IpPrefixMask

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AreaRange == nil {
		t.AreaRange = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_AreaRange)
	}

	if _, ok := t.AreaRange[key]; ok {
		return fmt.Errorf("duplicate key for list AreaRange %v", key)
	}

	t.AreaRange[key] = v
	return nil
}

// NewInterface creates a new entry in the Interface list of the
// NokiaConf_Configure_Groups_Group_Router_Ospf_Area struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area) NewInterface(InterfaceName string) (*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface{
		InterfaceName: &InterfaceName,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the NokiaConf_Configure_Groups_Group_Router_Ospf_Area struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.InterfaceName = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ospf_Area. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area) GetOrCreateInterface(InterfaceName string) *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface {

	key := InterfaceName

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of NokiaConf_Configure_Groups_Group_Router_Ospf_Area. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area) GetInterface(InterfaceName string) *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface {

	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ospf_Area. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area) DeleteInterface(InterfaceName string) {
	key := InterfaceName

	delete(t.Interface, key)
}

// AppendInterface appends the supplied NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface struct to the
// list Interface of NokiaConf_Configure_Groups_Group_Router_Ospf_Area. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area) AppendInterface(v *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// NewVirtualLink creates a new entry in the VirtualLink list of the
// NokiaConf_Configure_Groups_Group_Router_Ospf_Area struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area) NewVirtualLink(RouterId string, TransitArea string) (*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VirtualLink == nil {
		t.VirtualLink = make(map[NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink_Key]*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink)
	}

	key := NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink_Key{
		RouterId:    RouterId,
		TransitArea: TransitArea,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.VirtualLink[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list VirtualLink", key)
	}

	t.VirtualLink[key] = &NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink{
		RouterId:    &RouterId,
		TransitArea: &TransitArea,
	}

	return t.VirtualLink[key], nil
}

// RenameVirtualLink renames an entry in the list VirtualLink within
// the NokiaConf_Configure_Groups_Group_Router_Ospf_Area struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area) RenameVirtualLink(oldK, newK NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink_Key) error {
	if _, ok := t.VirtualLink[newK]; ok {
		return fmt.Errorf("key %v already exists in VirtualLink", newK)
	}

	e, ok := t.VirtualLink[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in VirtualLink", oldK)
	}
	e.RouterId = &newK.RouterId
	e.TransitArea = &newK.TransitArea

	t.VirtualLink[newK] = e
	delete(t.VirtualLink, oldK)
	return nil
}

// GetOrCreateVirtualLink retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ospf_Area. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area) GetOrCreateVirtualLink(RouterId string, TransitArea string) *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink {

	key := NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink_Key{
		RouterId:    RouterId,
		TransitArea: TransitArea,
	}

	if v, ok := t.VirtualLink[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVirtualLink(RouterId, TransitArea)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVirtualLink got unexpected error: %v", err))
	}
	return v
}

// GetVirtualLink retrieves the value with the specified key from
// the VirtualLink map field of NokiaConf_Configure_Groups_Group_Router_Ospf_Area. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area) GetVirtualLink(RouterId string, TransitArea string) *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink_Key{
		RouterId:    RouterId,
		TransitArea: TransitArea,
	}

	if lm, ok := t.VirtualLink[key]; ok {
		return lm
	}
	return nil
}

// DeleteVirtualLink deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ospf_Area. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area) DeleteVirtualLink(RouterId string, TransitArea string) {
	key := NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink_Key{
		RouterId:    RouterId,
		TransitArea: TransitArea,
	}

	delete(t.VirtualLink, key)
}

// AppendVirtualLink appends the supplied NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink struct to the
// list VirtualLink of NokiaConf_Configure_Groups_Group_Router_Ospf_Area. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area) AppendVirtualLink(v *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink) error {
	if v.RouterId == nil {
		return fmt.Errorf("invalid nil key for RouterId")
	}

	if v.TransitArea == nil {
		return fmt.Errorf("invalid nil key for TransitArea")
	}

	key := NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink_Key{
		RouterId:    *v.RouterId,
		TransitArea: *v.TransitArea,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VirtualLink == nil {
		t.VirtualLink = make(map[NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink_Key]*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink)
	}

	if _, ok := t.VirtualLink[key]; ok {
		return fmt.Errorf("duplicate key for list VirtualLink %v", key)
	}

	t.VirtualLink[key] = v
	return nil
}

// GetOrCreateBier retrieves the value of the Bier field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area) GetOrCreateBier() *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Bier {
	if t.Bier != nil {
		return t.Bier
	}
	t.Bier = &NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Bier{}
	return t.Bier
}

// GetOrCreateNssa retrieves the value of the Nssa field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area) GetOrCreateNssa() *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa {
	if t.Nssa != nil {
		return t.Nssa
	}
	t.Nssa = &NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa{}
	return t.Nssa
}

// GetOrCreateStub retrieves the value of the Stub field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area) GetOrCreateStub() *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Stub {
	if t.Stub != nil {
		return t.Stub
	}
	t.Stub = &NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Stub{}
	return t.Stub
}

// GetBier returns the value of the Bier struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf_Area. If the receiver or the field Bier is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area) GetBier() *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Bier {
	if t != nil && t.Bier != nil {
		return t.Bier
	}
	return nil
}

// GetNssa returns the value of the Nssa struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf_Area. If the receiver or the field Nssa is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area) GetNssa() *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa {
	if t != nil && t.Nssa != nil {
		return t.Nssa
	}
	return nil
}

// GetStub returns the value of the Stub struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf_Area. If the receiver or the field Stub is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area) GetStub() *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Stub {
	if t != nil && t.Stub != nil {
		return t.Stub
	}
	return nil
}

// GetAdvertiseRouterCapability retrieves the value of the leaf AdvertiseRouterCapability from the NokiaConf_Configure_Groups_Group_Router_Ospf_Area
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseRouterCapability is set, it can
// safely use t.GetAdvertiseRouterCapability() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseRouterCapability == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area) GetAdvertiseRouterCapability() bool {
	if t == nil || t.AdvertiseRouterCapability == nil {
		return true
	}
	return *t.AdvertiseRouterCapability
}

// GetAreaId retrieves the value of the leaf AreaId from the NokiaConf_Configure_Groups_Group_Router_Ospf_Area
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AreaId is set, it can
// safely use t.GetAreaId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AreaId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area) GetAreaId() string {
	if t == nil || t.AreaId == nil {
		return ""
	}
	return *t.AreaId
}

// GetBlackholeAggregate retrieves the value of the leaf BlackholeAggregate from the NokiaConf_Configure_Groups_Group_Router_Ospf_Area
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BlackholeAggregate is set, it can
// safely use t.GetBlackholeAggregate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BlackholeAggregate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area) GetBlackholeAggregate() bool {
	if t == nil || t.BlackholeAggregate == nil {
		return true
	}
	return *t.BlackholeAggregate
}

// GetDatabaseExportExclude retrieves the value of the leaf DatabaseExportExclude from the NokiaConf_Configure_Groups_Group_Router_Ospf_Area
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DatabaseExportExclude is set, it can
// safely use t.GetDatabaseExportExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DatabaseExportExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area) GetDatabaseExportExclude() bool {
	if t == nil || t.DatabaseExportExclude == nil {
		return false
	}
	return *t.DatabaseExportExclude
}

// GetExportPolicy retrieves the value of the leaf ExportPolicy from the NokiaConf_Configure_Groups_Group_Router_Ospf_Area
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportPolicy is set, it can
// safely use t.GetExportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area) GetExportPolicy() []string {
	if t == nil || t.ExportPolicy == nil {
		return nil
	}
	return t.ExportPolicy
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Groups_Group_Router_Ospf_Area
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area) GetImportPolicy() []string {
	if t == nil || t.ImportPolicy == nil {
		return nil
	}
	return t.ImportPolicy
}

// GetLoopfreeAlternateExclude retrieves the value of the leaf LoopfreeAlternateExclude from the NokiaConf_Configure_Groups_Group_Router_Ospf_Area
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoopfreeAlternateExclude is set, it can
// safely use t.GetLoopfreeAlternateExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoopfreeAlternateExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area) GetLoopfreeAlternateExclude() bool {
	if t == nil || t.LoopfreeAlternateExclude == nil {
		return false
	}
	return *t.LoopfreeAlternateExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf_Area
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdvertiseRouterCapability == nil {
		var v bool = true
		t.AdvertiseRouterCapability = &v
	}
	if t.BlackholeAggregate == nil {
		var v bool = true
		t.BlackholeAggregate = &v
	}
	if t.DatabaseExportExclude == nil {
		var v bool = false
		t.DatabaseExportExclude = &v
	}
	if t.LoopfreeAlternateExclude == nil {
		var v bool = false
		t.LoopfreeAlternateExclude = &v
	}
	t.Bier.PopulateDefaults()
	t.Nssa.PopulateDefaults()
	t.Stub.PopulateDefaults()
	for _, e := range t.AreaRange {
		e.PopulateDefaults()
	}
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
	for _, e := range t.VirtualLink {
		e.PopulateDefaults()
	}
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Ospf_Area struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.AreaId == nil {
		return nil, fmt.Errorf("nil value for key AreaId")
	}

	return map[string]interface{}{
		"area-id": *t.AreaId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf_Area"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf_Area.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_Area) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf_Area_AreaRange represents the /nokia-conf/configure/groups/group/router/ospf/area/area-range YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf_Area_AreaRange struct {
	Advertise    *bool   `path:"advertise" module:"nokia-conf"`
	IpPrefixMask *string `path:"ip-prefix-mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf_Area_AreaRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_AreaRange) IsYANGGoStruct() {}

// GetAdvertise retrieves the value of the leaf Advertise from the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_AreaRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Advertise is set, it can
// safely use t.GetAdvertise() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Advertise == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_AreaRange) GetAdvertise() bool {
	if t == nil || t.Advertise == nil {
		return true
	}
	return *t.Advertise
}

// GetIpPrefixMask retrieves the value of the leaf IpPrefixMask from the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_AreaRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefixMask is set, it can
// safely use t.GetIpPrefixMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefixMask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_AreaRange) GetIpPrefixMask() string {
	if t == nil || t.IpPrefixMask == nil {
		return ""
	}
	return *t.IpPrefixMask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_AreaRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_AreaRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Advertise == nil {
		var v bool = true
		t.Advertise = &v
	}
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_AreaRange struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_AreaRange) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefixMask == nil {
		return nil, fmt.Errorf("nil value for key IpPrefixMask")
	}

	return map[string]interface{}{
		"ip-prefix-mask": *t.IpPrefixMask,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_AreaRange) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf_Area_AreaRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_AreaRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_AreaRange) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf_Area_AreaRange.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_AreaRange) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Bier represents the /nokia-conf/configure/groups/group/router/ospf/area/bier YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Bier struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Template   *string                     `path:"template" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Bier implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Bier) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Bier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Bier) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetTemplate retrieves the value of the leaf Template from the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Bier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Template is set, it can
// safely use t.GetTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Template == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Bier) GetTemplate() string {
	if t == nil || t.Template == nil {
		return ""
	}
	return *t.Template
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Bier
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Bier) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Bier) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Bier"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Bier) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Bier) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Bier.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Bier) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface represents the /nokia-conf/configure/groups/group/router/ospf/area/interface YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface struct {
	AdjacencySet              map[NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_AdjacencySet_Id_Union]*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_AdjacencySet            `path:"adjacency-set" module:"nokia-conf"`
	AdjacencySid              *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_AdjacencySid                                                                                                  `path:"adjacency-sid" module:"nokia-conf" yangPresence:"true"`
	AdminState                E_NokiaTypesSros_AdminState                                                                                                                                                `path:"admin-state" module:"nokia-conf"`
	AdvertiseRouterCapability *bool                                                                                                                                                                      `path:"advertise-router-capability" module:"nokia-conf"`
	AdvertiseSubnet           *bool                                                                                                                                                                      `path:"advertise-subnet" module:"nokia-conf"`
	AuthenticationKey         *string                                                                                                                                                                    `path:"authentication-key" module:"nokia-conf"`
	AuthenticationKeychain    *string                                                                                                                                                                    `path:"authentication-keychain" module:"nokia-conf"`
	AuthenticationType        E_NokiaTypesOspf_AuthenticationType                                                                                                                                        `path:"authentication-type" module:"nokia-conf"`
	BfdLiveness               *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_BfdLiveness                                                                                                   `path:"bfd-liveness" module:"nokia-conf" yangPresence:"true"`
	DeadInterval              *uint32                                                                                                                                                                    `path:"dead-interval" module:"nokia-conf"`
	FlexAlgo                  map[NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_FlexAlgo_FlexAlgoId_Union]*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_FlexAlgo            `path:"flex-algo" module:"nokia-conf"`
	HelloInterval             *uint32                                                                                                                                                                    `path:"hello-interval" module:"nokia-conf"`
	InterfaceName             *string                                                                                                                                                                    `path:"interface-name" module:"nokia-conf"`
	InterfaceType             E_NokiaTypesOspf_InterfaceType                                                                                                                                             `path:"interface-type" module:"nokia-conf"`
	LoadBalancingWeight       *uint32                                                                                                                                                                    `path:"load-balancing-weight" module:"nokia-conf"`
	LoopfreeAlternate         *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_LoopfreeAlternate                                                                                             `path:"loopfree-alternate" module:"nokia-conf"`
	LsaFilterOut              E_NokiaTypesOspf_LsaFilterOut                                                                                                                                              `path:"lsa-filter-out" module:"nokia-conf"`
	MessageDigestKey          map[NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_MessageDigestKey_KeyId_Union]*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_MessageDigestKey `path:"message-digest-key" module:"nokia-conf"`
	Metric                    *uint32                                                                                                                                                                    `path:"metric" module:"nokia-conf"`
	Mtu                       *uint32                                                                                                                                                                    `path:"mtu" module:"nokia-conf"`
	Neighbor                  map[string]*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_Neighbor                                                                                           `path:"neighbor" module:"nokia-conf"`
	NodeSid                   *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_NodeSid                                                                                                       `path:"node-sid" module:"nokia-conf" yangPresence:"true"`
	Passive                   *bool                                                                                                                                                                      `path:"passive" module:"nokia-conf"`
	PollInterval              *uint32                                                                                                                                                                    `path:"poll-interval" module:"nokia-conf"`
	Priority                  *uint16                                                                                                                                                                    `path:"priority" module:"nokia-conf"`
	RetransmitInterval        *uint32                                                                                                                                                                    `path:"retransmit-interval" module:"nokia-conf"`
	RibPriority               E_NokiaTypesOspf_RibPriority                                                                                                                                               `path:"rib-priority" module:"nokia-conf"`
	SidProtection             *bool                                                                                                                                                                      `path:"sid-protection" module:"nokia-conf"`
	TransitDelay              *uint32                                                                                                                                                                    `path:"transit-delay" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface) IsYANGGoStruct() {}

// NewAdjacencySet creates a new entry in the AdjacencySet list of the
// NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface) NewAdjacencySet(Id NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_AdjacencySet_Id_Union) (*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_AdjacencySet, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AdjacencySet == nil {
		t.AdjacencySet = make(map[NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_AdjacencySet_Id_Union]*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_AdjacencySet)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AdjacencySet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AdjacencySet", key)
	}

	t.AdjacencySet[key] = &NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_AdjacencySet{
		Id: Id,
	}

	return t.AdjacencySet[key], nil
}

// RenameAdjacencySet renames an entry in the list AdjacencySet within
// the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface) RenameAdjacencySet(oldK, newK NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_AdjacencySet_Id_Union) error {
	if _, ok := t.AdjacencySet[newK]; ok {
		return fmt.Errorf("key %v already exists in AdjacencySet", newK)
	}

	e, ok := t.AdjacencySet[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AdjacencySet", oldK)
	}
	e.Id = newK

	t.AdjacencySet[newK] = e
	delete(t.AdjacencySet, oldK)
	return nil
}

// GetOrCreateAdjacencySet retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface) GetOrCreateAdjacencySet(Id NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_AdjacencySet_Id_Union) *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_AdjacencySet {

	key := Id

	if v, ok := t.AdjacencySet[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAdjacencySet(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAdjacencySet got unexpected error: %v", err))
	}
	return v
}

// GetAdjacencySet retrieves the value with the specified key from
// the AdjacencySet map field of NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface) GetAdjacencySet(Id NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_AdjacencySet_Id_Union) *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_AdjacencySet {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.AdjacencySet[key]; ok {
		return lm
	}
	return nil
}

// DeleteAdjacencySet deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface) DeleteAdjacencySet(Id NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_AdjacencySet_Id_Union) {
	key := Id

	delete(t.AdjacencySet, key)
}

// AppendAdjacencySet appends the supplied NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_AdjacencySet struct to the
// list AdjacencySet of NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_AdjacencySet already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface) AppendAdjacencySet(v *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_AdjacencySet) error {
	key := v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AdjacencySet == nil {
		t.AdjacencySet = make(map[NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_AdjacencySet_Id_Union]*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_AdjacencySet)
	}

	if _, ok := t.AdjacencySet[key]; ok {
		return fmt.Errorf("duplicate key for list AdjacencySet %v", key)
	}

	t.AdjacencySet[key] = v
	return nil
}

// NewFlexAlgo creates a new entry in the FlexAlgo list of the
// NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface) NewFlexAlgo(FlexAlgoId NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_FlexAlgo_FlexAlgoId_Union) (*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_FlexAlgo, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FlexAlgo == nil {
		t.FlexAlgo = make(map[NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_FlexAlgo_FlexAlgoId_Union]*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_FlexAlgo)
	}

	key := FlexAlgoId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.FlexAlgo[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list FlexAlgo", key)
	}

	t.FlexAlgo[key] = &NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_FlexAlgo{
		FlexAlgoId: FlexAlgoId,
	}

	return t.FlexAlgo[key], nil
}

// RenameFlexAlgo renames an entry in the list FlexAlgo within
// the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface) RenameFlexAlgo(oldK, newK NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_FlexAlgo_FlexAlgoId_Union) error {
	if _, ok := t.FlexAlgo[newK]; ok {
		return fmt.Errorf("key %v already exists in FlexAlgo", newK)
	}

	e, ok := t.FlexAlgo[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in FlexAlgo", oldK)
	}
	e.FlexAlgoId = newK

	t.FlexAlgo[newK] = e
	delete(t.FlexAlgo, oldK)
	return nil
}

// GetOrCreateFlexAlgo retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface) GetOrCreateFlexAlgo(FlexAlgoId NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_FlexAlgo_FlexAlgoId_Union) *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_FlexAlgo {

	key := FlexAlgoId

	if v, ok := t.FlexAlgo[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFlexAlgo(FlexAlgoId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFlexAlgo got unexpected error: %v", err))
	}
	return v
}

// GetFlexAlgo retrieves the value with the specified key from
// the FlexAlgo map field of NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface) GetFlexAlgo(FlexAlgoId NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_FlexAlgo_FlexAlgoId_Union) *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_FlexAlgo {

	if t == nil {
		return nil
	}

	key := FlexAlgoId

	if lm, ok := t.FlexAlgo[key]; ok {
		return lm
	}
	return nil
}

// DeleteFlexAlgo deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface) DeleteFlexAlgo(FlexAlgoId NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_FlexAlgo_FlexAlgoId_Union) {
	key := FlexAlgoId

	delete(t.FlexAlgo, key)
}

// AppendFlexAlgo appends the supplied NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_FlexAlgo struct to the
// list FlexAlgo of NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_FlexAlgo already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface) AppendFlexAlgo(v *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_FlexAlgo) error {
	key := v.FlexAlgoId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FlexAlgo == nil {
		t.FlexAlgo = make(map[NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_FlexAlgo_FlexAlgoId_Union]*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_FlexAlgo)
	}

	if _, ok := t.FlexAlgo[key]; ok {
		return fmt.Errorf("duplicate key for list FlexAlgo %v", key)
	}

	t.FlexAlgo[key] = v
	return nil
}

// NewMessageDigestKey creates a new entry in the MessageDigestKey list of the
// NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface) NewMessageDigestKey(KeyId NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_MessageDigestKey_KeyId_Union) (*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_MessageDigestKey, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MessageDigestKey == nil {
		t.MessageDigestKey = make(map[NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_MessageDigestKey_KeyId_Union]*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_MessageDigestKey)
	}

	key := KeyId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MessageDigestKey[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MessageDigestKey", key)
	}

	t.MessageDigestKey[key] = &NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_MessageDigestKey{
		KeyId: KeyId,
	}

	return t.MessageDigestKey[key], nil
}

// RenameMessageDigestKey renames an entry in the list MessageDigestKey within
// the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface) RenameMessageDigestKey(oldK, newK NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_MessageDigestKey_KeyId_Union) error {
	if _, ok := t.MessageDigestKey[newK]; ok {
		return fmt.Errorf("key %v already exists in MessageDigestKey", newK)
	}

	e, ok := t.MessageDigestKey[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MessageDigestKey", oldK)
	}
	e.KeyId = newK

	t.MessageDigestKey[newK] = e
	delete(t.MessageDigestKey, oldK)
	return nil
}

// GetOrCreateMessageDigestKey retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface) GetOrCreateMessageDigestKey(KeyId NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_MessageDigestKey_KeyId_Union) *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_MessageDigestKey {

	key := KeyId

	if v, ok := t.MessageDigestKey[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMessageDigestKey(KeyId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMessageDigestKey got unexpected error: %v", err))
	}
	return v
}

// GetMessageDigestKey retrieves the value with the specified key from
// the MessageDigestKey map field of NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface) GetMessageDigestKey(KeyId NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_MessageDigestKey_KeyId_Union) *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_MessageDigestKey {

	if t == nil {
		return nil
	}

	key := KeyId

	if lm, ok := t.MessageDigestKey[key]; ok {
		return lm
	}
	return nil
}

// DeleteMessageDigestKey deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface) DeleteMessageDigestKey(KeyId NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_MessageDigestKey_KeyId_Union) {
	key := KeyId

	delete(t.MessageDigestKey, key)
}

// AppendMessageDigestKey appends the supplied NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_MessageDigestKey struct to the
// list MessageDigestKey of NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_MessageDigestKey already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface) AppendMessageDigestKey(v *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_MessageDigestKey) error {
	key := v.KeyId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MessageDigestKey == nil {
		t.MessageDigestKey = make(map[NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_MessageDigestKey_KeyId_Union]*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_MessageDigestKey)
	}

	if _, ok := t.MessageDigestKey[key]; ok {
		return fmt.Errorf("duplicate key for list MessageDigestKey %v", key)
	}

	t.MessageDigestKey[key] = v
	return nil
}

// NewNeighbor creates a new entry in the Neighbor list of the
// NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface) NewNeighbor(Address string) (*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_Neighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_Neighbor)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_Neighbor{
		Address: &Address,
	}

	return t.Neighbor[key], nil
}

// RenameNeighbor renames an entry in the list Neighbor within
// the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface) RenameNeighbor(oldK, newK string) error {
	if _, ok := t.Neighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in Neighbor", newK)
	}

	e, ok := t.Neighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Neighbor", oldK)
	}
	e.Address = &newK

	t.Neighbor[newK] = e
	delete(t.Neighbor, oldK)
	return nil
}

// GetOrCreateNeighbor retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface) GetOrCreateNeighbor(Address string) *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_Neighbor {

	key := Address

	if v, ok := t.Neighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNeighbor(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetNeighbor retrieves the value with the specified key from
// the Neighbor map field of NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface) GetNeighbor(Address string) *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_Neighbor {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.Neighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteNeighbor deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface) DeleteNeighbor(Address string) {
	key := Address

	delete(t.Neighbor, key)
}

// AppendNeighbor appends the supplied NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_Neighbor struct to the
// list Neighbor of NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_Neighbor already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface) AppendNeighbor(v *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_Neighbor) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_Neighbor)
	}

	if _, ok := t.Neighbor[key]; ok {
		return fmt.Errorf("duplicate key for list Neighbor %v", key)
	}

	t.Neighbor[key] = v
	return nil
}

// GetOrCreateAdjacencySid retrieves the value of the AdjacencySid field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface) GetOrCreateAdjacencySid() *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_AdjacencySid {
	if t.AdjacencySid != nil {
		return t.AdjacencySid
	}
	t.AdjacencySid = &NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_AdjacencySid{}
	return t.AdjacencySid
}

// GetOrCreateBfdLiveness retrieves the value of the BfdLiveness field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface) GetOrCreateBfdLiveness() *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_BfdLiveness {
	if t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	t.BfdLiveness = &NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_BfdLiveness{}
	return t.BfdLiveness
}

// GetOrCreateLoopfreeAlternate retrieves the value of the LoopfreeAlternate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface) GetOrCreateLoopfreeAlternate() *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_LoopfreeAlternate {
	if t.LoopfreeAlternate != nil {
		return t.LoopfreeAlternate
	}
	t.LoopfreeAlternate = &NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_LoopfreeAlternate{}
	return t.LoopfreeAlternate
}

// GetOrCreateNodeSid retrieves the value of the NodeSid field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface) GetOrCreateNodeSid() *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_NodeSid {
	if t.NodeSid != nil {
		return t.NodeSid
	}
	t.NodeSid = &NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_NodeSid{}
	return t.NodeSid
}

// GetAdjacencySid returns the value of the AdjacencySid struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface. If the receiver or the field AdjacencySid is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface) GetAdjacencySid() *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_AdjacencySid {
	if t != nil && t.AdjacencySid != nil {
		return t.AdjacencySid
	}
	return nil
}

// GetBfdLiveness returns the value of the BfdLiveness struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface. If the receiver or the field BfdLiveness is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface) GetBfdLiveness() *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_BfdLiveness {
	if t != nil && t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	return nil
}

// GetLoopfreeAlternate returns the value of the LoopfreeAlternate struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface. If the receiver or the field LoopfreeAlternate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface) GetLoopfreeAlternate() *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_LoopfreeAlternate {
	if t != nil && t.LoopfreeAlternate != nil {
		return t.LoopfreeAlternate
	}
	return nil
}

// GetNodeSid returns the value of the NodeSid struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface. If the receiver or the field NodeSid is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface) GetNodeSid() *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_NodeSid {
	if t != nil && t.NodeSid != nil {
		return t.NodeSid
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetAdvertiseRouterCapability retrieves the value of the leaf AdvertiseRouterCapability from the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseRouterCapability is set, it can
// safely use t.GetAdvertiseRouterCapability() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseRouterCapability == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface) GetAdvertiseRouterCapability() bool {
	if t == nil || t.AdvertiseRouterCapability == nil {
		return true
	}
	return *t.AdvertiseRouterCapability
}

// GetAdvertiseSubnet retrieves the value of the leaf AdvertiseSubnet from the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertiseSubnet is set, it can
// safely use t.GetAdvertiseSubnet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertiseSubnet == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface) GetAdvertiseSubnet() bool {
	if t == nil || t.AdvertiseSubnet == nil {
		return true
	}
	return *t.AdvertiseSubnet
}

// GetAuthenticationKey retrieves the value of the leaf AuthenticationKey from the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKey is set, it can
// safely use t.GetAuthenticationKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface) GetAuthenticationKey() string {
	if t == nil || t.AuthenticationKey == nil {
		return ""
	}
	return *t.AuthenticationKey
}

// GetAuthenticationKeychain retrieves the value of the leaf AuthenticationKeychain from the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKeychain is set, it can
// safely use t.GetAuthenticationKeychain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKeychain == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface) GetAuthenticationKeychain() string {
	if t == nil || t.AuthenticationKeychain == nil {
		return ""
	}
	return *t.AuthenticationKeychain
}

// GetAuthenticationType retrieves the value of the leaf AuthenticationType from the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationType is set, it can
// safely use t.GetAuthenticationType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface) GetAuthenticationType() E_NokiaTypesOspf_AuthenticationType {
	if t == nil || t.AuthenticationType == 0 {
		return 0
	}
	return t.AuthenticationType
}

// GetDeadInterval retrieves the value of the leaf DeadInterval from the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DeadInterval is set, it can
// safely use t.GetDeadInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DeadInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface) GetDeadInterval() uint32 {
	if t == nil || t.DeadInterval == nil {
		return 0
	}
	return *t.DeadInterval
}

// GetHelloInterval retrieves the value of the leaf HelloInterval from the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloInterval is set, it can
// safely use t.GetHelloInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface) GetHelloInterval() uint32 {
	if t == nil || t.HelloInterval == nil {
		return 10
	}
	return *t.HelloInterval
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetInterfaceType retrieves the value of the leaf InterfaceType from the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceType is set, it can
// safely use t.GetInterfaceType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface) GetInterfaceType() E_NokiaTypesOspf_InterfaceType {
	if t == nil || t.InterfaceType == 0 {
		return 0
	}
	return t.InterfaceType
}

// GetLoadBalancingWeight retrieves the value of the leaf LoadBalancingWeight from the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoadBalancingWeight is set, it can
// safely use t.GetLoadBalancingWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoadBalancingWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface) GetLoadBalancingWeight() uint32 {
	if t == nil || t.LoadBalancingWeight == nil {
		return 0
	}
	return *t.LoadBalancingWeight
}

// GetLsaFilterOut retrieves the value of the leaf LsaFilterOut from the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LsaFilterOut is set, it can
// safely use t.GetLsaFilterOut() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LsaFilterOut == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface) GetLsaFilterOut() E_NokiaTypesOspf_LsaFilterOut {
	if t == nil || t.LsaFilterOut == 0 {
		return NokiaTypesOspf_LsaFilterOut_none
	}
	return t.LsaFilterOut
}

// GetMetric retrieves the value of the leaf Metric from the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Metric is set, it can
// safely use t.GetMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Metric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface) GetMetric() uint32 {
	if t == nil || t.Metric == nil {
		return 0
	}
	return *t.Metric
}

// GetMtu retrieves the value of the leaf Mtu from the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mtu is set, it can
// safely use t.GetMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface) GetMtu() uint32 {
	if t == nil || t.Mtu == nil {
		return 0
	}
	return *t.Mtu
}

// GetPassive retrieves the value of the leaf Passive from the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Passive is set, it can
// safely use t.GetPassive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Passive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface) GetPassive() bool {
	if t == nil || t.Passive == nil {
		return false
	}
	return *t.Passive
}

// GetPollInterval retrieves the value of the leaf PollInterval from the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PollInterval is set, it can
// safely use t.GetPollInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PollInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface) GetPollInterval() uint32 {
	if t == nil || t.PollInterval == nil {
		return 120
	}
	return *t.PollInterval
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface) GetPriority() uint16 {
	if t == nil || t.Priority == nil {
		return 1
	}
	return *t.Priority
}

// GetRetransmitInterval retrieves the value of the leaf RetransmitInterval from the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetransmitInterval is set, it can
// safely use t.GetRetransmitInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetransmitInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface) GetRetransmitInterval() uint32 {
	if t == nil || t.RetransmitInterval == nil {
		return 5
	}
	return *t.RetransmitInterval
}

// GetRibPriority retrieves the value of the leaf RibPriority from the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RibPriority is set, it can
// safely use t.GetRibPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RibPriority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface) GetRibPriority() E_NokiaTypesOspf_RibPriority {
	if t == nil || t.RibPriority == 0 {
		return 0
	}
	return t.RibPriority
}

// GetSidProtection retrieves the value of the leaf SidProtection from the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SidProtection is set, it can
// safely use t.GetSidProtection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SidProtection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface) GetSidProtection() bool {
	if t == nil || t.SidProtection == nil {
		return true
	}
	return *t.SidProtection
}

// GetTransitDelay retrieves the value of the leaf TransitDelay from the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransitDelay is set, it can
// safely use t.GetTransitDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransitDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface) GetTransitDelay() uint32 {
	if t == nil || t.TransitDelay == nil {
		return 1
	}
	return *t.TransitDelay
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.AdvertiseRouterCapability == nil {
		var v bool = true
		t.AdvertiseRouterCapability = &v
	}
	if t.AdvertiseSubnet == nil {
		var v bool = true
		t.AdvertiseSubnet = &v
	}
	if t.HelloInterval == nil {
		var v uint32 = 10
		t.HelloInterval = &v
	}
	if t.LsaFilterOut == 0 {
		t.LsaFilterOut = NokiaTypesOspf_LsaFilterOut_none
	}
	if t.PollInterval == nil {
		var v uint32 = 120
		t.PollInterval = &v
	}
	if t.Priority == nil {
		var v uint16 = 1
		t.Priority = &v
	}
	if t.RetransmitInterval == nil {
		var v uint32 = 5
		t.RetransmitInterval = &v
	}
	if t.SidProtection == nil {
		var v bool = true
		t.SidProtection = &v
	}
	if t.TransitDelay == nil {
		var v uint32 = 1
		t.TransitDelay = &v
	}
	t.AdjacencySid.PopulateDefaults()
	t.BfdLiveness.PopulateDefaults()
	t.LoopfreeAlternate.PopulateDefaults()
	t.NodeSid.PopulateDefaults()
	for _, e := range t.AdjacencySet {
		e.PopulateDefaults()
	}
	for _, e := range t.FlexAlgo {
		e.PopulateDefaults()
	}
	for _, e := range t.MessageDigestKey {
		e.PopulateDefaults()
	}
	for _, e := range t.Neighbor {
		e.PopulateDefaults()
	}
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_AdjacencySet represents the /nokia-conf/configure/groups/group/router/ospf/area/interface/adjacency-set YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_AdjacencySet struct {
	Id NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_AdjacencySet_Id_Union `path:"id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_AdjacencySet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_AdjacencySet) IsYANGGoStruct() {}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_AdjacencySet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_AdjacencySet) GetId() NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_AdjacencySet_Id_Union {
	if t == nil || t.Id == nil {
		return nil
	}
	return t.Id
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_AdjacencySet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_AdjacencySet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_AdjacencySet struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_AdjacencySet) Î›ListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"id": t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_AdjacencySet) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_AdjacencySet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_AdjacencySet) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_AdjacencySet) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_AdjacencySet.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_AdjacencySet) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_AdjacencySid represents the /nokia-conf/configure/groups/group/router/ospf/area/interface/adjacency-sid YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_AdjacencySid struct {
	Label *int64 `path:"label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_AdjacencySid implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_AdjacencySid) IsYANGGoStruct() {}

// GetLabel retrieves the value of the leaf Label from the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_AdjacencySid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Label is set, it can
// safely use t.GetLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Label == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_AdjacencySid) GetLabel() int64 {
	if t == nil || t.Label == nil {
		return 0
	}
	return *t.Label
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_AdjacencySid
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_AdjacencySid) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_AdjacencySid) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_AdjacencySid"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_AdjacencySid) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_AdjacencySid) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_AdjacencySid.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_AdjacencySid) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_BfdLiveness represents the /nokia-conf/configure/groups/group/router/ospf/area/interface/bfd-liveness YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_BfdLiveness struct {
	RemainDownOnFailure *bool `path:"remain-down-on-failure" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_BfdLiveness implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_BfdLiveness) IsYANGGoStruct() {}

// GetRemainDownOnFailure retrieves the value of the leaf RemainDownOnFailure from the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemainDownOnFailure is set, it can
// safely use t.GetRemainDownOnFailure() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemainDownOnFailure == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_BfdLiveness) GetRemainDownOnFailure() bool {
	if t == nil || t.RemainDownOnFailure == nil {
		return false
	}
	return *t.RemainDownOnFailure
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_BfdLiveness
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_BfdLiveness) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RemainDownOnFailure == nil {
		var v bool = false
		t.RemainDownOnFailure = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_BfdLiveness) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_BfdLiveness"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_BfdLiveness) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_BfdLiveness) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_BfdLiveness.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_BfdLiveness) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_FlexAlgo represents the /nokia-conf/configure/groups/group/router/ospf/area/interface/flex-algo YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_FlexAlgo struct {
	FlexAlgoId NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_FlexAlgo_FlexAlgoId_Union `path:"flex-algo-id" module:"nokia-conf"`
	NodeSid    *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_FlexAlgo_NodeSid         `path:"node-sid" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_FlexAlgo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_FlexAlgo) IsYANGGoStruct() {}

// GetOrCreateNodeSid retrieves the value of the NodeSid field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_FlexAlgo) GetOrCreateNodeSid() *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_FlexAlgo_NodeSid {
	if t.NodeSid != nil {
		return t.NodeSid
	}
	t.NodeSid = &NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_FlexAlgo_NodeSid{}
	return t.NodeSid
}

// GetNodeSid returns the value of the NodeSid struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_FlexAlgo. If the receiver or the field NodeSid is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_FlexAlgo) GetNodeSid() *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_FlexAlgo_NodeSid {
	if t != nil && t.NodeSid != nil {
		return t.NodeSid
	}
	return nil
}

// GetFlexAlgoId retrieves the value of the leaf FlexAlgoId from the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_FlexAlgo
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlexAlgoId is set, it can
// safely use t.GetFlexAlgoId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlexAlgoId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_FlexAlgo) GetFlexAlgoId() NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_FlexAlgo_FlexAlgoId_Union {
	if t == nil || t.FlexAlgoId == nil {
		return nil
	}
	return t.FlexAlgoId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_FlexAlgo
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_FlexAlgo) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.NodeSid.PopulateDefaults()
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_FlexAlgo struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_FlexAlgo) Î›ListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"flex-algo-id": t.FlexAlgoId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_FlexAlgo) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_FlexAlgo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_FlexAlgo) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_FlexAlgo) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_FlexAlgo.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_FlexAlgo) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_FlexAlgo_NodeSid represents the /nokia-conf/configure/groups/group/router/ospf/area/interface/flex-algo/node-sid YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_FlexAlgo_NodeSid struct {
	Index *int64 `path:"index" module:"nokia-conf"`
	Label *int64 `path:"label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_FlexAlgo_NodeSid implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_FlexAlgo_NodeSid) IsYANGGoStruct() {
}

// GetIndex retrieves the value of the leaf Index from the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_FlexAlgo_NodeSid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_FlexAlgo_NodeSid) GetIndex() int64 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetLabel retrieves the value of the leaf Label from the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_FlexAlgo_NodeSid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Label is set, it can
// safely use t.GetLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Label == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_FlexAlgo_NodeSid) GetLabel() int64 {
	if t == nil || t.Label == nil {
		return 0
	}
	return *t.Label
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_FlexAlgo_NodeSid
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_FlexAlgo_NodeSid) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_FlexAlgo_NodeSid) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_FlexAlgo_NodeSid"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_FlexAlgo_NodeSid) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_FlexAlgo_NodeSid) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_FlexAlgo_NodeSid.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_FlexAlgo_NodeSid) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_LoopfreeAlternate represents the /nokia-conf/configure/groups/group/router/ospf/area/interface/loopfree-alternate YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_LoopfreeAlternate struct {
	Exclude   *bool                                                                                    `path:"exclude" module:"nokia-conf"`
	PolicyMap *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_LoopfreeAlternate_PolicyMap `path:"policy-map" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_LoopfreeAlternate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_LoopfreeAlternate) IsYANGGoStruct() {
}

// GetOrCreatePolicyMap retrieves the value of the PolicyMap field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_LoopfreeAlternate) GetOrCreatePolicyMap() *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_LoopfreeAlternate_PolicyMap {
	if t.PolicyMap != nil {
		return t.PolicyMap
	}
	t.PolicyMap = &NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_LoopfreeAlternate_PolicyMap{}
	return t.PolicyMap
}

// GetPolicyMap returns the value of the PolicyMap struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_LoopfreeAlternate. If the receiver or the field PolicyMap is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_LoopfreeAlternate) GetPolicyMap() *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_LoopfreeAlternate_PolicyMap {
	if t != nil && t.PolicyMap != nil {
		return t.PolicyMap
	}
	return nil
}

// GetExclude retrieves the value of the leaf Exclude from the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_LoopfreeAlternate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Exclude is set, it can
// safely use t.GetExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Exclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_LoopfreeAlternate) GetExclude() bool {
	if t == nil || t.Exclude == nil {
		return false
	}
	return *t.Exclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_LoopfreeAlternate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_LoopfreeAlternate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Exclude == nil {
		var v bool = false
		t.Exclude = &v
	}
	t.PolicyMap.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_LoopfreeAlternate) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_LoopfreeAlternate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_LoopfreeAlternate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_LoopfreeAlternate) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_LoopfreeAlternate.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_LoopfreeAlternate) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_LoopfreeAlternate_PolicyMap represents the /nokia-conf/configure/groups/group/router/ospf/area/interface/loopfree-alternate/policy-map YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_LoopfreeAlternate_PolicyMap struct {
	RouteNhTemplate *string `path:"route-nh-template" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_LoopfreeAlternate_PolicyMap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_LoopfreeAlternate_PolicyMap) IsYANGGoStruct() {
}

// GetRouteNhTemplate retrieves the value of the leaf RouteNhTemplate from the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_LoopfreeAlternate_PolicyMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteNhTemplate is set, it can
// safely use t.GetRouteNhTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteNhTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_LoopfreeAlternate_PolicyMap) GetRouteNhTemplate() string {
	if t == nil || t.RouteNhTemplate == nil {
		return ""
	}
	return *t.RouteNhTemplate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_LoopfreeAlternate_PolicyMap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_LoopfreeAlternate_PolicyMap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_LoopfreeAlternate_PolicyMap) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_LoopfreeAlternate_PolicyMap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_LoopfreeAlternate_PolicyMap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_LoopfreeAlternate_PolicyMap) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_LoopfreeAlternate_PolicyMap.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_LoopfreeAlternate_PolicyMap) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_MessageDigestKey represents the /nokia-conf/configure/groups/group/router/ospf/area/interface/message-digest-key YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_MessageDigestKey struct {
	KeyId NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_MessageDigestKey_KeyId_Union `path:"key-id" module:"nokia-conf"`
	Md5   *string                                                                                  `path:"md5" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_MessageDigestKey implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_MessageDigestKey) IsYANGGoStruct() {
}

// GetKeyId retrieves the value of the leaf KeyId from the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_MessageDigestKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeyId is set, it can
// safely use t.GetKeyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeyId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_MessageDigestKey) GetKeyId() NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_MessageDigestKey_KeyId_Union {
	if t == nil || t.KeyId == nil {
		return nil
	}
	return t.KeyId
}

// GetMd5 retrieves the value of the leaf Md5 from the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_MessageDigestKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Md5 is set, it can
// safely use t.GetMd5() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Md5 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_MessageDigestKey) GetMd5() string {
	if t == nil || t.Md5 == nil {
		return ""
	}
	return *t.Md5
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_MessageDigestKey
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_MessageDigestKey) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_MessageDigestKey struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_MessageDigestKey) Î›ListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"key-id": t.KeyId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_MessageDigestKey) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_MessageDigestKey"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_MessageDigestKey) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_MessageDigestKey) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_MessageDigestKey.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_MessageDigestKey) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_Neighbor represents the /nokia-conf/configure/groups/group/router/ospf/area/interface/neighbor YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_Neighbor struct {
	Address *string `path:"address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_Neighbor) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_Neighbor) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_Neighbor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_Neighbor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_Neighbor struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_Neighbor) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_Neighbor) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_Neighbor) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_Neighbor) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_Neighbor.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_Neighbor) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_NodeSid represents the /nokia-conf/configure/groups/group/router/ospf/area/interface/node-sid YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_NodeSid struct {
	ClearNFlag *bool  `path:"clear-n-flag" module:"nokia-conf"`
	Index      *int64 `path:"index" module:"nokia-conf"`
	Label      *int64 `path:"label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_NodeSid implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_NodeSid) IsYANGGoStruct() {}

// GetClearNFlag retrieves the value of the leaf ClearNFlag from the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_NodeSid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClearNFlag is set, it can
// safely use t.GetClearNFlag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClearNFlag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_NodeSid) GetClearNFlag() bool {
	if t == nil || t.ClearNFlag == nil {
		return false
	}
	return *t.ClearNFlag
}

// GetIndex retrieves the value of the leaf Index from the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_NodeSid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_NodeSid) GetIndex() int64 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetLabel retrieves the value of the leaf Label from the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_NodeSid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Label is set, it can
// safely use t.GetLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Label == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_NodeSid) GetLabel() int64 {
	if t == nil || t.Label == nil {
		return 0
	}
	return *t.Label
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_NodeSid
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_NodeSid) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ClearNFlag == nil {
		var v bool = false
		t.ClearNFlag = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_NodeSid) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_NodeSid"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_NodeSid) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_NodeSid) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_NodeSid.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Interface_NodeSid) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa represents the /nokia-conf/configure/groups/group/router/ospf/area/nssa YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa struct {
	AreaRange             map[string]*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa_AreaRange  `path:"area-range" module:"nokia-conf"`
	OriginateDefaultRoute *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa_OriginateDefaultRoute `path:"originate-default-route" module:"nokia-conf" yangPresence:"true"`
	RedistributeExternal  *bool                                                                         `path:"redistribute-external" module:"nokia-conf"`
	Summaries             *bool                                                                         `path:"summaries" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa) IsYANGGoStruct() {}

// NewAreaRange creates a new entry in the AreaRange list of the
// NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa) NewAreaRange(IpPrefixMask string) (*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa_AreaRange, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AreaRange == nil {
		t.AreaRange = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa_AreaRange)
	}

	key := IpPrefixMask

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AreaRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AreaRange", key)
	}

	t.AreaRange[key] = &NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa_AreaRange{
		IpPrefixMask: &IpPrefixMask,
	}

	return t.AreaRange[key], nil
}

// RenameAreaRange renames an entry in the list AreaRange within
// the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa) RenameAreaRange(oldK, newK string) error {
	if _, ok := t.AreaRange[newK]; ok {
		return fmt.Errorf("key %v already exists in AreaRange", newK)
	}

	e, ok := t.AreaRange[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AreaRange", oldK)
	}
	e.IpPrefixMask = &newK

	t.AreaRange[newK] = e
	delete(t.AreaRange, oldK)
	return nil
}

// GetOrCreateAreaRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa) GetOrCreateAreaRange(IpPrefixMask string) *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa_AreaRange {

	key := IpPrefixMask

	if v, ok := t.AreaRange[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAreaRange(IpPrefixMask)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAreaRange got unexpected error: %v", err))
	}
	return v
}

// GetAreaRange retrieves the value with the specified key from
// the AreaRange map field of NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa) GetAreaRange(IpPrefixMask string) *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa_AreaRange {

	if t == nil {
		return nil
	}

	key := IpPrefixMask

	if lm, ok := t.AreaRange[key]; ok {
		return lm
	}
	return nil
}

// DeleteAreaRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa) DeleteAreaRange(IpPrefixMask string) {
	key := IpPrefixMask

	delete(t.AreaRange, key)
}

// AppendAreaRange appends the supplied NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa_AreaRange struct to the
// list AreaRange of NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa_AreaRange already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa) AppendAreaRange(v *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa_AreaRange) error {
	if v.IpPrefixMask == nil {
		return fmt.Errorf("invalid nil key received for IpPrefixMask")
	}

	key := *v.IpPrefixMask

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AreaRange == nil {
		t.AreaRange = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa_AreaRange)
	}

	if _, ok := t.AreaRange[key]; ok {
		return fmt.Errorf("duplicate key for list AreaRange %v", key)
	}

	t.AreaRange[key] = v
	return nil
}

// GetOrCreateOriginateDefaultRoute retrieves the value of the OriginateDefaultRoute field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa) GetOrCreateOriginateDefaultRoute() *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa_OriginateDefaultRoute {
	if t.OriginateDefaultRoute != nil {
		return t.OriginateDefaultRoute
	}
	t.OriginateDefaultRoute = &NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa_OriginateDefaultRoute{}
	return t.OriginateDefaultRoute
}

// GetOriginateDefaultRoute returns the value of the OriginateDefaultRoute struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa. If the receiver or the field OriginateDefaultRoute is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa) GetOriginateDefaultRoute() *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa_OriginateDefaultRoute {
	if t != nil && t.OriginateDefaultRoute != nil {
		return t.OriginateDefaultRoute
	}
	return nil
}

// GetRedistributeExternal retrieves the value of the leaf RedistributeExternal from the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RedistributeExternal is set, it can
// safely use t.GetRedistributeExternal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RedistributeExternal == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa) GetRedistributeExternal() bool {
	if t == nil || t.RedistributeExternal == nil {
		return true
	}
	return *t.RedistributeExternal
}

// GetSummaries retrieves the value of the leaf Summaries from the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Summaries is set, it can
// safely use t.GetSummaries() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Summaries == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa) GetSummaries() bool {
	if t == nil || t.Summaries == nil {
		return true
	}
	return *t.Summaries
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RedistributeExternal == nil {
		var v bool = true
		t.RedistributeExternal = &v
	}
	if t.Summaries == nil {
		var v bool = true
		t.Summaries = &v
	}
	t.OriginateDefaultRoute.PopulateDefaults()
	for _, e := range t.AreaRange {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa_AreaRange represents the /nokia-conf/configure/groups/group/router/ospf/area/nssa/area-range YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa_AreaRange struct {
	Advertise    *bool   `path:"advertise" module:"nokia-conf"`
	IpPrefixMask *string `path:"ip-prefix-mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa_AreaRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa_AreaRange) IsYANGGoStruct() {}

// GetAdvertise retrieves the value of the leaf Advertise from the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa_AreaRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Advertise is set, it can
// safely use t.GetAdvertise() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Advertise == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa_AreaRange) GetAdvertise() bool {
	if t == nil || t.Advertise == nil {
		return true
	}
	return *t.Advertise
}

// GetIpPrefixMask retrieves the value of the leaf IpPrefixMask from the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa_AreaRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefixMask is set, it can
// safely use t.GetIpPrefixMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefixMask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa_AreaRange) GetIpPrefixMask() string {
	if t == nil || t.IpPrefixMask == nil {
		return ""
	}
	return *t.IpPrefixMask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa_AreaRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa_AreaRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Advertise == nil {
		var v bool = true
		t.Advertise = &v
	}
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa_AreaRange struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa_AreaRange) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefixMask == nil {
		return nil, fmt.Errorf("nil value for key IpPrefixMask")
	}

	return map[string]interface{}{
		"ip-prefix-mask": *t.IpPrefixMask,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa_AreaRange) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa_AreaRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa_AreaRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa_AreaRange) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa_AreaRange.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa_AreaRange) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa_OriginateDefaultRoute represents the /nokia-conf/configure/groups/group/router/ospf/area/nssa/originate-default-route YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa_OriginateDefaultRoute struct {
	AdjacencyCheck *bool `path:"adjacency-check" module:"nokia-conf"`
	TypeNssa       *bool `path:"type-nssa" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa_OriginateDefaultRoute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa_OriginateDefaultRoute) IsYANGGoStruct() {
}

// GetAdjacencyCheck retrieves the value of the leaf AdjacencyCheck from the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa_OriginateDefaultRoute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdjacencyCheck is set, it can
// safely use t.GetAdjacencyCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdjacencyCheck == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa_OriginateDefaultRoute) GetAdjacencyCheck() bool {
	if t == nil || t.AdjacencyCheck == nil {
		return true
	}
	return *t.AdjacencyCheck
}

// GetTypeNssa retrieves the value of the leaf TypeNssa from the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa_OriginateDefaultRoute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TypeNssa is set, it can
// safely use t.GetTypeNssa() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TypeNssa == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa_OriginateDefaultRoute) GetTypeNssa() bool {
	if t == nil || t.TypeNssa == nil {
		return false
	}
	return *t.TypeNssa
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa_OriginateDefaultRoute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa_OriginateDefaultRoute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdjacencyCheck == nil {
		var v bool = true
		t.AdjacencyCheck = &v
	}
	if t.TypeNssa == nil {
		var v bool = false
		t.TypeNssa = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa_OriginateDefaultRoute) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa_OriginateDefaultRoute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa_OriginateDefaultRoute) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa_OriginateDefaultRoute) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa_OriginateDefaultRoute.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Nssa_OriginateDefaultRoute) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Stub represents the /nokia-conf/configure/groups/group/router/ospf/area/stub YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Stub struct {
	DefaultMetric *uint32 `path:"default-metric" module:"nokia-conf"`
	Summaries     *bool   `path:"summaries" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Stub implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Stub) IsYANGGoStruct() {}

// GetDefaultMetric retrieves the value of the leaf DefaultMetric from the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Stub
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultMetric is set, it can
// safely use t.GetDefaultMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultMetric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Stub) GetDefaultMetric() uint32 {
	if t == nil || t.DefaultMetric == nil {
		return 1
	}
	return *t.DefaultMetric
}

// GetSummaries retrieves the value of the leaf Summaries from the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Stub
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Summaries is set, it can
// safely use t.GetSummaries() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Summaries == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Stub) GetSummaries() bool {
	if t == nil || t.Summaries == nil {
		return true
	}
	return *t.Summaries
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Stub
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Stub) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DefaultMetric == nil {
		var v uint32 = 1
		t.DefaultMetric = &v
	}
	if t.Summaries == nil {
		var v bool = true
		t.Summaries = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Stub) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Stub"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Stub) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Stub) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Stub.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_Stub) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink represents the /nokia-conf/configure/groups/group/router/ospf/area/virtual-link YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink struct {
	AdminState             E_NokiaTypesSros_AdminState                                                                                                                                                    `path:"admin-state" module:"nokia-conf"`
	AuthenticationKey      *string                                                                                                                                                                        `path:"authentication-key" module:"nokia-conf"`
	AuthenticationKeychain *string                                                                                                                                                                        `path:"authentication-keychain" module:"nokia-conf"`
	AuthenticationType     E_NokiaTypesOspf_AuthenticationType                                                                                                                                            `path:"authentication-type" module:"nokia-conf"`
	DeadInterval           *uint32                                                                                                                                                                        `path:"dead-interval" module:"nokia-conf"`
	HelloInterval          *uint32                                                                                                                                                                        `path:"hello-interval" module:"nokia-conf"`
	MessageDigestKey       map[NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink_MessageDigestKey_KeyId_Union]*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink_MessageDigestKey `path:"message-digest-key" module:"nokia-conf"`
	RetransmitInterval     *uint32                                                                                                                                                                        `path:"retransmit-interval" module:"nokia-conf"`
	RouterId               *string                                                                                                                                                                        `path:"router-id" module:"nokia-conf"`
	TransitArea            *string                                                                                                                                                                        `path:"transit-area" module:"nokia-conf"`
	TransitDelay           *uint32                                                                                                                                                                        `path:"transit-delay" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink) IsYANGGoStruct() {}

// NewMessageDigestKey creates a new entry in the MessageDigestKey list of the
// NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink) NewMessageDigestKey(KeyId NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink_MessageDigestKey_KeyId_Union) (*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink_MessageDigestKey, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MessageDigestKey == nil {
		t.MessageDigestKey = make(map[NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink_MessageDigestKey_KeyId_Union]*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink_MessageDigestKey)
	}

	key := KeyId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MessageDigestKey[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MessageDigestKey", key)
	}

	t.MessageDigestKey[key] = &NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink_MessageDigestKey{
		KeyId: KeyId,
	}

	return t.MessageDigestKey[key], nil
}

// RenameMessageDigestKey renames an entry in the list MessageDigestKey within
// the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink) RenameMessageDigestKey(oldK, newK NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink_MessageDigestKey_KeyId_Union) error {
	if _, ok := t.MessageDigestKey[newK]; ok {
		return fmt.Errorf("key %v already exists in MessageDigestKey", newK)
	}

	e, ok := t.MessageDigestKey[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MessageDigestKey", oldK)
	}
	e.KeyId = newK

	t.MessageDigestKey[newK] = e
	delete(t.MessageDigestKey, oldK)
	return nil
}

// GetOrCreateMessageDigestKey retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink) GetOrCreateMessageDigestKey(KeyId NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink_MessageDigestKey_KeyId_Union) *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink_MessageDigestKey {

	key := KeyId

	if v, ok := t.MessageDigestKey[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMessageDigestKey(KeyId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMessageDigestKey got unexpected error: %v", err))
	}
	return v
}

// GetMessageDigestKey retrieves the value with the specified key from
// the MessageDigestKey map field of NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink) GetMessageDigestKey(KeyId NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink_MessageDigestKey_KeyId_Union) *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink_MessageDigestKey {

	if t == nil {
		return nil
	}

	key := KeyId

	if lm, ok := t.MessageDigestKey[key]; ok {
		return lm
	}
	return nil
}

// DeleteMessageDigestKey deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink) DeleteMessageDigestKey(KeyId NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink_MessageDigestKey_KeyId_Union) {
	key := KeyId

	delete(t.MessageDigestKey, key)
}

// AppendMessageDigestKey appends the supplied NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink_MessageDigestKey struct to the
// list MessageDigestKey of NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink_MessageDigestKey already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink) AppendMessageDigestKey(v *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink_MessageDigestKey) error {
	key := v.KeyId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MessageDigestKey == nil {
		t.MessageDigestKey = make(map[NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink_MessageDigestKey_KeyId_Union]*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink_MessageDigestKey)
	}

	if _, ok := t.MessageDigestKey[key]; ok {
		return fmt.Errorf("duplicate key for list MessageDigestKey %v", key)
	}

	t.MessageDigestKey[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetAuthenticationKey retrieves the value of the leaf AuthenticationKey from the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKey is set, it can
// safely use t.GetAuthenticationKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink) GetAuthenticationKey() string {
	if t == nil || t.AuthenticationKey == nil {
		return ""
	}
	return *t.AuthenticationKey
}

// GetAuthenticationKeychain retrieves the value of the leaf AuthenticationKeychain from the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKeychain is set, it can
// safely use t.GetAuthenticationKeychain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKeychain == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink) GetAuthenticationKeychain() string {
	if t == nil || t.AuthenticationKeychain == nil {
		return ""
	}
	return *t.AuthenticationKeychain
}

// GetAuthenticationType retrieves the value of the leaf AuthenticationType from the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationType is set, it can
// safely use t.GetAuthenticationType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink) GetAuthenticationType() E_NokiaTypesOspf_AuthenticationType {
	if t == nil || t.AuthenticationType == 0 {
		return 0
	}
	return t.AuthenticationType
}

// GetDeadInterval retrieves the value of the leaf DeadInterval from the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DeadInterval is set, it can
// safely use t.GetDeadInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DeadInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink) GetDeadInterval() uint32 {
	if t == nil || t.DeadInterval == nil {
		return 0
	}
	return *t.DeadInterval
}

// GetHelloInterval retrieves the value of the leaf HelloInterval from the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloInterval is set, it can
// safely use t.GetHelloInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink) GetHelloInterval() uint32 {
	if t == nil || t.HelloInterval == nil {
		return 10
	}
	return *t.HelloInterval
}

// GetRetransmitInterval retrieves the value of the leaf RetransmitInterval from the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetransmitInterval is set, it can
// safely use t.GetRetransmitInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetransmitInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink) GetRetransmitInterval() uint32 {
	if t == nil || t.RetransmitInterval == nil {
		return 5
	}
	return *t.RetransmitInterval
}

// GetRouterId retrieves the value of the leaf RouterId from the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterId is set, it can
// safely use t.GetRouterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink) GetRouterId() string {
	if t == nil || t.RouterId == nil {
		return ""
	}
	return *t.RouterId
}

// GetTransitArea retrieves the value of the leaf TransitArea from the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransitArea is set, it can
// safely use t.GetTransitArea() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransitArea == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink) GetTransitArea() string {
	if t == nil || t.TransitArea == nil {
		return ""
	}
	return *t.TransitArea
}

// GetTransitDelay retrieves the value of the leaf TransitDelay from the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransitDelay is set, it can
// safely use t.GetTransitDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransitDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink) GetTransitDelay() uint32 {
	if t == nil || t.TransitDelay == nil {
		return 1
	}
	return *t.TransitDelay
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.HelloInterval == nil {
		var v uint32 = 10
		t.HelloInterval = &v
	}
	if t.RetransmitInterval == nil {
		var v uint32 = 5
		t.RetransmitInterval = &v
	}
	if t.TransitDelay == nil {
		var v uint32 = 1
		t.TransitDelay = &v
	}
	for _, e := range t.MessageDigestKey {
		e.PopulateDefaults()
	}
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.RouterId == nil {
		return nil, fmt.Errorf("nil value for key RouterId")
	}

	if t.TransitArea == nil {
		return nil, fmt.Errorf("nil value for key TransitArea")
	}

	return map[string]interface{}{
		"router-id":    *t.RouterId,
		"transit-area": *t.TransitArea,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink_MessageDigestKey represents the /nokia-conf/configure/groups/group/router/ospf/area/virtual-link/message-digest-key YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink_MessageDigestKey struct {
	KeyId NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink_MessageDigestKey_KeyId_Union `path:"key-id" module:"nokia-conf"`
	Md5   *string                                                                                    `path:"md5" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink_MessageDigestKey implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink_MessageDigestKey) IsYANGGoStruct() {
}

// GetKeyId retrieves the value of the leaf KeyId from the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink_MessageDigestKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeyId is set, it can
// safely use t.GetKeyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeyId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink_MessageDigestKey) GetKeyId() NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink_MessageDigestKey_KeyId_Union {
	if t == nil || t.KeyId == nil {
		return nil
	}
	return t.KeyId
}

// GetMd5 retrieves the value of the leaf Md5 from the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink_MessageDigestKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Md5 is set, it can
// safely use t.GetMd5() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Md5 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink_MessageDigestKey) GetMd5() string {
	if t == nil || t.Md5 == nil {
		return ""
	}
	return *t.Md5
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink_MessageDigestKey
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink_MessageDigestKey) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink_MessageDigestKey struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink_MessageDigestKey) Î›ListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"key-id": t.KeyId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink_MessageDigestKey) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink_MessageDigestKey"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink_MessageDigestKey) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink_MessageDigestKey) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink_MessageDigestKey.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_Area_VirtualLink_MessageDigestKey) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf_Asbr represents the /nokia-conf/configure/groups/group/router/ospf/asbr YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf_Asbr struct {
	TracePath NokiaConf_Configure_Groups_Group_Router_Ospf_Asbr_TracePath_Union `path:"trace-path" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf_Asbr implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_Asbr) IsYANGGoStruct() {}

// GetTracePath retrieves the value of the leaf TracePath from the NokiaConf_Configure_Groups_Group_Router_Ospf_Asbr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TracePath is set, it can
// safely use t.GetTracePath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TracePath == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Asbr) GetTracePath() NokiaConf_Configure_Groups_Group_Router_Ospf_Asbr_TracePath_Union {
	if t == nil || t.TracePath == nil {
		return NokiaConf_Configure_Groups_Group_Router_Ospf_Asbr_TracePath_Enum_none
	}
	return t.TracePath
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf_Asbr
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Asbr) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.TracePath == nil {
		t.TracePath = NokiaConf_Configure_Groups_Group_Router_Ospf_Asbr_TracePath_Enum_none
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Asbr) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf_Asbr"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Asbr) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Asbr) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf_Asbr.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_Asbr) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf_DatabaseExport represents the /nokia-conf/configure/groups/group/router/ospf/database-export YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf_DatabaseExport struct {
	BgpLsIdentifier *NokiaConf_Configure_Groups_Group_Router_Ospf_DatabaseExport_BgpLsIdentifier `path:"bgp-ls-identifier" module:"nokia-conf" yangPresence:"true"`
	IgpIdentifier   *uint64                                                                      `path:"igp-identifier" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf_DatabaseExport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_DatabaseExport) IsYANGGoStruct() {}

// GetOrCreateBgpLsIdentifier retrieves the value of the BgpLsIdentifier field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_DatabaseExport) GetOrCreateBgpLsIdentifier() *NokiaConf_Configure_Groups_Group_Router_Ospf_DatabaseExport_BgpLsIdentifier {
	if t.BgpLsIdentifier != nil {
		return t.BgpLsIdentifier
	}
	t.BgpLsIdentifier = &NokiaConf_Configure_Groups_Group_Router_Ospf_DatabaseExport_BgpLsIdentifier{}
	return t.BgpLsIdentifier
}

// GetBgpLsIdentifier returns the value of the BgpLsIdentifier struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf_DatabaseExport. If the receiver or the field BgpLsIdentifier is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_DatabaseExport) GetBgpLsIdentifier() *NokiaConf_Configure_Groups_Group_Router_Ospf_DatabaseExport_BgpLsIdentifier {
	if t != nil && t.BgpLsIdentifier != nil {
		return t.BgpLsIdentifier
	}
	return nil
}

// GetIgpIdentifier retrieves the value of the leaf IgpIdentifier from the NokiaConf_Configure_Groups_Group_Router_Ospf_DatabaseExport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgpIdentifier is set, it can
// safely use t.GetIgpIdentifier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgpIdentifier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_DatabaseExport) GetIgpIdentifier() uint64 {
	if t == nil || t.IgpIdentifier == nil {
		return 0
	}
	return *t.IgpIdentifier
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf_DatabaseExport
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_DatabaseExport) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.BgpLsIdentifier.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_DatabaseExport) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf_DatabaseExport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_DatabaseExport) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_DatabaseExport) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf_DatabaseExport.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_DatabaseExport) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf_DatabaseExport_BgpLsIdentifier represents the /nokia-conf/configure/groups/group/router/ospf/database-export/bgp-ls-identifier YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf_DatabaseExport_BgpLsIdentifier struct {
	Value *uint32 `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf_DatabaseExport_BgpLsIdentifier implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_DatabaseExport_BgpLsIdentifier) IsYANGGoStruct() {
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Groups_Group_Router_Ospf_DatabaseExport_BgpLsIdentifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_DatabaseExport_BgpLsIdentifier) GetValue() uint32 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf_DatabaseExport_BgpLsIdentifier
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_DatabaseExport_BgpLsIdentifier) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Value == nil {
		var v uint32 = 0
		t.Value = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_DatabaseExport_BgpLsIdentifier) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf_DatabaseExport_BgpLsIdentifier"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_DatabaseExport_BgpLsIdentifier) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_DatabaseExport_BgpLsIdentifier) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf_DatabaseExport_BgpLsIdentifier.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_DatabaseExport_BgpLsIdentifier) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf_EntropyLabel represents the /nokia-conf/configure/groups/group/router/ospf/entropy-label YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf_EntropyLabel struct {
	OverrideTunnelElc *bool `path:"override-tunnel-elc" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf_EntropyLabel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_EntropyLabel) IsYANGGoStruct() {}

// GetOverrideTunnelElc retrieves the value of the leaf OverrideTunnelElc from the NokiaConf_Configure_Groups_Group_Router_Ospf_EntropyLabel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OverrideTunnelElc is set, it can
// safely use t.GetOverrideTunnelElc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OverrideTunnelElc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_EntropyLabel) GetOverrideTunnelElc() bool {
	if t == nil || t.OverrideTunnelElc == nil {
		return false
	}
	return *t.OverrideTunnelElc
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf_EntropyLabel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_EntropyLabel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.OverrideTunnelElc == nil {
		var v bool = false
		t.OverrideTunnelElc = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_EntropyLabel) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf_EntropyLabel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_EntropyLabel) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_EntropyLabel) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf_EntropyLabel.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_EntropyLabel) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf_ExportLimit represents the /nokia-conf/configure/groups/group/router/ospf/export-limit YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf_ExportLimit struct {
	LogPercent *uint32 `path:"log-percent" module:"nokia-conf"`
	Number     *uint32 `path:"number" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf_ExportLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_ExportLimit) IsYANGGoStruct() {}

// GetLogPercent retrieves the value of the leaf LogPercent from the NokiaConf_Configure_Groups_Group_Router_Ospf_ExportLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogPercent is set, it can
// safely use t.GetLogPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogPercent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_ExportLimit) GetLogPercent() uint32 {
	if t == nil || t.LogPercent == nil {
		return 0
	}
	return *t.LogPercent
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Groups_Group_Router_Ospf_ExportLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_ExportLimit) GetNumber() uint32 {
	if t == nil || t.Number == nil {
		return 0
	}
	return *t.Number
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf_ExportLimit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_ExportLimit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_ExportLimit) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf_ExportLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_ExportLimit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_ExportLimit) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf_ExportLimit.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_ExportLimit) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf_ExternalDbOverflow represents the /nokia-conf/configure/groups/group/router/ospf/external-db-overflow YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf_ExternalDbOverflow struct {
	Interval *uint32 `path:"interval" module:"nokia-conf"`
	Limit    *uint32 `path:"limit" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf_ExternalDbOverflow implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_ExternalDbOverflow) IsYANGGoStruct() {}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Groups_Group_Router_Ospf_ExternalDbOverflow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_ExternalDbOverflow) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetLimit retrieves the value of the leaf Limit from the NokiaConf_Configure_Groups_Group_Router_Ospf_ExternalDbOverflow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Limit is set, it can
// safely use t.GetLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Limit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_ExternalDbOverflow) GetLimit() uint32 {
	if t == nil || t.Limit == nil {
		return 0
	}
	return *t.Limit
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf_ExternalDbOverflow
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_ExternalDbOverflow) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Interval == nil {
		var v uint32 = 0
		t.Interval = &v
	}
	if t.Limit == nil {
		var v uint32 = 0
		t.Limit = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_ExternalDbOverflow) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf_ExternalDbOverflow"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_ExternalDbOverflow) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_ExternalDbOverflow) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf_ExternalDbOverflow.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_ExternalDbOverflow) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms represents the /nokia-conf/configure/groups/group/router/ospf/flexible-algorithms YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms struct {
	AdminState E_NokiaTypesSros_AdminState                                                                                                                                             `path:"admin-state" module:"nokia-conf"`
	FlexAlgo   map[NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms_FlexAlgo_FlexAlgoId_Union]*NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms_FlexAlgo `path:"flex-algo" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms) IsYANGGoStruct() {}

// NewFlexAlgo creates a new entry in the FlexAlgo list of the
// NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms) NewFlexAlgo(FlexAlgoId NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms_FlexAlgo_FlexAlgoId_Union) (*NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms_FlexAlgo, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FlexAlgo == nil {
		t.FlexAlgo = make(map[NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms_FlexAlgo_FlexAlgoId_Union]*NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms_FlexAlgo)
	}

	key := FlexAlgoId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.FlexAlgo[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list FlexAlgo", key)
	}

	t.FlexAlgo[key] = &NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms_FlexAlgo{
		FlexAlgoId: FlexAlgoId,
	}

	return t.FlexAlgo[key], nil
}

// RenameFlexAlgo renames an entry in the list FlexAlgo within
// the NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms) RenameFlexAlgo(oldK, newK NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms_FlexAlgo_FlexAlgoId_Union) error {
	if _, ok := t.FlexAlgo[newK]; ok {
		return fmt.Errorf("key %v already exists in FlexAlgo", newK)
	}

	e, ok := t.FlexAlgo[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in FlexAlgo", oldK)
	}
	e.FlexAlgoId = newK

	t.FlexAlgo[newK] = e
	delete(t.FlexAlgo, oldK)
	return nil
}

// GetOrCreateFlexAlgo retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms) GetOrCreateFlexAlgo(FlexAlgoId NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms_FlexAlgo_FlexAlgoId_Union) *NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms_FlexAlgo {

	key := FlexAlgoId

	if v, ok := t.FlexAlgo[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFlexAlgo(FlexAlgoId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFlexAlgo got unexpected error: %v", err))
	}
	return v
}

// GetFlexAlgo retrieves the value with the specified key from
// the FlexAlgo map field of NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms) GetFlexAlgo(FlexAlgoId NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms_FlexAlgo_FlexAlgoId_Union) *NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms_FlexAlgo {

	if t == nil {
		return nil
	}

	key := FlexAlgoId

	if lm, ok := t.FlexAlgo[key]; ok {
		return lm
	}
	return nil
}

// DeleteFlexAlgo deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms) DeleteFlexAlgo(FlexAlgoId NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms_FlexAlgo_FlexAlgoId_Union) {
	key := FlexAlgoId

	delete(t.FlexAlgo, key)
}

// AppendFlexAlgo appends the supplied NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms_FlexAlgo struct to the
// list FlexAlgo of NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms_FlexAlgo already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms) AppendFlexAlgo(v *NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms_FlexAlgo) error {
	key := v.FlexAlgoId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FlexAlgo == nil {
		t.FlexAlgo = make(map[NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms_FlexAlgo_FlexAlgoId_Union]*NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms_FlexAlgo)
	}

	if _, ok := t.FlexAlgo[key]; ok {
		return fmt.Errorf("duplicate key for list FlexAlgo %v", key)
	}

	t.FlexAlgo[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.FlexAlgo {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms_FlexAlgo represents the /nokia-conf/configure/groups/group/router/ospf/flexible-algorithms/flex-algo YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms_FlexAlgo struct {
	Advertise         *string                                                                                     `path:"advertise" module:"nokia-conf"`
	FlexAlgoId        NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms_FlexAlgo_FlexAlgoId_Union   `path:"flex-algo-id" module:"nokia-conf"`
	LoopfreeAlternate *NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms_FlexAlgo_LoopfreeAlternate `path:"loopfree-alternate" module:"nokia-conf" yangPresence:"true"`
	Participate       *bool                                                                                       `path:"participate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms_FlexAlgo implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms_FlexAlgo) IsYANGGoStruct() {}

// GetOrCreateLoopfreeAlternate retrieves the value of the LoopfreeAlternate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms_FlexAlgo) GetOrCreateLoopfreeAlternate() *NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms_FlexAlgo_LoopfreeAlternate {
	if t.LoopfreeAlternate != nil {
		return t.LoopfreeAlternate
	}
	t.LoopfreeAlternate = &NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms_FlexAlgo_LoopfreeAlternate{}
	return t.LoopfreeAlternate
}

// GetLoopfreeAlternate returns the value of the LoopfreeAlternate struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms_FlexAlgo. If the receiver or the field LoopfreeAlternate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms_FlexAlgo) GetLoopfreeAlternate() *NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms_FlexAlgo_LoopfreeAlternate {
	if t != nil && t.LoopfreeAlternate != nil {
		return t.LoopfreeAlternate
	}
	return nil
}

// GetAdvertise retrieves the value of the leaf Advertise from the NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms_FlexAlgo
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Advertise is set, it can
// safely use t.GetAdvertise() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Advertise == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms_FlexAlgo) GetAdvertise() string {
	if t == nil || t.Advertise == nil {
		return ""
	}
	return *t.Advertise
}

// GetFlexAlgoId retrieves the value of the leaf FlexAlgoId from the NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms_FlexAlgo
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlexAlgoId is set, it can
// safely use t.GetFlexAlgoId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlexAlgoId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms_FlexAlgo) GetFlexAlgoId() NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms_FlexAlgo_FlexAlgoId_Union {
	if t == nil || t.FlexAlgoId == nil {
		return nil
	}
	return t.FlexAlgoId
}

// GetParticipate retrieves the value of the leaf Participate from the NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms_FlexAlgo
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Participate is set, it can
// safely use t.GetParticipate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Participate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms_FlexAlgo) GetParticipate() bool {
	if t == nil || t.Participate == nil {
		return false
	}
	return *t.Participate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms_FlexAlgo
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms_FlexAlgo) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Participate == nil {
		var v bool = false
		t.Participate = &v
	}
	t.LoopfreeAlternate.PopulateDefaults()
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms_FlexAlgo struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms_FlexAlgo) Î›ListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"flex-algo-id": t.FlexAlgoId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms_FlexAlgo) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms_FlexAlgo"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms_FlexAlgo) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms_FlexAlgo) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms_FlexAlgo.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms_FlexAlgo) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms_FlexAlgo_LoopfreeAlternate represents the /nokia-conf/configure/groups/group/router/ospf/flexible-algorithms/flex-algo/loopfree-alternate YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms_FlexAlgo_LoopfreeAlternate struct {
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms_FlexAlgo_LoopfreeAlternate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms_FlexAlgo_LoopfreeAlternate) IsYANGGoStruct() {
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms_FlexAlgo_LoopfreeAlternate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms_FlexAlgo_LoopfreeAlternate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms_FlexAlgo_LoopfreeAlternate) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms_FlexAlgo_LoopfreeAlternate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms_FlexAlgo_LoopfreeAlternate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms_FlexAlgo_LoopfreeAlternate) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms_FlexAlgo_LoopfreeAlternate.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_FlexibleAlgorithms_FlexAlgo_LoopfreeAlternate) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf_GracefulRestart represents the /nokia-conf/configure/groups/group/router/ospf/graceful-restart YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf_GracefulRestart struct {
	HelperMode        *bool `path:"helper-mode" module:"nokia-conf"`
	StrictLsaChecking *bool `path:"strict-lsa-checking" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf_GracefulRestart implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_GracefulRestart) IsYANGGoStruct() {}

// GetHelperMode retrieves the value of the leaf HelperMode from the NokiaConf_Configure_Groups_Group_Router_Ospf_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelperMode is set, it can
// safely use t.GetHelperMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelperMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_GracefulRestart) GetHelperMode() bool {
	if t == nil || t.HelperMode == nil {
		return true
	}
	return *t.HelperMode
}

// GetStrictLsaChecking retrieves the value of the leaf StrictLsaChecking from the NokiaConf_Configure_Groups_Group_Router_Ospf_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StrictLsaChecking is set, it can
// safely use t.GetStrictLsaChecking() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StrictLsaChecking == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_GracefulRestart) GetStrictLsaChecking() bool {
	if t == nil || t.StrictLsaChecking == nil {
		return true
	}
	return *t.StrictLsaChecking
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf_GracefulRestart
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_GracefulRestart) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HelperMode == nil {
		var v bool = true
		t.HelperMode = &v
	}
	if t.StrictLsaChecking == nil {
		var v bool = true
		t.StrictLsaChecking = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_GracefulRestart) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf_GracefulRestart"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_GracefulRestart) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_GracefulRestart) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf_GracefulRestart.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_GracefulRestart) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut represents the /nokia-conf/configure/groups/group/router/ospf/igp-shortcut YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut struct {
	AdminState    E_NokiaTypesSros_AdminState                                             `path:"admin-state" module:"nokia-conf"`
	TunnelNextHop *NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop `path:"tunnel-next-hop" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut) IsYANGGoStruct() {}

// GetOrCreateTunnelNextHop retrieves the value of the TunnelNextHop field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut) GetOrCreateTunnelNextHop() *NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop {
	if t.TunnelNextHop != nil {
		return t.TunnelNextHop
	}
	t.TunnelNextHop = &NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop{}
	return t.TunnelNextHop
}

// GetTunnelNextHop returns the value of the TunnelNextHop struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut. If the receiver or the field TunnelNextHop is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut) GetTunnelNextHop() *NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop {
	if t != nil && t.TunnelNextHop != nil {
		return t.TunnelNextHop
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.TunnelNextHop.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop represents the /nokia-conf/configure/groups/group/router/ospf/igp-shortcut/tunnel-next-hop YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop struct {
	Family map[NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop_Family_FamilyType_Union]*NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop_Family `path:"family" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop) IsYANGGoStruct() {}

// NewFamily creates a new entry in the Family list of the
// NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop) NewFamily(FamilyType NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop_Family_FamilyType_Union) (*NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop_Family, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Family == nil {
		t.Family = make(map[NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop_Family_FamilyType_Union]*NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop_Family)
	}

	key := FamilyType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Family[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Family", key)
	}

	t.Family[key] = &NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop_Family{
		FamilyType: FamilyType,
	}

	return t.Family[key], nil
}

// RenameFamily renames an entry in the list Family within
// the NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop) RenameFamily(oldK, newK NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop_Family_FamilyType_Union) error {
	if _, ok := t.Family[newK]; ok {
		return fmt.Errorf("key %v already exists in Family", newK)
	}

	e, ok := t.Family[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Family", oldK)
	}
	e.FamilyType = newK

	t.Family[newK] = e
	delete(t.Family, oldK)
	return nil
}

// GetOrCreateFamily retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop) GetOrCreateFamily(FamilyType NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop_Family_FamilyType_Union) *NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop_Family {

	key := FamilyType

	if v, ok := t.Family[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFamily(FamilyType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFamily got unexpected error: %v", err))
	}
	return v
}

// GetFamily retrieves the value with the specified key from
// the Family map field of NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop) GetFamily(FamilyType NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop_Family_FamilyType_Union) *NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop_Family {

	if t == nil {
		return nil
	}

	key := FamilyType

	if lm, ok := t.Family[key]; ok {
		return lm
	}
	return nil
}

// DeleteFamily deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop) DeleteFamily(FamilyType NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop_Family_FamilyType_Union) {
	key := FamilyType

	delete(t.Family, key)
}

// AppendFamily appends the supplied NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop_Family struct to the
// list Family of NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop_Family already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop) AppendFamily(v *NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop_Family) error {
	key := v.FamilyType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Family == nil {
		t.Family = make(map[NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop_Family_FamilyType_Union]*NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop_Family)
	}

	if _, ok := t.Family[key]; ok {
		return fmt.Errorf("duplicate key for list Family %v", key)
	}

	t.Family[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Family {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop_Family represents the /nokia-conf/configure/groups/group/router/ospf/igp-shortcut/tunnel-next-hop/family YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop_Family struct {
	FamilyType       NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop_Family_FamilyType_Union  `path:"family-type" module:"nokia-conf"`
	Resolution       E_NokiaTypesSros_ResolutionType                                                                 `path:"resolution" module:"nokia-conf"`
	ResolutionFilter *NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop_Family_ResolutionFilter `path:"resolution-filter" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop_Family implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop_Family) IsYANGGoStruct() {
}

// GetOrCreateResolutionFilter retrieves the value of the ResolutionFilter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop_Family) GetOrCreateResolutionFilter() *NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop_Family_ResolutionFilter {
	if t.ResolutionFilter != nil {
		return t.ResolutionFilter
	}
	t.ResolutionFilter = &NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop_Family_ResolutionFilter{}
	return t.ResolutionFilter
}

// GetResolutionFilter returns the value of the ResolutionFilter struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop_Family. If the receiver or the field ResolutionFilter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop_Family) GetResolutionFilter() *NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop_Family_ResolutionFilter {
	if t != nil && t.ResolutionFilter != nil {
		return t.ResolutionFilter
	}
	return nil
}

// GetFamilyType retrieves the value of the leaf FamilyType from the NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FamilyType is set, it can
// safely use t.GetFamilyType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FamilyType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop_Family) GetFamilyType() NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop_Family_FamilyType_Union {
	if t == nil || t.FamilyType == nil {
		return nil
	}
	return t.FamilyType
}

// GetResolution retrieves the value of the leaf Resolution from the NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop_Family
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Resolution is set, it can
// safely use t.GetResolution() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Resolution == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop_Family) GetResolution() E_NokiaTypesSros_ResolutionType {
	if t == nil || t.Resolution == 0 {
		return NokiaTypesSros_ResolutionType_none
	}
	return t.Resolution
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop_Family
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop_Family) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Resolution == 0 {
		t.Resolution = NokiaTypesSros_ResolutionType_none
	}
	t.ResolutionFilter.PopulateDefaults()
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop_Family struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop_Family) Î›ListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"family-type": t.FamilyType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop_Family) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop_Family"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop_Family) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop_Family) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop_Family.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop_Family) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop_Family_ResolutionFilter represents the /nokia-conf/configure/groups/group/router/ospf/igp-shortcut/tunnel-next-hop/family/resolution-filter YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop_Family_ResolutionFilter struct {
	Rsvp *bool `path:"rsvp" module:"nokia-conf"`
	SrTe *bool `path:"sr-te" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop_Family_ResolutionFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop_Family_ResolutionFilter) IsYANGGoStruct() {
}

// GetRsvp retrieves the value of the leaf Rsvp from the NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop_Family_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rsvp is set, it can
// safely use t.GetRsvp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rsvp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop_Family_ResolutionFilter) GetRsvp() bool {
	if t == nil || t.Rsvp == nil {
		return false
	}
	return *t.Rsvp
}

// GetSrTe retrieves the value of the leaf SrTe from the NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop_Family_ResolutionFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrTe is set, it can
// safely use t.GetSrTe() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrTe == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop_Family_ResolutionFilter) GetSrTe() bool {
	if t == nil || t.SrTe == nil {
		return false
	}
	return *t.SrTe
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop_Family_ResolutionFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop_Family_ResolutionFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Rsvp == nil {
		var v bool = false
		t.Rsvp = &v
	}
	if t.SrTe == nil {
		var v bool = false
		t.SrTe = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop_Family_ResolutionFilter) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop_Family_ResolutionFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop_Family_ResolutionFilter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop_Family_ResolutionFilter) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop_Family_ResolutionFilter.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_IgpShortcut_TunnelNextHop_Family_ResolutionFilter) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate represents the /nokia-conf/configure/groups/group/router/ospf/loopfree-alternate YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate struct {
	AugmentRouteTable *bool                                                                            `path:"augment-route-table" module:"nokia-conf"`
	Exclude           *NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_Exclude          `path:"exclude" module:"nokia-conf"`
	MultiHomedPrefix  *NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_MultiHomedPrefix `path:"multi-homed-prefix" module:"nokia-conf" yangPresence:"true"`
	RemoteLfa         *NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_RemoteLfa        `path:"remote-lfa" module:"nokia-conf" yangPresence:"true"`
	TiLfa             *NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_TiLfa            `path:"ti-lfa" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate) IsYANGGoStruct() {}

// GetOrCreateExclude retrieves the value of the Exclude field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate) GetOrCreateExclude() *NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_Exclude {
	if t.Exclude != nil {
		return t.Exclude
	}
	t.Exclude = &NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_Exclude{}
	return t.Exclude
}

// GetOrCreateMultiHomedPrefix retrieves the value of the MultiHomedPrefix field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate) GetOrCreateMultiHomedPrefix() *NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_MultiHomedPrefix {
	if t.MultiHomedPrefix != nil {
		return t.MultiHomedPrefix
	}
	t.MultiHomedPrefix = &NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_MultiHomedPrefix{}
	return t.MultiHomedPrefix
}

// GetOrCreateRemoteLfa retrieves the value of the RemoteLfa field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate) GetOrCreateRemoteLfa() *NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_RemoteLfa {
	if t.RemoteLfa != nil {
		return t.RemoteLfa
	}
	t.RemoteLfa = &NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_RemoteLfa{}
	return t.RemoteLfa
}

// GetOrCreateTiLfa retrieves the value of the TiLfa field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate) GetOrCreateTiLfa() *NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_TiLfa {
	if t.TiLfa != nil {
		return t.TiLfa
	}
	t.TiLfa = &NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_TiLfa{}
	return t.TiLfa
}

// GetExclude returns the value of the Exclude struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate. If the receiver or the field Exclude is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate) GetExclude() *NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_Exclude {
	if t != nil && t.Exclude != nil {
		return t.Exclude
	}
	return nil
}

// GetMultiHomedPrefix returns the value of the MultiHomedPrefix struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate. If the receiver or the field MultiHomedPrefix is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate) GetMultiHomedPrefix() *NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_MultiHomedPrefix {
	if t != nil && t.MultiHomedPrefix != nil {
		return t.MultiHomedPrefix
	}
	return nil
}

// GetRemoteLfa returns the value of the RemoteLfa struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate. If the receiver or the field RemoteLfa is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate) GetRemoteLfa() *NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_RemoteLfa {
	if t != nil && t.RemoteLfa != nil {
		return t.RemoteLfa
	}
	return nil
}

// GetTiLfa returns the value of the TiLfa struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate. If the receiver or the field TiLfa is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate) GetTiLfa() *NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_TiLfa {
	if t != nil && t.TiLfa != nil {
		return t.TiLfa
	}
	return nil
}

// GetAugmentRouteTable retrieves the value of the leaf AugmentRouteTable from the NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AugmentRouteTable is set, it can
// safely use t.GetAugmentRouteTable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AugmentRouteTable == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate) GetAugmentRouteTable() bool {
	if t == nil || t.AugmentRouteTable == nil {
		return false
	}
	return *t.AugmentRouteTable
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AugmentRouteTable == nil {
		var v bool = false
		t.AugmentRouteTable = &v
	}
	t.Exclude.PopulateDefaults()
	t.MultiHomedPrefix.PopulateDefaults()
	t.RemoteLfa.PopulateDefaults()
	t.TiLfa.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_Exclude represents the /nokia-conf/configure/groups/group/router/ospf/loopfree-alternate/exclude YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_Exclude struct {
	PrefixPolicy []string `path:"prefix-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_Exclude implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_Exclude) IsYANGGoStruct() {}

// GetPrefixPolicy retrieves the value of the leaf PrefixPolicy from the NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_Exclude
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixPolicy is set, it can
// safely use t.GetPrefixPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_Exclude) GetPrefixPolicy() []string {
	if t == nil || t.PrefixPolicy == nil {
		return nil
	}
	return t.PrefixPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_Exclude
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_Exclude) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_Exclude) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_Exclude"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_Exclude) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_Exclude) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_Exclude.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_Exclude) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_MultiHomedPrefix represents the /nokia-conf/configure/groups/group/router/ospf/loopfree-alternate/multi-homed-prefix YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_MultiHomedPrefix struct {
	Preference E_NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_MultiHomedPrefix_Preference `path:"preference" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_MultiHomedPrefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_MultiHomedPrefix) IsYANGGoStruct() {
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_MultiHomedPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_MultiHomedPrefix) GetPreference() E_NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_MultiHomedPrefix_Preference {
	if t == nil || t.Preference == 0 {
		return NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_MultiHomedPrefix_Preference_none
	}
	return t.Preference
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_MultiHomedPrefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_MultiHomedPrefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Preference == 0 {
		t.Preference = NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_MultiHomedPrefix_Preference_none
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_MultiHomedPrefix) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_MultiHomedPrefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_MultiHomedPrefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_MultiHomedPrefix) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_MultiHomedPrefix.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_MultiHomedPrefix) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_RemoteLfa represents the /nokia-conf/configure/groups/group/router/ospf/loopfree-alternate/remote-lfa YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_RemoteLfa struct {
	MaxPqCost   *uint32                                                                               `path:"max-pq-cost" module:"nokia-conf"`
	NodeProtect *NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_RemoteLfa_NodeProtect `path:"node-protect" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_RemoteLfa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_RemoteLfa) IsYANGGoStruct() {}

// GetOrCreateNodeProtect retrieves the value of the NodeProtect field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_RemoteLfa) GetOrCreateNodeProtect() *NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_RemoteLfa_NodeProtect {
	if t.NodeProtect != nil {
		return t.NodeProtect
	}
	t.NodeProtect = &NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_RemoteLfa_NodeProtect{}
	return t.NodeProtect
}

// GetNodeProtect returns the value of the NodeProtect struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_RemoteLfa. If the receiver or the field NodeProtect is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_RemoteLfa) GetNodeProtect() *NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_RemoteLfa_NodeProtect {
	if t != nil && t.NodeProtect != nil {
		return t.NodeProtect
	}
	return nil
}

// GetMaxPqCost retrieves the value of the leaf MaxPqCost from the NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_RemoteLfa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxPqCost is set, it can
// safely use t.GetMaxPqCost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxPqCost == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_RemoteLfa) GetMaxPqCost() uint32 {
	if t == nil || t.MaxPqCost == nil {
		return 65535
	}
	return *t.MaxPqCost
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_RemoteLfa
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_RemoteLfa) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxPqCost == nil {
		var v uint32 = 65535
		t.MaxPqCost = &v
	}
	t.NodeProtect.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_RemoteLfa) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_RemoteLfa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_RemoteLfa) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_RemoteLfa) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_RemoteLfa.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_RemoteLfa) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_RemoteLfa_NodeProtect represents the /nokia-conf/configure/groups/group/router/ospf/loopfree-alternate/remote-lfa/node-protect YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_RemoteLfa_NodeProtect struct {
	MaxPqNodes *uint32 `path:"max-pq-nodes" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_RemoteLfa_NodeProtect implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_RemoteLfa_NodeProtect) IsYANGGoStruct() {
}

// GetMaxPqNodes retrieves the value of the leaf MaxPqNodes from the NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_RemoteLfa_NodeProtect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxPqNodes is set, it can
// safely use t.GetMaxPqNodes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxPqNodes == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_RemoteLfa_NodeProtect) GetMaxPqNodes() uint32 {
	if t == nil || t.MaxPqNodes == nil {
		return 16
	}
	return *t.MaxPqNodes
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_RemoteLfa_NodeProtect
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_RemoteLfa_NodeProtect) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxPqNodes == nil {
		var v uint32 = 16
		t.MaxPqNodes = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_RemoteLfa_NodeProtect) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_RemoteLfa_NodeProtect"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_RemoteLfa_NodeProtect) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_RemoteLfa_NodeProtect) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_RemoteLfa_NodeProtect.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_RemoteLfa_NodeProtect) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_TiLfa represents the /nokia-conf/configure/groups/group/router/ospf/loopfree-alternate/ti-lfa YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_TiLfa struct {
	MaxSrFrrLabels *uint32                                                                           `path:"max-sr-frr-labels" module:"nokia-conf"`
	NodeProtect    *NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_TiLfa_NodeProtect `path:"node-protect" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_TiLfa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_TiLfa) IsYANGGoStruct() {}

// GetOrCreateNodeProtect retrieves the value of the NodeProtect field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_TiLfa) GetOrCreateNodeProtect() *NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_TiLfa_NodeProtect {
	if t.NodeProtect != nil {
		return t.NodeProtect
	}
	t.NodeProtect = &NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_TiLfa_NodeProtect{}
	return t.NodeProtect
}

// GetNodeProtect returns the value of the NodeProtect struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_TiLfa. If the receiver or the field NodeProtect is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_TiLfa) GetNodeProtect() *NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_TiLfa_NodeProtect {
	if t != nil && t.NodeProtect != nil {
		return t.NodeProtect
	}
	return nil
}

// GetMaxSrFrrLabels retrieves the value of the leaf MaxSrFrrLabels from the NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_TiLfa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxSrFrrLabels is set, it can
// safely use t.GetMaxSrFrrLabels() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxSrFrrLabels == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_TiLfa) GetMaxSrFrrLabels() uint32 {
	if t == nil || t.MaxSrFrrLabels == nil {
		return 2
	}
	return *t.MaxSrFrrLabels
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_TiLfa
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_TiLfa) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxSrFrrLabels == nil {
		var v uint32 = 2
		t.MaxSrFrrLabels = &v
	}
	t.NodeProtect.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_TiLfa) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_TiLfa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_TiLfa) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_TiLfa) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_TiLfa.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_TiLfa) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_TiLfa_NodeProtect represents the /nokia-conf/configure/groups/group/router/ospf/loopfree-alternate/ti-lfa/node-protect YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_TiLfa_NodeProtect struct {
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_TiLfa_NodeProtect implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_TiLfa_NodeProtect) IsYANGGoStruct() {
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_TiLfa_NodeProtect
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_TiLfa_NodeProtect) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_TiLfa_NodeProtect) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_TiLfa_NodeProtect"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_TiLfa_NodeProtect) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_TiLfa_NodeProtect) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_TiLfa_NodeProtect.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_LoopfreeAlternate_TiLfa_NodeProtect) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf_OverloadOnBoot represents the /nokia-conf/configure/groups/group/router/ospf/overload-on-boot YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf_OverloadOnBoot struct {
	Timeout *uint32 `path:"timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf_OverloadOnBoot implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_OverloadOnBoot) IsYANGGoStruct() {}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Groups_Group_Router_Ospf_OverloadOnBoot
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_OverloadOnBoot) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 0
	}
	return *t.Timeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf_OverloadOnBoot
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_OverloadOnBoot) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_OverloadOnBoot) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf_OverloadOnBoot"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_OverloadOnBoot) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_OverloadOnBoot) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf_OverloadOnBoot.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_OverloadOnBoot) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf_RibPriority represents the /nokia-conf/configure/groups/group/router/ospf/rib-priority YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf_RibPriority struct {
	High *NokiaConf_Configure_Groups_Group_Router_Ospf_RibPriority_High `path:"high" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf_RibPriority implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_RibPriority) IsYANGGoStruct() {}

// GetOrCreateHigh retrieves the value of the High field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_RibPriority) GetOrCreateHigh() *NokiaConf_Configure_Groups_Group_Router_Ospf_RibPriority_High {
	if t.High != nil {
		return t.High
	}
	t.High = &NokiaConf_Configure_Groups_Group_Router_Ospf_RibPriority_High{}
	return t.High
}

// GetHigh returns the value of the High struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf_RibPriority. If the receiver or the field High is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_RibPriority) GetHigh() *NokiaConf_Configure_Groups_Group_Router_Ospf_RibPriority_High {
	if t != nil && t.High != nil {
		return t.High
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf_RibPriority
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_RibPriority) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.High.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_RibPriority) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf_RibPriority"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_RibPriority) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_RibPriority) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf_RibPriority.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_RibPriority) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf_RibPriority_High represents the /nokia-conf/configure/groups/group/router/ospf/rib-priority/high YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf_RibPriority_High struct {
	PrefixList *string `path:"prefix-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf_RibPriority_High implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_RibPriority_High) IsYANGGoStruct() {}

// GetPrefixList retrieves the value of the leaf PrefixList from the NokiaConf_Configure_Groups_Group_Router_Ospf_RibPriority_High
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixList is set, it can
// safely use t.GetPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_RibPriority_High) GetPrefixList() string {
	if t == nil || t.PrefixList == nil {
		return ""
	}
	return *t.PrefixList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf_RibPriority_High
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_RibPriority_High) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_RibPriority_High) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf_RibPriority_High"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_RibPriority_High) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_RibPriority_High) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf_RibPriority_High.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_RibPriority_High) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf_RtrAdvLsaLimit represents the /nokia-conf/configure/groups/group/router/ospf/rtr-adv-lsa-limit YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf_RtrAdvLsaLimit struct {
	LogOnly          *bool                                                                             `path:"log-only" module:"nokia-conf"`
	MaxLsaCount      *uint32                                                                           `path:"max-lsa-count" module:"nokia-conf"`
	OverloadTimeout  NokiaConf_Configure_Groups_Group_Router_Ospf_RtrAdvLsaLimit_OverloadTimeout_Union `path:"overload-timeout" module:"nokia-conf"`
	WarningThreshold *uint32                                                                           `path:"warning-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf_RtrAdvLsaLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_RtrAdvLsaLimit) IsYANGGoStruct() {}

// GetLogOnly retrieves the value of the leaf LogOnly from the NokiaConf_Configure_Groups_Group_Router_Ospf_RtrAdvLsaLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogOnly is set, it can
// safely use t.GetLogOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_RtrAdvLsaLimit) GetLogOnly() bool {
	if t == nil || t.LogOnly == nil {
		return false
	}
	return *t.LogOnly
}

// GetMaxLsaCount retrieves the value of the leaf MaxLsaCount from the NokiaConf_Configure_Groups_Group_Router_Ospf_RtrAdvLsaLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxLsaCount is set, it can
// safely use t.GetMaxLsaCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxLsaCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_RtrAdvLsaLimit) GetMaxLsaCount() uint32 {
	if t == nil || t.MaxLsaCount == nil {
		return 0
	}
	return *t.MaxLsaCount
}

// GetOverloadTimeout retrieves the value of the leaf OverloadTimeout from the NokiaConf_Configure_Groups_Group_Router_Ospf_RtrAdvLsaLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OverloadTimeout is set, it can
// safely use t.GetOverloadTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OverloadTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_RtrAdvLsaLimit) GetOverloadTimeout() NokiaConf_Configure_Groups_Group_Router_Ospf_RtrAdvLsaLimit_OverloadTimeout_Union {
	if t == nil || t.OverloadTimeout == nil {
		return NokiaTypesIgp_OverloadTimeout_Enum_forever
	}
	return t.OverloadTimeout
}

// GetWarningThreshold retrieves the value of the leaf WarningThreshold from the NokiaConf_Configure_Groups_Group_Router_Ospf_RtrAdvLsaLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WarningThreshold is set, it can
// safely use t.GetWarningThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WarningThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_RtrAdvLsaLimit) GetWarningThreshold() uint32 {
	if t == nil || t.WarningThreshold == nil {
		return 0
	}
	return *t.WarningThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf_RtrAdvLsaLimit
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_RtrAdvLsaLimit) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LogOnly == nil {
		var v bool = false
		t.LogOnly = &v
	}
	if t.OverloadTimeout == nil {
		t.OverloadTimeout = NokiaTypesIgp_OverloadTimeout_Enum_forever
	}
	if t.WarningThreshold == nil {
		var v uint32 = 0
		t.WarningThreshold = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_RtrAdvLsaLimit) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf_RtrAdvLsaLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_RtrAdvLsaLimit) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_RtrAdvLsaLimit) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf_RtrAdvLsaLimit.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_RtrAdvLsaLimit) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting represents the /nokia-conf/configure/groups/group/router/ospf/segment-routing YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting struct {
	AdjSidHold        NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_AdjSidHold_Union                                                                                    `path:"adj-sid-hold" module:"nokia-conf"`
	AdjacencySet      map[NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_AdjacencySet_Id_Union]*NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_AdjacencySet `path:"adjacency-set" module:"nokia-conf"`
	AdminState        E_NokiaTypesSros_AdminState                                                                                                                                     `path:"admin-state" module:"nokia-conf"`
	BackupNodeSid     *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_BackupNodeSid                                                                                      `path:"backup-node-sid" module:"nokia-conf" yangPresence:"true"`
	ClassForwarding   *bool                                                                                                                                                           `path:"class-forwarding" module:"nokia-conf"`
	EgressStatistics  *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_EgressStatistics                                                                                   `path:"egress-statistics" module:"nokia-conf"`
	EntropyLabel      *bool                                                                                                                                                           `path:"entropy-label" module:"nokia-conf"`
	ExportTunnelTable E_NokiaTypesIgp_ExportTunnelTableType                                                                                                                           `path:"export-tunnel-table" module:"nokia-conf"`
	IngressStatistics *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_IngressStatistics                                                                                  `path:"ingress-statistics" module:"nokia-conf"`
	MappingServer     *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer                                                                                      `path:"mapping-server" module:"nokia-conf"`
	MaximumSidDepth   *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MaximumSidDepth                                                                                    `path:"maximum-sid-depth" module:"nokia-conf"`
	PrefixSidRange    *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_PrefixSidRange                                                                                     `path:"prefix-sid-range" module:"nokia-conf" yangPresence:"true"`
	Srlb              *string                                                                                                                                                         `path:"srlb" module:"nokia-conf"`
	TunnelMtu         *uint32                                                                                                                                                         `path:"tunnel-mtu" module:"nokia-conf"`
	TunnelTablePref   *uint32                                                                                                                                                         `path:"tunnel-table-pref" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting) IsYANGGoStruct() {}

// NewAdjacencySet creates a new entry in the AdjacencySet list of the
// NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting) NewAdjacencySet(Id NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_AdjacencySet_Id_Union) (*NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_AdjacencySet, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AdjacencySet == nil {
		t.AdjacencySet = make(map[NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_AdjacencySet_Id_Union]*NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_AdjacencySet)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AdjacencySet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AdjacencySet", key)
	}

	t.AdjacencySet[key] = &NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_AdjacencySet{
		Id: Id,
	}

	return t.AdjacencySet[key], nil
}

// RenameAdjacencySet renames an entry in the list AdjacencySet within
// the NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting) RenameAdjacencySet(oldK, newK NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_AdjacencySet_Id_Union) error {
	if _, ok := t.AdjacencySet[newK]; ok {
		return fmt.Errorf("key %v already exists in AdjacencySet", newK)
	}

	e, ok := t.AdjacencySet[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AdjacencySet", oldK)
	}
	e.Id = newK

	t.AdjacencySet[newK] = e
	delete(t.AdjacencySet, oldK)
	return nil
}

// GetOrCreateAdjacencySet retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting) GetOrCreateAdjacencySet(Id NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_AdjacencySet_Id_Union) *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_AdjacencySet {

	key := Id

	if v, ok := t.AdjacencySet[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAdjacencySet(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAdjacencySet got unexpected error: %v", err))
	}
	return v
}

// GetAdjacencySet retrieves the value with the specified key from
// the AdjacencySet map field of NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting) GetAdjacencySet(Id NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_AdjacencySet_Id_Union) *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_AdjacencySet {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.AdjacencySet[key]; ok {
		return lm
	}
	return nil
}

// DeleteAdjacencySet deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting) DeleteAdjacencySet(Id NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_AdjacencySet_Id_Union) {
	key := Id

	delete(t.AdjacencySet, key)
}

// AppendAdjacencySet appends the supplied NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_AdjacencySet struct to the
// list AdjacencySet of NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_AdjacencySet already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting) AppendAdjacencySet(v *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_AdjacencySet) error {
	key := v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AdjacencySet == nil {
		t.AdjacencySet = make(map[NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_AdjacencySet_Id_Union]*NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_AdjacencySet)
	}

	if _, ok := t.AdjacencySet[key]; ok {
		return fmt.Errorf("duplicate key for list AdjacencySet %v", key)
	}

	t.AdjacencySet[key] = v
	return nil
}

// GetOrCreateBackupNodeSid retrieves the value of the BackupNodeSid field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting) GetOrCreateBackupNodeSid() *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_BackupNodeSid {
	if t.BackupNodeSid != nil {
		return t.BackupNodeSid
	}
	t.BackupNodeSid = &NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_BackupNodeSid{}
	return t.BackupNodeSid
}

// GetOrCreateEgressStatistics retrieves the value of the EgressStatistics field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting) GetOrCreateEgressStatistics() *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_EgressStatistics {
	if t.EgressStatistics != nil {
		return t.EgressStatistics
	}
	t.EgressStatistics = &NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_EgressStatistics{}
	return t.EgressStatistics
}

// GetOrCreateIngressStatistics retrieves the value of the IngressStatistics field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting) GetOrCreateIngressStatistics() *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_IngressStatistics {
	if t.IngressStatistics != nil {
		return t.IngressStatistics
	}
	t.IngressStatistics = &NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_IngressStatistics{}
	return t.IngressStatistics
}

// GetOrCreateMappingServer retrieves the value of the MappingServer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting) GetOrCreateMappingServer() *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer {
	if t.MappingServer != nil {
		return t.MappingServer
	}
	t.MappingServer = &NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer{}
	return t.MappingServer
}

// GetOrCreateMaximumSidDepth retrieves the value of the MaximumSidDepth field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting) GetOrCreateMaximumSidDepth() *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MaximumSidDepth {
	if t.MaximumSidDepth != nil {
		return t.MaximumSidDepth
	}
	t.MaximumSidDepth = &NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MaximumSidDepth{}
	return t.MaximumSidDepth
}

// GetOrCreatePrefixSidRange retrieves the value of the PrefixSidRange field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting) GetOrCreatePrefixSidRange() *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_PrefixSidRange {
	if t.PrefixSidRange != nil {
		return t.PrefixSidRange
	}
	t.PrefixSidRange = &NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_PrefixSidRange{}
	return t.PrefixSidRange
}

// GetBackupNodeSid returns the value of the BackupNodeSid struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting. If the receiver or the field BackupNodeSid is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting) GetBackupNodeSid() *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_BackupNodeSid {
	if t != nil && t.BackupNodeSid != nil {
		return t.BackupNodeSid
	}
	return nil
}

// GetEgressStatistics returns the value of the EgressStatistics struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting. If the receiver or the field EgressStatistics is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting) GetEgressStatistics() *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_EgressStatistics {
	if t != nil && t.EgressStatistics != nil {
		return t.EgressStatistics
	}
	return nil
}

// GetIngressStatistics returns the value of the IngressStatistics struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting. If the receiver or the field IngressStatistics is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting) GetIngressStatistics() *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_IngressStatistics {
	if t != nil && t.IngressStatistics != nil {
		return t.IngressStatistics
	}
	return nil
}

// GetMappingServer returns the value of the MappingServer struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting. If the receiver or the field MappingServer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting) GetMappingServer() *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer {
	if t != nil && t.MappingServer != nil {
		return t.MappingServer
	}
	return nil
}

// GetMaximumSidDepth returns the value of the MaximumSidDepth struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting. If the receiver or the field MaximumSidDepth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting) GetMaximumSidDepth() *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MaximumSidDepth {
	if t != nil && t.MaximumSidDepth != nil {
		return t.MaximumSidDepth
	}
	return nil
}

// GetPrefixSidRange returns the value of the PrefixSidRange struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting. If the receiver or the field PrefixSidRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting) GetPrefixSidRange() *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_PrefixSidRange {
	if t != nil && t.PrefixSidRange != nil {
		return t.PrefixSidRange
	}
	return nil
}

// GetAdjSidHold retrieves the value of the leaf AdjSidHold from the NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdjSidHold is set, it can
// safely use t.GetAdjSidHold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdjSidHold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting) GetAdjSidHold() NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_AdjSidHold_Union {
	if t == nil || t.AdjSidHold == nil {
		return UnionUint32(15)
	}
	return t.AdjSidHold
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetClassForwarding retrieves the value of the leaf ClassForwarding from the NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClassForwarding is set, it can
// safely use t.GetClassForwarding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClassForwarding == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting) GetClassForwarding() bool {
	if t == nil || t.ClassForwarding == nil {
		return false
	}
	return *t.ClassForwarding
}

// GetEntropyLabel retrieves the value of the leaf EntropyLabel from the NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntropyLabel is set, it can
// safely use t.GetEntropyLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntropyLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting) GetEntropyLabel() bool {
	if t == nil || t.EntropyLabel == nil {
		return false
	}
	return *t.EntropyLabel
}

// GetExportTunnelTable retrieves the value of the leaf ExportTunnelTable from the NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExportTunnelTable is set, it can
// safely use t.GetExportTunnelTable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExportTunnelTable == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting) GetExportTunnelTable() E_NokiaTypesIgp_ExportTunnelTableType {
	if t == nil || t.ExportTunnelTable == 0 {
		return 0
	}
	return t.ExportTunnelTable
}

// GetSrlb retrieves the value of the leaf Srlb from the NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Srlb is set, it can
// safely use t.GetSrlb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Srlb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting) GetSrlb() string {
	if t == nil || t.Srlb == nil {
		return ""
	}
	return *t.Srlb
}

// GetTunnelMtu retrieves the value of the leaf TunnelMtu from the NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TunnelMtu is set, it can
// safely use t.GetTunnelMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TunnelMtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting) GetTunnelMtu() uint32 {
	if t == nil || t.TunnelMtu == nil {
		return 0
	}
	return *t.TunnelMtu
}

// GetTunnelTablePref retrieves the value of the leaf TunnelTablePref from the NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TunnelTablePref is set, it can
// safely use t.GetTunnelTablePref() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TunnelTablePref == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting) GetTunnelTablePref() uint32 {
	if t == nil || t.TunnelTablePref == nil {
		return 10
	}
	return *t.TunnelTablePref
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdjSidHold == nil {
		t.AdjSidHold = UnionUint32(15)
	}
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.ClassForwarding == nil {
		var v bool = false
		t.ClassForwarding = &v
	}
	if t.TunnelTablePref == nil {
		var v uint32 = 10
		t.TunnelTablePref = &v
	}
	t.BackupNodeSid.PopulateDefaults()
	t.EgressStatistics.PopulateDefaults()
	t.IngressStatistics.PopulateDefaults()
	t.MappingServer.PopulateDefaults()
	t.MaximumSidDepth.PopulateDefaults()
	t.PrefixSidRange.PopulateDefaults()
	for _, e := range t.AdjacencySet {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_AdjacencySet represents the /nokia-conf/configure/groups/group/router/ospf/segment-routing/adjacency-set YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_AdjacencySet struct {
	Advertise *bool                                                                             `path:"advertise" module:"nokia-conf"`
	Id        NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_AdjacencySet_Id_Union `path:"id" module:"nokia-conf"`
	Parallel  *bool                                                                             `path:"parallel" module:"nokia-conf"`
	Sid       *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_AdjacencySet_Sid     `path:"sid" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_AdjacencySet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_AdjacencySet) IsYANGGoStruct() {}

// GetOrCreateSid retrieves the value of the Sid field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_AdjacencySet) GetOrCreateSid() *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_AdjacencySet_Sid {
	if t.Sid != nil {
		return t.Sid
	}
	t.Sid = &NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_AdjacencySet_Sid{}
	return t.Sid
}

// GetSid returns the value of the Sid struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_AdjacencySet. If the receiver or the field Sid is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_AdjacencySet) GetSid() *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_AdjacencySet_Sid {
	if t != nil && t.Sid != nil {
		return t.Sid
	}
	return nil
}

// GetAdvertise retrieves the value of the leaf Advertise from the NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_AdjacencySet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Advertise is set, it can
// safely use t.GetAdvertise() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Advertise == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_AdjacencySet) GetAdvertise() bool {
	if t == nil || t.Advertise == nil {
		return true
	}
	return *t.Advertise
}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_AdjacencySet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_AdjacencySet) GetId() NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_AdjacencySet_Id_Union {
	if t == nil || t.Id == nil {
		return nil
	}
	return t.Id
}

// GetParallel retrieves the value of the leaf Parallel from the NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_AdjacencySet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Parallel is set, it can
// safely use t.GetParallel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Parallel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_AdjacencySet) GetParallel() bool {
	if t == nil || t.Parallel == nil {
		return true
	}
	return *t.Parallel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_AdjacencySet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_AdjacencySet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Advertise == nil {
		var v bool = true
		t.Advertise = &v
	}
	if t.Parallel == nil {
		var v bool = true
		t.Parallel = &v
	}
	t.Sid.PopulateDefaults()
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_AdjacencySet struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_AdjacencySet) Î›ListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"id": t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_AdjacencySet) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_AdjacencySet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_AdjacencySet) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_AdjacencySet) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_AdjacencySet.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_AdjacencySet) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_AdjacencySet_Sid represents the /nokia-conf/configure/groups/group/router/ospf/segment-routing/adjacency-set/sid YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_AdjacencySet_Sid struct {
	Label *int64 `path:"label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_AdjacencySet_Sid implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_AdjacencySet_Sid) IsYANGGoStruct() {
}

// GetLabel retrieves the value of the leaf Label from the NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_AdjacencySet_Sid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Label is set, it can
// safely use t.GetLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Label == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_AdjacencySet_Sid) GetLabel() int64 {
	if t == nil || t.Label == nil {
		return 0
	}
	return *t.Label
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_AdjacencySet_Sid
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_AdjacencySet_Sid) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_AdjacencySet_Sid) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_AdjacencySet_Sid"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_AdjacencySet_Sid) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_AdjacencySet_Sid) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_AdjacencySet_Sid.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_AdjacencySet_Sid) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_BackupNodeSid represents the /nokia-conf/configure/groups/group/router/ospf/segment-routing/backup-node-sid YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_BackupNodeSid struct {
	Index    *int64  `path:"index" module:"nokia-conf"`
	IpPrefix *string `path:"ip-prefix" module:"nokia-conf"`
	Label    *int64  `path:"label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_BackupNodeSid implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_BackupNodeSid) IsYANGGoStruct() {}

// GetIndex retrieves the value of the leaf Index from the NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_BackupNodeSid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_BackupNodeSid) GetIndex() int64 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_BackupNodeSid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_BackupNodeSid) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// GetLabel retrieves the value of the leaf Label from the NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_BackupNodeSid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Label is set, it can
// safely use t.GetLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Label == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_BackupNodeSid) GetLabel() int64 {
	if t == nil || t.Label == nil {
		return 0
	}
	return *t.Label
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_BackupNodeSid
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_BackupNodeSid) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_BackupNodeSid) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_BackupNodeSid"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_BackupNodeSid) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_BackupNodeSid) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_BackupNodeSid.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_BackupNodeSid) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_EgressStatistics represents the /nokia-conf/configure/groups/group/router/ospf/segment-routing/egress-statistics YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_EgressStatistics struct {
	AdjSet  *bool `path:"adj-set" module:"nokia-conf"`
	AdjSid  *bool `path:"adj-sid" module:"nokia-conf"`
	NodeSid *bool `path:"node-sid" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_EgressStatistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_EgressStatistics) IsYANGGoStruct() {
}

// GetAdjSet retrieves the value of the leaf AdjSet from the NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_EgressStatistics
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdjSet is set, it can
// safely use t.GetAdjSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdjSet == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_EgressStatistics) GetAdjSet() bool {
	if t == nil || t.AdjSet == nil {
		return false
	}
	return *t.AdjSet
}

// GetAdjSid retrieves the value of the leaf AdjSid from the NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_EgressStatistics
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdjSid is set, it can
// safely use t.GetAdjSid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdjSid == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_EgressStatistics) GetAdjSid() bool {
	if t == nil || t.AdjSid == nil {
		return false
	}
	return *t.AdjSid
}

// GetNodeSid retrieves the value of the leaf NodeSid from the NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_EgressStatistics
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NodeSid is set, it can
// safely use t.GetNodeSid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NodeSid == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_EgressStatistics) GetNodeSid() bool {
	if t == nil || t.NodeSid == nil {
		return false
	}
	return *t.NodeSid
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_EgressStatistics
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_EgressStatistics) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdjSet == nil {
		var v bool = false
		t.AdjSet = &v
	}
	if t.AdjSid == nil {
		var v bool = false
		t.AdjSid = &v
	}
	if t.NodeSid == nil {
		var v bool = false
		t.NodeSid = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_EgressStatistics) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_EgressStatistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_EgressStatistics) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_EgressStatistics) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_EgressStatistics.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_EgressStatistics) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_IngressStatistics represents the /nokia-conf/configure/groups/group/router/ospf/segment-routing/ingress-statistics YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_IngressStatistics struct {
	AdjSet  *bool `path:"adj-set" module:"nokia-conf"`
	AdjSid  *bool `path:"adj-sid" module:"nokia-conf"`
	NodeSid *bool `path:"node-sid" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_IngressStatistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_IngressStatistics) IsYANGGoStruct() {
}

// GetAdjSet retrieves the value of the leaf AdjSet from the NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_IngressStatistics
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdjSet is set, it can
// safely use t.GetAdjSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdjSet == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_IngressStatistics) GetAdjSet() bool {
	if t == nil || t.AdjSet == nil {
		return false
	}
	return *t.AdjSet
}

// GetAdjSid retrieves the value of the leaf AdjSid from the NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_IngressStatistics
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdjSid is set, it can
// safely use t.GetAdjSid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdjSid == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_IngressStatistics) GetAdjSid() bool {
	if t == nil || t.AdjSid == nil {
		return false
	}
	return *t.AdjSid
}

// GetNodeSid retrieves the value of the leaf NodeSid from the NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_IngressStatistics
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NodeSid is set, it can
// safely use t.GetNodeSid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NodeSid == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_IngressStatistics) GetNodeSid() bool {
	if t == nil || t.NodeSid == nil {
		return false
	}
	return *t.NodeSid
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_IngressStatistics
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_IngressStatistics) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdjSet == nil {
		var v bool = false
		t.AdjSet = &v
	}
	if t.AdjSid == nil {
		var v bool = false
		t.AdjSid = &v
	}
	if t.NodeSid == nil {
		var v bool = false
		t.NodeSid = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_IngressStatistics) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_IngressStatistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_IngressStatistics) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_IngressStatistics) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_IngressStatistics.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_IngressStatistics) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer represents the /nokia-conf/configure/groups/group/router/ospf/segment-routing/mapping-server YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer struct {
	AdminState E_NokiaTypesSros_AdminState                                                                                                                                                                   `path:"admin-state" module:"nokia-conf"`
	NodeSidMap map[NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap_SidIndex_Union]*NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap `path:"node-sid-map" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer) IsYANGGoStruct() {}

// NewNodeSidMap creates a new entry in the NodeSidMap list of the
// NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer) NewNodeSidMap(SidIndex NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap_SidIndex_Union) (*NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NodeSidMap == nil {
		t.NodeSidMap = make(map[NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap_SidIndex_Union]*NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap)
	}

	key := SidIndex

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NodeSidMap[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NodeSidMap", key)
	}

	t.NodeSidMap[key] = &NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap{
		SidIndex: SidIndex,
	}

	return t.NodeSidMap[key], nil
}

// RenameNodeSidMap renames an entry in the list NodeSidMap within
// the NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer) RenameNodeSidMap(oldK, newK NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap_SidIndex_Union) error {
	if _, ok := t.NodeSidMap[newK]; ok {
		return fmt.Errorf("key %v already exists in NodeSidMap", newK)
	}

	e, ok := t.NodeSidMap[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NodeSidMap", oldK)
	}
	e.SidIndex = newK

	t.NodeSidMap[newK] = e
	delete(t.NodeSidMap, oldK)
	return nil
}

// GetOrCreateNodeSidMap retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer) GetOrCreateNodeSidMap(SidIndex NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap_SidIndex_Union) *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap {

	key := SidIndex

	if v, ok := t.NodeSidMap[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNodeSidMap(SidIndex)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNodeSidMap got unexpected error: %v", err))
	}
	return v
}

// GetNodeSidMap retrieves the value with the specified key from
// the NodeSidMap map field of NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer) GetNodeSidMap(SidIndex NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap_SidIndex_Union) *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap {

	if t == nil {
		return nil
	}

	key := SidIndex

	if lm, ok := t.NodeSidMap[key]; ok {
		return lm
	}
	return nil
}

// DeleteNodeSidMap deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer) DeleteNodeSidMap(SidIndex NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap_SidIndex_Union) {
	key := SidIndex

	delete(t.NodeSidMap, key)
}

// AppendNodeSidMap appends the supplied NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap struct to the
// list NodeSidMap of NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer) AppendNodeSidMap(v *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap) error {
	key := v.SidIndex

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NodeSidMap == nil {
		t.NodeSidMap = make(map[NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap_SidIndex_Union]*NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap)
	}

	if _, ok := t.NodeSidMap[key]; ok {
		return fmt.Errorf("duplicate key for list NodeSidMap %v", key)
	}

	t.NodeSidMap[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.NodeSidMap {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap represents the /nokia-conf/configure/groups/group/router/ospf/segment-routing/mapping-server/node-sid-map YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap struct {
	IpPrefix *string                                                                                             `path:"ip-prefix" module:"nokia-conf"`
	Range    *uint32                                                                                             `path:"range" module:"nokia-conf"`
	Scope    *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap_Scope         `path:"scope" module:"nokia-conf"`
	SidIndex NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap_SidIndex_Union `path:"sid-index" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap) IsYANGGoStruct() {
}

// GetOrCreateScope retrieves the value of the Scope field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap) GetOrCreateScope() *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap_Scope {
	if t.Scope != nil {
		return t.Scope
	}
	t.Scope = &NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap_Scope{}
	return t.Scope
}

// GetScope returns the value of the Scope struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap. If the receiver or the field Scope is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap) GetScope() *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap_Scope {
	if t != nil && t.Scope != nil {
		return t.Scope
	}
	return nil
}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// GetRange retrieves the value of the leaf Range from the NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Range is set, it can
// safely use t.GetRange() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Range == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap) GetRange() uint32 {
	if t == nil || t.Range == nil {
		return 1
	}
	return *t.Range
}

// GetSidIndex retrieves the value of the leaf SidIndex from the NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SidIndex is set, it can
// safely use t.GetSidIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SidIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap) GetSidIndex() NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap_SidIndex_Union {
	if t == nil || t.SidIndex == nil {
		return nil
	}
	return t.SidIndex
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Range == nil {
		var v uint32 = 1
		t.Range = &v
	}
	t.Scope.PopulateDefaults()
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap) Î›ListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"sid-index": t.SidIndex,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap_Scope represents the /nokia-conf/configure/groups/group/router/ospf/segment-routing/mapping-server/node-sid-map/scope YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap_Scope struct {
	Area *string   `path:"area" module:"nokia-conf"`
	As   YANGEmpty `path:"as" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap_Scope implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap_Scope) IsYANGGoStruct() {
}

// GetArea retrieves the value of the leaf Area from the NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap_Scope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Area is set, it can
// safely use t.GetArea() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Area == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap_Scope) GetArea() string {
	if t == nil || t.Area == nil {
		return ""
	}
	return *t.Area
}

// GetAs retrieves the value of the leaf As from the NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap_Scope
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if As is set, it can
// safely use t.GetAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.As == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap_Scope) GetAs() YANGEmpty {
	if t == nil || t.As == false {
		return false
	}
	return t.As
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap_Scope
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap_Scope) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap_Scope) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap_Scope"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap_Scope) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap_Scope) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap_Scope.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MappingServer_NodeSidMap_Scope) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MaximumSidDepth represents the /nokia-conf/configure/groups/group/router/ospf/segment-routing/maximum-sid-depth YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MaximumSidDepth struct {
	OverrideBmi  *int32 `path:"override-bmi" module:"nokia-conf"`
	OverrideErld *int32 `path:"override-erld" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MaximumSidDepth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MaximumSidDepth) IsYANGGoStruct() {
}

// GetOverrideBmi retrieves the value of the leaf OverrideBmi from the NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MaximumSidDepth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OverrideBmi is set, it can
// safely use t.GetOverrideBmi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OverrideBmi == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MaximumSidDepth) GetOverrideBmi() int32 {
	if t == nil || t.OverrideBmi == nil {
		return 0
	}
	return *t.OverrideBmi
}

// GetOverrideErld retrieves the value of the leaf OverrideErld from the NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MaximumSidDepth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OverrideErld is set, it can
// safely use t.GetOverrideErld() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OverrideErld == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MaximumSidDepth) GetOverrideErld() int32 {
	if t == nil || t.OverrideErld == nil {
		return 0
	}
	return *t.OverrideErld
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MaximumSidDepth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MaximumSidDepth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MaximumSidDepth) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MaximumSidDepth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MaximumSidDepth) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MaximumSidDepth) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MaximumSidDepth.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_MaximumSidDepth) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_PrefixSidRange represents the /nokia-conf/configure/groups/group/router/ospf/segment-routing/prefix-sid-range YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_PrefixSidRange struct {
	Global     YANGEmpty `path:"global" module:"nokia-conf"`
	MaxIndex   *uint32   `path:"max-index" module:"nokia-conf"`
	StartLabel *uint32   `path:"start-label" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_PrefixSidRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_PrefixSidRange) IsYANGGoStruct() {}

// GetGlobal retrieves the value of the leaf Global from the NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_PrefixSidRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Global is set, it can
// safely use t.GetGlobal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Global == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_PrefixSidRange) GetGlobal() YANGEmpty {
	if t == nil || t.Global == false {
		return false
	}
	return t.Global
}

// GetMaxIndex retrieves the value of the leaf MaxIndex from the NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_PrefixSidRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxIndex is set, it can
// safely use t.GetMaxIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_PrefixSidRange) GetMaxIndex() uint32 {
	if t == nil || t.MaxIndex == nil {
		return 1
	}
	return *t.MaxIndex
}

// GetStartLabel retrieves the value of the leaf StartLabel from the NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_PrefixSidRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartLabel is set, it can
// safely use t.GetStartLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_PrefixSidRange) GetStartLabel() uint32 {
	if t == nil || t.StartLabel == nil {
		return 0
	}
	return *t.StartLabel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_PrefixSidRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_PrefixSidRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxIndex == nil {
		var v uint32 = 1
		t.MaxIndex = &v
	}
	if t.StartLabel == nil {
		var v uint32 = 0
		t.StartLabel = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_PrefixSidRange) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_PrefixSidRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_PrefixSidRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_PrefixSidRange) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_PrefixSidRange.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_SegmentRouting_PrefixSidRange) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf_Timers represents the /nokia-conf/configure/groups/group/router/ospf/timers YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf_Timers struct {
	IncrementalSpfWait *uint32                                                          `path:"incremental-spf-wait" module:"nokia-conf"`
	LsaAccumulate      *uint32                                                          `path:"lsa-accumulate" module:"nokia-conf"`
	LsaArrival         *uint32                                                          `path:"lsa-arrival" module:"nokia-conf"`
	LsaGenerate        *NokiaConf_Configure_Groups_Group_Router_Ospf_Timers_LsaGenerate `path:"lsa-generate" module:"nokia-conf"`
	RedistributeDelay  *uint32                                                          `path:"redistribute-delay" module:"nokia-conf"`
	SpfWait            *NokiaConf_Configure_Groups_Group_Router_Ospf_Timers_SpfWait     `path:"spf-wait" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf_Timers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_Timers) IsYANGGoStruct() {}

// GetOrCreateLsaGenerate retrieves the value of the LsaGenerate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Timers) GetOrCreateLsaGenerate() *NokiaConf_Configure_Groups_Group_Router_Ospf_Timers_LsaGenerate {
	if t.LsaGenerate != nil {
		return t.LsaGenerate
	}
	t.LsaGenerate = &NokiaConf_Configure_Groups_Group_Router_Ospf_Timers_LsaGenerate{}
	return t.LsaGenerate
}

// GetOrCreateSpfWait retrieves the value of the SpfWait field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Timers) GetOrCreateSpfWait() *NokiaConf_Configure_Groups_Group_Router_Ospf_Timers_SpfWait {
	if t.SpfWait != nil {
		return t.SpfWait
	}
	t.SpfWait = &NokiaConf_Configure_Groups_Group_Router_Ospf_Timers_SpfWait{}
	return t.SpfWait
}

// GetLsaGenerate returns the value of the LsaGenerate struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf_Timers. If the receiver or the field LsaGenerate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Timers) GetLsaGenerate() *NokiaConf_Configure_Groups_Group_Router_Ospf_Timers_LsaGenerate {
	if t != nil && t.LsaGenerate != nil {
		return t.LsaGenerate
	}
	return nil
}

// GetSpfWait returns the value of the SpfWait struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Ospf_Timers. If the receiver or the field SpfWait is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Timers) GetSpfWait() *NokiaConf_Configure_Groups_Group_Router_Ospf_Timers_SpfWait {
	if t != nil && t.SpfWait != nil {
		return t.SpfWait
	}
	return nil
}

// GetIncrementalSpfWait retrieves the value of the leaf IncrementalSpfWait from the NokiaConf_Configure_Groups_Group_Router_Ospf_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IncrementalSpfWait is set, it can
// safely use t.GetIncrementalSpfWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IncrementalSpfWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Timers) GetIncrementalSpfWait() uint32 {
	if t == nil || t.IncrementalSpfWait == nil {
		return 1000
	}
	return *t.IncrementalSpfWait
}

// GetLsaAccumulate retrieves the value of the leaf LsaAccumulate from the NokiaConf_Configure_Groups_Group_Router_Ospf_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LsaAccumulate is set, it can
// safely use t.GetLsaAccumulate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LsaAccumulate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Timers) GetLsaAccumulate() uint32 {
	if t == nil || t.LsaAccumulate == nil {
		return 1000
	}
	return *t.LsaAccumulate
}

// GetLsaArrival retrieves the value of the leaf LsaArrival from the NokiaConf_Configure_Groups_Group_Router_Ospf_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LsaArrival is set, it can
// safely use t.GetLsaArrival() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LsaArrival == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Timers) GetLsaArrival() uint32 {
	if t == nil || t.LsaArrival == nil {
		return 1000
	}
	return *t.LsaArrival
}

// GetRedistributeDelay retrieves the value of the leaf RedistributeDelay from the NokiaConf_Configure_Groups_Group_Router_Ospf_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RedistributeDelay is set, it can
// safely use t.GetRedistributeDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RedistributeDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Timers) GetRedistributeDelay() uint32 {
	if t == nil || t.RedistributeDelay == nil {
		return 1000
	}
	return *t.RedistributeDelay
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf_Timers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Timers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IncrementalSpfWait == nil {
		var v uint32 = 1000
		t.IncrementalSpfWait = &v
	}
	if t.LsaAccumulate == nil {
		var v uint32 = 1000
		t.LsaAccumulate = &v
	}
	if t.LsaArrival == nil {
		var v uint32 = 1000
		t.LsaArrival = &v
	}
	if t.RedistributeDelay == nil {
		var v uint32 = 1000
		t.RedistributeDelay = &v
	}
	t.LsaGenerate.PopulateDefaults()
	t.SpfWait.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Timers) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf_Timers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Timers) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Timers) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf_Timers.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_Timers) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf_Timers_LsaGenerate represents the /nokia-conf/configure/groups/group/router/ospf/timers/lsa-generate YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf_Timers_LsaGenerate struct {
	LsaInitialWait *uint32 `path:"lsa-initial-wait" module:"nokia-conf"`
	LsaSecondWait  *uint32 `path:"lsa-second-wait" module:"nokia-conf"`
	MaxLsaWait     *uint32 `path:"max-lsa-wait" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf_Timers_LsaGenerate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_Timers_LsaGenerate) IsYANGGoStruct() {}

// GetLsaInitialWait retrieves the value of the leaf LsaInitialWait from the NokiaConf_Configure_Groups_Group_Router_Ospf_Timers_LsaGenerate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LsaInitialWait is set, it can
// safely use t.GetLsaInitialWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LsaInitialWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Timers_LsaGenerate) GetLsaInitialWait() uint32 {
	if t == nil || t.LsaInitialWait == nil {
		return 5000
	}
	return *t.LsaInitialWait
}

// GetLsaSecondWait retrieves the value of the leaf LsaSecondWait from the NokiaConf_Configure_Groups_Group_Router_Ospf_Timers_LsaGenerate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LsaSecondWait is set, it can
// safely use t.GetLsaSecondWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LsaSecondWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Timers_LsaGenerate) GetLsaSecondWait() uint32 {
	if t == nil || t.LsaSecondWait == nil {
		return 5000
	}
	return *t.LsaSecondWait
}

// GetMaxLsaWait retrieves the value of the leaf MaxLsaWait from the NokiaConf_Configure_Groups_Group_Router_Ospf_Timers_LsaGenerate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxLsaWait is set, it can
// safely use t.GetMaxLsaWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxLsaWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Timers_LsaGenerate) GetMaxLsaWait() uint32 {
	if t == nil || t.MaxLsaWait == nil {
		return 5000
	}
	return *t.MaxLsaWait
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf_Timers_LsaGenerate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Timers_LsaGenerate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LsaInitialWait == nil {
		var v uint32 = 5000
		t.LsaInitialWait = &v
	}
	if t.LsaSecondWait == nil {
		var v uint32 = 5000
		t.LsaSecondWait = &v
	}
	if t.MaxLsaWait == nil {
		var v uint32 = 5000
		t.MaxLsaWait = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Timers_LsaGenerate) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf_Timers_LsaGenerate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Timers_LsaGenerate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Timers_LsaGenerate) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf_Timers_LsaGenerate.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_Timers_LsaGenerate) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf_Timers_SpfWait represents the /nokia-conf/configure/groups/group/router/ospf/timers/spf-wait YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf_Timers_SpfWait struct {
	SpfInitialWait *uint32 `path:"spf-initial-wait" module:"nokia-conf"`
	SpfMaxWait     *uint32 `path:"spf-max-wait" module:"nokia-conf"`
	SpfSecondWait  *uint32 `path:"spf-second-wait" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf_Timers_SpfWait implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_Timers_SpfWait) IsYANGGoStruct() {}

// GetSpfInitialWait retrieves the value of the leaf SpfInitialWait from the NokiaConf_Configure_Groups_Group_Router_Ospf_Timers_SpfWait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SpfInitialWait is set, it can
// safely use t.GetSpfInitialWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SpfInitialWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Timers_SpfWait) GetSpfInitialWait() uint32 {
	if t == nil || t.SpfInitialWait == nil {
		return 1000
	}
	return *t.SpfInitialWait
}

// GetSpfMaxWait retrieves the value of the leaf SpfMaxWait from the NokiaConf_Configure_Groups_Group_Router_Ospf_Timers_SpfWait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SpfMaxWait is set, it can
// safely use t.GetSpfMaxWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SpfMaxWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Timers_SpfWait) GetSpfMaxWait() uint32 {
	if t == nil || t.SpfMaxWait == nil {
		return 10000
	}
	return *t.SpfMaxWait
}

// GetSpfSecondWait retrieves the value of the leaf SpfSecondWait from the NokiaConf_Configure_Groups_Group_Router_Ospf_Timers_SpfWait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SpfSecondWait is set, it can
// safely use t.GetSpfSecondWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SpfSecondWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Timers_SpfWait) GetSpfSecondWait() uint32 {
	if t == nil || t.SpfSecondWait == nil {
		return 1000
	}
	return *t.SpfSecondWait
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf_Timers_SpfWait
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Timers_SpfWait) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SpfInitialWait == nil {
		var v uint32 = 1000
		t.SpfInitialWait = &v
	}
	if t.SpfMaxWait == nil {
		var v uint32 = 10000
		t.SpfMaxWait = &v
	}
	if t.SpfSecondWait == nil {
		var v uint32 = 1000
		t.SpfSecondWait = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Timers_SpfWait) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf_Timers_SpfWait"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Timers_SpfWait) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_Timers_SpfWait) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf_Timers_SpfWait.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_Timers_SpfWait) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Ospf_TrafficEngineeringOptions represents the /nokia-conf/configure/groups/group/router/ospf/traffic-engineering-options YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Ospf_TrafficEngineeringOptions struct {
	SrTe E_NokiaConf_Configure_Groups_Group_Router_Ospf_TrafficEngineeringOptions_SrTe `path:"sr-te" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Ospf_TrafficEngineeringOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_TrafficEngineeringOptions) IsYANGGoStruct() {}

// GetSrTe retrieves the value of the leaf SrTe from the NokiaConf_Configure_Groups_Group_Router_Ospf_TrafficEngineeringOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrTe is set, it can
// safely use t.GetSrTe() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrTe == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_TrafficEngineeringOptions) GetSrTe() E_NokiaConf_Configure_Groups_Group_Router_Ospf_TrafficEngineeringOptions_SrTe {
	if t == nil || t.SrTe == 0 {
		return NokiaConf_Configure_Groups_Group_Router_Ospf_TrafficEngineeringOptions_SrTe_false
	}
	return t.SrTe
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Ospf_TrafficEngineeringOptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_TrafficEngineeringOptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SrTe == 0 {
		t.SrTe = NokiaConf_Configure_Groups_Group_Router_Ospf_TrafficEngineeringOptions_SrTe_false
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_TrafficEngineeringOptions) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Ospf_TrafficEngineeringOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_TrafficEngineeringOptions) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Ospf_TrafficEngineeringOptions) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Ospf_TrafficEngineeringOptions.
func (*NokiaConf_Configure_Groups_Group_Router_Ospf_TrafficEngineeringOptions) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_P2MpSrTree represents the /nokia-conf/configure/groups/group/router/p2mp-sr-tree YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_P2MpSrTree struct {
	AdminState         E_NokiaTypesSros_AdminState                                                       `path:"admin-state" module:"nokia-conf"`
	BfdLiveness        []E_NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_BfdLiveness                `path:"bfd-liveness" module:"nokia-conf"`
	P2MpPolicy         map[string]*NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy         `path:"p2mp-policy" module:"nokia-conf"`
	ReplicationSegment map[string]*NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment `path:"replication-segment" module:"nokia-conf"`
	ReservedLabelBlock *string                                                                           `path:"reserved-label-block" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_P2MpSrTree implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_P2MpSrTree) IsYANGGoStruct() {}

// NewP2MpPolicy creates a new entry in the P2MpPolicy list of the
// NokiaConf_Configure_Groups_Group_Router_P2MpSrTree struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree) NewP2MpPolicy(P2MpPolicyName string) (*NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.P2MpPolicy == nil {
		t.P2MpPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy)
	}

	key := P2MpPolicyName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.P2MpPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list P2MpPolicy", key)
	}

	t.P2MpPolicy[key] = &NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy{
		P2MpPolicyName: &P2MpPolicyName,
	}

	return t.P2MpPolicy[key], nil
}

// RenameP2MpPolicy renames an entry in the list P2MpPolicy within
// the NokiaConf_Configure_Groups_Group_Router_P2MpSrTree struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree) RenameP2MpPolicy(oldK, newK string) error {
	if _, ok := t.P2MpPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in P2MpPolicy", newK)
	}

	e, ok := t.P2MpPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in P2MpPolicy", oldK)
	}
	e.P2MpPolicyName = &newK

	t.P2MpPolicy[newK] = e
	delete(t.P2MpPolicy, oldK)
	return nil
}

// GetOrCreateP2MpPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_P2MpSrTree. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree) GetOrCreateP2MpPolicy(P2MpPolicyName string) *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy {

	key := P2MpPolicyName

	if v, ok := t.P2MpPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewP2MpPolicy(P2MpPolicyName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateP2MpPolicy got unexpected error: %v", err))
	}
	return v
}

// GetP2MpPolicy retrieves the value with the specified key from
// the P2MpPolicy map field of NokiaConf_Configure_Groups_Group_Router_P2MpSrTree. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree) GetP2MpPolicy(P2MpPolicyName string) *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy {

	if t == nil {
		return nil
	}

	key := P2MpPolicyName

	if lm, ok := t.P2MpPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteP2MpPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_P2MpSrTree. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree) DeleteP2MpPolicy(P2MpPolicyName string) {
	key := P2MpPolicyName

	delete(t.P2MpPolicy, key)
}

// AppendP2MpPolicy appends the supplied NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy struct to the
// list P2MpPolicy of NokiaConf_Configure_Groups_Group_Router_P2MpSrTree. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree) AppendP2MpPolicy(v *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy) error {
	if v.P2MpPolicyName == nil {
		return fmt.Errorf("invalid nil key received for P2MpPolicyName")
	}

	key := *v.P2MpPolicyName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.P2MpPolicy == nil {
		t.P2MpPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy)
	}

	if _, ok := t.P2MpPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list P2MpPolicy %v", key)
	}

	t.P2MpPolicy[key] = v
	return nil
}

// NewReplicationSegment creates a new entry in the ReplicationSegment list of the
// NokiaConf_Configure_Groups_Group_Router_P2MpSrTree struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree) NewReplicationSegment(PolicyName string) (*NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ReplicationSegment == nil {
		t.ReplicationSegment = make(map[string]*NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment)
	}

	key := PolicyName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ReplicationSegment[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ReplicationSegment", key)
	}

	t.ReplicationSegment[key] = &NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment{
		PolicyName: &PolicyName,
	}

	return t.ReplicationSegment[key], nil
}

// RenameReplicationSegment renames an entry in the list ReplicationSegment within
// the NokiaConf_Configure_Groups_Group_Router_P2MpSrTree struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree) RenameReplicationSegment(oldK, newK string) error {
	if _, ok := t.ReplicationSegment[newK]; ok {
		return fmt.Errorf("key %v already exists in ReplicationSegment", newK)
	}

	e, ok := t.ReplicationSegment[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ReplicationSegment", oldK)
	}
	e.PolicyName = &newK

	t.ReplicationSegment[newK] = e
	delete(t.ReplicationSegment, oldK)
	return nil
}

// GetOrCreateReplicationSegment retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_P2MpSrTree. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree) GetOrCreateReplicationSegment(PolicyName string) *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment {

	key := PolicyName

	if v, ok := t.ReplicationSegment[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewReplicationSegment(PolicyName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateReplicationSegment got unexpected error: %v", err))
	}
	return v
}

// GetReplicationSegment retrieves the value with the specified key from
// the ReplicationSegment map field of NokiaConf_Configure_Groups_Group_Router_P2MpSrTree. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree) GetReplicationSegment(PolicyName string) *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment {

	if t == nil {
		return nil
	}

	key := PolicyName

	if lm, ok := t.ReplicationSegment[key]; ok {
		return lm
	}
	return nil
}

// DeleteReplicationSegment deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_P2MpSrTree. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree) DeleteReplicationSegment(PolicyName string) {
	key := PolicyName

	delete(t.ReplicationSegment, key)
}

// AppendReplicationSegment appends the supplied NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment struct to the
// list ReplicationSegment of NokiaConf_Configure_Groups_Group_Router_P2MpSrTree. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree) AppendReplicationSegment(v *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment) error {
	if v.PolicyName == nil {
		return fmt.Errorf("invalid nil key received for PolicyName")
	}

	key := *v.PolicyName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ReplicationSegment == nil {
		t.ReplicationSegment = make(map[string]*NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment)
	}

	if _, ok := t.ReplicationSegment[key]; ok {
		return fmt.Errorf("duplicate key for list ReplicationSegment %v", key)
	}

	t.ReplicationSegment[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_P2MpSrTree
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetBfdLiveness retrieves the value of the leaf BfdLiveness from the NokiaConf_Configure_Groups_Group_Router_P2MpSrTree
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdLiveness is set, it can
// safely use t.GetBfdLiveness() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdLiveness == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree) GetBfdLiveness() []E_NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_BfdLiveness {
	if t == nil || t.BfdLiveness == nil {
		return nil
	}
	return t.BfdLiveness
}

// GetReservedLabelBlock retrieves the value of the leaf ReservedLabelBlock from the NokiaConf_Configure_Groups_Group_Router_P2MpSrTree
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReservedLabelBlock is set, it can
// safely use t.GetReservedLabelBlock() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReservedLabelBlock == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree) GetReservedLabelBlock() string {
	if t == nil || t.ReservedLabelBlock == nil {
		return ""
	}
	return *t.ReservedLabelBlock
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_P2MpSrTree
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.P2MpPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.ReplicationSegment {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_P2MpSrTree"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_P2MpSrTree.
func (*NokiaConf_Configure_Groups_Group_Router_P2MpSrTree) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy represents the /nokia-conf/configure/groups/group/router/p2mp-sr-tree/p2mp-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy struct {
	AdminState     E_NokiaTypesSros_AdminState                                                             `path:"admin-state" module:"nokia-conf"`
	CandidatePath  map[string]*NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath `path:"candidate-path" module:"nokia-conf"`
	P2MpPolicyName *string                                                                                 `path:"p2mp-policy-name" module:"nokia-conf"`
	RootAddress    *string                                                                                 `path:"root-address" module:"nokia-conf"`
	TreeId         *uint32                                                                                 `path:"tree-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy) IsYANGGoStruct() {}

// NewCandidatePath creates a new entry in the CandidatePath list of the
// NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy) NewCandidatePath(CandidatePathName string) (*NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CandidatePath == nil {
		t.CandidatePath = make(map[string]*NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath)
	}

	key := CandidatePathName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.CandidatePath[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list CandidatePath", key)
	}

	t.CandidatePath[key] = &NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath{
		CandidatePathName: &CandidatePathName,
	}

	return t.CandidatePath[key], nil
}

// RenameCandidatePath renames an entry in the list CandidatePath within
// the NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy) RenameCandidatePath(oldK, newK string) error {
	if _, ok := t.CandidatePath[newK]; ok {
		return fmt.Errorf("key %v already exists in CandidatePath", newK)
	}

	e, ok := t.CandidatePath[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in CandidatePath", oldK)
	}
	e.CandidatePathName = &newK

	t.CandidatePath[newK] = e
	delete(t.CandidatePath, oldK)
	return nil
}

// GetOrCreateCandidatePath retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy) GetOrCreateCandidatePath(CandidatePathName string) *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath {

	key := CandidatePathName

	if v, ok := t.CandidatePath[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCandidatePath(CandidatePathName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCandidatePath got unexpected error: %v", err))
	}
	return v
}

// GetCandidatePath retrieves the value with the specified key from
// the CandidatePath map field of NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy) GetCandidatePath(CandidatePathName string) *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath {

	if t == nil {
		return nil
	}

	key := CandidatePathName

	if lm, ok := t.CandidatePath[key]; ok {
		return lm
	}
	return nil
}

// DeleteCandidatePath deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy) DeleteCandidatePath(CandidatePathName string) {
	key := CandidatePathName

	delete(t.CandidatePath, key)
}

// AppendCandidatePath appends the supplied NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath struct to the
// list CandidatePath of NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy) AppendCandidatePath(v *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath) error {
	if v.CandidatePathName == nil {
		return fmt.Errorf("invalid nil key received for CandidatePathName")
	}

	key := *v.CandidatePathName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CandidatePath == nil {
		t.CandidatePath = make(map[string]*NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath)
	}

	if _, ok := t.CandidatePath[key]; ok {
		return fmt.Errorf("duplicate key for list CandidatePath %v", key)
	}

	t.CandidatePath[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetP2MpPolicyName retrieves the value of the leaf P2MpPolicyName from the NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if P2MpPolicyName is set, it can
// safely use t.GetP2MpPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.P2MpPolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy) GetP2MpPolicyName() string {
	if t == nil || t.P2MpPolicyName == nil {
		return ""
	}
	return *t.P2MpPolicyName
}

// GetRootAddress retrieves the value of the leaf RootAddress from the NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RootAddress is set, it can
// safely use t.GetRootAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RootAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy) GetRootAddress() string {
	if t == nil || t.RootAddress == nil {
		return "0.0.0.0"
	}
	return *t.RootAddress
}

// GetTreeId retrieves the value of the leaf TreeId from the NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TreeId is set, it can
// safely use t.GetTreeId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TreeId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy) GetTreeId() uint32 {
	if t == nil || t.TreeId == nil {
		return 0
	}
	return *t.TreeId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.RootAddress == nil {
		var v string = "0.0.0.0"
		t.RootAddress = &v
	}
	if t.TreeId == nil {
		var v uint32 = 0
		t.TreeId = &v
	}
	for _, e := range t.CandidatePath {
		e.PopulateDefaults()
	}
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.P2MpPolicyName == nil {
		return nil, fmt.Errorf("nil value for key P2MpPolicyName")
	}

	return map[string]interface{}{
		"p2mp-policy-name": *t.P2MpPolicyName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy.
func (*NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath represents the /nokia-conf/configure/groups/group/router/p2mp-sr-tree/p2mp-policy/candidate-path YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath struct {
	ActiveInstance    *uint32                                                                                                                                                                                              `path:"active-instance" module:"nokia-conf"`
	AdminState        E_NokiaTypesSros_AdminState                                                                                                                                                                          `path:"admin-state" module:"nokia-conf"`
	CandidatePathName *string                                                                                                                                                                                              `path:"candidate-path-name" module:"nokia-conf"`
	PathInstances     map[NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath_PathInstances_Index_Union]*NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath_PathInstances `path:"path-instances" module:"nokia-conf"`
	Preference        *uint32                                                                                                                                                                                              `path:"preference" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath) IsYANGGoStruct() {
}

// NewPathInstances creates a new entry in the PathInstances list of the
// NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath) NewPathInstances(Index NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath_PathInstances_Index_Union) (*NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath_PathInstances, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PathInstances == nil {
		t.PathInstances = make(map[NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath_PathInstances_Index_Union]*NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath_PathInstances)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PathInstances[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PathInstances", key)
	}

	t.PathInstances[key] = &NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath_PathInstances{
		Index: Index,
	}

	return t.PathInstances[key], nil
}

// RenamePathInstances renames an entry in the list PathInstances within
// the NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath) RenamePathInstances(oldK, newK NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath_PathInstances_Index_Union) error {
	if _, ok := t.PathInstances[newK]; ok {
		return fmt.Errorf("key %v already exists in PathInstances", newK)
	}

	e, ok := t.PathInstances[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PathInstances", oldK)
	}
	e.Index = newK

	t.PathInstances[newK] = e
	delete(t.PathInstances, oldK)
	return nil
}

// GetOrCreatePathInstances retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath) GetOrCreatePathInstances(Index NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath_PathInstances_Index_Union) *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath_PathInstances {

	key := Index

	if v, ok := t.PathInstances[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPathInstances(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePathInstances got unexpected error: %v", err))
	}
	return v
}

// GetPathInstances retrieves the value with the specified key from
// the PathInstances map field of NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath) GetPathInstances(Index NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath_PathInstances_Index_Union) *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath_PathInstances {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.PathInstances[key]; ok {
		return lm
	}
	return nil
}

// DeletePathInstances deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath) DeletePathInstances(Index NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath_PathInstances_Index_Union) {
	key := Index

	delete(t.PathInstances, key)
}

// AppendPathInstances appends the supplied NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath_PathInstances struct to the
// list PathInstances of NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath_PathInstances already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath) AppendPathInstances(v *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath_PathInstances) error {
	key := v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PathInstances == nil {
		t.PathInstances = make(map[NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath_PathInstances_Index_Union]*NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath_PathInstances)
	}

	if _, ok := t.PathInstances[key]; ok {
		return fmt.Errorf("duplicate key for list PathInstances %v", key)
	}

	t.PathInstances[key] = v
	return nil
}

// GetActiveInstance retrieves the value of the leaf ActiveInstance from the NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActiveInstance is set, it can
// safely use t.GetActiveInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActiveInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath) GetActiveInstance() uint32 {
	if t == nil || t.ActiveInstance == nil {
		return 0
	}
	return *t.ActiveInstance
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetCandidatePathName retrieves the value of the leaf CandidatePathName from the NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CandidatePathName is set, it can
// safely use t.GetCandidatePathName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CandidatePathName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath) GetCandidatePathName() string {
	if t == nil || t.CandidatePathName == nil {
		return ""
	}
	return *t.CandidatePathName
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 100
	}
	return *t.Preference
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Preference == nil {
		var v uint32 = 100
		t.Preference = &v
	}
	for _, e := range t.PathInstances {
		e.PopulateDefaults()
	}
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.CandidatePathName == nil {
		return nil, fmt.Errorf("nil value for key CandidatePathName")
	}

	return map[string]interface{}{
		"candidate-path-name": *t.CandidatePathName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath.
func (*NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath_PathInstances represents the /nokia-conf/configure/groups/group/router/p2mp-sr-tree/p2mp-policy/candidate-path/path-instances YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath_PathInstances struct {
	Index      NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath_PathInstances_Index_Union `path:"index" module:"nokia-conf"`
	InstanceId *uint32                                                                                               `path:"instance-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath_PathInstances implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath_PathInstances) IsYANGGoStruct() {
}

// GetIndex retrieves the value of the leaf Index from the NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath_PathInstances
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath_PathInstances) GetIndex() NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath_PathInstances_Index_Union {
	if t == nil || t.Index == nil {
		return nil
	}
	return t.Index
}

// GetInstanceId retrieves the value of the leaf InstanceId from the NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath_PathInstances
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InstanceId is set, it can
// safely use t.GetInstanceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InstanceId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath_PathInstances) GetInstanceId() uint32 {
	if t == nil || t.InstanceId == nil {
		return 0
	}
	return *t.InstanceId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath_PathInstances
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath_PathInstances) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InstanceId == nil {
		var v uint32 = 0
		t.InstanceId = &v
	}
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath_PathInstances struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath_PathInstances) Î›ListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"index": t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath_PathInstances) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath_PathInstances"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath_PathInstances) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath_PathInstances) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath_PathInstances.
func (*NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_P2MpPolicy_CandidatePath_PathInstances) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment represents the /nokia-conf/configure/groups/group/router/p2mp-sr-tree/replication-segment YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment struct {
	AdminState      E_NokiaTypesSros_AdminState                                                                                                                                                                            `path:"admin-state" module:"nokia-conf"`
	DownstreamNodes map[NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_DownstreamIndex_Union]*NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes `path:"downstream-nodes" module:"nokia-conf"`
	InstanceId      *uint32                                                                                                                                                                                                `path:"instance-id" module:"nokia-conf"`
	PolicyName      *string                                                                                                                                                                                                `path:"policy-name" module:"nokia-conf"`
	ReplicationSid  *uint32                                                                                                                                                                                                `path:"replication-sid" module:"nokia-conf"`
	RootAddress     *string                                                                                                                                                                                                `path:"root-address" module:"nokia-conf"`
	SidAction       E_NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_SidAction                                                                                                                      `path:"sid-action" module:"nokia-conf"`
	TreeId          *uint32                                                                                                                                                                                                `path:"tree-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment) IsYANGGoStruct() {}

// NewDownstreamNodes creates a new entry in the DownstreamNodes list of the
// NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment) NewDownstreamNodes(DownstreamIndex NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_DownstreamIndex_Union) (*NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DownstreamNodes == nil {
		t.DownstreamNodes = make(map[NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_DownstreamIndex_Union]*NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes)
	}

	key := DownstreamIndex

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DownstreamNodes[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DownstreamNodes", key)
	}

	t.DownstreamNodes[key] = &NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes{
		DownstreamIndex: DownstreamIndex,
	}

	return t.DownstreamNodes[key], nil
}

// RenameDownstreamNodes renames an entry in the list DownstreamNodes within
// the NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment) RenameDownstreamNodes(oldK, newK NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_DownstreamIndex_Union) error {
	if _, ok := t.DownstreamNodes[newK]; ok {
		return fmt.Errorf("key %v already exists in DownstreamNodes", newK)
	}

	e, ok := t.DownstreamNodes[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in DownstreamNodes", oldK)
	}
	e.DownstreamIndex = newK

	t.DownstreamNodes[newK] = e
	delete(t.DownstreamNodes, oldK)
	return nil
}

// GetOrCreateDownstreamNodes retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment) GetOrCreateDownstreamNodes(DownstreamIndex NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_DownstreamIndex_Union) *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes {

	key := DownstreamIndex

	if v, ok := t.DownstreamNodes[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDownstreamNodes(DownstreamIndex)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDownstreamNodes got unexpected error: %v", err))
	}
	return v
}

// GetDownstreamNodes retrieves the value with the specified key from
// the DownstreamNodes map field of NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment) GetDownstreamNodes(DownstreamIndex NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_DownstreamIndex_Union) *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes {

	if t == nil {
		return nil
	}

	key := DownstreamIndex

	if lm, ok := t.DownstreamNodes[key]; ok {
		return lm
	}
	return nil
}

// DeleteDownstreamNodes deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment) DeleteDownstreamNodes(DownstreamIndex NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_DownstreamIndex_Union) {
	key := DownstreamIndex

	delete(t.DownstreamNodes, key)
}

// AppendDownstreamNodes appends the supplied NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes struct to the
// list DownstreamNodes of NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment) AppendDownstreamNodes(v *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes) error {
	key := v.DownstreamIndex

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DownstreamNodes == nil {
		t.DownstreamNodes = make(map[NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_DownstreamIndex_Union]*NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes)
	}

	if _, ok := t.DownstreamNodes[key]; ok {
		return fmt.Errorf("duplicate key for list DownstreamNodes %v", key)
	}

	t.DownstreamNodes[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetInstanceId retrieves the value of the leaf InstanceId from the NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InstanceId is set, it can
// safely use t.GetInstanceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InstanceId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment) GetInstanceId() uint32 {
	if t == nil || t.InstanceId == nil {
		return 0
	}
	return *t.InstanceId
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// GetReplicationSid retrieves the value of the leaf ReplicationSid from the NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReplicationSid is set, it can
// safely use t.GetReplicationSid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReplicationSid == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment) GetReplicationSid() uint32 {
	if t == nil || t.ReplicationSid == nil {
		return 0
	}
	return *t.ReplicationSid
}

// GetRootAddress retrieves the value of the leaf RootAddress from the NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RootAddress is set, it can
// safely use t.GetRootAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RootAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment) GetRootAddress() string {
	if t == nil || t.RootAddress == nil {
		return ""
	}
	return *t.RootAddress
}

// GetSidAction retrieves the value of the leaf SidAction from the NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SidAction is set, it can
// safely use t.GetSidAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SidAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment) GetSidAction() E_NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_SidAction {
	if t == nil || t.SidAction == 0 {
		return NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_SidAction_none
	}
	return t.SidAction
}

// GetTreeId retrieves the value of the leaf TreeId from the NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TreeId is set, it can
// safely use t.GetTreeId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TreeId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment) GetTreeId() uint32 {
	if t == nil || t.TreeId == nil {
		return 0
	}
	return *t.TreeId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.InstanceId == nil {
		var v uint32 = 0
		t.InstanceId = &v
	}
	if t.ReplicationSid == nil {
		var v uint32 = 0
		t.ReplicationSid = &v
	}
	if t.SidAction == 0 {
		t.SidAction = NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_SidAction_none
	}
	if t.TreeId == nil {
		var v uint32 = 0
		t.TreeId = &v
	}
	for _, e := range t.DownstreamNodes {
		e.PopulateDefaults()
	}
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.PolicyName == nil {
		return nil, fmt.Errorf("nil value for key PolicyName")
	}

	return map[string]interface{}{
		"policy-name": *t.PolicyName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment.
func (*NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes represents the /nokia-conf/configure/groups/group/router/p2mp-sr-tree/replication-segment/downstream-nodes YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes struct {
	AdminState           E_NokiaTypesSros_AdminState                                                                                 `path:"admin-state" module:"nokia-conf"`
	DownstreamIndex      NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_DownstreamIndex_Union `path:"downstream-index" module:"nokia-conf"`
	Label                *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label                `path:"label" module:"nokia-conf"`
	NextHopAddress       *string                                                                                                     `path:"next-hop-address" module:"nokia-conf"`
	NextHopInterfaceName *string                                                                                                     `path:"next-hop-interface-name" module:"nokia-conf"`
	ProtectNexthopId     *int32                                                                                                      `path:"protect-nexthop-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes) IsYANGGoStruct() {
}

// GetOrCreateLabel retrieves the value of the Label field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes) GetOrCreateLabel() *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label {
	if t.Label != nil {
		return t.Label
	}
	t.Label = &NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label{}
	return t.Label
}

// GetLabel returns the value of the Label struct pointer
// from NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes. If the receiver or the field Label is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes) GetLabel() *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label {
	if t != nil && t.Label != nil {
		return t.Label
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDownstreamIndex retrieves the value of the leaf DownstreamIndex from the NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DownstreamIndex is set, it can
// safely use t.GetDownstreamIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DownstreamIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes) GetDownstreamIndex() NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_DownstreamIndex_Union {
	if t == nil || t.DownstreamIndex == nil {
		return nil
	}
	return t.DownstreamIndex
}

// GetNextHopAddress retrieves the value of the leaf NextHopAddress from the NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHopAddress is set, it can
// safely use t.GetNextHopAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHopAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes) GetNextHopAddress() string {
	if t == nil || t.NextHopAddress == nil {
		return "0.0.0.0"
	}
	return *t.NextHopAddress
}

// GetNextHopInterfaceName retrieves the value of the leaf NextHopInterfaceName from the NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHopInterfaceName is set, it can
// safely use t.GetNextHopInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHopInterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes) GetNextHopInterfaceName() string {
	if t == nil || t.NextHopInterfaceName == nil {
		return ""
	}
	return *t.NextHopInterfaceName
}

// GetProtectNexthopId retrieves the value of the leaf ProtectNexthopId from the NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProtectNexthopId is set, it can
// safely use t.GetProtectNexthopId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProtectNexthopId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes) GetProtectNexthopId() int32 {
	if t == nil || t.ProtectNexthopId == nil {
		return 0
	}
	return *t.ProtectNexthopId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.NextHopAddress == nil {
		var v string = "0.0.0.0"
		t.NextHopAddress = &v
	}
	t.Label.PopulateDefaults()
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes) Î›ListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"downstream-index": t.DownstreamIndex,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes.
func (*NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label represents the /nokia-conf/configure/groups/group/router/p2mp-sr-tree/replication-segment/downstream-nodes/label YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label struct {
	SidList map[NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label_SidList_Index_Union]*NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label_SidList `path:"sid-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label) IsYANGGoStruct() {
}

// NewSidList creates a new entry in the SidList list of the
// NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label) NewSidList(Index NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label_SidList_Index_Union) (*NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label_SidList, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SidList == nil {
		t.SidList = make(map[NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label_SidList_Index_Union]*NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label_SidList)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SidList[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SidList", key)
	}

	t.SidList[key] = &NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label_SidList{
		Index: Index,
	}

	return t.SidList[key], nil
}

// RenameSidList renames an entry in the list SidList within
// the NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label) RenameSidList(oldK, newK NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label_SidList_Index_Union) error {
	if _, ok := t.SidList[newK]; ok {
		return fmt.Errorf("key %v already exists in SidList", newK)
	}

	e, ok := t.SidList[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SidList", oldK)
	}
	e.Index = newK

	t.SidList[newK] = e
	delete(t.SidList, oldK)
	return nil
}

// GetOrCreateSidList retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label) GetOrCreateSidList(Index NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label_SidList_Index_Union) *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label_SidList {

	key := Index

	if v, ok := t.SidList[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSidList(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSidList got unexpected error: %v", err))
	}
	return v
}

// GetSidList retrieves the value with the specified key from
// the SidList map field of NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label) GetSidList(Index NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label_SidList_Index_Union) *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label_SidList {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.SidList[key]; ok {
		return lm
	}
	return nil
}

// DeleteSidList deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label) DeleteSidList(Index NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label_SidList_Index_Union) {
	key := Index

	delete(t.SidList, key)
}

// AppendSidList appends the supplied NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label_SidList struct to the
// list SidList of NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label_SidList already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label) AppendSidList(v *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label_SidList) error {
	key := v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SidList == nil {
		t.SidList = make(map[NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label_SidList_Index_Union]*NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label_SidList)
	}

	if _, ok := t.SidList[key]; ok {
		return fmt.Errorf("duplicate key for list SidList %v", key)
	}

	t.SidList[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.SidList {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label.
func (*NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label_SidList represents the /nokia-conf/configure/groups/group/router/p2mp-sr-tree/replication-segment/downstream-nodes/label/sid-list YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label_SidList struct {
	Index          NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label_SidList_Index_Union `path:"index" module:"nokia-conf"`
	ReplicationSid *uint32                                                                                                         `path:"replication-sid" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label_SidList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label_SidList) IsYANGGoStruct() {
}

// GetIndex retrieves the value of the leaf Index from the NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label_SidList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label_SidList) GetIndex() NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label_SidList_Index_Union {
	if t == nil || t.Index == nil {
		return nil
	}
	return t.Index
}

// GetReplicationSid retrieves the value of the leaf ReplicationSid from the NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label_SidList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReplicationSid is set, it can
// safely use t.GetReplicationSid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReplicationSid == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label_SidList) GetReplicationSid() uint32 {
	if t == nil || t.ReplicationSid == nil {
		return 0
	}
	return *t.ReplicationSid
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label_SidList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label_SidList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label_SidList struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label_SidList) Î›ListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"index": t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label_SidList) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label_SidList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label_SidList) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label_SidList) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label_SidList.
func (*NokiaConf_Configure_Groups_Group_Router_P2MpSrTree_ReplicationSegment_DownstreamNodes_Label_SidList) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Pcep represents the /nokia-conf/configure/groups/group/router/pcep YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Pcep struct {
	Pcc *NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc `path:"pcc" module:"nokia-conf" yangPresence:"true"`
	Pce *NokiaConf_Configure_Groups_Group_Router_Pcep_Pce `path:"pce" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Pcep implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Pcep) IsYANGGoStruct() {}

// GetOrCreatePcc retrieves the value of the Pcc field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcep) GetOrCreatePcc() *NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc {
	if t.Pcc != nil {
		return t.Pcc
	}
	t.Pcc = &NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc{}
	return t.Pcc
}

// GetOrCreatePce retrieves the value of the Pce field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcep) GetOrCreatePce() *NokiaConf_Configure_Groups_Group_Router_Pcep_Pce {
	if t.Pce != nil {
		return t.Pce
	}
	t.Pce = &NokiaConf_Configure_Groups_Group_Router_Pcep_Pce{}
	return t.Pce
}

// GetPcc returns the value of the Pcc struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Pcep. If the receiver or the field Pcc is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcep) GetPcc() *NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc {
	if t != nil && t.Pcc != nil {
		return t.Pcc
	}
	return nil
}

// GetPce returns the value of the Pce struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Pcep. If the receiver or the field Pce is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcep) GetPce() *NokiaConf_Configure_Groups_Group_Router_Pcep_Pce {
	if t != nil && t.Pce != nil {
		return t.Pce
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Pcep
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcep) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Pcc.PopulateDefaults()
	t.Pce.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcep) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Pcep"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcep) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcep) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Pcep.
func (*NokiaConf_Configure_Groups_Group_Router_Pcep) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc represents the /nokia-conf/configure/groups/group/router/pcep/pcc YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc struct {
	AdminState            E_NokiaTypesSros_AdminState                                       `path:"admin-state" module:"nokia-conf"`
	DeadTimer             *uint32                                                           `path:"dead-timer" module:"nokia-conf"`
	Keepalive             *uint32                                                           `path:"keepalive" module:"nokia-conf"`
	LocalAddress          *string                                                           `path:"local-address" module:"nokia-conf"`
	LocalAddressIpv6      *string                                                           `path:"local-address-ipv6" module:"nokia-conf"`
	MaxSrtePceInitLsps    *uint32                                                           `path:"max-srte-pce-init-lsps" module:"nokia-conf"`
	Peer                  map[string]*NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc_Peer `path:"peer" module:"nokia-conf"`
	RedelegationTimer     *uint32                                                           `path:"redelegation-timer" module:"nokia-conf"`
	ReportPathConstraints *bool                                                             `path:"report-path-constraints" module:"nokia-conf"`
	StateTimer            *NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc_StateTimer      `path:"state-timer" module:"nokia-conf"`
	UnknownMessageRate    *uint32                                                           `path:"unknown-message-rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc) IsYANGGoStruct() {}

// NewPeer creates a new entry in the Peer list of the
// NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc) NewPeer(IpAddress string) (*NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc_Peer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc_Peer)
	}

	key := IpAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Peer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Peer", key)
	}

	t.Peer[key] = &NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc_Peer{
		IpAddress: &IpAddress,
	}

	return t.Peer[key], nil
}

// RenamePeer renames an entry in the list Peer within
// the NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc) RenamePeer(oldK, newK string) error {
	if _, ok := t.Peer[newK]; ok {
		return fmt.Errorf("key %v already exists in Peer", newK)
	}

	e, ok := t.Peer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Peer", oldK)
	}
	e.IpAddress = &newK

	t.Peer[newK] = e
	delete(t.Peer, oldK)
	return nil
}

// GetOrCreatePeer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc) GetOrCreatePeer(IpAddress string) *NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc_Peer {

	key := IpAddress

	if v, ok := t.Peer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPeer(IpAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePeer got unexpected error: %v", err))
	}
	return v
}

// GetPeer retrieves the value with the specified key from
// the Peer map field of NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc) GetPeer(IpAddress string) *NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc_Peer {

	if t == nil {
		return nil
	}

	key := IpAddress

	if lm, ok := t.Peer[key]; ok {
		return lm
	}
	return nil
}

// DeletePeer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc) DeletePeer(IpAddress string) {
	key := IpAddress

	delete(t.Peer, key)
}

// AppendPeer appends the supplied NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc_Peer struct to the
// list Peer of NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc_Peer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc) AppendPeer(v *NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc_Peer) error {
	if v.IpAddress == nil {
		return fmt.Errorf("invalid nil key received for IpAddress")
	}

	key := *v.IpAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc_Peer)
	}

	if _, ok := t.Peer[key]; ok {
		return fmt.Errorf("duplicate key for list Peer %v", key)
	}

	t.Peer[key] = v
	return nil
}

// GetOrCreateStateTimer retrieves the value of the StateTimer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc) GetOrCreateStateTimer() *NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc_StateTimer {
	if t.StateTimer != nil {
		return t.StateTimer
	}
	t.StateTimer = &NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc_StateTimer{}
	return t.StateTimer
}

// GetStateTimer returns the value of the StateTimer struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc. If the receiver or the field StateTimer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc) GetStateTimer() *NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc_StateTimer {
	if t != nil && t.StateTimer != nil {
		return t.StateTimer
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDeadTimer retrieves the value of the leaf DeadTimer from the NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DeadTimer is set, it can
// safely use t.GetDeadTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DeadTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc) GetDeadTimer() uint32 {
	if t == nil || t.DeadTimer == nil {
		return 120
	}
	return *t.DeadTimer
}

// GetKeepalive retrieves the value of the leaf Keepalive from the NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Keepalive is set, it can
// safely use t.GetKeepalive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Keepalive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc) GetKeepalive() uint32 {
	if t == nil || t.Keepalive == nil {
		return 30
	}
	return *t.Keepalive
}

// GetLocalAddress retrieves the value of the leaf LocalAddress from the NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalAddress is set, it can
// safely use t.GetLocalAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc) GetLocalAddress() string {
	if t == nil || t.LocalAddress == nil {
		return ""
	}
	return *t.LocalAddress
}

// GetLocalAddressIpv6 retrieves the value of the leaf LocalAddressIpv6 from the NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalAddressIpv6 is set, it can
// safely use t.GetLocalAddressIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalAddressIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc) GetLocalAddressIpv6() string {
	if t == nil || t.LocalAddressIpv6 == nil {
		return ""
	}
	return *t.LocalAddressIpv6
}

// GetMaxSrtePceInitLsps retrieves the value of the leaf MaxSrtePceInitLsps from the NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxSrtePceInitLsps is set, it can
// safely use t.GetMaxSrtePceInitLsps() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxSrtePceInitLsps == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc) GetMaxSrtePceInitLsps() uint32 {
	if t == nil || t.MaxSrtePceInitLsps == nil {
		return 8191
	}
	return *t.MaxSrtePceInitLsps
}

// GetRedelegationTimer retrieves the value of the leaf RedelegationTimer from the NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RedelegationTimer is set, it can
// safely use t.GetRedelegationTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RedelegationTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc) GetRedelegationTimer() uint32 {
	if t == nil || t.RedelegationTimer == nil {
		return 90
	}
	return *t.RedelegationTimer
}

// GetReportPathConstraints retrieves the value of the leaf ReportPathConstraints from the NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReportPathConstraints is set, it can
// safely use t.GetReportPathConstraints() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReportPathConstraints == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc) GetReportPathConstraints() bool {
	if t == nil || t.ReportPathConstraints == nil {
		return true
	}
	return *t.ReportPathConstraints
}

// GetUnknownMessageRate retrieves the value of the leaf UnknownMessageRate from the NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnknownMessageRate is set, it can
// safely use t.GetUnknownMessageRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnknownMessageRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc) GetUnknownMessageRate() uint32 {
	if t == nil || t.UnknownMessageRate == nil {
		return 10
	}
	return *t.UnknownMessageRate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.DeadTimer == nil {
		var v uint32 = 120
		t.DeadTimer = &v
	}
	if t.Keepalive == nil {
		var v uint32 = 30
		t.Keepalive = &v
	}
	if t.MaxSrtePceInitLsps == nil {
		var v uint32 = 8191
		t.MaxSrtePceInitLsps = &v
	}
	if t.RedelegationTimer == nil {
		var v uint32 = 90
		t.RedelegationTimer = &v
	}
	if t.ReportPathConstraints == nil {
		var v bool = true
		t.ReportPathConstraints = &v
	}
	if t.UnknownMessageRate == nil {
		var v uint32 = 10
		t.UnknownMessageRate = &v
	}
	t.StateTimer.PopulateDefaults()
	for _, e := range t.Peer {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc.
func (*NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc_Peer represents the /nokia-conf/configure/groups/group/router/pcep/pcc/peer YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc_Peer struct {
	AdminState       E_NokiaTypesSros_AdminState                                             `path:"admin-state" module:"nokia-conf"`
	IpAddress        *string                                                                 `path:"ip-address" module:"nokia-conf"`
	Preference       *uint32                                                                 `path:"preference" module:"nokia-conf"`
	RoutePreference  E_NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc_Peer_RoutePreference `path:"route-preference" module:"nokia-conf"`
	TlsClientProfile *string                                                                 `path:"tls-client-profile" module:"nokia-conf"`
	TlsWaitTimer     *uint32                                                                 `path:"tls-wait-timer" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc_Peer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc_Peer) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc_Peer) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc_Peer) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc_Peer) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 0
	}
	return *t.Preference
}

// GetRoutePreference retrieves the value of the leaf RoutePreference from the NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RoutePreference is set, it can
// safely use t.GetRoutePreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RoutePreference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc_Peer) GetRoutePreference() E_NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc_Peer_RoutePreference {
	if t == nil || t.RoutePreference == 0 {
		return NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc_Peer_RoutePreference_both
	}
	return t.RoutePreference
}

// GetTlsClientProfile retrieves the value of the leaf TlsClientProfile from the NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TlsClientProfile is set, it can
// safely use t.GetTlsClientProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TlsClientProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc_Peer) GetTlsClientProfile() string {
	if t == nil || t.TlsClientProfile == nil {
		return ""
	}
	return *t.TlsClientProfile
}

// GetTlsWaitTimer retrieves the value of the leaf TlsWaitTimer from the NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TlsWaitTimer is set, it can
// safely use t.GetTlsWaitTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TlsWaitTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc_Peer) GetTlsWaitTimer() uint32 {
	if t == nil || t.TlsWaitTimer == nil {
		return 60
	}
	return *t.TlsWaitTimer
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc_Peer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc_Peer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Preference == nil {
		var v uint32 = 0
		t.Preference = &v
	}
	if t.RoutePreference == 0 {
		t.RoutePreference = NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc_Peer_RoutePreference_both
	}
	if t.TlsWaitTimer == nil {
		var v uint32 = 60
		t.TlsWaitTimer = &v
	}
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc_Peer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc_Peer) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.IpAddress == nil {
		return nil, fmt.Errorf("nil value for key IpAddress")
	}

	return map[string]interface{}{
		"ip-address": *t.IpAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc_Peer) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc_Peer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc_Peer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc_Peer) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc_Peer.
func (*NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc_Peer) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc_StateTimer represents the /nokia-conf/configure/groups/group/router/pcep/pcc/state-timer YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc_StateTimer struct {
	Timer       *uint32                                                                   `path:"timer" module:"nokia-conf"`
	TimerAction E_NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc_StateTimer_TimerAction `path:"timer-action" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc_StateTimer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc_StateTimer) IsYANGGoStruct() {}

// GetTimer retrieves the value of the leaf Timer from the NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc_StateTimer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timer is set, it can
// safely use t.GetTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc_StateTimer) GetTimer() uint32 {
	if t == nil || t.Timer == nil {
		return 180
	}
	return *t.Timer
}

// GetTimerAction retrieves the value of the leaf TimerAction from the NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc_StateTimer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TimerAction is set, it can
// safely use t.GetTimerAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TimerAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc_StateTimer) GetTimerAction() E_NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc_StateTimer_TimerAction {
	if t == nil || t.TimerAction == 0 {
		return NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc_StateTimer_TimerAction_remove
	}
	return t.TimerAction
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc_StateTimer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc_StateTimer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Timer == nil {
		var v uint32 = 180
		t.Timer = &v
	}
	if t.TimerAction == 0 {
		t.TimerAction = NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc_StateTimer_TimerAction_remove
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc_StateTimer) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc_StateTimer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc_StateTimer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc_StateTimer) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc_StateTimer.
func (*NokiaConf_Configure_Groups_Group_Router_Pcep_Pcc_StateTimer) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Pcep_Pce represents the /nokia-conf/configure/groups/group/router/pcep/pce YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Pcep_Pce struct {
	AdminState         E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	DeadTimer          *uint32                     `path:"dead-timer" module:"nokia-conf"`
	Keepalive          *uint32                     `path:"keepalive" module:"nokia-conf"`
	LocalAddress       *string                     `path:"local-address" module:"nokia-conf"`
	LocalAddressIpv6   *string                     `path:"local-address-ipv6" module:"nokia-conf"`
	TlsServerProfile   *string                     `path:"tls-server-profile" module:"nokia-conf"`
	TlsWaitTimer       *uint32                     `path:"tls-wait-timer" module:"nokia-conf"`
	UnknownMessageRate *uint32                     `path:"unknown-message-rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Pcep_Pce implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Pcep_Pce) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Pcep_Pce
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcep_Pce) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDeadTimer retrieves the value of the leaf DeadTimer from the NokiaConf_Configure_Groups_Group_Router_Pcep_Pce
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DeadTimer is set, it can
// safely use t.GetDeadTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DeadTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcep_Pce) GetDeadTimer() uint32 {
	if t == nil || t.DeadTimer == nil {
		return 120
	}
	return *t.DeadTimer
}

// GetKeepalive retrieves the value of the leaf Keepalive from the NokiaConf_Configure_Groups_Group_Router_Pcep_Pce
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Keepalive is set, it can
// safely use t.GetKeepalive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Keepalive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcep_Pce) GetKeepalive() uint32 {
	if t == nil || t.Keepalive == nil {
		return 30
	}
	return *t.Keepalive
}

// GetLocalAddress retrieves the value of the leaf LocalAddress from the NokiaConf_Configure_Groups_Group_Router_Pcep_Pce
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalAddress is set, it can
// safely use t.GetLocalAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcep_Pce) GetLocalAddress() string {
	if t == nil || t.LocalAddress == nil {
		return ""
	}
	return *t.LocalAddress
}

// GetLocalAddressIpv6 retrieves the value of the leaf LocalAddressIpv6 from the NokiaConf_Configure_Groups_Group_Router_Pcep_Pce
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalAddressIpv6 is set, it can
// safely use t.GetLocalAddressIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalAddressIpv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcep_Pce) GetLocalAddressIpv6() string {
	if t == nil || t.LocalAddressIpv6 == nil {
		return ""
	}
	return *t.LocalAddressIpv6
}

// GetTlsServerProfile retrieves the value of the leaf TlsServerProfile from the NokiaConf_Configure_Groups_Group_Router_Pcep_Pce
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TlsServerProfile is set, it can
// safely use t.GetTlsServerProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TlsServerProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcep_Pce) GetTlsServerProfile() string {
	if t == nil || t.TlsServerProfile == nil {
		return ""
	}
	return *t.TlsServerProfile
}

// GetTlsWaitTimer retrieves the value of the leaf TlsWaitTimer from the NokiaConf_Configure_Groups_Group_Router_Pcep_Pce
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TlsWaitTimer is set, it can
// safely use t.GetTlsWaitTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TlsWaitTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcep_Pce) GetTlsWaitTimer() uint32 {
	if t == nil || t.TlsWaitTimer == nil {
		return 60
	}
	return *t.TlsWaitTimer
}

// GetUnknownMessageRate retrieves the value of the leaf UnknownMessageRate from the NokiaConf_Configure_Groups_Group_Router_Pcep_Pce
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnknownMessageRate is set, it can
// safely use t.GetUnknownMessageRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnknownMessageRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcep_Pce) GetUnknownMessageRate() uint32 {
	if t == nil || t.UnknownMessageRate == nil {
		return 10
	}
	return *t.UnknownMessageRate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Pcep_Pce
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcep_Pce) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.DeadTimer == nil {
		var v uint32 = 120
		t.DeadTimer = &v
	}
	if t.Keepalive == nil {
		var v uint32 = 30
		t.Keepalive = &v
	}
	if t.TlsWaitTimer == nil {
		var v uint32 = 60
		t.TlsWaitTimer = &v
	}
	if t.UnknownMessageRate == nil {
		var v uint32 = 10
		t.UnknownMessageRate = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcep_Pce) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Pcep_Pce"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcep_Pce) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcep_Pce) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Pcep_Pce.
func (*NokiaConf_Configure_Groups_Group_Router_Pcep_Pce) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Pcp represents the /nokia-conf/configure/groups/group/router/pcp YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Pcp struct {
	Server map[string]*NokiaConf_Configure_Groups_Group_Router_Pcp_Server `path:"server" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Pcp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Pcp) IsYANGGoStruct() {}

// NewServer creates a new entry in the Server list of the
// NokiaConf_Configure_Groups_Group_Router_Pcp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcp) NewServer(Name string) (*NokiaConf_Configure_Groups_Group_Router_Pcp_Server, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Pcp_Server)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Server[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Server", key)
	}

	t.Server[key] = &NokiaConf_Configure_Groups_Group_Router_Pcp_Server{
		Name: &Name,
	}

	return t.Server[key], nil
}

// RenameServer renames an entry in the list Server within
// the NokiaConf_Configure_Groups_Group_Router_Pcp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcp) RenameServer(oldK, newK string) error {
	if _, ok := t.Server[newK]; ok {
		return fmt.Errorf("key %v already exists in Server", newK)
	}

	e, ok := t.Server[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Server", oldK)
	}
	e.Name = &newK

	t.Server[newK] = e
	delete(t.Server, oldK)
	return nil
}

// GetOrCreateServer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Pcp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcp) GetOrCreateServer(Name string) *NokiaConf_Configure_Groups_Group_Router_Pcp_Server {

	key := Name

	if v, ok := t.Server[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServer(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServer got unexpected error: %v", err))
	}
	return v
}

// GetServer retrieves the value with the specified key from
// the Server map field of NokiaConf_Configure_Groups_Group_Router_Pcp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcp) GetServer(Name string) *NokiaConf_Configure_Groups_Group_Router_Pcp_Server {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Server[key]; ok {
		return lm
	}
	return nil
}

// DeleteServer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Pcp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcp) DeleteServer(Name string) {
	key := Name

	delete(t.Server, key)
}

// AppendServer appends the supplied NokiaConf_Configure_Groups_Group_Router_Pcp_Server struct to the
// list Server of NokiaConf_Configure_Groups_Group_Router_Pcp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Pcp_Server already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcp) AppendServer(v *NokiaConf_Configure_Groups_Group_Router_Pcp_Server) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Pcp_Server)
	}

	if _, ok := t.Server[key]; ok {
		return fmt.Errorf("duplicate key for list Server %v", key)
	}

	t.Server[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Pcp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Server {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcp) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Pcp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcp) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Pcp.
func (*NokiaConf_Configure_Groups_Group_Router_Pcp) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Pcp_Server represents the /nokia-conf/configure/groups/group/router/pcp/server YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Pcp_Server struct {
	AdminState           E_NokiaTypesSros_AdminState                                              `path:"admin-state" module:"nokia-conf"`
	Description          *string                                                                  `path:"description" module:"nokia-conf"`
	DualStackLiteAddress *string                                                                  `path:"dual-stack-lite-address" module:"nokia-conf"`
	FwdInsideRouter      *string                                                                  `path:"fwd-inside-router" module:"nokia-conf"`
	Interface            map[string]*NokiaConf_Configure_Groups_Group_Router_Pcp_Server_Interface `path:"interface" module:"nokia-conf"`
	Name                 *string                                                                  `path:"name" module:"nokia-conf"`
	Policy               *string                                                                  `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Pcp_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Pcp_Server) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// NokiaConf_Configure_Groups_Group_Router_Pcp_Server struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcp_Server) NewInterface(Name string) (*NokiaConf_Configure_Groups_Group_Router_Pcp_Server_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Pcp_Server_Interface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &NokiaConf_Configure_Groups_Group_Router_Pcp_Server_Interface{
		Name: &Name,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the NokiaConf_Configure_Groups_Group_Router_Pcp_Server struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcp_Server) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.Name = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Pcp_Server. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcp_Server) GetOrCreateInterface(Name string) *NokiaConf_Configure_Groups_Group_Router_Pcp_Server_Interface {

	key := Name

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of NokiaConf_Configure_Groups_Group_Router_Pcp_Server. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcp_Server) GetInterface(Name string) *NokiaConf_Configure_Groups_Group_Router_Pcp_Server_Interface {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Pcp_Server. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcp_Server) DeleteInterface(Name string) {
	key := Name

	delete(t.Interface, key)
}

// AppendInterface appends the supplied NokiaConf_Configure_Groups_Group_Router_Pcp_Server_Interface struct to the
// list Interface of NokiaConf_Configure_Groups_Group_Router_Pcp_Server. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Pcp_Server_Interface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcp_Server) AppendInterface(v *NokiaConf_Configure_Groups_Group_Router_Pcp_Server_Interface) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Pcp_Server_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Pcp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcp_Server) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Router_Pcp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcp_Server) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDualStackLiteAddress retrieves the value of the leaf DualStackLiteAddress from the NokiaConf_Configure_Groups_Group_Router_Pcp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DualStackLiteAddress is set, it can
// safely use t.GetDualStackLiteAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DualStackLiteAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcp_Server) GetDualStackLiteAddress() string {
	if t == nil || t.DualStackLiteAddress == nil {
		return ""
	}
	return *t.DualStackLiteAddress
}

// GetFwdInsideRouter retrieves the value of the leaf FwdInsideRouter from the NokiaConf_Configure_Groups_Group_Router_Pcp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FwdInsideRouter is set, it can
// safely use t.GetFwdInsideRouter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FwdInsideRouter == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcp_Server) GetFwdInsideRouter() string {
	if t == nil || t.FwdInsideRouter == nil {
		return ""
	}
	return *t.FwdInsideRouter
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Router_Pcp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcp_Server) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Groups_Group_Router_Pcp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcp_Server) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Pcp_Server
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcp_Server) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Pcp_Server struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcp_Server) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcp_Server) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Pcp_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcp_Server) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcp_Server) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Pcp_Server.
func (*NokiaConf_Configure_Groups_Group_Router_Pcp_Server) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Pcp_Server_Interface represents the /nokia-conf/configure/groups/group/router/pcp/server/interface YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Pcp_Server_Interface struct {
	Name *string `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Pcp_Server_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Pcp_Server_Interface) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Router_Pcp_Server_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcp_Server_Interface) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Pcp_Server_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcp_Server_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Pcp_Server_Interface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcp_Server_Interface) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcp_Server_Interface) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Pcp_Server_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcp_Server_Interface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Pcp_Server_Interface) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Pcp_Server_Interface.
func (*NokiaConf_Configure_Groups_Group_Router_Pcp_Server_Interface) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Pim represents the /nokia-conf/configure/groups/group/router/pim YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Pim struct {
	AdminState           E_NokiaTypesSros_AdminState                                           `path:"admin-state" module:"nokia-conf"`
	ApplyTo              E_NokiaConf_Configure_Groups_Group_Router_Pim_ApplyTo                 `path:"apply-to" module:"nokia-conf"`
	Import               *NokiaConf_Configure_Groups_Group_Router_Pim_Import                   `path:"import" module:"nokia-conf"`
	Interface            map[string]*NokiaConf_Configure_Groups_Group_Router_Pim_Interface     `path:"interface" module:"nokia-conf"`
	Ipv4                 *NokiaConf_Configure_Groups_Group_Router_Pim_Ipv4                     `path:"ipv4" module:"nokia-conf"`
	Ipv6                 *NokiaConf_Configure_Groups_Group_Router_Pim_Ipv6                     `path:"ipv6" module:"nokia-conf"`
	LagUsageOptimization *bool                                                                 `path:"lag-usage-optimization" module:"nokia-conf"`
	McEcmpBalance        *bool                                                                 `path:"mc-ecmp-balance" module:"nokia-conf"`
	McEcmpBalanceHold    *uint32                                                               `path:"mc-ecmp-balance-hold" module:"nokia-conf"`
	McEcmpHashing        *NokiaConf_Configure_Groups_Group_Router_Pim_McEcmpHashing            `path:"mc-ecmp-hashing" module:"nokia-conf" yangPresence:"true"`
	MdtSpt               *bool                                                                 `path:"mdt-spt" module:"nokia-conf"`
	NonDrAttractTraffic  *bool                                                                 `path:"non-dr-attract-traffic" module:"nokia-conf"`
	PimSsmScaling        *bool                                                                 `path:"pim-ssm-scaling" module:"nokia-conf"`
	Rp                   *NokiaConf_Configure_Groups_Group_Router_Pim_Rp                       `path:"rp" module:"nokia-conf"`
	Rpfv                 *NokiaConf_Configure_Groups_Group_Router_Pim_Rpfv                     `path:"rpfv" module:"nokia-conf"`
	SptSwitchover        map[string]*NokiaConf_Configure_Groups_Group_Router_Pim_SptSwitchover `path:"spt-switchover" module:"nokia-conf"`
	SsmGroups            *NokiaConf_Configure_Groups_Group_Router_Pim_SsmGroups                `path:"ssm-groups" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Pim implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Pim) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// NokiaConf_Configure_Groups_Group_Router_Pim struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim) NewInterface(InterfaceName string) (*NokiaConf_Configure_Groups_Group_Router_Pim_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Pim_Interface)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &NokiaConf_Configure_Groups_Group_Router_Pim_Interface{
		InterfaceName: &InterfaceName,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the NokiaConf_Configure_Groups_Group_Router_Pim struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.InterfaceName = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Pim. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim) GetOrCreateInterface(InterfaceName string) *NokiaConf_Configure_Groups_Group_Router_Pim_Interface {

	key := InterfaceName

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of NokiaConf_Configure_Groups_Group_Router_Pim. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim) GetInterface(InterfaceName string) *NokiaConf_Configure_Groups_Group_Router_Pim_Interface {

	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Pim. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim) DeleteInterface(InterfaceName string) {
	key := InterfaceName

	delete(t.Interface, key)
}

// AppendInterface appends the supplied NokiaConf_Configure_Groups_Group_Router_Pim_Interface struct to the
// list Interface of NokiaConf_Configure_Groups_Group_Router_Pim. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Pim_Interface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim) AppendInterface(v *NokiaConf_Configure_Groups_Group_Router_Pim_Interface) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Pim_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// NewSptSwitchover creates a new entry in the SptSwitchover list of the
// NokiaConf_Configure_Groups_Group_Router_Pim struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim) NewSptSwitchover(IpPrefix string) (*NokiaConf_Configure_Groups_Group_Router_Pim_SptSwitchover, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SptSwitchover == nil {
		t.SptSwitchover = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Pim_SptSwitchover)
	}

	key := IpPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SptSwitchover[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SptSwitchover", key)
	}

	t.SptSwitchover[key] = &NokiaConf_Configure_Groups_Group_Router_Pim_SptSwitchover{
		IpPrefix: &IpPrefix,
	}

	return t.SptSwitchover[key], nil
}

// RenameSptSwitchover renames an entry in the list SptSwitchover within
// the NokiaConf_Configure_Groups_Group_Router_Pim struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim) RenameSptSwitchover(oldK, newK string) error {
	if _, ok := t.SptSwitchover[newK]; ok {
		return fmt.Errorf("key %v already exists in SptSwitchover", newK)
	}

	e, ok := t.SptSwitchover[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SptSwitchover", oldK)
	}
	e.IpPrefix = &newK

	t.SptSwitchover[newK] = e
	delete(t.SptSwitchover, oldK)
	return nil
}

// GetOrCreateSptSwitchover retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Pim. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim) GetOrCreateSptSwitchover(IpPrefix string) *NokiaConf_Configure_Groups_Group_Router_Pim_SptSwitchover {

	key := IpPrefix

	if v, ok := t.SptSwitchover[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSptSwitchover(IpPrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSptSwitchover got unexpected error: %v", err))
	}
	return v
}

// GetSptSwitchover retrieves the value with the specified key from
// the SptSwitchover map field of NokiaConf_Configure_Groups_Group_Router_Pim. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim) GetSptSwitchover(IpPrefix string) *NokiaConf_Configure_Groups_Group_Router_Pim_SptSwitchover {

	if t == nil {
		return nil
	}

	key := IpPrefix

	if lm, ok := t.SptSwitchover[key]; ok {
		return lm
	}
	return nil
}

// DeleteSptSwitchover deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Pim. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim) DeleteSptSwitchover(IpPrefix string) {
	key := IpPrefix

	delete(t.SptSwitchover, key)
}

// AppendSptSwitchover appends the supplied NokiaConf_Configure_Groups_Group_Router_Pim_SptSwitchover struct to the
// list SptSwitchover of NokiaConf_Configure_Groups_Group_Router_Pim. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Pim_SptSwitchover already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim) AppendSptSwitchover(v *NokiaConf_Configure_Groups_Group_Router_Pim_SptSwitchover) error {
	if v.IpPrefix == nil {
		return fmt.Errorf("invalid nil key received for IpPrefix")
	}

	key := *v.IpPrefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SptSwitchover == nil {
		t.SptSwitchover = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Pim_SptSwitchover)
	}

	if _, ok := t.SptSwitchover[key]; ok {
		return fmt.Errorf("duplicate key for list SptSwitchover %v", key)
	}

	t.SptSwitchover[key] = v
	return nil
}

// GetOrCreateImport retrieves the value of the Import field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim) GetOrCreateImport() *NokiaConf_Configure_Groups_Group_Router_Pim_Import {
	if t.Import != nil {
		return t.Import
	}
	t.Import = &NokiaConf_Configure_Groups_Group_Router_Pim_Import{}
	return t.Import
}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim) GetOrCreateIpv4() *NokiaConf_Configure_Groups_Group_Router_Pim_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Groups_Group_Router_Pim_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim) GetOrCreateIpv6() *NokiaConf_Configure_Groups_Group_Router_Pim_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &NokiaConf_Configure_Groups_Group_Router_Pim_Ipv6{}
	return t.Ipv6
}

// GetOrCreateMcEcmpHashing retrieves the value of the McEcmpHashing field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim) GetOrCreateMcEcmpHashing() *NokiaConf_Configure_Groups_Group_Router_Pim_McEcmpHashing {
	if t.McEcmpHashing != nil {
		return t.McEcmpHashing
	}
	t.McEcmpHashing = &NokiaConf_Configure_Groups_Group_Router_Pim_McEcmpHashing{}
	return t.McEcmpHashing
}

// GetOrCreateRp retrieves the value of the Rp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim) GetOrCreateRp() *NokiaConf_Configure_Groups_Group_Router_Pim_Rp {
	if t.Rp != nil {
		return t.Rp
	}
	t.Rp = &NokiaConf_Configure_Groups_Group_Router_Pim_Rp{}
	return t.Rp
}

// GetOrCreateRpfv retrieves the value of the Rpfv field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim) GetOrCreateRpfv() *NokiaConf_Configure_Groups_Group_Router_Pim_Rpfv {
	if t.Rpfv != nil {
		return t.Rpfv
	}
	t.Rpfv = &NokiaConf_Configure_Groups_Group_Router_Pim_Rpfv{}
	return t.Rpfv
}

// GetOrCreateSsmGroups retrieves the value of the SsmGroups field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim) GetOrCreateSsmGroups() *NokiaConf_Configure_Groups_Group_Router_Pim_SsmGroups {
	if t.SsmGroups != nil {
		return t.SsmGroups
	}
	t.SsmGroups = &NokiaConf_Configure_Groups_Group_Router_Pim_SsmGroups{}
	return t.SsmGroups
}

// GetImport returns the value of the Import struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Pim. If the receiver or the field Import is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim) GetImport() *NokiaConf_Configure_Groups_Group_Router_Pim_Import {
	if t != nil && t.Import != nil {
		return t.Import
	}
	return nil
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Pim. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim) GetIpv4() *NokiaConf_Configure_Groups_Group_Router_Pim_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Pim. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim) GetIpv6() *NokiaConf_Configure_Groups_Group_Router_Pim_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// GetMcEcmpHashing returns the value of the McEcmpHashing struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Pim. If the receiver or the field McEcmpHashing is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim) GetMcEcmpHashing() *NokiaConf_Configure_Groups_Group_Router_Pim_McEcmpHashing {
	if t != nil && t.McEcmpHashing != nil {
		return t.McEcmpHashing
	}
	return nil
}

// GetRp returns the value of the Rp struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Pim. If the receiver or the field Rp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim) GetRp() *NokiaConf_Configure_Groups_Group_Router_Pim_Rp {
	if t != nil && t.Rp != nil {
		return t.Rp
	}
	return nil
}

// GetRpfv returns the value of the Rpfv struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Pim. If the receiver or the field Rpfv is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim) GetRpfv() *NokiaConf_Configure_Groups_Group_Router_Pim_Rpfv {
	if t != nil && t.Rpfv != nil {
		return t.Rpfv
	}
	return nil
}

// GetSsmGroups returns the value of the SsmGroups struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Pim. If the receiver or the field SsmGroups is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim) GetSsmGroups() *NokiaConf_Configure_Groups_Group_Router_Pim_SsmGroups {
	if t != nil && t.SsmGroups != nil {
		return t.SsmGroups
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Pim
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetApplyTo retrieves the value of the leaf ApplyTo from the NokiaConf_Configure_Groups_Group_Router_Pim
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyTo is set, it can
// safely use t.GetApplyTo() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyTo == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim) GetApplyTo() E_NokiaConf_Configure_Groups_Group_Router_Pim_ApplyTo {
	if t == nil || t.ApplyTo == 0 {
		return NokiaConf_Configure_Groups_Group_Router_Pim_ApplyTo_none
	}
	return t.ApplyTo
}

// GetLagUsageOptimization retrieves the value of the leaf LagUsageOptimization from the NokiaConf_Configure_Groups_Group_Router_Pim
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LagUsageOptimization is set, it can
// safely use t.GetLagUsageOptimization() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LagUsageOptimization == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim) GetLagUsageOptimization() bool {
	if t == nil || t.LagUsageOptimization == nil {
		return false
	}
	return *t.LagUsageOptimization
}

// GetMcEcmpBalance retrieves the value of the leaf McEcmpBalance from the NokiaConf_Configure_Groups_Group_Router_Pim
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McEcmpBalance is set, it can
// safely use t.GetMcEcmpBalance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McEcmpBalance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim) GetMcEcmpBalance() bool {
	if t == nil || t.McEcmpBalance == nil {
		return true
	}
	return *t.McEcmpBalance
}

// GetMcEcmpBalanceHold retrieves the value of the leaf McEcmpBalanceHold from the NokiaConf_Configure_Groups_Group_Router_Pim
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McEcmpBalanceHold is set, it can
// safely use t.GetMcEcmpBalanceHold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McEcmpBalanceHold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim) GetMcEcmpBalanceHold() uint32 {
	if t == nil || t.McEcmpBalanceHold == nil {
		return 0
	}
	return *t.McEcmpBalanceHold
}

// GetMdtSpt retrieves the value of the leaf MdtSpt from the NokiaConf_Configure_Groups_Group_Router_Pim
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MdtSpt is set, it can
// safely use t.GetMdtSpt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MdtSpt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim) GetMdtSpt() bool {
	if t == nil || t.MdtSpt == nil {
		return false
	}
	return *t.MdtSpt
}

// GetNonDrAttractTraffic retrieves the value of the leaf NonDrAttractTraffic from the NokiaConf_Configure_Groups_Group_Router_Pim
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NonDrAttractTraffic is set, it can
// safely use t.GetNonDrAttractTraffic() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NonDrAttractTraffic == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim) GetNonDrAttractTraffic() bool {
	if t == nil || t.NonDrAttractTraffic == nil {
		return false
	}
	return *t.NonDrAttractTraffic
}

// GetPimSsmScaling retrieves the value of the leaf PimSsmScaling from the NokiaConf_Configure_Groups_Group_Router_Pim
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PimSsmScaling is set, it can
// safely use t.GetPimSsmScaling() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PimSsmScaling == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim) GetPimSsmScaling() bool {
	if t == nil || t.PimSsmScaling == nil {
		return false
	}
	return *t.PimSsmScaling
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Pim
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.ApplyTo == 0 {
		t.ApplyTo = NokiaConf_Configure_Groups_Group_Router_Pim_ApplyTo_none
	}
	if t.LagUsageOptimization == nil {
		var v bool = false
		t.LagUsageOptimization = &v
	}
	if t.McEcmpBalance == nil {
		var v bool = true
		t.McEcmpBalance = &v
	}
	if t.MdtSpt == nil {
		var v bool = false
		t.MdtSpt = &v
	}
	if t.NonDrAttractTraffic == nil {
		var v bool = false
		t.NonDrAttractTraffic = &v
	}
	if t.PimSsmScaling == nil {
		var v bool = false
		t.PimSsmScaling = &v
	}
	t.Import.PopulateDefaults()
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
	t.McEcmpHashing.PopulateDefaults()
	t.Rp.PopulateDefaults()
	t.Rpfv.PopulateDefaults()
	t.SsmGroups.PopulateDefaults()
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
	for _, e := range t.SptSwitchover {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Pim"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Pim.
func (*NokiaConf_Configure_Groups_Group_Router_Pim) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Pim_Import represents the /nokia-conf/configure/groups/group/router/pim/import YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Pim_Import struct {
	JoinPolicy     []string `path:"join-policy" module:"nokia-conf"`
	RegisterPolicy []string `path:"register-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Pim_Import implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Import) IsYANGGoStruct() {}

// GetJoinPolicy retrieves the value of the leaf JoinPolicy from the NokiaConf_Configure_Groups_Group_Router_Pim_Import
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if JoinPolicy is set, it can
// safely use t.GetJoinPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.JoinPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Import) GetJoinPolicy() []string {
	if t == nil || t.JoinPolicy == nil {
		return nil
	}
	return t.JoinPolicy
}

// GetRegisterPolicy retrieves the value of the leaf RegisterPolicy from the NokiaConf_Configure_Groups_Group_Router_Pim_Import
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RegisterPolicy is set, it can
// safely use t.GetRegisterPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RegisterPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Import) GetRegisterPolicy() []string {
	if t == nil || t.RegisterPolicy == nil {
		return nil
	}
	return t.RegisterPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Pim_Import
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Import) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Import) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Pim_Import"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Import) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Import) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Pim_Import.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Import) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Pim_Interface represents the /nokia-conf/configure/groups/group/router/pim/interface YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Pim_Interface struct {
	AdminState        E_NokiaTypesSros_AdminState                                              `path:"admin-state" module:"nokia-conf"`
	AssertPeriod      *int32                                                                   `path:"assert-period" module:"nokia-conf"`
	BfdLiveness       *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_BfdLiveness       `path:"bfd-liveness" module:"nokia-conf"`
	BierSignalingType *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_BierSignalingType `path:"bier-signaling-type" module:"nokia-conf"`
	BsmCheckRtrAlert  *bool                                                                    `path:"bsm-check-rtr-alert" module:"nokia-conf"`
	HelloInterval     *int32                                                                   `path:"hello-interval" module:"nokia-conf"`
	HelloMultiplier   *uint32                                                                  `path:"hello-multiplier" module:"nokia-conf"`
	ImprovedAssert    *bool                                                                    `path:"improved-assert" module:"nokia-conf"`
	InstantPruneEcho  *bool                                                                    `path:"instant-prune-echo" module:"nokia-conf"`
	InterfaceName     *string                                                                  `path:"interface-name" module:"nokia-conf"`
	Ipv4              *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv4              `path:"ipv4" module:"nokia-conf" yangPresence:"true"`
	Ipv6              *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv6              `path:"ipv6" module:"nokia-conf" yangPresence:"true"`
	MaxGroups         *uint32                                                                  `path:"max-groups" module:"nokia-conf"`
	Mcac              *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac              `path:"mcac" module:"nokia-conf"`
	MulticastSenders  E_NokiaConf_Configure_Groups_Group_Router_Pim_Interface_MulticastSenders `path:"multicast-senders" module:"nokia-conf"`
	P2MpLdpTreeJoin   *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_P2MpLdpTreeJoin   `path:"p2mp-ldp-tree-join" module:"nokia-conf"`
	Priority          *uint32                                                                  `path:"priority" module:"nokia-conf"`
	StickyDr          *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_StickyDr          `path:"sticky-dr" module:"nokia-conf" yangPresence:"true"`
	ThreeWayHello     *bool                                                                    `path:"three-way-hello" module:"nokia-conf"`
	TrackingSupport   *bool                                                                    `path:"tracking-support" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Pim_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Interface) IsYANGGoStruct() {}

// GetOrCreateBfdLiveness retrieves the value of the BfdLiveness field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface) GetOrCreateBfdLiveness() *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_BfdLiveness {
	if t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	t.BfdLiveness = &NokiaConf_Configure_Groups_Group_Router_Pim_Interface_BfdLiveness{}
	return t.BfdLiveness
}

// GetOrCreateBierSignalingType retrieves the value of the BierSignalingType field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface) GetOrCreateBierSignalingType() *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_BierSignalingType {
	if t.BierSignalingType != nil {
		return t.BierSignalingType
	}
	t.BierSignalingType = &NokiaConf_Configure_Groups_Group_Router_Pim_Interface_BierSignalingType{}
	return t.BierSignalingType
}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface) GetOrCreateIpv4() *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface) GetOrCreateIpv6() *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv6{}
	return t.Ipv6
}

// GetOrCreateMcac retrieves the value of the Mcac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface) GetOrCreateMcac() *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac {
	if t.Mcac != nil {
		return t.Mcac
	}
	t.Mcac = &NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac{}
	return t.Mcac
}

// GetOrCreateP2MpLdpTreeJoin retrieves the value of the P2MpLdpTreeJoin field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface) GetOrCreateP2MpLdpTreeJoin() *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_P2MpLdpTreeJoin {
	if t.P2MpLdpTreeJoin != nil {
		return t.P2MpLdpTreeJoin
	}
	t.P2MpLdpTreeJoin = &NokiaConf_Configure_Groups_Group_Router_Pim_Interface_P2MpLdpTreeJoin{}
	return t.P2MpLdpTreeJoin
}

// GetOrCreateStickyDr retrieves the value of the StickyDr field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface) GetOrCreateStickyDr() *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_StickyDr {
	if t.StickyDr != nil {
		return t.StickyDr
	}
	t.StickyDr = &NokiaConf_Configure_Groups_Group_Router_Pim_Interface_StickyDr{}
	return t.StickyDr
}

// GetBfdLiveness returns the value of the BfdLiveness struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Pim_Interface. If the receiver or the field BfdLiveness is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface) GetBfdLiveness() *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_BfdLiveness {
	if t != nil && t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	return nil
}

// GetBierSignalingType returns the value of the BierSignalingType struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Pim_Interface. If the receiver or the field BierSignalingType is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface) GetBierSignalingType() *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_BierSignalingType {
	if t != nil && t.BierSignalingType != nil {
		return t.BierSignalingType
	}
	return nil
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Pim_Interface. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface) GetIpv4() *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Pim_Interface. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface) GetIpv6() *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// GetMcac returns the value of the Mcac struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Pim_Interface. If the receiver or the field Mcac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface) GetMcac() *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac {
	if t != nil && t.Mcac != nil {
		return t.Mcac
	}
	return nil
}

// GetP2MpLdpTreeJoin returns the value of the P2MpLdpTreeJoin struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Pim_Interface. If the receiver or the field P2MpLdpTreeJoin is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface) GetP2MpLdpTreeJoin() *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_P2MpLdpTreeJoin {
	if t != nil && t.P2MpLdpTreeJoin != nil {
		return t.P2MpLdpTreeJoin
	}
	return nil
}

// GetStickyDr returns the value of the StickyDr struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Pim_Interface. If the receiver or the field StickyDr is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface) GetStickyDr() *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_StickyDr {
	if t != nil && t.StickyDr != nil {
		return t.StickyDr
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetAssertPeriod retrieves the value of the leaf AssertPeriod from the NokiaConf_Configure_Groups_Group_Router_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AssertPeriod is set, it can
// safely use t.GetAssertPeriod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AssertPeriod == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface) GetAssertPeriod() int32 {
	if t == nil || t.AssertPeriod == nil {
		return 60
	}
	return *t.AssertPeriod
}

// GetBsmCheckRtrAlert retrieves the value of the leaf BsmCheckRtrAlert from the NokiaConf_Configure_Groups_Group_Router_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BsmCheckRtrAlert is set, it can
// safely use t.GetBsmCheckRtrAlert() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BsmCheckRtrAlert == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface) GetBsmCheckRtrAlert() bool {
	if t == nil || t.BsmCheckRtrAlert == nil {
		return false
	}
	return *t.BsmCheckRtrAlert
}

// GetHelloInterval retrieves the value of the leaf HelloInterval from the NokiaConf_Configure_Groups_Group_Router_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloInterval is set, it can
// safely use t.GetHelloInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface) GetHelloInterval() int32 {
	if t == nil || t.HelloInterval == nil {
		return 30
	}
	return *t.HelloInterval
}

// GetHelloMultiplier retrieves the value of the leaf HelloMultiplier from the NokiaConf_Configure_Groups_Group_Router_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloMultiplier is set, it can
// safely use t.GetHelloMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloMultiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface) GetHelloMultiplier() uint32 {
	if t == nil || t.HelloMultiplier == nil {
		return 35
	}
	return *t.HelloMultiplier
}

// GetImprovedAssert retrieves the value of the leaf ImprovedAssert from the NokiaConf_Configure_Groups_Group_Router_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImprovedAssert is set, it can
// safely use t.GetImprovedAssert() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImprovedAssert == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface) GetImprovedAssert() bool {
	if t == nil || t.ImprovedAssert == nil {
		return true
	}
	return *t.ImprovedAssert
}

// GetInstantPruneEcho retrieves the value of the leaf InstantPruneEcho from the NokiaConf_Configure_Groups_Group_Router_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InstantPruneEcho is set, it can
// safely use t.GetInstantPruneEcho() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InstantPruneEcho == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface) GetInstantPruneEcho() bool {
	if t == nil || t.InstantPruneEcho == nil {
		return false
	}
	return *t.InstantPruneEcho
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Groups_Group_Router_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetMaxGroups retrieves the value of the leaf MaxGroups from the NokiaConf_Configure_Groups_Group_Router_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxGroups is set, it can
// safely use t.GetMaxGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface) GetMaxGroups() uint32 {
	if t == nil || t.MaxGroups == nil {
		return 0
	}
	return *t.MaxGroups
}

// GetMulticastSenders retrieves the value of the leaf MulticastSenders from the NokiaConf_Configure_Groups_Group_Router_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MulticastSenders is set, it can
// safely use t.GetMulticastSenders() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MulticastSenders == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface) GetMulticastSenders() E_NokiaConf_Configure_Groups_Group_Router_Pim_Interface_MulticastSenders {
	if t == nil || t.MulticastSenders == 0 {
		return NokiaConf_Configure_Groups_Group_Router_Pim_Interface_MulticastSenders_auto
	}
	return t.MulticastSenders
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Groups_Group_Router_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface) GetPriority() uint32 {
	if t == nil || t.Priority == nil {
		return 1
	}
	return *t.Priority
}

// GetThreeWayHello retrieves the value of the leaf ThreeWayHello from the NokiaConf_Configure_Groups_Group_Router_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ThreeWayHello is set, it can
// safely use t.GetThreeWayHello() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ThreeWayHello == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface) GetThreeWayHello() bool {
	if t == nil || t.ThreeWayHello == nil {
		return false
	}
	return *t.ThreeWayHello
}

// GetTrackingSupport retrieves the value of the leaf TrackingSupport from the NokiaConf_Configure_Groups_Group_Router_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TrackingSupport is set, it can
// safely use t.GetTrackingSupport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TrackingSupport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface) GetTrackingSupport() bool {
	if t == nil || t.TrackingSupport == nil {
		return false
	}
	return *t.TrackingSupport
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Pim_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.AssertPeriod == nil {
		var v int32 = 60
		t.AssertPeriod = &v
	}
	if t.BsmCheckRtrAlert == nil {
		var v bool = false
		t.BsmCheckRtrAlert = &v
	}
	if t.HelloInterval == nil {
		var v int32 = 30
		t.HelloInterval = &v
	}
	if t.HelloMultiplier == nil {
		var v uint32 = 35
		t.HelloMultiplier = &v
	}
	if t.ImprovedAssert == nil {
		var v bool = true
		t.ImprovedAssert = &v
	}
	if t.InstantPruneEcho == nil {
		var v bool = false
		t.InstantPruneEcho = &v
	}
	if t.MaxGroups == nil {
		var v uint32 = 0
		t.MaxGroups = &v
	}
	if t.MulticastSenders == 0 {
		t.MulticastSenders = NokiaConf_Configure_Groups_Group_Router_Pim_Interface_MulticastSenders_auto
	}
	if t.Priority == nil {
		var v uint32 = 1
		t.Priority = &v
	}
	if t.ThreeWayHello == nil {
		var v bool = false
		t.ThreeWayHello = &v
	}
	if t.TrackingSupport == nil {
		var v bool = false
		t.TrackingSupport = &v
	}
	t.BfdLiveness.PopulateDefaults()
	t.BierSignalingType.PopulateDefaults()
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
	t.Mcac.PopulateDefaults()
	t.P2MpLdpTreeJoin.PopulateDefaults()
	t.StickyDr.PopulateDefaults()
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Pim_Interface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Pim_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Pim_Interface.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Interface) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Pim_Interface_BfdLiveness represents the /nokia-conf/configure/groups/group/router/pim/interface/bfd-liveness YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Pim_Interface_BfdLiveness struct {
	Ipv4 *bool `path:"ipv4" module:"nokia-conf"`
	Ipv6 *bool `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Pim_Interface_BfdLiveness implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Interface_BfdLiveness) IsYANGGoStruct() {}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Groups_Group_Router_Pim_Interface_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_BfdLiveness) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Groups_Group_Router_Pim_Interface_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_BfdLiveness) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Pim_Interface_BfdLiveness
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_BfdLiveness) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_BfdLiveness) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Pim_Interface_BfdLiveness"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_BfdLiveness) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_BfdLiveness) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Pim_Interface_BfdLiveness.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Interface_BfdLiveness) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Pim_Interface_BierSignalingType represents the /nokia-conf/configure/groups/group/router/pim/interface/bier-signaling-type YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Pim_Interface_BierSignalingType struct {
	Ipv4 *bool `path:"ipv4" module:"nokia-conf"`
	Ipv6 *bool `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Pim_Interface_BierSignalingType implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Interface_BierSignalingType) IsYANGGoStruct() {}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Groups_Group_Router_Pim_Interface_BierSignalingType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_BierSignalingType) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Groups_Group_Router_Pim_Interface_BierSignalingType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_BierSignalingType) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Pim_Interface_BierSignalingType
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_BierSignalingType) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_BierSignalingType) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Pim_Interface_BierSignalingType"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_BierSignalingType) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_BierSignalingType) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Pim_Interface_BierSignalingType.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Interface_BierSignalingType) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv4 represents the /nokia-conf/configure/groups/group/router/pim/interface/ipv4 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv4 struct {
	MonitorOperGroup *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv4_MonitorOperGroup `path:"monitor-oper-group" module:"nokia-conf"`
	Multicast        *bool                                                                        `path:"multicast" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv4) IsYANGGoStruct() {}

// GetOrCreateMonitorOperGroup retrieves the value of the MonitorOperGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv4) GetOrCreateMonitorOperGroup() *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv4_MonitorOperGroup {
	if t.MonitorOperGroup != nil {
		return t.MonitorOperGroup
	}
	t.MonitorOperGroup = &NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv4_MonitorOperGroup{}
	return t.MonitorOperGroup
}

// GetMonitorOperGroup returns the value of the MonitorOperGroup struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv4. If the receiver or the field MonitorOperGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv4) GetMonitorOperGroup() *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv4_MonitorOperGroup {
	if t != nil && t.MonitorOperGroup != nil {
		return t.MonitorOperGroup
	}
	return nil
}

// GetMulticast retrieves the value of the leaf Multicast from the NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multicast is set, it can
// safely use t.GetMulticast() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multicast == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv4) GetMulticast() bool {
	if t == nil || t.Multicast == nil {
		return true
	}
	return *t.Multicast
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Multicast == nil {
		var v bool = true
		t.Multicast = &v
	}
	t.MonitorOperGroup.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv4) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv4) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv4.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv4) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv4_MonitorOperGroup represents the /nokia-conf/configure/groups/group/router/pim/interface/ipv4/monitor-oper-group YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv4_MonitorOperGroup struct {
	Name          *string                                                                                 `path:"name" module:"nokia-conf"`
	Operation     E_NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv4_MonitorOperGroup_Operation `path:"operation" module:"nokia-conf"`
	PriorityDelta *uint32                                                                                 `path:"priority-delta" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv4_MonitorOperGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv4_MonitorOperGroup) IsYANGGoStruct() {
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv4_MonitorOperGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv4_MonitorOperGroup) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetOperation retrieves the value of the leaf Operation from the NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv4_MonitorOperGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Operation is set, it can
// safely use t.GetOperation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Operation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv4_MonitorOperGroup) GetOperation() E_NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv4_MonitorOperGroup_Operation {
	if t == nil || t.Operation == 0 {
		return 0
	}
	return t.Operation
}

// GetPriorityDelta retrieves the value of the leaf PriorityDelta from the NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv4_MonitorOperGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PriorityDelta is set, it can
// safely use t.GetPriorityDelta() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PriorityDelta == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv4_MonitorOperGroup) GetPriorityDelta() uint32 {
	if t == nil || t.PriorityDelta == nil {
		return 0
	}
	return *t.PriorityDelta
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv4_MonitorOperGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv4_MonitorOperGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv4_MonitorOperGroup) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv4_MonitorOperGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv4_MonitorOperGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv4_MonitorOperGroup) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv4_MonitorOperGroup.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv4_MonitorOperGroup) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv6 represents the /nokia-conf/configure/groups/group/router/pim/interface/ipv6 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv6 struct {
	MonitorOperGroup *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv6_MonitorOperGroup `path:"monitor-oper-group" module:"nokia-conf"`
	Multicast        *bool                                                                        `path:"multicast" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv6) IsYANGGoStruct() {}

// GetOrCreateMonitorOperGroup retrieves the value of the MonitorOperGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv6) GetOrCreateMonitorOperGroup() *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv6_MonitorOperGroup {
	if t.MonitorOperGroup != nil {
		return t.MonitorOperGroup
	}
	t.MonitorOperGroup = &NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv6_MonitorOperGroup{}
	return t.MonitorOperGroup
}

// GetMonitorOperGroup returns the value of the MonitorOperGroup struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv6. If the receiver or the field MonitorOperGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv6) GetMonitorOperGroup() *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv6_MonitorOperGroup {
	if t != nil && t.MonitorOperGroup != nil {
		return t.MonitorOperGroup
	}
	return nil
}

// GetMulticast retrieves the value of the leaf Multicast from the NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multicast is set, it can
// safely use t.GetMulticast() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multicast == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv6) GetMulticast() bool {
	if t == nil || t.Multicast == nil {
		return true
	}
	return *t.Multicast
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Multicast == nil {
		var v bool = true
		t.Multicast = &v
	}
	t.MonitorOperGroup.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv6) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv6) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv6.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv6) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv6_MonitorOperGroup represents the /nokia-conf/configure/groups/group/router/pim/interface/ipv6/monitor-oper-group YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv6_MonitorOperGroup struct {
	Name          *string                                                                                 `path:"name" module:"nokia-conf"`
	Operation     E_NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv6_MonitorOperGroup_Operation `path:"operation" module:"nokia-conf"`
	PriorityDelta *uint32                                                                                 `path:"priority-delta" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv6_MonitorOperGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv6_MonitorOperGroup) IsYANGGoStruct() {
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv6_MonitorOperGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv6_MonitorOperGroup) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetOperation retrieves the value of the leaf Operation from the NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv6_MonitorOperGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Operation is set, it can
// safely use t.GetOperation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Operation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv6_MonitorOperGroup) GetOperation() E_NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv6_MonitorOperGroup_Operation {
	if t == nil || t.Operation == 0 {
		return 0
	}
	return t.Operation
}

// GetPriorityDelta retrieves the value of the leaf PriorityDelta from the NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv6_MonitorOperGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PriorityDelta is set, it can
// safely use t.GetPriorityDelta() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PriorityDelta == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv6_MonitorOperGroup) GetPriorityDelta() uint32 {
	if t == nil || t.PriorityDelta == nil {
		return 0
	}
	return *t.PriorityDelta
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv6_MonitorOperGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv6_MonitorOperGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv6_MonitorOperGroup) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv6_MonitorOperGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv6_MonitorOperGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv6_MonitorOperGroup) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv6_MonitorOperGroup.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Ipv6_MonitorOperGroup) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac represents the /nokia-conf/configure/groups/group/router/pim/interface/mcac YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac struct {
	Bandwidth       *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_Bandwidth     `path:"bandwidth" module:"nokia-conf"`
	InterfacePolicy *string                                                                   `path:"interface-policy" module:"nokia-conf"`
	McConstraints   *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints `path:"mc-constraints" module:"nokia-conf"`
	Policy          *string                                                                   `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac) IsYANGGoStruct() {}

// GetOrCreateBandwidth retrieves the value of the Bandwidth field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac) GetOrCreateBandwidth() *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_Bandwidth {
	if t.Bandwidth != nil {
		return t.Bandwidth
	}
	t.Bandwidth = &NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_Bandwidth{}
	return t.Bandwidth
}

// GetOrCreateMcConstraints retrieves the value of the McConstraints field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac) GetOrCreateMcConstraints() *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints {
	if t.McConstraints != nil {
		return t.McConstraints
	}
	t.McConstraints = &NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints{}
	return t.McConstraints
}

// GetBandwidth returns the value of the Bandwidth struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac. If the receiver or the field Bandwidth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac) GetBandwidth() *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_Bandwidth {
	if t != nil && t.Bandwidth != nil {
		return t.Bandwidth
	}
	return nil
}

// GetMcConstraints returns the value of the McConstraints struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac. If the receiver or the field McConstraints is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac) GetMcConstraints() *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints {
	if t != nil && t.McConstraints != nil {
		return t.McConstraints
	}
	return nil
}

// GetInterfacePolicy retrieves the value of the leaf InterfacePolicy from the NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfacePolicy is set, it can
// safely use t.GetInterfacePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfacePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac) GetInterfacePolicy() string {
	if t == nil || t.InterfacePolicy == nil {
		return ""
	}
	return *t.InterfacePolicy
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Bandwidth.PopulateDefaults()
	t.McConstraints.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_Bandwidth represents the /nokia-conf/configure/groups/group/router/pim/interface/mcac/bandwidth YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_Bandwidth struct {
	Mandatory NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_Bandwidth_Mandatory_Union `path:"mandatory" module:"nokia-conf"`
	Total     NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_Bandwidth_Total_Union     `path:"total" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_Bandwidth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_Bandwidth) IsYANGGoStruct() {}

// GetMandatory retrieves the value of the leaf Mandatory from the NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_Bandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mandatory is set, it can
// safely use t.GetMandatory() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mandatory == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_Bandwidth) GetMandatory() NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_Bandwidth_Mandatory_Union {
	if t == nil || t.Mandatory == nil {
		return NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	return t.Mandatory
}

// GetTotal retrieves the value of the leaf Total from the NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_Bandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Total is set, it can
// safely use t.GetTotal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Total == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_Bandwidth) GetTotal() NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_Bandwidth_Total_Union {
	if t == nil || t.Total == nil {
		return NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	return t.Total
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_Bandwidth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_Bandwidth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mandatory == nil {
		t.Mandatory = NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	if t.Total == nil {
		t.Total = NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_Bandwidth) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_Bandwidth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_Bandwidth) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_Bandwidth) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_Bandwidth.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_Bandwidth) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints represents the /nokia-conf/configure/groups/group/router/pim/interface/mcac/mc-constraints YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints struct {
	AdminState       E_NokiaTypesSros_AdminState                                                                                                                                                                          `path:"admin-state" module:"nokia-conf"`
	Level            map[NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_Level_LevelId_Union]*NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_Level                     `path:"level" module:"nokia-conf"`
	NumberDown       map[NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_NumberDown_NumberLagPortDown_Union]*NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_NumberDown `path:"number-down" module:"nokia-conf"`
	UseLagPortWeight *bool                                                                                                                                                                                                `path:"use-lag-port-weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints) IsYANGGoStruct() {}

// NewLevel creates a new entry in the Level list of the
// NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints) NewLevel(LevelId NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_Level_LevelId_Union) (*NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_Level, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_Level_LevelId_Union]*NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_Level)
	}

	key := LevelId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Level[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Level", key)
	}

	t.Level[key] = &NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_Level{
		LevelId: LevelId,
	}

	return t.Level[key], nil
}

// RenameLevel renames an entry in the list Level within
// the NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints) RenameLevel(oldK, newK NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_Level_LevelId_Union) error {
	if _, ok := t.Level[newK]; ok {
		return fmt.Errorf("key %v already exists in Level", newK)
	}

	e, ok := t.Level[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Level", oldK)
	}
	e.LevelId = newK

	t.Level[newK] = e
	delete(t.Level, oldK)
	return nil
}

// GetOrCreateLevel retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints) GetOrCreateLevel(LevelId NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_Level_LevelId_Union) *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_Level {

	key := LevelId

	if v, ok := t.Level[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLevel(LevelId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLevel got unexpected error: %v", err))
	}
	return v
}

// GetLevel retrieves the value with the specified key from
// the Level map field of NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints) GetLevel(LevelId NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_Level_LevelId_Union) *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_Level {

	if t == nil {
		return nil
	}

	key := LevelId

	if lm, ok := t.Level[key]; ok {
		return lm
	}
	return nil
}

// DeleteLevel deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints) DeleteLevel(LevelId NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_Level_LevelId_Union) {
	key := LevelId

	delete(t.Level, key)
}

// AppendLevel appends the supplied NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_Level struct to the
// list Level of NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_Level already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints) AppendLevel(v *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_Level) error {
	key := v.LevelId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_Level_LevelId_Union]*NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_Level)
	}

	if _, ok := t.Level[key]; ok {
		return fmt.Errorf("duplicate key for list Level %v", key)
	}

	t.Level[key] = v
	return nil
}

// NewNumberDown creates a new entry in the NumberDown list of the
// NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints) NewNumberDown(NumberLagPortDown NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_NumberDown_NumberLagPortDown_Union) (*NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_NumberDown, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NumberDown == nil {
		t.NumberDown = make(map[NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_NumberDown_NumberLagPortDown_Union]*NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_NumberDown)
	}

	key := NumberLagPortDown

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NumberDown[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NumberDown", key)
	}

	t.NumberDown[key] = &NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_NumberDown{
		NumberLagPortDown: NumberLagPortDown,
	}

	return t.NumberDown[key], nil
}

// RenameNumberDown renames an entry in the list NumberDown within
// the NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints) RenameNumberDown(oldK, newK NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_NumberDown_NumberLagPortDown_Union) error {
	if _, ok := t.NumberDown[newK]; ok {
		return fmt.Errorf("key %v already exists in NumberDown", newK)
	}

	e, ok := t.NumberDown[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NumberDown", oldK)
	}
	e.NumberLagPortDown = newK

	t.NumberDown[newK] = e
	delete(t.NumberDown, oldK)
	return nil
}

// GetOrCreateNumberDown retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints) GetOrCreateNumberDown(NumberLagPortDown NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_NumberDown_NumberLagPortDown_Union) *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_NumberDown {

	key := NumberLagPortDown

	if v, ok := t.NumberDown[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNumberDown(NumberLagPortDown)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNumberDown got unexpected error: %v", err))
	}
	return v
}

// GetNumberDown retrieves the value with the specified key from
// the NumberDown map field of NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints) GetNumberDown(NumberLagPortDown NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_NumberDown_NumberLagPortDown_Union) *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_NumberDown {

	if t == nil {
		return nil
	}

	key := NumberLagPortDown

	if lm, ok := t.NumberDown[key]; ok {
		return lm
	}
	return nil
}

// DeleteNumberDown deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints) DeleteNumberDown(NumberLagPortDown NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_NumberDown_NumberLagPortDown_Union) {
	key := NumberLagPortDown

	delete(t.NumberDown, key)
}

// AppendNumberDown appends the supplied NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_NumberDown struct to the
// list NumberDown of NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_NumberDown already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints) AppendNumberDown(v *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_NumberDown) error {
	key := v.NumberLagPortDown

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NumberDown == nil {
		t.NumberDown = make(map[NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_NumberDown_NumberLagPortDown_Union]*NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_NumberDown)
	}

	if _, ok := t.NumberDown[key]; ok {
		return fmt.Errorf("duplicate key for list NumberDown %v", key)
	}

	t.NumberDown[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetUseLagPortWeight retrieves the value of the leaf UseLagPortWeight from the NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseLagPortWeight is set, it can
// safely use t.GetUseLagPortWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseLagPortWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints) GetUseLagPortWeight() bool {
	if t == nil || t.UseLagPortWeight == nil {
		return false
	}
	return *t.UseLagPortWeight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.UseLagPortWeight == nil {
		var v bool = false
		t.UseLagPortWeight = &v
	}
	for _, e := range t.Level {
		e.PopulateDefaults()
	}
	for _, e := range t.NumberDown {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_Level represents the /nokia-conf/configure/groups/group/router/pim/interface/mcac/mc-constraints/level YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_Level struct {
	Bandwidth *uint32                                                                                      `path:"bandwidth" module:"nokia-conf"`
	LevelId   NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_Level_LevelId_Union `path:"level-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_Level implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_Level) IsYANGGoStruct() {
}

// GetBandwidth retrieves the value of the leaf Bandwidth from the NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bandwidth is set, it can
// safely use t.GetBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_Level) GetBandwidth() uint32 {
	if t == nil || t.Bandwidth == nil {
		return 0
	}
	return *t.Bandwidth
}

// GetLevelId retrieves the value of the leaf LevelId from the NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LevelId is set, it can
// safely use t.GetLevelId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LevelId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_Level) GetLevelId() NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_Level_LevelId_Union {
	if t == nil || t.LevelId == nil {
		return nil
	}
	return t.LevelId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_Level
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_Level) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_Level struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_Level) Î›ListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"level-id": t.LevelId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_Level) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_Level"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_Level) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_Level) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_Level.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_Level) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_NumberDown represents the /nokia-conf/configure/groups/group/router/pim/interface/mcac/mc-constraints/number-down YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_NumberDown struct {
	Level             *uint32                                                                                                     `path:"level" module:"nokia-conf"`
	NumberLagPortDown NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_NumberDown_NumberLagPortDown_Union `path:"number-lag-port-down" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_NumberDown implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_NumberDown) IsYANGGoStruct() {
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_NumberDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_NumberDown) GetLevel() uint32 {
	if t == nil || t.Level == nil {
		return 0
	}
	return *t.Level
}

// GetNumberLagPortDown retrieves the value of the leaf NumberLagPortDown from the NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_NumberDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NumberLagPortDown is set, it can
// safely use t.GetNumberLagPortDown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NumberLagPortDown == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_NumberDown) GetNumberLagPortDown() NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_NumberDown_NumberLagPortDown_Union {
	if t == nil || t.NumberLagPortDown == nil {
		return nil
	}
	return t.NumberLagPortDown
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_NumberDown
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_NumberDown) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_NumberDown struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_NumberDown) Î›ListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"number-lag-port-down": t.NumberLagPortDown,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_NumberDown) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_NumberDown"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_NumberDown) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_NumberDown) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_NumberDown.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Interface_Mcac_McConstraints_NumberDown) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Pim_Interface_P2MpLdpTreeJoin represents the /nokia-conf/configure/groups/group/router/pim/interface/p2mp-ldp-tree-join YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Pim_Interface_P2MpLdpTreeJoin struct {
	Ipv4 *bool `path:"ipv4" module:"nokia-conf"`
	Ipv6 *bool `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Pim_Interface_P2MpLdpTreeJoin implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Interface_P2MpLdpTreeJoin) IsYANGGoStruct() {}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Groups_Group_Router_Pim_Interface_P2MpLdpTreeJoin
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_P2MpLdpTreeJoin) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return false
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Groups_Group_Router_Pim_Interface_P2MpLdpTreeJoin
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_P2MpLdpTreeJoin) GetIpv6() bool {
	if t == nil || t.Ipv6 == nil {
		return false
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Pim_Interface_P2MpLdpTreeJoin
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_P2MpLdpTreeJoin) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = false
		t.Ipv4 = &v
	}
	if t.Ipv6 == nil {
		var v bool = false
		t.Ipv6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_P2MpLdpTreeJoin) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Pim_Interface_P2MpLdpTreeJoin"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_P2MpLdpTreeJoin) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_P2MpLdpTreeJoin) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Pim_Interface_P2MpLdpTreeJoin.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Interface_P2MpLdpTreeJoin) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Pim_Interface_StickyDr represents the /nokia-conf/configure/groups/group/router/pim/interface/sticky-dr YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Pim_Interface_StickyDr struct {
	Priority *uint32 `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Pim_Interface_StickyDr implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Interface_StickyDr) IsYANGGoStruct() {}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Groups_Group_Router_Pim_Interface_StickyDr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_StickyDr) GetPriority() uint32 {
	if t == nil || t.Priority == nil {
		return 1024
	}
	return *t.Priority
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Pim_Interface_StickyDr
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_StickyDr) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Priority == nil {
		var v uint32 = 1024
		t.Priority = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_StickyDr) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Pim_Interface_StickyDr"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_StickyDr) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Interface_StickyDr) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Pim_Interface_StickyDr.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Interface_StickyDr) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Pim_Ipv4 represents the /nokia-conf/configure/groups/group/router/pim/ipv4 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Pim_Ipv4 struct {
	AdminState              E_NokiaTypesSros_AdminState                                 `path:"admin-state" module:"nokia-conf"`
	Gtm                     *NokiaConf_Configure_Groups_Group_Router_Pim_Ipv4_Gtm       `path:"gtm" module:"nokia-conf"`
	MulticastFastFailover   *bool                                                       `path:"multicast-fast-failover" module:"nokia-conf"`
	RpfTable                E_NokiaConf_Configure_Groups_Group_Router_Pim_Ipv4_RpfTable `path:"rpf-table" module:"nokia-conf"`
	SsmAssertCompatibleMode *bool                                                       `path:"ssm-assert-compatible-mode" module:"nokia-conf"`
	SsmDefaultRange         *bool                                                       `path:"ssm-default-range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Pim_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Ipv4) IsYANGGoStruct() {}

// GetOrCreateGtm retrieves the value of the Gtm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Ipv4) GetOrCreateGtm() *NokiaConf_Configure_Groups_Group_Router_Pim_Ipv4_Gtm {
	if t.Gtm != nil {
		return t.Gtm
	}
	t.Gtm = &NokiaConf_Configure_Groups_Group_Router_Pim_Ipv4_Gtm{}
	return t.Gtm
}

// GetGtm returns the value of the Gtm struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Pim_Ipv4. If the receiver or the field Gtm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Ipv4) GetGtm() *NokiaConf_Configure_Groups_Group_Router_Pim_Ipv4_Gtm {
	if t != nil && t.Gtm != nil {
		return t.Gtm
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Pim_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Ipv4) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetMulticastFastFailover retrieves the value of the leaf MulticastFastFailover from the NokiaConf_Configure_Groups_Group_Router_Pim_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MulticastFastFailover is set, it can
// safely use t.GetMulticastFastFailover() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MulticastFastFailover == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Ipv4) GetMulticastFastFailover() bool {
	if t == nil || t.MulticastFastFailover == nil {
		return false
	}
	return *t.MulticastFastFailover
}

// GetRpfTable retrieves the value of the leaf RpfTable from the NokiaConf_Configure_Groups_Group_Router_Pim_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RpfTable is set, it can
// safely use t.GetRpfTable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RpfTable == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Ipv4) GetRpfTable() E_NokiaConf_Configure_Groups_Group_Router_Pim_Ipv4_RpfTable {
	if t == nil || t.RpfTable == 0 {
		return NokiaConf_Configure_Groups_Group_Router_Pim_Ipv4_RpfTable_rtable_u
	}
	return t.RpfTable
}

// GetSsmAssertCompatibleMode retrieves the value of the leaf SsmAssertCompatibleMode from the NokiaConf_Configure_Groups_Group_Router_Pim_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SsmAssertCompatibleMode is set, it can
// safely use t.GetSsmAssertCompatibleMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SsmAssertCompatibleMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Ipv4) GetSsmAssertCompatibleMode() bool {
	if t == nil || t.SsmAssertCompatibleMode == nil {
		return false
	}
	return *t.SsmAssertCompatibleMode
}

// GetSsmDefaultRange retrieves the value of the leaf SsmDefaultRange from the NokiaConf_Configure_Groups_Group_Router_Pim_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SsmDefaultRange is set, it can
// safely use t.GetSsmDefaultRange() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SsmDefaultRange == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Ipv4) GetSsmDefaultRange() bool {
	if t == nil || t.SsmDefaultRange == nil {
		return true
	}
	return *t.SsmDefaultRange
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Pim_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.MulticastFastFailover == nil {
		var v bool = false
		t.MulticastFastFailover = &v
	}
	if t.RpfTable == 0 {
		t.RpfTable = NokiaConf_Configure_Groups_Group_Router_Pim_Ipv4_RpfTable_rtable_u
	}
	if t.SsmAssertCompatibleMode == nil {
		var v bool = false
		t.SsmAssertCompatibleMode = &v
	}
	if t.SsmDefaultRange == nil {
		var v bool = true
		t.SsmDefaultRange = &v
	}
	t.Gtm.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Ipv4) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Pim_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Ipv4) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Pim_Ipv4.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Ipv4) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Pim_Ipv4_Gtm represents the /nokia-conf/configure/groups/group/router/pim/ipv4/gtm YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Pim_Ipv4_Gtm struct {
	AutoDiscovery E_NokiaConf_Configure_Groups_Group_Router_Pim_Ipv4_Gtm_AutoDiscovery `path:"auto-discovery" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Pim_Ipv4_Gtm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Ipv4_Gtm) IsYANGGoStruct() {}

// GetAutoDiscovery retrieves the value of the leaf AutoDiscovery from the NokiaConf_Configure_Groups_Group_Router_Pim_Ipv4_Gtm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoDiscovery is set, it can
// safely use t.GetAutoDiscovery() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoDiscovery == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Ipv4_Gtm) GetAutoDiscovery() E_NokiaConf_Configure_Groups_Group_Router_Pim_Ipv4_Gtm_AutoDiscovery {
	if t == nil || t.AutoDiscovery == 0 {
		return 0
	}
	return t.AutoDiscovery
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Pim_Ipv4_Gtm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Ipv4_Gtm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Ipv4_Gtm) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Pim_Ipv4_Gtm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Ipv4_Gtm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Ipv4_Gtm) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Pim_Ipv4_Gtm.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Ipv4_Gtm) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Pim_Ipv6 represents the /nokia-conf/configure/groups/group/router/pim/ipv6 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Pim_Ipv6 struct {
	AdminState            E_NokiaTypesSros_AdminState                                 `path:"admin-state" module:"nokia-conf"`
	MulticastFastFailover *bool                                                       `path:"multicast-fast-failover" module:"nokia-conf"`
	RpfTable              E_NokiaConf_Configure_Groups_Group_Router_Pim_Ipv6_RpfTable `path:"rpf-table" module:"nokia-conf"`
	SsmDefaultRange       *bool                                                       `path:"ssm-default-range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Pim_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Ipv6) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Pim_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Ipv6) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetMulticastFastFailover retrieves the value of the leaf MulticastFastFailover from the NokiaConf_Configure_Groups_Group_Router_Pim_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MulticastFastFailover is set, it can
// safely use t.GetMulticastFastFailover() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MulticastFastFailover == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Ipv6) GetMulticastFastFailover() bool {
	if t == nil || t.MulticastFastFailover == nil {
		return false
	}
	return *t.MulticastFastFailover
}

// GetRpfTable retrieves the value of the leaf RpfTable from the NokiaConf_Configure_Groups_Group_Router_Pim_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RpfTable is set, it can
// safely use t.GetRpfTable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RpfTable == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Ipv6) GetRpfTable() E_NokiaConf_Configure_Groups_Group_Router_Pim_Ipv6_RpfTable {
	if t == nil || t.RpfTable == 0 {
		return NokiaConf_Configure_Groups_Group_Router_Pim_Ipv6_RpfTable_rtable_u
	}
	return t.RpfTable
}

// GetSsmDefaultRange retrieves the value of the leaf SsmDefaultRange from the NokiaConf_Configure_Groups_Group_Router_Pim_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SsmDefaultRange is set, it can
// safely use t.GetSsmDefaultRange() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SsmDefaultRange == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Ipv6) GetSsmDefaultRange() bool {
	if t == nil || t.SsmDefaultRange == nil {
		return true
	}
	return *t.SsmDefaultRange
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Pim_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.MulticastFastFailover == nil {
		var v bool = false
		t.MulticastFastFailover = &v
	}
	if t.RpfTable == 0 {
		t.RpfTable = NokiaConf_Configure_Groups_Group_Router_Pim_Ipv6_RpfTable_rtable_u
	}
	if t.SsmDefaultRange == nil {
		var v bool = true
		t.SsmDefaultRange = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Ipv6) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Pim_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Ipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Ipv6) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Pim_Ipv6.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Ipv6) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Pim_McEcmpHashing represents the /nokia-conf/configure/groups/group/router/pim/mc-ecmp-hashing YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Pim_McEcmpHashing struct {
	Rebalance *bool `path:"rebalance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Pim_McEcmpHashing implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_McEcmpHashing) IsYANGGoStruct() {}

// GetRebalance retrieves the value of the leaf Rebalance from the NokiaConf_Configure_Groups_Group_Router_Pim_McEcmpHashing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rebalance is set, it can
// safely use t.GetRebalance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rebalance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_McEcmpHashing) GetRebalance() bool {
	if t == nil || t.Rebalance == nil {
		return false
	}
	return *t.Rebalance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Pim_McEcmpHashing
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_McEcmpHashing) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Rebalance == nil {
		var v bool = false
		t.Rebalance = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_McEcmpHashing) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Pim_McEcmpHashing"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_McEcmpHashing) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_McEcmpHashing) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Pim_McEcmpHashing.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_McEcmpHashing) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Pim_Rp represents the /nokia-conf/configure/groups/group/router/pim/rp YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Pim_Rp struct {
	Bootstrap *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Bootstrap `path:"bootstrap" module:"nokia-conf"`
	Ipv4      *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4      `path:"ipv4" module:"nokia-conf"`
	Ipv6      *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6      `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Pim_Rp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Rp) IsYANGGoStruct() {}

// GetOrCreateBootstrap retrieves the value of the Bootstrap field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp) GetOrCreateBootstrap() *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Bootstrap {
	if t.Bootstrap != nil {
		return t.Bootstrap
	}
	t.Bootstrap = &NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Bootstrap{}
	return t.Bootstrap
}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp) GetOrCreateIpv4() *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp) GetOrCreateIpv6() *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6{}
	return t.Ipv6
}

// GetBootstrap returns the value of the Bootstrap struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Pim_Rp. If the receiver or the field Bootstrap is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp) GetBootstrap() *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Bootstrap {
	if t != nil && t.Bootstrap != nil {
		return t.Bootstrap
	}
	return nil
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Pim_Rp. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp) GetIpv4() *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Pim_Rp. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp) GetIpv6() *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Pim_Rp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Bootstrap.PopulateDefaults()
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Pim_Rp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Pim_Rp.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Rp) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Bootstrap represents the /nokia-conf/configure/groups/group/router/pim/rp/bootstrap YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Bootstrap struct {
	Export []string `path:"export" module:"nokia-conf"`
	Import []string `path:"import" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Bootstrap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Bootstrap) IsYANGGoStruct() {}

// GetExport retrieves the value of the leaf Export from the NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Bootstrap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Export is set, it can
// safely use t.GetExport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Export == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Bootstrap) GetExport() []string {
	if t == nil || t.Export == nil {
		return nil
	}
	return t.Export
}

// GetImport retrieves the value of the leaf Import from the NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Bootstrap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Import is set, it can
// safely use t.GetImport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Import == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Bootstrap) GetImport() []string {
	if t == nil || t.Import == nil {
		return nil
	}
	return t.Import
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Bootstrap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Bootstrap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Bootstrap) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Bootstrap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Bootstrap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Bootstrap) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Bootstrap.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Bootstrap) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4 represents the /nokia-conf/configure/groups/group/router/pim/rp/ipv4 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4 struct {
	Anycast         map[NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Anycast_Key]*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Anycast `path:"anycast" module:"nokia-conf"`
	AutoRpDiscovery *bool                                                                                                                            `path:"auto-rp-discovery" module:"nokia-conf"`
	BsrCandidate    *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_BsrCandidate                                                                `path:"bsr-candidate" module:"nokia-conf"`
	Candidate       *bool                                                                                                                            `path:"candidate" module:"nokia-conf"`
	MappingAgent    *bool                                                                                                                            `path:"mapping-agent" module:"nokia-conf"`
	RpCandidate     *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_RpCandidate                                                                 `path:"rp-candidate" module:"nokia-conf"`
	Static          *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static                                                                      `path:"static" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4) IsYANGGoStruct() {}

// NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Anycast_Key represents the key for list Anycast of element /nokia-conf/configure/groups/group/router/pim/rp/ipv4.
type NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Anycast_Key struct {
	Ipv4Address string `path:"ipv4-address"`
	RpSetPeer   string `path:"rp-set-peer"`
}

// NewAnycast creates a new entry in the Anycast list of the
// NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4) NewAnycast(Ipv4Address string, RpSetPeer string) (*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Anycast, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Anycast == nil {
		t.Anycast = make(map[NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Anycast_Key]*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Anycast)
	}

	key := NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Anycast_Key{
		Ipv4Address: Ipv4Address,
		RpSetPeer:   RpSetPeer,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Anycast[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Anycast", key)
	}

	t.Anycast[key] = &NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Anycast{
		Ipv4Address: &Ipv4Address,
		RpSetPeer:   &RpSetPeer,
	}

	return t.Anycast[key], nil
}

// RenameAnycast renames an entry in the list Anycast within
// the NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4) RenameAnycast(oldK, newK NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Anycast_Key) error {
	if _, ok := t.Anycast[newK]; ok {
		return fmt.Errorf("key %v already exists in Anycast", newK)
	}

	e, ok := t.Anycast[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Anycast", oldK)
	}
	e.Ipv4Address = &newK.Ipv4Address
	e.RpSetPeer = &newK.RpSetPeer

	t.Anycast[newK] = e
	delete(t.Anycast, oldK)
	return nil
}

// GetOrCreateAnycast retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4) GetOrCreateAnycast(Ipv4Address string, RpSetPeer string) *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Anycast {

	key := NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Anycast_Key{
		Ipv4Address: Ipv4Address,
		RpSetPeer:   RpSetPeer,
	}

	if v, ok := t.Anycast[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAnycast(Ipv4Address, RpSetPeer)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAnycast got unexpected error: %v", err))
	}
	return v
}

// GetAnycast retrieves the value with the specified key from
// the Anycast map field of NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4) GetAnycast(Ipv4Address string, RpSetPeer string) *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Anycast {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Anycast_Key{
		Ipv4Address: Ipv4Address,
		RpSetPeer:   RpSetPeer,
	}

	if lm, ok := t.Anycast[key]; ok {
		return lm
	}
	return nil
}

// DeleteAnycast deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4) DeleteAnycast(Ipv4Address string, RpSetPeer string) {
	key := NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Anycast_Key{
		Ipv4Address: Ipv4Address,
		RpSetPeer:   RpSetPeer,
	}

	delete(t.Anycast, key)
}

// AppendAnycast appends the supplied NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Anycast struct to the
// list Anycast of NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Anycast already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4) AppendAnycast(v *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Anycast) error {
	if v.Ipv4Address == nil {
		return fmt.Errorf("invalid nil key for Ipv4Address")
	}

	if v.RpSetPeer == nil {
		return fmt.Errorf("invalid nil key for RpSetPeer")
	}

	key := NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Anycast_Key{
		Ipv4Address: *v.Ipv4Address,
		RpSetPeer:   *v.RpSetPeer,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Anycast == nil {
		t.Anycast = make(map[NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Anycast_Key]*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Anycast)
	}

	if _, ok := t.Anycast[key]; ok {
		return fmt.Errorf("duplicate key for list Anycast %v", key)
	}

	t.Anycast[key] = v
	return nil
}

// GetOrCreateBsrCandidate retrieves the value of the BsrCandidate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4) GetOrCreateBsrCandidate() *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_BsrCandidate {
	if t.BsrCandidate != nil {
		return t.BsrCandidate
	}
	t.BsrCandidate = &NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_BsrCandidate{}
	return t.BsrCandidate
}

// GetOrCreateRpCandidate retrieves the value of the RpCandidate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4) GetOrCreateRpCandidate() *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_RpCandidate {
	if t.RpCandidate != nil {
		return t.RpCandidate
	}
	t.RpCandidate = &NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_RpCandidate{}
	return t.RpCandidate
}

// GetOrCreateStatic retrieves the value of the Static field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4) GetOrCreateStatic() *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static {
	if t.Static != nil {
		return t.Static
	}
	t.Static = &NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static{}
	return t.Static
}

// GetBsrCandidate returns the value of the BsrCandidate struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4. If the receiver or the field BsrCandidate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4) GetBsrCandidate() *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_BsrCandidate {
	if t != nil && t.BsrCandidate != nil {
		return t.BsrCandidate
	}
	return nil
}

// GetRpCandidate returns the value of the RpCandidate struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4. If the receiver or the field RpCandidate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4) GetRpCandidate() *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_RpCandidate {
	if t != nil && t.RpCandidate != nil {
		return t.RpCandidate
	}
	return nil
}

// GetStatic returns the value of the Static struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4. If the receiver or the field Static is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4) GetStatic() *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static {
	if t != nil && t.Static != nil {
		return t.Static
	}
	return nil
}

// GetAutoRpDiscovery retrieves the value of the leaf AutoRpDiscovery from the NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoRpDiscovery is set, it can
// safely use t.GetAutoRpDiscovery() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoRpDiscovery == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4) GetAutoRpDiscovery() bool {
	if t == nil || t.AutoRpDiscovery == nil {
		return false
	}
	return *t.AutoRpDiscovery
}

// GetCandidate retrieves the value of the leaf Candidate from the NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Candidate is set, it can
// safely use t.GetCandidate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Candidate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4) GetCandidate() bool {
	if t == nil || t.Candidate == nil {
		return false
	}
	return *t.Candidate
}

// GetMappingAgent retrieves the value of the leaf MappingAgent from the NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MappingAgent is set, it can
// safely use t.GetMappingAgent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MappingAgent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4) GetMappingAgent() bool {
	if t == nil || t.MappingAgent == nil {
		return false
	}
	return *t.MappingAgent
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AutoRpDiscovery == nil {
		var v bool = false
		t.AutoRpDiscovery = &v
	}
	if t.Candidate == nil {
		var v bool = false
		t.Candidate = &v
	}
	if t.MappingAgent == nil {
		var v bool = false
		t.MappingAgent = &v
	}
	t.BsrCandidate.PopulateDefaults()
	t.RpCandidate.PopulateDefaults()
	t.Static.PopulateDefaults()
	for _, e := range t.Anycast {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Anycast represents the /nokia-conf/configure/groups/group/router/pim/rp/ipv4/anycast YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Anycast struct {
	Ipv4Address *string `path:"ipv4-address" module:"nokia-conf"`
	RpSetPeer   *string `path:"rp-set-peer" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Anycast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Anycast) IsYANGGoStruct() {}

// GetIpv4Address retrieves the value of the leaf Ipv4Address from the NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Anycast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Address is set, it can
// safely use t.GetIpv4Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Anycast) GetIpv4Address() string {
	if t == nil || t.Ipv4Address == nil {
		return ""
	}
	return *t.Ipv4Address
}

// GetRpSetPeer retrieves the value of the leaf RpSetPeer from the NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Anycast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RpSetPeer is set, it can
// safely use t.GetRpSetPeer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RpSetPeer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Anycast) GetRpSetPeer() string {
	if t == nil || t.RpSetPeer == nil {
		return ""
	}
	return *t.RpSetPeer
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Anycast
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Anycast) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Anycast struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Anycast) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.Ipv4Address == nil {
		return nil, fmt.Errorf("nil value for key Ipv4Address")
	}

	if t.RpSetPeer == nil {
		return nil, fmt.Errorf("nil value for key RpSetPeer")
	}

	return map[string]interface{}{
		"ipv4-address": *t.Ipv4Address,
		"rp-set-peer":  *t.RpSetPeer,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Anycast) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Anycast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Anycast) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Anycast) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Anycast.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Anycast) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_BsrCandidate represents the /nokia-conf/configure/groups/group/router/pim/rp/ipv4/bsr-candidate YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_BsrCandidate struct {
	Address     *string                     `path:"address" module:"nokia-conf"`
	AdminState  E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	HashMaskLen *int32                      `path:"hash-mask-len" module:"nokia-conf"`
	Priority    *int32                      `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_BsrCandidate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_BsrCandidate) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_BsrCandidate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_BsrCandidate) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_BsrCandidate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_BsrCandidate) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetHashMaskLen retrieves the value of the leaf HashMaskLen from the NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_BsrCandidate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HashMaskLen is set, it can
// safely use t.GetHashMaskLen() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HashMaskLen == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_BsrCandidate) GetHashMaskLen() int32 {
	if t == nil || t.HashMaskLen == nil {
		return 30
	}
	return *t.HashMaskLen
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_BsrCandidate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_BsrCandidate) GetPriority() int32 {
	if t == nil || t.Priority == nil {
		return 0
	}
	return *t.Priority
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_BsrCandidate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_BsrCandidate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.HashMaskLen == nil {
		var v int32 = 30
		t.HashMaskLen = &v
	}
	if t.Priority == nil {
		var v int32 = 0
		t.Priority = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_BsrCandidate) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_BsrCandidate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_BsrCandidate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_BsrCandidate) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_BsrCandidate.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_BsrCandidate) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_RpCandidate represents the /nokia-conf/configure/groups/group/router/pim/rp/ipv4/rp-candidate YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_RpCandidate struct {
	Address    *string                                                                                `path:"address" module:"nokia-conf"`
	AdminState E_NokiaTypesSros_AdminState                                                            `path:"admin-state" module:"nokia-conf"`
	GroupRange map[string]*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_RpCandidate_GroupRange `path:"group-range" module:"nokia-conf"`
	Holdtime   *int32                                                                                 `path:"holdtime" module:"nokia-conf"`
	Priority   *int32                                                                                 `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_RpCandidate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_RpCandidate) IsYANGGoStruct() {}

// NewGroupRange creates a new entry in the GroupRange list of the
// NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_RpCandidate struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_RpCandidate) NewGroupRange(Ipv4Prefix string) (*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_RpCandidate_GroupRange, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_RpCandidate_GroupRange)
	}

	key := Ipv4Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GroupRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GroupRange", key)
	}

	t.GroupRange[key] = &NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_RpCandidate_GroupRange{
		Ipv4Prefix: &Ipv4Prefix,
	}

	return t.GroupRange[key], nil
}

// RenameGroupRange renames an entry in the list GroupRange within
// the NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_RpCandidate struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_RpCandidate) RenameGroupRange(oldK, newK string) error {
	if _, ok := t.GroupRange[newK]; ok {
		return fmt.Errorf("key %v already exists in GroupRange", newK)
	}

	e, ok := t.GroupRange[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GroupRange", oldK)
	}
	e.Ipv4Prefix = &newK

	t.GroupRange[newK] = e
	delete(t.GroupRange, oldK)
	return nil
}

// GetOrCreateGroupRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_RpCandidate. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_RpCandidate) GetOrCreateGroupRange(Ipv4Prefix string) *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_RpCandidate_GroupRange {

	key := Ipv4Prefix

	if v, ok := t.GroupRange[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroupRange(Ipv4Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroupRange got unexpected error: %v", err))
	}
	return v
}

// GetGroupRange retrieves the value with the specified key from
// the GroupRange map field of NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_RpCandidate. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_RpCandidate) GetGroupRange(Ipv4Prefix string) *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_RpCandidate_GroupRange {

	if t == nil {
		return nil
	}

	key := Ipv4Prefix

	if lm, ok := t.GroupRange[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroupRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_RpCandidate. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_RpCandidate) DeleteGroupRange(Ipv4Prefix string) {
	key := Ipv4Prefix

	delete(t.GroupRange, key)
}

// AppendGroupRange appends the supplied NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_RpCandidate_GroupRange struct to the
// list GroupRange of NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_RpCandidate. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_RpCandidate_GroupRange already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_RpCandidate) AppendGroupRange(v *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_RpCandidate_GroupRange) error {
	if v.Ipv4Prefix == nil {
		return fmt.Errorf("invalid nil key received for Ipv4Prefix")
	}

	key := *v.Ipv4Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_RpCandidate_GroupRange)
	}

	if _, ok := t.GroupRange[key]; ok {
		return fmt.Errorf("duplicate key for list GroupRange %v", key)
	}

	t.GroupRange[key] = v
	return nil
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_RpCandidate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_RpCandidate) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_RpCandidate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_RpCandidate) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetHoldtime retrieves the value of the leaf Holdtime from the NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_RpCandidate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Holdtime is set, it can
// safely use t.GetHoldtime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Holdtime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_RpCandidate) GetHoldtime() int32 {
	if t == nil || t.Holdtime == nil {
		return 150
	}
	return *t.Holdtime
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_RpCandidate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_RpCandidate) GetPriority() int32 {
	if t == nil || t.Priority == nil {
		return 192
	}
	return *t.Priority
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_RpCandidate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_RpCandidate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Holdtime == nil {
		var v int32 = 150
		t.Holdtime = &v
	}
	if t.Priority == nil {
		var v int32 = 192
		t.Priority = &v
	}
	for _, e := range t.GroupRange {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_RpCandidate) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_RpCandidate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_RpCandidate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_RpCandidate) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_RpCandidate.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_RpCandidate) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_RpCandidate_GroupRange represents the /nokia-conf/configure/groups/group/router/pim/rp/ipv4/rp-candidate/group-range YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_RpCandidate_GroupRange struct {
	Ipv4Prefix *string `path:"ipv4-prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_RpCandidate_GroupRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_RpCandidate_GroupRange) IsYANGGoStruct() {}

// GetIpv4Prefix retrieves the value of the leaf Ipv4Prefix from the NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_RpCandidate_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Prefix is set, it can
// safely use t.GetIpv4Prefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_RpCandidate_GroupRange) GetIpv4Prefix() string {
	if t == nil || t.Ipv4Prefix == nil {
		return ""
	}
	return *t.Ipv4Prefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_RpCandidate_GroupRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_RpCandidate_GroupRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_RpCandidate_GroupRange struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_RpCandidate_GroupRange) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.Ipv4Prefix == nil {
		return nil, fmt.Errorf("nil value for key Ipv4Prefix")
	}

	return map[string]interface{}{
		"ipv4-prefix": *t.Ipv4Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_RpCandidate_GroupRange) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_RpCandidate_GroupRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_RpCandidate_GroupRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_RpCandidate_GroupRange) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_RpCandidate_GroupRange.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_RpCandidate_GroupRange) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static represents the /nokia-conf/configure/groups/group/router/pim/rp/ipv4/static YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static struct {
	Address map[string]*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static_Address `path:"address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static) IsYANGGoStruct() {}

// NewAddress creates a new entry in the Address list of the
// NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static) NewAddress(Ipv4Address string) (*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static_Address, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static_Address)
	}

	key := Ipv4Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Address[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Address", key)
	}

	t.Address[key] = &NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static_Address{
		Ipv4Address: &Ipv4Address,
	}

	return t.Address[key], nil
}

// RenameAddress renames an entry in the list Address within
// the NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static) RenameAddress(oldK, newK string) error {
	if _, ok := t.Address[newK]; ok {
		return fmt.Errorf("key %v already exists in Address", newK)
	}

	e, ok := t.Address[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Address", oldK)
	}
	e.Ipv4Address = &newK

	t.Address[newK] = e
	delete(t.Address, oldK)
	return nil
}

// GetOrCreateAddress retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static) GetOrCreateAddress(Ipv4Address string) *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static_Address {

	key := Ipv4Address

	if v, ok := t.Address[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAddress(Ipv4Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAddress got unexpected error: %v", err))
	}
	return v
}

// GetAddress retrieves the value with the specified key from
// the Address map field of NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static) GetAddress(Ipv4Address string) *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static_Address {

	if t == nil {
		return nil
	}

	key := Ipv4Address

	if lm, ok := t.Address[key]; ok {
		return lm
	}
	return nil
}

// DeleteAddress deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static) DeleteAddress(Ipv4Address string) {
	key := Ipv4Address

	delete(t.Address, key)
}

// AppendAddress appends the supplied NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static_Address struct to the
// list Address of NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static_Address already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static) AppendAddress(v *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static_Address) error {
	if v.Ipv4Address == nil {
		return fmt.Errorf("invalid nil key received for Ipv4Address")
	}

	key := *v.Ipv4Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static_Address)
	}

	if _, ok := t.Address[key]; ok {
		return fmt.Errorf("duplicate key for list Address %v", key)
	}

	t.Address[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Address {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static_Address represents the /nokia-conf/configure/groups/group/router/pim/rp/ipv4/static/address YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static_Address struct {
	GroupPrefix map[string]*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static_Address_GroupPrefix `path:"group-prefix" module:"nokia-conf"`
	Ipv4Address *string                                                                                    `path:"ipv4-address" module:"nokia-conf"`
	Override    *bool                                                                                      `path:"override" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static_Address implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static_Address) IsYANGGoStruct() {}

// NewGroupPrefix creates a new entry in the GroupPrefix list of the
// NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static_Address struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static_Address) NewGroupPrefix(Ipv4Prefix string) (*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static_Address_GroupPrefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupPrefix == nil {
		t.GroupPrefix = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static_Address_GroupPrefix)
	}

	key := Ipv4Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GroupPrefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GroupPrefix", key)
	}

	t.GroupPrefix[key] = &NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static_Address_GroupPrefix{
		Ipv4Prefix: &Ipv4Prefix,
	}

	return t.GroupPrefix[key], nil
}

// RenameGroupPrefix renames an entry in the list GroupPrefix within
// the NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static_Address struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static_Address) RenameGroupPrefix(oldK, newK string) error {
	if _, ok := t.GroupPrefix[newK]; ok {
		return fmt.Errorf("key %v already exists in GroupPrefix", newK)
	}

	e, ok := t.GroupPrefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GroupPrefix", oldK)
	}
	e.Ipv4Prefix = &newK

	t.GroupPrefix[newK] = e
	delete(t.GroupPrefix, oldK)
	return nil
}

// GetOrCreateGroupPrefix retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static_Address. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static_Address) GetOrCreateGroupPrefix(Ipv4Prefix string) *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static_Address_GroupPrefix {

	key := Ipv4Prefix

	if v, ok := t.GroupPrefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroupPrefix(Ipv4Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroupPrefix got unexpected error: %v", err))
	}
	return v
}

// GetGroupPrefix retrieves the value with the specified key from
// the GroupPrefix map field of NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static_Address. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static_Address) GetGroupPrefix(Ipv4Prefix string) *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static_Address_GroupPrefix {

	if t == nil {
		return nil
	}

	key := Ipv4Prefix

	if lm, ok := t.GroupPrefix[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroupPrefix deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static_Address. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static_Address) DeleteGroupPrefix(Ipv4Prefix string) {
	key := Ipv4Prefix

	delete(t.GroupPrefix, key)
}

// AppendGroupPrefix appends the supplied NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static_Address_GroupPrefix struct to the
// list GroupPrefix of NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static_Address. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static_Address_GroupPrefix already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static_Address) AppendGroupPrefix(v *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static_Address_GroupPrefix) error {
	if v.Ipv4Prefix == nil {
		return fmt.Errorf("invalid nil key received for Ipv4Prefix")
	}

	key := *v.Ipv4Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupPrefix == nil {
		t.GroupPrefix = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static_Address_GroupPrefix)
	}

	if _, ok := t.GroupPrefix[key]; ok {
		return fmt.Errorf("duplicate key for list GroupPrefix %v", key)
	}

	t.GroupPrefix[key] = v
	return nil
}

// GetIpv4Address retrieves the value of the leaf Ipv4Address from the NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Address is set, it can
// safely use t.GetIpv4Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static_Address) GetIpv4Address() string {
	if t == nil || t.Ipv4Address == nil {
		return ""
	}
	return *t.Ipv4Address
}

// GetOverride retrieves the value of the leaf Override from the NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Override is set, it can
// safely use t.GetOverride() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Override == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static_Address) GetOverride() bool {
	if t == nil || t.Override == nil {
		return false
	}
	return *t.Override
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static_Address
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static_Address) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Override == nil {
		var v bool = false
		t.Override = &v
	}
	for _, e := range t.GroupPrefix {
		e.PopulateDefaults()
	}
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static_Address struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static_Address) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.Ipv4Address == nil {
		return nil, fmt.Errorf("nil value for key Ipv4Address")
	}

	return map[string]interface{}{
		"ipv4-address": *t.Ipv4Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static_Address) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static_Address"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static_Address) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static_Address) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static_Address.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static_Address) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static_Address_GroupPrefix represents the /nokia-conf/configure/groups/group/router/pim/rp/ipv4/static/address/group-prefix YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static_Address_GroupPrefix struct {
	Ipv4Prefix *string `path:"ipv4-prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static_Address_GroupPrefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static_Address_GroupPrefix) IsYANGGoStruct() {
}

// GetIpv4Prefix retrieves the value of the leaf Ipv4Prefix from the NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static_Address_GroupPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Prefix is set, it can
// safely use t.GetIpv4Prefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static_Address_GroupPrefix) GetIpv4Prefix() string {
	if t == nil || t.Ipv4Prefix == nil {
		return ""
	}
	return *t.Ipv4Prefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static_Address_GroupPrefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static_Address_GroupPrefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static_Address_GroupPrefix struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static_Address_GroupPrefix) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.Ipv4Prefix == nil {
		return nil, fmt.Errorf("nil value for key Ipv4Prefix")
	}

	return map[string]interface{}{
		"ipv4-prefix": *t.Ipv4Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static_Address_GroupPrefix) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static_Address_GroupPrefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static_Address_GroupPrefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static_Address_GroupPrefix) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static_Address_GroupPrefix.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv4_Static_Address_GroupPrefix) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6 represents the /nokia-conf/configure/groups/group/router/pim/rp/ipv6 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6 struct {
	Anycast      map[NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Anycast_Key]*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Anycast `path:"anycast" module:"nokia-conf"`
	BsrCandidate *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_BsrCandidate                                                                `path:"bsr-candidate" module:"nokia-conf"`
	EmbeddedRp   *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_EmbeddedRp                                                                  `path:"embedded-rp" module:"nokia-conf" yangPresence:"true"`
	RpCandidate  *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_RpCandidate                                                                 `path:"rp-candidate" module:"nokia-conf"`
	Static       *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static                                                                      `path:"static" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6) IsYANGGoStruct() {}

// NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Anycast_Key represents the key for list Anycast of element /nokia-conf/configure/groups/group/router/pim/rp/ipv6.
type NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Anycast_Key struct {
	Ipv6Address string `path:"ipv6-address"`
	RpSetPeer   string `path:"rp-set-peer"`
}

// NewAnycast creates a new entry in the Anycast list of the
// NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6) NewAnycast(Ipv6Address string, RpSetPeer string) (*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Anycast, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Anycast == nil {
		t.Anycast = make(map[NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Anycast_Key]*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Anycast)
	}

	key := NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Anycast_Key{
		Ipv6Address: Ipv6Address,
		RpSetPeer:   RpSetPeer,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Anycast[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Anycast", key)
	}

	t.Anycast[key] = &NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Anycast{
		Ipv6Address: &Ipv6Address,
		RpSetPeer:   &RpSetPeer,
	}

	return t.Anycast[key], nil
}

// RenameAnycast renames an entry in the list Anycast within
// the NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6) RenameAnycast(oldK, newK NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Anycast_Key) error {
	if _, ok := t.Anycast[newK]; ok {
		return fmt.Errorf("key %v already exists in Anycast", newK)
	}

	e, ok := t.Anycast[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Anycast", oldK)
	}
	e.Ipv6Address = &newK.Ipv6Address
	e.RpSetPeer = &newK.RpSetPeer

	t.Anycast[newK] = e
	delete(t.Anycast, oldK)
	return nil
}

// GetOrCreateAnycast retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6) GetOrCreateAnycast(Ipv6Address string, RpSetPeer string) *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Anycast {

	key := NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Anycast_Key{
		Ipv6Address: Ipv6Address,
		RpSetPeer:   RpSetPeer,
	}

	if v, ok := t.Anycast[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAnycast(Ipv6Address, RpSetPeer)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAnycast got unexpected error: %v", err))
	}
	return v
}

// GetAnycast retrieves the value with the specified key from
// the Anycast map field of NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6) GetAnycast(Ipv6Address string, RpSetPeer string) *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Anycast {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Anycast_Key{
		Ipv6Address: Ipv6Address,
		RpSetPeer:   RpSetPeer,
	}

	if lm, ok := t.Anycast[key]; ok {
		return lm
	}
	return nil
}

// DeleteAnycast deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6) DeleteAnycast(Ipv6Address string, RpSetPeer string) {
	key := NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Anycast_Key{
		Ipv6Address: Ipv6Address,
		RpSetPeer:   RpSetPeer,
	}

	delete(t.Anycast, key)
}

// AppendAnycast appends the supplied NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Anycast struct to the
// list Anycast of NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Anycast already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6) AppendAnycast(v *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Anycast) error {
	if v.Ipv6Address == nil {
		return fmt.Errorf("invalid nil key for Ipv6Address")
	}

	if v.RpSetPeer == nil {
		return fmt.Errorf("invalid nil key for RpSetPeer")
	}

	key := NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Anycast_Key{
		Ipv6Address: *v.Ipv6Address,
		RpSetPeer:   *v.RpSetPeer,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Anycast == nil {
		t.Anycast = make(map[NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Anycast_Key]*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Anycast)
	}

	if _, ok := t.Anycast[key]; ok {
		return fmt.Errorf("duplicate key for list Anycast %v", key)
	}

	t.Anycast[key] = v
	return nil
}

// GetOrCreateBsrCandidate retrieves the value of the BsrCandidate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6) GetOrCreateBsrCandidate() *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_BsrCandidate {
	if t.BsrCandidate != nil {
		return t.BsrCandidate
	}
	t.BsrCandidate = &NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_BsrCandidate{}
	return t.BsrCandidate
}

// GetOrCreateEmbeddedRp retrieves the value of the EmbeddedRp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6) GetOrCreateEmbeddedRp() *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_EmbeddedRp {
	if t.EmbeddedRp != nil {
		return t.EmbeddedRp
	}
	t.EmbeddedRp = &NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_EmbeddedRp{}
	return t.EmbeddedRp
}

// GetOrCreateRpCandidate retrieves the value of the RpCandidate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6) GetOrCreateRpCandidate() *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_RpCandidate {
	if t.RpCandidate != nil {
		return t.RpCandidate
	}
	t.RpCandidate = &NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_RpCandidate{}
	return t.RpCandidate
}

// GetOrCreateStatic retrieves the value of the Static field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6) GetOrCreateStatic() *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static {
	if t.Static != nil {
		return t.Static
	}
	t.Static = &NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static{}
	return t.Static
}

// GetBsrCandidate returns the value of the BsrCandidate struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6. If the receiver or the field BsrCandidate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6) GetBsrCandidate() *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_BsrCandidate {
	if t != nil && t.BsrCandidate != nil {
		return t.BsrCandidate
	}
	return nil
}

// GetEmbeddedRp returns the value of the EmbeddedRp struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6. If the receiver or the field EmbeddedRp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6) GetEmbeddedRp() *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_EmbeddedRp {
	if t != nil && t.EmbeddedRp != nil {
		return t.EmbeddedRp
	}
	return nil
}

// GetRpCandidate returns the value of the RpCandidate struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6. If the receiver or the field RpCandidate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6) GetRpCandidate() *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_RpCandidate {
	if t != nil && t.RpCandidate != nil {
		return t.RpCandidate
	}
	return nil
}

// GetStatic returns the value of the Static struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6. If the receiver or the field Static is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6) GetStatic() *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static {
	if t != nil && t.Static != nil {
		return t.Static
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.BsrCandidate.PopulateDefaults()
	t.EmbeddedRp.PopulateDefaults()
	t.RpCandidate.PopulateDefaults()
	t.Static.PopulateDefaults()
	for _, e := range t.Anycast {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Anycast represents the /nokia-conf/configure/groups/group/router/pim/rp/ipv6/anycast YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Anycast struct {
	Ipv6Address *string `path:"ipv6-address" module:"nokia-conf"`
	RpSetPeer   *string `path:"rp-set-peer" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Anycast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Anycast) IsYANGGoStruct() {}

// GetIpv6Address retrieves the value of the leaf Ipv6Address from the NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Anycast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Address is set, it can
// safely use t.GetIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Anycast) GetIpv6Address() string {
	if t == nil || t.Ipv6Address == nil {
		return ""
	}
	return *t.Ipv6Address
}

// GetRpSetPeer retrieves the value of the leaf RpSetPeer from the NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Anycast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RpSetPeer is set, it can
// safely use t.GetRpSetPeer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RpSetPeer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Anycast) GetRpSetPeer() string {
	if t == nil || t.RpSetPeer == nil {
		return ""
	}
	return *t.RpSetPeer
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Anycast
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Anycast) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Anycast struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Anycast) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.Ipv6Address == nil {
		return nil, fmt.Errorf("nil value for key Ipv6Address")
	}

	if t.RpSetPeer == nil {
		return nil, fmt.Errorf("nil value for key RpSetPeer")
	}

	return map[string]interface{}{
		"ipv6-address": *t.Ipv6Address,
		"rp-set-peer":  *t.RpSetPeer,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Anycast) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Anycast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Anycast) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Anycast) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Anycast.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Anycast) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_BsrCandidate represents the /nokia-conf/configure/groups/group/router/pim/rp/ipv6/bsr-candidate YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_BsrCandidate struct {
	Address     *string                     `path:"address" module:"nokia-conf"`
	AdminState  E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	HashMaskLen *int32                      `path:"hash-mask-len" module:"nokia-conf"`
	Priority    *int32                      `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_BsrCandidate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_BsrCandidate) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_BsrCandidate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_BsrCandidate) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_BsrCandidate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_BsrCandidate) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetHashMaskLen retrieves the value of the leaf HashMaskLen from the NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_BsrCandidate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HashMaskLen is set, it can
// safely use t.GetHashMaskLen() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HashMaskLen == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_BsrCandidate) GetHashMaskLen() int32 {
	if t == nil || t.HashMaskLen == nil {
		return 126
	}
	return *t.HashMaskLen
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_BsrCandidate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_BsrCandidate) GetPriority() int32 {
	if t == nil || t.Priority == nil {
		return 0
	}
	return *t.Priority
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_BsrCandidate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_BsrCandidate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.HashMaskLen == nil {
		var v int32 = 126
		t.HashMaskLen = &v
	}
	if t.Priority == nil {
		var v int32 = 0
		t.Priority = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_BsrCandidate) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_BsrCandidate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_BsrCandidate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_BsrCandidate) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_BsrCandidate.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_BsrCandidate) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_EmbeddedRp represents the /nokia-conf/configure/groups/group/router/pim/rp/ipv6/embedded-rp YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_EmbeddedRp struct {
	AdminState E_NokiaTypesSros_AdminState                                                           `path:"admin-state" module:"nokia-conf"`
	GroupRange map[string]*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_EmbeddedRp_GroupRange `path:"group-range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_EmbeddedRp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_EmbeddedRp) IsYANGGoStruct() {}

// NewGroupRange creates a new entry in the GroupRange list of the
// NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_EmbeddedRp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_EmbeddedRp) NewGroupRange(Ipv6Prefix string) (*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_EmbeddedRp_GroupRange, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_EmbeddedRp_GroupRange)
	}

	key := Ipv6Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GroupRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GroupRange", key)
	}

	t.GroupRange[key] = &NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_EmbeddedRp_GroupRange{
		Ipv6Prefix: &Ipv6Prefix,
	}

	return t.GroupRange[key], nil
}

// RenameGroupRange renames an entry in the list GroupRange within
// the NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_EmbeddedRp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_EmbeddedRp) RenameGroupRange(oldK, newK string) error {
	if _, ok := t.GroupRange[newK]; ok {
		return fmt.Errorf("key %v already exists in GroupRange", newK)
	}

	e, ok := t.GroupRange[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GroupRange", oldK)
	}
	e.Ipv6Prefix = &newK

	t.GroupRange[newK] = e
	delete(t.GroupRange, oldK)
	return nil
}

// GetOrCreateGroupRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_EmbeddedRp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_EmbeddedRp) GetOrCreateGroupRange(Ipv6Prefix string) *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_EmbeddedRp_GroupRange {

	key := Ipv6Prefix

	if v, ok := t.GroupRange[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroupRange(Ipv6Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroupRange got unexpected error: %v", err))
	}
	return v
}

// GetGroupRange retrieves the value with the specified key from
// the GroupRange map field of NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_EmbeddedRp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_EmbeddedRp) GetGroupRange(Ipv6Prefix string) *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_EmbeddedRp_GroupRange {

	if t == nil {
		return nil
	}

	key := Ipv6Prefix

	if lm, ok := t.GroupRange[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroupRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_EmbeddedRp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_EmbeddedRp) DeleteGroupRange(Ipv6Prefix string) {
	key := Ipv6Prefix

	delete(t.GroupRange, key)
}

// AppendGroupRange appends the supplied NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_EmbeddedRp_GroupRange struct to the
// list GroupRange of NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_EmbeddedRp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_EmbeddedRp_GroupRange already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_EmbeddedRp) AppendGroupRange(v *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_EmbeddedRp_GroupRange) error {
	if v.Ipv6Prefix == nil {
		return fmt.Errorf("invalid nil key received for Ipv6Prefix")
	}

	key := *v.Ipv6Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_EmbeddedRp_GroupRange)
	}

	if _, ok := t.GroupRange[key]; ok {
		return fmt.Errorf("duplicate key for list GroupRange %v", key)
	}

	t.GroupRange[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_EmbeddedRp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_EmbeddedRp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_EmbeddedRp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_EmbeddedRp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.GroupRange {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_EmbeddedRp) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_EmbeddedRp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_EmbeddedRp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_EmbeddedRp) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_EmbeddedRp.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_EmbeddedRp) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_EmbeddedRp_GroupRange represents the /nokia-conf/configure/groups/group/router/pim/rp/ipv6/embedded-rp/group-range YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_EmbeddedRp_GroupRange struct {
	Ipv6Prefix *string `path:"ipv6-prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_EmbeddedRp_GroupRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_EmbeddedRp_GroupRange) IsYANGGoStruct() {}

// GetIpv6Prefix retrieves the value of the leaf Ipv6Prefix from the NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_EmbeddedRp_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Prefix is set, it can
// safely use t.GetIpv6Prefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_EmbeddedRp_GroupRange) GetIpv6Prefix() string {
	if t == nil || t.Ipv6Prefix == nil {
		return ""
	}
	return *t.Ipv6Prefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_EmbeddedRp_GroupRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_EmbeddedRp_GroupRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_EmbeddedRp_GroupRange struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_EmbeddedRp_GroupRange) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.Ipv6Prefix == nil {
		return nil, fmt.Errorf("nil value for key Ipv6Prefix")
	}

	return map[string]interface{}{
		"ipv6-prefix": *t.Ipv6Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_EmbeddedRp_GroupRange) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_EmbeddedRp_GroupRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_EmbeddedRp_GroupRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_EmbeddedRp_GroupRange) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_EmbeddedRp_GroupRange.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_EmbeddedRp_GroupRange) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_RpCandidate represents the /nokia-conf/configure/groups/group/router/pim/rp/ipv6/rp-candidate YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_RpCandidate struct {
	Address    *string                                                                                `path:"address" module:"nokia-conf"`
	AdminState E_NokiaTypesSros_AdminState                                                            `path:"admin-state" module:"nokia-conf"`
	GroupRange map[string]*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_RpCandidate_GroupRange `path:"group-range" module:"nokia-conf"`
	Holdtime   *int32                                                                                 `path:"holdtime" module:"nokia-conf"`
	Priority   *int32                                                                                 `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_RpCandidate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_RpCandidate) IsYANGGoStruct() {}

// NewGroupRange creates a new entry in the GroupRange list of the
// NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_RpCandidate struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_RpCandidate) NewGroupRange(Ipv6Prefix string) (*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_RpCandidate_GroupRange, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_RpCandidate_GroupRange)
	}

	key := Ipv6Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GroupRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GroupRange", key)
	}

	t.GroupRange[key] = &NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_RpCandidate_GroupRange{
		Ipv6Prefix: &Ipv6Prefix,
	}

	return t.GroupRange[key], nil
}

// RenameGroupRange renames an entry in the list GroupRange within
// the NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_RpCandidate struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_RpCandidate) RenameGroupRange(oldK, newK string) error {
	if _, ok := t.GroupRange[newK]; ok {
		return fmt.Errorf("key %v already exists in GroupRange", newK)
	}

	e, ok := t.GroupRange[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GroupRange", oldK)
	}
	e.Ipv6Prefix = &newK

	t.GroupRange[newK] = e
	delete(t.GroupRange, oldK)
	return nil
}

// GetOrCreateGroupRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_RpCandidate. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_RpCandidate) GetOrCreateGroupRange(Ipv6Prefix string) *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_RpCandidate_GroupRange {

	key := Ipv6Prefix

	if v, ok := t.GroupRange[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroupRange(Ipv6Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroupRange got unexpected error: %v", err))
	}
	return v
}

// GetGroupRange retrieves the value with the specified key from
// the GroupRange map field of NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_RpCandidate. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_RpCandidate) GetGroupRange(Ipv6Prefix string) *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_RpCandidate_GroupRange {

	if t == nil {
		return nil
	}

	key := Ipv6Prefix

	if lm, ok := t.GroupRange[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroupRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_RpCandidate. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_RpCandidate) DeleteGroupRange(Ipv6Prefix string) {
	key := Ipv6Prefix

	delete(t.GroupRange, key)
}

// AppendGroupRange appends the supplied NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_RpCandidate_GroupRange struct to the
// list GroupRange of NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_RpCandidate. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_RpCandidate_GroupRange already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_RpCandidate) AppendGroupRange(v *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_RpCandidate_GroupRange) error {
	if v.Ipv6Prefix == nil {
		return fmt.Errorf("invalid nil key received for Ipv6Prefix")
	}

	key := *v.Ipv6Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_RpCandidate_GroupRange)
	}

	if _, ok := t.GroupRange[key]; ok {
		return fmt.Errorf("duplicate key for list GroupRange %v", key)
	}

	t.GroupRange[key] = v
	return nil
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_RpCandidate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_RpCandidate) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_RpCandidate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_RpCandidate) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetHoldtime retrieves the value of the leaf Holdtime from the NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_RpCandidate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Holdtime is set, it can
// safely use t.GetHoldtime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Holdtime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_RpCandidate) GetHoldtime() int32 {
	if t == nil || t.Holdtime == nil {
		return 150
	}
	return *t.Holdtime
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_RpCandidate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_RpCandidate) GetPriority() int32 {
	if t == nil || t.Priority == nil {
		return 192
	}
	return *t.Priority
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_RpCandidate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_RpCandidate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Holdtime == nil {
		var v int32 = 150
		t.Holdtime = &v
	}
	if t.Priority == nil {
		var v int32 = 192
		t.Priority = &v
	}
	for _, e := range t.GroupRange {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_RpCandidate) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_RpCandidate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_RpCandidate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_RpCandidate) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_RpCandidate.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_RpCandidate) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_RpCandidate_GroupRange represents the /nokia-conf/configure/groups/group/router/pim/rp/ipv6/rp-candidate/group-range YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_RpCandidate_GroupRange struct {
	Ipv6Prefix *string `path:"ipv6-prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_RpCandidate_GroupRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_RpCandidate_GroupRange) IsYANGGoStruct() {}

// GetIpv6Prefix retrieves the value of the leaf Ipv6Prefix from the NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_RpCandidate_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Prefix is set, it can
// safely use t.GetIpv6Prefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_RpCandidate_GroupRange) GetIpv6Prefix() string {
	if t == nil || t.Ipv6Prefix == nil {
		return ""
	}
	return *t.Ipv6Prefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_RpCandidate_GroupRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_RpCandidate_GroupRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_RpCandidate_GroupRange struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_RpCandidate_GroupRange) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.Ipv6Prefix == nil {
		return nil, fmt.Errorf("nil value for key Ipv6Prefix")
	}

	return map[string]interface{}{
		"ipv6-prefix": *t.Ipv6Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_RpCandidate_GroupRange) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_RpCandidate_GroupRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_RpCandidate_GroupRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_RpCandidate_GroupRange) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_RpCandidate_GroupRange.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_RpCandidate_GroupRange) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static represents the /nokia-conf/configure/groups/group/router/pim/rp/ipv6/static YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static struct {
	Address map[string]*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static_Address `path:"address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static) IsYANGGoStruct() {}

// NewAddress creates a new entry in the Address list of the
// NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static) NewAddress(Ipv6Address string) (*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static_Address, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static_Address)
	}

	key := Ipv6Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Address[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Address", key)
	}

	t.Address[key] = &NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static_Address{
		Ipv6Address: &Ipv6Address,
	}

	return t.Address[key], nil
}

// RenameAddress renames an entry in the list Address within
// the NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static) RenameAddress(oldK, newK string) error {
	if _, ok := t.Address[newK]; ok {
		return fmt.Errorf("key %v already exists in Address", newK)
	}

	e, ok := t.Address[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Address", oldK)
	}
	e.Ipv6Address = &newK

	t.Address[newK] = e
	delete(t.Address, oldK)
	return nil
}

// GetOrCreateAddress retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static) GetOrCreateAddress(Ipv6Address string) *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static_Address {

	key := Ipv6Address

	if v, ok := t.Address[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAddress(Ipv6Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAddress got unexpected error: %v", err))
	}
	return v
}

// GetAddress retrieves the value with the specified key from
// the Address map field of NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static) GetAddress(Ipv6Address string) *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static_Address {

	if t == nil {
		return nil
	}

	key := Ipv6Address

	if lm, ok := t.Address[key]; ok {
		return lm
	}
	return nil
}

// DeleteAddress deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static) DeleteAddress(Ipv6Address string) {
	key := Ipv6Address

	delete(t.Address, key)
}

// AppendAddress appends the supplied NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static_Address struct to the
// list Address of NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static_Address already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static) AppendAddress(v *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static_Address) error {
	if v.Ipv6Address == nil {
		return fmt.Errorf("invalid nil key received for Ipv6Address")
	}

	key := *v.Ipv6Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static_Address)
	}

	if _, ok := t.Address[key]; ok {
		return fmt.Errorf("duplicate key for list Address %v", key)
	}

	t.Address[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Address {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static_Address represents the /nokia-conf/configure/groups/group/router/pim/rp/ipv6/static/address YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static_Address struct {
	GroupPrefix map[string]*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static_Address_GroupPrefix `path:"group-prefix" module:"nokia-conf"`
	Ipv6Address *string                                                                                    `path:"ipv6-address" module:"nokia-conf"`
	Override    *bool                                                                                      `path:"override" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static_Address implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static_Address) IsYANGGoStruct() {}

// NewGroupPrefix creates a new entry in the GroupPrefix list of the
// NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static_Address struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static_Address) NewGroupPrefix(Ipv6Prefix string) (*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static_Address_GroupPrefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupPrefix == nil {
		t.GroupPrefix = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static_Address_GroupPrefix)
	}

	key := Ipv6Prefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GroupPrefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GroupPrefix", key)
	}

	t.GroupPrefix[key] = &NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static_Address_GroupPrefix{
		Ipv6Prefix: &Ipv6Prefix,
	}

	return t.GroupPrefix[key], nil
}

// RenameGroupPrefix renames an entry in the list GroupPrefix within
// the NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static_Address struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static_Address) RenameGroupPrefix(oldK, newK string) error {
	if _, ok := t.GroupPrefix[newK]; ok {
		return fmt.Errorf("key %v already exists in GroupPrefix", newK)
	}

	e, ok := t.GroupPrefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GroupPrefix", oldK)
	}
	e.Ipv6Prefix = &newK

	t.GroupPrefix[newK] = e
	delete(t.GroupPrefix, oldK)
	return nil
}

// GetOrCreateGroupPrefix retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static_Address. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static_Address) GetOrCreateGroupPrefix(Ipv6Prefix string) *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static_Address_GroupPrefix {

	key := Ipv6Prefix

	if v, ok := t.GroupPrefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroupPrefix(Ipv6Prefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroupPrefix got unexpected error: %v", err))
	}
	return v
}

// GetGroupPrefix retrieves the value with the specified key from
// the GroupPrefix map field of NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static_Address. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static_Address) GetGroupPrefix(Ipv6Prefix string) *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static_Address_GroupPrefix {

	if t == nil {
		return nil
	}

	key := Ipv6Prefix

	if lm, ok := t.GroupPrefix[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroupPrefix deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static_Address. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static_Address) DeleteGroupPrefix(Ipv6Prefix string) {
	key := Ipv6Prefix

	delete(t.GroupPrefix, key)
}

// AppendGroupPrefix appends the supplied NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static_Address_GroupPrefix struct to the
// list GroupPrefix of NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static_Address. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static_Address_GroupPrefix already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static_Address) AppendGroupPrefix(v *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static_Address_GroupPrefix) error {
	if v.Ipv6Prefix == nil {
		return fmt.Errorf("invalid nil key received for Ipv6Prefix")
	}

	key := *v.Ipv6Prefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupPrefix == nil {
		t.GroupPrefix = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static_Address_GroupPrefix)
	}

	if _, ok := t.GroupPrefix[key]; ok {
		return fmt.Errorf("duplicate key for list GroupPrefix %v", key)
	}

	t.GroupPrefix[key] = v
	return nil
}

// GetIpv6Address retrieves the value of the leaf Ipv6Address from the NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Address is set, it can
// safely use t.GetIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static_Address) GetIpv6Address() string {
	if t == nil || t.Ipv6Address == nil {
		return ""
	}
	return *t.Ipv6Address
}

// GetOverride retrieves the value of the leaf Override from the NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Override is set, it can
// safely use t.GetOverride() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Override == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static_Address) GetOverride() bool {
	if t == nil || t.Override == nil {
		return false
	}
	return *t.Override
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static_Address
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static_Address) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Override == nil {
		var v bool = false
		t.Override = &v
	}
	for _, e := range t.GroupPrefix {
		e.PopulateDefaults()
	}
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static_Address struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static_Address) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.Ipv6Address == nil {
		return nil, fmt.Errorf("nil value for key Ipv6Address")
	}

	return map[string]interface{}{
		"ipv6-address": *t.Ipv6Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static_Address) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static_Address"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static_Address) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static_Address) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static_Address.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static_Address) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static_Address_GroupPrefix represents the /nokia-conf/configure/groups/group/router/pim/rp/ipv6/static/address/group-prefix YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static_Address_GroupPrefix struct {
	Ipv6Prefix *string `path:"ipv6-prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static_Address_GroupPrefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static_Address_GroupPrefix) IsYANGGoStruct() {
}

// GetIpv6Prefix retrieves the value of the leaf Ipv6Prefix from the NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static_Address_GroupPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Prefix is set, it can
// safely use t.GetIpv6Prefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static_Address_GroupPrefix) GetIpv6Prefix() string {
	if t == nil || t.Ipv6Prefix == nil {
		return ""
	}
	return *t.Ipv6Prefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static_Address_GroupPrefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static_Address_GroupPrefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static_Address_GroupPrefix struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static_Address_GroupPrefix) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.Ipv6Prefix == nil {
		return nil, fmt.Errorf("nil value for key Ipv6Prefix")
	}

	return map[string]interface{}{
		"ipv6-prefix": *t.Ipv6Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static_Address_GroupPrefix) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static_Address_GroupPrefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static_Address_GroupPrefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static_Address_GroupPrefix) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static_Address_GroupPrefix.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Rp_Ipv6_Static_Address_GroupPrefix) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Pim_Rpfv represents the /nokia-conf/configure/groups/group/router/pim/rpfv YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Pim_Rpfv struct {
	Core *bool `path:"core" module:"nokia-conf"`
	Mvpn *bool `path:"mvpn" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Pim_Rpfv implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Rpfv) IsYANGGoStruct() {}

// GetCore retrieves the value of the leaf Core from the NokiaConf_Configure_Groups_Group_Router_Pim_Rpfv
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Core is set, it can
// safely use t.GetCore() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Core == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rpfv) GetCore() bool {
	if t == nil || t.Core == nil {
		return false
	}
	return *t.Core
}

// GetMvpn retrieves the value of the leaf Mvpn from the NokiaConf_Configure_Groups_Group_Router_Pim_Rpfv
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mvpn is set, it can
// safely use t.GetMvpn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mvpn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rpfv) GetMvpn() bool {
	if t == nil || t.Mvpn == nil {
		return false
	}
	return *t.Mvpn
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Pim_Rpfv
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rpfv) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Core == nil {
		var v bool = false
		t.Core = &v
	}
	if t.Mvpn == nil {
		var v bool = false
		t.Mvpn = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rpfv) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Pim_Rpfv"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rpfv) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_Rpfv) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Pim_Rpfv.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_Rpfv) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Pim_SptSwitchover represents the /nokia-conf/configure/groups/group/router/pim/spt-switchover YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Pim_SptSwitchover struct {
	IpPrefix  *string                                                                   `path:"ip-prefix" module:"nokia-conf"`
	Threshold NokiaConf_Configure_Groups_Group_Router_Pim_SptSwitchover_Threshold_Union `path:"threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Pim_SptSwitchover implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_SptSwitchover) IsYANGGoStruct() {}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_Groups_Group_Router_Pim_SptSwitchover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_SptSwitchover) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// GetThreshold retrieves the value of the leaf Threshold from the NokiaConf_Configure_Groups_Group_Router_Pim_SptSwitchover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Threshold is set, it can
// safely use t.GetThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Threshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_SptSwitchover) GetThreshold() NokiaConf_Configure_Groups_Group_Router_Pim_SptSwitchover_Threshold_Union {
	if t == nil || t.Threshold == nil {
		return nil
	}
	return t.Threshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Pim_SptSwitchover
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_SptSwitchover) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Pim_SptSwitchover struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_SptSwitchover) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	return map[string]interface{}{
		"ip-prefix": *t.IpPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_SptSwitchover) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Pim_SptSwitchover"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_SptSwitchover) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_SptSwitchover) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Pim_SptSwitchover.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_SptSwitchover) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Pim_SsmGroups represents the /nokia-conf/configure/groups/group/router/pim/ssm-groups YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Pim_SsmGroups struct {
	GroupRange map[string]*NokiaConf_Configure_Groups_Group_Router_Pim_SsmGroups_GroupRange `path:"group-range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Pim_SsmGroups implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_SsmGroups) IsYANGGoStruct() {}

// NewGroupRange creates a new entry in the GroupRange list of the
// NokiaConf_Configure_Groups_Group_Router_Pim_SsmGroups struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_SsmGroups) NewGroupRange(IpPrefix string) (*NokiaConf_Configure_Groups_Group_Router_Pim_SsmGroups_GroupRange, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Pim_SsmGroups_GroupRange)
	}

	key := IpPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GroupRange[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GroupRange", key)
	}

	t.GroupRange[key] = &NokiaConf_Configure_Groups_Group_Router_Pim_SsmGroups_GroupRange{
		IpPrefix: &IpPrefix,
	}

	return t.GroupRange[key], nil
}

// RenameGroupRange renames an entry in the list GroupRange within
// the NokiaConf_Configure_Groups_Group_Router_Pim_SsmGroups struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_SsmGroups) RenameGroupRange(oldK, newK string) error {
	if _, ok := t.GroupRange[newK]; ok {
		return fmt.Errorf("key %v already exists in GroupRange", newK)
	}

	e, ok := t.GroupRange[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GroupRange", oldK)
	}
	e.IpPrefix = &newK

	t.GroupRange[newK] = e
	delete(t.GroupRange, oldK)
	return nil
}

// GetOrCreateGroupRange retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Pim_SsmGroups. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_SsmGroups) GetOrCreateGroupRange(IpPrefix string) *NokiaConf_Configure_Groups_Group_Router_Pim_SsmGroups_GroupRange {

	key := IpPrefix

	if v, ok := t.GroupRange[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroupRange(IpPrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroupRange got unexpected error: %v", err))
	}
	return v
}

// GetGroupRange retrieves the value with the specified key from
// the GroupRange map field of NokiaConf_Configure_Groups_Group_Router_Pim_SsmGroups. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_SsmGroups) GetGroupRange(IpPrefix string) *NokiaConf_Configure_Groups_Group_Router_Pim_SsmGroups_GroupRange {

	if t == nil {
		return nil
	}

	key := IpPrefix

	if lm, ok := t.GroupRange[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroupRange deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Pim_SsmGroups. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_SsmGroups) DeleteGroupRange(IpPrefix string) {
	key := IpPrefix

	delete(t.GroupRange, key)
}

// AppendGroupRange appends the supplied NokiaConf_Configure_Groups_Group_Router_Pim_SsmGroups_GroupRange struct to the
// list GroupRange of NokiaConf_Configure_Groups_Group_Router_Pim_SsmGroups. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Pim_SsmGroups_GroupRange already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_SsmGroups) AppendGroupRange(v *NokiaConf_Configure_Groups_Group_Router_Pim_SsmGroups_GroupRange) error {
	if v.IpPrefix == nil {
		return fmt.Errorf("invalid nil key received for IpPrefix")
	}

	key := *v.IpPrefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GroupRange == nil {
		t.GroupRange = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Pim_SsmGroups_GroupRange)
	}

	if _, ok := t.GroupRange[key]; ok {
		return fmt.Errorf("duplicate key for list GroupRange %v", key)
	}

	t.GroupRange[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Pim_SsmGroups
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_SsmGroups) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.GroupRange {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_SsmGroups) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Pim_SsmGroups"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_SsmGroups) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_SsmGroups) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Pim_SsmGroups.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_SsmGroups) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Pim_SsmGroups_GroupRange represents the /nokia-conf/configure/groups/group/router/pim/ssm-groups/group-range YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Pim_SsmGroups_GroupRange struct {
	IpPrefix *string `path:"ip-prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Pim_SsmGroups_GroupRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_SsmGroups_GroupRange) IsYANGGoStruct() {}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_Groups_Group_Router_Pim_SsmGroups_GroupRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_SsmGroups_GroupRange) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Pim_SsmGroups_GroupRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_SsmGroups_GroupRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Pim_SsmGroups_GroupRange struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_SsmGroups_GroupRange) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	return map[string]interface{}{
		"ip-prefix": *t.IpPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_SsmGroups_GroupRange) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Pim_SsmGroups_GroupRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_SsmGroups_GroupRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Pim_SsmGroups_GroupRange) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Pim_SsmGroups_GroupRange.
func (*NokiaConf_Configure_Groups_Group_Router_Pim_SsmGroups_GroupRange) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Radius represents the /nokia-conf/configure/groups/group/router/radius YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Radius struct {
	Proxy  map[string]*NokiaConf_Configure_Groups_Group_Router_Radius_Proxy  `path:"proxy" module:"nokia-conf"`
	Server map[string]*NokiaConf_Configure_Groups_Group_Router_Radius_Server `path:"server" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Radius implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Radius) IsYANGGoStruct() {}

// NewProxy creates a new entry in the Proxy list of the
// NokiaConf_Configure_Groups_Group_Router_Radius struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius) NewProxy(Name string) (*NokiaConf_Configure_Groups_Group_Router_Radius_Proxy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Proxy == nil {
		t.Proxy = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Radius_Proxy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Proxy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Proxy", key)
	}

	t.Proxy[key] = &NokiaConf_Configure_Groups_Group_Router_Radius_Proxy{
		Name: &Name,
	}

	return t.Proxy[key], nil
}

// RenameProxy renames an entry in the list Proxy within
// the NokiaConf_Configure_Groups_Group_Router_Radius struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius) RenameProxy(oldK, newK string) error {
	if _, ok := t.Proxy[newK]; ok {
		return fmt.Errorf("key %v already exists in Proxy", newK)
	}

	e, ok := t.Proxy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Proxy", oldK)
	}
	e.Name = &newK

	t.Proxy[newK] = e
	delete(t.Proxy, oldK)
	return nil
}

// GetOrCreateProxy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Radius. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius) GetOrCreateProxy(Name string) *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy {

	key := Name

	if v, ok := t.Proxy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewProxy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateProxy got unexpected error: %v", err))
	}
	return v
}

// GetProxy retrieves the value with the specified key from
// the Proxy map field of NokiaConf_Configure_Groups_Group_Router_Radius. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius) GetProxy(Name string) *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Proxy[key]; ok {
		return lm
	}
	return nil
}

// DeleteProxy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Radius. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius) DeleteProxy(Name string) {
	key := Name

	delete(t.Proxy, key)
}

// AppendProxy appends the supplied NokiaConf_Configure_Groups_Group_Router_Radius_Proxy struct to the
// list Proxy of NokiaConf_Configure_Groups_Group_Router_Radius. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Radius_Proxy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius) AppendProxy(v *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Proxy == nil {
		t.Proxy = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Radius_Proxy)
	}

	if _, ok := t.Proxy[key]; ok {
		return fmt.Errorf("duplicate key for list Proxy %v", key)
	}

	t.Proxy[key] = v
	return nil
}

// NewServer creates a new entry in the Server list of the
// NokiaConf_Configure_Groups_Group_Router_Radius struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius) NewServer(Name string) (*NokiaConf_Configure_Groups_Group_Router_Radius_Server, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Radius_Server)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Server[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Server", key)
	}

	t.Server[key] = &NokiaConf_Configure_Groups_Group_Router_Radius_Server{
		Name: &Name,
	}

	return t.Server[key], nil
}

// RenameServer renames an entry in the list Server within
// the NokiaConf_Configure_Groups_Group_Router_Radius struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius) RenameServer(oldK, newK string) error {
	if _, ok := t.Server[newK]; ok {
		return fmt.Errorf("key %v already exists in Server", newK)
	}

	e, ok := t.Server[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Server", oldK)
	}
	e.Name = &newK

	t.Server[newK] = e
	delete(t.Server, oldK)
	return nil
}

// GetOrCreateServer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Radius. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius) GetOrCreateServer(Name string) *NokiaConf_Configure_Groups_Group_Router_Radius_Server {

	key := Name

	if v, ok := t.Server[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServer(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServer got unexpected error: %v", err))
	}
	return v
}

// GetServer retrieves the value with the specified key from
// the Server map field of NokiaConf_Configure_Groups_Group_Router_Radius. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius) GetServer(Name string) *NokiaConf_Configure_Groups_Group_Router_Radius_Server {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Server[key]; ok {
		return lm
	}
	return nil
}

// DeleteServer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Radius. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius) DeleteServer(Name string) {
	key := Name

	delete(t.Server, key)
}

// AppendServer appends the supplied NokiaConf_Configure_Groups_Group_Router_Radius_Server struct to the
// list Server of NokiaConf_Configure_Groups_Group_Router_Radius. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Radius_Server already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius) AppendServer(v *NokiaConf_Configure_Groups_Group_Router_Radius_Server) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Radius_Server)
	}

	if _, ok := t.Server[key]; ok {
		return fmt.Errorf("duplicate key for list Server %v", key)
	}

	t.Server[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Radius
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Proxy {
		e.PopulateDefaults()
	}
	for _, e := range t.Server {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Radius"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Radius.
func (*NokiaConf_Configure_Groups_Group_Router_Radius) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Radius_Proxy represents the /nokia-conf/configure/groups/group/router/radius/proxy YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Radius_Proxy struct {
	AdminState             E_NokiaTypesSros_AdminState                                                `path:"admin-state" module:"nokia-conf"`
	AttributeMatching      *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching    `path:"attribute-matching" module:"nokia-conf"`
	Cache                  *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache                `path:"cache" module:"nokia-conf"`
	Defaults               *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Defaults             `path:"defaults" module:"nokia-conf"`
	Description            *string                                                                    `path:"description" module:"nokia-conf"`
	Interface              map[string]*NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Interface `path:"interface" module:"nokia-conf"`
	LoadBalanceKey         *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey       `path:"load-balance-key" module:"nokia-conf"`
	Name                   *string                                                                    `path:"name" module:"nokia-conf"`
	Purpose                E_NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Purpose             `path:"purpose" module:"nokia-conf"`
	PythonPolicy           *string                                                                    `path:"python-policy" module:"nokia-conf"`
	Secret                 *string                                                                    `path:"secret" module:"nokia-conf"`
	SendAccountingResponse *bool                                                                      `path:"send-accounting-response" module:"nokia-conf"`
	WlanGw                 *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_WlanGw               `path:"wlan-gw" module:"nokia-conf" yangPresence:"true"`
	WlanGwGroup            *uint32                                                                    `path:"wlan-gw-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Radius_Proxy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Radius_Proxy) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// NokiaConf_Configure_Groups_Group_Router_Radius_Proxy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy) NewInterface(InterfaceName string) (*NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Interface)
	}

	key := InterfaceName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Interface{
		InterfaceName: &InterfaceName,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the NokiaConf_Configure_Groups_Group_Router_Radius_Proxy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.InterfaceName = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Radius_Proxy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy) GetOrCreateInterface(InterfaceName string) *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Interface {

	key := InterfaceName

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of NokiaConf_Configure_Groups_Group_Router_Radius_Proxy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy) GetInterface(InterfaceName string) *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Interface {

	if t == nil {
		return nil
	}

	key := InterfaceName

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Radius_Proxy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy) DeleteInterface(InterfaceName string) {
	key := InterfaceName

	delete(t.Interface, key)
}

// AppendInterface appends the supplied NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Interface struct to the
// list Interface of NokiaConf_Configure_Groups_Group_Router_Radius_Proxy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Interface already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy) AppendInterface(v *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Interface) error {
	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key received for InterfaceName")
	}

	key := *v.InterfaceName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// GetOrCreateAttributeMatching retrieves the value of the AttributeMatching field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy) GetOrCreateAttributeMatching() *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching {
	if t.AttributeMatching != nil {
		return t.AttributeMatching
	}
	t.AttributeMatching = &NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching{}
	return t.AttributeMatching
}

// GetOrCreateCache retrieves the value of the Cache field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy) GetOrCreateCache() *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache {
	if t.Cache != nil {
		return t.Cache
	}
	t.Cache = &NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache{}
	return t.Cache
}

// GetOrCreateDefaults retrieves the value of the Defaults field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy) GetOrCreateDefaults() *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Defaults {
	if t.Defaults != nil {
		return t.Defaults
	}
	t.Defaults = &NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Defaults{}
	return t.Defaults
}

// GetOrCreateLoadBalanceKey retrieves the value of the LoadBalanceKey field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy) GetOrCreateLoadBalanceKey() *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey {
	if t.LoadBalanceKey != nil {
		return t.LoadBalanceKey
	}
	t.LoadBalanceKey = &NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey{}
	return t.LoadBalanceKey
}

// GetOrCreateWlanGw retrieves the value of the WlanGw field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy) GetOrCreateWlanGw() *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_WlanGw {
	if t.WlanGw != nil {
		return t.WlanGw
	}
	t.WlanGw = &NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_WlanGw{}
	return t.WlanGw
}

// GetAttributeMatching returns the value of the AttributeMatching struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Radius_Proxy. If the receiver or the field AttributeMatching is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy) GetAttributeMatching() *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching {
	if t != nil && t.AttributeMatching != nil {
		return t.AttributeMatching
	}
	return nil
}

// GetCache returns the value of the Cache struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Radius_Proxy. If the receiver or the field Cache is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy) GetCache() *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache {
	if t != nil && t.Cache != nil {
		return t.Cache
	}
	return nil
}

// GetDefaults returns the value of the Defaults struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Radius_Proxy. If the receiver or the field Defaults is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy) GetDefaults() *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Defaults {
	if t != nil && t.Defaults != nil {
		return t.Defaults
	}
	return nil
}

// GetLoadBalanceKey returns the value of the LoadBalanceKey struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Radius_Proxy. If the receiver or the field LoadBalanceKey is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy) GetLoadBalanceKey() *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey {
	if t != nil && t.LoadBalanceKey != nil {
		return t.LoadBalanceKey
	}
	return nil
}

// GetWlanGw returns the value of the WlanGw struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Radius_Proxy. If the receiver or the field WlanGw is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy) GetWlanGw() *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_WlanGw {
	if t != nil && t.WlanGw != nil {
		return t.WlanGw
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Radius_Proxy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Router_Radius_Proxy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_Router_Radius_Proxy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPurpose retrieves the value of the leaf Purpose from the NokiaConf_Configure_Groups_Group_Router_Radius_Proxy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Purpose is set, it can
// safely use t.GetPurpose() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Purpose == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy) GetPurpose() E_NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Purpose {
	if t == nil || t.Purpose == 0 {
		return 0
	}
	return t.Purpose
}

// GetPythonPolicy retrieves the value of the leaf PythonPolicy from the NokiaConf_Configure_Groups_Group_Router_Radius_Proxy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PythonPolicy is set, it can
// safely use t.GetPythonPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PythonPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy) GetPythonPolicy() string {
	if t == nil || t.PythonPolicy == nil {
		return ""
	}
	return *t.PythonPolicy
}

// GetSecret retrieves the value of the leaf Secret from the NokiaConf_Configure_Groups_Group_Router_Radius_Proxy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Secret is set, it can
// safely use t.GetSecret() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Secret == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy) GetSecret() string {
	if t == nil || t.Secret == nil {
		return ""
	}
	return *t.Secret
}

// GetSendAccountingResponse retrieves the value of the leaf SendAccountingResponse from the NokiaConf_Configure_Groups_Group_Router_Radius_Proxy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SendAccountingResponse is set, it can
// safely use t.GetSendAccountingResponse() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SendAccountingResponse == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy) GetSendAccountingResponse() bool {
	if t == nil || t.SendAccountingResponse == nil {
		return false
	}
	return *t.SendAccountingResponse
}

// GetWlanGwGroup retrieves the value of the leaf WlanGwGroup from the NokiaConf_Configure_Groups_Group_Router_Radius_Proxy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WlanGwGroup is set, it can
// safely use t.GetWlanGwGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WlanGwGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy) GetWlanGwGroup() uint32 {
	if t == nil || t.WlanGwGroup == nil {
		return 0
	}
	return *t.WlanGwGroup
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Radius_Proxy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.SendAccountingResponse == nil {
		var v bool = false
		t.SendAccountingResponse = &v
	}
	t.AttributeMatching.PopulateDefaults()
	t.Cache.PopulateDefaults()
	t.Defaults.PopulateDefaults()
	t.LoadBalanceKey.PopulateDefaults()
	t.WlanGw.PopulateDefaults()
	for _, e := range t.Interface {
		e.PopulateDefaults()
	}
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Radius_Proxy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Radius_Proxy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Radius_Proxy.
func (*NokiaConf_Configure_Groups_Group_Router_Radius_Proxy) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching represents the /nokia-conf/configure/groups/group/router/radius/proxy/attribute-matching YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching struct {
	Entry  map[NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching_Entry_Index_Union]*NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching_Entry `path:"entry" module:"nokia-conf"`
	Type   *uint32                                                                                                                                                                    `path:"type" module:"nokia-conf"`
	Vendor NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching_Vendor_Union                                                                                        `path:"vendor" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching) NewEntry(Index NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching_Entry_Index_Union) (*NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching_Entry_Index_Union]*NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching_Entry)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching_Entry{
		Index: Index,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching) RenameEntry(oldK, newK NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching_Entry_Index_Union) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.Index = newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching) GetOrCreateEntry(Index NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching_Entry_Index_Union) *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching_Entry {

	key := Index

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching) GetEntry(Index NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching_Entry_Index_Union) *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching_Entry {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching) DeleteEntry(Index NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching_Entry_Index_Union) {
	key := Index

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching_Entry struct to the
// list Entry of NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching) AppendEntry(v *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching_Entry) error {
	key := v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching_Entry_Index_Union]*NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching) GetType() uint32 {
	if t == nil || t.Type == nil {
		return 0
	}
	return *t.Type
}

// GetVendor retrieves the value of the leaf Vendor from the NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vendor is set, it can
// safely use t.GetVendor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vendor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching) GetVendor() NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching_Vendor_Union {
	if t == nil || t.Vendor == nil {
		return nil
	}
	return t.Vendor
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching.
func (*NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching_Entry represents the /nokia-conf/configure/groups/group/router/radius/proxy/attribute-matching/entry YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching_Entry struct {
	AccountingServerPolicy     *string                                                                                  `path:"accounting-server-policy" module:"nokia-conf"`
	AuthenticationServerPolicy *string                                                                                  `path:"authentication-server-policy" module:"nokia-conf"`
	Index                      NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching_Entry_Index_Union `path:"index" module:"nokia-conf"`
	PrefixString               *string                                                                                  `path:"prefix-string" module:"nokia-conf"`
	SuffixString               *string                                                                                  `path:"suffix-string" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching_Entry) IsYANGGoStruct() {
}

// GetAccountingServerPolicy retrieves the value of the leaf AccountingServerPolicy from the NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingServerPolicy is set, it can
// safely use t.GetAccountingServerPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingServerPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching_Entry) GetAccountingServerPolicy() string {
	if t == nil || t.AccountingServerPolicy == nil {
		return ""
	}
	return *t.AccountingServerPolicy
}

// GetAuthenticationServerPolicy retrieves the value of the leaf AuthenticationServerPolicy from the NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationServerPolicy is set, it can
// safely use t.GetAuthenticationServerPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationServerPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching_Entry) GetAuthenticationServerPolicy() string {
	if t == nil || t.AuthenticationServerPolicy == nil {
		return ""
	}
	return *t.AuthenticationServerPolicy
}

// GetIndex retrieves the value of the leaf Index from the NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching_Entry) GetIndex() NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching_Entry_Index_Union {
	if t == nil || t.Index == nil {
		return nil
	}
	return t.Index
}

// GetPrefixString retrieves the value of the leaf PrefixString from the NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixString is set, it can
// safely use t.GetPrefixString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching_Entry) GetPrefixString() string {
	if t == nil || t.PrefixString == nil {
		return ""
	}
	return *t.PrefixString
}

// GetSuffixString retrieves the value of the leaf SuffixString from the NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SuffixString is set, it can
// safely use t.GetSuffixString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SuffixString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching_Entry) GetSuffixString() string {
	if t == nil || t.SuffixString == nil {
		return ""
	}
	return *t.SuffixString
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching_Entry) Î›ListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"index": t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching_Entry) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching_Entry) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching_Entry.
func (*NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_AttributeMatching_Entry) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache represents the /nokia-conf/configure/groups/group/router/radius/proxy/cache YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache struct {
	AdminState          E_NokiaTypesSros_AdminState                                                     `path:"admin-state" module:"nokia-conf"`
	Key                 *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache_Key                 `path:"key" module:"nokia-conf" yangPresence:"true"`
	Timeout             *uint32                                                                         `path:"timeout" module:"nokia-conf"`
	TrackAccounting     *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache_TrackAccounting     `path:"track-accounting" module:"nokia-conf"`
	TrackAuthentication *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache_TrackAuthentication `path:"track-authentication" module:"nokia-conf"`
	TrackDeleteHoldTime *uint32                                                                         `path:"track-delete-hold-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache) IsYANGGoStruct() {}

// GetOrCreateKey retrieves the value of the Key field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache) GetOrCreateKey() *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache_Key {
	if t.Key != nil {
		return t.Key
	}
	t.Key = &NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache_Key{}
	return t.Key
}

// GetOrCreateTrackAccounting retrieves the value of the TrackAccounting field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache) GetOrCreateTrackAccounting() *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache_TrackAccounting {
	if t.TrackAccounting != nil {
		return t.TrackAccounting
	}
	t.TrackAccounting = &NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache_TrackAccounting{}
	return t.TrackAccounting
}

// GetOrCreateTrackAuthentication retrieves the value of the TrackAuthentication field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache) GetOrCreateTrackAuthentication() *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache_TrackAuthentication {
	if t.TrackAuthentication != nil {
		return t.TrackAuthentication
	}
	t.TrackAuthentication = &NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache_TrackAuthentication{}
	return t.TrackAuthentication
}

// GetKey returns the value of the Key struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache. If the receiver or the field Key is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache) GetKey() *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache_Key {
	if t != nil && t.Key != nil {
		return t.Key
	}
	return nil
}

// GetTrackAccounting returns the value of the TrackAccounting struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache. If the receiver or the field TrackAccounting is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache) GetTrackAccounting() *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache_TrackAccounting {
	if t != nil && t.TrackAccounting != nil {
		return t.TrackAccounting
	}
	return nil
}

// GetTrackAuthentication returns the value of the TrackAuthentication struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache. If the receiver or the field TrackAuthentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache) GetTrackAuthentication() *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache_TrackAuthentication {
	if t != nil && t.TrackAuthentication != nil {
		return t.TrackAuthentication
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 300
	}
	return *t.Timeout
}

// GetTrackDeleteHoldTime retrieves the value of the leaf TrackDeleteHoldTime from the NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TrackDeleteHoldTime is set, it can
// safely use t.GetTrackDeleteHoldTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TrackDeleteHoldTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache) GetTrackDeleteHoldTime() uint32 {
	if t == nil || t.TrackDeleteHoldTime == nil {
		return 0
	}
	return *t.TrackDeleteHoldTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Timeout == nil {
		var v uint32 = 300
		t.Timeout = &v
	}
	if t.TrackDeleteHoldTime == nil {
		var v uint32 = 0
		t.TrackDeleteHoldTime = &v
	}
	t.Key.PopulateDefaults()
	t.TrackAccounting.PopulateDefaults()
	t.TrackAuthentication.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache.
func (*NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache_Key represents the /nokia-conf/configure/groups/group/router/radius/proxy/cache/key YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache_Key struct {
	AttributeType *uint32                                                                     `path:"attribute-type" module:"nokia-conf"`
	PacketType    E_NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache_Key_PacketType `path:"packet-type" module:"nokia-conf"`
	Vendor        NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache_Key_Vendor_Union `path:"vendor" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache_Key implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache_Key) IsYANGGoStruct() {}

// GetAttributeType retrieves the value of the leaf AttributeType from the NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache_Key
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttributeType is set, it can
// safely use t.GetAttributeType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttributeType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache_Key) GetAttributeType() uint32 {
	if t == nil || t.AttributeType == nil {
		return 0
	}
	return *t.AttributeType
}

// GetPacketType retrieves the value of the leaf PacketType from the NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache_Key
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketType is set, it can
// safely use t.GetPacketType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache_Key) GetPacketType() E_NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache_Key_PacketType {
	if t == nil || t.PacketType == 0 {
		return 0
	}
	return t.PacketType
}

// GetVendor retrieves the value of the leaf Vendor from the NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache_Key
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vendor is set, it can
// safely use t.GetVendor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vendor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache_Key) GetVendor() NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache_Key_Vendor_Union {
	if t == nil || t.Vendor == nil {
		return nil
	}
	return t.Vendor
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache_Key
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache_Key) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache_Key) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache_Key"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache_Key) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache_Key) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache_Key.
func (*NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache_Key) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache_TrackAccounting represents the /nokia-conf/configure/groups/group/router/radius/proxy/cache/track-accounting YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache_TrackAccounting struct {
	AccountingOff *bool `path:"accounting-off" module:"nokia-conf"`
	AccountingOn  *bool `path:"accounting-on" module:"nokia-conf"`
	InterimUpdate *bool `path:"interim-update" module:"nokia-conf"`
	Start         *bool `path:"start" module:"nokia-conf"`
	Stop          *bool `path:"stop" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache_TrackAccounting implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache_TrackAccounting) IsYANGGoStruct() {}

// GetAccountingOff retrieves the value of the leaf AccountingOff from the NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache_TrackAccounting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingOff is set, it can
// safely use t.GetAccountingOff() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingOff == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache_TrackAccounting) GetAccountingOff() bool {
	if t == nil || t.AccountingOff == nil {
		return false
	}
	return *t.AccountingOff
}

// GetAccountingOn retrieves the value of the leaf AccountingOn from the NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache_TrackAccounting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingOn is set, it can
// safely use t.GetAccountingOn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingOn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache_TrackAccounting) GetAccountingOn() bool {
	if t == nil || t.AccountingOn == nil {
		return false
	}
	return *t.AccountingOn
}

// GetInterimUpdate retrieves the value of the leaf InterimUpdate from the NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache_TrackAccounting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterimUpdate is set, it can
// safely use t.GetInterimUpdate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterimUpdate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache_TrackAccounting) GetInterimUpdate() bool {
	if t == nil || t.InterimUpdate == nil {
		return false
	}
	return *t.InterimUpdate
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache_TrackAccounting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache_TrackAccounting) GetStart() bool {
	if t == nil || t.Start == nil {
		return false
	}
	return *t.Start
}

// GetStop retrieves the value of the leaf Stop from the NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache_TrackAccounting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Stop is set, it can
// safely use t.GetStop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Stop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache_TrackAccounting) GetStop() bool {
	if t == nil || t.Stop == nil {
		return false
	}
	return *t.Stop
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache_TrackAccounting
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache_TrackAccounting) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AccountingOff == nil {
		var v bool = false
		t.AccountingOff = &v
	}
	if t.AccountingOn == nil {
		var v bool = false
		t.AccountingOn = &v
	}
	if t.InterimUpdate == nil {
		var v bool = false
		t.InterimUpdate = &v
	}
	if t.Start == nil {
		var v bool = false
		t.Start = &v
	}
	if t.Stop == nil {
		var v bool = false
		t.Stop = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache_TrackAccounting) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache_TrackAccounting"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache_TrackAccounting) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache_TrackAccounting) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache_TrackAccounting.
func (*NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache_TrackAccounting) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache_TrackAuthentication represents the /nokia-conf/configure/groups/group/router/radius/proxy/cache/track-authentication YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache_TrackAuthentication struct {
	Accept *bool `path:"accept" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache_TrackAuthentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache_TrackAuthentication) IsYANGGoStruct() {
}

// GetAccept retrieves the value of the leaf Accept from the NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache_TrackAuthentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Accept is set, it can
// safely use t.GetAccept() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Accept == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache_TrackAuthentication) GetAccept() bool {
	if t == nil || t.Accept == nil {
		return true
	}
	return *t.Accept
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache_TrackAuthentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache_TrackAuthentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Accept == nil {
		var v bool = true
		t.Accept = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache_TrackAuthentication) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache_TrackAuthentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache_TrackAuthentication) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache_TrackAuthentication) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache_TrackAuthentication.
func (*NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Cache_TrackAuthentication) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Defaults represents the /nokia-conf/configure/groups/group/router/radius/proxy/defaults YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Defaults struct {
	AccountingServerPolicy     *string `path:"accounting-server-policy" module:"nokia-conf"`
	AuthenticationServerPolicy *string `path:"authentication-server-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Defaults implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Defaults) IsYANGGoStruct() {}

// GetAccountingServerPolicy retrieves the value of the leaf AccountingServerPolicy from the NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Defaults
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingServerPolicy is set, it can
// safely use t.GetAccountingServerPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingServerPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Defaults) GetAccountingServerPolicy() string {
	if t == nil || t.AccountingServerPolicy == nil {
		return ""
	}
	return *t.AccountingServerPolicy
}

// GetAuthenticationServerPolicy retrieves the value of the leaf AuthenticationServerPolicy from the NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Defaults
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationServerPolicy is set, it can
// safely use t.GetAuthenticationServerPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationServerPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Defaults) GetAuthenticationServerPolicy() string {
	if t == nil || t.AuthenticationServerPolicy == nil {
		return ""
	}
	return *t.AuthenticationServerPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Defaults
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Defaults) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Defaults) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Defaults"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Defaults) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Defaults) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Defaults.
func (*NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Defaults) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Interface represents the /nokia-conf/configure/groups/group/router/radius/proxy/interface YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Interface struct {
	InterfaceName *string `path:"interface-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Interface) IsYANGGoStruct() {}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Interface) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Î›ListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Interface struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Interface) Î›ListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	return map[string]interface{}{
		"interface-name": *t.InterfaceName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Interface) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Interface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Interface) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Interface.
func (*NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_Interface) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey represents the /nokia-conf/configure/groups/group/router/radius/proxy/load-balance-key YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey struct {
	Attribute_1 *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_1 `path:"attribute-1" module:"nokia-conf"`
	Attribute_2 *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_2 `path:"attribute-2" module:"nokia-conf"`
	Attribute_3 *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_3 `path:"attribute-3" module:"nokia-conf"`
	Attribute_4 *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_4 `path:"attribute-4" module:"nokia-conf"`
	Attribute_5 *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_5 `path:"attribute-5" module:"nokia-conf"`
	SourceIpUdp YANGEmpty                                                                        `path:"source-ip-udp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey) IsYANGGoStruct() {}

// GetOrCreateAttribute_1 retrieves the value of the Attribute_1 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey) GetOrCreateAttribute_1() *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_1 {
	if t.Attribute_1 != nil {
		return t.Attribute_1
	}
	t.Attribute_1 = &NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_1{}
	return t.Attribute_1
}

// GetOrCreateAttribute_2 retrieves the value of the Attribute_2 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey) GetOrCreateAttribute_2() *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_2 {
	if t.Attribute_2 != nil {
		return t.Attribute_2
	}
	t.Attribute_2 = &NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_2{}
	return t.Attribute_2
}

// GetOrCreateAttribute_3 retrieves the value of the Attribute_3 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey) GetOrCreateAttribute_3() *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_3 {
	if t.Attribute_3 != nil {
		return t.Attribute_3
	}
	t.Attribute_3 = &NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_3{}
	return t.Attribute_3
}

// GetOrCreateAttribute_4 retrieves the value of the Attribute_4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey) GetOrCreateAttribute_4() *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_4 {
	if t.Attribute_4 != nil {
		return t.Attribute_4
	}
	t.Attribute_4 = &NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_4{}
	return t.Attribute_4
}

// GetOrCreateAttribute_5 retrieves the value of the Attribute_5 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey) GetOrCreateAttribute_5() *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_5 {
	if t.Attribute_5 != nil {
		return t.Attribute_5
	}
	t.Attribute_5 = &NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_5{}
	return t.Attribute_5
}

// GetAttribute_1 returns the value of the Attribute_1 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey. If the receiver or the field Attribute_1 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey) GetAttribute_1() *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_1 {
	if t != nil && t.Attribute_1 != nil {
		return t.Attribute_1
	}
	return nil
}

// GetAttribute_2 returns the value of the Attribute_2 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey. If the receiver or the field Attribute_2 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey) GetAttribute_2() *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_2 {
	if t != nil && t.Attribute_2 != nil {
		return t.Attribute_2
	}
	return nil
}

// GetAttribute_3 returns the value of the Attribute_3 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey. If the receiver or the field Attribute_3 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey) GetAttribute_3() *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_3 {
	if t != nil && t.Attribute_3 != nil {
		return t.Attribute_3
	}
	return nil
}

// GetAttribute_4 returns the value of the Attribute_4 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey. If the receiver or the field Attribute_4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey) GetAttribute_4() *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_4 {
	if t != nil && t.Attribute_4 != nil {
		return t.Attribute_4
	}
	return nil
}

// GetAttribute_5 returns the value of the Attribute_5 struct pointer
// from NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey. If the receiver or the field Attribute_5 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey) GetAttribute_5() *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_5 {
	if t != nil && t.Attribute_5 != nil {
		return t.Attribute_5
	}
	return nil
}

// GetSourceIpUdp retrieves the value of the leaf SourceIpUdp from the NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceIpUdp is set, it can
// safely use t.GetSourceIpUdp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceIpUdp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey) GetSourceIpUdp() YANGEmpty {
	if t == nil || t.SourceIpUdp == false {
		return false
	}
	return t.SourceIpUdp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Attribute_1.PopulateDefaults()
	t.Attribute_2.PopulateDefaults()
	t.Attribute_3.PopulateDefaults()
	t.Attribute_4.PopulateDefaults()
	t.Attribute_5.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey.
func (*NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_1 represents the /nokia-conf/configure/groups/group/router/radius/proxy/load-balance-key/attribute-1 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_1 struct {
	Type   *uint32                                                                                      `path:"type" module:"nokia-conf"`
	Vendor NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_1_Vendor_Union `path:"vendor" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_1 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_1) IsYANGGoStruct() {
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_1) GetType() uint32 {
	if t == nil || t.Type == nil {
		return 0
	}
	return *t.Type
}

// GetVendor retrieves the value of the leaf Vendor from the NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vendor is set, it can
// safely use t.GetVendor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vendor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_1) GetVendor() NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_1_Vendor_Union {
	if t == nil || t.Vendor == nil {
		return nil
	}
	return t.Vendor
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_1
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_1) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_1) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_1"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_1) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_1) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_1.
func (*NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_1) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_2 represents the /nokia-conf/configure/groups/group/router/radius/proxy/load-balance-key/attribute-2 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_2 struct {
	Type   *uint32                                                                                      `path:"type" module:"nokia-conf"`
	Vendor NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_2_Vendor_Union `path:"vendor" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_2 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_2) IsYANGGoStruct() {
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_2) GetType() uint32 {
	if t == nil || t.Type == nil {
		return 0
	}
	return *t.Type
}

// GetVendor retrieves the value of the leaf Vendor from the NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vendor is set, it can
// safely use t.GetVendor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vendor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_2) GetVendor() NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_2_Vendor_Union {
	if t == nil || t.Vendor == nil {
		return nil
	}
	return t.Vendor
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_2
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_2) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_2) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_2"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_2) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_2) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_2.
func (*NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_2) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_3 represents the /nokia-conf/configure/groups/group/router/radius/proxy/load-balance-key/attribute-3 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_3 struct {
	Type   *uint32                                                                                      `path:"type" module:"nokia-conf"`
	Vendor NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_3_Vendor_Union `path:"vendor" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_3 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_3) IsYANGGoStruct() {
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_3) GetType() uint32 {
	if t == nil || t.Type == nil {
		return 0
	}
	return *t.Type
}

// GetVendor retrieves the value of the leaf Vendor from the NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vendor is set, it can
// safely use t.GetVendor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vendor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_3) GetVendor() NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_3_Vendor_Union {
	if t == nil || t.Vendor == nil {
		return nil
	}
	return t.Vendor
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_3
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_3) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_3) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_3"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_3) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_3) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_3.
func (*NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_3) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_4 represents the /nokia-conf/configure/groups/group/router/radius/proxy/load-balance-key/attribute-4 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_4 struct {
	Type   *uint32                                                                                      `path:"type" module:"nokia-conf"`
	Vendor NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_4_Vendor_Union `path:"vendor" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_4) IsYANGGoStruct() {
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_4) GetType() uint32 {
	if t == nil || t.Type == nil {
		return 0
	}
	return *t.Type
}

// GetVendor retrieves the value of the leaf Vendor from the NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vendor is set, it can
// safely use t.GetVendor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vendor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_4) GetVendor() NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_4_Vendor_Union {
	if t == nil || t.Vendor == nil {
		return nil
	}
	return t.Vendor
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_4) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_4) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_4.
func (*NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_4) Î›BelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_5 represents the /nokia-conf/configure/groups/group/router/radius/proxy/load-balance-key/attribute-5 YANG schema element.
type NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_5 struct {
	Type   *uint32                                                                                      `path:"type" module:"nokia-conf"`
	Vendor NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_5_Vendor_Union `path:"vendor" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_5 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_5) IsYANGGoStruct() {
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_5
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_5) GetType() uint32 {
	if t == nil || t.Type == nil {
		return 0
	}
	return *t.Type
}

// GetVendor retrieves the value of the leaf Vendor from the NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_5
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vendor is set, it can
// safely use t.GetVendor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vendor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_5) GetVendor() NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_5_Vendor_Union {
	if t == nil || t.Vendor == nil {
		return nil
	}
	return t.Vendor
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_5
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_5) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_5) Î›Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_5"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_5) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.Î›Validate(opts...)
}

// Î›EnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_5) Î›EnumTypeMap() map[string][]reflect.Type {
	return Î›EnumTypes
}

// Î›BelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_5.
func (*NokiaConf_Configure_Groups_Group_Router_Radius_Proxy_LoadBalanceKey_Attribute_5) Î›BelongingModule() string {
	return "nokia-conf"
}
